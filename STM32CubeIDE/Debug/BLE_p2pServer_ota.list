
BLE_p2pServer_ota.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvec       000000c0  10041000  10041000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027204  100410c0  100410c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  100682c4  100682c4  000282c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  100682c8  100682c8  000282c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00001f08  100682cc  100682cc  000282cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  1006a1d4  1006a1d4  0002a1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002bc  20001298  1006a1dc  0002a298  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram_preamble 0000002c  20000004  20000004  0002c004  2**2
                  ALLOC
  8 .ram_preamble_2 00000028  20000034  20000034  0002c004  2**2
                  ALLOC
  9 .bss.blueRAM  000000d4  200000c0  200000c0  0002c004  2**2
                  ALLOC
 10 .bss          00001104  20000194  20000194  0002c004  2**2
                  ALLOC
 11 .noinit       000025c4  20001554  1006a498  0002b554  2**2
                  ALLOC
 12 .ota_region_end 00000004  1006a498  1006a498  0002b498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .heap         00000000  20003b18  20003b18  0002b49c  2**0
                  CONTENTS
 14 .stack        00000c00  2000f400  2000f400  0002c400  2**0
                  ALLOC
 15 .rom_info     00000000  10000000  10000000  0002b49c  2**0
                  CONTENTS
 16 .ARM.attributes 0000002c  00000000  00000000  0002b49c  2**0
                  CONTENTS, READONLY
 17 .debug_info   0002c12b  00000000  00000000  0002b4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00007775  00000000  00000000  000575f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003098  00000000  00000000  0005ed68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00002475  00000000  00000000  00061e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00026d8a  00000000  00000000  00064275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   000314f3  00000000  00000000  0008afff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000ce5a6  00000000  00000000  000bc4f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      0000023b  00000000  00000000  0018aa98  2**0
                  CONTENTS, READONLY
 25 .arm_vfe_header 00000004  00000000  00000000  0018acd4  2**2
                  CONTENTS, READONLY
 26 .debug_frame  0000bf80  00000000  00000000  0018acd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line_str 00000152  00000000  00000000  00196c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loclists 0000033b  00000000  00000000  00196daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

100410c0 <MagicKeywordAddress>:
100410c0:	98 a4 06 10                                         ....

100410c4 <blue_unit_conversion>:
                __CODE__
                __THUMB__
                __EXPORT__ blue_unit_conversion

EXPORT_FUNC(blue_unit_conversion)
                  PUSH    {r4, lr}
100410c4:	b510      	push	{r4, lr}
                  CMP     r0, r2
100410c6:	4290      	cmp	r0, r2
                  BLS     mul32
100410c8:	d916      	bls.n	100410f8 <mul32>
                  UXTH    r2, r1
100410ca:	b28a      	uxth	r2, r1
                  LSRS    r3, r0, #16
100410cc:	0c03      	lsrs	r3, r0, #16
                  LSRS    r1, r1, #16
100410ce:	0c09      	lsrs	r1, r1, #16
                  MOV     r4, r1
100410d0:	460c      	mov	r4, r1
                  MULS    r1, r3, r1
100410d2:	4359      	muls	r1, r3
                  UXTH    r0, r0
100410d4:	b280      	uxth	r0, r0
                  MULS    r3, r2, r3
100410d6:	4353      	muls	r3, r2
                  MULS    r4, r0, r4
100410d8:	4344      	muls	r4, r0
                  MULS    r0, r2, r0
100410da:	4350      	muls	r0, r2
                  ADDS    r3, r3, r4
100410dc:	191b      	adds	r3, r3, r4
                  LSLS    r2, r3, #16
100410de:	041a      	lsls	r2, r3, #16
                  LSRS    r3, r3, #16
100410e0:	0c1b      	lsrs	r3, r3, #16
                  ADDS    r0, r2, r0
100410e2:	1810      	adds	r0, r2, r0
                  ADCS    r1, r3
100410e4:	4159      	adcs	r1, r3

                  MOVS    r2, #128
100410e6:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100410e8:	0352      	lsls	r2, r2, #13
                  MOVS    r3, #0
100410ea:	2300      	movs	r3, #0
                  ADDS    r2, r2, r0
100410ec:	1812      	adds	r2, r2, r0
                  ADCS    r3, r1
100410ee:	414b      	adcs	r3, r1
                  LSRS    r2, r2, #21
100410f0:	0d52      	lsrs	r2, r2, #21
                  LSLS    r0, r3, #11
100410f2:	02d8      	lsls	r0, r3, #11
                  ORRS    r0, r2
100410f4:	4310      	orrs	r0, r2

                  POP {r4, pc}
100410f6:	bd10      	pop	{r4, pc}

100410f8 <mul32>:

                  ENDFUNC

EXPORT_FUNC(mul32)
                  MULS    r0, r1, r0
100410f8:	4348      	muls	r0, r1
                  MOVS    r2, #128
100410fa:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100410fc:	0352      	lsls	r2, r2, #13
                  ADDS    r2, r2, r0
100410fe:	1812      	adds	r2, r2, r0
                  LSRS    r2, r2, #21
10041100:	0d52      	lsrs	r2, r2, #21
                  MOV     r0, r2
10041102:	4610      	mov	r0, r2

                  POP {r4, pc}
10041104:	bd10      	pop	{r4, pc}
10041106:	46c0      	nop			@ (mov r8, r8)

10041108 <Osal_MemCpy>:
                __CODE__
                __THUMB__
                __EXPORT__ Osal_MemCpy

EXPORT_FUNC(Osal_MemCpy)
                LSLS	R3, R1, #30
10041108:	078b      	lsls	r3, r1, #30
                BEQ	    memcpy_1
1004110a:	d007      	beq.n	1004111c <memcpy_1>

1004110c <memcpy_byte>:
LABEL(memcpy_byte) /* Copy bytes until src is aligned */
                SUBS	R2, R2, #1
1004110c:	3a01      	subs	r2, #1
                BCC	    memcpy_exit
1004110e:	d322      	bcc.n	10041156 <memcpy_exit>
                LDRB	R3, [R1]
10041110:	780b      	ldrb	r3, [r1, #0]
      	        ADDS	R1, R1, #1
10041112:	3101      	adds	r1, #1
      	        STRB	R3, [R0]
10041114:	7003      	strb	r3, [r0, #0]
                ADDS	R0, R0, #1
10041116:	3001      	adds	r0, #1
                LSLS	R3, R1, #30
10041118:	078b      	lsls	r3, r1, #30
                BNE	    memcpy_byte
1004111a:	d1f7      	bne.n	1004110c <memcpy_byte>

1004111c <memcpy_1>:
LABEL(memcpy_1)
                LSLS	R3, R0, #30
1004111c:	0783      	lsls	r3, r0, #30
                BEQ	    memcpy4
1004111e:	d030      	beq.n	10041182 <memcpy4>
                CMN	    R3, R3
10041120:	42db      	cmn	r3, r3
                BEQ	    memcpy_7
10041122:	d019      	beq.n	10041158 <memcpy_7>
                SUBS	R0, R0, #1
10041124:	3801      	subs	r0, #1
                SUBS	R2, R2, #4
10041126:	3a04      	subs	r2, #4
                BCC	    memcpy_3
10041128:	d308      	bcc.n	1004113c <memcpy_3>

1004112a <memcpy_2>:
LABEL(memcpy_2)  /* Load one word from src and write one byte, one half-word and another byte to dst */
                LDM	    R1!, {R3}
1004112a:	c908      	ldmia	r1!, {r3}
                STRB	R3, [R0, #1]
1004112c:	7043      	strb	r3, [r0, #1]
                LSRS	R3, R3, #8
1004112e:	0a1b      	lsrs	r3, r3, #8
                STRH	R3, [R0, #2]
10041130:	8043      	strh	r3, [r0, #2]
                LSRS	R3, R3, #16
10041132:	0c1b      	lsrs	r3, r3, #16
                STRB	R3, [R0, #4]
10041134:	7103      	strb	r3, [r0, #4]
                ADDS	R0, R0, #4
10041136:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10041138:	3a04      	subs	r2, #4
                BCS	    memcpy_2
1004113a:	d2f6      	bcs.n	1004112a <memcpy_2>

1004113c <memcpy_3>:
LABEL(memcpy_3)
                LSLS	R2, R2, #31
1004113c:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_5
1004113e:	d307      	bcc.n	10041150 <memcpy_5>
                LDRH	R3, [R1]
10041140:	880b      	ldrh	r3, [r1, #0]
                STRB	R3, [R0, #1]
10041142:	7043      	strb	r3, [r0, #1]
                BEQ	    memcpy_4
10041144:	d001      	beq.n	1004114a <memcpy_4>
                LDRB	R2, [R1, #2]
10041146:	788a      	ldrb	r2, [r1, #2]
                STRB	R2, [R0, #3]
10041148:	70c2      	strb	r2, [r0, #3]

1004114a <memcpy_4>:
LABEL(memcpy_4)
                LSRS	R3, R3, #8
1004114a:	0a1b      	lsrs	r3, r3, #8
                STRB	R3, [R0, #2]
1004114c:	7083      	strb	r3, [r0, #2]
                BX	    LR
1004114e:	4770      	bx	lr

10041150 <memcpy_5>:
LABEL(memcpy_5)
                BEQ	    memcpy_exit
10041150:	d001      	beq.n	10041156 <memcpy_exit>
                LDRB	R3, [R1]
10041152:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0, #1]
10041154:	7043      	strb	r3, [r0, #1]

10041156 <memcpy_exit>:
LABEL(memcpy_exit)
                BX	    LR
10041156:	4770      	bx	lr

10041158 <memcpy_7>:
LABEL(memcpy_7)
                SUBS	R2, R2, #4
10041158:	3a04      	subs	r2, #4
                BCC	    memcpy_9
1004115a:	d306      	bcc.n	1004116a <memcpy_9>

1004115c <memcpy_8>:
LABEL(memcpy_8)  /* Load one word from src and write half-words to dst */
                LDM	    R1!, {R3}
1004115c:	c908      	ldmia	r1!, {r3}
                STRH	R3, [R0]
1004115e:	8003      	strh	r3, [r0, #0]
                LSRS	R3, R3, #16
10041160:	0c1b      	lsrs	r3, r3, #16
                STRH	R3, [R0, #2]
10041162:	8043      	strh	r3, [r0, #2]
                ADDS	R0, R0, #4
10041164:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10041166:	3a04      	subs	r2, #4
                BCS	    memcpy_8
10041168:	d2f8      	bcs.n	1004115c <memcpy_8>

1004116a <memcpy_9>:
LABEL(memcpy_9)
                LSLS	R2, R2, #31
1004116a:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_10
1004116c:	d305      	bcc.n	1004117a <memcpy_10>
                LDRH	R3, [R1]
1004116e:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
10041170:	8003      	strh	r3, [r0, #0]
                BEQ	    memcpy_11
10041172:	d005      	beq.n	10041180 <memcpy_11>
                LDRB	R3, [R1, #2]
10041174:	788b      	ldrb	r3, [r1, #2]
                STRB	R3, [R0, #2]
10041176:	7083      	strb	r3, [r0, #2]
                BX	    LR
10041178:	4770      	bx	lr

1004117a <memcpy_10>:
LABEL(memcpy_10)
                BEQ	    memcpy_11
1004117a:	d001      	beq.n	10041180 <memcpy_11>
                LDRB	R3, [R1]
1004117c:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
1004117e:	7003      	strb	r3, [r0, #0]

10041180 <memcpy_11>:
LABEL(memcpy_11)
                BX	    LR
10041180:	4770      	bx	lr

10041182 <memcpy4>:

LABEL(memcpy4)
                PUSH	{R4-R6}
10041182:	b470      	push	{r4, r5, r6}
                SUBS	R2, #16
10041184:	3a10      	subs	r2, #16
                BCC	    memcpy4_2words
10041186:	d303      	bcc.n	10041190 <memcpy4_2words>

10041188 <memcpy4_4words>:
LABEL(memcpy4_4words)
                LDM 	R1!, {R3-R6}
10041188:	c978      	ldmia	r1!, {r3, r4, r5, r6}
                STM	    R0!, {R3-R6}
1004118a:	c078      	stmia	r0!, {r3, r4, r5, r6}
                SUBS	R2, #16
1004118c:	3a10      	subs	r2, #16
                BCS	    memcpy4_4words
1004118e:	d2fb      	bcs.n	10041188 <memcpy4_4words>

10041190 <memcpy4_2words>:
LABEL(memcpy4_2words)
                LSLS	R3, R2, #29
10041190:	0753      	lsls	r3, r2, #29
                BCC	    memcpy4_word
10041192:	d301      	bcc.n	10041198 <memcpy4_word>
                LDM	    R1!, {R3, R4}
10041194:	c918      	ldmia	r1!, {r3, r4}
                STM	    R0!, {R3, R4}
10041196:	c018      	stmia	r0!, {r3, r4}

10041198 <memcpy4_word>:
LABEL(memcpy4_word)
                BPL 	memcpy4_halfword
10041198:	d501      	bpl.n	1004119e <memcpy4_halfword>
                LDM	    R1!, {R3}
1004119a:	c908      	ldmia	r1!, {r3}
                STM	    R0!, {R3}
1004119c:	c008      	stmia	r0!, {r3}

1004119e <memcpy4_halfword>:
LABEL(memcpy4_halfword)
                LSLS	R2, R2, #31
1004119e:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy4_byte
100411a0:	d304      	bcc.n	100411ac <memcpy4_byte>
                LDRH	R3, [R1]
100411a2:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
100411a4:	8003      	strh	r3, [r0, #0]
                ADDS	R0, R0, #2
100411a6:	3002      	adds	r0, #2
                ADDS	R1, R1, #2
100411a8:	3102      	adds	r1, #2
                CMP	    R2, #0
100411aa:	2a00      	cmp	r2, #0

100411ac <memcpy4_byte>:
LABEL(memcpy4_byte)
                BPL	    memcpy4_exit
100411ac:	d501      	bpl.n	100411b2 <memcpy4_exit>
                LDRB	R3, [R1]
100411ae:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
100411b0:	7003      	strb	r3, [r0, #0]

100411b2 <memcpy4_exit>:
LABEL(memcpy4_exit)
                POP	    {R4-R6}
100411b2:	bc70      	pop	{r4, r5, r6}
                BX	    LR
100411b4:	4770      	bx	lr
100411b6:	46c0      	nop			@ (mov r8, r8)

100411b8 <CPUcontextSave>:
                __THUMB__
                __EXPORT__ CPUcontextSave
                __EXPORT__ CPUcontextRestore
                __IMPORT__ RAM_VR
EXPORT_FUNC(CPUcontextSave)
                MRS    R2, CONTROL             /* load the CONTROL register into R2 */
100411b8:	f3ef 8214 	mrs	r2, CONTROL
                MRS    R1, PSP                 /* load the process stack pointer into R1 */
100411bc:	f3ef 8109 	mrs	r1, PSP
                LDR    R0, =0
100411c0:	4815      	ldr	r0, [pc, #84]	@ (10041218 <CPUcontextRestore+0x2c>)
                MSR    CONTROL, R0             /* Switch to Main Stack Pointer */
100411c2:	f380 8814 	msr	CONTROL, r0
                ISB
100411c6:	f3bf 8f6f 	isb	sy

                PUSH   { r4 - r7, lr }         /* store R4-R7 and LR (5 words) onto the stack */
100411ca:	b5f0      	push	{r4, r5, r6, r7, lr}
                MOV    R3, R8                  /* mov thread {r8 - r12} to {r3 - r7} */
100411cc:	4643      	mov	r3, r8
                MOV    R4, R9
100411ce:	464c      	mov	r4, r9
                MOV    R5, R10
100411d0:	4655      	mov	r5, sl
                MOV    R6, R11
100411d2:	465e      	mov	r6, fp
                MOV    R7, R12
100411d4:	4667      	mov	r7, ip
                PUSH   {R3-R7}                 /* store R8-R12 (5 words) onto the stack */
100411d6:	b4f8      	push	{r3, r4, r5, r6, r7}

                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
100411d8:	4c10      	ldr	r4, [pc, #64]	@ (1004121c <CPUcontextRestore+0x30>)
                MRS    R3, MSP                 /* load the stack pointer into R3 */
100411da:	f3ef 8308 	mrs	r3, MSP
                STR    R3, [R4,#4]             /* store the MSP into RAM_VR.SavedMSP (second word of the structure) */
100411de:	6063      	str	r3, [r4, #4]

                PUSH  { r1, r2 }               /*  store PSP, CONTROL */
100411e0:	b406      	push	{r1, r2}

                DSB
100411e2:	f3bf 8f4f 	dsb	sy
                WFI                            /* all saved, trigger deep sleep */
100411e6:	bf30      	wfi

                NOP                            /* NOP instructions added if an interrupt (NOT WAKEUP SOURCE) is raised */
100411e8:	46c0      	nop			@ (mov r8, r8)
                NOP                            /* the device gates/stop the CPU clock 2 system clock cycles after this WFI */
100411ea:	46c0      	nop			@ (mov r8, r8)

100411ec <CPUcontextRestore>:
EXPORT_FUNC(CPUcontextRestore)
                /* Even if we fall through the WFI instruction, we will immediately
                 * execute a context restore and end up where we left off with no
                 * ill effects.  Normally at this point the core will either be
                 * powered off or reset (depending on the deep sleep level). */
                LDR    R4, =RAM_VR              /* load address of RAM_VR into R4 */
100411ec:	4c0b      	ldr	r4, [pc, #44]	@ (1004121c <CPUcontextRestore+0x30>)
                LDR    R4, [R4,#4]              /* load the MSP from RAM_VR.SavedMSP (second word of the structure) */
100411ee:	6864      	ldr	r4, [r4, #4]
                MSR    MSP, R4                  /* restore the MSP from R4 */
100411f0:	f384 8808 	msr	MSP, r4

                SUB    SP, #0x8
100411f4:	b082      	sub	sp, #8
                POP    { R0, R1 }               /* load PSP from the stack in R0, and  load CONTROL register from the stack in R1 */
100411f6:	bc03      	pop	{r0, r1}

                POP    { R3-R7 }                /* load R8-R12 (5 words) from the stack */
100411f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
                MOV    R8, R3                   /* mov {r3 - r7} to {r8 - r12} */
100411fa:	4698      	mov	r8, r3
                MOV    R9, R4
100411fc:	46a1      	mov	r9, r4
                MOV    R10, R5
100411fe:	46aa      	mov	sl, r5
                MOV    R11, R6
10041200:	46b3      	mov	fp, r6
                MOV    R12, R7
10041202:	46bc      	mov	ip, r7
                POP    { R4 - R7 }              /* load R4-R7 (4 words) from the stack */
10041204:	bcf0      	pop	{r4, r5, r6, r7}
                POP    { R2 }                   /* load LR from the stack */
10041206:	bc04      	pop	{r2}

                MSR   PSP, R0                   /* restore PSP from R0 */
10041208:	f380 8809 	msr	PSP, r0
                MSR   CONTROL , R1              /* restore CONTROL register from R1 */
1004120c:	f381 8814 	msr	CONTROL, r1
                ISB
10041210:	f3bf 8f6f 	isb	sy

                BX  R2                          /*load PC (1 words) from the stack */
10041214:	4710      	bx	r2
10041216:	46c0      	nop			@ (mov r8, r8)
                LDR    R0, =0
10041218:	00000000 	.word	0x00000000
                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
1004121c:	20000004 	.word	0x20000004

10041220 <strcmp>:
10041220:	7802      	ldrb	r2, [r0, #0]
10041222:	780b      	ldrb	r3, [r1, #0]
10041224:	2a00      	cmp	r2, #0
10041226:	d003      	beq.n	10041230 <strcmp+0x10>
10041228:	3001      	adds	r0, #1
1004122a:	3101      	adds	r1, #1
1004122c:	429a      	cmp	r2, r3
1004122e:	d0f7      	beq.n	10041220 <strcmp>
10041230:	1ad0      	subs	r0, r2, r3
10041232:	4770      	bx	lr

10041234 <__gnu_thumb1_case_shi>:
10041234:	b403      	push	{r0, r1}
10041236:	4671      	mov	r1, lr
10041238:	0849      	lsrs	r1, r1, #1
1004123a:	0040      	lsls	r0, r0, #1
1004123c:	0049      	lsls	r1, r1, #1
1004123e:	5e09      	ldrsh	r1, [r1, r0]
10041240:	0049      	lsls	r1, r1, #1
10041242:	448e      	add	lr, r1
10041244:	bc03      	pop	{r0, r1}
10041246:	4770      	bx	lr

10041248 <__udivsi3>:
10041248:	2200      	movs	r2, #0
1004124a:	0843      	lsrs	r3, r0, #1
1004124c:	428b      	cmp	r3, r1
1004124e:	d374      	bcc.n	1004133a <__udivsi3+0xf2>
10041250:	0903      	lsrs	r3, r0, #4
10041252:	428b      	cmp	r3, r1
10041254:	d35f      	bcc.n	10041316 <__udivsi3+0xce>
10041256:	0a03      	lsrs	r3, r0, #8
10041258:	428b      	cmp	r3, r1
1004125a:	d344      	bcc.n	100412e6 <__udivsi3+0x9e>
1004125c:	0b03      	lsrs	r3, r0, #12
1004125e:	428b      	cmp	r3, r1
10041260:	d328      	bcc.n	100412b4 <__udivsi3+0x6c>
10041262:	0c03      	lsrs	r3, r0, #16
10041264:	428b      	cmp	r3, r1
10041266:	d30d      	bcc.n	10041284 <__udivsi3+0x3c>
10041268:	22ff      	movs	r2, #255	@ 0xff
1004126a:	0209      	lsls	r1, r1, #8
1004126c:	ba12      	rev	r2, r2
1004126e:	0c03      	lsrs	r3, r0, #16
10041270:	428b      	cmp	r3, r1
10041272:	d302      	bcc.n	1004127a <__udivsi3+0x32>
10041274:	1212      	asrs	r2, r2, #8
10041276:	0209      	lsls	r1, r1, #8
10041278:	d065      	beq.n	10041346 <__udivsi3+0xfe>
1004127a:	0b03      	lsrs	r3, r0, #12
1004127c:	428b      	cmp	r3, r1
1004127e:	d319      	bcc.n	100412b4 <__udivsi3+0x6c>
10041280:	e000      	b.n	10041284 <__udivsi3+0x3c>
10041282:	0a09      	lsrs	r1, r1, #8
10041284:	0bc3      	lsrs	r3, r0, #15
10041286:	428b      	cmp	r3, r1
10041288:	d301      	bcc.n	1004128e <__udivsi3+0x46>
1004128a:	03cb      	lsls	r3, r1, #15
1004128c:	1ac0      	subs	r0, r0, r3
1004128e:	4152      	adcs	r2, r2
10041290:	0b83      	lsrs	r3, r0, #14
10041292:	428b      	cmp	r3, r1
10041294:	d301      	bcc.n	1004129a <__udivsi3+0x52>
10041296:	038b      	lsls	r3, r1, #14
10041298:	1ac0      	subs	r0, r0, r3
1004129a:	4152      	adcs	r2, r2
1004129c:	0b43      	lsrs	r3, r0, #13
1004129e:	428b      	cmp	r3, r1
100412a0:	d301      	bcc.n	100412a6 <__udivsi3+0x5e>
100412a2:	034b      	lsls	r3, r1, #13
100412a4:	1ac0      	subs	r0, r0, r3
100412a6:	4152      	adcs	r2, r2
100412a8:	0b03      	lsrs	r3, r0, #12
100412aa:	428b      	cmp	r3, r1
100412ac:	d301      	bcc.n	100412b2 <__udivsi3+0x6a>
100412ae:	030b      	lsls	r3, r1, #12
100412b0:	1ac0      	subs	r0, r0, r3
100412b2:	4152      	adcs	r2, r2
100412b4:	0ac3      	lsrs	r3, r0, #11
100412b6:	428b      	cmp	r3, r1
100412b8:	d301      	bcc.n	100412be <__udivsi3+0x76>
100412ba:	02cb      	lsls	r3, r1, #11
100412bc:	1ac0      	subs	r0, r0, r3
100412be:	4152      	adcs	r2, r2
100412c0:	0a83      	lsrs	r3, r0, #10
100412c2:	428b      	cmp	r3, r1
100412c4:	d301      	bcc.n	100412ca <__udivsi3+0x82>
100412c6:	028b      	lsls	r3, r1, #10
100412c8:	1ac0      	subs	r0, r0, r3
100412ca:	4152      	adcs	r2, r2
100412cc:	0a43      	lsrs	r3, r0, #9
100412ce:	428b      	cmp	r3, r1
100412d0:	d301      	bcc.n	100412d6 <__udivsi3+0x8e>
100412d2:	024b      	lsls	r3, r1, #9
100412d4:	1ac0      	subs	r0, r0, r3
100412d6:	4152      	adcs	r2, r2
100412d8:	0a03      	lsrs	r3, r0, #8
100412da:	428b      	cmp	r3, r1
100412dc:	d301      	bcc.n	100412e2 <__udivsi3+0x9a>
100412de:	020b      	lsls	r3, r1, #8
100412e0:	1ac0      	subs	r0, r0, r3
100412e2:	4152      	adcs	r2, r2
100412e4:	d2cd      	bcs.n	10041282 <__udivsi3+0x3a>
100412e6:	09c3      	lsrs	r3, r0, #7
100412e8:	428b      	cmp	r3, r1
100412ea:	d301      	bcc.n	100412f0 <__udivsi3+0xa8>
100412ec:	01cb      	lsls	r3, r1, #7
100412ee:	1ac0      	subs	r0, r0, r3
100412f0:	4152      	adcs	r2, r2
100412f2:	0983      	lsrs	r3, r0, #6
100412f4:	428b      	cmp	r3, r1
100412f6:	d301      	bcc.n	100412fc <__udivsi3+0xb4>
100412f8:	018b      	lsls	r3, r1, #6
100412fa:	1ac0      	subs	r0, r0, r3
100412fc:	4152      	adcs	r2, r2
100412fe:	0943      	lsrs	r3, r0, #5
10041300:	428b      	cmp	r3, r1
10041302:	d301      	bcc.n	10041308 <__udivsi3+0xc0>
10041304:	014b      	lsls	r3, r1, #5
10041306:	1ac0      	subs	r0, r0, r3
10041308:	4152      	adcs	r2, r2
1004130a:	0903      	lsrs	r3, r0, #4
1004130c:	428b      	cmp	r3, r1
1004130e:	d301      	bcc.n	10041314 <__udivsi3+0xcc>
10041310:	010b      	lsls	r3, r1, #4
10041312:	1ac0      	subs	r0, r0, r3
10041314:	4152      	adcs	r2, r2
10041316:	08c3      	lsrs	r3, r0, #3
10041318:	428b      	cmp	r3, r1
1004131a:	d301      	bcc.n	10041320 <__udivsi3+0xd8>
1004131c:	00cb      	lsls	r3, r1, #3
1004131e:	1ac0      	subs	r0, r0, r3
10041320:	4152      	adcs	r2, r2
10041322:	0883      	lsrs	r3, r0, #2
10041324:	428b      	cmp	r3, r1
10041326:	d301      	bcc.n	1004132c <__udivsi3+0xe4>
10041328:	008b      	lsls	r3, r1, #2
1004132a:	1ac0      	subs	r0, r0, r3
1004132c:	4152      	adcs	r2, r2
1004132e:	0843      	lsrs	r3, r0, #1
10041330:	428b      	cmp	r3, r1
10041332:	d301      	bcc.n	10041338 <__udivsi3+0xf0>
10041334:	004b      	lsls	r3, r1, #1
10041336:	1ac0      	subs	r0, r0, r3
10041338:	4152      	adcs	r2, r2
1004133a:	1a41      	subs	r1, r0, r1
1004133c:	d200      	bcs.n	10041340 <__udivsi3+0xf8>
1004133e:	4601      	mov	r1, r0
10041340:	4152      	adcs	r2, r2
10041342:	4610      	mov	r0, r2
10041344:	4770      	bx	lr
10041346:	e7ff      	b.n	10041348 <__udivsi3+0x100>
10041348:	b501      	push	{r0, lr}
1004134a:	2000      	movs	r0, #0
1004134c:	f000 f806 	bl	1004135c <__aeabi_idiv0>
10041350:	bd02      	pop	{r1, pc}
10041352:	46c0      	nop			@ (mov r8, r8)

10041354 <__aeabi_uidivmod>:
10041354:	2900      	cmp	r1, #0
10041356:	d0f7      	beq.n	10041348 <__udivsi3+0x100>
10041358:	e776      	b.n	10041248 <__udivsi3>
1004135a:	4770      	bx	lr

1004135c <__aeabi_idiv0>:
1004135c:	4770      	bx	lr
1004135e:	46c0      	nop			@ (mov r8, r8)

10041360 <__aeabi_llsl>:
10041360:	4091      	lsls	r1, r2
10041362:	0003      	movs	r3, r0
10041364:	4090      	lsls	r0, r2
10041366:	469c      	mov	ip, r3
10041368:	3a20      	subs	r2, #32
1004136a:	4093      	lsls	r3, r2
1004136c:	4319      	orrs	r1, r3
1004136e:	4252      	negs	r2, r2
10041370:	4663      	mov	r3, ip
10041372:	40d3      	lsrs	r3, r2
10041374:	4319      	orrs	r1, r3
10041376:	4770      	bx	lr

10041378 <__aeabi_cdrcmple>:
10041378:	4684      	mov	ip, r0
1004137a:	0010      	movs	r0, r2
1004137c:	4662      	mov	r2, ip
1004137e:	468c      	mov	ip, r1
10041380:	0019      	movs	r1, r3
10041382:	4663      	mov	r3, ip
10041384:	e000      	b.n	10041388 <__aeabi_cdcmpeq>
10041386:	46c0      	nop			@ (mov r8, r8)

10041388 <__aeabi_cdcmpeq>:
10041388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1004138a:	f000 fa23 	bl	100417d4 <__ledf2>
1004138e:	2800      	cmp	r0, #0
10041390:	d401      	bmi.n	10041396 <__aeabi_cdcmpeq+0xe>
10041392:	2100      	movs	r1, #0
10041394:	42c8      	cmn	r0, r1
10041396:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10041398 <__aeabi_dcmpeq>:
10041398:	b510      	push	{r4, lr}
1004139a:	f000 f963 	bl	10041664 <__eqdf2>
1004139e:	4240      	negs	r0, r0
100413a0:	3001      	adds	r0, #1
100413a2:	bd10      	pop	{r4, pc}

100413a4 <__aeabi_dcmplt>:
100413a4:	b510      	push	{r4, lr}
100413a6:	f000 fa15 	bl	100417d4 <__ledf2>
100413aa:	2800      	cmp	r0, #0
100413ac:	db01      	blt.n	100413b2 <__aeabi_dcmplt+0xe>
100413ae:	2000      	movs	r0, #0
100413b0:	bd10      	pop	{r4, pc}
100413b2:	2001      	movs	r0, #1
100413b4:	bd10      	pop	{r4, pc}
100413b6:	46c0      	nop			@ (mov r8, r8)

100413b8 <__aeabi_dcmple>:
100413b8:	b510      	push	{r4, lr}
100413ba:	f000 fa0b 	bl	100417d4 <__ledf2>
100413be:	2800      	cmp	r0, #0
100413c0:	dd01      	ble.n	100413c6 <__aeabi_dcmple+0xe>
100413c2:	2000      	movs	r0, #0
100413c4:	bd10      	pop	{r4, pc}
100413c6:	2001      	movs	r0, #1
100413c8:	bd10      	pop	{r4, pc}
100413ca:	46c0      	nop			@ (mov r8, r8)

100413cc <__aeabi_dcmpgt>:
100413cc:	b510      	push	{r4, lr}
100413ce:	f000 f98d 	bl	100416ec <__gedf2>
100413d2:	2800      	cmp	r0, #0
100413d4:	dc01      	bgt.n	100413da <__aeabi_dcmpgt+0xe>
100413d6:	2000      	movs	r0, #0
100413d8:	bd10      	pop	{r4, pc}
100413da:	2001      	movs	r0, #1
100413dc:	bd10      	pop	{r4, pc}
100413de:	46c0      	nop			@ (mov r8, r8)

100413e0 <__aeabi_dcmpge>:
100413e0:	b510      	push	{r4, lr}
100413e2:	f000 f983 	bl	100416ec <__gedf2>
100413e6:	2800      	cmp	r0, #0
100413e8:	da01      	bge.n	100413ee <__aeabi_dcmpge+0xe>
100413ea:	2000      	movs	r0, #0
100413ec:	bd10      	pop	{r4, pc}
100413ee:	2001      	movs	r0, #1
100413f0:	bd10      	pop	{r4, pc}
100413f2:	46c0      	nop			@ (mov r8, r8)

100413f4 <__clzsi2>:
100413f4:	211c      	movs	r1, #28
100413f6:	2301      	movs	r3, #1
100413f8:	041b      	lsls	r3, r3, #16
100413fa:	4298      	cmp	r0, r3
100413fc:	d301      	bcc.n	10041402 <__clzsi2+0xe>
100413fe:	0c00      	lsrs	r0, r0, #16
10041400:	3910      	subs	r1, #16
10041402:	0a1b      	lsrs	r3, r3, #8
10041404:	4298      	cmp	r0, r3
10041406:	d301      	bcc.n	1004140c <__clzsi2+0x18>
10041408:	0a00      	lsrs	r0, r0, #8
1004140a:	3908      	subs	r1, #8
1004140c:	091b      	lsrs	r3, r3, #4
1004140e:	4298      	cmp	r0, r3
10041410:	d301      	bcc.n	10041416 <__clzsi2+0x22>
10041412:	0900      	lsrs	r0, r0, #4
10041414:	3904      	subs	r1, #4
10041416:	a202      	add	r2, pc, #8	@ (adr r2, 10041420 <__clzsi2+0x2c>)
10041418:	5c10      	ldrb	r0, [r2, r0]
1004141a:	1840      	adds	r0, r0, r1
1004141c:	4770      	bx	lr
1004141e:	46c0      	nop			@ (mov r8, r8)
10041420:	02020304 	.word	0x02020304
10041424:	01010101 	.word	0x01010101
	...

10041430 <__aeabi_uldivmod>:
10041430:	2b00      	cmp	r3, #0
10041432:	d111      	bne.n	10041458 <__aeabi_uldivmod+0x28>
10041434:	2a00      	cmp	r2, #0
10041436:	d10f      	bne.n	10041458 <__aeabi_uldivmod+0x28>
10041438:	2900      	cmp	r1, #0
1004143a:	d100      	bne.n	1004143e <__aeabi_uldivmod+0xe>
1004143c:	2800      	cmp	r0, #0
1004143e:	d002      	beq.n	10041446 <__aeabi_uldivmod+0x16>
10041440:	2100      	movs	r1, #0
10041442:	43c9      	mvns	r1, r1
10041444:	0008      	movs	r0, r1
10041446:	b407      	push	{r0, r1, r2}
10041448:	4802      	ldr	r0, [pc, #8]	@ (10041454 <__aeabi_uldivmod+0x24>)
1004144a:	a102      	add	r1, pc, #8	@ (adr r1, 10041454 <__aeabi_uldivmod+0x24>)
1004144c:	1840      	adds	r0, r0, r1
1004144e:	9002      	str	r0, [sp, #8]
10041450:	bd03      	pop	{r0, r1, pc}
10041452:	46c0      	nop			@ (mov r8, r8)
10041454:	ffffff09 	.word	0xffffff09
10041458:	b403      	push	{r0, r1}
1004145a:	4668      	mov	r0, sp
1004145c:	b501      	push	{r0, lr}
1004145e:	9802      	ldr	r0, [sp, #8]
10041460:	f000 f834 	bl	100414cc <__udivmoddi4>
10041464:	9b01      	ldr	r3, [sp, #4]
10041466:	469e      	mov	lr, r3
10041468:	b002      	add	sp, #8
1004146a:	bc0c      	pop	{r2, r3}
1004146c:	4770      	bx	lr
1004146e:	46c0      	nop			@ (mov r8, r8)

10041470 <__aeabi_lmul>:
10041470:	b5f0      	push	{r4, r5, r6, r7, lr}
10041472:	46ce      	mov	lr, r9
10041474:	4699      	mov	r9, r3
10041476:	0c03      	lsrs	r3, r0, #16
10041478:	469c      	mov	ip, r3
1004147a:	0413      	lsls	r3, r2, #16
1004147c:	4647      	mov	r7, r8
1004147e:	0c1b      	lsrs	r3, r3, #16
10041480:	001d      	movs	r5, r3
10041482:	000e      	movs	r6, r1
10041484:	4661      	mov	r1, ip
10041486:	0404      	lsls	r4, r0, #16
10041488:	0c24      	lsrs	r4, r4, #16
1004148a:	b580      	push	{r7, lr}
1004148c:	0007      	movs	r7, r0
1004148e:	0c10      	lsrs	r0, r2, #16
10041490:	434b      	muls	r3, r1
10041492:	4365      	muls	r5, r4
10041494:	4341      	muls	r1, r0
10041496:	4360      	muls	r0, r4
10041498:	0c2c      	lsrs	r4, r5, #16
1004149a:	18c0      	adds	r0, r0, r3
1004149c:	1824      	adds	r4, r4, r0
1004149e:	468c      	mov	ip, r1
100414a0:	42a3      	cmp	r3, r4
100414a2:	d903      	bls.n	100414ac <__aeabi_lmul+0x3c>
100414a4:	2380      	movs	r3, #128	@ 0x80
100414a6:	025b      	lsls	r3, r3, #9
100414a8:	4698      	mov	r8, r3
100414aa:	44c4      	add	ip, r8
100414ac:	4649      	mov	r1, r9
100414ae:	4379      	muls	r1, r7
100414b0:	4356      	muls	r6, r2
100414b2:	0c23      	lsrs	r3, r4, #16
100414b4:	042d      	lsls	r5, r5, #16
100414b6:	0c2d      	lsrs	r5, r5, #16
100414b8:	1989      	adds	r1, r1, r6
100414ba:	4463      	add	r3, ip
100414bc:	0424      	lsls	r4, r4, #16
100414be:	1960      	adds	r0, r4, r5
100414c0:	18c9      	adds	r1, r1, r3
100414c2:	bcc0      	pop	{r6, r7}
100414c4:	46b9      	mov	r9, r7
100414c6:	46b0      	mov	r8, r6
100414c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100414ca:	46c0      	nop			@ (mov r8, r8)

100414cc <__udivmoddi4>:
100414cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100414ce:	4657      	mov	r7, sl
100414d0:	464e      	mov	r6, r9
100414d2:	4645      	mov	r5, r8
100414d4:	46de      	mov	lr, fp
100414d6:	b5e0      	push	{r5, r6, r7, lr}
100414d8:	0004      	movs	r4, r0
100414da:	000d      	movs	r5, r1
100414dc:	4692      	mov	sl, r2
100414de:	4699      	mov	r9, r3
100414e0:	b083      	sub	sp, #12
100414e2:	428b      	cmp	r3, r1
100414e4:	d830      	bhi.n	10041548 <__udivmoddi4+0x7c>
100414e6:	d02d      	beq.n	10041544 <__udivmoddi4+0x78>
100414e8:	4649      	mov	r1, r9
100414ea:	4650      	mov	r0, sl
100414ec:	f001 f8b2 	bl	10042654 <__clzdi2>
100414f0:	0029      	movs	r1, r5
100414f2:	0006      	movs	r6, r0
100414f4:	0020      	movs	r0, r4
100414f6:	f001 f8ad 	bl	10042654 <__clzdi2>
100414fa:	1a33      	subs	r3, r6, r0
100414fc:	4698      	mov	r8, r3
100414fe:	3b20      	subs	r3, #32
10041500:	d434      	bmi.n	1004156c <__udivmoddi4+0xa0>
10041502:	469b      	mov	fp, r3
10041504:	4653      	mov	r3, sl
10041506:	465a      	mov	r2, fp
10041508:	4093      	lsls	r3, r2
1004150a:	4642      	mov	r2, r8
1004150c:	001f      	movs	r7, r3
1004150e:	4653      	mov	r3, sl
10041510:	4093      	lsls	r3, r2
10041512:	001e      	movs	r6, r3
10041514:	42af      	cmp	r7, r5
10041516:	d83b      	bhi.n	10041590 <__udivmoddi4+0xc4>
10041518:	42af      	cmp	r7, r5
1004151a:	d100      	bne.n	1004151e <__udivmoddi4+0x52>
1004151c:	e079      	b.n	10041612 <__udivmoddi4+0x146>
1004151e:	465b      	mov	r3, fp
10041520:	1ba4      	subs	r4, r4, r6
10041522:	41bd      	sbcs	r5, r7
10041524:	2b00      	cmp	r3, #0
10041526:	da00      	bge.n	1004152a <__udivmoddi4+0x5e>
10041528:	e076      	b.n	10041618 <__udivmoddi4+0x14c>
1004152a:	2200      	movs	r2, #0
1004152c:	2300      	movs	r3, #0
1004152e:	9200      	str	r2, [sp, #0]
10041530:	9301      	str	r3, [sp, #4]
10041532:	2301      	movs	r3, #1
10041534:	465a      	mov	r2, fp
10041536:	4093      	lsls	r3, r2
10041538:	9301      	str	r3, [sp, #4]
1004153a:	2301      	movs	r3, #1
1004153c:	4642      	mov	r2, r8
1004153e:	4093      	lsls	r3, r2
10041540:	9300      	str	r3, [sp, #0]
10041542:	e029      	b.n	10041598 <__udivmoddi4+0xcc>
10041544:	4282      	cmp	r2, r0
10041546:	d9cf      	bls.n	100414e8 <__udivmoddi4+0x1c>
10041548:	2200      	movs	r2, #0
1004154a:	2300      	movs	r3, #0
1004154c:	9200      	str	r2, [sp, #0]
1004154e:	9301      	str	r3, [sp, #4]
10041550:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10041552:	2b00      	cmp	r3, #0
10041554:	d001      	beq.n	1004155a <__udivmoddi4+0x8e>
10041556:	601c      	str	r4, [r3, #0]
10041558:	605d      	str	r5, [r3, #4]
1004155a:	9800      	ldr	r0, [sp, #0]
1004155c:	9901      	ldr	r1, [sp, #4]
1004155e:	b003      	add	sp, #12
10041560:	bcf0      	pop	{r4, r5, r6, r7}
10041562:	46bb      	mov	fp, r7
10041564:	46b2      	mov	sl, r6
10041566:	46a9      	mov	r9, r5
10041568:	46a0      	mov	r8, r4
1004156a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004156c:	4642      	mov	r2, r8
1004156e:	469b      	mov	fp, r3
10041570:	2320      	movs	r3, #32
10041572:	1a9b      	subs	r3, r3, r2
10041574:	4652      	mov	r2, sl
10041576:	40da      	lsrs	r2, r3
10041578:	4641      	mov	r1, r8
1004157a:	0013      	movs	r3, r2
1004157c:	464a      	mov	r2, r9
1004157e:	408a      	lsls	r2, r1
10041580:	0017      	movs	r7, r2
10041582:	4642      	mov	r2, r8
10041584:	431f      	orrs	r7, r3
10041586:	4653      	mov	r3, sl
10041588:	4093      	lsls	r3, r2
1004158a:	001e      	movs	r6, r3
1004158c:	42af      	cmp	r7, r5
1004158e:	d9c3      	bls.n	10041518 <__udivmoddi4+0x4c>
10041590:	2200      	movs	r2, #0
10041592:	2300      	movs	r3, #0
10041594:	9200      	str	r2, [sp, #0]
10041596:	9301      	str	r3, [sp, #4]
10041598:	4643      	mov	r3, r8
1004159a:	2b00      	cmp	r3, #0
1004159c:	d0d8      	beq.n	10041550 <__udivmoddi4+0x84>
1004159e:	07fb      	lsls	r3, r7, #31
100415a0:	0872      	lsrs	r2, r6, #1
100415a2:	431a      	orrs	r2, r3
100415a4:	4646      	mov	r6, r8
100415a6:	087b      	lsrs	r3, r7, #1
100415a8:	e00e      	b.n	100415c8 <__udivmoddi4+0xfc>
100415aa:	42ab      	cmp	r3, r5
100415ac:	d101      	bne.n	100415b2 <__udivmoddi4+0xe6>
100415ae:	42a2      	cmp	r2, r4
100415b0:	d80c      	bhi.n	100415cc <__udivmoddi4+0x100>
100415b2:	1aa4      	subs	r4, r4, r2
100415b4:	419d      	sbcs	r5, r3
100415b6:	2001      	movs	r0, #1
100415b8:	1924      	adds	r4, r4, r4
100415ba:	416d      	adcs	r5, r5
100415bc:	2100      	movs	r1, #0
100415be:	3e01      	subs	r6, #1
100415c0:	1824      	adds	r4, r4, r0
100415c2:	414d      	adcs	r5, r1
100415c4:	2e00      	cmp	r6, #0
100415c6:	d006      	beq.n	100415d6 <__udivmoddi4+0x10a>
100415c8:	42ab      	cmp	r3, r5
100415ca:	d9ee      	bls.n	100415aa <__udivmoddi4+0xde>
100415cc:	3e01      	subs	r6, #1
100415ce:	1924      	adds	r4, r4, r4
100415d0:	416d      	adcs	r5, r5
100415d2:	2e00      	cmp	r6, #0
100415d4:	d1f8      	bne.n	100415c8 <__udivmoddi4+0xfc>
100415d6:	9800      	ldr	r0, [sp, #0]
100415d8:	9901      	ldr	r1, [sp, #4]
100415da:	465b      	mov	r3, fp
100415dc:	1900      	adds	r0, r0, r4
100415de:	4169      	adcs	r1, r5
100415e0:	2b00      	cmp	r3, #0
100415e2:	db24      	blt.n	1004162e <__udivmoddi4+0x162>
100415e4:	002b      	movs	r3, r5
100415e6:	465a      	mov	r2, fp
100415e8:	4644      	mov	r4, r8
100415ea:	40d3      	lsrs	r3, r2
100415ec:	002a      	movs	r2, r5
100415ee:	40e2      	lsrs	r2, r4
100415f0:	001c      	movs	r4, r3
100415f2:	465b      	mov	r3, fp
100415f4:	0015      	movs	r5, r2
100415f6:	2b00      	cmp	r3, #0
100415f8:	db2a      	blt.n	10041650 <__udivmoddi4+0x184>
100415fa:	0026      	movs	r6, r4
100415fc:	409e      	lsls	r6, r3
100415fe:	0033      	movs	r3, r6
10041600:	0026      	movs	r6, r4
10041602:	4647      	mov	r7, r8
10041604:	40be      	lsls	r6, r7
10041606:	0032      	movs	r2, r6
10041608:	1a80      	subs	r0, r0, r2
1004160a:	4199      	sbcs	r1, r3
1004160c:	9000      	str	r0, [sp, #0]
1004160e:	9101      	str	r1, [sp, #4]
10041610:	e79e      	b.n	10041550 <__udivmoddi4+0x84>
10041612:	42a3      	cmp	r3, r4
10041614:	d8bc      	bhi.n	10041590 <__udivmoddi4+0xc4>
10041616:	e782      	b.n	1004151e <__udivmoddi4+0x52>
10041618:	4642      	mov	r2, r8
1004161a:	2320      	movs	r3, #32
1004161c:	2100      	movs	r1, #0
1004161e:	1a9b      	subs	r3, r3, r2
10041620:	2200      	movs	r2, #0
10041622:	9100      	str	r1, [sp, #0]
10041624:	9201      	str	r2, [sp, #4]
10041626:	2201      	movs	r2, #1
10041628:	40da      	lsrs	r2, r3
1004162a:	9201      	str	r2, [sp, #4]
1004162c:	e785      	b.n	1004153a <__udivmoddi4+0x6e>
1004162e:	4642      	mov	r2, r8
10041630:	2320      	movs	r3, #32
10041632:	1a9b      	subs	r3, r3, r2
10041634:	002a      	movs	r2, r5
10041636:	4646      	mov	r6, r8
10041638:	409a      	lsls	r2, r3
1004163a:	0023      	movs	r3, r4
1004163c:	40f3      	lsrs	r3, r6
1004163e:	4644      	mov	r4, r8
10041640:	4313      	orrs	r3, r2
10041642:	002a      	movs	r2, r5
10041644:	40e2      	lsrs	r2, r4
10041646:	001c      	movs	r4, r3
10041648:	465b      	mov	r3, fp
1004164a:	0015      	movs	r5, r2
1004164c:	2b00      	cmp	r3, #0
1004164e:	dad4      	bge.n	100415fa <__udivmoddi4+0x12e>
10041650:	4642      	mov	r2, r8
10041652:	002f      	movs	r7, r5
10041654:	2320      	movs	r3, #32
10041656:	0026      	movs	r6, r4
10041658:	4097      	lsls	r7, r2
1004165a:	1a9b      	subs	r3, r3, r2
1004165c:	40de      	lsrs	r6, r3
1004165e:	003b      	movs	r3, r7
10041660:	4333      	orrs	r3, r6
10041662:	e7cd      	b.n	10041600 <__udivmoddi4+0x134>

10041664 <__eqdf2>:
10041664:	b5f0      	push	{r4, r5, r6, r7, lr}
10041666:	4657      	mov	r7, sl
10041668:	46de      	mov	lr, fp
1004166a:	464e      	mov	r6, r9
1004166c:	4645      	mov	r5, r8
1004166e:	b5e0      	push	{r5, r6, r7, lr}
10041670:	000d      	movs	r5, r1
10041672:	0004      	movs	r4, r0
10041674:	0fe8      	lsrs	r0, r5, #31
10041676:	4683      	mov	fp, r0
10041678:	0309      	lsls	r1, r1, #12
1004167a:	0fd8      	lsrs	r0, r3, #31
1004167c:	0b09      	lsrs	r1, r1, #12
1004167e:	4682      	mov	sl, r0
10041680:	4819      	ldr	r0, [pc, #100]	@ (100416e8 <__eqdf2+0x84>)
10041682:	468c      	mov	ip, r1
10041684:	031f      	lsls	r7, r3, #12
10041686:	0069      	lsls	r1, r5, #1
10041688:	005e      	lsls	r6, r3, #1
1004168a:	0d49      	lsrs	r1, r1, #21
1004168c:	0b3f      	lsrs	r7, r7, #12
1004168e:	0d76      	lsrs	r6, r6, #21
10041690:	4281      	cmp	r1, r0
10041692:	d018      	beq.n	100416c6 <__eqdf2+0x62>
10041694:	4286      	cmp	r6, r0
10041696:	d00f      	beq.n	100416b8 <__eqdf2+0x54>
10041698:	2001      	movs	r0, #1
1004169a:	42b1      	cmp	r1, r6
1004169c:	d10d      	bne.n	100416ba <__eqdf2+0x56>
1004169e:	45bc      	cmp	ip, r7
100416a0:	d10b      	bne.n	100416ba <__eqdf2+0x56>
100416a2:	4294      	cmp	r4, r2
100416a4:	d109      	bne.n	100416ba <__eqdf2+0x56>
100416a6:	45d3      	cmp	fp, sl
100416a8:	d01c      	beq.n	100416e4 <__eqdf2+0x80>
100416aa:	2900      	cmp	r1, #0
100416ac:	d105      	bne.n	100416ba <__eqdf2+0x56>
100416ae:	4660      	mov	r0, ip
100416b0:	4320      	orrs	r0, r4
100416b2:	1e43      	subs	r3, r0, #1
100416b4:	4198      	sbcs	r0, r3
100416b6:	e000      	b.n	100416ba <__eqdf2+0x56>
100416b8:	2001      	movs	r0, #1
100416ba:	bcf0      	pop	{r4, r5, r6, r7}
100416bc:	46bb      	mov	fp, r7
100416be:	46b2      	mov	sl, r6
100416c0:	46a9      	mov	r9, r5
100416c2:	46a0      	mov	r8, r4
100416c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100416c6:	2001      	movs	r0, #1
100416c8:	428e      	cmp	r6, r1
100416ca:	d1f6      	bne.n	100416ba <__eqdf2+0x56>
100416cc:	4661      	mov	r1, ip
100416ce:	4339      	orrs	r1, r7
100416d0:	000f      	movs	r7, r1
100416d2:	4317      	orrs	r7, r2
100416d4:	4327      	orrs	r7, r4
100416d6:	d1f0      	bne.n	100416ba <__eqdf2+0x56>
100416d8:	465b      	mov	r3, fp
100416da:	4652      	mov	r2, sl
100416dc:	1a98      	subs	r0, r3, r2
100416de:	1e43      	subs	r3, r0, #1
100416e0:	4198      	sbcs	r0, r3
100416e2:	e7ea      	b.n	100416ba <__eqdf2+0x56>
100416e4:	2000      	movs	r0, #0
100416e6:	e7e8      	b.n	100416ba <__eqdf2+0x56>
100416e8:	000007ff 	.word	0x000007ff

100416ec <__gedf2>:
100416ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100416ee:	4657      	mov	r7, sl
100416f0:	464e      	mov	r6, r9
100416f2:	4645      	mov	r5, r8
100416f4:	46de      	mov	lr, fp
100416f6:	b5e0      	push	{r5, r6, r7, lr}
100416f8:	000d      	movs	r5, r1
100416fa:	030f      	lsls	r7, r1, #12
100416fc:	0b39      	lsrs	r1, r7, #12
100416fe:	b083      	sub	sp, #12
10041700:	0004      	movs	r4, r0
10041702:	4680      	mov	r8, r0
10041704:	9101      	str	r1, [sp, #4]
10041706:	0058      	lsls	r0, r3, #1
10041708:	0fe9      	lsrs	r1, r5, #31
1004170a:	4f31      	ldr	r7, [pc, #196]	@ (100417d0 <__gedf2+0xe4>)
1004170c:	0d40      	lsrs	r0, r0, #21
1004170e:	468c      	mov	ip, r1
10041710:	006e      	lsls	r6, r5, #1
10041712:	0319      	lsls	r1, r3, #12
10041714:	4682      	mov	sl, r0
10041716:	4691      	mov	r9, r2
10041718:	0d76      	lsrs	r6, r6, #21
1004171a:	0b09      	lsrs	r1, r1, #12
1004171c:	0fd8      	lsrs	r0, r3, #31
1004171e:	42be      	cmp	r6, r7
10041720:	d01f      	beq.n	10041762 <__gedf2+0x76>
10041722:	45ba      	cmp	sl, r7
10041724:	d00f      	beq.n	10041746 <__gedf2+0x5a>
10041726:	2e00      	cmp	r6, #0
10041728:	d12f      	bne.n	1004178a <__gedf2+0x9e>
1004172a:	4655      	mov	r5, sl
1004172c:	9e01      	ldr	r6, [sp, #4]
1004172e:	4334      	orrs	r4, r6
10041730:	2d00      	cmp	r5, #0
10041732:	d127      	bne.n	10041784 <__gedf2+0x98>
10041734:	430a      	orrs	r2, r1
10041736:	d03a      	beq.n	100417ae <__gedf2+0xc2>
10041738:	2c00      	cmp	r4, #0
1004173a:	d145      	bne.n	100417c8 <__gedf2+0xdc>
1004173c:	2800      	cmp	r0, #0
1004173e:	d11a      	bne.n	10041776 <__gedf2+0x8a>
10041740:	2001      	movs	r0, #1
10041742:	4240      	negs	r0, r0
10041744:	e017      	b.n	10041776 <__gedf2+0x8a>
10041746:	4311      	orrs	r1, r2
10041748:	d13b      	bne.n	100417c2 <__gedf2+0xd6>
1004174a:	2e00      	cmp	r6, #0
1004174c:	d102      	bne.n	10041754 <__gedf2+0x68>
1004174e:	9f01      	ldr	r7, [sp, #4]
10041750:	4327      	orrs	r7, r4
10041752:	d0f3      	beq.n	1004173c <__gedf2+0x50>
10041754:	4584      	cmp	ip, r0
10041756:	d109      	bne.n	1004176c <__gedf2+0x80>
10041758:	4663      	mov	r3, ip
1004175a:	2b00      	cmp	r3, #0
1004175c:	d0f0      	beq.n	10041740 <__gedf2+0x54>
1004175e:	4660      	mov	r0, ip
10041760:	e009      	b.n	10041776 <__gedf2+0x8a>
10041762:	9f01      	ldr	r7, [sp, #4]
10041764:	4327      	orrs	r7, r4
10041766:	d12c      	bne.n	100417c2 <__gedf2+0xd6>
10041768:	45b2      	cmp	sl, r6
1004176a:	d024      	beq.n	100417b6 <__gedf2+0xca>
1004176c:	4663      	mov	r3, ip
1004176e:	2002      	movs	r0, #2
10041770:	3b01      	subs	r3, #1
10041772:	4018      	ands	r0, r3
10041774:	3801      	subs	r0, #1
10041776:	b003      	add	sp, #12
10041778:	bcf0      	pop	{r4, r5, r6, r7}
1004177a:	46bb      	mov	fp, r7
1004177c:	46b2      	mov	sl, r6
1004177e:	46a9      	mov	r9, r5
10041780:	46a0      	mov	r8, r4
10041782:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041784:	2c00      	cmp	r4, #0
10041786:	d0d9      	beq.n	1004173c <__gedf2+0x50>
10041788:	e7e4      	b.n	10041754 <__gedf2+0x68>
1004178a:	4654      	mov	r4, sl
1004178c:	2c00      	cmp	r4, #0
1004178e:	d0ed      	beq.n	1004176c <__gedf2+0x80>
10041790:	4584      	cmp	ip, r0
10041792:	d1eb      	bne.n	1004176c <__gedf2+0x80>
10041794:	4556      	cmp	r6, sl
10041796:	dce9      	bgt.n	1004176c <__gedf2+0x80>
10041798:	dbde      	blt.n	10041758 <__gedf2+0x6c>
1004179a:	9b01      	ldr	r3, [sp, #4]
1004179c:	428b      	cmp	r3, r1
1004179e:	d8e5      	bhi.n	1004176c <__gedf2+0x80>
100417a0:	d1da      	bne.n	10041758 <__gedf2+0x6c>
100417a2:	45c8      	cmp	r8, r9
100417a4:	d8e2      	bhi.n	1004176c <__gedf2+0x80>
100417a6:	2000      	movs	r0, #0
100417a8:	45c8      	cmp	r8, r9
100417aa:	d2e4      	bcs.n	10041776 <__gedf2+0x8a>
100417ac:	e7d4      	b.n	10041758 <__gedf2+0x6c>
100417ae:	2000      	movs	r0, #0
100417b0:	2c00      	cmp	r4, #0
100417b2:	d0e0      	beq.n	10041776 <__gedf2+0x8a>
100417b4:	e7da      	b.n	1004176c <__gedf2+0x80>
100417b6:	4311      	orrs	r1, r2
100417b8:	d103      	bne.n	100417c2 <__gedf2+0xd6>
100417ba:	4584      	cmp	ip, r0
100417bc:	d1d6      	bne.n	1004176c <__gedf2+0x80>
100417be:	2000      	movs	r0, #0
100417c0:	e7d9      	b.n	10041776 <__gedf2+0x8a>
100417c2:	2002      	movs	r0, #2
100417c4:	4240      	negs	r0, r0
100417c6:	e7d6      	b.n	10041776 <__gedf2+0x8a>
100417c8:	4584      	cmp	ip, r0
100417ca:	d0e6      	beq.n	1004179a <__gedf2+0xae>
100417cc:	e7ce      	b.n	1004176c <__gedf2+0x80>
100417ce:	46c0      	nop			@ (mov r8, r8)
100417d0:	000007ff 	.word	0x000007ff

100417d4 <__ledf2>:
100417d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100417d6:	4657      	mov	r7, sl
100417d8:	464e      	mov	r6, r9
100417da:	4645      	mov	r5, r8
100417dc:	46de      	mov	lr, fp
100417de:	b5e0      	push	{r5, r6, r7, lr}
100417e0:	000d      	movs	r5, r1
100417e2:	030f      	lsls	r7, r1, #12
100417e4:	0004      	movs	r4, r0
100417e6:	4680      	mov	r8, r0
100417e8:	0fe8      	lsrs	r0, r5, #31
100417ea:	0b39      	lsrs	r1, r7, #12
100417ec:	4684      	mov	ip, r0
100417ee:	b083      	sub	sp, #12
100417f0:	0058      	lsls	r0, r3, #1
100417f2:	4f30      	ldr	r7, [pc, #192]	@ (100418b4 <__ledf2+0xe0>)
100417f4:	0d40      	lsrs	r0, r0, #21
100417f6:	9101      	str	r1, [sp, #4]
100417f8:	031e      	lsls	r6, r3, #12
100417fa:	0069      	lsls	r1, r5, #1
100417fc:	4682      	mov	sl, r0
100417fe:	4691      	mov	r9, r2
10041800:	0d49      	lsrs	r1, r1, #21
10041802:	0b36      	lsrs	r6, r6, #12
10041804:	0fd8      	lsrs	r0, r3, #31
10041806:	42b9      	cmp	r1, r7
10041808:	d020      	beq.n	1004184c <__ledf2+0x78>
1004180a:	45ba      	cmp	sl, r7
1004180c:	d00f      	beq.n	1004182e <__ledf2+0x5a>
1004180e:	2900      	cmp	r1, #0
10041810:	d12b      	bne.n	1004186a <__ledf2+0x96>
10041812:	9901      	ldr	r1, [sp, #4]
10041814:	430c      	orrs	r4, r1
10041816:	4651      	mov	r1, sl
10041818:	2900      	cmp	r1, #0
1004181a:	d137      	bne.n	1004188c <__ledf2+0xb8>
1004181c:	4332      	orrs	r2, r6
1004181e:	d038      	beq.n	10041892 <__ledf2+0xbe>
10041820:	2c00      	cmp	r4, #0
10041822:	d144      	bne.n	100418ae <__ledf2+0xda>
10041824:	2800      	cmp	r0, #0
10041826:	d119      	bne.n	1004185c <__ledf2+0x88>
10041828:	2001      	movs	r0, #1
1004182a:	4240      	negs	r0, r0
1004182c:	e016      	b.n	1004185c <__ledf2+0x88>
1004182e:	4316      	orrs	r6, r2
10041830:	d113      	bne.n	1004185a <__ledf2+0x86>
10041832:	2900      	cmp	r1, #0
10041834:	d102      	bne.n	1004183c <__ledf2+0x68>
10041836:	9f01      	ldr	r7, [sp, #4]
10041838:	4327      	orrs	r7, r4
1004183a:	d0f3      	beq.n	10041824 <__ledf2+0x50>
1004183c:	4584      	cmp	ip, r0
1004183e:	d020      	beq.n	10041882 <__ledf2+0xae>
10041840:	4663      	mov	r3, ip
10041842:	2002      	movs	r0, #2
10041844:	3b01      	subs	r3, #1
10041846:	4018      	ands	r0, r3
10041848:	3801      	subs	r0, #1
1004184a:	e007      	b.n	1004185c <__ledf2+0x88>
1004184c:	9f01      	ldr	r7, [sp, #4]
1004184e:	4327      	orrs	r7, r4
10041850:	d103      	bne.n	1004185a <__ledf2+0x86>
10041852:	458a      	cmp	sl, r1
10041854:	d1f4      	bne.n	10041840 <__ledf2+0x6c>
10041856:	4316      	orrs	r6, r2
10041858:	d01f      	beq.n	1004189a <__ledf2+0xc6>
1004185a:	2002      	movs	r0, #2
1004185c:	b003      	add	sp, #12
1004185e:	bcf0      	pop	{r4, r5, r6, r7}
10041860:	46bb      	mov	fp, r7
10041862:	46b2      	mov	sl, r6
10041864:	46a9      	mov	r9, r5
10041866:	46a0      	mov	r8, r4
10041868:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004186a:	4654      	mov	r4, sl
1004186c:	2c00      	cmp	r4, #0
1004186e:	d0e7      	beq.n	10041840 <__ledf2+0x6c>
10041870:	4584      	cmp	ip, r0
10041872:	d1e5      	bne.n	10041840 <__ledf2+0x6c>
10041874:	4551      	cmp	r1, sl
10041876:	dce3      	bgt.n	10041840 <__ledf2+0x6c>
10041878:	db03      	blt.n	10041882 <__ledf2+0xae>
1004187a:	9b01      	ldr	r3, [sp, #4]
1004187c:	42b3      	cmp	r3, r6
1004187e:	d8df      	bhi.n	10041840 <__ledf2+0x6c>
10041880:	d00f      	beq.n	100418a2 <__ledf2+0xce>
10041882:	4663      	mov	r3, ip
10041884:	2b00      	cmp	r3, #0
10041886:	d0cf      	beq.n	10041828 <__ledf2+0x54>
10041888:	4660      	mov	r0, ip
1004188a:	e7e7      	b.n	1004185c <__ledf2+0x88>
1004188c:	2c00      	cmp	r4, #0
1004188e:	d0c9      	beq.n	10041824 <__ledf2+0x50>
10041890:	e7d4      	b.n	1004183c <__ledf2+0x68>
10041892:	2000      	movs	r0, #0
10041894:	2c00      	cmp	r4, #0
10041896:	d0e1      	beq.n	1004185c <__ledf2+0x88>
10041898:	e7d2      	b.n	10041840 <__ledf2+0x6c>
1004189a:	4584      	cmp	ip, r0
1004189c:	d1d0      	bne.n	10041840 <__ledf2+0x6c>
1004189e:	2000      	movs	r0, #0
100418a0:	e7dc      	b.n	1004185c <__ledf2+0x88>
100418a2:	45c8      	cmp	r8, r9
100418a4:	d8cc      	bhi.n	10041840 <__ledf2+0x6c>
100418a6:	2000      	movs	r0, #0
100418a8:	45c8      	cmp	r8, r9
100418aa:	d2d7      	bcs.n	1004185c <__ledf2+0x88>
100418ac:	e7e9      	b.n	10041882 <__ledf2+0xae>
100418ae:	4584      	cmp	ip, r0
100418b0:	d0e3      	beq.n	1004187a <__ledf2+0xa6>
100418b2:	e7c5      	b.n	10041840 <__ledf2+0x6c>
100418b4:	000007ff 	.word	0x000007ff

100418b8 <__aeabi_dmul>:
100418b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100418ba:	4657      	mov	r7, sl
100418bc:	46de      	mov	lr, fp
100418be:	464e      	mov	r6, r9
100418c0:	4645      	mov	r5, r8
100418c2:	b5e0      	push	{r5, r6, r7, lr}
100418c4:	001f      	movs	r7, r3
100418c6:	030b      	lsls	r3, r1, #12
100418c8:	0b1b      	lsrs	r3, r3, #12
100418ca:	0016      	movs	r6, r2
100418cc:	469a      	mov	sl, r3
100418ce:	0fca      	lsrs	r2, r1, #31
100418d0:	004b      	lsls	r3, r1, #1
100418d2:	0004      	movs	r4, r0
100418d4:	4693      	mov	fp, r2
100418d6:	b087      	sub	sp, #28
100418d8:	0d5b      	lsrs	r3, r3, #21
100418da:	d100      	bne.n	100418de <__aeabi_dmul+0x26>
100418dc:	e0d5      	b.n	10041a8a <__aeabi_dmul+0x1d2>
100418de:	4abb      	ldr	r2, [pc, #748]	@ (10041bcc <__aeabi_dmul+0x314>)
100418e0:	4293      	cmp	r3, r2
100418e2:	d100      	bne.n	100418e6 <__aeabi_dmul+0x2e>
100418e4:	e0f8      	b.n	10041ad8 <__aeabi_dmul+0x220>
100418e6:	4651      	mov	r1, sl
100418e8:	0f42      	lsrs	r2, r0, #29
100418ea:	00c9      	lsls	r1, r1, #3
100418ec:	430a      	orrs	r2, r1
100418ee:	2180      	movs	r1, #128	@ 0x80
100418f0:	0409      	lsls	r1, r1, #16
100418f2:	4311      	orrs	r1, r2
100418f4:	00c2      	lsls	r2, r0, #3
100418f6:	4691      	mov	r9, r2
100418f8:	4ab5      	ldr	r2, [pc, #724]	@ (10041bd0 <__aeabi_dmul+0x318>)
100418fa:	468a      	mov	sl, r1
100418fc:	189d      	adds	r5, r3, r2
100418fe:	2300      	movs	r3, #0
10041900:	4698      	mov	r8, r3
10041902:	9302      	str	r3, [sp, #8]
10041904:	033c      	lsls	r4, r7, #12
10041906:	007b      	lsls	r3, r7, #1
10041908:	0ffa      	lsrs	r2, r7, #31
1004190a:	0030      	movs	r0, r6
1004190c:	0b24      	lsrs	r4, r4, #12
1004190e:	0d5b      	lsrs	r3, r3, #21
10041910:	9200      	str	r2, [sp, #0]
10041912:	d100      	bne.n	10041916 <__aeabi_dmul+0x5e>
10041914:	e096      	b.n	10041a44 <__aeabi_dmul+0x18c>
10041916:	4aad      	ldr	r2, [pc, #692]	@ (10041bcc <__aeabi_dmul+0x314>)
10041918:	4293      	cmp	r3, r2
1004191a:	d031      	beq.n	10041980 <__aeabi_dmul+0xc8>
1004191c:	0f72      	lsrs	r2, r6, #29
1004191e:	00e4      	lsls	r4, r4, #3
10041920:	4322      	orrs	r2, r4
10041922:	2480      	movs	r4, #128	@ 0x80
10041924:	0424      	lsls	r4, r4, #16
10041926:	4314      	orrs	r4, r2
10041928:	4aa9      	ldr	r2, [pc, #676]	@ (10041bd0 <__aeabi_dmul+0x318>)
1004192a:	00f0      	lsls	r0, r6, #3
1004192c:	4694      	mov	ip, r2
1004192e:	4463      	add	r3, ip
10041930:	195b      	adds	r3, r3, r5
10041932:	1c5a      	adds	r2, r3, #1
10041934:	9201      	str	r2, [sp, #4]
10041936:	4642      	mov	r2, r8
10041938:	2600      	movs	r6, #0
1004193a:	2a0a      	cmp	r2, #10
1004193c:	dc42      	bgt.n	100419c4 <__aeabi_dmul+0x10c>
1004193e:	465a      	mov	r2, fp
10041940:	9900      	ldr	r1, [sp, #0]
10041942:	404a      	eors	r2, r1
10041944:	4693      	mov	fp, r2
10041946:	4642      	mov	r2, r8
10041948:	2a02      	cmp	r2, #2
1004194a:	dc32      	bgt.n	100419b2 <__aeabi_dmul+0xfa>
1004194c:	3a01      	subs	r2, #1
1004194e:	2a01      	cmp	r2, #1
10041950:	d900      	bls.n	10041954 <__aeabi_dmul+0x9c>
10041952:	e149      	b.n	10041be8 <__aeabi_dmul+0x330>
10041954:	2e02      	cmp	r6, #2
10041956:	d100      	bne.n	1004195a <__aeabi_dmul+0xa2>
10041958:	e0ca      	b.n	10041af0 <__aeabi_dmul+0x238>
1004195a:	2e01      	cmp	r6, #1
1004195c:	d13d      	bne.n	100419da <__aeabi_dmul+0x122>
1004195e:	2300      	movs	r3, #0
10041960:	2400      	movs	r4, #0
10041962:	2200      	movs	r2, #0
10041964:	0010      	movs	r0, r2
10041966:	465a      	mov	r2, fp
10041968:	051b      	lsls	r3, r3, #20
1004196a:	4323      	orrs	r3, r4
1004196c:	07d2      	lsls	r2, r2, #31
1004196e:	4313      	orrs	r3, r2
10041970:	0019      	movs	r1, r3
10041972:	b007      	add	sp, #28
10041974:	bcf0      	pop	{r4, r5, r6, r7}
10041976:	46bb      	mov	fp, r7
10041978:	46b2      	mov	sl, r6
1004197a:	46a9      	mov	r9, r5
1004197c:	46a0      	mov	r8, r4
1004197e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041980:	4b92      	ldr	r3, [pc, #584]	@ (10041bcc <__aeabi_dmul+0x314>)
10041982:	4326      	orrs	r6, r4
10041984:	18eb      	adds	r3, r5, r3
10041986:	2e00      	cmp	r6, #0
10041988:	d100      	bne.n	1004198c <__aeabi_dmul+0xd4>
1004198a:	e0bb      	b.n	10041b04 <__aeabi_dmul+0x24c>
1004198c:	2203      	movs	r2, #3
1004198e:	4641      	mov	r1, r8
10041990:	4311      	orrs	r1, r2
10041992:	465a      	mov	r2, fp
10041994:	4688      	mov	r8, r1
10041996:	9900      	ldr	r1, [sp, #0]
10041998:	404a      	eors	r2, r1
1004199a:	2180      	movs	r1, #128	@ 0x80
1004199c:	0109      	lsls	r1, r1, #4
1004199e:	468c      	mov	ip, r1
100419a0:	0029      	movs	r1, r5
100419a2:	4461      	add	r1, ip
100419a4:	9101      	str	r1, [sp, #4]
100419a6:	4641      	mov	r1, r8
100419a8:	290a      	cmp	r1, #10
100419aa:	dd00      	ble.n	100419ae <__aeabi_dmul+0xf6>
100419ac:	e233      	b.n	10041e16 <__aeabi_dmul+0x55e>
100419ae:	4693      	mov	fp, r2
100419b0:	2603      	movs	r6, #3
100419b2:	4642      	mov	r2, r8
100419b4:	2701      	movs	r7, #1
100419b6:	4097      	lsls	r7, r2
100419b8:	21a6      	movs	r1, #166	@ 0xa6
100419ba:	003a      	movs	r2, r7
100419bc:	00c9      	lsls	r1, r1, #3
100419be:	400a      	ands	r2, r1
100419c0:	420f      	tst	r7, r1
100419c2:	d031      	beq.n	10041a28 <__aeabi_dmul+0x170>
100419c4:	9e02      	ldr	r6, [sp, #8]
100419c6:	2e02      	cmp	r6, #2
100419c8:	d100      	bne.n	100419cc <__aeabi_dmul+0x114>
100419ca:	e235      	b.n	10041e38 <__aeabi_dmul+0x580>
100419cc:	2e03      	cmp	r6, #3
100419ce:	d100      	bne.n	100419d2 <__aeabi_dmul+0x11a>
100419d0:	e1d2      	b.n	10041d78 <__aeabi_dmul+0x4c0>
100419d2:	4654      	mov	r4, sl
100419d4:	4648      	mov	r0, r9
100419d6:	2e01      	cmp	r6, #1
100419d8:	d0c1      	beq.n	1004195e <__aeabi_dmul+0xa6>
100419da:	9a01      	ldr	r2, [sp, #4]
100419dc:	4b7d      	ldr	r3, [pc, #500]	@ (10041bd4 <__aeabi_dmul+0x31c>)
100419de:	4694      	mov	ip, r2
100419e0:	4463      	add	r3, ip
100419e2:	2b00      	cmp	r3, #0
100419e4:	dc00      	bgt.n	100419e8 <__aeabi_dmul+0x130>
100419e6:	e0c0      	b.n	10041b6a <__aeabi_dmul+0x2b2>
100419e8:	0742      	lsls	r2, r0, #29
100419ea:	d009      	beq.n	10041a00 <__aeabi_dmul+0x148>
100419ec:	220f      	movs	r2, #15
100419ee:	4002      	ands	r2, r0
100419f0:	2a04      	cmp	r2, #4
100419f2:	d005      	beq.n	10041a00 <__aeabi_dmul+0x148>
100419f4:	1d02      	adds	r2, r0, #4
100419f6:	4282      	cmp	r2, r0
100419f8:	4180      	sbcs	r0, r0
100419fa:	4240      	negs	r0, r0
100419fc:	1824      	adds	r4, r4, r0
100419fe:	0010      	movs	r0, r2
10041a00:	01e2      	lsls	r2, r4, #7
10041a02:	d506      	bpl.n	10041a12 <__aeabi_dmul+0x15a>
10041a04:	4b74      	ldr	r3, [pc, #464]	@ (10041bd8 <__aeabi_dmul+0x320>)
10041a06:	9a01      	ldr	r2, [sp, #4]
10041a08:	401c      	ands	r4, r3
10041a0a:	2380      	movs	r3, #128	@ 0x80
10041a0c:	4694      	mov	ip, r2
10041a0e:	00db      	lsls	r3, r3, #3
10041a10:	4463      	add	r3, ip
10041a12:	4a72      	ldr	r2, [pc, #456]	@ (10041bdc <__aeabi_dmul+0x324>)
10041a14:	4293      	cmp	r3, r2
10041a16:	dc6b      	bgt.n	10041af0 <__aeabi_dmul+0x238>
10041a18:	0762      	lsls	r2, r4, #29
10041a1a:	08c0      	lsrs	r0, r0, #3
10041a1c:	0264      	lsls	r4, r4, #9
10041a1e:	055b      	lsls	r3, r3, #21
10041a20:	4302      	orrs	r2, r0
10041a22:	0b24      	lsrs	r4, r4, #12
10041a24:	0d5b      	lsrs	r3, r3, #21
10041a26:	e79d      	b.n	10041964 <__aeabi_dmul+0xac>
10041a28:	2190      	movs	r1, #144	@ 0x90
10041a2a:	0089      	lsls	r1, r1, #2
10041a2c:	420f      	tst	r7, r1
10041a2e:	d163      	bne.n	10041af8 <__aeabi_dmul+0x240>
10041a30:	2288      	movs	r2, #136	@ 0x88
10041a32:	423a      	tst	r2, r7
10041a34:	d100      	bne.n	10041a38 <__aeabi_dmul+0x180>
10041a36:	e0d7      	b.n	10041be8 <__aeabi_dmul+0x330>
10041a38:	9b00      	ldr	r3, [sp, #0]
10041a3a:	46a2      	mov	sl, r4
10041a3c:	469b      	mov	fp, r3
10041a3e:	4681      	mov	r9, r0
10041a40:	9602      	str	r6, [sp, #8]
10041a42:	e7bf      	b.n	100419c4 <__aeabi_dmul+0x10c>
10041a44:	0023      	movs	r3, r4
10041a46:	4333      	orrs	r3, r6
10041a48:	d100      	bne.n	10041a4c <__aeabi_dmul+0x194>
10041a4a:	e07f      	b.n	10041b4c <__aeabi_dmul+0x294>
10041a4c:	2c00      	cmp	r4, #0
10041a4e:	d100      	bne.n	10041a52 <__aeabi_dmul+0x19a>
10041a50:	e1ad      	b.n	10041dae <__aeabi_dmul+0x4f6>
10041a52:	0020      	movs	r0, r4
10041a54:	f7ff fcce 	bl	100413f4 <__clzsi2>
10041a58:	0002      	movs	r2, r0
10041a5a:	0003      	movs	r3, r0
10041a5c:	3a0b      	subs	r2, #11
10041a5e:	201d      	movs	r0, #29
10041a60:	0019      	movs	r1, r3
10041a62:	1a82      	subs	r2, r0, r2
10041a64:	0030      	movs	r0, r6
10041a66:	3908      	subs	r1, #8
10041a68:	40d0      	lsrs	r0, r2
10041a6a:	408c      	lsls	r4, r1
10041a6c:	4304      	orrs	r4, r0
10041a6e:	0030      	movs	r0, r6
10041a70:	4088      	lsls	r0, r1
10041a72:	4a5b      	ldr	r2, [pc, #364]	@ (10041be0 <__aeabi_dmul+0x328>)
10041a74:	1aeb      	subs	r3, r5, r3
10041a76:	4694      	mov	ip, r2
10041a78:	4463      	add	r3, ip
10041a7a:	1c5a      	adds	r2, r3, #1
10041a7c:	9201      	str	r2, [sp, #4]
10041a7e:	4642      	mov	r2, r8
10041a80:	2600      	movs	r6, #0
10041a82:	2a0a      	cmp	r2, #10
10041a84:	dc00      	bgt.n	10041a88 <__aeabi_dmul+0x1d0>
10041a86:	e75a      	b.n	1004193e <__aeabi_dmul+0x86>
10041a88:	e79c      	b.n	100419c4 <__aeabi_dmul+0x10c>
10041a8a:	4653      	mov	r3, sl
10041a8c:	4303      	orrs	r3, r0
10041a8e:	4699      	mov	r9, r3
10041a90:	d054      	beq.n	10041b3c <__aeabi_dmul+0x284>
10041a92:	4653      	mov	r3, sl
10041a94:	2b00      	cmp	r3, #0
10041a96:	d100      	bne.n	10041a9a <__aeabi_dmul+0x1e2>
10041a98:	e177      	b.n	10041d8a <__aeabi_dmul+0x4d2>
10041a9a:	4650      	mov	r0, sl
10041a9c:	f7ff fcaa 	bl	100413f4 <__clzsi2>
10041aa0:	230b      	movs	r3, #11
10041aa2:	425b      	negs	r3, r3
10041aa4:	469c      	mov	ip, r3
10041aa6:	0002      	movs	r2, r0
10041aa8:	4484      	add	ip, r0
10041aaa:	0011      	movs	r1, r2
10041aac:	4650      	mov	r0, sl
10041aae:	3908      	subs	r1, #8
10041ab0:	4088      	lsls	r0, r1
10041ab2:	231d      	movs	r3, #29
10041ab4:	4680      	mov	r8, r0
10041ab6:	4660      	mov	r0, ip
10041ab8:	1a1b      	subs	r3, r3, r0
10041aba:	0020      	movs	r0, r4
10041abc:	40d8      	lsrs	r0, r3
10041abe:	0003      	movs	r3, r0
10041ac0:	4640      	mov	r0, r8
10041ac2:	4303      	orrs	r3, r0
10041ac4:	469a      	mov	sl, r3
10041ac6:	0023      	movs	r3, r4
10041ac8:	408b      	lsls	r3, r1
10041aca:	4699      	mov	r9, r3
10041acc:	2300      	movs	r3, #0
10041ace:	4d44      	ldr	r5, [pc, #272]	@ (10041be0 <__aeabi_dmul+0x328>)
10041ad0:	4698      	mov	r8, r3
10041ad2:	1aad      	subs	r5, r5, r2
10041ad4:	9302      	str	r3, [sp, #8]
10041ad6:	e715      	b.n	10041904 <__aeabi_dmul+0x4c>
10041ad8:	4652      	mov	r2, sl
10041ada:	4302      	orrs	r2, r0
10041adc:	4691      	mov	r9, r2
10041ade:	d126      	bne.n	10041b2e <__aeabi_dmul+0x276>
10041ae0:	2200      	movs	r2, #0
10041ae2:	001d      	movs	r5, r3
10041ae4:	2302      	movs	r3, #2
10041ae6:	4692      	mov	sl, r2
10041ae8:	3208      	adds	r2, #8
10041aea:	4690      	mov	r8, r2
10041aec:	9302      	str	r3, [sp, #8]
10041aee:	e709      	b.n	10041904 <__aeabi_dmul+0x4c>
10041af0:	2400      	movs	r4, #0
10041af2:	2200      	movs	r2, #0
10041af4:	4b35      	ldr	r3, [pc, #212]	@ (10041bcc <__aeabi_dmul+0x314>)
10041af6:	e735      	b.n	10041964 <__aeabi_dmul+0xac>
10041af8:	2300      	movs	r3, #0
10041afa:	2480      	movs	r4, #128	@ 0x80
10041afc:	469b      	mov	fp, r3
10041afe:	0324      	lsls	r4, r4, #12
10041b00:	4b32      	ldr	r3, [pc, #200]	@ (10041bcc <__aeabi_dmul+0x314>)
10041b02:	e72f      	b.n	10041964 <__aeabi_dmul+0xac>
10041b04:	2202      	movs	r2, #2
10041b06:	4641      	mov	r1, r8
10041b08:	4311      	orrs	r1, r2
10041b0a:	2280      	movs	r2, #128	@ 0x80
10041b0c:	0112      	lsls	r2, r2, #4
10041b0e:	4694      	mov	ip, r2
10041b10:	002a      	movs	r2, r5
10041b12:	4462      	add	r2, ip
10041b14:	4688      	mov	r8, r1
10041b16:	9201      	str	r2, [sp, #4]
10041b18:	290a      	cmp	r1, #10
10041b1a:	dd00      	ble.n	10041b1e <__aeabi_dmul+0x266>
10041b1c:	e752      	b.n	100419c4 <__aeabi_dmul+0x10c>
10041b1e:	465a      	mov	r2, fp
10041b20:	2000      	movs	r0, #0
10041b22:	9900      	ldr	r1, [sp, #0]
10041b24:	0004      	movs	r4, r0
10041b26:	404a      	eors	r2, r1
10041b28:	4693      	mov	fp, r2
10041b2a:	2602      	movs	r6, #2
10041b2c:	e70b      	b.n	10041946 <__aeabi_dmul+0x8e>
10041b2e:	220c      	movs	r2, #12
10041b30:	001d      	movs	r5, r3
10041b32:	2303      	movs	r3, #3
10041b34:	4681      	mov	r9, r0
10041b36:	4690      	mov	r8, r2
10041b38:	9302      	str	r3, [sp, #8]
10041b3a:	e6e3      	b.n	10041904 <__aeabi_dmul+0x4c>
10041b3c:	2300      	movs	r3, #0
10041b3e:	469a      	mov	sl, r3
10041b40:	3304      	adds	r3, #4
10041b42:	4698      	mov	r8, r3
10041b44:	3b03      	subs	r3, #3
10041b46:	2500      	movs	r5, #0
10041b48:	9302      	str	r3, [sp, #8]
10041b4a:	e6db      	b.n	10041904 <__aeabi_dmul+0x4c>
10041b4c:	4642      	mov	r2, r8
10041b4e:	3301      	adds	r3, #1
10041b50:	431a      	orrs	r2, r3
10041b52:	002b      	movs	r3, r5
10041b54:	4690      	mov	r8, r2
10041b56:	1c5a      	adds	r2, r3, #1
10041b58:	9201      	str	r2, [sp, #4]
10041b5a:	4642      	mov	r2, r8
10041b5c:	2400      	movs	r4, #0
10041b5e:	2000      	movs	r0, #0
10041b60:	2601      	movs	r6, #1
10041b62:	2a0a      	cmp	r2, #10
10041b64:	dc00      	bgt.n	10041b68 <__aeabi_dmul+0x2b0>
10041b66:	e6ea      	b.n	1004193e <__aeabi_dmul+0x86>
10041b68:	e72c      	b.n	100419c4 <__aeabi_dmul+0x10c>
10041b6a:	2201      	movs	r2, #1
10041b6c:	1ad2      	subs	r2, r2, r3
10041b6e:	2a38      	cmp	r2, #56	@ 0x38
10041b70:	dd00      	ble.n	10041b74 <__aeabi_dmul+0x2bc>
10041b72:	e6f4      	b.n	1004195e <__aeabi_dmul+0xa6>
10041b74:	2a1f      	cmp	r2, #31
10041b76:	dc00      	bgt.n	10041b7a <__aeabi_dmul+0x2c2>
10041b78:	e12a      	b.n	10041dd0 <__aeabi_dmul+0x518>
10041b7a:	211f      	movs	r1, #31
10041b7c:	4249      	negs	r1, r1
10041b7e:	1acb      	subs	r3, r1, r3
10041b80:	0021      	movs	r1, r4
10041b82:	40d9      	lsrs	r1, r3
10041b84:	000b      	movs	r3, r1
10041b86:	2a20      	cmp	r2, #32
10041b88:	d005      	beq.n	10041b96 <__aeabi_dmul+0x2de>
10041b8a:	4a16      	ldr	r2, [pc, #88]	@ (10041be4 <__aeabi_dmul+0x32c>)
10041b8c:	9d01      	ldr	r5, [sp, #4]
10041b8e:	4694      	mov	ip, r2
10041b90:	4465      	add	r5, ip
10041b92:	40ac      	lsls	r4, r5
10041b94:	4320      	orrs	r0, r4
10041b96:	1e42      	subs	r2, r0, #1
10041b98:	4190      	sbcs	r0, r2
10041b9a:	4318      	orrs	r0, r3
10041b9c:	2307      	movs	r3, #7
10041b9e:	0019      	movs	r1, r3
10041ba0:	2400      	movs	r4, #0
10041ba2:	4001      	ands	r1, r0
10041ba4:	4203      	tst	r3, r0
10041ba6:	d00c      	beq.n	10041bc2 <__aeabi_dmul+0x30a>
10041ba8:	230f      	movs	r3, #15
10041baa:	4003      	ands	r3, r0
10041bac:	2b04      	cmp	r3, #4
10041bae:	d100      	bne.n	10041bb2 <__aeabi_dmul+0x2fa>
10041bb0:	e140      	b.n	10041e34 <__aeabi_dmul+0x57c>
10041bb2:	1d03      	adds	r3, r0, #4
10041bb4:	4283      	cmp	r3, r0
10041bb6:	41a4      	sbcs	r4, r4
10041bb8:	0018      	movs	r0, r3
10041bba:	4264      	negs	r4, r4
10041bbc:	0761      	lsls	r1, r4, #29
10041bbe:	0264      	lsls	r4, r4, #9
10041bc0:	0b24      	lsrs	r4, r4, #12
10041bc2:	08c2      	lsrs	r2, r0, #3
10041bc4:	2300      	movs	r3, #0
10041bc6:	430a      	orrs	r2, r1
10041bc8:	e6cc      	b.n	10041964 <__aeabi_dmul+0xac>
10041bca:	46c0      	nop			@ (mov r8, r8)
10041bcc:	000007ff 	.word	0x000007ff
10041bd0:	fffffc01 	.word	0xfffffc01
10041bd4:	000003ff 	.word	0x000003ff
10041bd8:	feffffff 	.word	0xfeffffff
10041bdc:	000007fe 	.word	0x000007fe
10041be0:	fffffc0d 	.word	0xfffffc0d
10041be4:	0000043e 	.word	0x0000043e
10041be8:	4649      	mov	r1, r9
10041bea:	464a      	mov	r2, r9
10041bec:	0409      	lsls	r1, r1, #16
10041bee:	0c09      	lsrs	r1, r1, #16
10041bf0:	000d      	movs	r5, r1
10041bf2:	0c16      	lsrs	r6, r2, #16
10041bf4:	0c02      	lsrs	r2, r0, #16
10041bf6:	0400      	lsls	r0, r0, #16
10041bf8:	0c00      	lsrs	r0, r0, #16
10041bfa:	4345      	muls	r5, r0
10041bfc:	46ac      	mov	ip, r5
10041bfe:	0005      	movs	r5, r0
10041c00:	4375      	muls	r5, r6
10041c02:	46a8      	mov	r8, r5
10041c04:	0015      	movs	r5, r2
10041c06:	000f      	movs	r7, r1
10041c08:	4375      	muls	r5, r6
10041c0a:	9200      	str	r2, [sp, #0]
10041c0c:	9502      	str	r5, [sp, #8]
10041c0e:	002a      	movs	r2, r5
10041c10:	9d00      	ldr	r5, [sp, #0]
10041c12:	436f      	muls	r7, r5
10041c14:	4665      	mov	r5, ip
10041c16:	0c2d      	lsrs	r5, r5, #16
10041c18:	46a9      	mov	r9, r5
10041c1a:	4447      	add	r7, r8
10041c1c:	444f      	add	r7, r9
10041c1e:	45b8      	cmp	r8, r7
10041c20:	d905      	bls.n	10041c2e <__aeabi_dmul+0x376>
10041c22:	0015      	movs	r5, r2
10041c24:	2280      	movs	r2, #128	@ 0x80
10041c26:	0252      	lsls	r2, r2, #9
10041c28:	4690      	mov	r8, r2
10041c2a:	4445      	add	r5, r8
10041c2c:	9502      	str	r5, [sp, #8]
10041c2e:	0c3d      	lsrs	r5, r7, #16
10041c30:	9503      	str	r5, [sp, #12]
10041c32:	4665      	mov	r5, ip
10041c34:	042d      	lsls	r5, r5, #16
10041c36:	043f      	lsls	r7, r7, #16
10041c38:	0c2d      	lsrs	r5, r5, #16
10041c3a:	46ac      	mov	ip, r5
10041c3c:	003d      	movs	r5, r7
10041c3e:	4465      	add	r5, ip
10041c40:	9504      	str	r5, [sp, #16]
10041c42:	0c25      	lsrs	r5, r4, #16
10041c44:	0424      	lsls	r4, r4, #16
10041c46:	0c24      	lsrs	r4, r4, #16
10041c48:	46ac      	mov	ip, r5
10041c4a:	0025      	movs	r5, r4
10041c4c:	4375      	muls	r5, r6
10041c4e:	46a8      	mov	r8, r5
10041c50:	4665      	mov	r5, ip
10041c52:	000f      	movs	r7, r1
10041c54:	4369      	muls	r1, r5
10041c56:	4441      	add	r1, r8
10041c58:	4689      	mov	r9, r1
10041c5a:	4367      	muls	r7, r4
10041c5c:	0c39      	lsrs	r1, r7, #16
10041c5e:	4449      	add	r1, r9
10041c60:	436e      	muls	r6, r5
10041c62:	4588      	cmp	r8, r1
10041c64:	d903      	bls.n	10041c6e <__aeabi_dmul+0x3b6>
10041c66:	2280      	movs	r2, #128	@ 0x80
10041c68:	0252      	lsls	r2, r2, #9
10041c6a:	4690      	mov	r8, r2
10041c6c:	4446      	add	r6, r8
10041c6e:	0c0d      	lsrs	r5, r1, #16
10041c70:	46a8      	mov	r8, r5
10041c72:	0035      	movs	r5, r6
10041c74:	4445      	add	r5, r8
10041c76:	9505      	str	r5, [sp, #20]
10041c78:	9d03      	ldr	r5, [sp, #12]
10041c7a:	043f      	lsls	r7, r7, #16
10041c7c:	46a8      	mov	r8, r5
10041c7e:	0c3f      	lsrs	r7, r7, #16
10041c80:	0409      	lsls	r1, r1, #16
10041c82:	19c9      	adds	r1, r1, r7
10041c84:	4488      	add	r8, r1
10041c86:	4645      	mov	r5, r8
10041c88:	9503      	str	r5, [sp, #12]
10041c8a:	4655      	mov	r5, sl
10041c8c:	042e      	lsls	r6, r5, #16
10041c8e:	0c36      	lsrs	r6, r6, #16
10041c90:	0c2f      	lsrs	r7, r5, #16
10041c92:	0035      	movs	r5, r6
10041c94:	4345      	muls	r5, r0
10041c96:	4378      	muls	r0, r7
10041c98:	4681      	mov	r9, r0
10041c9a:	0038      	movs	r0, r7
10041c9c:	46a8      	mov	r8, r5
10041c9e:	0c2d      	lsrs	r5, r5, #16
10041ca0:	46aa      	mov	sl, r5
10041ca2:	9a00      	ldr	r2, [sp, #0]
10041ca4:	4350      	muls	r0, r2
10041ca6:	4372      	muls	r2, r6
10041ca8:	444a      	add	r2, r9
10041caa:	4452      	add	r2, sl
10041cac:	4591      	cmp	r9, r2
10041cae:	d903      	bls.n	10041cb8 <__aeabi_dmul+0x400>
10041cb0:	2580      	movs	r5, #128	@ 0x80
10041cb2:	026d      	lsls	r5, r5, #9
10041cb4:	46a9      	mov	r9, r5
10041cb6:	4448      	add	r0, r9
10041cb8:	0c15      	lsrs	r5, r2, #16
10041cba:	46a9      	mov	r9, r5
10041cbc:	4645      	mov	r5, r8
10041cbe:	042d      	lsls	r5, r5, #16
10041cc0:	0c2d      	lsrs	r5, r5, #16
10041cc2:	46a8      	mov	r8, r5
10041cc4:	4665      	mov	r5, ip
10041cc6:	437d      	muls	r5, r7
10041cc8:	0412      	lsls	r2, r2, #16
10041cca:	4448      	add	r0, r9
10041ccc:	4490      	add	r8, r2
10041cce:	46a9      	mov	r9, r5
10041cd0:	0032      	movs	r2, r6
10041cd2:	4665      	mov	r5, ip
10041cd4:	4362      	muls	r2, r4
10041cd6:	436e      	muls	r6, r5
10041cd8:	437c      	muls	r4, r7
10041cda:	0c17      	lsrs	r7, r2, #16
10041cdc:	1936      	adds	r6, r6, r4
10041cde:	19bf      	adds	r7, r7, r6
10041ce0:	42bc      	cmp	r4, r7
10041ce2:	d903      	bls.n	10041cec <__aeabi_dmul+0x434>
10041ce4:	2480      	movs	r4, #128	@ 0x80
10041ce6:	0264      	lsls	r4, r4, #9
10041ce8:	46a4      	mov	ip, r4
10041cea:	44e1      	add	r9, ip
10041cec:	9c02      	ldr	r4, [sp, #8]
10041cee:	9e03      	ldr	r6, [sp, #12]
10041cf0:	46a4      	mov	ip, r4
10041cf2:	9d05      	ldr	r5, [sp, #20]
10041cf4:	4466      	add	r6, ip
10041cf6:	428e      	cmp	r6, r1
10041cf8:	4189      	sbcs	r1, r1
10041cfa:	46ac      	mov	ip, r5
10041cfc:	0412      	lsls	r2, r2, #16
10041cfe:	043c      	lsls	r4, r7, #16
10041d00:	0c12      	lsrs	r2, r2, #16
10041d02:	18a2      	adds	r2, r4, r2
10041d04:	4462      	add	r2, ip
10041d06:	4249      	negs	r1, r1
10041d08:	1854      	adds	r4, r2, r1
10041d0a:	4446      	add	r6, r8
10041d0c:	46a4      	mov	ip, r4
10041d0e:	4546      	cmp	r6, r8
10041d10:	41a4      	sbcs	r4, r4
10041d12:	4682      	mov	sl, r0
10041d14:	4264      	negs	r4, r4
10041d16:	46a0      	mov	r8, r4
10041d18:	42aa      	cmp	r2, r5
10041d1a:	4192      	sbcs	r2, r2
10041d1c:	458c      	cmp	ip, r1
10041d1e:	4189      	sbcs	r1, r1
10041d20:	44e2      	add	sl, ip
10041d22:	44d0      	add	r8, sl
10041d24:	4249      	negs	r1, r1
10041d26:	4252      	negs	r2, r2
10041d28:	430a      	orrs	r2, r1
10041d2a:	45a0      	cmp	r8, r4
10041d2c:	41a4      	sbcs	r4, r4
10041d2e:	4582      	cmp	sl, r0
10041d30:	4189      	sbcs	r1, r1
10041d32:	4264      	negs	r4, r4
10041d34:	4249      	negs	r1, r1
10041d36:	430c      	orrs	r4, r1
10041d38:	4641      	mov	r1, r8
10041d3a:	0c3f      	lsrs	r7, r7, #16
10041d3c:	19d2      	adds	r2, r2, r7
10041d3e:	1912      	adds	r2, r2, r4
10041d40:	0dcc      	lsrs	r4, r1, #23
10041d42:	9904      	ldr	r1, [sp, #16]
10041d44:	0270      	lsls	r0, r6, #9
10041d46:	4308      	orrs	r0, r1
10041d48:	1e41      	subs	r1, r0, #1
10041d4a:	4188      	sbcs	r0, r1
10041d4c:	4641      	mov	r1, r8
10041d4e:	444a      	add	r2, r9
10041d50:	0df6      	lsrs	r6, r6, #23
10041d52:	0252      	lsls	r2, r2, #9
10041d54:	4330      	orrs	r0, r6
10041d56:	0249      	lsls	r1, r1, #9
10041d58:	4314      	orrs	r4, r2
10041d5a:	4308      	orrs	r0, r1
10041d5c:	01d2      	lsls	r2, r2, #7
10041d5e:	d535      	bpl.n	10041dcc <__aeabi_dmul+0x514>
10041d60:	2201      	movs	r2, #1
10041d62:	0843      	lsrs	r3, r0, #1
10041d64:	4002      	ands	r2, r0
10041d66:	4313      	orrs	r3, r2
10041d68:	07e0      	lsls	r0, r4, #31
10041d6a:	4318      	orrs	r0, r3
10041d6c:	0864      	lsrs	r4, r4, #1
10041d6e:	e634      	b.n	100419da <__aeabi_dmul+0x122>
10041d70:	9b00      	ldr	r3, [sp, #0]
10041d72:	46a2      	mov	sl, r4
10041d74:	469b      	mov	fp, r3
10041d76:	4681      	mov	r9, r0
10041d78:	2480      	movs	r4, #128	@ 0x80
10041d7a:	4653      	mov	r3, sl
10041d7c:	0324      	lsls	r4, r4, #12
10041d7e:	431c      	orrs	r4, r3
10041d80:	0324      	lsls	r4, r4, #12
10041d82:	464a      	mov	r2, r9
10041d84:	4b2e      	ldr	r3, [pc, #184]	@ (10041e40 <__aeabi_dmul+0x588>)
10041d86:	0b24      	lsrs	r4, r4, #12
10041d88:	e5ec      	b.n	10041964 <__aeabi_dmul+0xac>
10041d8a:	f7ff fb33 	bl	100413f4 <__clzsi2>
10041d8e:	2315      	movs	r3, #21
10041d90:	469c      	mov	ip, r3
10041d92:	4484      	add	ip, r0
10041d94:	0002      	movs	r2, r0
10041d96:	4663      	mov	r3, ip
10041d98:	3220      	adds	r2, #32
10041d9a:	2b1c      	cmp	r3, #28
10041d9c:	dc00      	bgt.n	10041da0 <__aeabi_dmul+0x4e8>
10041d9e:	e684      	b.n	10041aaa <__aeabi_dmul+0x1f2>
10041da0:	2300      	movs	r3, #0
10041da2:	4699      	mov	r9, r3
10041da4:	0023      	movs	r3, r4
10041da6:	3808      	subs	r0, #8
10041da8:	4083      	lsls	r3, r0
10041daa:	469a      	mov	sl, r3
10041dac:	e68e      	b.n	10041acc <__aeabi_dmul+0x214>
10041dae:	f7ff fb21 	bl	100413f4 <__clzsi2>
10041db2:	0002      	movs	r2, r0
10041db4:	0003      	movs	r3, r0
10041db6:	3215      	adds	r2, #21
10041db8:	3320      	adds	r3, #32
10041dba:	2a1c      	cmp	r2, #28
10041dbc:	dc00      	bgt.n	10041dc0 <__aeabi_dmul+0x508>
10041dbe:	e64e      	b.n	10041a5e <__aeabi_dmul+0x1a6>
10041dc0:	0002      	movs	r2, r0
10041dc2:	0034      	movs	r4, r6
10041dc4:	3a08      	subs	r2, #8
10041dc6:	2000      	movs	r0, #0
10041dc8:	4094      	lsls	r4, r2
10041dca:	e652      	b.n	10041a72 <__aeabi_dmul+0x1ba>
10041dcc:	9301      	str	r3, [sp, #4]
10041dce:	e604      	b.n	100419da <__aeabi_dmul+0x122>
10041dd0:	4b1c      	ldr	r3, [pc, #112]	@ (10041e44 <__aeabi_dmul+0x58c>)
10041dd2:	0021      	movs	r1, r4
10041dd4:	469c      	mov	ip, r3
10041dd6:	0003      	movs	r3, r0
10041dd8:	9d01      	ldr	r5, [sp, #4]
10041dda:	40d3      	lsrs	r3, r2
10041ddc:	4465      	add	r5, ip
10041dde:	40a9      	lsls	r1, r5
10041de0:	4319      	orrs	r1, r3
10041de2:	0003      	movs	r3, r0
10041de4:	40ab      	lsls	r3, r5
10041de6:	1e58      	subs	r0, r3, #1
10041de8:	4183      	sbcs	r3, r0
10041dea:	4319      	orrs	r1, r3
10041dec:	0008      	movs	r0, r1
10041dee:	40d4      	lsrs	r4, r2
10041df0:	074b      	lsls	r3, r1, #29
10041df2:	d009      	beq.n	10041e08 <__aeabi_dmul+0x550>
10041df4:	230f      	movs	r3, #15
10041df6:	400b      	ands	r3, r1
10041df8:	2b04      	cmp	r3, #4
10041dfa:	d005      	beq.n	10041e08 <__aeabi_dmul+0x550>
10041dfc:	1d0b      	adds	r3, r1, #4
10041dfe:	428b      	cmp	r3, r1
10041e00:	4180      	sbcs	r0, r0
10041e02:	4240      	negs	r0, r0
10041e04:	1824      	adds	r4, r4, r0
10041e06:	0018      	movs	r0, r3
10041e08:	0223      	lsls	r3, r4, #8
10041e0a:	d400      	bmi.n	10041e0e <__aeabi_dmul+0x556>
10041e0c:	e6d6      	b.n	10041bbc <__aeabi_dmul+0x304>
10041e0e:	2301      	movs	r3, #1
10041e10:	2400      	movs	r4, #0
10041e12:	2200      	movs	r2, #0
10041e14:	e5a6      	b.n	10041964 <__aeabi_dmul+0xac>
10041e16:	290f      	cmp	r1, #15
10041e18:	d1aa      	bne.n	10041d70 <__aeabi_dmul+0x4b8>
10041e1a:	2380      	movs	r3, #128	@ 0x80
10041e1c:	4652      	mov	r2, sl
10041e1e:	031b      	lsls	r3, r3, #12
10041e20:	421a      	tst	r2, r3
10041e22:	d0a9      	beq.n	10041d78 <__aeabi_dmul+0x4c0>
10041e24:	421c      	tst	r4, r3
10041e26:	d1a7      	bne.n	10041d78 <__aeabi_dmul+0x4c0>
10041e28:	431c      	orrs	r4, r3
10041e2a:	9b00      	ldr	r3, [sp, #0]
10041e2c:	0002      	movs	r2, r0
10041e2e:	469b      	mov	fp, r3
10041e30:	4b03      	ldr	r3, [pc, #12]	@ (10041e40 <__aeabi_dmul+0x588>)
10041e32:	e597      	b.n	10041964 <__aeabi_dmul+0xac>
10041e34:	2400      	movs	r4, #0
10041e36:	e6c1      	b.n	10041bbc <__aeabi_dmul+0x304>
10041e38:	2400      	movs	r4, #0
10041e3a:	4b01      	ldr	r3, [pc, #4]	@ (10041e40 <__aeabi_dmul+0x588>)
10041e3c:	0022      	movs	r2, r4
10041e3e:	e591      	b.n	10041964 <__aeabi_dmul+0xac>
10041e40:	000007ff 	.word	0x000007ff
10041e44:	0000041e 	.word	0x0000041e

10041e48 <__aeabi_dsub>:
10041e48:	b5f0      	push	{r4, r5, r6, r7, lr}
10041e4a:	464e      	mov	r6, r9
10041e4c:	4645      	mov	r5, r8
10041e4e:	46de      	mov	lr, fp
10041e50:	4657      	mov	r7, sl
10041e52:	b5e0      	push	{r5, r6, r7, lr}
10041e54:	b085      	sub	sp, #20
10041e56:	9000      	str	r0, [sp, #0]
10041e58:	9101      	str	r1, [sp, #4]
10041e5a:	030c      	lsls	r4, r1, #12
10041e5c:	004f      	lsls	r7, r1, #1
10041e5e:	0fce      	lsrs	r6, r1, #31
10041e60:	0a61      	lsrs	r1, r4, #9
10041e62:	9c00      	ldr	r4, [sp, #0]
10041e64:	46b0      	mov	r8, r6
10041e66:	0f64      	lsrs	r4, r4, #29
10041e68:	430c      	orrs	r4, r1
10041e6a:	9900      	ldr	r1, [sp, #0]
10041e6c:	0d7f      	lsrs	r7, r7, #21
10041e6e:	00c8      	lsls	r0, r1, #3
10041e70:	0011      	movs	r1, r2
10041e72:	001a      	movs	r2, r3
10041e74:	031b      	lsls	r3, r3, #12
10041e76:	469c      	mov	ip, r3
10041e78:	9100      	str	r1, [sp, #0]
10041e7a:	9201      	str	r2, [sp, #4]
10041e7c:	0051      	lsls	r1, r2, #1
10041e7e:	0d4b      	lsrs	r3, r1, #21
10041e80:	4699      	mov	r9, r3
10041e82:	9b01      	ldr	r3, [sp, #4]
10041e84:	9d00      	ldr	r5, [sp, #0]
10041e86:	0fd9      	lsrs	r1, r3, #31
10041e88:	4663      	mov	r3, ip
10041e8a:	0f6a      	lsrs	r2, r5, #29
10041e8c:	0a5b      	lsrs	r3, r3, #9
10041e8e:	4313      	orrs	r3, r2
10041e90:	00ea      	lsls	r2, r5, #3
10041e92:	4694      	mov	ip, r2
10041e94:	4693      	mov	fp, r2
10041e96:	4ac1      	ldr	r2, [pc, #772]	@ (1004219c <__aeabi_dsub+0x354>)
10041e98:	9003      	str	r0, [sp, #12]
10041e9a:	9302      	str	r3, [sp, #8]
10041e9c:	4591      	cmp	r9, r2
10041e9e:	d100      	bne.n	10041ea2 <__aeabi_dsub+0x5a>
10041ea0:	e0cd      	b.n	1004203e <__aeabi_dsub+0x1f6>
10041ea2:	2501      	movs	r5, #1
10041ea4:	4069      	eors	r1, r5
10041ea6:	464d      	mov	r5, r9
10041ea8:	1b7d      	subs	r5, r7, r5
10041eaa:	46aa      	mov	sl, r5
10041eac:	428e      	cmp	r6, r1
10041eae:	d100      	bne.n	10041eb2 <__aeabi_dsub+0x6a>
10041eb0:	e080      	b.n	10041fb4 <__aeabi_dsub+0x16c>
10041eb2:	2d00      	cmp	r5, #0
10041eb4:	dc00      	bgt.n	10041eb8 <__aeabi_dsub+0x70>
10041eb6:	e335      	b.n	10042524 <__aeabi_dsub+0x6dc>
10041eb8:	4649      	mov	r1, r9
10041eba:	2900      	cmp	r1, #0
10041ebc:	d100      	bne.n	10041ec0 <__aeabi_dsub+0x78>
10041ebe:	e0df      	b.n	10042080 <__aeabi_dsub+0x238>
10041ec0:	4297      	cmp	r7, r2
10041ec2:	d100      	bne.n	10041ec6 <__aeabi_dsub+0x7e>
10041ec4:	e194      	b.n	100421f0 <__aeabi_dsub+0x3a8>
10041ec6:	4652      	mov	r2, sl
10041ec8:	2501      	movs	r5, #1
10041eca:	2a38      	cmp	r2, #56	@ 0x38
10041ecc:	dc19      	bgt.n	10041f02 <__aeabi_dsub+0xba>
10041ece:	2280      	movs	r2, #128	@ 0x80
10041ed0:	9b02      	ldr	r3, [sp, #8]
10041ed2:	0412      	lsls	r2, r2, #16
10041ed4:	4313      	orrs	r3, r2
10041ed6:	9302      	str	r3, [sp, #8]
10041ed8:	4652      	mov	r2, sl
10041eda:	2a1f      	cmp	r2, #31
10041edc:	dd00      	ble.n	10041ee0 <__aeabi_dsub+0x98>
10041ede:	e1e3      	b.n	100422a8 <__aeabi_dsub+0x460>
10041ee0:	4653      	mov	r3, sl
10041ee2:	2220      	movs	r2, #32
10041ee4:	4661      	mov	r1, ip
10041ee6:	9d02      	ldr	r5, [sp, #8]
10041ee8:	1ad2      	subs	r2, r2, r3
10041eea:	4095      	lsls	r5, r2
10041eec:	40d9      	lsrs	r1, r3
10041eee:	430d      	orrs	r5, r1
10041ef0:	4661      	mov	r1, ip
10041ef2:	4091      	lsls	r1, r2
10041ef4:	000a      	movs	r2, r1
10041ef6:	1e51      	subs	r1, r2, #1
10041ef8:	418a      	sbcs	r2, r1
10041efa:	4315      	orrs	r5, r2
10041efc:	9a02      	ldr	r2, [sp, #8]
10041efe:	40da      	lsrs	r2, r3
10041f00:	1aa4      	subs	r4, r4, r2
10041f02:	1b45      	subs	r5, r0, r5
10041f04:	42a8      	cmp	r0, r5
10041f06:	4180      	sbcs	r0, r0
10041f08:	4240      	negs	r0, r0
10041f0a:	1a24      	subs	r4, r4, r0
10041f0c:	0223      	lsls	r3, r4, #8
10041f0e:	d400      	bmi.n	10041f12 <__aeabi_dsub+0xca>
10041f10:	e13d      	b.n	1004218e <__aeabi_dsub+0x346>
10041f12:	0264      	lsls	r4, r4, #9
10041f14:	0a64      	lsrs	r4, r4, #9
10041f16:	2c00      	cmp	r4, #0
10041f18:	d100      	bne.n	10041f1c <__aeabi_dsub+0xd4>
10041f1a:	e147      	b.n	100421ac <__aeabi_dsub+0x364>
10041f1c:	0020      	movs	r0, r4
10041f1e:	f7ff fa69 	bl	100413f4 <__clzsi2>
10041f22:	0003      	movs	r3, r0
10041f24:	3b08      	subs	r3, #8
10041f26:	2120      	movs	r1, #32
10041f28:	0028      	movs	r0, r5
10041f2a:	1aca      	subs	r2, r1, r3
10041f2c:	40d0      	lsrs	r0, r2
10041f2e:	409c      	lsls	r4, r3
10041f30:	0002      	movs	r2, r0
10041f32:	409d      	lsls	r5, r3
10041f34:	4322      	orrs	r2, r4
10041f36:	429f      	cmp	r7, r3
10041f38:	dd00      	ble.n	10041f3c <__aeabi_dsub+0xf4>
10041f3a:	e177      	b.n	1004222c <__aeabi_dsub+0x3e4>
10041f3c:	1bd8      	subs	r0, r3, r7
10041f3e:	3001      	adds	r0, #1
10041f40:	1a09      	subs	r1, r1, r0
10041f42:	002c      	movs	r4, r5
10041f44:	408d      	lsls	r5, r1
10041f46:	40c4      	lsrs	r4, r0
10041f48:	1e6b      	subs	r3, r5, #1
10041f4a:	419d      	sbcs	r5, r3
10041f4c:	0013      	movs	r3, r2
10041f4e:	40c2      	lsrs	r2, r0
10041f50:	408b      	lsls	r3, r1
10041f52:	4325      	orrs	r5, r4
10041f54:	2700      	movs	r7, #0
10041f56:	0014      	movs	r4, r2
10041f58:	431d      	orrs	r5, r3
10041f5a:	076b      	lsls	r3, r5, #29
10041f5c:	d009      	beq.n	10041f72 <__aeabi_dsub+0x12a>
10041f5e:	230f      	movs	r3, #15
10041f60:	402b      	ands	r3, r5
10041f62:	2b04      	cmp	r3, #4
10041f64:	d005      	beq.n	10041f72 <__aeabi_dsub+0x12a>
10041f66:	1d2b      	adds	r3, r5, #4
10041f68:	42ab      	cmp	r3, r5
10041f6a:	41ad      	sbcs	r5, r5
10041f6c:	426d      	negs	r5, r5
10041f6e:	1964      	adds	r4, r4, r5
10041f70:	001d      	movs	r5, r3
10041f72:	0223      	lsls	r3, r4, #8
10041f74:	d400      	bmi.n	10041f78 <__aeabi_dsub+0x130>
10041f76:	e140      	b.n	100421fa <__aeabi_dsub+0x3b2>
10041f78:	4a88      	ldr	r2, [pc, #544]	@ (1004219c <__aeabi_dsub+0x354>)
10041f7a:	3701      	adds	r7, #1
10041f7c:	4297      	cmp	r7, r2
10041f7e:	d100      	bne.n	10041f82 <__aeabi_dsub+0x13a>
10041f80:	e101      	b.n	10042186 <__aeabi_dsub+0x33e>
10041f82:	2601      	movs	r6, #1
10041f84:	4643      	mov	r3, r8
10041f86:	4986      	ldr	r1, [pc, #536]	@ (100421a0 <__aeabi_dsub+0x358>)
10041f88:	08ed      	lsrs	r5, r5, #3
10041f8a:	4021      	ands	r1, r4
10041f8c:	074a      	lsls	r2, r1, #29
10041f8e:	432a      	orrs	r2, r5
10041f90:	057c      	lsls	r4, r7, #21
10041f92:	024d      	lsls	r5, r1, #9
10041f94:	0b2d      	lsrs	r5, r5, #12
10041f96:	0d64      	lsrs	r4, r4, #21
10041f98:	401e      	ands	r6, r3
10041f9a:	0524      	lsls	r4, r4, #20
10041f9c:	432c      	orrs	r4, r5
10041f9e:	07f6      	lsls	r6, r6, #31
10041fa0:	4334      	orrs	r4, r6
10041fa2:	0010      	movs	r0, r2
10041fa4:	0021      	movs	r1, r4
10041fa6:	b005      	add	sp, #20
10041fa8:	bcf0      	pop	{r4, r5, r6, r7}
10041faa:	46bb      	mov	fp, r7
10041fac:	46b2      	mov	sl, r6
10041fae:	46a9      	mov	r9, r5
10041fb0:	46a0      	mov	r8, r4
10041fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041fb4:	2d00      	cmp	r5, #0
10041fb6:	dc00      	bgt.n	10041fba <__aeabi_dsub+0x172>
10041fb8:	e2d0      	b.n	1004255c <__aeabi_dsub+0x714>
10041fba:	4649      	mov	r1, r9
10041fbc:	2900      	cmp	r1, #0
10041fbe:	d000      	beq.n	10041fc2 <__aeabi_dsub+0x17a>
10041fc0:	e0d4      	b.n	1004216c <__aeabi_dsub+0x324>
10041fc2:	4661      	mov	r1, ip
10041fc4:	9b02      	ldr	r3, [sp, #8]
10041fc6:	4319      	orrs	r1, r3
10041fc8:	d100      	bne.n	10041fcc <__aeabi_dsub+0x184>
10041fca:	e12b      	b.n	10042224 <__aeabi_dsub+0x3dc>
10041fcc:	1e69      	subs	r1, r5, #1
10041fce:	2d01      	cmp	r5, #1
10041fd0:	d100      	bne.n	10041fd4 <__aeabi_dsub+0x18c>
10041fd2:	e1d9      	b.n	10042388 <__aeabi_dsub+0x540>
10041fd4:	4295      	cmp	r5, r2
10041fd6:	d100      	bne.n	10041fda <__aeabi_dsub+0x192>
10041fd8:	e10a      	b.n	100421f0 <__aeabi_dsub+0x3a8>
10041fda:	2501      	movs	r5, #1
10041fdc:	2938      	cmp	r1, #56	@ 0x38
10041fde:	dc17      	bgt.n	10042010 <__aeabi_dsub+0x1c8>
10041fe0:	468a      	mov	sl, r1
10041fe2:	4653      	mov	r3, sl
10041fe4:	2b1f      	cmp	r3, #31
10041fe6:	dd00      	ble.n	10041fea <__aeabi_dsub+0x1a2>
10041fe8:	e1e7      	b.n	100423ba <__aeabi_dsub+0x572>
10041fea:	2220      	movs	r2, #32
10041fec:	1ad2      	subs	r2, r2, r3
10041fee:	9b02      	ldr	r3, [sp, #8]
10041ff0:	4661      	mov	r1, ip
10041ff2:	4093      	lsls	r3, r2
10041ff4:	001d      	movs	r5, r3
10041ff6:	4653      	mov	r3, sl
10041ff8:	40d9      	lsrs	r1, r3
10041ffa:	4663      	mov	r3, ip
10041ffc:	4093      	lsls	r3, r2
10041ffe:	001a      	movs	r2, r3
10042000:	430d      	orrs	r5, r1
10042002:	1e51      	subs	r1, r2, #1
10042004:	418a      	sbcs	r2, r1
10042006:	4653      	mov	r3, sl
10042008:	4315      	orrs	r5, r2
1004200a:	9a02      	ldr	r2, [sp, #8]
1004200c:	40da      	lsrs	r2, r3
1004200e:	18a4      	adds	r4, r4, r2
10042010:	182d      	adds	r5, r5, r0
10042012:	4285      	cmp	r5, r0
10042014:	4180      	sbcs	r0, r0
10042016:	4240      	negs	r0, r0
10042018:	1824      	adds	r4, r4, r0
1004201a:	0223      	lsls	r3, r4, #8
1004201c:	d400      	bmi.n	10042020 <__aeabi_dsub+0x1d8>
1004201e:	e0b6      	b.n	1004218e <__aeabi_dsub+0x346>
10042020:	4b5e      	ldr	r3, [pc, #376]	@ (1004219c <__aeabi_dsub+0x354>)
10042022:	3701      	adds	r7, #1
10042024:	429f      	cmp	r7, r3
10042026:	d100      	bne.n	1004202a <__aeabi_dsub+0x1e2>
10042028:	e0ad      	b.n	10042186 <__aeabi_dsub+0x33e>
1004202a:	2101      	movs	r1, #1
1004202c:	4b5c      	ldr	r3, [pc, #368]	@ (100421a0 <__aeabi_dsub+0x358>)
1004202e:	086a      	lsrs	r2, r5, #1
10042030:	401c      	ands	r4, r3
10042032:	4029      	ands	r1, r5
10042034:	430a      	orrs	r2, r1
10042036:	07e5      	lsls	r5, r4, #31
10042038:	4315      	orrs	r5, r2
1004203a:	0864      	lsrs	r4, r4, #1
1004203c:	e78d      	b.n	10041f5a <__aeabi_dsub+0x112>
1004203e:	4a59      	ldr	r2, [pc, #356]	@ (100421a4 <__aeabi_dsub+0x35c>)
10042040:	9b02      	ldr	r3, [sp, #8]
10042042:	4692      	mov	sl, r2
10042044:	4662      	mov	r2, ip
10042046:	44ba      	add	sl, r7
10042048:	431a      	orrs	r2, r3
1004204a:	d02c      	beq.n	100420a6 <__aeabi_dsub+0x25e>
1004204c:	428e      	cmp	r6, r1
1004204e:	d02e      	beq.n	100420ae <__aeabi_dsub+0x266>
10042050:	4652      	mov	r2, sl
10042052:	2a00      	cmp	r2, #0
10042054:	d060      	beq.n	10042118 <__aeabi_dsub+0x2d0>
10042056:	2f00      	cmp	r7, #0
10042058:	d100      	bne.n	1004205c <__aeabi_dsub+0x214>
1004205a:	e0db      	b.n	10042214 <__aeabi_dsub+0x3cc>
1004205c:	4663      	mov	r3, ip
1004205e:	000e      	movs	r6, r1
10042060:	9c02      	ldr	r4, [sp, #8]
10042062:	08d8      	lsrs	r0, r3, #3
10042064:	0762      	lsls	r2, r4, #29
10042066:	4302      	orrs	r2, r0
10042068:	08e4      	lsrs	r4, r4, #3
1004206a:	0013      	movs	r3, r2
1004206c:	4323      	orrs	r3, r4
1004206e:	d100      	bne.n	10042072 <__aeabi_dsub+0x22a>
10042070:	e254      	b.n	1004251c <__aeabi_dsub+0x6d4>
10042072:	2580      	movs	r5, #128	@ 0x80
10042074:	032d      	lsls	r5, r5, #12
10042076:	4325      	orrs	r5, r4
10042078:	032d      	lsls	r5, r5, #12
1004207a:	4c48      	ldr	r4, [pc, #288]	@ (1004219c <__aeabi_dsub+0x354>)
1004207c:	0b2d      	lsrs	r5, r5, #12
1004207e:	e78c      	b.n	10041f9a <__aeabi_dsub+0x152>
10042080:	4661      	mov	r1, ip
10042082:	9b02      	ldr	r3, [sp, #8]
10042084:	4319      	orrs	r1, r3
10042086:	d100      	bne.n	1004208a <__aeabi_dsub+0x242>
10042088:	e0cc      	b.n	10042224 <__aeabi_dsub+0x3dc>
1004208a:	0029      	movs	r1, r5
1004208c:	3901      	subs	r1, #1
1004208e:	2d01      	cmp	r5, #1
10042090:	d100      	bne.n	10042094 <__aeabi_dsub+0x24c>
10042092:	e188      	b.n	100423a6 <__aeabi_dsub+0x55e>
10042094:	4295      	cmp	r5, r2
10042096:	d100      	bne.n	1004209a <__aeabi_dsub+0x252>
10042098:	e0aa      	b.n	100421f0 <__aeabi_dsub+0x3a8>
1004209a:	2501      	movs	r5, #1
1004209c:	2938      	cmp	r1, #56	@ 0x38
1004209e:	dd00      	ble.n	100420a2 <__aeabi_dsub+0x25a>
100420a0:	e72f      	b.n	10041f02 <__aeabi_dsub+0xba>
100420a2:	468a      	mov	sl, r1
100420a4:	e718      	b.n	10041ed8 <__aeabi_dsub+0x90>
100420a6:	2201      	movs	r2, #1
100420a8:	4051      	eors	r1, r2
100420aa:	428e      	cmp	r6, r1
100420ac:	d1d0      	bne.n	10042050 <__aeabi_dsub+0x208>
100420ae:	4653      	mov	r3, sl
100420b0:	2b00      	cmp	r3, #0
100420b2:	d100      	bne.n	100420b6 <__aeabi_dsub+0x26e>
100420b4:	e0be      	b.n	10042234 <__aeabi_dsub+0x3ec>
100420b6:	2f00      	cmp	r7, #0
100420b8:	d000      	beq.n	100420bc <__aeabi_dsub+0x274>
100420ba:	e138      	b.n	1004232e <__aeabi_dsub+0x4e6>
100420bc:	46ca      	mov	sl, r9
100420be:	0022      	movs	r2, r4
100420c0:	4302      	orrs	r2, r0
100420c2:	d100      	bne.n	100420c6 <__aeabi_dsub+0x27e>
100420c4:	e1e2      	b.n	1004248c <__aeabi_dsub+0x644>
100420c6:	4653      	mov	r3, sl
100420c8:	1e59      	subs	r1, r3, #1
100420ca:	2b01      	cmp	r3, #1
100420cc:	d100      	bne.n	100420d0 <__aeabi_dsub+0x288>
100420ce:	e20d      	b.n	100424ec <__aeabi_dsub+0x6a4>
100420d0:	4a32      	ldr	r2, [pc, #200]	@ (1004219c <__aeabi_dsub+0x354>)
100420d2:	4592      	cmp	sl, r2
100420d4:	d100      	bne.n	100420d8 <__aeabi_dsub+0x290>
100420d6:	e1d2      	b.n	1004247e <__aeabi_dsub+0x636>
100420d8:	2701      	movs	r7, #1
100420da:	2938      	cmp	r1, #56	@ 0x38
100420dc:	dc13      	bgt.n	10042106 <__aeabi_dsub+0x2be>
100420de:	291f      	cmp	r1, #31
100420e0:	dd00      	ble.n	100420e4 <__aeabi_dsub+0x29c>
100420e2:	e1ee      	b.n	100424c2 <__aeabi_dsub+0x67a>
100420e4:	2220      	movs	r2, #32
100420e6:	9b02      	ldr	r3, [sp, #8]
100420e8:	1a52      	subs	r2, r2, r1
100420ea:	0025      	movs	r5, r4
100420ec:	0007      	movs	r7, r0
100420ee:	469a      	mov	sl, r3
100420f0:	40cc      	lsrs	r4, r1
100420f2:	4090      	lsls	r0, r2
100420f4:	4095      	lsls	r5, r2
100420f6:	40cf      	lsrs	r7, r1
100420f8:	44a2      	add	sl, r4
100420fa:	1e42      	subs	r2, r0, #1
100420fc:	4190      	sbcs	r0, r2
100420fe:	4653      	mov	r3, sl
10042100:	432f      	orrs	r7, r5
10042102:	4307      	orrs	r7, r0
10042104:	9302      	str	r3, [sp, #8]
10042106:	003d      	movs	r5, r7
10042108:	4465      	add	r5, ip
1004210a:	4565      	cmp	r5, ip
1004210c:	4192      	sbcs	r2, r2
1004210e:	9b02      	ldr	r3, [sp, #8]
10042110:	4252      	negs	r2, r2
10042112:	464f      	mov	r7, r9
10042114:	18d4      	adds	r4, r2, r3
10042116:	e780      	b.n	1004201a <__aeabi_dsub+0x1d2>
10042118:	4a23      	ldr	r2, [pc, #140]	@ (100421a8 <__aeabi_dsub+0x360>)
1004211a:	1c7d      	adds	r5, r7, #1
1004211c:	4215      	tst	r5, r2
1004211e:	d000      	beq.n	10042122 <__aeabi_dsub+0x2da>
10042120:	e0aa      	b.n	10042278 <__aeabi_dsub+0x430>
10042122:	4662      	mov	r2, ip
10042124:	0025      	movs	r5, r4
10042126:	9b02      	ldr	r3, [sp, #8]
10042128:	4305      	orrs	r5, r0
1004212a:	431a      	orrs	r2, r3
1004212c:	2f00      	cmp	r7, #0
1004212e:	d000      	beq.n	10042132 <__aeabi_dsub+0x2ea>
10042130:	e0f5      	b.n	1004231e <__aeabi_dsub+0x4d6>
10042132:	2d00      	cmp	r5, #0
10042134:	d100      	bne.n	10042138 <__aeabi_dsub+0x2f0>
10042136:	e16b      	b.n	10042410 <__aeabi_dsub+0x5c8>
10042138:	2a00      	cmp	r2, #0
1004213a:	d100      	bne.n	1004213e <__aeabi_dsub+0x2f6>
1004213c:	e152      	b.n	100423e4 <__aeabi_dsub+0x59c>
1004213e:	4663      	mov	r3, ip
10042140:	1ac5      	subs	r5, r0, r3
10042142:	9b02      	ldr	r3, [sp, #8]
10042144:	1ae2      	subs	r2, r4, r3
10042146:	42a8      	cmp	r0, r5
10042148:	419b      	sbcs	r3, r3
1004214a:	425b      	negs	r3, r3
1004214c:	1ad3      	subs	r3, r2, r3
1004214e:	021a      	lsls	r2, r3, #8
10042150:	d400      	bmi.n	10042154 <__aeabi_dsub+0x30c>
10042152:	e1d5      	b.n	10042500 <__aeabi_dsub+0x6b8>
10042154:	4663      	mov	r3, ip
10042156:	1a1d      	subs	r5, r3, r0
10042158:	45ac      	cmp	ip, r5
1004215a:	4192      	sbcs	r2, r2
1004215c:	2601      	movs	r6, #1
1004215e:	9b02      	ldr	r3, [sp, #8]
10042160:	4252      	negs	r2, r2
10042162:	1b1c      	subs	r4, r3, r4
10042164:	4688      	mov	r8, r1
10042166:	1aa4      	subs	r4, r4, r2
10042168:	400e      	ands	r6, r1
1004216a:	e6f6      	b.n	10041f5a <__aeabi_dsub+0x112>
1004216c:	4297      	cmp	r7, r2
1004216e:	d03f      	beq.n	100421f0 <__aeabi_dsub+0x3a8>
10042170:	4652      	mov	r2, sl
10042172:	2501      	movs	r5, #1
10042174:	2a38      	cmp	r2, #56	@ 0x38
10042176:	dd00      	ble.n	1004217a <__aeabi_dsub+0x332>
10042178:	e74a      	b.n	10042010 <__aeabi_dsub+0x1c8>
1004217a:	2280      	movs	r2, #128	@ 0x80
1004217c:	9b02      	ldr	r3, [sp, #8]
1004217e:	0412      	lsls	r2, r2, #16
10042180:	4313      	orrs	r3, r2
10042182:	9302      	str	r3, [sp, #8]
10042184:	e72d      	b.n	10041fe2 <__aeabi_dsub+0x19a>
10042186:	003c      	movs	r4, r7
10042188:	2500      	movs	r5, #0
1004218a:	2200      	movs	r2, #0
1004218c:	e705      	b.n	10041f9a <__aeabi_dsub+0x152>
1004218e:	2307      	movs	r3, #7
10042190:	402b      	ands	r3, r5
10042192:	2b00      	cmp	r3, #0
10042194:	d000      	beq.n	10042198 <__aeabi_dsub+0x350>
10042196:	e6e2      	b.n	10041f5e <__aeabi_dsub+0x116>
10042198:	e06b      	b.n	10042272 <__aeabi_dsub+0x42a>
1004219a:	46c0      	nop			@ (mov r8, r8)
1004219c:	000007ff 	.word	0x000007ff
100421a0:	ff7fffff 	.word	0xff7fffff
100421a4:	fffff801 	.word	0xfffff801
100421a8:	000007fe 	.word	0x000007fe
100421ac:	0028      	movs	r0, r5
100421ae:	f7ff f921 	bl	100413f4 <__clzsi2>
100421b2:	0003      	movs	r3, r0
100421b4:	3318      	adds	r3, #24
100421b6:	2b1f      	cmp	r3, #31
100421b8:	dc00      	bgt.n	100421bc <__aeabi_dsub+0x374>
100421ba:	e6b4      	b.n	10041f26 <__aeabi_dsub+0xde>
100421bc:	002a      	movs	r2, r5
100421be:	3808      	subs	r0, #8
100421c0:	4082      	lsls	r2, r0
100421c2:	429f      	cmp	r7, r3
100421c4:	dd00      	ble.n	100421c8 <__aeabi_dsub+0x380>
100421c6:	e0b9      	b.n	1004233c <__aeabi_dsub+0x4f4>
100421c8:	1bdb      	subs	r3, r3, r7
100421ca:	1c58      	adds	r0, r3, #1
100421cc:	281f      	cmp	r0, #31
100421ce:	dc00      	bgt.n	100421d2 <__aeabi_dsub+0x38a>
100421d0:	e1a0      	b.n	10042514 <__aeabi_dsub+0x6cc>
100421d2:	0015      	movs	r5, r2
100421d4:	3b1f      	subs	r3, #31
100421d6:	40dd      	lsrs	r5, r3
100421d8:	2820      	cmp	r0, #32
100421da:	d005      	beq.n	100421e8 <__aeabi_dsub+0x3a0>
100421dc:	2340      	movs	r3, #64	@ 0x40
100421de:	1a1b      	subs	r3, r3, r0
100421e0:	409a      	lsls	r2, r3
100421e2:	1e53      	subs	r3, r2, #1
100421e4:	419a      	sbcs	r2, r3
100421e6:	4315      	orrs	r5, r2
100421e8:	2307      	movs	r3, #7
100421ea:	2700      	movs	r7, #0
100421ec:	402b      	ands	r3, r5
100421ee:	e7d0      	b.n	10042192 <__aeabi_dsub+0x34a>
100421f0:	08c0      	lsrs	r0, r0, #3
100421f2:	0762      	lsls	r2, r4, #29
100421f4:	4302      	orrs	r2, r0
100421f6:	08e4      	lsrs	r4, r4, #3
100421f8:	e737      	b.n	1004206a <__aeabi_dsub+0x222>
100421fa:	08ea      	lsrs	r2, r5, #3
100421fc:	0763      	lsls	r3, r4, #29
100421fe:	431a      	orrs	r2, r3
10042200:	4bd3      	ldr	r3, [pc, #844]	@ (10042550 <__aeabi_dsub+0x708>)
10042202:	08e4      	lsrs	r4, r4, #3
10042204:	429f      	cmp	r7, r3
10042206:	d100      	bne.n	1004220a <__aeabi_dsub+0x3c2>
10042208:	e72f      	b.n	1004206a <__aeabi_dsub+0x222>
1004220a:	0324      	lsls	r4, r4, #12
1004220c:	0b25      	lsrs	r5, r4, #12
1004220e:	057c      	lsls	r4, r7, #21
10042210:	0d64      	lsrs	r4, r4, #21
10042212:	e6c2      	b.n	10041f9a <__aeabi_dsub+0x152>
10042214:	46ca      	mov	sl, r9
10042216:	0022      	movs	r2, r4
10042218:	4302      	orrs	r2, r0
1004221a:	d158      	bne.n	100422ce <__aeabi_dsub+0x486>
1004221c:	4663      	mov	r3, ip
1004221e:	000e      	movs	r6, r1
10042220:	9c02      	ldr	r4, [sp, #8]
10042222:	9303      	str	r3, [sp, #12]
10042224:	9b03      	ldr	r3, [sp, #12]
10042226:	4657      	mov	r7, sl
10042228:	08da      	lsrs	r2, r3, #3
1004222a:	e7e7      	b.n	100421fc <__aeabi_dsub+0x3b4>
1004222c:	4cc9      	ldr	r4, [pc, #804]	@ (10042554 <__aeabi_dsub+0x70c>)
1004222e:	1aff      	subs	r7, r7, r3
10042230:	4014      	ands	r4, r2
10042232:	e692      	b.n	10041f5a <__aeabi_dsub+0x112>
10042234:	4dc8      	ldr	r5, [pc, #800]	@ (10042558 <__aeabi_dsub+0x710>)
10042236:	1c7a      	adds	r2, r7, #1
10042238:	422a      	tst	r2, r5
1004223a:	d000      	beq.n	1004223e <__aeabi_dsub+0x3f6>
1004223c:	e084      	b.n	10042348 <__aeabi_dsub+0x500>
1004223e:	0022      	movs	r2, r4
10042240:	4302      	orrs	r2, r0
10042242:	2f00      	cmp	r7, #0
10042244:	d000      	beq.n	10042248 <__aeabi_dsub+0x400>
10042246:	e0ef      	b.n	10042428 <__aeabi_dsub+0x5e0>
10042248:	2a00      	cmp	r2, #0
1004224a:	d100      	bne.n	1004224e <__aeabi_dsub+0x406>
1004224c:	e0e5      	b.n	1004241a <__aeabi_dsub+0x5d2>
1004224e:	4662      	mov	r2, ip
10042250:	9902      	ldr	r1, [sp, #8]
10042252:	430a      	orrs	r2, r1
10042254:	d100      	bne.n	10042258 <__aeabi_dsub+0x410>
10042256:	e0c5      	b.n	100423e4 <__aeabi_dsub+0x59c>
10042258:	4663      	mov	r3, ip
1004225a:	18c5      	adds	r5, r0, r3
1004225c:	468c      	mov	ip, r1
1004225e:	4285      	cmp	r5, r0
10042260:	4180      	sbcs	r0, r0
10042262:	4464      	add	r4, ip
10042264:	4240      	negs	r0, r0
10042266:	1824      	adds	r4, r4, r0
10042268:	0223      	lsls	r3, r4, #8
1004226a:	d502      	bpl.n	10042272 <__aeabi_dsub+0x42a>
1004226c:	4bb9      	ldr	r3, [pc, #740]	@ (10042554 <__aeabi_dsub+0x70c>)
1004226e:	3701      	adds	r7, #1
10042270:	401c      	ands	r4, r3
10042272:	46ba      	mov	sl, r7
10042274:	9503      	str	r5, [sp, #12]
10042276:	e7d5      	b.n	10042224 <__aeabi_dsub+0x3dc>
10042278:	4662      	mov	r2, ip
1004227a:	1a85      	subs	r5, r0, r2
1004227c:	42a8      	cmp	r0, r5
1004227e:	4192      	sbcs	r2, r2
10042280:	4252      	negs	r2, r2
10042282:	4691      	mov	r9, r2
10042284:	9b02      	ldr	r3, [sp, #8]
10042286:	1ae3      	subs	r3, r4, r3
10042288:	001a      	movs	r2, r3
1004228a:	464b      	mov	r3, r9
1004228c:	1ad2      	subs	r2, r2, r3
1004228e:	0013      	movs	r3, r2
10042290:	4691      	mov	r9, r2
10042292:	021a      	lsls	r2, r3, #8
10042294:	d46c      	bmi.n	10042370 <__aeabi_dsub+0x528>
10042296:	464a      	mov	r2, r9
10042298:	464c      	mov	r4, r9
1004229a:	432a      	orrs	r2, r5
1004229c:	d000      	beq.n	100422a0 <__aeabi_dsub+0x458>
1004229e:	e63a      	b.n	10041f16 <__aeabi_dsub+0xce>
100422a0:	2600      	movs	r6, #0
100422a2:	2400      	movs	r4, #0
100422a4:	2500      	movs	r5, #0
100422a6:	e678      	b.n	10041f9a <__aeabi_dsub+0x152>
100422a8:	9902      	ldr	r1, [sp, #8]
100422aa:	4653      	mov	r3, sl
100422ac:	000d      	movs	r5, r1
100422ae:	3a20      	subs	r2, #32
100422b0:	40d5      	lsrs	r5, r2
100422b2:	2b20      	cmp	r3, #32
100422b4:	d006      	beq.n	100422c4 <__aeabi_dsub+0x47c>
100422b6:	2240      	movs	r2, #64	@ 0x40
100422b8:	1ad2      	subs	r2, r2, r3
100422ba:	000b      	movs	r3, r1
100422bc:	4093      	lsls	r3, r2
100422be:	4662      	mov	r2, ip
100422c0:	431a      	orrs	r2, r3
100422c2:	4693      	mov	fp, r2
100422c4:	465b      	mov	r3, fp
100422c6:	1e5a      	subs	r2, r3, #1
100422c8:	4193      	sbcs	r3, r2
100422ca:	431d      	orrs	r5, r3
100422cc:	e619      	b.n	10041f02 <__aeabi_dsub+0xba>
100422ce:	4653      	mov	r3, sl
100422d0:	1e5a      	subs	r2, r3, #1
100422d2:	2b01      	cmp	r3, #1
100422d4:	d100      	bne.n	100422d8 <__aeabi_dsub+0x490>
100422d6:	e0c6      	b.n	10042466 <__aeabi_dsub+0x61e>
100422d8:	4e9d      	ldr	r6, [pc, #628]	@ (10042550 <__aeabi_dsub+0x708>)
100422da:	45b2      	cmp	sl, r6
100422dc:	d100      	bne.n	100422e0 <__aeabi_dsub+0x498>
100422de:	e6bd      	b.n	1004205c <__aeabi_dsub+0x214>
100422e0:	4688      	mov	r8, r1
100422e2:	000e      	movs	r6, r1
100422e4:	2501      	movs	r5, #1
100422e6:	2a38      	cmp	r2, #56	@ 0x38
100422e8:	dc10      	bgt.n	1004230c <__aeabi_dsub+0x4c4>
100422ea:	2a1f      	cmp	r2, #31
100422ec:	dc7f      	bgt.n	100423ee <__aeabi_dsub+0x5a6>
100422ee:	2120      	movs	r1, #32
100422f0:	0025      	movs	r5, r4
100422f2:	1a89      	subs	r1, r1, r2
100422f4:	0007      	movs	r7, r0
100422f6:	4088      	lsls	r0, r1
100422f8:	408d      	lsls	r5, r1
100422fa:	40d7      	lsrs	r7, r2
100422fc:	40d4      	lsrs	r4, r2
100422fe:	1e41      	subs	r1, r0, #1
10042300:	4188      	sbcs	r0, r1
10042302:	9b02      	ldr	r3, [sp, #8]
10042304:	433d      	orrs	r5, r7
10042306:	1b1b      	subs	r3, r3, r4
10042308:	4305      	orrs	r5, r0
1004230a:	9302      	str	r3, [sp, #8]
1004230c:	4662      	mov	r2, ip
1004230e:	1b55      	subs	r5, r2, r5
10042310:	45ac      	cmp	ip, r5
10042312:	4192      	sbcs	r2, r2
10042314:	9b02      	ldr	r3, [sp, #8]
10042316:	4252      	negs	r2, r2
10042318:	464f      	mov	r7, r9
1004231a:	1a9c      	subs	r4, r3, r2
1004231c:	e5f6      	b.n	10041f0c <__aeabi_dsub+0xc4>
1004231e:	2d00      	cmp	r5, #0
10042320:	d000      	beq.n	10042324 <__aeabi_dsub+0x4dc>
10042322:	e0b7      	b.n	10042494 <__aeabi_dsub+0x64c>
10042324:	2a00      	cmp	r2, #0
10042326:	d100      	bne.n	1004232a <__aeabi_dsub+0x4e2>
10042328:	e0f0      	b.n	1004250c <__aeabi_dsub+0x6c4>
1004232a:	2601      	movs	r6, #1
1004232c:	400e      	ands	r6, r1
1004232e:	4663      	mov	r3, ip
10042330:	9802      	ldr	r0, [sp, #8]
10042332:	08d9      	lsrs	r1, r3, #3
10042334:	0742      	lsls	r2, r0, #29
10042336:	430a      	orrs	r2, r1
10042338:	08c4      	lsrs	r4, r0, #3
1004233a:	e696      	b.n	1004206a <__aeabi_dsub+0x222>
1004233c:	4c85      	ldr	r4, [pc, #532]	@ (10042554 <__aeabi_dsub+0x70c>)
1004233e:	1aff      	subs	r7, r7, r3
10042340:	4014      	ands	r4, r2
10042342:	0762      	lsls	r2, r4, #29
10042344:	08e4      	lsrs	r4, r4, #3
10042346:	e760      	b.n	1004220a <__aeabi_dsub+0x3c2>
10042348:	4981      	ldr	r1, [pc, #516]	@ (10042550 <__aeabi_dsub+0x708>)
1004234a:	428a      	cmp	r2, r1
1004234c:	d100      	bne.n	10042350 <__aeabi_dsub+0x508>
1004234e:	e0c9      	b.n	100424e4 <__aeabi_dsub+0x69c>
10042350:	4663      	mov	r3, ip
10042352:	18c1      	adds	r1, r0, r3
10042354:	4281      	cmp	r1, r0
10042356:	4180      	sbcs	r0, r0
10042358:	9b02      	ldr	r3, [sp, #8]
1004235a:	4240      	negs	r0, r0
1004235c:	18e3      	adds	r3, r4, r3
1004235e:	181b      	adds	r3, r3, r0
10042360:	07dd      	lsls	r5, r3, #31
10042362:	085c      	lsrs	r4, r3, #1
10042364:	2307      	movs	r3, #7
10042366:	0849      	lsrs	r1, r1, #1
10042368:	430d      	orrs	r5, r1
1004236a:	0017      	movs	r7, r2
1004236c:	402b      	ands	r3, r5
1004236e:	e710      	b.n	10042192 <__aeabi_dsub+0x34a>
10042370:	4663      	mov	r3, ip
10042372:	1a1d      	subs	r5, r3, r0
10042374:	45ac      	cmp	ip, r5
10042376:	4192      	sbcs	r2, r2
10042378:	2601      	movs	r6, #1
1004237a:	9b02      	ldr	r3, [sp, #8]
1004237c:	4252      	negs	r2, r2
1004237e:	1b1c      	subs	r4, r3, r4
10042380:	4688      	mov	r8, r1
10042382:	1aa4      	subs	r4, r4, r2
10042384:	400e      	ands	r6, r1
10042386:	e5c6      	b.n	10041f16 <__aeabi_dsub+0xce>
10042388:	4663      	mov	r3, ip
1004238a:	18c5      	adds	r5, r0, r3
1004238c:	9b02      	ldr	r3, [sp, #8]
1004238e:	4285      	cmp	r5, r0
10042390:	4180      	sbcs	r0, r0
10042392:	469c      	mov	ip, r3
10042394:	4240      	negs	r0, r0
10042396:	4464      	add	r4, ip
10042398:	1824      	adds	r4, r4, r0
1004239a:	2701      	movs	r7, #1
1004239c:	0223      	lsls	r3, r4, #8
1004239e:	d400      	bmi.n	100423a2 <__aeabi_dsub+0x55a>
100423a0:	e6f5      	b.n	1004218e <__aeabi_dsub+0x346>
100423a2:	2702      	movs	r7, #2
100423a4:	e641      	b.n	1004202a <__aeabi_dsub+0x1e2>
100423a6:	4663      	mov	r3, ip
100423a8:	1ac5      	subs	r5, r0, r3
100423aa:	42a8      	cmp	r0, r5
100423ac:	4180      	sbcs	r0, r0
100423ae:	9b02      	ldr	r3, [sp, #8]
100423b0:	4240      	negs	r0, r0
100423b2:	1ae4      	subs	r4, r4, r3
100423b4:	2701      	movs	r7, #1
100423b6:	1a24      	subs	r4, r4, r0
100423b8:	e5a8      	b.n	10041f0c <__aeabi_dsub+0xc4>
100423ba:	9d02      	ldr	r5, [sp, #8]
100423bc:	4652      	mov	r2, sl
100423be:	002b      	movs	r3, r5
100423c0:	3a20      	subs	r2, #32
100423c2:	40d3      	lsrs	r3, r2
100423c4:	0019      	movs	r1, r3
100423c6:	4653      	mov	r3, sl
100423c8:	2b20      	cmp	r3, #32
100423ca:	d006      	beq.n	100423da <__aeabi_dsub+0x592>
100423cc:	2240      	movs	r2, #64	@ 0x40
100423ce:	1ad2      	subs	r2, r2, r3
100423d0:	002b      	movs	r3, r5
100423d2:	4093      	lsls	r3, r2
100423d4:	4662      	mov	r2, ip
100423d6:	431a      	orrs	r2, r3
100423d8:	4693      	mov	fp, r2
100423da:	465d      	mov	r5, fp
100423dc:	1e6b      	subs	r3, r5, #1
100423de:	419d      	sbcs	r5, r3
100423e0:	430d      	orrs	r5, r1
100423e2:	e615      	b.n	10042010 <__aeabi_dsub+0x1c8>
100423e4:	0762      	lsls	r2, r4, #29
100423e6:	08c0      	lsrs	r0, r0, #3
100423e8:	4302      	orrs	r2, r0
100423ea:	08e4      	lsrs	r4, r4, #3
100423ec:	e70d      	b.n	1004220a <__aeabi_dsub+0x3c2>
100423ee:	0011      	movs	r1, r2
100423f0:	0027      	movs	r7, r4
100423f2:	3920      	subs	r1, #32
100423f4:	40cf      	lsrs	r7, r1
100423f6:	2a20      	cmp	r2, #32
100423f8:	d005      	beq.n	10042406 <__aeabi_dsub+0x5be>
100423fa:	2140      	movs	r1, #64	@ 0x40
100423fc:	1a8a      	subs	r2, r1, r2
100423fe:	4094      	lsls	r4, r2
10042400:	0025      	movs	r5, r4
10042402:	4305      	orrs	r5, r0
10042404:	9503      	str	r5, [sp, #12]
10042406:	9d03      	ldr	r5, [sp, #12]
10042408:	1e6a      	subs	r2, r5, #1
1004240a:	4195      	sbcs	r5, r2
1004240c:	433d      	orrs	r5, r7
1004240e:	e77d      	b.n	1004230c <__aeabi_dsub+0x4c4>
10042410:	2a00      	cmp	r2, #0
10042412:	d100      	bne.n	10042416 <__aeabi_dsub+0x5ce>
10042414:	e744      	b.n	100422a0 <__aeabi_dsub+0x458>
10042416:	2601      	movs	r6, #1
10042418:	400e      	ands	r6, r1
1004241a:	4663      	mov	r3, ip
1004241c:	08d9      	lsrs	r1, r3, #3
1004241e:	9b02      	ldr	r3, [sp, #8]
10042420:	075a      	lsls	r2, r3, #29
10042422:	430a      	orrs	r2, r1
10042424:	08dc      	lsrs	r4, r3, #3
10042426:	e6f0      	b.n	1004220a <__aeabi_dsub+0x3c2>
10042428:	2a00      	cmp	r2, #0
1004242a:	d028      	beq.n	1004247e <__aeabi_dsub+0x636>
1004242c:	4662      	mov	r2, ip
1004242e:	9f02      	ldr	r7, [sp, #8]
10042430:	08c0      	lsrs	r0, r0, #3
10042432:	433a      	orrs	r2, r7
10042434:	d100      	bne.n	10042438 <__aeabi_dsub+0x5f0>
10042436:	e6dc      	b.n	100421f2 <__aeabi_dsub+0x3aa>
10042438:	0762      	lsls	r2, r4, #29
1004243a:	4310      	orrs	r0, r2
1004243c:	2280      	movs	r2, #128	@ 0x80
1004243e:	08e4      	lsrs	r4, r4, #3
10042440:	0312      	lsls	r2, r2, #12
10042442:	4214      	tst	r4, r2
10042444:	d009      	beq.n	1004245a <__aeabi_dsub+0x612>
10042446:	08fd      	lsrs	r5, r7, #3
10042448:	4215      	tst	r5, r2
1004244a:	d106      	bne.n	1004245a <__aeabi_dsub+0x612>
1004244c:	4663      	mov	r3, ip
1004244e:	2601      	movs	r6, #1
10042450:	002c      	movs	r4, r5
10042452:	08d8      	lsrs	r0, r3, #3
10042454:	077b      	lsls	r3, r7, #29
10042456:	4318      	orrs	r0, r3
10042458:	400e      	ands	r6, r1
1004245a:	0f42      	lsrs	r2, r0, #29
1004245c:	00c0      	lsls	r0, r0, #3
1004245e:	08c0      	lsrs	r0, r0, #3
10042460:	0752      	lsls	r2, r2, #29
10042462:	4302      	orrs	r2, r0
10042464:	e601      	b.n	1004206a <__aeabi_dsub+0x222>
10042466:	4663      	mov	r3, ip
10042468:	1a1d      	subs	r5, r3, r0
1004246a:	45ac      	cmp	ip, r5
1004246c:	4192      	sbcs	r2, r2
1004246e:	9b02      	ldr	r3, [sp, #8]
10042470:	4252      	negs	r2, r2
10042472:	1b1c      	subs	r4, r3, r4
10042474:	000e      	movs	r6, r1
10042476:	4688      	mov	r8, r1
10042478:	2701      	movs	r7, #1
1004247a:	1aa4      	subs	r4, r4, r2
1004247c:	e546      	b.n	10041f0c <__aeabi_dsub+0xc4>
1004247e:	4663      	mov	r3, ip
10042480:	08d9      	lsrs	r1, r3, #3
10042482:	9b02      	ldr	r3, [sp, #8]
10042484:	075a      	lsls	r2, r3, #29
10042486:	430a      	orrs	r2, r1
10042488:	08dc      	lsrs	r4, r3, #3
1004248a:	e5ee      	b.n	1004206a <__aeabi_dsub+0x222>
1004248c:	4663      	mov	r3, ip
1004248e:	9c02      	ldr	r4, [sp, #8]
10042490:	9303      	str	r3, [sp, #12]
10042492:	e6c7      	b.n	10042224 <__aeabi_dsub+0x3dc>
10042494:	08c0      	lsrs	r0, r0, #3
10042496:	2a00      	cmp	r2, #0
10042498:	d100      	bne.n	1004249c <__aeabi_dsub+0x654>
1004249a:	e6aa      	b.n	100421f2 <__aeabi_dsub+0x3aa>
1004249c:	0762      	lsls	r2, r4, #29
1004249e:	4310      	orrs	r0, r2
100424a0:	2280      	movs	r2, #128	@ 0x80
100424a2:	08e4      	lsrs	r4, r4, #3
100424a4:	0312      	lsls	r2, r2, #12
100424a6:	4214      	tst	r4, r2
100424a8:	d0d7      	beq.n	1004245a <__aeabi_dsub+0x612>
100424aa:	9f02      	ldr	r7, [sp, #8]
100424ac:	08fd      	lsrs	r5, r7, #3
100424ae:	4215      	tst	r5, r2
100424b0:	d1d3      	bne.n	1004245a <__aeabi_dsub+0x612>
100424b2:	4663      	mov	r3, ip
100424b4:	2601      	movs	r6, #1
100424b6:	08d8      	lsrs	r0, r3, #3
100424b8:	077b      	lsls	r3, r7, #29
100424ba:	002c      	movs	r4, r5
100424bc:	4318      	orrs	r0, r3
100424be:	400e      	ands	r6, r1
100424c0:	e7cb      	b.n	1004245a <__aeabi_dsub+0x612>
100424c2:	000a      	movs	r2, r1
100424c4:	0027      	movs	r7, r4
100424c6:	3a20      	subs	r2, #32
100424c8:	40d7      	lsrs	r7, r2
100424ca:	2920      	cmp	r1, #32
100424cc:	d005      	beq.n	100424da <__aeabi_dsub+0x692>
100424ce:	2240      	movs	r2, #64	@ 0x40
100424d0:	1a52      	subs	r2, r2, r1
100424d2:	4094      	lsls	r4, r2
100424d4:	0025      	movs	r5, r4
100424d6:	4305      	orrs	r5, r0
100424d8:	9503      	str	r5, [sp, #12]
100424da:	9d03      	ldr	r5, [sp, #12]
100424dc:	1e6a      	subs	r2, r5, #1
100424de:	4195      	sbcs	r5, r2
100424e0:	432f      	orrs	r7, r5
100424e2:	e610      	b.n	10042106 <__aeabi_dsub+0x2be>
100424e4:	0014      	movs	r4, r2
100424e6:	2500      	movs	r5, #0
100424e8:	2200      	movs	r2, #0
100424ea:	e556      	b.n	10041f9a <__aeabi_dsub+0x152>
100424ec:	9b02      	ldr	r3, [sp, #8]
100424ee:	4460      	add	r0, ip
100424f0:	4699      	mov	r9, r3
100424f2:	4560      	cmp	r0, ip
100424f4:	4192      	sbcs	r2, r2
100424f6:	444c      	add	r4, r9
100424f8:	4252      	negs	r2, r2
100424fa:	0005      	movs	r5, r0
100424fc:	18a4      	adds	r4, r4, r2
100424fe:	e74c      	b.n	1004239a <__aeabi_dsub+0x552>
10042500:	001a      	movs	r2, r3
10042502:	001c      	movs	r4, r3
10042504:	432a      	orrs	r2, r5
10042506:	d000      	beq.n	1004250a <__aeabi_dsub+0x6c2>
10042508:	e6b3      	b.n	10042272 <__aeabi_dsub+0x42a>
1004250a:	e6c9      	b.n	100422a0 <__aeabi_dsub+0x458>
1004250c:	2480      	movs	r4, #128	@ 0x80
1004250e:	2600      	movs	r6, #0
10042510:	0324      	lsls	r4, r4, #12
10042512:	e5ae      	b.n	10042072 <__aeabi_dsub+0x22a>
10042514:	2120      	movs	r1, #32
10042516:	2500      	movs	r5, #0
10042518:	1a09      	subs	r1, r1, r0
1004251a:	e517      	b.n	10041f4c <__aeabi_dsub+0x104>
1004251c:	2200      	movs	r2, #0
1004251e:	2500      	movs	r5, #0
10042520:	4c0b      	ldr	r4, [pc, #44]	@ (10042550 <__aeabi_dsub+0x708>)
10042522:	e53a      	b.n	10041f9a <__aeabi_dsub+0x152>
10042524:	2d00      	cmp	r5, #0
10042526:	d100      	bne.n	1004252a <__aeabi_dsub+0x6e2>
10042528:	e5f6      	b.n	10042118 <__aeabi_dsub+0x2d0>
1004252a:	464b      	mov	r3, r9
1004252c:	1bda      	subs	r2, r3, r7
1004252e:	4692      	mov	sl, r2
10042530:	2f00      	cmp	r7, #0
10042532:	d100      	bne.n	10042536 <__aeabi_dsub+0x6ee>
10042534:	e66f      	b.n	10042216 <__aeabi_dsub+0x3ce>
10042536:	2a38      	cmp	r2, #56	@ 0x38
10042538:	dc05      	bgt.n	10042546 <__aeabi_dsub+0x6fe>
1004253a:	2680      	movs	r6, #128	@ 0x80
1004253c:	0436      	lsls	r6, r6, #16
1004253e:	4334      	orrs	r4, r6
10042540:	4688      	mov	r8, r1
10042542:	000e      	movs	r6, r1
10042544:	e6d1      	b.n	100422ea <__aeabi_dsub+0x4a2>
10042546:	4688      	mov	r8, r1
10042548:	000e      	movs	r6, r1
1004254a:	2501      	movs	r5, #1
1004254c:	e6de      	b.n	1004230c <__aeabi_dsub+0x4c4>
1004254e:	46c0      	nop			@ (mov r8, r8)
10042550:	000007ff 	.word	0x000007ff
10042554:	ff7fffff 	.word	0xff7fffff
10042558:	000007fe 	.word	0x000007fe
1004255c:	2d00      	cmp	r5, #0
1004255e:	d100      	bne.n	10042562 <__aeabi_dsub+0x71a>
10042560:	e668      	b.n	10042234 <__aeabi_dsub+0x3ec>
10042562:	464b      	mov	r3, r9
10042564:	1bd9      	subs	r1, r3, r7
10042566:	2f00      	cmp	r7, #0
10042568:	d101      	bne.n	1004256e <__aeabi_dsub+0x726>
1004256a:	468a      	mov	sl, r1
1004256c:	e5a7      	b.n	100420be <__aeabi_dsub+0x276>
1004256e:	2701      	movs	r7, #1
10042570:	2938      	cmp	r1, #56	@ 0x38
10042572:	dd00      	ble.n	10042576 <__aeabi_dsub+0x72e>
10042574:	e5c7      	b.n	10042106 <__aeabi_dsub+0x2be>
10042576:	2280      	movs	r2, #128	@ 0x80
10042578:	0412      	lsls	r2, r2, #16
1004257a:	4314      	orrs	r4, r2
1004257c:	e5af      	b.n	100420de <__aeabi_dsub+0x296>
1004257e:	46c0      	nop			@ (mov r8, r8)

10042580 <__aeabi_d2iz>:
10042580:	000b      	movs	r3, r1
10042582:	0002      	movs	r2, r0
10042584:	b570      	push	{r4, r5, r6, lr}
10042586:	4d16      	ldr	r5, [pc, #88]	@ (100425e0 <__aeabi_d2iz+0x60>)
10042588:	030c      	lsls	r4, r1, #12
1004258a:	b082      	sub	sp, #8
1004258c:	0049      	lsls	r1, r1, #1
1004258e:	2000      	movs	r0, #0
10042590:	9200      	str	r2, [sp, #0]
10042592:	9301      	str	r3, [sp, #4]
10042594:	0b24      	lsrs	r4, r4, #12
10042596:	0d49      	lsrs	r1, r1, #21
10042598:	0fde      	lsrs	r6, r3, #31
1004259a:	42a9      	cmp	r1, r5
1004259c:	dd04      	ble.n	100425a8 <__aeabi_d2iz+0x28>
1004259e:	4811      	ldr	r0, [pc, #68]	@ (100425e4 <__aeabi_d2iz+0x64>)
100425a0:	4281      	cmp	r1, r0
100425a2:	dd03      	ble.n	100425ac <__aeabi_d2iz+0x2c>
100425a4:	4b10      	ldr	r3, [pc, #64]	@ (100425e8 <__aeabi_d2iz+0x68>)
100425a6:	18f0      	adds	r0, r6, r3
100425a8:	b002      	add	sp, #8
100425aa:	bd70      	pop	{r4, r5, r6, pc}
100425ac:	2080      	movs	r0, #128	@ 0x80
100425ae:	0340      	lsls	r0, r0, #13
100425b0:	4320      	orrs	r0, r4
100425b2:	4c0e      	ldr	r4, [pc, #56]	@ (100425ec <__aeabi_d2iz+0x6c>)
100425b4:	1a64      	subs	r4, r4, r1
100425b6:	2c1f      	cmp	r4, #31
100425b8:	dd08      	ble.n	100425cc <__aeabi_d2iz+0x4c>
100425ba:	4b0d      	ldr	r3, [pc, #52]	@ (100425f0 <__aeabi_d2iz+0x70>)
100425bc:	1a5b      	subs	r3, r3, r1
100425be:	40d8      	lsrs	r0, r3
100425c0:	0003      	movs	r3, r0
100425c2:	4258      	negs	r0, r3
100425c4:	2e00      	cmp	r6, #0
100425c6:	d1ef      	bne.n	100425a8 <__aeabi_d2iz+0x28>
100425c8:	0018      	movs	r0, r3
100425ca:	e7ed      	b.n	100425a8 <__aeabi_d2iz+0x28>
100425cc:	4b09      	ldr	r3, [pc, #36]	@ (100425f4 <__aeabi_d2iz+0x74>)
100425ce:	9a00      	ldr	r2, [sp, #0]
100425d0:	469c      	mov	ip, r3
100425d2:	0003      	movs	r3, r0
100425d4:	4461      	add	r1, ip
100425d6:	408b      	lsls	r3, r1
100425d8:	40e2      	lsrs	r2, r4
100425da:	4313      	orrs	r3, r2
100425dc:	e7f1      	b.n	100425c2 <__aeabi_d2iz+0x42>
100425de:	46c0      	nop			@ (mov r8, r8)
100425e0:	000003fe 	.word	0x000003fe
100425e4:	0000041d 	.word	0x0000041d
100425e8:	7fffffff 	.word	0x7fffffff
100425ec:	00000433 	.word	0x00000433
100425f0:	00000413 	.word	0x00000413
100425f4:	fffffbed 	.word	0xfffffbed

100425f8 <__aeabi_i2d>:
100425f8:	b570      	push	{r4, r5, r6, lr}
100425fa:	2800      	cmp	r0, #0
100425fc:	d016      	beq.n	1004262c <__aeabi_i2d+0x34>
100425fe:	17c3      	asrs	r3, r0, #31
10042600:	18c5      	adds	r5, r0, r3
10042602:	405d      	eors	r5, r3
10042604:	0fc4      	lsrs	r4, r0, #31
10042606:	0028      	movs	r0, r5
10042608:	f7fe fef4 	bl	100413f4 <__clzsi2>
1004260c:	4b10      	ldr	r3, [pc, #64]	@ (10042650 <__aeabi_i2d+0x58>)
1004260e:	1a1b      	subs	r3, r3, r0
10042610:	055b      	lsls	r3, r3, #21
10042612:	0d5b      	lsrs	r3, r3, #21
10042614:	280a      	cmp	r0, #10
10042616:	dc14      	bgt.n	10042642 <__aeabi_i2d+0x4a>
10042618:	0002      	movs	r2, r0
1004261a:	002e      	movs	r6, r5
1004261c:	3215      	adds	r2, #21
1004261e:	4096      	lsls	r6, r2
10042620:	220b      	movs	r2, #11
10042622:	1a12      	subs	r2, r2, r0
10042624:	40d5      	lsrs	r5, r2
10042626:	032d      	lsls	r5, r5, #12
10042628:	0b2d      	lsrs	r5, r5, #12
1004262a:	e003      	b.n	10042634 <__aeabi_i2d+0x3c>
1004262c:	2400      	movs	r4, #0
1004262e:	2300      	movs	r3, #0
10042630:	2500      	movs	r5, #0
10042632:	2600      	movs	r6, #0
10042634:	051b      	lsls	r3, r3, #20
10042636:	432b      	orrs	r3, r5
10042638:	07e4      	lsls	r4, r4, #31
1004263a:	4323      	orrs	r3, r4
1004263c:	0030      	movs	r0, r6
1004263e:	0019      	movs	r1, r3
10042640:	bd70      	pop	{r4, r5, r6, pc}
10042642:	380b      	subs	r0, #11
10042644:	4085      	lsls	r5, r0
10042646:	032d      	lsls	r5, r5, #12
10042648:	2600      	movs	r6, #0
1004264a:	0b2d      	lsrs	r5, r5, #12
1004264c:	e7f2      	b.n	10042634 <__aeabi_i2d+0x3c>
1004264e:	46c0      	nop			@ (mov r8, r8)
10042650:	0000041e 	.word	0x0000041e

10042654 <__clzdi2>:
10042654:	b510      	push	{r4, lr}
10042656:	2900      	cmp	r1, #0
10042658:	d103      	bne.n	10042662 <__clzdi2+0xe>
1004265a:	f7fe fecb 	bl	100413f4 <__clzsi2>
1004265e:	3020      	adds	r0, #32
10042660:	e002      	b.n	10042668 <__clzdi2+0x14>
10042662:	0008      	movs	r0, r1
10042664:	f7fe fec6 	bl	100413f4 <__clzsi2>
10042668:	bd10      	pop	{r4, pc}
1004266a:	46c0      	nop			@ (mov r8, r8)

1004266c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
1004266c:	b580      	push	{r7, lr}
1004266e:	b082      	sub	sp, #8
10042670:	af00      	add	r7, sp, #0
10042672:	0002      	movs	r2, r0
10042674:	1dfb      	adds	r3, r7, #7
10042676:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10042678:	1dfb      	adds	r3, r7, #7
1004267a:	781b      	ldrb	r3, [r3, #0]
1004267c:	2b7f      	cmp	r3, #127	@ 0x7f
1004267e:	d809      	bhi.n	10042694 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10042680:	1dfb      	adds	r3, r7, #7
10042682:	781b      	ldrb	r3, [r3, #0]
10042684:	001a      	movs	r2, r3
10042686:	231f      	movs	r3, #31
10042688:	401a      	ands	r2, r3
1004268a:	4b04      	ldr	r3, [pc, #16]	@ (1004269c <__NVIC_EnableIRQ+0x30>)
1004268c:	2101      	movs	r1, #1
1004268e:	4091      	lsls	r1, r2
10042690:	000a      	movs	r2, r1
10042692:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
10042694:	46c0      	nop			@ (mov r8, r8)
10042696:	46bd      	mov	sp, r7
10042698:	b002      	add	sp, #8
1004269a:	bd80      	pop	{r7, pc}
1004269c:	e000e100 	.word	0xe000e100

100426a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100426a0:	b590      	push	{r4, r7, lr}
100426a2:	b083      	sub	sp, #12
100426a4:	af00      	add	r7, sp, #0
100426a6:	0002      	movs	r2, r0
100426a8:	6039      	str	r1, [r7, #0]
100426aa:	1dfb      	adds	r3, r7, #7
100426ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100426ae:	1dfb      	adds	r3, r7, #7
100426b0:	781b      	ldrb	r3, [r3, #0]
100426b2:	2b7f      	cmp	r3, #127	@ 0x7f
100426b4:	d828      	bhi.n	10042708 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100426b6:	4a2f      	ldr	r2, [pc, #188]	@ (10042774 <__NVIC_SetPriority+0xd4>)
100426b8:	1dfb      	adds	r3, r7, #7
100426ba:	781b      	ldrb	r3, [r3, #0]
100426bc:	b25b      	sxtb	r3, r3
100426be:	089b      	lsrs	r3, r3, #2
100426c0:	33c0      	adds	r3, #192	@ 0xc0
100426c2:	009b      	lsls	r3, r3, #2
100426c4:	589b      	ldr	r3, [r3, r2]
100426c6:	1dfa      	adds	r2, r7, #7
100426c8:	7812      	ldrb	r2, [r2, #0]
100426ca:	0011      	movs	r1, r2
100426cc:	2203      	movs	r2, #3
100426ce:	400a      	ands	r2, r1
100426d0:	00d2      	lsls	r2, r2, #3
100426d2:	21ff      	movs	r1, #255	@ 0xff
100426d4:	4091      	lsls	r1, r2
100426d6:	000a      	movs	r2, r1
100426d8:	43d2      	mvns	r2, r2
100426da:	401a      	ands	r2, r3
100426dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100426de:	683b      	ldr	r3, [r7, #0]
100426e0:	019b      	lsls	r3, r3, #6
100426e2:	22ff      	movs	r2, #255	@ 0xff
100426e4:	401a      	ands	r2, r3
100426e6:	1dfb      	adds	r3, r7, #7
100426e8:	781b      	ldrb	r3, [r3, #0]
100426ea:	0018      	movs	r0, r3
100426ec:	2303      	movs	r3, #3
100426ee:	4003      	ands	r3, r0
100426f0:	00db      	lsls	r3, r3, #3
100426f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100426f4:	481f      	ldr	r0, [pc, #124]	@ (10042774 <__NVIC_SetPriority+0xd4>)
100426f6:	1dfb      	adds	r3, r7, #7
100426f8:	781b      	ldrb	r3, [r3, #0]
100426fa:	b25b      	sxtb	r3, r3
100426fc:	089b      	lsrs	r3, r3, #2
100426fe:	430a      	orrs	r2, r1
10042700:	33c0      	adds	r3, #192	@ 0xc0
10042702:	009b      	lsls	r3, r3, #2
10042704:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10042706:	e031      	b.n	1004276c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10042708:	4a1b      	ldr	r2, [pc, #108]	@ (10042778 <__NVIC_SetPriority+0xd8>)
1004270a:	1dfb      	adds	r3, r7, #7
1004270c:	781b      	ldrb	r3, [r3, #0]
1004270e:	0019      	movs	r1, r3
10042710:	230f      	movs	r3, #15
10042712:	400b      	ands	r3, r1
10042714:	3b08      	subs	r3, #8
10042716:	089b      	lsrs	r3, r3, #2
10042718:	3306      	adds	r3, #6
1004271a:	009b      	lsls	r3, r3, #2
1004271c:	18d3      	adds	r3, r2, r3
1004271e:	3304      	adds	r3, #4
10042720:	681b      	ldr	r3, [r3, #0]
10042722:	1dfa      	adds	r2, r7, #7
10042724:	7812      	ldrb	r2, [r2, #0]
10042726:	0011      	movs	r1, r2
10042728:	2203      	movs	r2, #3
1004272a:	400a      	ands	r2, r1
1004272c:	00d2      	lsls	r2, r2, #3
1004272e:	21ff      	movs	r1, #255	@ 0xff
10042730:	4091      	lsls	r1, r2
10042732:	000a      	movs	r2, r1
10042734:	43d2      	mvns	r2, r2
10042736:	401a      	ands	r2, r3
10042738:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004273a:	683b      	ldr	r3, [r7, #0]
1004273c:	019b      	lsls	r3, r3, #6
1004273e:	22ff      	movs	r2, #255	@ 0xff
10042740:	401a      	ands	r2, r3
10042742:	1dfb      	adds	r3, r7, #7
10042744:	781b      	ldrb	r3, [r3, #0]
10042746:	0018      	movs	r0, r3
10042748:	2303      	movs	r3, #3
1004274a:	4003      	ands	r3, r0
1004274c:	00db      	lsls	r3, r3, #3
1004274e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10042750:	4809      	ldr	r0, [pc, #36]	@ (10042778 <__NVIC_SetPriority+0xd8>)
10042752:	1dfb      	adds	r3, r7, #7
10042754:	781b      	ldrb	r3, [r3, #0]
10042756:	001c      	movs	r4, r3
10042758:	230f      	movs	r3, #15
1004275a:	4023      	ands	r3, r4
1004275c:	3b08      	subs	r3, #8
1004275e:	089b      	lsrs	r3, r3, #2
10042760:	430a      	orrs	r2, r1
10042762:	3306      	adds	r3, #6
10042764:	009b      	lsls	r3, r3, #2
10042766:	18c3      	adds	r3, r0, r3
10042768:	3304      	adds	r3, #4
1004276a:	601a      	str	r2, [r3, #0]
}
1004276c:	46c0      	nop			@ (mov r8, r8)
1004276e:	46bd      	mov	sp, r7
10042770:	b003      	add	sp, #12
10042772:	bd90      	pop	{r4, r7, pc}
10042774:	e000e100 	.word	0xe000e100
10042778:	e000ed00 	.word	0xe000ed00

1004277c <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
1004277c:	b580      	push	{r7, lr}
1004277e:	b086      	sub	sp, #24
10042780:	af00      	add	r7, sp, #0
10042782:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10042784:	f3ef 8310 	mrs	r3, PRIMASK
10042788:	60bb      	str	r3, [r7, #8]
  return(result);
1004278a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
1004278c:	617b      	str	r3, [r7, #20]
1004278e:	2301      	movs	r3, #1
10042790:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10042792:	68fb      	ldr	r3, [r7, #12]
10042794:	f383 8810 	msr	PRIMASK, r3
}
10042798:	46c0      	nop			@ (mov r8, r8)
1004279a:	687b      	ldr	r3, [r7, #4]
1004279c:	681b      	ldr	r3, [r3, #0]
1004279e:	2220      	movs	r2, #32
100427a0:	431a      	orrs	r2, r3
100427a2:	687b      	ldr	r3, [r7, #4]
100427a4:	601a      	str	r2, [r3, #0]
100427a6:	697b      	ldr	r3, [r7, #20]
100427a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100427aa:	693b      	ldr	r3, [r7, #16]
100427ac:	f383 8810 	msr	PRIMASK, r3
}
100427b0:	46c0      	nop			@ (mov r8, r8)
}
100427b2:	46c0      	nop			@ (mov r8, r8)
100427b4:	46bd      	mov	sp, r7
100427b6:	b006      	add	sp, #24
100427b8:	bd80      	pop	{r7, pc}
	...

100427bc <MX_APPE_Init>:
/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/

uint32_t MX_APPE_Init(void *p_param)
{
100427bc:	b580      	push	{r7, lr}
100427be:	b086      	sub	sp, #24
100427c0:	af00      	add	r7, sp, #0
100427c2:	6078      	str	r0, [r7, #4]

  UNUSED(p_param);

  APP_DEBUG_SIGNAL_SET(APP_APPE_INIT);
100427c4:	2000      	movs	r0, #0
100427c6:	f005 fb06 	bl	10047dd6 <APP_DEBUG_SIGNAL_SET>
  UTIL_ADV_TRACE_SetRegion(~0x0);
#endif

  /* USER CODE BEGIN APPE_Init_1 */
  /* Register the flash manager task */
  UTIL_SEQ_RegTask(1U << CFG_TASK_FLASH_MANAGER_BCKGND, UTIL_SEQ_RFU, FM_BackgroundProcess);
100427ca:	4b1c      	ldr	r3, [pc, #112]	@ (1004283c <MX_APPE_Init+0x80>)
100427cc:	001a      	movs	r2, r3
100427ce:	2100      	movs	r1, #0
100427d0:	2008      	movs	r0, #8
100427d2:	f00f fd71 	bl	100522b8 <UTIL_SEQ_RegTask>

#if (CFG_LED_SUPPORTED == 1)
  Led_Init();
100427d6:	f000 f83f 	bl	10042858 <Led_Init>
#endif
#if (CFG_BUTTON_SUPPORTED == 1)
  Button_Init();
100427da:	f000 f84f 	bl	1004287c <Button_Init>
#endif
  
#if (CFG_DEBUG_APP_TRACE != 0) && (CFG_DEBUG_APP_ADV_TRACE == 0)
  COM_InitTypeDef COM_Init = 
100427de:	2108      	movs	r1, #8
100427e0:	187b      	adds	r3, r7, r1
100427e2:	22e1      	movs	r2, #225	@ 0xe1
100427e4:	0252      	lsls	r2, r2, #9
100427e6:	601a      	str	r2, [r3, #0]
100427e8:	187b      	adds	r3, r7, r1
100427ea:	2200      	movs	r2, #0
100427ec:	605a      	str	r2, [r3, #4]
100427ee:	187b      	adds	r3, r7, r1
100427f0:	2200      	movs	r2, #0
100427f2:	811a      	strh	r2, [r3, #8]
100427f4:	187b      	adds	r3, r7, r1
100427f6:	2200      	movs	r2, #0
100427f8:	815a      	strh	r2, [r3, #10]
100427fa:	187b      	adds	r3, r7, r1
100427fc:	2200      	movs	r2, #0
100427fe:	819a      	strh	r2, [r3, #12]
   .WordLength= COM_WORDLENGTH_8B,
   .StopBits = COM_STOPBITS_1,
   .Parity = COM_PARITY_NONE,
   .HwFlowCtl = COM_HWCONTROL_NONE
  };
  BSP_COM_Init(COM1, &COM_Init);
10042800:	187b      	adds	r3, r7, r1
10042802:	0019      	movs	r1, r3
10042804:	2000      	movs	r0, #0
10042806:	f009 fee9 	bl	1004c5dc <BSP_COM_Init>
  
#endif  
  
  RxUART_Init();
1004280a:	f000 f907 	bl	10042a1c <RxUART_Init>
  
  /* USER CODE END APPE_Init_1 */

  if (HW_RNG_Init() != HW_RNG_SUCCESS)
1004280e:	f006 f939 	bl	10048a84 <HW_RNG_Init>
10042812:	1e03      	subs	r3, r0, #0
10042814:	d001      	beq.n	1004281a <MX_APPE_Init+0x5e>
  {
    Error_Handler();
10042816:	f000 fc6e 	bl	100430f6 <Error_Handler>
  }

  /* Init the AES block */
  HW_AES_Init();
1004281a:	f005 fbe5 	bl	10047fe8 <HW_AES_Init>
  HW_PKA_Init();
1004281e:	f005 fda3 	bl	10048368 <HW_PKA_Init>
  APP_BLE_Init();
10042822:	f001 f981 	bl	10043b28 <APP_BLE_Init>

#if (CFG_LPM_SUPPORTED == 1)
  /* Low Power Manager Init */
  UTIL_LPM_Init();
10042826:	f00f fba1 	bl	10051f6c <UTIL_LPM_Init>
#endif /* CFG_LPM_SUPPORTED */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
  APP_DEBUG_SIGNAL_RESET(APP_APPE_INIT);
1004282a:	2000      	movs	r0, #0
1004282c:	f005 fadd 	bl	10047dea <APP_DEBUG_SIGNAL_RESET>
  return BLE_STATUS_SUCCESS;
10042830:	2300      	movs	r3, #0
}
10042832:	0018      	movs	r0, r3
10042834:	46bd      	mov	sp, r7
10042836:	b006      	add	sp, #24
10042838:	bd80      	pop	{r7, pc}
1004283a:	46c0      	nop			@ (mov r8, r8)
1004283c:	100494a1 	.word	0x100494a1

10042840 <App_PowerSaveLevel_Check>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
#if (CFG_LPM_SUPPORTED == 1)
static PowerSaveLevels App_PowerSaveLevel_Check(void)
{
10042840:	b580      	push	{r7, lr}
10042842:	b082      	sub	sp, #8
10042844:	af00      	add	r7, sp, #0
  PowerSaveLevels output_level = POWER_SAVE_LEVEL_STOP;
10042846:	1dfb      	adds	r3, r7, #7
10042848:	2203      	movs	r2, #3
1004284a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN App_PowerSaveLevel_Check_1 */

  /* USER CODE END App_PowerSaveLevel_Check_1 */

  return output_level;
1004284c:	1dfb      	adds	r3, r7, #7
1004284e:	781b      	ldrb	r3, [r3, #0]
}
10042850:	0018      	movs	r0, r3
10042852:	46bd      	mov	sp, r7
10042854:	b002      	add	sp, #8
10042856:	bd80      	pop	{r7, pc}

10042858 <Led_Init>:
#endif

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
#if (CFG_LED_SUPPORTED == 1)
static void Led_Init( void )
{
10042858:	b580      	push	{r7, lr}
1004285a:	af00      	add	r7, sp, #0
  /* Leds Initialization */
  BSP_LED_Init(LED_BLUE);
1004285c:	2000      	movs	r0, #0
1004285e:	f009 fd2f 	bl	1004c2c0 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
10042862:	2001      	movs	r0, #1
10042864:	f009 fd2c 	bl	1004c2c0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
10042868:	2002      	movs	r0, #2
1004286a:	f009 fd29 	bl	1004c2c0 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
1004286e:	2001      	movs	r0, #1
10042870:	f009 fd9c 	bl	1004c3ac <BSP_LED_On>

  return;
10042874:	46c0      	nop			@ (mov r8, r8)
}
10042876:	46bd      	mov	sp, r7
10042878:	bd80      	pop	{r7, pc}
	...

1004287c <Button_Init>:
#endif

#if (CFG_BUTTON_SUPPORTED == 1)
static void Button_Init( void )
{
1004287c:	b580      	push	{r7, lr}
1004287e:	b082      	sub	sp, #8
10042880:	af00      	add	r7, sp, #0
  /* Button Initialization */
  buttonDesc[B1].button = B1;
10042882:	4b3e      	ldr	r3, [pc, #248]	@ (1004297c <Button_Init+0x100>)
10042884:	2200      	movs	r2, #0
10042886:	701a      	strb	r2, [r3, #0]
  buttonDesc[B2].button = B2;
10042888:	4b3c      	ldr	r3, [pc, #240]	@ (1004297c <Button_Init+0x100>)
1004288a:	2228      	movs	r2, #40	@ 0x28
1004288c:	2101      	movs	r1, #1
1004288e:	5499      	strb	r1, [r3, r2]
  buttonDesc[B3].button = B3;
10042890:	4b3a      	ldr	r3, [pc, #232]	@ (1004297c <Button_Init+0x100>)
10042892:	2250      	movs	r2, #80	@ 0x50
10042894:	2102      	movs	r1, #2
10042896:	5499      	strb	r1, [r3, r2]
  buttonDesc[B4].button = B4;
10042898:	4b38      	ldr	r3, [pc, #224]	@ (1004297c <Button_Init+0x100>)
1004289a:	2278      	movs	r2, #120	@ 0x78
1004289c:	2103      	movs	r1, #3
1004289e:	5499      	strb	r1, [r3, r2]
  BSP_PB_Init(B1, BUTTON_MODE_EXTI);
100428a0:	2101      	movs	r1, #1
100428a2:	2000      	movs	r0, #0
100428a4:	f009 fdbe 	bl	1004c424 <BSP_PB_Init>
  BSP_PB_Init(B2, BUTTON_MODE_EXTI);
100428a8:	2101      	movs	r1, #1
100428aa:	2001      	movs	r0, #1
100428ac:	f009 fdba 	bl	1004c424 <BSP_PB_Init>
  BSP_PB_Init(B3, BUTTON_MODE_EXTI);
100428b0:	2101      	movs	r1, #1
100428b2:	2002      	movs	r0, #2
100428b4:	f009 fdb6 	bl	1004c424 <BSP_PB_Init>
  BSP_PB_Init(B4, BUTTON_MODE_EXTI);
100428b8:	2101      	movs	r1, #1
100428ba:	2003      	movs	r0, #3
100428bc:	f009 fdb2 	bl	1004c424 <BSP_PB_Init>

#if (CFG_LPM_SUPPORTED == 1)
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PA0, PWR_WUP_FALLEDG);
100428c0:	2380      	movs	r3, #128	@ 0x80
100428c2:	025b      	lsls	r3, r3, #9
100428c4:	2101      	movs	r1, #1
100428c6:	0018      	movs	r0, r3
100428c8:	f00a ffb2 	bl	1004d830 <HAL_PWR_EnableWakeUpPin>
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PA9, PWR_WUP_FALLEDG);
100428cc:	2380      	movs	r3, #128	@ 0x80
100428ce:	009b      	lsls	r3, r3, #2
100428d0:	2101      	movs	r1, #1
100428d2:	0018      	movs	r0, r3
100428d4:	f00a ffac 	bl	1004d830 <HAL_PWR_EnableWakeUpPin>
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PB5, PWR_WUP_FALLEDG);
100428d8:	2101      	movs	r1, #1
100428da:	2020      	movs	r0, #32
100428dc:	f00a ffa8 	bl	1004d830 <HAL_PWR_EnableWakeUpPin>
#if defined(STM32WB06) || defined(STM32WB07)
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PB9, PWR_WUP_FALLEDG);
#else
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PB14, PWR_WUP_FALLEDG);
100428e0:	2380      	movs	r3, #128	@ 0x80
100428e2:	03db      	lsls	r3, r3, #15
100428e4:	2101      	movs	r1, #1
100428e6:	0018      	movs	r0, r3
100428e8:	f00a ffa2 	bl	1004d830 <HAL_PWR_EnableWakeUpPin>
#endif  
#endif  
  
  /* Register tasks associated to buttons */
  UTIL_SEQ_RegTask(1U << TASK_BUTTON_1, UTIL_SEQ_RFU, APPE_Button1Action);
100428ec:	4b24      	ldr	r3, [pc, #144]	@ (10042980 <Button_Init+0x104>)
100428ee:	001a      	movs	r2, r3
100428f0:	2100      	movs	r1, #0
100428f2:	2020      	movs	r0, #32
100428f4:	f00f fce0 	bl	100522b8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << TASK_BUTTON_2, UTIL_SEQ_RFU, APPE_Button2Action);
100428f8:	4b22      	ldr	r3, [pc, #136]	@ (10042984 <Button_Init+0x108>)
100428fa:	001a      	movs	r2, r3
100428fc:	2100      	movs	r1, #0
100428fe:	2040      	movs	r0, #64	@ 0x40
10042900:	f00f fcda 	bl	100522b8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << TASK_BUTTON_3, UTIL_SEQ_RFU, APPE_Button3Action);
10042904:	4b20      	ldr	r3, [pc, #128]	@ (10042988 <Button_Init+0x10c>)
10042906:	001a      	movs	r2, r3
10042908:	2100      	movs	r1, #0
1004290a:	2080      	movs	r0, #128	@ 0x80
1004290c:	f00f fcd4 	bl	100522b8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << TASK_BUTTON_4, UTIL_SEQ_RFU, APPE_Button4Action);
10042910:	4a1e      	ldr	r2, [pc, #120]	@ (1004298c <Button_Init+0x110>)
10042912:	2380      	movs	r3, #128	@ 0x80
10042914:	005b      	lsls	r3, r3, #1
10042916:	2100      	movs	r1, #0
10042918:	0018      	movs	r0, r3
1004291a:	f00f fccd 	bl	100522b8 <UTIL_SEQ_RegTask>

  /* Create timers to detect button long press (one for each button) */
  Button_TypeDef buttonIndex;
  for ( buttonIndex = B1; buttonIndex < BUTTON_NB_MAX; buttonIndex++ )
1004291e:	1dfb      	adds	r3, r7, #7
10042920:	2200      	movs	r2, #0
10042922:	701a      	strb	r2, [r3, #0]
10042924:	e021      	b.n	1004296a <Button_Init+0xee>
  {
    buttonDesc[buttonIndex].longTimerId.callback = Button_TriggerActions;
10042926:	1dfb      	adds	r3, r7, #7
10042928:	781a      	ldrb	r2, [r3, #0]
1004292a:	4914      	ldr	r1, [pc, #80]	@ (1004297c <Button_Init+0x100>)
1004292c:	0013      	movs	r3, r2
1004292e:	009b      	lsls	r3, r3, #2
10042930:	189b      	adds	r3, r3, r2
10042932:	00db      	lsls	r3, r3, #3
10042934:	18cb      	adds	r3, r1, r3
10042936:	3310      	adds	r3, #16
10042938:	4a15      	ldr	r2, [pc, #84]	@ (10042990 <Button_Init+0x114>)
1004293a:	601a      	str	r2, [r3, #0]
    buttonDesc[buttonIndex].longTimerId.userData = &buttonDesc[buttonIndex];
1004293c:	1dfb      	adds	r3, r7, #7
1004293e:	7819      	ldrb	r1, [r3, #0]
10042940:	1dfb      	adds	r3, r7, #7
10042942:	781a      	ldrb	r2, [r3, #0]
10042944:	000b      	movs	r3, r1
10042946:	009b      	lsls	r3, r3, #2
10042948:	185b      	adds	r3, r3, r1
1004294a:	00db      	lsls	r3, r3, #3
1004294c:	490b      	ldr	r1, [pc, #44]	@ (1004297c <Button_Init+0x100>)
1004294e:	1859      	adds	r1, r3, r1
10042950:	480a      	ldr	r0, [pc, #40]	@ (1004297c <Button_Init+0x100>)
10042952:	0013      	movs	r3, r2
10042954:	009b      	lsls	r3, r3, #2
10042956:	189b      	adds	r3, r3, r2
10042958:	00db      	lsls	r3, r3, #3
1004295a:	18c3      	adds	r3, r0, r3
1004295c:	331c      	adds	r3, #28
1004295e:	6019      	str	r1, [r3, #0]
  for ( buttonIndex = B1; buttonIndex < BUTTON_NB_MAX; buttonIndex++ )
10042960:	1dfb      	adds	r3, r7, #7
10042962:	781a      	ldrb	r2, [r3, #0]
10042964:	1dfb      	adds	r3, r7, #7
10042966:	3201      	adds	r2, #1
10042968:	701a      	strb	r2, [r3, #0]
1004296a:	1dfb      	adds	r3, r7, #7
1004296c:	781b      	ldrb	r3, [r3, #0]
1004296e:	2b03      	cmp	r3, #3
10042970:	d9d9      	bls.n	10042926 <Button_Init+0xaa>
  }
  
  return;
10042972:	46c0      	nop			@ (mov r8, r8)
}
10042974:	46bd      	mov	sp, r7
10042976:	b002      	add	sp, #8
10042978:	bd80      	pop	{r7, pc}
1004297a:	46c0      	nop			@ (mov r8, r8)
1004297c:	20000198 	.word	0x20000198
10042980:	10044c61 	.word	0x10044c61
10042984:	10044cb5 	.word	0x10044cb5
10042988:	10044d31 	.word	0x10044d31
1004298c:	10044d5d 	.word	0x10044d5d
10042990:	10042995 	.word	0x10042995

10042994 <Button_TriggerActions>:

static void Button_TriggerActions(void *arg)
{
10042994:	b580      	push	{r7, lr}
10042996:	b084      	sub	sp, #16
10042998:	af00      	add	r7, sp, #0
1004299a:	6078      	str	r0, [r7, #4]
  ButtonDesc_t *p_buttonDesc = ((VTIMER_HandleType *)arg)->userData;
1004299c:	687b      	ldr	r3, [r7, #4]
1004299e:	695b      	ldr	r3, [r3, #20]
100429a0:	60fb      	str	r3, [r7, #12]

  p_buttonDesc->longPressed = BSP_PB_GetState(p_buttonDesc->button);
100429a2:	68fb      	ldr	r3, [r7, #12]
100429a4:	781b      	ldrb	r3, [r3, #0]
100429a6:	0018      	movs	r0, r3
100429a8:	f009 fde4 	bl	1004c574 <BSP_PB_GetState>
100429ac:	0003      	movs	r3, r0
100429ae:	b2d9      	uxtb	r1, r3
100429b0:	68fb      	ldr	r3, [r7, #12]
100429b2:	2220      	movs	r2, #32
100429b4:	5499      	strb	r1, [r3, r2]

  APP_DBG_MSG("Button %d pressed\n", (p_buttonDesc->button + 1));
100429b6:	68fb      	ldr	r3, [r7, #12]
100429b8:	781b      	ldrb	r3, [r3, #0]
100429ba:	1c5a      	adds	r2, r3, #1
100429bc:	4b16      	ldr	r3, [pc, #88]	@ (10042a18 <Button_TriggerActions+0x84>)
100429be:	0011      	movs	r1, r2
100429c0:	0018      	movs	r0, r3
100429c2:	f024 faa1 	bl	10066f08 <iprintf>
  switch (p_buttonDesc->button)
100429c6:	68fb      	ldr	r3, [r7, #12]
100429c8:	781b      	ldrb	r3, [r3, #0]
100429ca:	2b03      	cmp	r3, #3
100429cc:	d017      	beq.n	100429fe <Button_TriggerActions+0x6a>
100429ce:	dc1d      	bgt.n	10042a0c <Button_TriggerActions+0x78>
100429d0:	2b02      	cmp	r3, #2
100429d2:	d00f      	beq.n	100429f4 <Button_TriggerActions+0x60>
100429d4:	dc1a      	bgt.n	10042a0c <Button_TriggerActions+0x78>
100429d6:	2b00      	cmp	r3, #0
100429d8:	d002      	beq.n	100429e0 <Button_TriggerActions+0x4c>
100429da:	2b01      	cmp	r3, #1
100429dc:	d005      	beq.n	100429ea <Button_TriggerActions+0x56>
      break;
    case B4:
      UTIL_SEQ_SetTask(1U << TASK_BUTTON_4, CFG_SEQ_PRIO_0);
      break;
    default:
      break;
100429de:	e015      	b.n	10042a0c <Button_TriggerActions+0x78>
      UTIL_SEQ_SetTask(1U << TASK_BUTTON_1, CFG_SEQ_PRIO_0);
100429e0:	2100      	movs	r1, #0
100429e2:	2020      	movs	r0, #32
100429e4:	f00f fc8c 	bl	10052300 <UTIL_SEQ_SetTask>
      break;
100429e8:	e011      	b.n	10042a0e <Button_TriggerActions+0x7a>
      UTIL_SEQ_SetTask(1U << TASK_BUTTON_2, CFG_SEQ_PRIO_0);
100429ea:	2100      	movs	r1, #0
100429ec:	2040      	movs	r0, #64	@ 0x40
100429ee:	f00f fc87 	bl	10052300 <UTIL_SEQ_SetTask>
      break;
100429f2:	e00c      	b.n	10042a0e <Button_TriggerActions+0x7a>
      UTIL_SEQ_SetTask(1U << TASK_BUTTON_3, CFG_SEQ_PRIO_0);
100429f4:	2100      	movs	r1, #0
100429f6:	2080      	movs	r0, #128	@ 0x80
100429f8:	f00f fc82 	bl	10052300 <UTIL_SEQ_SetTask>
      break;
100429fc:	e007      	b.n	10042a0e <Button_TriggerActions+0x7a>
      UTIL_SEQ_SetTask(1U << TASK_BUTTON_4, CFG_SEQ_PRIO_0);
100429fe:	2380      	movs	r3, #128	@ 0x80
10042a00:	005b      	lsls	r3, r3, #1
10042a02:	2100      	movs	r1, #0
10042a04:	0018      	movs	r0, r3
10042a06:	f00f fc7b 	bl	10052300 <UTIL_SEQ_SetTask>
      break;
10042a0a:	e000      	b.n	10042a0e <Button_TriggerActions+0x7a>
      break;
10042a0c:	46c0      	nop			@ (mov r8, r8)
  }

  return;
10042a0e:	46c0      	nop			@ (mov r8, r8)
}
10042a10:	46bd      	mov	sp, r7
10042a12:	b004      	add	sp, #16
10042a14:	bd80      	pop	{r7, pc}
10042a16:	46c0      	nop			@ (mov r8, r8)
10042a18:	100682e0 	.word	0x100682e0

10042a1c <RxUART_Init>:

#endif

static void RxUART_Init(void)
{
10042a1c:	b580      	push	{r7, lr}
10042a1e:	af00      	add	r7, sp, #0
  /* Enable the RX not empty interrupt */
  LL_USART_EnableIT_RXNE(USART1);
10042a20:	4b0a      	ldr	r3, [pc, #40]	@ (10042a4c <RxUART_Init+0x30>)
10042a22:	0018      	movs	r0, r3
10042a24:	f7ff feaa 	bl	1004277c <LL_USART_EnableIT_RXNE_RXFNE>
  
  /* Enable the UART IRQ */
  NVIC_SetPriority(USART1_IRQn, IRQ_HIGH_PRIORITY);
10042a28:	2101      	movs	r1, #1
10042a2a:	2008      	movs	r0, #8
10042a2c:	f7ff fe38 	bl	100426a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
10042a30:	2008      	movs	r0, #8
10042a32:	f7ff fe1b 	bl	1004266c <__NVIC_EnableIRQ>
#if defined(__GNUC__) && !defined(__ARMCC_VERSION)
  setvbuf(stdout, NULL, _IONBF, 0);
10042a36:	4b06      	ldr	r3, [pc, #24]	@ (10042a50 <RxUART_Init+0x34>)
10042a38:	681b      	ldr	r3, [r3, #0]
10042a3a:	6898      	ldr	r0, [r3, #8]
10042a3c:	2300      	movs	r3, #0
10042a3e:	2202      	movs	r2, #2
10042a40:	2100      	movs	r1, #0
10042a42:	f024 fadb 	bl	10066ffc <setvbuf>
#endif
}
10042a46:	46c0      	nop			@ (mov r8, r8)
10042a48:	46bd      	mov	sp, r7
10042a4a:	bd80      	pop	{r7, pc}
10042a4c:	41004000 	.word	0x41004000
10042a50:	20001504 	.word	0x20001504

10042a54 <UartRxCpltCallback>:

void UartRxCpltCallback(uint8_t * pRxDataBuff, uint16_t nDataSize)
{
10042a54:	b580      	push	{r7, lr}
10042a56:	b082      	sub	sp, #8
10042a58:	af00      	add	r7, sp, #0
10042a5a:	6078      	str	r0, [r7, #4]
10042a5c:	000a      	movs	r2, r1
10042a5e:	1cbb      	adds	r3, r7, #2
10042a60:	801a      	strh	r2, [r3, #0]
  // Loop in case nDataSize > 1 (always 1 in current implementation).
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
10042a62:	4b15      	ldr	r3, [pc, #84]	@ (10042ab8 <UartRxCpltCallback+0x64>)
10042a64:	881b      	ldrh	r3, [r3, #0]
10042a66:	2bff      	cmp	r3, #255	@ 0xff
10042a68:	d821      	bhi.n	10042aae <UartRxCpltCallback+0x5a>
  {
    if (*pRxDataBuff == '\r')
10042a6a:	687b      	ldr	r3, [r7, #4]
10042a6c:	781b      	ldrb	r3, [r3, #0]
10042a6e:	2b0d      	cmp	r3, #13
10042a70:	d112      	bne.n	10042a98 <UartRxCpltCallback+0x44>
    {
      APP_DBG_MSG("received %s\n", CommandString);
10042a72:	4a12      	ldr	r2, [pc, #72]	@ (10042abc <UartRxCpltCallback+0x68>)
10042a74:	4b12      	ldr	r3, [pc, #72]	@ (10042ac0 <UartRxCpltCallback+0x6c>)
10042a76:	0011      	movs	r1, r2
10042a78:	0018      	movs	r0, r3
10042a7a:	f024 fa45 	bl	10066f08 <iprintf>

      UartCmdExecute();
10042a7e:	f000 f821 	bl	10042ac4 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
10042a82:	4b0d      	ldr	r3, [pc, #52]	@ (10042ab8 <UartRxCpltCallback+0x64>)
10042a84:	2200      	movs	r2, #0
10042a86:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
10042a88:	2380      	movs	r3, #128	@ 0x80
10042a8a:	005a      	lsls	r2, r3, #1
10042a8c:	4b0b      	ldr	r3, [pc, #44]	@ (10042abc <UartRxCpltCallback+0x68>)
10042a8e:	2100      	movs	r1, #0
10042a90:	0018      	movs	r0, r3
10042a92:	f024 fc63 	bl	1006735c <memset>
    else
    {
      CommandString[indexReceiveChar++] = *pRxDataBuff;
    }
  }
}
10042a96:	e00a      	b.n	10042aae <UartRxCpltCallback+0x5a>
      CommandString[indexReceiveChar++] = *pRxDataBuff;
10042a98:	4b07      	ldr	r3, [pc, #28]	@ (10042ab8 <UartRxCpltCallback+0x64>)
10042a9a:	881b      	ldrh	r3, [r3, #0]
10042a9c:	1c5a      	adds	r2, r3, #1
10042a9e:	b291      	uxth	r1, r2
10042aa0:	4a05      	ldr	r2, [pc, #20]	@ (10042ab8 <UartRxCpltCallback+0x64>)
10042aa2:	8011      	strh	r1, [r2, #0]
10042aa4:	001a      	movs	r2, r3
10042aa6:	687b      	ldr	r3, [r7, #4]
10042aa8:	7819      	ldrb	r1, [r3, #0]
10042aaa:	4b04      	ldr	r3, [pc, #16]	@ (10042abc <UartRxCpltCallback+0x68>)
10042aac:	5499      	strb	r1, [r3, r2]
}
10042aae:	46c0      	nop			@ (mov r8, r8)
10042ab0:	46bd      	mov	sp, r7
10042ab2:	b002      	add	sp, #8
10042ab4:	bd80      	pop	{r7, pc}
10042ab6:	46c0      	nop			@ (mov r8, r8)
10042ab8:	20000338 	.word	0x20000338
10042abc:	20000238 	.word	0x20000238
10042ac0:	100682f4 	.word	0x100682f4

10042ac4 <UartCmdExecute>:

static void UartCmdExecute(void)
{
10042ac4:	b580      	push	{r7, lr}
10042ac6:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
10042ac8:	4a43      	ldr	r2, [pc, #268]	@ (10042bd8 <UartCmdExecute+0x114>)
10042aca:	4b44      	ldr	r3, [pc, #272]	@ (10042bdc <UartCmdExecute+0x118>)
10042acc:	0011      	movs	r1, r2
10042ace:	0018      	movs	r0, r3
10042ad0:	f7fe fba6 	bl	10041220 <strcmp>
10042ad4:	1e03      	subs	r3, r0, #0
10042ad6:	d10c      	bne.n	10042af2 <UartCmdExecute+0x2e>
  {
    APP_DBG_MSG("SW1 OK\n");
10042ad8:	4b41      	ldr	r3, [pc, #260]	@ (10042be0 <UartCmdExecute+0x11c>)
10042ada:	0018      	movs	r0, r3
10042adc:	f024 fa84 	bl	10066fe8 <puts>
#if (CFG_BUTTON_SUPPORTED == 1)
    buttonDesc[B1].longPressed = 0;
10042ae0:	4b40      	ldr	r3, [pc, #256]	@ (10042be4 <UartCmdExecute+0x120>)
10042ae2:	2220      	movs	r2, #32
10042ae4:	2100      	movs	r1, #0
10042ae6:	5499      	strb	r1, [r3, r2]
    UTIL_SEQ_SetTask(1U << TASK_BUTTON_1, CFG_SEQ_PRIO_0);
10042ae8:	2100      	movs	r1, #0
10042aea:	2020      	movs	r0, #32
10042aec:	f00f fc08 	bl	10052300 <UTIL_SEQ_SetTask>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
10042af0:	e06e      	b.n	10042bd0 <UartCmdExecute+0x10c>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
10042af2:	4a3d      	ldr	r2, [pc, #244]	@ (10042be8 <UartCmdExecute+0x124>)
10042af4:	4b39      	ldr	r3, [pc, #228]	@ (10042bdc <UartCmdExecute+0x118>)
10042af6:	0011      	movs	r1, r2
10042af8:	0018      	movs	r0, r3
10042afa:	f7fe fb91 	bl	10041220 <strcmp>
10042afe:	1e03      	subs	r3, r0, #0
10042b00:	d10c      	bne.n	10042b1c <UartCmdExecute+0x58>
    APP_DBG_MSG("SW2 OK\n");
10042b02:	4b3a      	ldr	r3, [pc, #232]	@ (10042bec <UartCmdExecute+0x128>)
10042b04:	0018      	movs	r0, r3
10042b06:	f024 fa6f 	bl	10066fe8 <puts>
    buttonDesc[B2].longPressed = 0;
10042b0a:	4b36      	ldr	r3, [pc, #216]	@ (10042be4 <UartCmdExecute+0x120>)
10042b0c:	2248      	movs	r2, #72	@ 0x48
10042b0e:	2100      	movs	r1, #0
10042b10:	5499      	strb	r1, [r3, r2]
    UTIL_SEQ_SetTask(1U << TASK_BUTTON_2, CFG_SEQ_PRIO_0);
10042b12:	2100      	movs	r1, #0
10042b14:	2040      	movs	r0, #64	@ 0x40
10042b16:	f00f fbf3 	bl	10052300 <UTIL_SEQ_SetTask>
}
10042b1a:	e059      	b.n	10042bd0 <UartCmdExecute+0x10c>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
10042b1c:	4a34      	ldr	r2, [pc, #208]	@ (10042bf0 <UartCmdExecute+0x12c>)
10042b1e:	4b2f      	ldr	r3, [pc, #188]	@ (10042bdc <UartCmdExecute+0x118>)
10042b20:	0011      	movs	r1, r2
10042b22:	0018      	movs	r0, r3
10042b24:	f7fe fb7c 	bl	10041220 <strcmp>
10042b28:	1e03      	subs	r3, r0, #0
10042b2a:	d10c      	bne.n	10042b46 <UartCmdExecute+0x82>
    APP_DBG_MSG("SW3 OK\n");
10042b2c:	4b31      	ldr	r3, [pc, #196]	@ (10042bf4 <UartCmdExecute+0x130>)
10042b2e:	0018      	movs	r0, r3
10042b30:	f024 fa5a 	bl	10066fe8 <puts>
    buttonDesc[B3].longPressed = 0;
10042b34:	4b2b      	ldr	r3, [pc, #172]	@ (10042be4 <UartCmdExecute+0x120>)
10042b36:	2270      	movs	r2, #112	@ 0x70
10042b38:	2100      	movs	r1, #0
10042b3a:	5499      	strb	r1, [r3, r2]
    UTIL_SEQ_SetTask(1U << TASK_BUTTON_3, CFG_SEQ_PRIO_0);
10042b3c:	2100      	movs	r1, #0
10042b3e:	2080      	movs	r0, #128	@ 0x80
10042b40:	f00f fbde 	bl	10052300 <UTIL_SEQ_SetTask>
}
10042b44:	e044      	b.n	10042bd0 <UartCmdExecute+0x10c>
  else if(strcmp((char const*)CommandString, "SW1_LONG") == 0)
10042b46:	4a2c      	ldr	r2, [pc, #176]	@ (10042bf8 <UartCmdExecute+0x134>)
10042b48:	4b24      	ldr	r3, [pc, #144]	@ (10042bdc <UartCmdExecute+0x118>)
10042b4a:	0011      	movs	r1, r2
10042b4c:	0018      	movs	r0, r3
10042b4e:	f7fe fb67 	bl	10041220 <strcmp>
10042b52:	1e03      	subs	r3, r0, #0
10042b54:	d10c      	bne.n	10042b70 <UartCmdExecute+0xac>
    APP_DBG_MSG("SW1_LONG OK\n");
10042b56:	4b29      	ldr	r3, [pc, #164]	@ (10042bfc <UartCmdExecute+0x138>)
10042b58:	0018      	movs	r0, r3
10042b5a:	f024 fa45 	bl	10066fe8 <puts>
    buttonDesc[B1].longPressed = 1;
10042b5e:	4b21      	ldr	r3, [pc, #132]	@ (10042be4 <UartCmdExecute+0x120>)
10042b60:	2220      	movs	r2, #32
10042b62:	2101      	movs	r1, #1
10042b64:	5499      	strb	r1, [r3, r2]
    UTIL_SEQ_SetTask(1U << TASK_BUTTON_1, CFG_SEQ_PRIO_0);
10042b66:	2100      	movs	r1, #0
10042b68:	2020      	movs	r0, #32
10042b6a:	f00f fbc9 	bl	10052300 <UTIL_SEQ_SetTask>
}
10042b6e:	e02f      	b.n	10042bd0 <UartCmdExecute+0x10c>
  else if (strcmp((char const*)CommandString, "SW2_LONG") == 0)
10042b70:	4a23      	ldr	r2, [pc, #140]	@ (10042c00 <UartCmdExecute+0x13c>)
10042b72:	4b1a      	ldr	r3, [pc, #104]	@ (10042bdc <UartCmdExecute+0x118>)
10042b74:	0011      	movs	r1, r2
10042b76:	0018      	movs	r0, r3
10042b78:	f7fe fb52 	bl	10041220 <strcmp>
10042b7c:	1e03      	subs	r3, r0, #0
10042b7e:	d10c      	bne.n	10042b9a <UartCmdExecute+0xd6>
    APP_DBG_MSG("SW2_LONG OK\n");
10042b80:	4b20      	ldr	r3, [pc, #128]	@ (10042c04 <UartCmdExecute+0x140>)
10042b82:	0018      	movs	r0, r3
10042b84:	f024 fa30 	bl	10066fe8 <puts>
    buttonDesc[B2].longPressed = 1;
10042b88:	4b16      	ldr	r3, [pc, #88]	@ (10042be4 <UartCmdExecute+0x120>)
10042b8a:	2248      	movs	r2, #72	@ 0x48
10042b8c:	2101      	movs	r1, #1
10042b8e:	5499      	strb	r1, [r3, r2]
    UTIL_SEQ_SetTask(1U << TASK_BUTTON_2, CFG_SEQ_PRIO_0);
10042b90:	2100      	movs	r1, #0
10042b92:	2040      	movs	r0, #64	@ 0x40
10042b94:	f00f fbb4 	bl	10052300 <UTIL_SEQ_SetTask>
}
10042b98:	e01a      	b.n	10042bd0 <UartCmdExecute+0x10c>
  else if (strcmp((char const*)CommandString, "SW3_LONG") == 0)
10042b9a:	4a1b      	ldr	r2, [pc, #108]	@ (10042c08 <UartCmdExecute+0x144>)
10042b9c:	4b0f      	ldr	r3, [pc, #60]	@ (10042bdc <UartCmdExecute+0x118>)
10042b9e:	0011      	movs	r1, r2
10042ba0:	0018      	movs	r0, r3
10042ba2:	f7fe fb3d 	bl	10041220 <strcmp>
10042ba6:	1e03      	subs	r3, r0, #0
10042ba8:	d10c      	bne.n	10042bc4 <UartCmdExecute+0x100>
    APP_DBG_MSG("SW3_LONG OK\n");
10042baa:	4b18      	ldr	r3, [pc, #96]	@ (10042c0c <UartCmdExecute+0x148>)
10042bac:	0018      	movs	r0, r3
10042bae:	f024 fa1b 	bl	10066fe8 <puts>
    buttonDesc[B3].longPressed = 1;
10042bb2:	4b0c      	ldr	r3, [pc, #48]	@ (10042be4 <UartCmdExecute+0x120>)
10042bb4:	2270      	movs	r2, #112	@ 0x70
10042bb6:	2101      	movs	r1, #1
10042bb8:	5499      	strb	r1, [r3, r2]
    UTIL_SEQ_SetTask(1U << TASK_BUTTON_3, CFG_SEQ_PRIO_0);
10042bba:	2100      	movs	r1, #0
10042bbc:	2080      	movs	r0, #128	@ 0x80
10042bbe:	f00f fb9f 	bl	10052300 <UTIL_SEQ_SetTask>
}
10042bc2:	e005      	b.n	10042bd0 <UartCmdExecute+0x10c>
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
10042bc4:	4a05      	ldr	r2, [pc, #20]	@ (10042bdc <UartCmdExecute+0x118>)
10042bc6:	4b12      	ldr	r3, [pc, #72]	@ (10042c10 <UartCmdExecute+0x14c>)
10042bc8:	0011      	movs	r1, r2
10042bca:	0018      	movs	r0, r3
10042bcc:	f024 f99c 	bl	10066f08 <iprintf>
}
10042bd0:	46c0      	nop			@ (mov r8, r8)
10042bd2:	46bd      	mov	sp, r7
10042bd4:	bd80      	pop	{r7, pc}
10042bd6:	46c0      	nop			@ (mov r8, r8)
10042bd8:	10068304 	.word	0x10068304
10042bdc:	20000238 	.word	0x20000238
10042be0:	10068308 	.word	0x10068308
10042be4:	20000198 	.word	0x20000198
10042be8:	10068310 	.word	0x10068310
10042bec:	10068314 	.word	0x10068314
10042bf0:	1006831c 	.word	0x1006831c
10042bf4:	10068320 	.word	0x10068320
10042bf8:	10068328 	.word	0x10068328
10042bfc:	10068334 	.word	0x10068334
10042c00:	10068340 	.word	0x10068340
10042c04:	1006834c 	.word	0x1006834c
10042c08:	10068358 	.word	0x10068358
10042c0c:	10068364 	.word	0x10068364
10042c10:	10068370 	.word	0x10068370

10042c14 <Schedule_FM_Task>:

void Schedule_FM_Task(void *vtimer)
{
10042c14:	b580      	push	{r7, lr}
10042c16:	b082      	sub	sp, #8
10042c18:	af00      	add	r7, sp, #0
10042c1a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1U << CFG_TASK_FLASH_MANAGER_BCKGND, CFG_SEQ_PRIO_1);
10042c1c:	2101      	movs	r1, #1
10042c1e:	2008      	movs	r0, #8
10042c20:	f00f fb6e 	bl	10052300 <UTIL_SEQ_SetTask>
}
10042c24:	46c0      	nop			@ (mov r8, r8)
10042c26:	46bd      	mov	sp, r7
10042c28:	b002      	add	sp, #8
10042c2a:	bd80      	pop	{r7, pc}

10042c2c <FM_ProcessRequest>:

void FM_ProcessRequest(uint8_t immediate)
{
10042c2c:	b580      	push	{r7, lr}
10042c2e:	b082      	sub	sp, #8
10042c30:	af00      	add	r7, sp, #0
10042c32:	0002      	movs	r2, r0
10042c34:	1dfb      	adds	r3, r7, #7
10042c36:	701a      	strb	r2, [r3, #0]
  static VTIMER_HandleType vtimer =
  {
    .callback = Schedule_FM_Task,
  };

  if(immediate)
10042c38:	1dfb      	adds	r3, r7, #7
10042c3a:	781b      	ldrb	r3, [r3, #0]
10042c3c:	2b00      	cmp	r3, #0
10042c3e:	d004      	beq.n	10042c4a <FM_ProcessRequest+0x1e>
  {
    /* Schedule the Flash manager background process as soon as possible. */
    UTIL_SEQ_SetTask(1U << CFG_TASK_FLASH_MANAGER_BCKGND, CFG_SEQ_PRIO_0);
10042c40:	2100      	movs	r1, #0
10042c42:	2008      	movs	r0, #8
10042c44:	f00f fb5c 	bl	10052300 <UTIL_SEQ_SetTask>
  else
  {
    /* Schedule Flash manager background process later on. */
    HAL_RADIO_TIMER_StartVirtualTimer(&vtimer, 5);
  }
}
10042c48:	e004      	b.n	10042c54 <FM_ProcessRequest+0x28>
    HAL_RADIO_TIMER_StartVirtualTimer(&vtimer, 5);
10042c4a:	4b04      	ldr	r3, [pc, #16]	@ (10042c5c <FM_ProcessRequest+0x30>)
10042c4c:	2105      	movs	r1, #5
10042c4e:	0018      	movs	r0, r3
10042c50:	f00c fa78 	bl	1004f144 <HAL_RADIO_TIMER_StartVirtualTimer>
}
10042c54:	46c0      	nop			@ (mov r8, r8)
10042c56:	46bd      	mov	sp, r7
10042c58:	b002      	add	sp, #8
10042c5a:	bd80      	pop	{r7, pc}
10042c5c:	20001298 	.word	0x20001298

10042c60 <MX_APPE_Process>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void MX_APPE_Process(void)
{
10042c60:	b580      	push	{r7, lr}
10042c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
10042c64:	2301      	movs	r3, #1
10042c66:	425b      	negs	r3, r3
10042c68:	0018      	movs	r0, r3
10042c6a:	f00f fa25 	bl	100520b8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
10042c6e:	46c0      	nop			@ (mov r8, r8)
10042c70:	46bd      	mov	sp, r7
10042c72:	bd80      	pop	{r7, pc}

10042c74 <UTIL_SEQ_PreIdle>:
void UTIL_SEQ_PreIdle( void )
{
10042c74:	b580      	push	{r7, lr}
10042c76:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  /* USER CODE BEGIN UTIL_SEQ_PREIDLE */

  /* USER CODE END UTIL_SEQ_PREIDLE */
#endif /* CFG_LPM_SUPPORTED */
  return;
10042c78:	46c0      	nop			@ (mov r8, r8)
}
10042c7a:	46bd      	mov	sp, r7
10042c7c:	bd80      	pop	{r7, pc}

10042c7e <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
10042c7e:	b5f0      	push	{r4, r5, r6, r7, lr}
10042c80:	b093      	sub	sp, #76	@ 0x4c
10042c82:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)

  /* Need to consume some CSTACK on WB05, due to bootloader CSTACK usage. */
  volatile uint32_t dummy[15];
  uint8_t i;
  for (i=0; i<10; i++)
10042c84:	2347      	movs	r3, #71	@ 0x47
10042c86:	18fb      	adds	r3, r7, r3
10042c88:	2200      	movs	r2, #0
10042c8a:	701a      	strb	r2, [r3, #0]
10042c8c:	e00c      	b.n	10042ca8 <UTIL_SEQ_Idle+0x2a>
  {
    dummy[i] = 0;
10042c8e:	2047      	movs	r0, #71	@ 0x47
10042c90:	183b      	adds	r3, r7, r0
10042c92:	781a      	ldrb	r2, [r3, #0]
10042c94:	1d3b      	adds	r3, r7, #4
10042c96:	0092      	lsls	r2, r2, #2
10042c98:	2100      	movs	r1, #0
10042c9a:	50d1      	str	r1, [r2, r3]
    __NOP();
10042c9c:	46c0      	nop			@ (mov r8, r8)
  for (i=0; i<10; i++)
10042c9e:	183b      	adds	r3, r7, r0
10042ca0:	781a      	ldrb	r2, [r3, #0]
10042ca2:	183b      	adds	r3, r7, r0
10042ca4:	3201      	adds	r2, #1
10042ca6:	701a      	strb	r2, [r3, #0]
10042ca8:	2347      	movs	r3, #71	@ 0x47
10042caa:	18fb      	adds	r3, r7, r3
10042cac:	781b      	ldrb	r3, [r3, #0]
10042cae:	2b09      	cmp	r3, #9
10042cb0:	d9ed      	bls.n	10042c8e <UTIL_SEQ_Idle+0x10>
  }

  PowerSaveLevels app_powerSave_level, vtimer_powerSave_level, final_level, pka_level;

  if ((BLE_STACK_SleepCheck() != POWER_SAVE_LEVEL_RUNNING) &&
10042cb2:	f010 f92b 	bl	10052f0c <BLE_STACK_SleepCheck>
10042cb6:	1e03      	subs	r3, r0, #0
10042cb8:	d05a      	beq.n	10042d70 <UTIL_SEQ_Idle+0xf2>
      ((app_powerSave_level = App_PowerSaveLevel_Check()) != POWER_SAVE_LEVEL_RUNNING))
10042cba:	2546      	movs	r5, #70	@ 0x46
10042cbc:	197c      	adds	r4, r7, r5
10042cbe:	f7ff fdbf 	bl	10042840 <App_PowerSaveLevel_Check>
10042cc2:	0003      	movs	r3, r0
10042cc4:	7023      	strb	r3, [r4, #0]
  if ((BLE_STACK_SleepCheck() != POWER_SAVE_LEVEL_RUNNING) &&
10042cc6:	197b      	adds	r3, r7, r5
10042cc8:	781b      	ldrb	r3, [r3, #0]
10042cca:	2b00      	cmp	r3, #0
10042ccc:	d050      	beq.n	10042d70 <UTIL_SEQ_Idle+0xf2>
  {
    vtimer_powerSave_level = HAL_RADIO_TIMER_PowerSaveLevelCheck();
10042cce:	2645      	movs	r6, #69	@ 0x45
10042cd0:	19bc      	adds	r4, r7, r6
10042cd2:	f00c f845 	bl	1004ed60 <HAL_RADIO_TIMER_PowerSaveLevelCheck>
10042cd6:	0003      	movs	r3, r0
10042cd8:	7023      	strb	r3, [r4, #0]
    pka_level = (PowerSaveLevels) HW_PKA_PowerSaveLevelCheck();
10042cda:	2344      	movs	r3, #68	@ 0x44
10042cdc:	18fc      	adds	r4, r7, r3
10042cde:	f005 fb59 	bl	10048394 <HW_PKA_PowerSaveLevelCheck>
10042ce2:	0003      	movs	r3, r0
10042ce4:	7023      	strb	r3, [r4, #0]
    final_level = (PowerSaveLevels)MIN(vtimer_powerSave_level, app_powerSave_level);
10042ce6:	2343      	movs	r3, #67	@ 0x43
10042ce8:	18fa      	adds	r2, r7, r3
10042cea:	197b      	adds	r3, r7, r5
10042cec:	19b9      	adds	r1, r7, r6
10042cee:	780c      	ldrb	r4, [r1, #0]
10042cf0:	781b      	ldrb	r3, [r3, #0]
10042cf2:	b2d8      	uxtb	r0, r3
10042cf4:	b2e1      	uxtb	r1, r4
10042cf6:	4288      	cmp	r0, r1
10042cf8:	d900      	bls.n	10042cfc <UTIL_SEQ_Idle+0x7e>
10042cfa:	1c23      	adds	r3, r4, #0
10042cfc:	7013      	strb	r3, [r2, #0]
    final_level = (PowerSaveLevels)MIN(pka_level, final_level);
10042cfe:	2343      	movs	r3, #67	@ 0x43
10042d00:	18fa      	adds	r2, r7, r3
10042d02:	18fb      	adds	r3, r7, r3
10042d04:	2144      	movs	r1, #68	@ 0x44
10042d06:	1879      	adds	r1, r7, r1
10042d08:	780c      	ldrb	r4, [r1, #0]
10042d0a:	781b      	ldrb	r3, [r3, #0]
10042d0c:	b2d8      	uxtb	r0, r3
10042d0e:	b2e1      	uxtb	r1, r4
10042d10:	4288      	cmp	r0, r1
10042d12:	d900      	bls.n	10042d16 <UTIL_SEQ_Idle+0x98>
10042d14:	1c23      	adds	r3, r4, #0
10042d16:	7013      	strb	r3, [r2, #0]

    switch(final_level)
10042d18:	2343      	movs	r3, #67	@ 0x43
10042d1a:	18fb      	adds	r3, r7, r3
10042d1c:	781b      	ldrb	r3, [r3, #0]
10042d1e:	2b03      	cmp	r3, #3
10042d20:	d019      	beq.n	10042d56 <UTIL_SEQ_Idle+0xd8>
10042d22:	dc21      	bgt.n	10042d68 <UTIL_SEQ_Idle+0xea>
10042d24:	2b02      	cmp	r3, #2
10042d26:	d00d      	beq.n	10042d44 <UTIL_SEQ_Idle+0xc6>
10042d28:	dc1e      	bgt.n	10042d68 <UTIL_SEQ_Idle+0xea>
10042d2a:	2b00      	cmp	r3, #0
10042d2c:	d01f      	beq.n	10042d6e <UTIL_SEQ_Idle+0xf0>
10042d2e:	2b01      	cmp	r3, #1
10042d30:	d11a      	bne.n	10042d68 <UTIL_SEQ_Idle+0xea>
    case POWER_SAVE_LEVEL_RUNNING:
      /* Not Power Save device is busy */
      return;
      break;
    case POWER_SAVE_LEVEL_CPU_HALT:
      UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
10042d32:	2101      	movs	r1, #1
10042d34:	2001      	movs	r0, #1
10042d36:	f00f f929 	bl	10051f8c <UTIL_LPM_SetStopMode>
      UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
10042d3a:	2101      	movs	r1, #1
10042d3c:	2001      	movs	r0, #1
10042d3e:	f00f f955 	bl	10051fec <UTIL_LPM_SetOffMode>
      break;
10042d42:	e011      	b.n	10042d68 <UTIL_SEQ_Idle+0xea>
    case POWER_SAVE_LEVEL_STOP_LS_CLOCK_ON:
      UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
10042d44:	2100      	movs	r1, #0
10042d46:	2001      	movs	r0, #1
10042d48:	f00f f920 	bl	10051f8c <UTIL_LPM_SetStopMode>
      UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
10042d4c:	2101      	movs	r1, #1
10042d4e:	2001      	movs	r0, #1
10042d50:	f00f f94c 	bl	10051fec <UTIL_LPM_SetOffMode>
      break;
10042d54:	e008      	b.n	10042d68 <UTIL_SEQ_Idle+0xea>
    case POWER_SAVE_LEVEL_STOP:
      UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
10042d56:	2100      	movs	r1, #0
10042d58:	2001      	movs	r0, #1
10042d5a:	f00f f917 	bl	10051f8c <UTIL_LPM_SetStopMode>
      UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
10042d5e:	2100      	movs	r1, #0
10042d60:	2001      	movs	r0, #1
10042d62:	f00f f943 	bl	10051fec <UTIL_LPM_SetOffMode>
      break;
10042d66:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN UTIL_SEQ_IDLE_BEGIN */

  /* USER CODE END UTIL_SEQ_IDLE_BEGIN */

    UTIL_LPM_EnterLowPower();
10042d68:	f00f f970 	bl	1005204c <UTIL_LPM_EnterLowPower>
10042d6c:	e000      	b.n	10042d70 <UTIL_SEQ_Idle+0xf2>
      return;
10042d6e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN UTIL_SEQ_IDLE_END */

  /* USER CODE END UTIL_SEQ_IDLE_END */
  }
#endif /* CFG_LPM_SUPPORTED */
}
10042d70:	46bd      	mov	sp, r7
10042d72:	b013      	add	sp, #76	@ 0x4c
10042d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10042d78 <BSP_PB_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
#if (CFG_BUTTON_SUPPORTED == 1)
void BSP_PB_Callback(Button_TypeDef Button)
{
10042d78:	b580      	push	{r7, lr}
10042d7a:	b082      	sub	sp, #8
10042d7c:	af00      	add	r7, sp, #0
10042d7e:	0002      	movs	r2, r0
10042d80:	1dfb      	adds	r3, r7, #7
10042d82:	701a      	strb	r2, [r3, #0]
  buttonDesc[Button].longPressed = 0;
10042d84:	1dfb      	adds	r3, r7, #7
10042d86:	781a      	ldrb	r2, [r3, #0]
10042d88:	490e      	ldr	r1, [pc, #56]	@ (10042dc4 <BSP_PB_Callback+0x4c>)
10042d8a:	2020      	movs	r0, #32
10042d8c:	0013      	movs	r3, r2
10042d8e:	009b      	lsls	r3, r3, #2
10042d90:	189b      	adds	r3, r3, r2
10042d92:	00db      	lsls	r3, r3, #3
10042d94:	18cb      	adds	r3, r1, r3
10042d96:	181b      	adds	r3, r3, r0
10042d98:	2200      	movs	r2, #0
10042d9a:	701a      	strb	r2, [r3, #0]
  HAL_RADIO_TIMER_StartVirtualTimer(&buttonDesc[Button].longTimerId, BUTTON_LONG_PRESS_THRESHOLD_MS);
10042d9c:	1dfb      	adds	r3, r7, #7
10042d9e:	781a      	ldrb	r2, [r3, #0]
10042da0:	0013      	movs	r3, r2
10042da2:	009b      	lsls	r3, r3, #2
10042da4:	189b      	adds	r3, r3, r2
10042da6:	00db      	lsls	r3, r3, #3
10042da8:	3308      	adds	r3, #8
10042daa:	001a      	movs	r2, r3
10042dac:	4b05      	ldr	r3, [pc, #20]	@ (10042dc4 <BSP_PB_Callback+0x4c>)
10042dae:	18d3      	adds	r3, r2, r3
10042db0:	22fa      	movs	r2, #250	@ 0xfa
10042db2:	0052      	lsls	r2, r2, #1
10042db4:	0011      	movs	r1, r2
10042db6:	0018      	movs	r0, r3
10042db8:	f00c f9c4 	bl	1004f144 <HAL_RADIO_TIMER_StartVirtualTimer>

  return;
10042dbc:	46c0      	nop			@ (mov r8, r8)
}
10042dbe:	46bd      	mov	sp, r7
10042dc0:	b002      	add	sp, #8
10042dc2:	bd80      	pop	{r7, pc}
10042dc4:	20000198 	.word	0x20000198

10042dc8 <HAL_PWR_WKUPx_Callback>:

#if (CFG_LPM_SUPPORTED == 1)
void HAL_PWR_WKUPx_Callback(uint32_t wakeupIOs)
{
10042dc8:	b580      	push	{r7, lr}
10042dca:	b082      	sub	sp, #8
10042dcc:	af00      	add	r7, sp, #0
10042dce:	6078      	str	r0, [r7, #4]
  if (wakeupIOs & PWR_WAKEUP_PA0)
10042dd0:	687a      	ldr	r2, [r7, #4]
10042dd2:	2380      	movs	r3, #128	@ 0x80
10042dd4:	025b      	lsls	r3, r3, #9
10042dd6:	4013      	ands	r3, r2
10042dd8:	d002      	beq.n	10042de0 <HAL_PWR_WKUPx_Callback+0x18>
  {
    BSP_PB_Callback(B1);
10042dda:	2000      	movs	r0, #0
10042ddc:	f7ff ffcc 	bl	10042d78 <BSP_PB_Callback>
  }
  if (wakeupIOs & PWR_WAKEUP_PB5)
10042de0:	687b      	ldr	r3, [r7, #4]
10042de2:	2220      	movs	r2, #32
10042de4:	4013      	ands	r3, r2
10042de6:	d002      	beq.n	10042dee <HAL_PWR_WKUPx_Callback+0x26>
  {
    BSP_PB_Callback(B2);
10042de8:	2001      	movs	r0, #1
10042dea:	f7ff ffc5 	bl	10042d78 <BSP_PB_Callback>
  if (wakeupIOs & PWR_WAKEUP_PB9)
  {
    BSP_PB_Callback(B3);
  }
#else
  if (wakeupIOs & PWR_WAKEUP_PB14)
10042dee:	687a      	ldr	r2, [r7, #4]
10042df0:	2380      	movs	r3, #128	@ 0x80
10042df2:	03db      	lsls	r3, r3, #15
10042df4:	4013      	ands	r3, r2
10042df6:	d002      	beq.n	10042dfe <HAL_PWR_WKUPx_Callback+0x36>
  {
    BSP_PB_Callback(B3);
10042df8:	2002      	movs	r0, #2
10042dfa:	f7ff ffbd 	bl	10042d78 <BSP_PB_Callback>
  }
#endif

}
10042dfe:	46c0      	nop			@ (mov r8, r8)
10042e00:	46bd      	mov	sp, r7
10042e02:	b002      	add	sp, #8
10042e04:	bd80      	pop	{r7, pc}

10042e06 <HAL_GPIO_EXTI_Callback>:
#endif

void HAL_GPIO_EXTI_Callback(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
10042e06:	b580      	push	{r7, lr}
10042e08:	b082      	sub	sp, #8
10042e0a:	af00      	add	r7, sp, #0
10042e0c:	6078      	str	r0, [r7, #4]
10042e0e:	000a      	movs	r2, r1
10042e10:	1cbb      	adds	r3, r7, #2
10042e12:	801a      	strh	r2, [r3, #0]
  if (GPIO_Pin == B1_PIN)
10042e14:	1cbb      	adds	r3, r7, #2
10042e16:	881b      	ldrh	r3, [r3, #0]
10042e18:	2b01      	cmp	r3, #1
10042e1a:	d103      	bne.n	10042e24 <HAL_GPIO_EXTI_Callback+0x1e>
  {
    BSP_PB_Callback(B1);
10042e1c:	2000      	movs	r0, #0
10042e1e:	f7ff ffab 	bl	10042d78 <BSP_PB_Callback>
  else if (GPIO_Pin == B4_PIN)
  {
    BSP_PB_Callback(B4);
  }

  return;
10042e22:	e01b      	b.n	10042e5c <HAL_GPIO_EXTI_Callback+0x56>
  else if (GPIO_Pin == B2_PIN)
10042e24:	1cbb      	adds	r3, r7, #2
10042e26:	881b      	ldrh	r3, [r3, #0]
10042e28:	2b20      	cmp	r3, #32
10042e2a:	d103      	bne.n	10042e34 <HAL_GPIO_EXTI_Callback+0x2e>
    BSP_PB_Callback(B2);
10042e2c:	2001      	movs	r0, #1
10042e2e:	f7ff ffa3 	bl	10042d78 <BSP_PB_Callback>
  return;
10042e32:	e013      	b.n	10042e5c <HAL_GPIO_EXTI_Callback+0x56>
  else if (GPIO_Pin == B3_PIN)
10042e34:	1cbb      	adds	r3, r7, #2
10042e36:	881a      	ldrh	r2, [r3, #0]
10042e38:	2380      	movs	r3, #128	@ 0x80
10042e3a:	01db      	lsls	r3, r3, #7
10042e3c:	429a      	cmp	r2, r3
10042e3e:	d103      	bne.n	10042e48 <HAL_GPIO_EXTI_Callback+0x42>
    BSP_PB_Callback(B3);
10042e40:	2002      	movs	r0, #2
10042e42:	f7ff ff99 	bl	10042d78 <BSP_PB_Callback>
  return;
10042e46:	e009      	b.n	10042e5c <HAL_GPIO_EXTI_Callback+0x56>
  else if (GPIO_Pin == B4_PIN)
10042e48:	1cbb      	adds	r3, r7, #2
10042e4a:	881a      	ldrh	r2, [r3, #0]
10042e4c:	2380      	movs	r3, #128	@ 0x80
10042e4e:	009b      	lsls	r3, r3, #2
10042e50:	429a      	cmp	r2, r3
10042e52:	d103      	bne.n	10042e5c <HAL_GPIO_EXTI_Callback+0x56>
    BSP_PB_Callback(B4);
10042e54:	2003      	movs	r0, #3
10042e56:	f7ff ff8f 	bl	10042d78 <BSP_PB_Callback>
  return;
10042e5a:	46c0      	nop			@ (mov r8, r8)
10042e5c:	46c0      	nop			@ (mov r8, r8)
}
10042e5e:	46bd      	mov	sp, r7
10042e60:	b002      	add	sp, #8
10042e62:	bd80      	pop	{r7, pc}

10042e64 <LL_RADIO_TIMER_GetAbsoluteTime>:
  * @brief  Get the Absolute Time of the wakeup timer (Granularity unit is 16 x slow clock period).
  * @param  WAKEUPx Radio Timer instance
  * @retval Absolute Time of Wakeup Timer
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP_TypeDef *WAKEUPx)
{
10042e64:	b580      	push	{r7, lr}
10042e66:	b082      	sub	sp, #8
10042e68:	af00      	add	r7, sp, #0
10042e6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
10042e6c:	687b      	ldr	r3, [r7, #4]
10042e6e:	691b      	ldr	r3, [r3, #16]
}
10042e70:	0018      	movs	r0, r3
10042e72:	46bd      	mov	sp, r7
10042e74:	b002      	add	sp, #8
10042e76:	bd80      	pop	{r7, pc}

10042e78 <LL_AHB1_GRP1_EnableClock>:
  * @arg LL_AHB1_GRP1_PERIPH_RNG
  * @retval None
  * @note   LL_AHB1_GRP1_PERIPH_PKA
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
10042e78:	b580      	push	{r7, lr}
10042e7a:	b084      	sub	sp, #16
10042e7c:	af00      	add	r7, sp, #0
10042e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
10042e80:	4b07      	ldr	r3, [pc, #28]	@ (10042ea0 <LL_AHB1_GRP1_EnableClock+0x28>)
10042e82:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10042e84:	4b06      	ldr	r3, [pc, #24]	@ (10042ea0 <LL_AHB1_GRP1_EnableClock+0x28>)
10042e86:	687a      	ldr	r2, [r7, #4]
10042e88:	430a      	orrs	r2, r1
10042e8a:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10042e8c:	4b04      	ldr	r3, [pc, #16]	@ (10042ea0 <LL_AHB1_GRP1_EnableClock+0x28>)
10042e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10042e90:	687a      	ldr	r2, [r7, #4]
10042e92:	4013      	ands	r3, r2
10042e94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10042e96:	68fb      	ldr	r3, [r7, #12]
}
10042e98:	46c0      	nop			@ (mov r8, r8)
10042e9a:	46bd      	mov	sp, r7
10042e9c:	b004      	add	sp, #16
10042e9e:	bd80      	pop	{r7, pc}
10042ea0:	48400000 	.word	0x48400000

10042ea4 <LL_APB2_GRP1_EnableClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
10042ea4:	b580      	push	{r7, lr}
10042ea6:	b084      	sub	sp, #16
10042ea8:	af00      	add	r7, sp, #0
10042eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
10042eac:	4b07      	ldr	r3, [pc, #28]	@ (10042ecc <LL_APB2_GRP1_EnableClock+0x28>)
10042eae:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10042eb0:	4b06      	ldr	r3, [pc, #24]	@ (10042ecc <LL_APB2_GRP1_EnableClock+0x28>)
10042eb2:	687a      	ldr	r2, [r7, #4]
10042eb4:	430a      	orrs	r2, r1
10042eb6:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10042eb8:	4b04      	ldr	r3, [pc, #16]	@ (10042ecc <LL_APB2_GRP1_EnableClock+0x28>)
10042eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10042ebc:	687a      	ldr	r2, [r7, #4]
10042ebe:	4013      	ands	r3, r2
10042ec0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10042ec2:	68fb      	ldr	r3, [r7, #12]
}
10042ec4:	46c0      	nop			@ (mov r8, r8)
10042ec6:	46bd      	mov	sp, r7
10042ec8:	b004      	add	sp, #16
10042eca:	bd80      	pop	{r7, pc}
10042ecc:	48400000 	.word	0x48400000

10042ed0 <LL_APB2_GRP1_IsEnabledClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval uint32_t
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE uint32_t LL_APB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
10042ed0:	b580      	push	{r7, lr}
10042ed2:	b082      	sub	sp, #8
10042ed4:	af00      	add	r7, sp, #0
10042ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10042ed8:	4b06      	ldr	r3, [pc, #24]	@ (10042ef4 <LL_APB2_GRP1_IsEnabledClock+0x24>)
10042eda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10042edc:	687a      	ldr	r2, [r7, #4]
10042ede:	4013      	ands	r3, r2
10042ee0:	687a      	ldr	r2, [r7, #4]
10042ee2:	429a      	cmp	r2, r3
10042ee4:	d101      	bne.n	10042eea <LL_APB2_GRP1_IsEnabledClock+0x1a>
10042ee6:	2301      	movs	r3, #1
10042ee8:	e000      	b.n	10042eec <LL_APB2_GRP1_IsEnabledClock+0x1c>
10042eea:	2300      	movs	r3, #0
}
10042eec:	0018      	movs	r0, r3
10042eee:	46bd      	mov	sp, r7
10042ef0:	b002      	add	sp, #8
10042ef2:	bd80      	pop	{r7, pc}
10042ef4:	48400000 	.word	0x48400000

10042ef8 <LL_APB2_GRP1_ForceReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
10042ef8:	b580      	push	{r7, lr}
10042efa:	b082      	sub	sp, #8
10042efc:	af00      	add	r7, sp, #0
10042efe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10042f00:	4b04      	ldr	r3, [pc, #16]	@ (10042f14 <LL_APB2_GRP1_ForceReset+0x1c>)
10042f02:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10042f04:	4b03      	ldr	r3, [pc, #12]	@ (10042f14 <LL_APB2_GRP1_ForceReset+0x1c>)
10042f06:	687a      	ldr	r2, [r7, #4]
10042f08:	430a      	orrs	r2, r1
10042f0a:	641a      	str	r2, [r3, #64]	@ 0x40
}
10042f0c:	46c0      	nop			@ (mov r8, r8)
10042f0e:	46bd      	mov	sp, r7
10042f10:	b002      	add	sp, #8
10042f12:	bd80      	pop	{r7, pc}
10042f14:	48400000 	.word	0x48400000

10042f18 <LL_APB2_GRP1_ReleaseReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
10042f18:	b580      	push	{r7, lr}
10042f1a:	b082      	sub	sp, #8
10042f1c:	af00      	add	r7, sp, #0
10042f1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10042f20:	4b05      	ldr	r3, [pc, #20]	@ (10042f38 <LL_APB2_GRP1_ReleaseReset+0x20>)
10042f22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10042f24:	687b      	ldr	r3, [r7, #4]
10042f26:	43d9      	mvns	r1, r3
10042f28:	4b03      	ldr	r3, [pc, #12]	@ (10042f38 <LL_APB2_GRP1_ReleaseReset+0x20>)
10042f2a:	400a      	ands	r2, r1
10042f2c:	641a      	str	r2, [r3, #64]	@ 0x40
}
10042f2e:	46c0      	nop			@ (mov r8, r8)
10042f30:	46bd      	mov	sp, r7
10042f32:	b002      	add	sp, #8
10042f34:	bd80      	pop	{r7, pc}
10042f36:	46c0      	nop			@ (mov r8, r8)
10042f38:	48400000 	.word	0x48400000

10042f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
10042f3c:	b580      	push	{r7, lr}
10042f3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10042f40:	f009 fdb4 	bl	1004caac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
10042f44:	f000 f810 	bl	10042f68 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
10042f48:	f000 f845 	bl	10042fd6 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
10042f4c:	f000 f8c6 	bl	100430dc <MX_GPIO_Init>
  MX_RADIO_Init();
10042f50:	f000 f872 	bl	10043038 <MX_RADIO_Init>
  MX_RADIO_TIMER_Init();
10042f54:	f000 f88e 	bl	10043074 <MX_RADIO_TIMER_Init>
  MX_PKA_Init();
10042f58:	f000 f85a 	bl	10043010 <MX_PKA_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_BLE */
  MX_APPE_Init(NULL);
10042f5c:	2000      	movs	r0, #0
10042f5e:	f7ff fc2d 	bl	100427bc <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
10042f62:	f7ff fe7d 	bl	10042c60 <MX_APPE_Process>
10042f66:	e7fc      	b.n	10042f62 <main+0x26>

10042f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
10042f68:	b590      	push	{r4, r7, lr}
10042f6a:	b089      	sub	sp, #36	@ 0x24
10042f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10042f6e:	2408      	movs	r4, #8
10042f70:	193b      	adds	r3, r7, r4
10042f72:	0018      	movs	r0, r3
10042f74:	2318      	movs	r3, #24
10042f76:	001a      	movs	r2, r3
10042f78:	2100      	movs	r1, #0
10042f7a:	f024 f9ef 	bl	1006735c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10042f7e:	003b      	movs	r3, r7
10042f80:	0018      	movs	r0, r3
10042f82:	2308      	movs	r3, #8
10042f84:	001a      	movs	r2, r3
10042f86:	2100      	movs	r1, #0
10042f88:	f024 f9e8 	bl	1006735c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
10042f8c:	193b      	adds	r3, r7, r4
10042f8e:	2203      	movs	r2, #3
10042f90:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
10042f92:	193b      	adds	r3, r7, r4
10042f94:	2280      	movs	r2, #128	@ 0x80
10042f96:	0252      	lsls	r2, r2, #9
10042f98:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
10042f9a:	193b      	adds	r3, r7, r4
10042f9c:	2210      	movs	r2, #16
10042f9e:	60da      	str	r2, [r3, #12]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10042fa0:	193b      	adds	r3, r7, r4
10042fa2:	0018      	movs	r0, r3
10042fa4:	f00d fa04 	bl	100503b0 <HAL_RCC_OscConfig>
10042fa8:	1e03      	subs	r3, r0, #0
10042faa:	d001      	beq.n	10042fb0 <SystemClock_Config+0x48>
  {
    Error_Handler();
10042fac:	f000 f8a3 	bl	100430f6 <Error_Handler>
  }

  /** Configure the SYSCLKSource and SYSCLKDivider
  */
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_RC64MPLL;
10042fb0:	003b      	movs	r3, r7
10042fb2:	2200      	movs	r2, #0
10042fb4:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_RC64MPLL_DIV2;
10042fb6:	003b      	movs	r3, r7
10042fb8:	2220      	movs	r2, #32
10042fba:	605a      	str	r2, [r3, #4]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAIT_STATES_0) != HAL_OK)
10042fbc:	003b      	movs	r3, r7
10042fbe:	2100      	movs	r1, #0
10042fc0:	0018      	movs	r0, r3
10042fc2:	f00d fb3f 	bl	10050644 <HAL_RCC_ClockConfig>
10042fc6:	1e03      	subs	r3, r0, #0
10042fc8:	d001      	beq.n	10042fce <SystemClock_Config+0x66>
  {
    Error_Handler();
10042fca:	f000 f894 	bl	100430f6 <Error_Handler>
  }
}
10042fce:	46c0      	nop			@ (mov r8, r8)
10042fd0:	46bd      	mov	sp, r7
10042fd2:	b009      	add	sp, #36	@ 0x24
10042fd4:	bd90      	pop	{r4, r7, pc}

10042fd6 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
10042fd6:	b580      	push	{r7, lr}
10042fd8:	b086      	sub	sp, #24
10042fda:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10042fdc:	003b      	movs	r3, r7
10042fde:	0018      	movs	r0, r3
10042fe0:	2318      	movs	r3, #24
10042fe2:	001a      	movs	r2, r3
10042fe4:	2100      	movs	r1, #0
10042fe6:	f024 f9b9 	bl	1006735c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
10042fea:	003b      	movs	r3, r7
10042fec:	2202      	movs	r2, #2
10042fee:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLK_DIV4;
10042ff0:	003b      	movs	r3, r7
10042ff2:	2280      	movs	r2, #128	@ 0x80
10042ff4:	0152      	lsls	r2, r2, #5
10042ff6:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10042ff8:	003b      	movs	r3, r7
10042ffa:	0018      	movs	r0, r3
10042ffc:	f00d fcb8 	bl	10050970 <HAL_RCCEx_PeriphCLKConfig>
10043000:	1e03      	subs	r3, r0, #0
10043002:	d001      	beq.n	10043008 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
10043004:	f000 f877 	bl	100430f6 <Error_Handler>
  }
}
10043008:	46c0      	nop			@ (mov r8, r8)
1004300a:	46bd      	mov	sp, r7
1004300c:	b006      	add	sp, #24
1004300e:	bd80      	pop	{r7, pc}

10043010 <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
10043010:	b580      	push	{r7, lr}
10043012:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
10043014:	4b06      	ldr	r3, [pc, #24]	@ (10043030 <MX_PKA_Init+0x20>)
10043016:	4a07      	ldr	r2, [pc, #28]	@ (10043034 <MX_PKA_Init+0x24>)
10043018:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
1004301a:	4b05      	ldr	r3, [pc, #20]	@ (10043030 <MX_PKA_Init+0x20>)
1004301c:	0018      	movs	r0, r3
1004301e:	f00a fa40 	bl	1004d4a2 <HAL_PKA_Init>
10043022:	1e03      	subs	r3, r0, #0
10043024:	d001      	beq.n	1004302a <MX_PKA_Init+0x1a>
  {
    Error_Handler();
10043026:	f000 f866 	bl	100430f6 <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
1004302a:	46c0      	nop			@ (mov r8, r8)
1004302c:	46bd      	mov	sp, r7
1004302e:	bd80      	pop	{r7, pc}
10043030:	2000033c 	.word	0x2000033c
10043034:	48300000 	.word	0x48300000

10043038 <MX_RADIO_Init>:
  * @brief RADIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_Init(void)
{
10043038:	b580      	push	{r7, lr}
1004303a:	b082      	sub	sp, #8
1004303c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_Init 0 */

  /* USER CODE END RADIO_Init 0 */

  RADIO_HandleTypeDef hradio = {0};
1004303e:	2300      	movs	r3, #0
10043040:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN RADIO_Init 1 */

  /* USER CODE END RADIO_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10043042:	2001      	movs	r0, #1
10043044:	f7ff ff44 	bl	10042ed0 <LL_APB2_GRP1_IsEnabledClock>
10043048:	1e03      	subs	r3, r0, #0
1004304a:	d108      	bne.n	1004305e <MX_RADIO_Init+0x26>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
1004304c:	2001      	movs	r0, #1
1004304e:	f7ff ff53 	bl	10042ef8 <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
10043052:	2001      	movs	r0, #1
10043054:	f7ff ff60 	bl	10042f18 <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
10043058:	2001      	movs	r0, #1
1004305a:	f7ff ff23 	bl	10042ea4 <LL_APB2_GRP1_EnableClock>
  }
  hradio.Instance = RADIO;
1004305e:	23c0      	movs	r3, #192	@ 0xc0
10043060:	05db      	lsls	r3, r3, #23
10043062:	607b      	str	r3, [r7, #4]
  HAL_RADIO_Init(&hradio);
10043064:	1d3b      	adds	r3, r7, #4
10043066:	0018      	movs	r0, r3
10043068:	f00a febe 	bl	1004dde8 <HAL_RADIO_Init>
  /* USER CODE BEGIN RADIO_Init 2 */

  /* USER CODE END RADIO_Init 2 */

}
1004306c:	46c0      	nop			@ (mov r8, r8)
1004306e:	46bd      	mov	sp, r7
10043070:	b002      	add	sp, #8
10043072:	bd80      	pop	{r7, pc}

10043074 <MX_RADIO_TIMER_Init>:
  * @brief RADIO_TIMER Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_TIMER_Init(void)
{
10043074:	b580      	push	{r7, lr}
10043076:	b082      	sub	sp, #8
10043078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_TIMER_Init 0 */

  /* USER CODE END RADIO_TIMER_Init 0 */

  RADIO_TIMER_InitTypeDef RADIO_TIMER_InitStruct = {0};
1004307a:	003b      	movs	r3, r7
1004307c:	0018      	movs	r0, r3
1004307e:	2308      	movs	r3, #8
10043080:	001a      	movs	r2, r3
10043082:	2100      	movs	r1, #0
10043084:	f024 f96a 	bl	1006735c <memset>

  /* USER CODE BEGIN RADIO_TIMER_Init 1 */

  /* USER CODE END RADIO_TIMER_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10043088:	2001      	movs	r0, #1
1004308a:	f7ff ff21 	bl	10042ed0 <LL_APB2_GRP1_IsEnabledClock>
1004308e:	1e03      	subs	r3, r0, #0
10043090:	d108      	bne.n	100430a4 <MX_RADIO_TIMER_Init+0x30>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
10043092:	2001      	movs	r0, #1
10043094:	f7ff ff30 	bl	10042ef8 <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
10043098:	2001      	movs	r0, #1
1004309a:	f7ff ff3d 	bl	10042f18 <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
1004309e:	2001      	movs	r0, #1
100430a0:	f7ff ff00 	bl	10042ea4 <LL_APB2_GRP1_EnableClock>
  }
  /* Wait to be sure that the Radio Timer is active */
  while(LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP) < 0x10);
100430a4:	46c0      	nop			@ (mov r8, r8)
100430a6:	4b0c      	ldr	r3, [pc, #48]	@ (100430d8 <MX_RADIO_TIMER_Init+0x64>)
100430a8:	0018      	movs	r0, r3
100430aa:	f7ff fedb 	bl	10042e64 <LL_RADIO_TIMER_GetAbsoluteTime>
100430ae:	0003      	movs	r3, r0
100430b0:	2b0f      	cmp	r3, #15
100430b2:	d9f8      	bls.n	100430a6 <MX_RADIO_TIMER_Init+0x32>
  RADIO_TIMER_InitStruct.XTAL_StartupTime = 320;
100430b4:	003b      	movs	r3, r7
100430b6:	22a0      	movs	r2, #160	@ 0xa0
100430b8:	0052      	lsls	r2, r2, #1
100430ba:	801a      	strh	r2, [r3, #0]
  RADIO_TIMER_InitStruct.enableInitialCalibration = FALSE;
100430bc:	003b      	movs	r3, r7
100430be:	2200      	movs	r2, #0
100430c0:	709a      	strb	r2, [r3, #2]
  RADIO_TIMER_InitStruct.periodicCalibrationInterval = 0;
100430c2:	003b      	movs	r3, r7
100430c4:	2200      	movs	r2, #0
100430c6:	605a      	str	r2, [r3, #4]
  HAL_RADIO_TIMER_Init(&RADIO_TIMER_InitStruct);
100430c8:	003b      	movs	r3, r7
100430ca:	0018      	movs	r0, r3
100430cc:	f00b fbec 	bl	1004e8a8 <HAL_RADIO_TIMER_Init>
  /* USER CODE BEGIN RADIO_TIMER_Init 2 */

  /* USER CODE END RADIO_TIMER_Init 2 */

}
100430d0:	46c0      	nop			@ (mov r8, r8)
100430d2:	46bd      	mov	sp, r7
100430d4:	b002      	add	sp, #8
100430d6:	bd80      	pop	{r7, pc}
100430d8:	60001800 	.word	0x60001800

100430dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
100430dc:	b580      	push	{r7, lr}
100430de:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
100430e0:	2008      	movs	r0, #8
100430e2:	f7ff fec9 	bl	10042e78 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
100430e6:	2004      	movs	r0, #4
100430e8:	f7ff fec6 	bl	10042e78 <LL_AHB1_GRP1_EnableClock>

  /*RT DEBUG GPIO_Init */
  RT_DEBUG_GPIO_Init();
100430ec:	f004 fe87 	bl	10047dfe <RT_DEBUG_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
100430f0:	46c0      	nop			@ (mov r8, r8)
100430f2:	46bd      	mov	sp, r7
100430f4:	bd80      	pop	{r7, pc}

100430f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
100430f6:	b580      	push	{r7, lr}
100430f8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
100430fa:	b672      	cpsid	i
}
100430fc:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
100430fe:	e7fe      	b.n	100430fe <Error_Handler+0x8>

10043100 <LL_PWR_SetNoPullA>:
  *         @arg @ref LL_PWR_GPIO_BIT_15(*)
  *         (*) available only on STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullA(uint32_t GPIONumber)
{
10043100:	b580      	push	{r7, lr}
10043102:	b082      	sub	sp, #8
10043104:	af00      	add	r7, sp, #0
10043106:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRA, GPIONumber);
10043108:	4b08      	ldr	r3, [pc, #32]	@ (1004312c <LL_PWR_SetNoPullA+0x2c>)
1004310a:	6a1a      	ldr	r2, [r3, #32]
1004310c:	687b      	ldr	r3, [r7, #4]
1004310e:	43d9      	mvns	r1, r3
10043110:	4b06      	ldr	r3, [pc, #24]	@ (1004312c <LL_PWR_SetNoPullA+0x2c>)
10043112:	400a      	ands	r2, r1
10043114:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(PWR->PDCRA, GPIONumber);
10043116:	4b05      	ldr	r3, [pc, #20]	@ (1004312c <LL_PWR_SetNoPullA+0x2c>)
10043118:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004311a:	687b      	ldr	r3, [r7, #4]
1004311c:	43d9      	mvns	r1, r3
1004311e:	4b03      	ldr	r3, [pc, #12]	@ (1004312c <LL_PWR_SetNoPullA+0x2c>)
10043120:	400a      	ands	r2, r1
10043122:	625a      	str	r2, [r3, #36]	@ 0x24
}
10043124:	46c0      	nop			@ (mov r8, r8)
10043126:	46bd      	mov	sp, r7
10043128:	b002      	add	sp, #8
1004312a:	bd80      	pop	{r7, pc}
1004312c:	48500000 	.word	0x48500000

10043130 <LL_PWR_SetNoPullB>:
  *         @arg @ref LL_PWR_GPIO_BIT_15
  *         (*) available only oon STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullB(uint32_t GPIONumber)
{
10043130:	b580      	push	{r7, lr}
10043132:	b082      	sub	sp, #8
10043134:	af00      	add	r7, sp, #0
10043136:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
10043138:	4b08      	ldr	r3, [pc, #32]	@ (1004315c <LL_PWR_SetNoPullB+0x2c>)
1004313a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004313c:	687b      	ldr	r3, [r7, #4]
1004313e:	43d9      	mvns	r1, r3
10043140:	4b06      	ldr	r3, [pc, #24]	@ (1004315c <LL_PWR_SetNoPullB+0x2c>)
10043142:	400a      	ands	r2, r1
10043144:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
10043146:	4b05      	ldr	r3, [pc, #20]	@ (1004315c <LL_PWR_SetNoPullB+0x2c>)
10043148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004314a:	687b      	ldr	r3, [r7, #4]
1004314c:	43d9      	mvns	r1, r3
1004314e:	4b03      	ldr	r3, [pc, #12]	@ (1004315c <LL_PWR_SetNoPullB+0x2c>)
10043150:	400a      	ands	r2, r1
10043152:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10043154:	46c0      	nop			@ (mov r8, r8)
10043156:	46bd      	mov	sp, r7
10043158:	b002      	add	sp, #8
1004315a:	bd80      	pop	{r7, pc}
1004315c:	48500000 	.word	0x48500000

10043160 <LL_AHB1_GRP1_EnableClock>:
{
10043160:	b580      	push	{r7, lr}
10043162:	b084      	sub	sp, #16
10043164:	af00      	add	r7, sp, #0
10043166:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
10043168:	4b07      	ldr	r3, [pc, #28]	@ (10043188 <LL_AHB1_GRP1_EnableClock+0x28>)
1004316a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
1004316c:	4b06      	ldr	r3, [pc, #24]	@ (10043188 <LL_AHB1_GRP1_EnableClock+0x28>)
1004316e:	687a      	ldr	r2, [r7, #4]
10043170:	430a      	orrs	r2, r1
10043172:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10043174:	4b04      	ldr	r3, [pc, #16]	@ (10043188 <LL_AHB1_GRP1_EnableClock+0x28>)
10043176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10043178:	687a      	ldr	r2, [r7, #4]
1004317a:	4013      	ands	r3, r2
1004317c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004317e:	68fb      	ldr	r3, [r7, #12]
}
10043180:	46c0      	nop			@ (mov r8, r8)
10043182:	46bd      	mov	sp, r7
10043184:	b004      	add	sp, #16
10043186:	bd80      	pop	{r7, pc}
10043188:	48400000 	.word	0x48400000

1004318c <LL_APB0_GRP1_EnableClock>:
{
1004318c:	b580      	push	{r7, lr}
1004318e:	b084      	sub	sp, #16
10043190:	af00      	add	r7, sp, #0
10043192:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
10043194:	4b07      	ldr	r3, [pc, #28]	@ (100431b4 <LL_APB0_GRP1_EnableClock+0x28>)
10043196:	6d59      	ldr	r1, [r3, #84]	@ 0x54
10043198:	4b06      	ldr	r3, [pc, #24]	@ (100431b4 <LL_APB0_GRP1_EnableClock+0x28>)
1004319a:	687a      	ldr	r2, [r7, #4]
1004319c:	430a      	orrs	r2, r1
1004319e:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
100431a0:	4b04      	ldr	r3, [pc, #16]	@ (100431b4 <LL_APB0_GRP1_EnableClock+0x28>)
100431a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
100431a4:	687a      	ldr	r2, [r7, #4]
100431a6:	4013      	ands	r3, r2
100431a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100431aa:	68fb      	ldr	r3, [r7, #12]
}
100431ac:	46c0      	nop			@ (mov r8, r8)
100431ae:	46bd      	mov	sp, r7
100431b0:	b004      	add	sp, #16
100431b2:	bd80      	pop	{r7, pc}
100431b4:	48400000 	.word	0x48400000

100431b8 <LL_APB1_GRP1_EnableClock>:
{
100431b8:	b580      	push	{r7, lr}
100431ba:	b084      	sub	sp, #16
100431bc:	af00      	add	r7, sp, #0
100431be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
100431c0:	4b07      	ldr	r3, [pc, #28]	@ (100431e0 <LL_APB1_GRP1_EnableClock+0x28>)
100431c2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
100431c4:	4b06      	ldr	r3, [pc, #24]	@ (100431e0 <LL_APB1_GRP1_EnableClock+0x28>)
100431c6:	687a      	ldr	r2, [r7, #4]
100431c8:	430a      	orrs	r2, r1
100431ca:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
100431cc:	4b04      	ldr	r3, [pc, #16]	@ (100431e0 <LL_APB1_GRP1_EnableClock+0x28>)
100431ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
100431d0:	687a      	ldr	r2, [r7, #4]
100431d2:	4013      	ands	r3, r2
100431d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100431d6:	68fb      	ldr	r3, [r7, #12]
}
100431d8:	46c0      	nop			@ (mov r8, r8)
100431da:	46bd      	mov	sp, r7
100431dc:	b004      	add	sp, #16
100431de:	bd80      	pop	{r7, pc}
100431e0:	48400000 	.word	0x48400000

100431e4 <LL_APB2_GRP1_EnableClock>:
{
100431e4:	b580      	push	{r7, lr}
100431e6:	b084      	sub	sp, #16
100431e8:	af00      	add	r7, sp, #0
100431ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
100431ec:	4b07      	ldr	r3, [pc, #28]	@ (1004320c <LL_APB2_GRP1_EnableClock+0x28>)
100431ee:	6e19      	ldr	r1, [r3, #96]	@ 0x60
100431f0:	4b06      	ldr	r3, [pc, #24]	@ (1004320c <LL_APB2_GRP1_EnableClock+0x28>)
100431f2:	687a      	ldr	r2, [r7, #4]
100431f4:	430a      	orrs	r2, r1
100431f6:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
100431f8:	4b04      	ldr	r3, [pc, #16]	@ (1004320c <LL_APB2_GRP1_EnableClock+0x28>)
100431fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
100431fc:	687a      	ldr	r2, [r7, #4]
100431fe:	4013      	ands	r3, r2
10043200:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10043202:	68fb      	ldr	r3, [r7, #12]
}
10043204:	46c0      	nop			@ (mov r8, r8)
10043206:	46bd      	mov	sp, r7
10043208:	b004      	add	sp, #16
1004320a:	bd80      	pop	{r7, pc}
1004320c:	48400000 	.word	0x48400000

10043210 <LL_APB2_GRP1_IsEnabledClock>:
{
10043210:	b580      	push	{r7, lr}
10043212:	b082      	sub	sp, #8
10043214:	af00      	add	r7, sp, #0
10043216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10043218:	4b06      	ldr	r3, [pc, #24]	@ (10043234 <LL_APB2_GRP1_IsEnabledClock+0x24>)
1004321a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004321c:	687a      	ldr	r2, [r7, #4]
1004321e:	4013      	ands	r3, r2
10043220:	687a      	ldr	r2, [r7, #4]
10043222:	429a      	cmp	r2, r3
10043224:	d101      	bne.n	1004322a <LL_APB2_GRP1_IsEnabledClock+0x1a>
10043226:	2301      	movs	r3, #1
10043228:	e000      	b.n	1004322c <LL_APB2_GRP1_IsEnabledClock+0x1c>
1004322a:	2300      	movs	r3, #0
}
1004322c:	0018      	movs	r0, r3
1004322e:	46bd      	mov	sp, r7
10043230:	b002      	add	sp, #8
10043232:	bd80      	pop	{r7, pc}
10043234:	48400000 	.word	0x48400000

10043238 <LL_APB2_GRP1_ForceReset>:
{
10043238:	b580      	push	{r7, lr}
1004323a:	b082      	sub	sp, #8
1004323c:	af00      	add	r7, sp, #0
1004323e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10043240:	4b04      	ldr	r3, [pc, #16]	@ (10043254 <LL_APB2_GRP1_ForceReset+0x1c>)
10043242:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10043244:	4b03      	ldr	r3, [pc, #12]	@ (10043254 <LL_APB2_GRP1_ForceReset+0x1c>)
10043246:	687a      	ldr	r2, [r7, #4]
10043248:	430a      	orrs	r2, r1
1004324a:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004324c:	46c0      	nop			@ (mov r8, r8)
1004324e:	46bd      	mov	sp, r7
10043250:	b002      	add	sp, #8
10043252:	bd80      	pop	{r7, pc}
10043254:	48400000 	.word	0x48400000

10043258 <LL_APB2_GRP1_ReleaseReset>:
{
10043258:	b580      	push	{r7, lr}
1004325a:	b082      	sub	sp, #8
1004325c:	af00      	add	r7, sp, #0
1004325e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10043260:	4b05      	ldr	r3, [pc, #20]	@ (10043278 <LL_APB2_GRP1_ReleaseReset+0x20>)
10043262:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10043264:	687b      	ldr	r3, [r7, #4]
10043266:	43d9      	mvns	r1, r3
10043268:	4b03      	ldr	r3, [pc, #12]	@ (10043278 <LL_APB2_GRP1_ReleaseReset+0x20>)
1004326a:	400a      	ands	r2, r1
1004326c:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004326e:	46c0      	nop			@ (mov r8, r8)
10043270:	46bd      	mov	sp, r7
10043272:	b002      	add	sp, #8
10043274:	bd80      	pop	{r7, pc}
10043276:	46c0      	nop			@ (mov r8, r8)
10043278:	48400000 	.word	0x48400000

1004327c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
1004327c:	b580      	push	{r7, lr}
1004327e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */
  lowPowerIOSetup();
10043280:	f000 f8c6 	bl	10043410 <lowPowerIOSetup>

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
10043284:	2380      	movs	r3, #128	@ 0x80
10043286:	005b      	lsls	r3, r3, #1
10043288:	0018      	movs	r0, r3
1004328a:	f7ff ff7f 	bl	1004318c <LL_APB0_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
1004328e:	46c0      	nop			@ (mov r8, r8)
10043290:	46bd      	mov	sp, r7
10043292:	bd80      	pop	{r7, pc}

10043294 <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
10043294:	b580      	push	{r7, lr}
10043296:	b082      	sub	sp, #8
10043298:	af00      	add	r7, sp, #0
1004329a:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
1004329c:	687b      	ldr	r3, [r7, #4]
1004329e:	681b      	ldr	r3, [r3, #0]
100432a0:	4a09      	ldr	r2, [pc, #36]	@ (100432c8 <HAL_PKA_MspInit+0x34>)
100432a2:	4293      	cmp	r3, r2
100432a4:	d10c      	bne.n	100432c0 <HAL_PKA_MspInit+0x2c>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
100432a6:	2380      	movs	r3, #128	@ 0x80
100432a8:	025b      	lsls	r3, r3, #9
100432aa:	0018      	movs	r0, r3
100432ac:	f7ff ff58 	bl	10043160 <LL_AHB1_GRP1_EnableClock>
    /* PKA interrupt Init */
    HAL_NVIC_SetPriority(PKA_IRQn, 1, 0);
100432b0:	2200      	movs	r2, #0
100432b2:	2101      	movs	r1, #1
100432b4:	200d      	movs	r0, #13
100432b6:	f009 fd47 	bl	1004cd48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(PKA_IRQn);
100432ba:	200d      	movs	r0, #13
100432bc:	f009 fd59 	bl	1004cd72 <HAL_NVIC_EnableIRQ>

  /* USER CODE END PKA_MspInit 1 */

  }

}
100432c0:	46c0      	nop			@ (mov r8, r8)
100432c2:	46bd      	mov	sp, r7
100432c4:	b002      	add	sp, #8
100432c6:	bd80      	pop	{r7, pc}
100432c8:	48300000 	.word	0x48300000

100432cc <HAL_RADIO_MspInit>:
* This function configures the hardware resources used in this example
* @param hradio: RADIO handle pointer
* @retval None
*/
void HAL_RADIO_MspInit(RADIO_HandleTypeDef* hradio)
{
100432cc:	b590      	push	{r4, r7, lr}
100432ce:	b089      	sub	sp, #36	@ 0x24
100432d0:	af00      	add	r7, sp, #0
100432d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
100432d4:	2408      	movs	r4, #8
100432d6:	193b      	adds	r3, r7, r4
100432d8:	0018      	movs	r0, r3
100432da:	2318      	movs	r3, #24
100432dc:	001a      	movs	r2, r3
100432de:	2100      	movs	r1, #0
100432e0:	f024 f83c 	bl	1006735c <memset>
  if(hradio->Instance==RADIO)
100432e4:	687b      	ldr	r3, [r7, #4]
100432e6:	681a      	ldr	r2, [r3, #0]
100432e8:	23c0      	movs	r3, #192	@ 0xc0
100432ea:	05db      	lsls	r3, r3, #23
100432ec:	429a      	cmp	r2, r3
100432ee:	d12d      	bne.n	1004334c <HAL_RADIO_MspInit+0x80>

  /* USER CODE END RADIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RF;
100432f0:	193b      	adds	r3, r7, r4
100432f2:	2201      	movs	r2, #1
100432f4:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RFClockSelection = RCC_RF_CLK_16M;
100432f6:	193b      	adds	r3, r7, r4
100432f8:	2204      	movs	r2, #4
100432fa:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
100432fc:	193b      	adds	r3, r7, r4
100432fe:	0018      	movs	r0, r3
10043300:	f00d fb36 	bl	10050970 <HAL_RCCEx_PeriphCLKConfig>
10043304:	1e03      	subs	r3, r0, #0
10043306:	d001      	beq.n	1004330c <HAL_RADIO_MspInit+0x40>
    {
      Error_Handler();
10043308:	f7ff fef5 	bl	100430f6 <Error_Handler>
    }

    /* Peripheral clock enable */
    if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
1004330c:	2001      	movs	r0, #1
1004330e:	f7ff ff7f 	bl	10043210 <LL_APB2_GRP1_IsEnabledClock>
10043312:	1e03      	subs	r3, r0, #0
10043314:	d108      	bne.n	10043328 <HAL_RADIO_MspInit+0x5c>
    {
      /* Radio reset */
      __HAL_RCC_RADIO_FORCE_RESET();
10043316:	2001      	movs	r0, #1
10043318:	f7ff ff8e 	bl	10043238 <LL_APB2_GRP1_ForceReset>
      __HAL_RCC_RADIO_RELEASE_RESET();
1004331c:	2001      	movs	r0, #1
1004331e:	f7ff ff9b 	bl	10043258 <LL_APB2_GRP1_ReleaseReset>

      /* Enable Radio peripheral clock */
      __HAL_RCC_RADIO_CLK_ENABLE();
10043322:	2001      	movs	r0, #1
10043324:	f7ff ff5e 	bl	100431e4 <LL_APB2_GRP1_EnableClock>
    }

    /**RADIO GPIO Configuration
    RF1     ------> RADIO_RF1
    */
    RT_DEBUG_GPIO_Init();
10043328:	f004 fd69 	bl	10047dfe <RT_DEBUG_GPIO_Init>

    /* RADIO interrupt Init */
    HAL_NVIC_SetPriority(RADIO_TXRX_IRQn, 0, 0);
1004332c:	2200      	movs	r2, #0
1004332e:	2100      	movs	r1, #0
10043330:	2012      	movs	r0, #18
10043332:	f009 fd09 	bl	1004cd48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_IRQn);
10043336:	2012      	movs	r0, #18
10043338:	f009 fd1b 	bl	1004cd72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RADIO_TXRX_SEQ_IRQn, 0, 0);
1004333c:	2200      	movs	r2, #0
1004333e:	2100      	movs	r1, #0
10043340:	2019      	movs	r0, #25
10043342:	f009 fd01 	bl	1004cd48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_SEQ_IRQn);
10043346:	2019      	movs	r0, #25
10043348:	f009 fd13 	bl	1004cd72 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RADIO_MspInit 1 */

  }

}
1004334c:	46c0      	nop			@ (mov r8, r8)
1004334e:	46bd      	mov	sp, r7
10043350:	b009      	add	sp, #36	@ 0x24
10043352:	bd90      	pop	{r4, r7, pc}

10043354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
10043354:	b590      	push	{r4, r7, lr}
10043356:	b089      	sub	sp, #36	@ 0x24
10043358:	af00      	add	r7, sp, #0
1004335a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
1004335c:	240c      	movs	r4, #12
1004335e:	193b      	adds	r3, r7, r4
10043360:	0018      	movs	r0, r3
10043362:	2314      	movs	r3, #20
10043364:	001a      	movs	r2, r3
10043366:	2100      	movs	r1, #0
10043368:	f023 fff8 	bl	1006735c <memset>
  if(huart->Instance==USART1)
1004336c:	687b      	ldr	r3, [r7, #4]
1004336e:	681b      	ldr	r3, [r3, #0]
10043370:	4a25      	ldr	r2, [pc, #148]	@ (10043408 <HAL_UART_MspInit+0xb4>)
10043372:	4293      	cmp	r3, r2
10043374:	d144      	bne.n	10043400 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
10043376:	2380      	movs	r3, #128	@ 0x80
10043378:	00db      	lsls	r3, r3, #3
1004337a:	0018      	movs	r0, r3
1004337c:	f7ff ff1c 	bl	100431b8 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
10043380:	2008      	movs	r0, #8
10043382:	f7ff feed 	bl	10043160 <LL_AHB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
10043386:	2004      	movs	r0, #4
10043388:	f7ff feea 	bl	10043160 <LL_AHB1_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB0     ------> USART1_RX
    PA1     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
1004338c:	193b      	adds	r3, r7, r4
1004338e:	2201      	movs	r2, #1
10043390:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10043392:	193b      	adds	r3, r7, r4
10043394:	2202      	movs	r2, #2
10043396:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10043398:	193b      	adds	r3, r7, r4
1004339a:	2200      	movs	r2, #0
1004339c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
1004339e:	193b      	adds	r3, r7, r4
100433a0:	2200      	movs	r2, #0
100433a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
100433a4:	193b      	adds	r3, r7, r4
100433a6:	2200      	movs	r2, #0
100433a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
100433aa:	193b      	adds	r3, r7, r4
100433ac:	4a17      	ldr	r2, [pc, #92]	@ (1004340c <HAL_UART_MspInit+0xb8>)
100433ae:	0019      	movs	r1, r3
100433b0:	0010      	movs	r0, r2
100433b2:	f009 fe55 	bl	1004d060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
100433b6:	0021      	movs	r1, r4
100433b8:	187b      	adds	r3, r7, r1
100433ba:	2202      	movs	r2, #2
100433bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100433be:	187b      	adds	r3, r7, r1
100433c0:	2202      	movs	r2, #2
100433c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100433c4:	187b      	adds	r3, r7, r1
100433c6:	2200      	movs	r2, #0
100433c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100433ca:	187b      	adds	r3, r7, r1
100433cc:	2200      	movs	r2, #0
100433ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART1;
100433d0:	187b      	adds	r3, r7, r1
100433d2:	2202      	movs	r2, #2
100433d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
100433d6:	187a      	adds	r2, r7, r1
100433d8:	2390      	movs	r3, #144	@ 0x90
100433da:	05db      	lsls	r3, r3, #23
100433dc:	0011      	movs	r1, r2
100433de:	0018      	movs	r0, r3
100433e0:	f009 fe3e 	bl	1004d060 <HAL_GPIO_Init>

    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_0);
100433e4:	2001      	movs	r0, #1
100433e6:	f7ff fea3 	bl	10043130 <LL_PWR_SetNoPullB>

    LL_PWR_SetNoPullA(LL_PWR_GPIO_BIT_1);
100433ea:	2002      	movs	r0, #2
100433ec:	f7ff fe88 	bl	10043100 <LL_PWR_SetNoPullA>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
100433f0:	2200      	movs	r2, #0
100433f2:	2101      	movs	r1, #1
100433f4:	2008      	movs	r0, #8
100433f6:	f009 fca7 	bl	1004cd48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
100433fa:	2008      	movs	r0, #8
100433fc:	f009 fcb9 	bl	1004cd72 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
10043400:	46c0      	nop			@ (mov r8, r8)
10043402:	46bd      	mov	sp, r7
10043404:	b009      	add	sp, #36	@ 0x24
10043406:	bd90      	pop	{r4, r7, pc}
10043408:	41004000 	.word	0x41004000
1004340c:	48100000 	.word	0x48100000

10043410 <lowPowerIOSetup>:
  * @brief  Configures the IOs pull resistors to have the optimized power consumption.
  * @param  None
  * @retval None
  */
static void lowPowerIOSetup(void)
{
10043410:	b580      	push	{r7, lr}
10043412:	af00      	add	r7, sp, #0
  
  HAL_PWREx_EnableGPIOPullUp(PWR_GPIO_A, 
10043414:	210f      	movs	r1, #15
10043416:	2000      	movs	r0, #0
10043418:	f00a facc 	bl	1004d9b4 <HAL_PWREx_EnableGPIOPullUp>
                       PWR_GPIO_BIT_0|
                       PWR_GPIO_BIT_1|
                       PWR_GPIO_BIT_2|                         
                       PWR_GPIO_BIT_3);
  
  HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_A, 
1004341c:	23f0      	movs	r3, #240	@ 0xf0
1004341e:	011b      	lsls	r3, r3, #4
10043420:	0019      	movs	r1, r3
10043422:	2000      	movs	r0, #0
10043424:	f00a fb00 	bl	1004da28 <HAL_PWREx_EnableGPIOPullDown>
                             PWR_GPIO_BIT_8|
                             PWR_GPIO_BIT_9|
                             PWR_GPIO_BIT_10|
                             PWR_GPIO_BIT_11);
  
  HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_B, 
10043428:	4b06      	ldr	r3, [pc, #24]	@ (10043444 <lowPowerIOSetup+0x34>)
1004342a:	0019      	movs	r1, r3
1004342c:	2001      	movs	r0, #1
1004342e:	f00a fafb 	bl	1004da28 <HAL_PWREx_EnableGPIOPullDown>
                             PWR_GPIO_BIT_6|
                             PWR_GPIO_BIT_7|
                             PWR_GPIO_BIT_12|
                             PWR_GPIO_BIT_13);
  
  HAL_PWREx_EnableGPIOPullUp(PWR_GPIO_B, 
10043432:	4b05      	ldr	r3, [pc, #20]	@ (10043448 <lowPowerIOSetup+0x38>)
10043434:	0019      	movs	r1, r3
10043436:	2001      	movs	r0, #1
10043438:	f00a fabc 	bl	1004d9b4 <HAL_PWREx_EnableGPIOPullUp>
                       PWR_GPIO_BIT_2|
                       PWR_GPIO_BIT_4|
                       PWR_GPIO_BIT_5|  
                       PWR_GPIO_BIT_14|
                       PWR_GPIO_BIT_15);
}
1004343c:	46c0      	nop			@ (mov r8, r8)
1004343e:	46bd      	mov	sp, r7
10043440:	bd80      	pop	{r7, pc}
10043442:	46c0      	nop			@ (mov r8, r8)
10043444:	000030c9 	.word	0x000030c9
10043448:	0000c036 	.word	0x0000c036

1004344c <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
1004344c:	b580      	push	{r7, lr}
1004344e:	b082      	sub	sp, #8
10043450:	af00      	add	r7, sp, #0
10043452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
10043454:	687b      	ldr	r3, [r7, #4]
10043456:	69db      	ldr	r3, [r3, #28]
10043458:	2220      	movs	r2, #32
1004345a:	4013      	ands	r3, r2
1004345c:	2b20      	cmp	r3, #32
1004345e:	d101      	bne.n	10043464 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
10043460:	2301      	movs	r3, #1
10043462:	e000      	b.n	10043466 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
10043464:	2300      	movs	r3, #0
}
10043466:	0018      	movs	r0, r3
10043468:	46bd      	mov	sp, r7
1004346a:	b002      	add	sp, #8
1004346c:	bd80      	pop	{r7, pc}

1004346e <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
1004346e:	b580      	push	{r7, lr}
10043470:	b082      	sub	sp, #8
10043472:	af00      	add	r7, sp, #0
10043474:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
10043476:	687b      	ldr	r3, [r7, #4]
10043478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004347a:	b2db      	uxtb	r3, r3
}
1004347c:	0018      	movs	r0, r3
1004347e:	46bd      	mov	sp, r7
10043480:	b002      	add	sp, #8
10043482:	bd80      	pop	{r7, pc}

10043484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10043484:	b580      	push	{r7, lr}
10043486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
10043488:	e7fe      	b.n	10043488 <NMI_Handler+0x4>

1004348a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
1004348a:	b580      	push	{r7, lr}
1004348c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
1004348e:	e7fe      	b.n	1004348e <HardFault_Handler+0x4>

10043490 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10043490:	b580      	push	{r7, lr}
10043492:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10043494:	46c0      	nop			@ (mov r8, r8)
10043496:	46bd      	mov	sp, r7
10043498:	bd80      	pop	{r7, pc}

1004349a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
1004349a:	b580      	push	{r7, lr}
1004349c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
1004349e:	46c0      	nop			@ (mov r8, r8)
100434a0:	46bd      	mov	sp, r7
100434a2:	bd80      	pop	{r7, pc}

100434a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
100434a4:	b580      	push	{r7, lr}
100434a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
100434a8:	f009 fb60 	bl	1004cb6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
100434ac:	46c0      	nop			@ (mov r8, r8)
100434ae:	46bd      	mov	sp, r7
100434b0:	bd80      	pop	{r7, pc}
	...

100434b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
100434b4:	b580      	push	{r7, lr}
100434b6:	b082      	sub	sp, #8
100434b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  uint8_t read_data; 
  
  /* If the RX FIFO is Not Empty */
  if(LL_USART_IsActiveFlag_RXNE(USART1) == 1) {
100434ba:	4b0c      	ldr	r3, [pc, #48]	@ (100434ec <USART1_IRQHandler+0x38>)
100434bc:	0018      	movs	r0, r3
100434be:	f7ff ffc5 	bl	1004344c <LL_USART_IsActiveFlag_RXNE_RXFNE>
100434c2:	0003      	movs	r3, r0
100434c4:	2b01      	cmp	r3, #1
100434c6:	d10c      	bne.n	100434e2 <USART1_IRQHandler+0x2e>
    /* Read a byte from the RX FIFO */
    read_data = LL_USART_ReceiveData8(USART1);
100434c8:	4b08      	ldr	r3, [pc, #32]	@ (100434ec <USART1_IRQHandler+0x38>)
100434ca:	0018      	movs	r0, r3
100434cc:	f7ff ffcf 	bl	1004346e <LL_USART_ReceiveData8>
100434d0:	0003      	movs	r3, r0
100434d2:	001a      	movs	r2, r3
100434d4:	1dfb      	adds	r3, r7, #7
100434d6:	701a      	strb	r2, [r3, #0]
    
    /* Send the data received to the user RX callback */
    UartRxCpltCallback(&read_data, 1);
100434d8:	1dfb      	adds	r3, r7, #7
100434da:	2101      	movs	r1, #1
100434dc:	0018      	movs	r0, r3
100434de:	f7ff fab9 	bl	10042a54 <UartRxCpltCallback>
  }
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
100434e2:	46c0      	nop			@ (mov r8, r8)
100434e4:	46bd      	mov	sp, r7
100434e6:	b002      	add	sp, #8
100434e8:	bd80      	pop	{r7, pc}
100434ea:	46c0      	nop			@ (mov r8, r8)
100434ec:	41004000 	.word	0x41004000

100434f0 <PKA_IRQHandler>:

/**
  * @brief This function handles PKA global interrupt.
  */
void PKA_IRQHandler(void)
{
100434f0:	b580      	push	{r7, lr}
100434f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PKA_IRQn 0 */

  /* USER CODE END PKA_IRQn 0 */
  HAL_PKA_IRQHandler(&hpka);
100434f4:	4b03      	ldr	r3, [pc, #12]	@ (10043504 <PKA_IRQHandler+0x14>)
100434f6:	0018      	movs	r0, r3
100434f8:	f00a f830 	bl	1004d55c <HAL_PKA_IRQHandler>
  /* USER CODE BEGIN PKA_IRQn 1 */

  /* USER CODE END PKA_IRQn 1 */
}
100434fc:	46c0      	nop			@ (mov r8, r8)
100434fe:	46bd      	mov	sp, r7
10043500:	bd80      	pop	{r7, pc}
10043502:	46c0      	nop			@ (mov r8, r8)
10043504:	2000033c 	.word	0x2000033c

10043508 <RADIO_TIMER_CPU_WKUP_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_CPU_WKUP global interrupt.
  */
void RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
10043508:	b580      	push	{r7, lr}
1004350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 0 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 0 */
  HAL_RADIO_TIMER_CPU_WKUP_IRQHandler();
1004350c:	f00c fd5a 	bl	1004ffc4 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 1 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 1 */
}
10043510:	46c0      	nop			@ (mov r8, r8)
10043512:	46bd      	mov	sp, r7
10043514:	bd80      	pop	{r7, pc}

10043516 <RADIO_TIMER_ERROR_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_ERROR global interrupt.
  */
void RADIO_TIMER_ERROR_IRQHandler(void)
{
10043516:	b580      	push	{r7, lr}
10043518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 0 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 0 */
  HAL_RADIO_TIMER_ERROR_IRQHandler();
1004351a:	f00c fd5c 	bl	1004ffd6 <HAL_RADIO_TIMER_ERROR_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 1 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 1 */
}
1004351e:	46c0      	nop			@ (mov r8, r8)
10043520:	46bd      	mov	sp, r7
10043522:	bd80      	pop	{r7, pc}

10043524 <RADIO_TXRX_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX global interrupt.
  */
void RADIO_TXRX_IRQHandler(void)
{
10043524:	b580      	push	{r7, lr}
10043526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_IRQn 0 */

  /* USER CODE END RADIO_TXRX_IRQn 0 */
  HAL_RADIO_TXRX_IRQHandler();
10043528:	f00a fff6 	bl	1004e518 <HAL_RADIO_TXRX_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_IRQn 1 */

  /* USER CODE END RADIO_TXRX_IRQn 1 */
}
1004352c:	46c0      	nop			@ (mov r8, r8)
1004352e:	46bd      	mov	sp, r7
10043530:	bd80      	pop	{r7, pc}

10043532 <RADIO_TXRX_SEQ_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX_SEQ global interrupt.
  */
void RADIO_TXRX_SEQ_IRQHandler(void)
{
10043532:	b580      	push	{r7, lr}
10043534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 0 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 0 */
  HAL_RADIO_TXRX_SEQ_IRQHandler();
10043536:	f00b f810 	bl	1004e55a <HAL_RADIO_TXRX_SEQ_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 1 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 1 */
}
1004353a:	46c0      	nop			@ (mov r8, r8)
1004353c:	46bd      	mov	sp, r7
1004353e:	bd80      	pop	{r7, pc}

10043540 <GPIOA_IRQHandler>:

/* USER CODE BEGIN 1 */
void GPIOA_IRQHandler(void)
{
10043540:	b580      	push	{r7, lr}
10043542:	af00      	add	r7, sp, #0
  BSP_PB_IRQHandler(B1_GPIO_PORT, B1_PIN);
10043544:	2390      	movs	r3, #144	@ 0x90
10043546:	05db      	lsls	r3, r3, #23
10043548:	2101      	movs	r1, #1
1004354a:	0018      	movs	r0, r3
1004354c:	f009 f834 	bl	1004c5b8 <BSP_PB_IRQHandler>
  BSP_PB_IRQHandler(B4_GPIO_PORT, B4_PIN);
10043550:	2380      	movs	r3, #128	@ 0x80
10043552:	009a      	lsls	r2, r3, #2
10043554:	2390      	movs	r3, #144	@ 0x90
10043556:	05db      	lsls	r3, r3, #23
10043558:	0011      	movs	r1, r2
1004355a:	0018      	movs	r0, r3
1004355c:	f009 f82c 	bl	1004c5b8 <BSP_PB_IRQHandler>
}
10043560:	46c0      	nop			@ (mov r8, r8)
10043562:	46bd      	mov	sp, r7
10043564:	bd80      	pop	{r7, pc}
	...

10043568 <GPIOB_IRQHandler>:

void GPIOB_IRQHandler(void)
{
10043568:	b580      	push	{r7, lr}
1004356a:	af00      	add	r7, sp, #0
  BSP_PB_IRQHandler(B2_GPIO_PORT, B2_PIN);
1004356c:	4b07      	ldr	r3, [pc, #28]	@ (1004358c <GPIOB_IRQHandler+0x24>)
1004356e:	2120      	movs	r1, #32
10043570:	0018      	movs	r0, r3
10043572:	f009 f821 	bl	1004c5b8 <BSP_PB_IRQHandler>
  BSP_PB_IRQHandler(B3_GPIO_PORT, B3_PIN);
10043576:	2380      	movs	r3, #128	@ 0x80
10043578:	01db      	lsls	r3, r3, #7
1004357a:	4a04      	ldr	r2, [pc, #16]	@ (1004358c <GPIOB_IRQHandler+0x24>)
1004357c:	0019      	movs	r1, r3
1004357e:	0010      	movs	r0, r2
10043580:	f009 f81a 	bl	1004c5b8 <BSP_PB_IRQHandler>
}
10043584:	46c0      	nop			@ (mov r8, r8)
10043586:	46bd      	mov	sp, r7
10043588:	bd80      	pop	{r7, pc}
1004358a:	46c0      	nop			@ (mov r8, r8)
1004358c:	48100000 	.word	0x48100000

10043590 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
10043590:	b580      	push	{r7, lr}
10043592:	b086      	sub	sp, #24
10043594:	af00      	add	r7, sp, #0
10043596:	60f8      	str	r0, [r7, #12]
10043598:	60b9      	str	r1, [r7, #8]
1004359a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
1004359c:	2300      	movs	r3, #0
1004359e:	617b      	str	r3, [r7, #20]
100435a0:	e00a      	b.n	100435b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
100435a2:	e000      	b.n	100435a6 <_read+0x16>
100435a4:	bf00      	nop
100435a6:	0001      	movs	r1, r0
100435a8:	68bb      	ldr	r3, [r7, #8]
100435aa:	1c5a      	adds	r2, r3, #1
100435ac:	60ba      	str	r2, [r7, #8]
100435ae:	b2ca      	uxtb	r2, r1
100435b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
100435b2:	697b      	ldr	r3, [r7, #20]
100435b4:	3301      	adds	r3, #1
100435b6:	617b      	str	r3, [r7, #20]
100435b8:	697a      	ldr	r2, [r7, #20]
100435ba:	687b      	ldr	r3, [r7, #4]
100435bc:	429a      	cmp	r2, r3
100435be:	dbf0      	blt.n	100435a2 <_read+0x12>
  }

  return len;
100435c0:	687b      	ldr	r3, [r7, #4]
}
100435c2:	0018      	movs	r0, r3
100435c4:	46bd      	mov	sp, r7
100435c6:	b006      	add	sp, #24
100435c8:	bd80      	pop	{r7, pc}

100435ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
100435ca:	b580      	push	{r7, lr}
100435cc:	b086      	sub	sp, #24
100435ce:	af00      	add	r7, sp, #0
100435d0:	60f8      	str	r0, [r7, #12]
100435d2:	60b9      	str	r1, [r7, #8]
100435d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
100435d6:	2300      	movs	r3, #0
100435d8:	617b      	str	r3, [r7, #20]
100435da:	e009      	b.n	100435f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
100435dc:	68bb      	ldr	r3, [r7, #8]
100435de:	1c5a      	adds	r2, r3, #1
100435e0:	60ba      	str	r2, [r7, #8]
100435e2:	781b      	ldrb	r3, [r3, #0]
100435e4:	0018      	movs	r0, r3
100435e6:	f009 f839 	bl	1004c65c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
100435ea:	697b      	ldr	r3, [r7, #20]
100435ec:	3301      	adds	r3, #1
100435ee:	617b      	str	r3, [r7, #20]
100435f0:	697a      	ldr	r2, [r7, #20]
100435f2:	687b      	ldr	r3, [r7, #4]
100435f4:	429a      	cmp	r2, r3
100435f6:	dbf1      	blt.n	100435dc <_write+0x12>
  }
  return len;
100435f8:	687b      	ldr	r3, [r7, #4]
}
100435fa:	0018      	movs	r0, r3
100435fc:	46bd      	mov	sp, r7
100435fe:	b006      	add	sp, #24
10043600:	bd80      	pop	{r7, pc}

10043602 <_close>:

int _close(int file)
{
10043602:	b580      	push	{r7, lr}
10043604:	b082      	sub	sp, #8
10043606:	af00      	add	r7, sp, #0
10043608:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
1004360a:	2301      	movs	r3, #1
1004360c:	425b      	negs	r3, r3
}
1004360e:	0018      	movs	r0, r3
10043610:	46bd      	mov	sp, r7
10043612:	b002      	add	sp, #8
10043614:	bd80      	pop	{r7, pc}

10043616 <_fstat>:


int _fstat(int file, struct stat *st)
{
10043616:	b580      	push	{r7, lr}
10043618:	b082      	sub	sp, #8
1004361a:	af00      	add	r7, sp, #0
1004361c:	6078      	str	r0, [r7, #4]
1004361e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
10043620:	683b      	ldr	r3, [r7, #0]
10043622:	2280      	movs	r2, #128	@ 0x80
10043624:	0192      	lsls	r2, r2, #6
10043626:	605a      	str	r2, [r3, #4]
  return 0;
10043628:	2300      	movs	r3, #0
}
1004362a:	0018      	movs	r0, r3
1004362c:	46bd      	mov	sp, r7
1004362e:	b002      	add	sp, #8
10043630:	bd80      	pop	{r7, pc}

10043632 <_isatty>:

int _isatty(int file)
{
10043632:	b580      	push	{r7, lr}
10043634:	b082      	sub	sp, #8
10043636:	af00      	add	r7, sp, #0
10043638:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
1004363a:	2301      	movs	r3, #1
}
1004363c:	0018      	movs	r0, r3
1004363e:	46bd      	mov	sp, r7
10043640:	b002      	add	sp, #8
10043642:	bd80      	pop	{r7, pc}

10043644 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
10043644:	b580      	push	{r7, lr}
10043646:	b084      	sub	sp, #16
10043648:	af00      	add	r7, sp, #0
1004364a:	60f8      	str	r0, [r7, #12]
1004364c:	60b9      	str	r1, [r7, #8]
1004364e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
10043650:	2300      	movs	r3, #0
}
10043652:	0018      	movs	r0, r3
10043654:	46bd      	mov	sp, r7
10043656:	b004      	add	sp, #16
10043658:	bd80      	pop	{r7, pc}
	...

1004365c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
1004365c:	b580      	push	{r7, lr}
1004365e:	b086      	sub	sp, #24
10043660:	af00      	add	r7, sp, #0
10043662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
10043664:	4a14      	ldr	r2, [pc, #80]	@ (100436b8 <_sbrk+0x5c>)
10043666:	4b15      	ldr	r3, [pc, #84]	@ (100436bc <_sbrk+0x60>)
10043668:	1ad3      	subs	r3, r2, r3
1004366a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
1004366c:	697b      	ldr	r3, [r7, #20]
1004366e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10043670:	4b13      	ldr	r3, [pc, #76]	@ (100436c0 <_sbrk+0x64>)
10043672:	681b      	ldr	r3, [r3, #0]
10043674:	2b00      	cmp	r3, #0
10043676:	d102      	bne.n	1004367e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
10043678:	4b11      	ldr	r3, [pc, #68]	@ (100436c0 <_sbrk+0x64>)
1004367a:	4a12      	ldr	r2, [pc, #72]	@ (100436c4 <_sbrk+0x68>)
1004367c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
1004367e:	4b10      	ldr	r3, [pc, #64]	@ (100436c0 <_sbrk+0x64>)
10043680:	681a      	ldr	r2, [r3, #0]
10043682:	687b      	ldr	r3, [r7, #4]
10043684:	18d3      	adds	r3, r2, r3
10043686:	693a      	ldr	r2, [r7, #16]
10043688:	429a      	cmp	r2, r3
1004368a:	d207      	bcs.n	1004369c <_sbrk+0x40>
  {
    errno = ENOMEM;
1004368c:	f023 febc 	bl	10067408 <__errno>
10043690:	0003      	movs	r3, r0
10043692:	220c      	movs	r2, #12
10043694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
10043696:	2301      	movs	r3, #1
10043698:	425b      	negs	r3, r3
1004369a:	e009      	b.n	100436b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
1004369c:	4b08      	ldr	r3, [pc, #32]	@ (100436c0 <_sbrk+0x64>)
1004369e:	681b      	ldr	r3, [r3, #0]
100436a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
100436a2:	4b07      	ldr	r3, [pc, #28]	@ (100436c0 <_sbrk+0x64>)
100436a4:	681a      	ldr	r2, [r3, #0]
100436a6:	687b      	ldr	r3, [r7, #4]
100436a8:	18d2      	adds	r2, r2, r3
100436aa:	4b05      	ldr	r3, [pc, #20]	@ (100436c0 <_sbrk+0x64>)
100436ac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
100436ae:	68fb      	ldr	r3, [r7, #12]
}
100436b0:	0018      	movs	r0, r3
100436b2:	46bd      	mov	sp, r7
100436b4:	b006      	add	sp, #24
100436b6:	bd80      	pop	{r7, pc}
100436b8:	20010000 	.word	0x20010000
100436bc:	00000c00 	.word	0x00000c00
100436c0:	20000348 	.word	0x20000348
100436c4:	20003b18 	.word	0x20003b18

100436c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
100436c8:	b580      	push	{r7, lr}
100436ca:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
100436cc:	f3bf 8f4f 	dsb	sy
}
100436d0:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
100436d2:	4b04      	ldr	r3, [pc, #16]	@ (100436e4 <__NVIC_SystemReset+0x1c>)
100436d4:	4a04      	ldr	r2, [pc, #16]	@ (100436e8 <__NVIC_SystemReset+0x20>)
100436d6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
100436d8:	f3bf 8f4f 	dsb	sy
}
100436dc:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
100436de:	46c0      	nop			@ (mov r8, r8)
100436e0:	e7fd      	b.n	100436de <__NVIC_SystemReset+0x16>
100436e2:	46c0      	nop			@ (mov r8, r8)
100436e4:	e000ed00 	.word	0xe000ed00
100436e8:	05fa0004 	.word	0x05fa0004

100436ec <ModulesInit>:

/* USER CODE END PF */

/* Functions Definition ------------------------------------------------------*/
void ModulesInit(void)
{
100436ec:	b580      	push	{r7, lr}
100436ee:	af00      	add	r7, sp, #0
  BLENVM_Init();
100436f0:	f002 fb80 	bl	10045df4 <BLENVM_Init>
  if (PKAMGR_Init() == PKAMGR_ERROR)
100436f4:	f007 fc6a 	bl	1004afcc <PKAMGR_Init>
100436f8:	0003      	movs	r3, r0
100436fa:	3301      	adds	r3, #1
100436fc:	d101      	bne.n	10043702 <ModulesInit+0x16>
  {
    Error_Handler();
100436fe:	f7ff fcfa 	bl	100430f6 <Error_Handler>
  }
}
10043702:	46c0      	nop			@ (mov r8, r8)
10043704:	46bd      	mov	sp, r7
10043706:	bd80      	pop	{r7, pc}

10043708 <BLE_Init>:

void BLE_Init(void)
{
10043708:	b5f0      	push	{r4, r5, r6, r7, lr}
1004370a:	b099      	sub	sp, #100	@ 0x64
1004370c:	af04      	add	r7, sp, #16
  uint8_t role;
  uint8_t privacy_type = 0;
1004370e:	234f      	movs	r3, #79	@ 0x4f
10043710:	18fb      	adds	r3, r7, r3
10043712:	2200      	movs	r2, #0
10043714:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gatt_service_changed_handle;
  uint16_t gap_dev_name_char_handle;
  uint16_t gap_appearance_char_handle;
  uint16_t gap_periph_pref_conn_param_char_handle;
  uint8_t bd_address[6] = {0};
10043716:	233c      	movs	r3, #60	@ 0x3c
10043718:	18fb      	adds	r3, r7, r3
1004371a:	2200      	movs	r2, #0
1004371c:	601a      	str	r2, [r3, #0]
1004371e:	2200      	movs	r2, #0
10043720:	809a      	strh	r2, [r3, #4]
  uint8_t bd_address_len= 6;
10043722:	233b      	movs	r3, #59	@ 0x3b
10043724:	18fb      	adds	r3, r7, r3
10043726:	2206      	movs	r2, #6
10043728:	701a      	strb	r2, [r3, #0]
  uint16_t appearance = CFG_GAP_APPEARANCE;
1004372a:	2338      	movs	r3, #56	@ 0x38
1004372c:	18fb      	adds	r3, r7, r3
1004372e:	2200      	movs	r2, #0
10043730:	801a      	strh	r2, [r3, #0]

  BLE_STACK_InitTypeDef BLE_STACK_InitParams = {
10043732:	1d3a      	adds	r2, r7, #4
10043734:	4bb9      	ldr	r3, [pc, #740]	@ (10043a1c <BLE_Init+0x314>)
10043736:	0010      	movs	r0, r2
10043738:	0019      	movs	r1, r3
1004373a:	2334      	movs	r3, #52	@ 0x34
1004373c:	001a      	movs	r2, r3
1004373e:	f023 fe75 	bl	1006742c <memcpy>
    .isr1_fifo_size = CFG_BLE_ISR1_FIFO_SIZE,
    .user_fifo_size = CFG_BLE_USER_FIFO_SIZE
  };

  /* Bluetooth LE stack init */
  ret = BLE_STACK_Init(&BLE_STACK_InitParams);
10043742:	254e      	movs	r5, #78	@ 0x4e
10043744:	197c      	adds	r4, r7, r5
10043746:	1d3b      	adds	r3, r7, #4
10043748:	0018      	movs	r0, r3
1004374a:	f00f fba9 	bl	10052ea0 <BLE_STACK_Init>
1004374e:	0003      	movs	r3, r0
10043750:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS) {
10043752:	197b      	adds	r3, r7, r5
10043754:	781b      	ldrb	r3, [r3, #0]
10043756:	2b00      	cmp	r3, #0
10043758:	d008      	beq.n	1004376c <BLE_Init+0x64>
    APP_DBG_MSG("Error in BLE_STACK_Init() 0x%02x\r\n", ret);
1004375a:	197b      	adds	r3, r7, r5
1004375c:	781a      	ldrb	r2, [r3, #0]
1004375e:	4bb0      	ldr	r3, [pc, #704]	@ (10043a20 <BLE_Init+0x318>)
10043760:	0011      	movs	r1, r2
10043762:	0018      	movs	r0, r3
10043764:	f023 fbd0 	bl	10066f08 <iprintf>
    Error_Handler();
10043768:	f7ff fcc5 	bl	100430f6 <Error_Handler>
#endif

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(0, CFG_TX_POWER);
1004376c:	254e      	movs	r5, #78	@ 0x4e
1004376e:	197c      	adds	r4, r7, r5
10043770:	2118      	movs	r1, #24
10043772:	2000      	movs	r0, #0
10043774:	f00f f87e 	bl	10052874 <aci_hal_set_tx_power_level>
10043778:	0003      	movs	r3, r0
1004377a:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004377c:	002a      	movs	r2, r5
1004377e:	18bb      	adds	r3, r7, r2
10043780:	781b      	ldrb	r3, [r3, #0]
10043782:	2b00      	cmp	r3, #0
10043784:	d007      	beq.n	10043796 <BLE_Init+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%02X\n", ret);
10043786:	18bb      	adds	r3, r7, r2
10043788:	781a      	ldrb	r2, [r3, #0]
1004378a:	4ba6      	ldr	r3, [pc, #664]	@ (10043a24 <BLE_Init+0x31c>)
1004378c:	0011      	movs	r1, r2
1004378e:	0018      	movs	r0, r3
10043790:	f023 fbba 	bl	10066f08 <iprintf>
10043794:	e003      	b.n	1004379e <BLE_Init+0x96>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
10043796:	4ba4      	ldr	r3, [pc, #656]	@ (10043a28 <BLE_Init+0x320>)
10043798:	0018      	movs	r0, r3
1004379a:	f023 fc25 	bl	10066fe8 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_srv_profile_init(GATT_INIT_SERVICE_CHANGED_BIT, &gatt_service_changed_handle);
1004379e:	254e      	movs	r5, #78	@ 0x4e
100437a0:	197c      	adds	r4, r7, r5
100437a2:	234a      	movs	r3, #74	@ 0x4a
100437a4:	18fb      	adds	r3, r7, r3
100437a6:	0019      	movs	r1, r3
100437a8:	2001      	movs	r0, #1
100437aa:	f007 fdf5 	bl	1004b398 <aci_gatt_srv_profile_init>
100437ae:	0003      	movs	r3, r0
100437b0:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
100437b2:	197b      	adds	r3, r7, r5
100437b4:	781b      	ldrb	r3, [r3, #0]
100437b6:	2b00      	cmp	r3, #0
100437b8:	d007      	beq.n	100437ca <BLE_Init+0xc2>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_srv_profile_init command, result: 0x%02X\n", ret);
100437ba:	197b      	adds	r3, r7, r5
100437bc:	781a      	ldrb	r2, [r3, #0]
100437be:	4b9b      	ldr	r3, [pc, #620]	@ (10043a2c <BLE_Init+0x324>)
100437c0:	0011      	movs	r1, r2
100437c2:	0018      	movs	r0, r3
100437c4:	f023 fba0 	bl	10066f08 <iprintf>
100437c8:	e003      	b.n	100437d2 <BLE_Init+0xca>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_srv_profile_init command\n");
100437ca:	4b99      	ldr	r3, [pc, #612]	@ (10043a30 <BLE_Init+0x328>)
100437cc:	0018      	movs	r0, r3
100437ce:	f023 fc0b 	bl	10066fe8 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0U;
100437d2:	214d      	movs	r1, #77	@ 0x4d
100437d4:	187b      	adds	r3, r7, r1
100437d6:	2200      	movs	r2, #0
100437d8:	701a      	strb	r2, [r3, #0]
  role |= GAP_PERIPHERAL_ROLE;
100437da:	187b      	adds	r3, r7, r1
100437dc:	187a      	adds	r2, r7, r1
100437de:	7812      	ldrb	r2, [r2, #0]
100437e0:	2101      	movs	r1, #1
100437e2:	430a      	orrs	r2, r1
100437e4:	701a      	strb	r2, [r3, #0]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  ret = aci_gap_init(privacy_type, CFG_BD_ADDRESS_TYPE);
100437e6:	254e      	movs	r5, #78	@ 0x4e
100437e8:	197c      	adds	r4, r7, r5
100437ea:	234f      	movs	r3, #79	@ 0x4f
100437ec:	18fb      	adds	r3, r7, r3
100437ee:	781b      	ldrb	r3, [r3, #0]
100437f0:	2101      	movs	r1, #1
100437f2:	0018      	movs	r0, r3
100437f4:	f00e fe90 	bl	10052518 <aci_gap_init>
100437f8:	0003      	movs	r3, r0
100437fa:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
100437fc:	197b      	adds	r3, r7, r5
100437fe:	781b      	ldrb	r3, [r3, #0]
10043800:	2b00      	cmp	r3, #0
10043802:	d007      	beq.n	10043814 <BLE_Init+0x10c>
  {
    APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%02X\n", ret);
10043804:	197b      	adds	r3, r7, r5
10043806:	781a      	ldrb	r2, [r3, #0]
10043808:	4b8a      	ldr	r3, [pc, #552]	@ (10043a34 <BLE_Init+0x32c>)
1004380a:	0011      	movs	r1, r2
1004380c:	0018      	movs	r0, r3
1004380e:	f023 fb7b 	bl	10066f08 <iprintf>
10043812:	e003      	b.n	1004381c <BLE_Init+0x114>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_init command\n");
10043814:	4b88      	ldr	r3, [pc, #544]	@ (10043a38 <BLE_Init+0x330>)
10043816:	0018      	movs	r0, r3
10043818:	f023 fbe6 	bl	10066fe8 <puts>
  }

  ret = aci_gap_profile_init(role, privacy_type,
1004381c:	264e      	movs	r6, #78	@ 0x4e
1004381e:	19bc      	adds	r4, r7, r6
10043820:	2346      	movs	r3, #70	@ 0x46
10043822:	18fd      	adds	r5, r7, r3
10043824:	2348      	movs	r3, #72	@ 0x48
10043826:	18fa      	adds	r2, r7, r3
10043828:	234f      	movs	r3, #79	@ 0x4f
1004382a:	18fb      	adds	r3, r7, r3
1004382c:	7819      	ldrb	r1, [r3, #0]
1004382e:	234d      	movs	r3, #77	@ 0x4d
10043830:	18fb      	adds	r3, r7, r3
10043832:	7818      	ldrb	r0, [r3, #0]
10043834:	2344      	movs	r3, #68	@ 0x44
10043836:	18fb      	adds	r3, r7, r3
10043838:	9300      	str	r3, [sp, #0]
1004383a:	002b      	movs	r3, r5
1004383c:	f007 fc54 	bl	1004b0e8 <aci_gap_profile_init>
10043840:	0003      	movs	r3, r0
10043842:	7023      	strb	r3, [r4, #0]
                             &gap_dev_name_char_handle,
                             &gap_appearance_char_handle,
                             &gap_periph_pref_conn_param_char_handle);

#if (CFG_BD_ADDRESS_TYPE == HCI_ADDR_STATIC_RANDOM_ADDR)
  ret = aci_hal_read_config_data(CONFIG_DATA_STORED_STATIC_RANDOM_ADDRESS,
10043844:	19bc      	adds	r4, r7, r6
10043846:	253c      	movs	r5, #60	@ 0x3c
10043848:	197a      	adds	r2, r7, r5
1004384a:	233b      	movs	r3, #59	@ 0x3b
1004384c:	18fb      	adds	r3, r7, r3
1004384e:	0019      	movs	r1, r3
10043850:	2080      	movs	r0, #128	@ 0x80
10043852:	f00f f80b 	bl	1005286c <aci_hal_read_config_data>
10043856:	0003      	movs	r3, r0
10043858:	7023      	strb	r3, [r4, #0]
                                 &bd_address_len, bd_address);
  APP_DBG_MSG("  Static Random Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",bd_address[5],bd_address[4],bd_address[3],bd_address[2],bd_address[1],bd_address[0]);
1004385a:	0028      	movs	r0, r5
1004385c:	183b      	adds	r3, r7, r0
1004385e:	795b      	ldrb	r3, [r3, #5]
10043860:	001c      	movs	r4, r3
10043862:	183b      	adds	r3, r7, r0
10043864:	791b      	ldrb	r3, [r3, #4]
10043866:	001d      	movs	r5, r3
10043868:	183b      	adds	r3, r7, r0
1004386a:	78db      	ldrb	r3, [r3, #3]
1004386c:	001e      	movs	r6, r3
1004386e:	183b      	adds	r3, r7, r0
10043870:	789b      	ldrb	r3, [r3, #2]
10043872:	001a      	movs	r2, r3
10043874:	183b      	adds	r3, r7, r0
10043876:	785b      	ldrb	r3, [r3, #1]
10043878:	0019      	movs	r1, r3
1004387a:	183b      	adds	r3, r7, r0
1004387c:	781b      	ldrb	r3, [r3, #0]
1004387e:	486f      	ldr	r0, [pc, #444]	@ (10043a3c <BLE_Init+0x334>)
10043880:	9302      	str	r3, [sp, #8]
10043882:	9101      	str	r1, [sp, #4]
10043884:	9200      	str	r2, [sp, #0]
10043886:	0033      	movs	r3, r6
10043888:	002a      	movs	r2, r5
1004388a:	0021      	movs	r1, r4
1004388c:	f023 fb3c 	bl	10066f08 <iprintf>
  APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",bd_address[5],bd_address[4],bd_address[3],bd_address[2],bd_address[1],bd_address[0]);
#else
#error "Invalid CFG_BD_ADDRESS_TYPE"
#endif

  ret = Gap_profile_set_dev_name(0, sizeof(a_GapDeviceName), (uint8_t*)a_GapDeviceName);
10043890:	264e      	movs	r6, #78	@ 0x4e
10043892:	19bc      	adds	r4, r7, r6
10043894:	4b6a      	ldr	r3, [pc, #424]	@ (10043a40 <BLE_Init+0x338>)
10043896:	001a      	movs	r2, r3
10043898:	2113      	movs	r1, #19
1004389a:	2000      	movs	r0, #0
1004389c:	f007 fc96 	bl	1004b1cc <Gap_profile_set_dev_name>
100438a0:	0003      	movs	r3, r0
100438a2:	7023      	strb	r3, [r4, #0]

  if (ret != BLE_STATUS_SUCCESS)
100438a4:	19bb      	adds	r3, r7, r6
100438a6:	781b      	ldrb	r3, [r3, #0]
100438a8:	2b00      	cmp	r3, #0
100438aa:	d007      	beq.n	100438bc <BLE_Init+0x1b4>
  {
    APP_DBG_MSG("  Fail   : Gap_profile_set_dev_name - Device Name, result: 0x%02X\n", ret);
100438ac:	19bb      	adds	r3, r7, r6
100438ae:	781a      	ldrb	r2, [r3, #0]
100438b0:	4b64      	ldr	r3, [pc, #400]	@ (10043a44 <BLE_Init+0x33c>)
100438b2:	0011      	movs	r1, r2
100438b4:	0018      	movs	r0, r3
100438b6:	f023 fb27 	bl	10066f08 <iprintf>
100438ba:	e003      	b.n	100438c4 <BLE_Init+0x1bc>
  }
  else
  {
    APP_DBG_MSG("  Success: Gap_profile_set_dev_name - Device Name\n");
100438bc:	4b62      	ldr	r3, [pc, #392]	@ (10043a48 <BLE_Init+0x340>)
100438be:	0018      	movs	r0, r3
100438c0:	f023 fb92 	bl	10066fe8 <puts>
  }

  ret = Gap_profile_set_appearance(0, sizeof(appearance), (uint8_t*)&appearance);
100438c4:	254e      	movs	r5, #78	@ 0x4e
100438c6:	197c      	adds	r4, r7, r5
100438c8:	2338      	movs	r3, #56	@ 0x38
100438ca:	18fb      	adds	r3, r7, r3
100438cc:	001a      	movs	r2, r3
100438ce:	2102      	movs	r1, #2
100438d0:	2000      	movs	r0, #0
100438d2:	f007 fca1 	bl	1004b218 <Gap_profile_set_appearance>
100438d6:	0003      	movs	r3, r0
100438d8:	7023      	strb	r3, [r4, #0]

  if (ret != BLE_STATUS_SUCCESS)
100438da:	197b      	adds	r3, r7, r5
100438dc:	781b      	ldrb	r3, [r3, #0]
100438de:	2b00      	cmp	r3, #0
100438e0:	d007      	beq.n	100438f2 <BLE_Init+0x1ea>
  {
    APP_DBG_MSG("  Fail   : Gap_profile_set_appearance - Appearance, result: 0x%02X\n", ret);
100438e2:	197b      	adds	r3, r7, r5
100438e4:	781a      	ldrb	r2, [r3, #0]
100438e6:	4b59      	ldr	r3, [pc, #356]	@ (10043a4c <BLE_Init+0x344>)
100438e8:	0011      	movs	r1, r2
100438ea:	0018      	movs	r0, r3
100438ec:	f023 fb0c 	bl	10066f08 <iprintf>
100438f0:	e003      	b.n	100438fa <BLE_Init+0x1f2>
  }
  else
  {
    APP_DBG_MSG("  Success: Gap_profile_set_appearance - Appearance\n");
100438f2:	4b57      	ldr	r3, [pc, #348]	@ (10043a50 <BLE_Init+0x348>)
100438f4:	0018      	movs	r0, r3
100438f6:	f023 fb77 	bl	10066fe8 <puts>
  }

#if CFG_BLE_CONTROLLER_2M_CODED_PHY_ENABLED
  /* Initialize Default PHY */
  ret = hci_le_set_default_phy(0x00, HCI_TX_PHYS_LE_2M_PREF, HCI_RX_PHYS_LE_2M_PREF);
100438fa:	254e      	movs	r5, #78	@ 0x4e
100438fc:	197c      	adds	r4, r7, r5
100438fe:	2202      	movs	r2, #2
10043900:	2102      	movs	r1, #2
10043902:	2000      	movs	r0, #0
10043904:	f00e faee 	bl	10051ee4 <hci_le_set_default_phy>
10043908:	0003      	movs	r3, r0
1004390a:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004390c:	002a      	movs	r2, r5
1004390e:	18bb      	adds	r3, r7, r2
10043910:	781b      	ldrb	r3, [r3, #0]
10043912:	2b00      	cmp	r3, #0
10043914:	d007      	beq.n	10043926 <BLE_Init+0x21e>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%02X\n", ret);
10043916:	18bb      	adds	r3, r7, r2
10043918:	781a      	ldrb	r2, [r3, #0]
1004391a:	4b4e      	ldr	r3, [pc, #312]	@ (10043a54 <BLE_Init+0x34c>)
1004391c:	0011      	movs	r1, r2
1004391e:	0018      	movs	r0, r3
10043920:	f023 faf2 	bl	10066f08 <iprintf>
10043924:	e003      	b.n	1004392e <BLE_Init+0x226>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
10043926:	4b4c      	ldr	r3, [pc, #304]	@ (10043a58 <BLE_Init+0x350>)
10043928:	0018      	movs	r0, r3
1004392a:	f023 fb5d 	bl	10066fe8 <puts>

#endif
  /**
   * Initialize IO capability
   */
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
1004392e:	4b4b      	ldr	r3, [pc, #300]	@ (10043a5c <BLE_Init+0x354>)
10043930:	2201      	movs	r2, #1
10043932:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
10043934:	4b49      	ldr	r3, [pc, #292]	@ (10043a5c <BLE_Init+0x354>)
10043936:	781b      	ldrb	r3, [r3, #0]
10043938:	254e      	movs	r5, #78	@ 0x4e
1004393a:	197c      	adds	r4, r7, r5
1004393c:	0018      	movs	r0, r3
1004393e:	f00e f973 	bl	10051c28 <aci_gap_set_io_capability>
10043942:	0003      	movs	r3, r0
10043944:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
10043946:	197b      	adds	r3, r7, r5
10043948:	781b      	ldrb	r3, [r3, #0]
1004394a:	2b00      	cmp	r3, #0
1004394c:	d007      	beq.n	1004395e <BLE_Init+0x256>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%02X\n", ret);
1004394e:	197b      	adds	r3, r7, r5
10043950:	781a      	ldrb	r2, [r3, #0]
10043952:	4b43      	ldr	r3, [pc, #268]	@ (10043a60 <BLE_Init+0x358>)
10043954:	0011      	movs	r1, r2
10043956:	0018      	movs	r0, r3
10043958:	f023 fad6 	bl	10066f08 <iprintf>
1004395c:	e003      	b.n	10043966 <BLE_Init+0x25e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
1004395e:	4b41      	ldr	r3, [pc, #260]	@ (10043a64 <BLE_Init+0x35c>)
10043960:	0018      	movs	r0, r3
10043962:	f023 fb41 	bl	10066fe8 <puts>
  }

  /**
   * Initialize authentication
   */
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode             = CFG_MITM_PROTECTION;
10043966:	4b3d      	ldr	r3, [pc, #244]	@ (10043a5c <BLE_Init+0x354>)
10043968:	2201      	movs	r2, #1
1004396a:	705a      	strb	r2, [r3, #1]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin  = CFG_ENCRYPTION_KEY_SIZE_MIN;
1004396c:	4b3b      	ldr	r3, [pc, #236]	@ (10043a5c <BLE_Init+0x354>)
1004396e:	2208      	movs	r2, #8
10043970:	70da      	strb	r2, [r3, #3]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax  = CFG_ENCRYPTION_KEY_SIZE_MAX;
10043972:	4b3a      	ldr	r3, [pc, #232]	@ (10043a5c <BLE_Init+0x354>)
10043974:	2210      	movs	r2, #16
10043976:	711a      	strb	r2, [r3, #4]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode          = CFG_BONDING_MODE;
10043978:	4b38      	ldr	r3, [pc, #224]	@ (10043a5c <BLE_Init+0x354>)
1004397a:	2201      	movs	r2, #1
1004397c:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/
  fill_advData(&a_AdvData[0], sizeof(a_AdvData), bd_address);
1004397e:	233c      	movs	r3, #60	@ 0x3c
10043980:	18fa      	adds	r2, r7, r3
10043982:	4b39      	ldr	r3, [pc, #228]	@ (10043a68 <BLE_Init+0x360>)
10043984:	211c      	movs	r1, #28
10043986:	0018      	movs	r0, r3
10043988:	f001 f836 	bl	100449f8 <fill_advData>
  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/
  ret = aci_gap_set_security_requirements(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
1004398c:	4b33      	ldr	r3, [pc, #204]	@ (10043a5c <BLE_Init+0x354>)
1004398e:	7898      	ldrb	r0, [r3, #2]
10043990:	4b32      	ldr	r3, [pc, #200]	@ (10043a5c <BLE_Init+0x354>)
10043992:	7859      	ldrb	r1, [r3, #1]
10043994:	4b31      	ldr	r3, [pc, #196]	@ (10043a5c <BLE_Init+0x354>)
10043996:	78db      	ldrb	r3, [r3, #3]
10043998:	4a30      	ldr	r2, [pc, #192]	@ (10043a5c <BLE_Init+0x354>)
1004399a:	7912      	ldrb	r2, [r2, #4]
1004399c:	264e      	movs	r6, #78	@ 0x4e
1004399e:	19bc      	adds	r4, r7, r6
100439a0:	2500      	movs	r5, #0
100439a2:	9502      	str	r5, [sp, #8]
100439a4:	9201      	str	r2, [sp, #4]
100439a6:	9300      	str	r3, [sp, #0]
100439a8:	2300      	movs	r3, #0
100439aa:	2201      	movs	r2, #1
100439ac:	f00e f94c 	bl	10051c48 <aci_gap_set_security_requirements>
100439b0:	0003      	movs	r3, r0
100439b2:	7023      	strb	r3, [r4, #0]
                                               CFG_KEYPRESS_NOTIFICATION_SUPPORT,
                                               bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               GAP_PAIRING_RESP_NONE);

  if (ret != BLE_STATUS_SUCCESS)
100439b4:	19bb      	adds	r3, r7, r6
100439b6:	781b      	ldrb	r3, [r3, #0]
100439b8:	2b00      	cmp	r3, #0
100439ba:	d007      	beq.n	100439cc <BLE_Init+0x2c4>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_security_requirements command, result: 0x%02X\n", ret);
100439bc:	19bb      	adds	r3, r7, r6
100439be:	781a      	ldrb	r2, [r3, #0]
100439c0:	4b2a      	ldr	r3, [pc, #168]	@ (10043a6c <BLE_Init+0x364>)
100439c2:	0011      	movs	r1, r2
100439c4:	0018      	movs	r0, r3
100439c6:	f023 fa9f 	bl	10066f08 <iprintf>
100439ca:	e003      	b.n	100439d4 <BLE_Init+0x2cc>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_security_requirements command\n");
100439cc:	4b28      	ldr	r3, [pc, #160]	@ (10043a70 <BLE_Init+0x368>)
100439ce:	0018      	movs	r0, r3
100439d0:	f023 fb0a 	bl	10066fe8 <puts>
  }

  /**
   * Initialize Filter Accept List
   */
  if (bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
100439d4:	4b21      	ldr	r3, [pc, #132]	@ (10043a5c <BLE_Init+0x354>)
100439d6:	789b      	ldrb	r3, [r3, #2]
100439d8:	2b00      	cmp	r3, #0
100439da:	d017      	beq.n	10043a0c <BLE_Init+0x304>
  {
    ret = aci_gap_configure_filter_accept_and_resolving_list(0x01);
100439dc:	254e      	movs	r5, #78	@ 0x4e
100439de:	197c      	adds	r4, r7, r5
100439e0:	2001      	movs	r0, #1
100439e2:	f00e fdc3 	bl	1005256c <aci_gap_configure_filter_accept_and_resolving_list>
100439e6:	0003      	movs	r3, r0
100439e8:	7023      	strb	r3, [r4, #0]
    if (ret != BLE_STATUS_SUCCESS)
100439ea:	002a      	movs	r2, r5
100439ec:	18bb      	adds	r3, r7, r2
100439ee:	781b      	ldrb	r3, [r3, #0]
100439f0:	2b00      	cmp	r3, #0
100439f2:	d007      	beq.n	10043a04 <BLE_Init+0x2fc>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_filter_accept_and_resolving_list command, result: 0x%02X\n", ret);
100439f4:	18bb      	adds	r3, r7, r2
100439f6:	781a      	ldrb	r2, [r3, #0]
100439f8:	4b1e      	ldr	r3, [pc, #120]	@ (10043a74 <BLE_Init+0x36c>)
100439fa:	0011      	movs	r1, r2
100439fc:	0018      	movs	r0, r3
100439fe:	f023 fa83 	bl	10066f08 <iprintf>
10043a02:	e003      	b.n	10043a0c <BLE_Init+0x304>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_filter_accept_and_resolving_list command\n");
10043a04:	4b1c      	ldr	r3, [pc, #112]	@ (10043a78 <BLE_Init+0x370>)
10043a06:	0018      	movs	r0, r3
10043a08:	f023 faee 	bl	10066fe8 <puts>
    }
  }
  APP_DBG_MSG("==>> End BLE_Init function\n");
10043a0c:	4b1b      	ldr	r3, [pc, #108]	@ (10043a7c <BLE_Init+0x374>)
10043a0e:	0018      	movs	r0, r3
10043a10:	f023 faea 	bl	10066fe8 <puts>

}
10043a14:	46c0      	nop			@ (mov r8, r8)
10043a16:	46bd      	mov	sp, r7
10043a18:	b015      	add	sp, #84	@ 0x54
10043a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10043a1c:	10068830 	.word	0x10068830
10043a20:	10068390 	.word	0x10068390
10043a24:	100683b4 	.word	0x100683b4
10043a28:	100683f4 	.word	0x100683f4
10043a2c:	10068424 	.word	0x10068424
10043a30:	10068464 	.word	0x10068464
10043a34:	10068494 	.word	0x10068494
10043a38:	100684c8 	.word	0x100684c8
10043a3c:	100684e8 	.word	0x100684e8
10043a40:	1006995c 	.word	0x1006995c
10043a44:	1006852c 	.word	0x1006852c
10043a48:	10068570 	.word	0x10068570
10043a4c:	100685a4 	.word	0x100685a4
10043a50:	100685e8 	.word	0x100685e8
10043a54:	1006861c 	.word	0x1006861c
10043a58:	10068658 	.word	0x10068658
10043a5c:	20000350 	.word	0x20000350
10043a60:	10068684 	.word	0x10068684
10043a64:	100686c4 	.word	0x100686c4
10043a68:	200012b0 	.word	0x200012b0
10043a6c:	100686f4 	.word	0x100686f4
10043a70:	1006873c 	.word	0x1006873c
10043a74:	10068774 	.word	0x10068774
10043a78:	100687cc 	.word	0x100687cc
10043a7c:	10068814 	.word	0x10068814

10043a80 <BLEStack_Process_Schedule>:

void BLEStack_Process_Schedule(void)
{
10043a80:	b580      	push	{r7, lr}
10043a82:	af00      	add	r7, sp, #0
  /* Keep BLE Stack Process priority low, since there are limited cases
     where stack wants to be rescheduled for busy waiting.  */
  UTIL_SEQ_SetTask( 1U << CFG_TASK_BLE_STACK, CFG_SEQ_PRIO_1);
10043a84:	2101      	movs	r1, #1
10043a86:	2001      	movs	r0, #1
10043a88:	f00e fc3a 	bl	10052300 <UTIL_SEQ_SetTask>
}
10043a8c:	46c0      	nop			@ (mov r8, r8)
10043a8e:	46bd      	mov	sp, r7
10043a90:	bd80      	pop	{r7, pc}

10043a92 <BLEStack_Process>:
static void BLEStack_Process(void)
{
10043a92:	b580      	push	{r7, lr}
10043a94:	af00      	add	r7, sp, #0
  APP_DEBUG_SIGNAL_SET(APP_STACK_PROCESS);
10043a96:	2001      	movs	r0, #1
10043a98:	f004 f99d 	bl	10047dd6 <APP_DEBUG_SIGNAL_SET>
  BLE_STACK_Tick();
10043a9c:	f00f f91c 	bl	10052cd8 <BLE_STACK_Tick>

  APP_DEBUG_SIGNAL_RESET(APP_STACK_PROCESS);
10043aa0:	2001      	movs	r0, #1
10043aa2:	f004 f9a2 	bl	10047dea <APP_DEBUG_SIGNAL_RESET>
}
10043aa6:	46c0      	nop			@ (mov r8, r8)
10043aa8:	46bd      	mov	sp, r7
10043aaa:	bd80      	pop	{r7, pc}

10043aac <VTimer_Process>:

void VTimer_Process(void)
{
10043aac:	b580      	push	{r7, lr}
10043aae:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_Tick();
10043ab0:	f00a fff2 	bl	1004ea98 <HAL_RADIO_TIMER_Tick>
}
10043ab4:	46c0      	nop			@ (mov r8, r8)
10043ab6:	46bd      	mov	sp, r7
10043ab8:	bd80      	pop	{r7, pc}

10043aba <VTimer_Process_Schedule>:

void VTimer_Process_Schedule(void)
{
10043aba:	b580      	push	{r7, lr}
10043abc:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_VTIMER, CFG_SEQ_PRIO_0);
10043abe:	2100      	movs	r1, #0
10043ac0:	2002      	movs	r0, #2
10043ac2:	f00e fc1d 	bl	10052300 <UTIL_SEQ_SetTask>
}
10043ac6:	46c0      	nop			@ (mov r8, r8)
10043ac8:	46bd      	mov	sp, r7
10043aca:	bd80      	pop	{r7, pc}

10043acc <NVM_Process>:
void NVM_Process(void)
{
10043acc:	b580      	push	{r7, lr}
10043ace:	af00      	add	r7, sp, #0
  NVMDB_Tick();
10043ad0:	f007 fa02 	bl	1004aed8 <NVMDB_Tick>
}
10043ad4:	46c0      	nop			@ (mov r8, r8)
10043ad6:	46bd      	mov	sp, r7
10043ad8:	bd80      	pop	{r7, pc}

10043ada <NVM_Process_Schedule>:

void NVM_Process_Schedule(void)
{
10043ada:	b580      	push	{r7, lr}
10043adc:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_NVM, CFG_SEQ_PRIO_1);
10043ade:	2101      	movs	r1, #1
10043ae0:	2004      	movs	r0, #4
10043ae2:	f00e fc0d 	bl	10052300 <UTIL_SEQ_SetTask>
}
10043ae6:	46c0      	nop			@ (mov r8, r8)
10043ae8:	46bd      	mov	sp, r7
10043aea:	bd80      	pop	{r7, pc}

10043aec <HAL_RADIO_TIMER_CpuWakeUpCallback>:
  VTimer_Process_Schedule();
}

/* Function called from RADIO_TIMER_CPU_WKUP_IRQHandler() context. */
void HAL_RADIO_TIMER_CpuWakeUpCallback(void)
{
10043aec:	b580      	push	{r7, lr}
10043aee:	af00      	add	r7, sp, #0
  VTimer_Process_Schedule();
10043af0:	f7ff ffe3 	bl	10043aba <VTimer_Process_Schedule>
}
10043af4:	46c0      	nop			@ (mov r8, r8)
10043af6:	46bd      	mov	sp, r7
10043af8:	bd80      	pop	{r7, pc}

10043afa <HAL_RADIO_TxRxCallback>:

/* Function called from RADIO_TXRX_IRQHandler() context. */
void HAL_RADIO_TxRxCallback(uint32_t flags)
{
10043afa:	b580      	push	{r7, lr}
10043afc:	b082      	sub	sp, #8
10043afe:	af00      	add	r7, sp, #0
10043b00:	6078      	str	r0, [r7, #4]
  BLE_STACK_RadioHandler(flags);
10043b02:	687b      	ldr	r3, [r7, #4]
10043b04:	0018      	movs	r0, r3
10043b06:	f01a fd49 	bl	1005e59c <BLE_STACK_RadioHandler>

  VTimer_Process_Schedule();
10043b0a:	f7ff ffd6 	bl	10043aba <VTimer_Process_Schedule>
  NVM_Process_Schedule();
10043b0e:	f7ff ffe4 	bl	10043ada <NVM_Process_Schedule>
}
10043b12:	46c0      	nop			@ (mov r8, r8)
10043b14:	46bd      	mov	sp, r7
10043b16:	b002      	add	sp, #8
10043b18:	bd80      	pop	{r7, pc}

10043b1a <BLE_STACK_ProcessRequest>:

void BLE_STACK_ProcessRequest(void)
{
10043b1a:	b580      	push	{r7, lr}
10043b1c:	af00      	add	r7, sp, #0
  BLEStack_Process_Schedule();
10043b1e:	f7ff ffaf 	bl	10043a80 <BLEStack_Process_Schedule>
}
10043b22:	46c0      	nop			@ (mov r8, r8)
10043b24:	46bd      	mov	sp, r7
10043b26:	bd80      	pop	{r7, pc}

10043b28 <APP_BLE_Init>:

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
10043b28:	b590      	push	{r4, r7, lr}
10043b2a:	b083      	sub	sp, #12
10043b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN APP_BLE_Init_1 */
  tBleStatus ret;
  /* USER CODE END APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1U << CFG_TASK_BLE_STACK, UTIL_SEQ_RFU, BLEStack_Process);
10043b2e:	4b31      	ldr	r3, [pc, #196]	@ (10043bf4 <APP_BLE_Init+0xcc>)
10043b30:	001a      	movs	r2, r3
10043b32:	2100      	movs	r1, #0
10043b34:	2001      	movs	r0, #1
10043b36:	f00e fbbf 	bl	100522b8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_VTIMER, UTIL_SEQ_RFU, VTimer_Process);
10043b3a:	4b2f      	ldr	r3, [pc, #188]	@ (10043bf8 <APP_BLE_Init+0xd0>)
10043b3c:	001a      	movs	r2, r3
10043b3e:	2100      	movs	r1, #0
10043b40:	2002      	movs	r0, #2
10043b42:	f00e fbb9 	bl	100522b8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_NVM, UTIL_SEQ_RFU, NVM_Process);
10043b46:	4b2d      	ldr	r3, [pc, #180]	@ (10043bfc <APP_BLE_Init+0xd4>)
10043b48:	001a      	movs	r2, r3
10043b4a:	2100      	movs	r1, #0
10043b4c:	2004      	movs	r0, #4
10043b4e:	f00e fbb3 	bl	100522b8 <UTIL_SEQ_RegTask>
  ModulesInit();
10043b52:	f7ff fdcb 	bl	100436ec <ModulesInit>

  /* Initialization of HCI & GATT & GAP layer */
  BLE_Init();
10043b56:	f7ff fdd7 	bl	10043708 <BLE_Init>

  /**
  * Initialization of the BLE App Context
  */
  bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
10043b5a:	4b29      	ldr	r3, [pc, #164]	@ (10043c00 <APP_BLE_Init+0xd8>)
10043b5c:	2200      	movs	r2, #0
10043b5e:	739a      	strb	r2, [r3, #14]
  bleAppContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
10043b60:	4b27      	ldr	r3, [pc, #156]	@ (10043c00 <APP_BLE_Init+0xd8>)
10043b62:	2201      	movs	r2, #1
10043b64:	4252      	negs	r2, r2
10043b66:	819a      	strh	r2, [r3, #12]

  /* From here, all initialization are BLE application specific */

  /* USER CODE BEGIN APP_BLE_Init_4 */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
10043b68:	4a26      	ldr	r2, [pc, #152]	@ (10043c04 <APP_BLE_Init+0xdc>)
10043b6a:	2380      	movs	r3, #128	@ 0x80
10043b6c:	009b      	lsls	r3, r3, #2
10043b6e:	2100      	movs	r1, #0
10043b70:	0018      	movs	r0, r3
10043b72:	f00e fba1 	bl	100522b8 <UTIL_SEQ_RegTask>
  
  /* Create timer to handle the Advertising Stop */
  bleAppContext.Advertising_mgr_timer_Id.callback = Adv_Cancel_Req;    
10043b76:	4b22      	ldr	r3, [pc, #136]	@ (10043c00 <APP_BLE_Init+0xd8>)
10043b78:	4a23      	ldr	r2, [pc, #140]	@ (10043c08 <APP_BLE_Init+0xe0>)
10043b7a:	619a      	str	r2, [r3, #24]
  
  /* Create timer to handle the Led Switch OFF */
  bleAppContext.SwitchOffGPIO_timer_Id.callback = Switch_OFF_GPIO;
10043b7c:	4b20      	ldr	r3, [pc, #128]	@ (10043c00 <APP_BLE_Init+0xd8>)
10043b7e:	4a23      	ldr	r2, [pc, #140]	@ (10043c0c <APP_BLE_Init+0xe4>)
10043b80:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE END APP_BLE_Init_4 */

  /**
  * Initialize Services and Characteristics.
  */
  APP_DBG_MSG("\n");
10043b82:	200a      	movs	r0, #10
10043b84:	f023 f9d0 	bl	10066f28 <putchar>
  APP_DBG_MSG("Services and Characteristics creation\n");
10043b88:	4b21      	ldr	r3, [pc, #132]	@ (10043c10 <APP_BLE_Init+0xe8>)
10043b8a:	0018      	movs	r0, r3
10043b8c:	f023 fa2c 	bl	10066fe8 <puts>
  P2P_SERVER_APP_Init();
10043b90:	f002 f8a8 	bl	10045ce4 <P2P_SERVER_APP_Init>
  OTA_APP_Init();
10043b94:	f001 fd84 	bl	100456a0 <OTA_APP_Init>
  APP_DBG_MSG("End of Services and Characteristics creation\n");
10043b98:	4b1e      	ldr	r3, [pc, #120]	@ (10043c14 <APP_BLE_Init+0xec>)
10043b9a:	0018      	movs	r0, r3
10043b9c:	f023 fa24 	bl	10066fe8 <puts>
  APP_DBG_MSG("\n");
10043ba0:	200a      	movs	r0, #10
10043ba2:	f023 f9c1 	bl	10066f28 <putchar>

  /* USER CODE BEGIN APP_BLE_Init_3 */
  
  ret = aci_hal_set_radio_activity_mask(0x0006);
10043ba6:	1dfc      	adds	r4, r7, #7
10043ba8:	2006      	movs	r0, #6
10043baa:	f00e fec5 	bl	10052938 <aci_hal_set_radio_activity_mask>
10043bae:	0003      	movs	r3, r0
10043bb0:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
10043bb2:	1dfb      	adds	r3, r7, #7
10043bb4:	781b      	ldrb	r3, [r3, #0]
10043bb6:	2b00      	cmp	r3, #0
10043bb8:	d007      	beq.n	10043bca <APP_BLE_Init+0xa2>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%2X\n", ret);
10043bba:	1dfb      	adds	r3, r7, #7
10043bbc:	781a      	ldrb	r2, [r3, #0]
10043bbe:	4b16      	ldr	r3, [pc, #88]	@ (10043c18 <APP_BLE_Init+0xf0>)
10043bc0:	0011      	movs	r1, r2
10043bc2:	0018      	movs	r0, r3
10043bc4:	f023 f9a0 	bl	10066f08 <iprintf>
10043bc8:	e003      	b.n	10043bd2 <APP_BLE_Init+0xaa>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
10043bca:	4b14      	ldr	r3, [pc, #80]	@ (10043c1c <APP_BLE_Init+0xf4>)
10043bcc:	0018      	movs	r0, r3
10043bce:	f023 f99b 	bl	10066f08 <iprintf>
  }
  
  /* Start to Advertise to accept a connection */
  APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
10043bd2:	2001      	movs	r0, #1
10043bd4:	f000 fd7a 	bl	100446cc <APP_BLE_Procedure_Gap_Peripheral>
  
  /* Start a timer to stop advertising after a while */
  HAL_RADIO_TIMER_StartVirtualTimer(&bleAppContext.Advertising_mgr_timer_Id, ADV_TIMEOUT_MS);
10043bd8:	4a11      	ldr	r2, [pc, #68]	@ (10043c20 <APP_BLE_Init+0xf8>)
10043bda:	4b12      	ldr	r3, [pc, #72]	@ (10043c24 <APP_BLE_Init+0xfc>)
10043bdc:	0011      	movs	r1, r2
10043bde:	0018      	movs	r0, r3
10043be0:	f00b fab0 	bl	1004f144 <HAL_RADIO_TIMER_StartVirtualTimer>
  
  /* USER CODE END APP_BLE_Init_3 */

  /* USER CODE BEGIN APP_BLE_Init_2 */
  bleAppContext.connIntervalFlag = 0;
10043be4:	4b06      	ldr	r3, [pc, #24]	@ (10043c00 <APP_BLE_Init+0xd8>)
10043be6:	2240      	movs	r2, #64	@ 0x40
10043be8:	2100      	movs	r1, #0
10043bea:	5499      	strb	r1, [r3, r2]
  /* USER CODE END APP_BLE_Init_2 */

  return;
10043bec:	46c0      	nop			@ (mov r8, r8)
}
10043bee:	46bd      	mov	sp, r7
10043bf0:	b003      	add	sp, #12
10043bf2:	bd90      	pop	{r4, r7, pc}
10043bf4:	10043a93 	.word	0x10043a93
10043bf8:	10043aad 	.word	0x10043aad
10043bfc:	10043acd 	.word	0x10043acd
10043c00:	20000350 	.word	0x20000350
10043c04:	100449d9 	.word	0x100449d9
10043c08:	10044999 	.word	0x10044999
10043c0c:	100449c1 	.word	0x100449c1
10043c10:	10068864 	.word	0x10068864
10043c14:	1006888c 	.word	0x1006888c
10043c18:	100688bc 	.word	0x100688bc
10043c1c:	10068900 	.word	0x10068900
10043c20:	0000ea60 	.word	0x0000ea60
10043c24:	20000360 	.word	0x20000360

10043c28 <BLEEVT_App_Notification>:

void BLEEVT_App_Notification(const hci_pckt *hci_pckt)
{
10043c28:	b5f0      	push	{r4, r5, r6, r7, lr}
10043c2a:	b099      	sub	sp, #100	@ 0x64
10043c2c:	af04      	add	r7, sp, #16
10043c2e:	6078      	str	r0, [r7, #4]
  tBleStatus ret = BLE_STATUS_ERROR;
10043c30:	234b      	movs	r3, #75	@ 0x4b
10043c32:	18fb      	adds	r3, r7, r3
10043c34:	2286      	movs	r2, #134	@ 0x86
10043c36:	701a      	strb	r2, [r3, #0]
  UNUSED(ret);
  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  if(hci_pckt->type != HCI_EVENT_PKT_TYPE && hci_pckt->type != HCI_EVENT_EXT_PKT_TYPE)
10043c38:	687b      	ldr	r3, [r7, #4]
10043c3a:	781b      	ldrb	r3, [r3, #0]
10043c3c:	2b04      	cmp	r3, #4
10043c3e:	d004      	beq.n	10043c4a <BLEEVT_App_Notification+0x22>
10043c40:	687b      	ldr	r3, [r7, #4]
10043c42:	781b      	ldrb	r3, [r3, #0]
10043c44:	2b82      	cmp	r3, #130	@ 0x82
10043c46:	d000      	beq.n	10043c4a <BLEEVT_App_Notification+0x22>
10043c48:	e31d      	b.n	10044286 <BLEEVT_App_Notification+0x65e>
  {
    /* Not an event */
    return;
  }

  p_event_pckt = (hci_event_pckt*)hci_pckt->data;
10043c4a:	687b      	ldr	r3, [r7, #4]
10043c4c:	3301      	adds	r3, #1
10043c4e:	647b      	str	r3, [r7, #68]	@ 0x44

  if(hci_pckt->type == HCI_EVENT_PKT_TYPE){
10043c50:	687b      	ldr	r3, [r7, #4]
10043c52:	781b      	ldrb	r3, [r3, #0]
10043c54:	2b04      	cmp	r3, #4
10043c56:	d103      	bne.n	10043c60 <BLEEVT_App_Notification+0x38>
    event_data = p_event_pckt->data;
10043c58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10043c5a:	3302      	adds	r3, #2
10043c5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
10043c5e:	e005      	b.n	10043c6c <BLEEVT_App_Notification+0x44>
  }
  else { /* hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE */
    hci_event_ext_pckt *p_event_pckt = (hci_event_ext_pckt*)hci_pckt->data;
10043c60:	687b      	ldr	r3, [r7, #4]
10043c62:	3301      	adds	r3, #1
10043c64:	643b      	str	r3, [r7, #64]	@ 0x40
    event_data = p_event_pckt->data;
10043c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10043c68:	3303      	adds	r3, #3
10043c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }

  switch (p_event_pckt->evt) /* evt field is at same offset in hci_event_pckt and hci_event_ext_pckt */
10043c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10043c6e:	781b      	ldrb	r3, [r3, #0]
10043c70:	2bff      	cmp	r3, #255	@ 0xff
10043c72:	d100      	bne.n	10043c76 <BLEEVT_App_Notification+0x4e>
10043c74:	e1b7      	b.n	10043fe6 <BLEEVT_App_Notification+0x3be>
10043c76:	dd00      	ble.n	10043c7a <BLEEVT_App_Notification+0x52>
10043c78:	e2fc      	b.n	10044274 <BLEEVT_App_Notification+0x64c>
10043c7a:	2b3e      	cmp	r3, #62	@ 0x3e
10043c7c:	d057      	beq.n	10043d2e <BLEEVT_App_Notification+0x106>
10043c7e:	dd00      	ble.n	10043c82 <BLEEVT_App_Notification+0x5a>
10043c80:	e2f8      	b.n	10044274 <BLEEVT_App_Notification+0x64c>
10043c82:	2b05      	cmp	r3, #5
10043c84:	d003      	beq.n	10043c8e <BLEEVT_App_Notification+0x66>
10043c86:	2b10      	cmp	r3, #16
10043c88:	d100      	bne.n	10043c8c <BLEEVT_App_Notification+0x64>
10043c8a:	e2ea      	b.n	10044262 <BLEEVT_App_Notification+0x63a>
10043c8c:	e2f2      	b.n	10044274 <BLEEVT_App_Notification+0x64c>
  {
  case HCI_DISCONNECTION_COMPLETE_EVT_CODE:
    {
      hci_disconnection_complete_event_rp0 *p_disconnection_complete_event;
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
10043c8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10043c90:	3302      	adds	r3, #2
10043c92:	60bb      	str	r3, [r7, #8]

        /* USER CODE BEGIN EVT_DISCONN_COMPLETE_3 */

        /* USER CODE END EVT_DISCONN_COMPLETE_3 */

      if (p_disconnection_complete_event->Connection_Handle == bleAppContext.BleApplicationContext_legacy.connectionHandle)
10043c94:	68bb      	ldr	r3, [r7, #8]
10043c96:	785a      	ldrb	r2, [r3, #1]
10043c98:	789b      	ldrb	r3, [r3, #2]
10043c9a:	021b      	lsls	r3, r3, #8
10043c9c:	4313      	orrs	r3, r2
10043c9e:	b29a      	uxth	r2, r3
10043ca0:	4be9      	ldr	r3, [pc, #932]	@ (10044048 <BLEEVT_App_Notification+0x420>)
10043ca2:	899b      	ldrh	r3, [r3, #12]
10043ca4:	429a      	cmp	r2, r3
10043ca6:	d118      	bne.n	10043cda <BLEEVT_App_Notification+0xb2>
      {
        bleAppContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
10043ca8:	4be7      	ldr	r3, [pc, #924]	@ (10044048 <BLEEVT_App_Notification+0x420>)
10043caa:	2201      	movs	r2, #1
10043cac:	4252      	negs	r2, r2
10043cae:	819a      	strh	r2, [r3, #12]
        bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
10043cb0:	4be5      	ldr	r3, [pc, #916]	@ (10044048 <BLEEVT_App_Notification+0x420>)
10043cb2:	2200      	movs	r2, #0
10043cb4:	739a      	strb	r2, [r3, #14]
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
10043cb6:	4be5      	ldr	r3, [pc, #916]	@ (1004404c <BLEEVT_App_Notification+0x424>)
10043cb8:	0018      	movs	r0, r3
10043cba:	f023 f995 	bl	10066fe8 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%02X\n     - Reason:    0x%02X\n",
10043cbe:	68bb      	ldr	r3, [r7, #8]
10043cc0:	785a      	ldrb	r2, [r3, #1]
10043cc2:	789b      	ldrb	r3, [r3, #2]
10043cc4:	021b      	lsls	r3, r3, #8
10043cc6:	4313      	orrs	r3, r2
10043cc8:	b29b      	uxth	r3, r3
10043cca:	0019      	movs	r1, r3
10043ccc:	68bb      	ldr	r3, [r7, #8]
10043cce:	78db      	ldrb	r3, [r3, #3]
10043cd0:	001a      	movs	r2, r3
10043cd2:	4bdf      	ldr	r3, [pc, #892]	@ (10044050 <BLEEVT_App_Notification+0x428>)
10043cd4:	0018      	movs	r0, r3
10043cd6:	f023 f917 	bl	10066f08 <iprintf>

        /* USER CODE BEGIN EVT_DISCONN_COMPLETE_2 */

        /* USER CODE END EVT_DISCONN_COMPLETE_2 */
      }
      gap_cmd_resp_release();
10043cda:	f000 fe4d 	bl	10044978 <gap_cmd_resp_release>
      /* USER CODE BEGIN EVT_DISCONN_COMPLETE_1 */

      /* USER CODE END EVT_DISCONN_COMPLETE_1 */
      P2P_SERVERHandleNotification.EvtOpcode = P2P_SERVER_DISCON_HANDLE_EVT;
10043cde:	4bdd      	ldr	r3, [pc, #884]	@ (10044054 <BLEEVT_App_Notification+0x42c>)
10043ce0:	2201      	movs	r2, #1
10043ce2:	701a      	strb	r2, [r3, #0]
      P2P_SERVERHandleNotification.ConnectionHandle = p_disconnection_complete_event->Connection_Handle;
10043ce4:	68bb      	ldr	r3, [r7, #8]
10043ce6:	785a      	ldrb	r2, [r3, #1]
10043ce8:	789b      	ldrb	r3, [r3, #2]
10043cea:	021b      	lsls	r3, r3, #8
10043cec:	4313      	orrs	r3, r2
10043cee:	b29a      	uxth	r2, r3
10043cf0:	4bd8      	ldr	r3, [pc, #864]	@ (10044054 <BLEEVT_App_Notification+0x42c>)
10043cf2:	805a      	strh	r2, [r3, #2]
      P2P_SERVER_APP_EvtRx(&P2P_SERVERHandleNotification);
10043cf4:	4bd7      	ldr	r3, [pc, #860]	@ (10044054 <BLEEVT_App_Notification+0x42c>)
10043cf6:	0018      	movs	r0, r3
10043cf8:	f001 ffd6 	bl	10045ca8 <P2P_SERVER_APP_EvtRx>
      OTAHandleNotification.EvtOpcode = OTA_DISCON_HANDLE_EVT;
10043cfc:	4bd6      	ldr	r3, [pc, #856]	@ (10044058 <BLEEVT_App_Notification+0x430>)
10043cfe:	2201      	movs	r2, #1
10043d00:	701a      	strb	r2, [r3, #0]
      OTAHandleNotification.ConnectionHandle = p_disconnection_complete_event->Connection_Handle;
10043d02:	68bb      	ldr	r3, [r7, #8]
10043d04:	785a      	ldrb	r2, [r3, #1]
10043d06:	789b      	ldrb	r3, [r3, #2]
10043d08:	021b      	lsls	r3, r3, #8
10043d0a:	4313      	orrs	r3, r2
10043d0c:	b29a      	uxth	r2, r3
10043d0e:	4bd2      	ldr	r3, [pc, #840]	@ (10044058 <BLEEVT_App_Notification+0x430>)
10043d10:	805a      	strh	r2, [r3, #2]
      OTA_APP_EvtRx(&OTAHandleNotification);
10043d12:	4bd1      	ldr	r3, [pc, #836]	@ (10044058 <BLEEVT_App_Notification+0x430>)
10043d14:	0018      	movs	r0, r3
10043d16:	f001 fca3 	bl	10045660 <OTA_APP_EvtRx>
      /* USER CODE BEGIN EVT_DISCONN_COMPLETE */
      APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
10043d1a:	2001      	movs	r0, #1
10043d1c:	f000 fcd6 	bl	100446cc <APP_BLE_Procedure_Gap_Peripheral>
      HAL_RADIO_TIMER_StartVirtualTimer(&bleAppContext.Advertising_mgr_timer_Id, ADV_TIMEOUT_MS);
10043d20:	4ace      	ldr	r2, [pc, #824]	@ (1004405c <BLEEVT_App_Notification+0x434>)
10043d22:	4bcf      	ldr	r3, [pc, #828]	@ (10044060 <BLEEVT_App_Notification+0x438>)
10043d24:	0011      	movs	r1, r2
10043d26:	0018      	movs	r0, r3
10043d28:	f00b fa0c 	bl	1004f144 <HAL_RADIO_TIMER_StartVirtualTimer>
      /* USER CODE END EVT_DISCONN_COMPLETE */
    }
    break;
10043d2c:	e2ae      	b.n	1004428c <BLEEVT_App_Notification+0x664>

  case HCI_LE_META_EVT_CODE:
    {
      p_meta_evt = (hci_le_meta_event*) p_event_pckt->data;
10043d2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10043d30:	3302      	adds	r3, #2
10043d32:	623b      	str	r3, [r7, #32]
      /* USER CODE BEGIN EVT_LE_META_EVENT */

      /* USER CODE END EVT_LE_META_EVENT */
      switch (p_meta_evt->subevent)
10043d34:	6a3b      	ldr	r3, [r7, #32]
10043d36:	781b      	ldrb	r3, [r3, #0]
10043d38:	2b0c      	cmp	r3, #12
10043d3a:	d100      	bne.n	10043d3e <BLEEVT_App_Notification+0x116>
10043d3c:	e0d0      	b.n	10043ee0 <BLEEVT_App_Notification+0x2b8>
10043d3e:	dd00      	ble.n	10043d42 <BLEEVT_App_Notification+0x11a>
10043d40:	e147      	b.n	10043fd2 <BLEEVT_App_Notification+0x3aa>
10043d42:	2b0a      	cmp	r3, #10
10043d44:	d100      	bne.n	10043d48 <BLEEVT_App_Notification+0x120>
10043d46:	e0ec      	b.n	10043f22 <BLEEVT_App_Notification+0x2fa>
10043d48:	dd00      	ble.n	10043d4c <BLEEVT_App_Notification+0x124>
10043d4a:	e142      	b.n	10043fd2 <BLEEVT_App_Notification+0x3aa>
10043d4c:	2b01      	cmp	r3, #1
10043d4e:	d100      	bne.n	10043d52 <BLEEVT_App_Notification+0x12a>
10043d50:	e113      	b.n	10043f7a <BLEEVT_App_Notification+0x352>
10043d52:	2b03      	cmp	r3, #3
10043d54:	d000      	beq.n	10043d58 <BLEEVT_App_Notification+0x130>
10043d56:	e13c      	b.n	10043fd2 <BLEEVT_App_Notification+0x3aa>
      {
      case HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE:
        {
          hci_le_connection_update_complete_event_rp0 *p_conn_update_complete;
          p_conn_update_complete = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
10043d58:	6a3b      	ldr	r3, [r7, #32]
10043d5a:	3301      	adds	r3, #1
10043d5c:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
10043d5e:	4bc1      	ldr	r3, [pc, #772]	@ (10044064 <BLEEVT_App_Notification+0x43c>)
10043d60:	0018      	movs	r0, r3
10043d62:	f023 f941 	bl	10066fe8 <puts>
          APP_DBG_MSG("     - Connection Interval:   %d.%02d ms\n     - Connection latency:    %d\n     - Supervision Timeout:   %d ms\n",
10043d66:	697b      	ldr	r3, [r7, #20]
10043d68:	78da      	ldrb	r2, [r3, #3]
10043d6a:	791b      	ldrb	r3, [r3, #4]
10043d6c:	021b      	lsls	r3, r3, #8
10043d6e:	4313      	orrs	r3, r2
10043d70:	b29b      	uxth	r3, r3
10043d72:	0018      	movs	r0, r3
10043d74:	f7fe fc40 	bl	100425f8 <__aeabi_i2d>
10043d78:	2200      	movs	r2, #0
10043d7a:	4bbb      	ldr	r3, [pc, #748]	@ (10044068 <BLEEVT_App_Notification+0x440>)
10043d7c:	f7fd fd9c 	bl	100418b8 <__aeabi_dmul>
10043d80:	0002      	movs	r2, r0
10043d82:	000b      	movs	r3, r1
10043d84:	0010      	movs	r0, r2
10043d86:	0019      	movs	r1, r3
10043d88:	f7fe fbfa 	bl	10042580 <__aeabi_d2iz>
10043d8c:	0006      	movs	r6, r0
10043d8e:	697b      	ldr	r3, [r7, #20]
10043d90:	78da      	ldrb	r2, [r3, #3]
10043d92:	791b      	ldrb	r3, [r3, #4]
10043d94:	021b      	lsls	r3, r3, #8
10043d96:	4313      	orrs	r3, r2
10043d98:	b29b      	uxth	r3, r3
10043d9a:	0018      	movs	r0, r3
10043d9c:	f7fe fc2c 	bl	100425f8 <__aeabi_i2d>
10043da0:	2200      	movs	r2, #0
10043da2:	4bb1      	ldr	r3, [pc, #708]	@ (10044068 <BLEEVT_App_Notification+0x440>)
10043da4:	f7fd fd88 	bl	100418b8 <__aeabi_dmul>
10043da8:	0002      	movs	r2, r0
10043daa:	000b      	movs	r3, r1
10043dac:	0010      	movs	r0, r2
10043dae:	0019      	movs	r1, r3
10043db0:	2200      	movs	r2, #0
10043db2:	2300      	movs	r3, #0
10043db4:	f7fd fb0a 	bl	100413cc <__aeabi_dcmpgt>
10043db8:	1e03      	subs	r3, r0, #0
10043dba:	d03d      	beq.n	10043e38 <BLEEVT_App_Notification+0x210>
10043dbc:	697b      	ldr	r3, [r7, #20]
10043dbe:	78da      	ldrb	r2, [r3, #3]
10043dc0:	791b      	ldrb	r3, [r3, #4]
10043dc2:	021b      	lsls	r3, r3, #8
10043dc4:	4313      	orrs	r3, r2
10043dc6:	b29b      	uxth	r3, r3
10043dc8:	0018      	movs	r0, r3
10043dca:	f7fe fc15 	bl	100425f8 <__aeabi_i2d>
10043dce:	2200      	movs	r2, #0
10043dd0:	4ba5      	ldr	r3, [pc, #660]	@ (10044068 <BLEEVT_App_Notification+0x440>)
10043dd2:	f7fd fd71 	bl	100418b8 <__aeabi_dmul>
10043dd6:	0002      	movs	r2, r0
10043dd8:	000b      	movs	r3, r1
10043dda:	0014      	movs	r4, r2
10043ddc:	001d      	movs	r5, r3
10043dde:	697b      	ldr	r3, [r7, #20]
10043de0:	78da      	ldrb	r2, [r3, #3]
10043de2:	791b      	ldrb	r3, [r3, #4]
10043de4:	021b      	lsls	r3, r3, #8
10043de6:	4313      	orrs	r3, r2
10043de8:	b29b      	uxth	r3, r3
10043dea:	0018      	movs	r0, r3
10043dec:	f7fe fc04 	bl	100425f8 <__aeabi_i2d>
10043df0:	2200      	movs	r2, #0
10043df2:	4b9d      	ldr	r3, [pc, #628]	@ (10044068 <BLEEVT_App_Notification+0x440>)
10043df4:	f7fd fd60 	bl	100418b8 <__aeabi_dmul>
10043df8:	0002      	movs	r2, r0
10043dfa:	000b      	movs	r3, r1
10043dfc:	0010      	movs	r0, r2
10043dfe:	0019      	movs	r1, r3
10043e00:	f7fe fbbe 	bl	10042580 <__aeabi_d2iz>
10043e04:	0003      	movs	r3, r0
10043e06:	0018      	movs	r0, r3
10043e08:	f7fe fbf6 	bl	100425f8 <__aeabi_i2d>
10043e0c:	0002      	movs	r2, r0
10043e0e:	000b      	movs	r3, r1
10043e10:	0020      	movs	r0, r4
10043e12:	0029      	movs	r1, r5
10043e14:	f7fe f818 	bl	10041e48 <__aeabi_dsub>
10043e18:	0002      	movs	r2, r0
10043e1a:	000b      	movs	r3, r1
10043e1c:	0010      	movs	r0, r2
10043e1e:	0019      	movs	r1, r3
10043e20:	2200      	movs	r2, #0
10043e22:	4b92      	ldr	r3, [pc, #584]	@ (1004406c <BLEEVT_App_Notification+0x444>)
10043e24:	f7fd fd48 	bl	100418b8 <__aeabi_dmul>
10043e28:	0002      	movs	r2, r0
10043e2a:	000b      	movs	r3, r1
10043e2c:	0010      	movs	r0, r2
10043e2e:	0019      	movs	r1, r3
10043e30:	f7fe fba6 	bl	10042580 <__aeabi_d2iz>
10043e34:	0002      	movs	r2, r0
10043e36:	e03a      	b.n	10043eae <BLEEVT_App_Notification+0x286>
10043e38:	697b      	ldr	r3, [r7, #20]
10043e3a:	78da      	ldrb	r2, [r3, #3]
10043e3c:	791b      	ldrb	r3, [r3, #4]
10043e3e:	021b      	lsls	r3, r3, #8
10043e40:	4313      	orrs	r3, r2
10043e42:	b29b      	uxth	r3, r3
10043e44:	0018      	movs	r0, r3
10043e46:	f7fe fbd7 	bl	100425f8 <__aeabi_i2d>
10043e4a:	2200      	movs	r2, #0
10043e4c:	4b86      	ldr	r3, [pc, #536]	@ (10044068 <BLEEVT_App_Notification+0x440>)
10043e4e:	f7fd fd33 	bl	100418b8 <__aeabi_dmul>
10043e52:	0002      	movs	r2, r0
10043e54:	000b      	movs	r3, r1
10043e56:	0010      	movs	r0, r2
10043e58:	0019      	movs	r1, r3
10043e5a:	f7fe fb91 	bl	10042580 <__aeabi_d2iz>
10043e5e:	0003      	movs	r3, r0
10043e60:	0018      	movs	r0, r3
10043e62:	f7fe fbc9 	bl	100425f8 <__aeabi_i2d>
10043e66:	0004      	movs	r4, r0
10043e68:	000d      	movs	r5, r1
10043e6a:	697b      	ldr	r3, [r7, #20]
10043e6c:	78da      	ldrb	r2, [r3, #3]
10043e6e:	791b      	ldrb	r3, [r3, #4]
10043e70:	021b      	lsls	r3, r3, #8
10043e72:	4313      	orrs	r3, r2
10043e74:	b29b      	uxth	r3, r3
10043e76:	0018      	movs	r0, r3
10043e78:	f7fe fbbe 	bl	100425f8 <__aeabi_i2d>
10043e7c:	2200      	movs	r2, #0
10043e7e:	4b7a      	ldr	r3, [pc, #488]	@ (10044068 <BLEEVT_App_Notification+0x440>)
10043e80:	f7fd fd1a 	bl	100418b8 <__aeabi_dmul>
10043e84:	0002      	movs	r2, r0
10043e86:	000b      	movs	r3, r1
10043e88:	0020      	movs	r0, r4
10043e8a:	0029      	movs	r1, r5
10043e8c:	f7fd ffdc 	bl	10041e48 <__aeabi_dsub>
10043e90:	0002      	movs	r2, r0
10043e92:	000b      	movs	r3, r1
10043e94:	0010      	movs	r0, r2
10043e96:	0019      	movs	r1, r3
10043e98:	2200      	movs	r2, #0
10043e9a:	4b74      	ldr	r3, [pc, #464]	@ (1004406c <BLEEVT_App_Notification+0x444>)
10043e9c:	f7fd fd0c 	bl	100418b8 <__aeabi_dmul>
10043ea0:	0002      	movs	r2, r0
10043ea2:	000b      	movs	r3, r1
10043ea4:	0010      	movs	r0, r2
10043ea6:	0019      	movs	r1, r3
10043ea8:	f7fe fb6a 	bl	10042580 <__aeabi_d2iz>
10043eac:	0002      	movs	r2, r0
10043eae:	697b      	ldr	r3, [r7, #20]
10043eb0:	7959      	ldrb	r1, [r3, #5]
10043eb2:	799b      	ldrb	r3, [r3, #6]
10043eb4:	021b      	lsls	r3, r3, #8
10043eb6:	430b      	orrs	r3, r1
10043eb8:	b29b      	uxth	r3, r3
10043eba:	001c      	movs	r4, r3
10043ebc:	697b      	ldr	r3, [r7, #20]
10043ebe:	79d9      	ldrb	r1, [r3, #7]
10043ec0:	7a1b      	ldrb	r3, [r3, #8]
10043ec2:	021b      	lsls	r3, r3, #8
10043ec4:	430b      	orrs	r3, r1
10043ec6:	b29b      	uxth	r3, r3
10043ec8:	0019      	movs	r1, r3
10043eca:	000b      	movs	r3, r1
10043ecc:	009b      	lsls	r3, r3, #2
10043ece:	185b      	adds	r3, r3, r1
10043ed0:	005b      	lsls	r3, r3, #1
10043ed2:	4867      	ldr	r0, [pc, #412]	@ (10044070 <BLEEVT_App_Notification+0x448>)
10043ed4:	9300      	str	r3, [sp, #0]
10043ed6:	0023      	movs	r3, r4
10043ed8:	0031      	movs	r1, r6
10043eda:	f023 f815 	bl	10066f08 <iprintf>
          UNUSED(p_conn_update_complete);
          /* USER CODE BEGIN EVT_LE_CONN_UPDATE_COMPLETE */

          /* USER CODE END EVT_LE_CONN_UPDATE_COMPLETE */
        }
        break;
10043ede:	e081      	b.n	10043fe4 <BLEEVT_App_Notification+0x3bc>
      case HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE:
        {
          hci_le_phy_update_complete_event_rp0 *p_le_phy_update_complete;
          p_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
10043ee0:	6a3b      	ldr	r3, [r7, #32]
10043ee2:	3301      	adds	r3, #1
10043ee4:	61fb      	str	r3, [r7, #28]
          UNUSED(p_le_phy_update_complete);

          gap_cmd_resp_release();
10043ee6:	f000 fd47 	bl	10044978 <gap_cmd_resp_release>

          /* USER CODE BEGIN EVT_LE_PHY_UPDATE_COMPLETE */
          APP_DBG_MSG("==>> HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE - ");
10043eea:	4b62      	ldr	r3, [pc, #392]	@ (10044074 <BLEEVT_App_Notification+0x44c>)
10043eec:	0018      	movs	r0, r3
10043eee:	f023 f80b 	bl	10066f08 <iprintf>
          if (p_le_phy_update_complete->Status == 0)
10043ef2:	69fb      	ldr	r3, [r7, #28]
10043ef4:	781b      	ldrb	r3, [r3, #0]
10043ef6:	2b00      	cmp	r3, #0
10043ef8:	d104      	bne.n	10043f04 <BLEEVT_App_Notification+0x2dc>
          {
            APP_DBG_MSG("status ok \n");
10043efa:	4b5f      	ldr	r3, [pc, #380]	@ (10044078 <BLEEVT_App_Notification+0x450>)
10043efc:	0018      	movs	r0, r3
10043efe:	f023 f873 	bl	10066fe8 <puts>
10043f02:	e003      	b.n	10043f0c <BLEEVT_App_Notification+0x2e4>
          }
          else
          {
            APP_DBG_MSG("status nok \n");
10043f04:	4b5d      	ldr	r3, [pc, #372]	@ (1004407c <BLEEVT_App_Notification+0x454>)
10043f06:	0018      	movs	r0, r3
10043f08:	f023 f86e 	bl	10066fe8 <puts>
          }
            
          APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", p_le_phy_update_complete->TX_PHY, p_le_phy_update_complete->RX_PHY);
10043f0c:	69fb      	ldr	r3, [r7, #28]
10043f0e:	78db      	ldrb	r3, [r3, #3]
10043f10:	0019      	movs	r1, r3
10043f12:	69fb      	ldr	r3, [r7, #28]
10043f14:	791b      	ldrb	r3, [r3, #4]
10043f16:	001a      	movs	r2, r3
10043f18:	4b59      	ldr	r3, [pc, #356]	@ (10044080 <BLEEVT_App_Notification+0x458>)
10043f1a:	0018      	movs	r0, r3
10043f1c:	f022 fff4 	bl	10066f08 <iprintf>
          
          /* USER CODE END EVT_LE_PHY_UPDATE_COMPLETE */
        }
        break;
10043f20:	e060      	b.n	10043fe4 <BLEEVT_App_Notification+0x3bc>
      case HCI_LE_ENHANCED_CONNECTION_COMPLETE_SUBEVT_CODE:
        {
          hci_le_enhanced_connection_complete_event_rp0 *p_enhanced_conn_complete;
          p_enhanced_conn_complete = (hci_le_enhanced_connection_complete_event_rp0 *) p_meta_evt->data;
10043f22:	6a3b      	ldr	r3, [r7, #32]
10043f24:	3301      	adds	r3, #1
10043f26:	61bb      	str	r3, [r7, #24]

          connection_complete_event(p_enhanced_conn_complete->Status,
10043f28:	69bb      	ldr	r3, [r7, #24]
10043f2a:	781c      	ldrb	r4, [r3, #0]
10043f2c:	69bb      	ldr	r3, [r7, #24]
10043f2e:	785a      	ldrb	r2, [r3, #1]
10043f30:	789b      	ldrb	r3, [r3, #2]
10043f32:	021b      	lsls	r3, r3, #8
10043f34:	4313      	orrs	r3, r2
10043f36:	b29d      	uxth	r5, r3
10043f38:	69bb      	ldr	r3, [r7, #24]
10043f3a:	791e      	ldrb	r6, [r3, #4]
                                    p_enhanced_conn_complete->Connection_Handle,
                                    p_enhanced_conn_complete->Peer_Address_Type,
                                    p_enhanced_conn_complete->Peer_Address,
10043f3c:	69bb      	ldr	r3, [r7, #24]
10043f3e:	3305      	adds	r3, #5
10043f40:	469c      	mov	ip, r3
          connection_complete_event(p_enhanced_conn_complete->Status,
10043f42:	69bb      	ldr	r3, [r7, #24]
10043f44:	7dda      	ldrb	r2, [r3, #23]
10043f46:	7e1b      	ldrb	r3, [r3, #24]
10043f48:	021b      	lsls	r3, r3, #8
10043f4a:	4313      	orrs	r3, r2
10043f4c:	b29a      	uxth	r2, r3
10043f4e:	69bb      	ldr	r3, [r7, #24]
10043f50:	7e59      	ldrb	r1, [r3, #25]
10043f52:	7e9b      	ldrb	r3, [r3, #26]
10043f54:	021b      	lsls	r3, r3, #8
10043f56:	430b      	orrs	r3, r1
10043f58:	b299      	uxth	r1, r3
10043f5a:	69bb      	ldr	r3, [r7, #24]
10043f5c:	7ed8      	ldrb	r0, [r3, #27]
10043f5e:	7f1b      	ldrb	r3, [r3, #28]
10043f60:	021b      	lsls	r3, r3, #8
10043f62:	4303      	orrs	r3, r0
10043f64:	b29b      	uxth	r3, r3
10043f66:	9302      	str	r3, [sp, #8]
10043f68:	9101      	str	r1, [sp, #4]
10043f6a:	9200      	str	r2, [sp, #0]
10043f6c:	4663      	mov	r3, ip
10043f6e:	0032      	movs	r2, r6
10043f70:	0029      	movs	r1, r5
10043f72:	0020      	movs	r0, r4
10043f74:	f000 f9b6 	bl	100442e4 <connection_complete_event>
                                    p_enhanced_conn_complete->Connection_Interval,
                                    p_enhanced_conn_complete->Peripheral_Latency,
                                    p_enhanced_conn_complete->Supervision_Timeout);
        }
        break;
10043f78:	e034      	b.n	10043fe4 <BLEEVT_App_Notification+0x3bc>
      case HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE:
        {
          hci_le_connection_complete_event_rp0 *p_conn_complete;
          p_conn_complete = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
10043f7a:	6a3b      	ldr	r3, [r7, #32]
10043f7c:	3301      	adds	r3, #1
10043f7e:	613b      	str	r3, [r7, #16]

          connection_complete_event(p_conn_complete->Status,
10043f80:	693b      	ldr	r3, [r7, #16]
10043f82:	781c      	ldrb	r4, [r3, #0]
10043f84:	693b      	ldr	r3, [r7, #16]
10043f86:	785a      	ldrb	r2, [r3, #1]
10043f88:	789b      	ldrb	r3, [r3, #2]
10043f8a:	021b      	lsls	r3, r3, #8
10043f8c:	4313      	orrs	r3, r2
10043f8e:	b29d      	uxth	r5, r3
10043f90:	693b      	ldr	r3, [r7, #16]
10043f92:	791e      	ldrb	r6, [r3, #4]
                                    p_conn_complete->Connection_Handle,
                                    p_conn_complete->Peer_Address_Type,
                                    p_conn_complete->Peer_Address,
10043f94:	693b      	ldr	r3, [r7, #16]
10043f96:	3305      	adds	r3, #5
10043f98:	469c      	mov	ip, r3
          connection_complete_event(p_conn_complete->Status,
10043f9a:	693b      	ldr	r3, [r7, #16]
10043f9c:	7ada      	ldrb	r2, [r3, #11]
10043f9e:	7b1b      	ldrb	r3, [r3, #12]
10043fa0:	021b      	lsls	r3, r3, #8
10043fa2:	4313      	orrs	r3, r2
10043fa4:	b29a      	uxth	r2, r3
10043fa6:	693b      	ldr	r3, [r7, #16]
10043fa8:	7b59      	ldrb	r1, [r3, #13]
10043faa:	7b9b      	ldrb	r3, [r3, #14]
10043fac:	021b      	lsls	r3, r3, #8
10043fae:	430b      	orrs	r3, r1
10043fb0:	b299      	uxth	r1, r3
10043fb2:	693b      	ldr	r3, [r7, #16]
10043fb4:	7bd8      	ldrb	r0, [r3, #15]
10043fb6:	7c1b      	ldrb	r3, [r3, #16]
10043fb8:	021b      	lsls	r3, r3, #8
10043fba:	4303      	orrs	r3, r0
10043fbc:	b29b      	uxth	r3, r3
10043fbe:	9302      	str	r3, [sp, #8]
10043fc0:	9101      	str	r1, [sp, #4]
10043fc2:	9200      	str	r2, [sp, #0]
10043fc4:	4663      	mov	r3, ip
10043fc6:	0032      	movs	r2, r6
10043fc8:	0029      	movs	r1, r5
10043fca:	0020      	movs	r0, r4
10043fcc:	f000 f98a 	bl	100442e4 <connection_complete_event>
                                    p_conn_complete->Connection_Interval,
                                    p_conn_complete->Peripheral_Latency,
                                    p_conn_complete->Supervision_Timeout);
        }
        break;
10043fd0:	e008      	b.n	10043fe4 <BLEEVT_App_Notification+0x3bc>

      /* USER CODE END EVT_LE_META_EVENT_1 */

      default:
        /* USER CODE BEGIN SUBEVENT_DEFAULT */
        APP_DBG_MSG("HCI_LE_META_EVT: 0x%02X\n", p_meta_evt->subevent);
10043fd2:	6a3b      	ldr	r3, [r7, #32]
10043fd4:	781b      	ldrb	r3, [r3, #0]
10043fd6:	001a      	movs	r2, r3
10043fd8:	4b2a      	ldr	r3, [pc, #168]	@ (10044084 <BLEEVT_App_Notification+0x45c>)
10043fda:	0011      	movs	r1, r2
10043fdc:	0018      	movs	r0, r3
10043fde:	f022 ff93 	bl	10066f08 <iprintf>
        /* USER CODE END SUBEVENT_DEFAULT */
        break;
10043fe2:	46c0      	nop			@ (mov r8, r8)
      }
    } /* HCI_LE_META_EVT_CODE */
    break;
10043fe4:	e152      	b.n	1004428c <BLEEVT_App_Notification+0x664>

  case HCI_VENDOR_EVT_CODE:
    {
      aci_blecore_event *p_blecore_evt = (aci_blecore_event*) event_data;
10043fe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10043fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      /* USER CODE BEGIN EVT_VENDOR */

      /* USER CODE END EVT_VENDOR */
      switch (p_blecore_evt->ecode)
10043fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10043fec:	781a      	ldrb	r2, [r3, #0]
10043fee:	785b      	ldrb	r3, [r3, #1]
10043ff0:	021b      	lsls	r3, r3, #8
10043ff2:	4313      	orrs	r3, r2
10043ff4:	b29b      	uxth	r3, r3
10043ff6:	4a24      	ldr	r2, [pc, #144]	@ (10044088 <BLEEVT_App_Notification+0x460>)
10043ff8:	4293      	cmp	r3, r2
10043ffa:	d100      	bne.n	10043ffe <BLEEVT_App_Notification+0x3d6>
10043ffc:	e0f1      	b.n	100441e2 <BLEEVT_App_Notification+0x5ba>
10043ffe:	4a22      	ldr	r2, [pc, #136]	@ (10044088 <BLEEVT_App_Notification+0x460>)
10044000:	4293      	cmp	r3, r2
10044002:	dd00      	ble.n	10044006 <BLEEVT_App_Notification+0x3de>
10044004:	e11f      	b.n	10044246 <BLEEVT_App_Notification+0x61e>
10044006:	2280      	movs	r2, #128	@ 0x80
10044008:	0112      	lsls	r2, r2, #4
1004400a:	4293      	cmp	r3, r2
1004400c:	d044      	beq.n	10044098 <BLEEVT_App_Notification+0x470>
1004400e:	2280      	movs	r2, #128	@ 0x80
10044010:	0112      	lsls	r2, r2, #4
10044012:	4293      	cmp	r3, r2
10044014:	dd00      	ble.n	10044018 <BLEEVT_App_Notification+0x3f0>
10044016:	e116      	b.n	10044246 <BLEEVT_App_Notification+0x61e>
10044018:	2b04      	cmp	r3, #4
1004401a:	d049      	beq.n	100440b0 <BLEEVT_App_Notification+0x488>
1004401c:	da00      	bge.n	10044020 <BLEEVT_App_Notification+0x3f8>
1004401e:	e112      	b.n	10044246 <BLEEVT_App_Notification+0x61e>
10044020:	4a1a      	ldr	r2, [pc, #104]	@ (1004408c <BLEEVT_App_Notification+0x464>)
10044022:	4293      	cmp	r3, r2
10044024:	dd00      	ble.n	10044028 <BLEEVT_App_Notification+0x400>
10044026:	e10e      	b.n	10044246 <BLEEVT_App_Notification+0x61e>
10044028:	2280      	movs	r2, #128	@ 0x80
1004402a:	00d2      	lsls	r2, r2, #3
1004402c:	4293      	cmp	r3, r2
1004402e:	dc00      	bgt.n	10044032 <BLEEVT_App_Notification+0x40a>
10044030:	e109      	b.n	10044246 <BLEEVT_App_Notification+0x61e>
10044032:	4a17      	ldr	r2, [pc, #92]	@ (10044090 <BLEEVT_App_Notification+0x468>)
10044034:	4694      	mov	ip, r2
10044036:	4463      	add	r3, ip
10044038:	2b09      	cmp	r3, #9
1004403a:	d900      	bls.n	1004403e <BLEEVT_App_Notification+0x416>
1004403c:	e103      	b.n	10044246 <BLEEVT_App_Notification+0x61e>
1004403e:	009a      	lsls	r2, r3, #2
10044040:	4b14      	ldr	r3, [pc, #80]	@ (10044094 <BLEEVT_App_Notification+0x46c>)
10044042:	18d3      	adds	r3, r2, r3
10044044:	681b      	ldr	r3, [r3, #0]
10044046:	469f      	mov	pc, r3
10044048:	20000350 	.word	0x20000350
1004404c:	10068938 	.word	0x10068938
10044050:	10068964 	.word	0x10068964
10044054:	20000398 	.word	0x20000398
10044058:	2000039c 	.word	0x2000039c
1004405c:	0000ea60 	.word	0x0000ea60
10044060:	20000360 	.word	0x20000360
10044064:	100689a4 	.word	0x100689a4
10044068:	3ff40000 	.word	0x3ff40000
1004406c:	40590000 	.word	0x40590000
10044070:	100689d8 	.word	0x100689d8
10044074:	10068a48 	.word	0x10068a48
10044078:	10068a78 	.word	0x10068a78
1004407c:	10068a84 	.word	0x10068a84
10044080:	10068a90 	.word	0x10068a90
10044084:	10068ab4 	.word	0x10068ab4
10044088:	00000c19 	.word	0x00000c19
1004408c:	0000040a 	.word	0x0000040a
10044090:	fffffbff 	.word	0xfffffbff
10044094:	10069970 	.word	0x10069970

        /* USER CODE END ecode */
      case ACI_L2CAP_CONNECTION_UPDATE_RESP_VSEVT_CODE:
        {
          aci_l2cap_connection_update_resp_event_rp0 *p_l2cap_conn_update_resp;
          p_l2cap_conn_update_resp = (aci_l2cap_connection_update_resp_event_rp0 *) p_blecore_evt->data;
10044098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004409a:	3302      	adds	r3, #2
1004409c:	633b      	str	r3, [r7, #48]	@ 0x30
          UNUSED(p_l2cap_conn_update_resp);
          /* USER CODE BEGIN EVT_L2CAP_CONNECTION_UPDATE_RESP */

          /* USER CODE END EVT_L2CAP_CONNECTION_UPDATE_RESP */
        }
        break;
1004409e:	e0df      	b.n	10044260 <BLEEVT_App_Notification+0x638>
      case ACI_GAP_PROC_COMPLETE_VSEVT_CODE:
        {
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE\n");
100440a0:	4b7c      	ldr	r3, [pc, #496]	@ (10044294 <BLEEVT_App_Notification+0x66c>)
100440a2:	0018      	movs	r0, r3
100440a4:	f022 ffa0 	bl	10066fe8 <puts>
          aci_gap_proc_complete_event_rp0 *p_gap_proc_complete;
          p_gap_proc_complete = (aci_gap_proc_complete_event_rp0*) p_blecore_evt->data;
100440a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100440aa:	3302      	adds	r3, #2
100440ac:	62bb      	str	r3, [r7, #40]	@ 0x28

          /* USER CODE BEGIN EVT_GAP_PROCEDURE_COMPLETE */

          /* USER CODE END EVT_GAP_PROCEDURE_COMPLETE */
        }
        break;
100440ae:	e0d7      	b.n	10044260 <BLEEVT_App_Notification+0x638>
      case ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE:
        /* USER CODE BEGIN RADIO_ACTIVITY_EVENT*/
        BSP_LED_On(LED_GREEN);
100440b0:	2001      	movs	r0, #1
100440b2:	f008 f97b 	bl	1004c3ac <BSP_LED_On>
        HAL_RADIO_TIMER_StopVirtualTimer(&bleAppContext.SwitchOffGPIO_timer_Id);
100440b6:	4b78      	ldr	r3, [pc, #480]	@ (10044298 <BLEEVT_App_Notification+0x670>)
100440b8:	0018      	movs	r0, r3
100440ba:	f00b f893 	bl	1004f1e4 <HAL_RADIO_TIMER_StopVirtualTimer>
        HAL_RADIO_TIMER_StartVirtualTimer(&bleAppContext.SwitchOffGPIO_timer_Id, LED_ON_TIMEOUT_MS);
100440be:	4b76      	ldr	r3, [pc, #472]	@ (10044298 <BLEEVT_App_Notification+0x670>)
100440c0:	2105      	movs	r1, #5
100440c2:	0018      	movs	r0, r3
100440c4:	f00b f83e 	bl	1004f144 <HAL_RADIO_TIMER_StartVirtualTimer>
        /* USER CODE END RADIO_ACTIVITY_EVENT*/
        break;
100440c8:	e0ca      	b.n	10044260 <BLEEVT_App_Notification+0x638>
      case ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE:
        {
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
100440ca:	4b74      	ldr	r3, [pc, #464]	@ (1004429c <BLEEVT_App_Notification+0x674>)
100440cc:	0018      	movs	r0, r3
100440ce:	f022 ff8b 	bl	10066fe8 <puts>
          /* USER CODE BEGIN ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE*/

          /* USER CODE END ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE*/
        }
        break;
100440d2:	e0c5      	b.n	10044260 <BLEEVT_App_Notification+0x638>
      case ACI_GAP_PASSKEY_REQ_VSEVT_CODE:
        {
          APP_DBG_MSG(">>== ACI_GAP_PASSKEY_REQ_VSEVT_CODE\n");
100440d4:	4b72      	ldr	r3, [pc, #456]	@ (100442a0 <BLEEVT_App_Notification+0x678>)
100440d6:	0018      	movs	r0, r3
100440d8:	f022 ff86 	bl	10066fe8 <puts>

          ret = aci_gap_passkey_resp(bleAppContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
100440dc:	4b71      	ldr	r3, [pc, #452]	@ (100442a4 <BLEEVT_App_Notification+0x67c>)
100440de:	899b      	ldrh	r3, [r3, #12]
100440e0:	254b      	movs	r5, #75	@ 0x4b
100440e2:	197c      	adds	r4, r7, r5
100440e4:	4a70      	ldr	r2, [pc, #448]	@ (100442a8 <BLEEVT_App_Notification+0x680>)
100440e6:	0011      	movs	r1, r2
100440e8:	0018      	movs	r0, r3
100440ea:	f00d fddc 	bl	10051ca6 <aci_gap_passkey_resp>
100440ee:	0003      	movs	r3, r0
100440f0:	7023      	strb	r3, [r4, #0]
          if (ret != BLE_STATUS_SUCCESS)
100440f2:	197b      	adds	r3, r7, r5
100440f4:	781b      	ldrb	r3, [r3, #0]
100440f6:	2b00      	cmp	r3, #0
100440f8:	d007      	beq.n	1004410a <BLEEVT_App_Notification+0x4e2>
          {
            APP_DBG_MSG("==>> aci_gap_passkey_resp : Fail, reason: 0x%02X\n", ret);
100440fa:	197b      	adds	r3, r7, r5
100440fc:	781a      	ldrb	r2, [r3, #0]
100440fe:	4b6b      	ldr	r3, [pc, #428]	@ (100442ac <BLEEVT_App_Notification+0x684>)
10044100:	0011      	movs	r1, r2
10044102:	0018      	movs	r0, r3
10044104:	f022 ff00 	bl	10066f08 <iprintf>
          }
          /* USER CODE BEGIN ACI_GAP_PASSKEY_REQ_VSEVT_CODE*/

          /* USER CODE END ACI_GAP_PASSKEY_REQ_VSEVT_CODE*/
        }
        break;
10044108:	e0aa      	b.n	10044260 <BLEEVT_App_Notification+0x638>
            APP_DBG_MSG("==>> aci_gap_passkey_resp : Success\n");
1004410a:	4b69      	ldr	r3, [pc, #420]	@ (100442b0 <BLEEVT_App_Notification+0x688>)
1004410c:	0018      	movs	r0, r3
1004410e:	f022 ff6b 	bl	10066fe8 <puts>
        break;
10044112:	e0a5      	b.n	10044260 <BLEEVT_App_Notification+0x638>
      case ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE:
        {
          uint8_t confirm_value;
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
10044114:	4b67      	ldr	r3, [pc, #412]	@ (100442b4 <BLEEVT_App_Notification+0x68c>)
10044116:	0018      	movs	r0, r3
10044118:	f022 ff66 	bl	10066fe8 <puts>
          APP_DBG_MSG("     - numeric_value = %d\n",
1004411c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004411e:	3302      	adds	r3, #2
10044120:	789a      	ldrb	r2, [r3, #2]
10044122:	78d9      	ldrb	r1, [r3, #3]
10044124:	0209      	lsls	r1, r1, #8
10044126:	430a      	orrs	r2, r1
10044128:	7919      	ldrb	r1, [r3, #4]
1004412a:	0409      	lsls	r1, r1, #16
1004412c:	430a      	orrs	r2, r1
1004412e:	795b      	ldrb	r3, [r3, #5]
10044130:	061b      	lsls	r3, r3, #24
10044132:	4313      	orrs	r3, r2
10044134:	001a      	movs	r2, r3
10044136:	4b60      	ldr	r3, [pc, #384]	@ (100442b8 <BLEEVT_App_Notification+0x690>)
10044138:	0011      	movs	r1, r2
1004413a:	0018      	movs	r0, r3
1004413c:	f022 fee4 	bl	10066f08 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
          APP_DBG_MSG("     - Hex_value = %x\n",
10044140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10044142:	3302      	adds	r3, #2
10044144:	789a      	ldrb	r2, [r3, #2]
10044146:	78d9      	ldrb	r1, [r3, #3]
10044148:	0209      	lsls	r1, r1, #8
1004414a:	430a      	orrs	r2, r1
1004414c:	7919      	ldrb	r1, [r3, #4]
1004414e:	0409      	lsls	r1, r1, #16
10044150:	430a      	orrs	r2, r1
10044152:	795b      	ldrb	r3, [r3, #5]
10044154:	061b      	lsls	r3, r3, #24
10044156:	4313      	orrs	r3, r2
10044158:	001a      	movs	r2, r3
1004415a:	4b58      	ldr	r3, [pc, #352]	@ (100442bc <BLEEVT_App_Notification+0x694>)
1004415c:	0011      	movs	r1, r2
1004415e:	0018      	movs	r0, r3
10044160:	f022 fed2 	bl	10066f08 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);

          /* Set confirm value to 1(YES) */
          confirm_value = 1;
10044164:	212f      	movs	r1, #47	@ 0x2f
10044166:	187b      	adds	r3, r7, r1
10044168:	2201      	movs	r2, #1
1004416a:	701a      	strb	r2, [r3, #0]
          /* USER CODE BEGIN ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE_0*/

          /* USER CODE END ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE_0*/

          ret = aci_gap_numeric_comparison_value_confirm_yesno(bleAppContext.BleApplicationContext_legacy.connectionHandle, confirm_value);
1004416c:	4b4d      	ldr	r3, [pc, #308]	@ (100442a4 <BLEEVT_App_Notification+0x67c>)
1004416e:	899a      	ldrh	r2, [r3, #12]
10044170:	254b      	movs	r5, #75	@ 0x4b
10044172:	197c      	adds	r4, r7, r5
10044174:	187b      	adds	r3, r7, r1
10044176:	781b      	ldrb	r3, [r3, #0]
10044178:	0019      	movs	r1, r3
1004417a:	0010      	movs	r0, r2
1004417c:	f00d fda6 	bl	10051ccc <aci_gap_numeric_comparison_value_confirm_yesno>
10044180:	0003      	movs	r3, r0
10044182:	7023      	strb	r3, [r4, #0]
          if (ret != BLE_STATUS_SUCCESS)
10044184:	197b      	adds	r3, r7, r5
10044186:	781b      	ldrb	r3, [r3, #0]
10044188:	2b00      	cmp	r3, #0
1004418a:	d007      	beq.n	1004419c <BLEEVT_App_Notification+0x574>
          {
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno : Fail, reason: 0x%02X\n", ret);
1004418c:	197b      	adds	r3, r7, r5
1004418e:	781a      	ldrb	r2, [r3, #0]
10044190:	4b4b      	ldr	r3, [pc, #300]	@ (100442c0 <BLEEVT_App_Notification+0x698>)
10044192:	0011      	movs	r1, r2
10044194:	0018      	movs	r0, r3
10044196:	f022 feb7 	bl	10066f08 <iprintf>
          }
          /* USER CODE BEGIN ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE*/

          /* USER CODE END ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE*/
        }
        break;
1004419a:	e061      	b.n	10044260 <BLEEVT_App_Notification+0x638>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno : Success\n");
1004419c:	4b49      	ldr	r3, [pc, #292]	@ (100442c4 <BLEEVT_App_Notification+0x69c>)
1004419e:	0018      	movs	r0, r3
100441a0:	f022 ff22 	bl	10066fe8 <puts>
        break;
100441a4:	e05c      	b.n	10044260 <BLEEVT_App_Notification+0x638>
      case ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE:
        {
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
100441a6:	4b48      	ldr	r3, [pc, #288]	@ (100442c8 <BLEEVT_App_Notification+0x6a0>)
100441a8:	0018      	movs	r0, r3
100441aa:	f022 ff1d 	bl	10066fe8 <puts>
          aci_gap_pairing_complete_event_rp0 *p_pairing_complete;
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
100441ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100441b0:	3302      	adds	r3, #2
100441b2:	627b      	str	r3, [r7, #36]	@ 0x24

          if (p_pairing_complete->Status != 0)
100441b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100441b6:	789b      	ldrb	r3, [r3, #2]
100441b8:	2b00      	cmp	r3, #0
100441ba:	d00a      	beq.n	100441d2 <BLEEVT_App_Notification+0x5aa>
          {
            APP_DBG_MSG("     - Pairing KO\n     - Status: 0x%02X\n     - Reason: 0x%02X\n",
100441bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100441be:	789b      	ldrb	r3, [r3, #2]
100441c0:	0019      	movs	r1, r3
100441c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100441c4:	78db      	ldrb	r3, [r3, #3]
100441c6:	001a      	movs	r2, r3
100441c8:	4b40      	ldr	r3, [pc, #256]	@ (100442cc <BLEEVT_App_Notification+0x6a4>)
100441ca:	0018      	movs	r0, r3
100441cc:	f022 fe9c 	bl	10066f08 <iprintf>
100441d0:	e003      	b.n	100441da <BLEEVT_App_Notification+0x5b2>
                        p_pairing_complete->Status, p_pairing_complete->Reason);
          }
          else
          {
            APP_DBG_MSG("     - Pairing Success\n");
100441d2:	4b3f      	ldr	r3, [pc, #252]	@ (100442d0 <BLEEVT_App_Notification+0x6a8>)
100441d4:	0018      	movs	r0, r3
100441d6:	f022 ff07 	bl	10066fe8 <puts>
          }
          APP_DBG_MSG("\n");
100441da:	200a      	movs	r0, #10
100441dc:	f022 fea4 	bl	10066f28 <putchar>

          /* USER CODE BEGIN ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE*/

          /* USER CODE END ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE*/
        }
        break;
100441e0:	e03e      	b.n	10044260 <BLEEVT_App_Notification+0x638>
      case ACI_GATT_SRV_READ_VSEVT_CODE :
        {
          APP_DBG_MSG(">>== ACI_GATT_SRV_READ_VSEVT_CODE\n");
100441e2:	4b3c      	ldr	r3, [pc, #240]	@ (100442d4 <BLEEVT_App_Notification+0x6ac>)
100441e4:	0018      	movs	r0, r3
100441e6:	f022 feff 	bl	10066fe8 <puts>

          aci_gatt_srv_read_event_rp0    *p_read;
          p_read = (aci_gatt_srv_read_event_rp0*)p_blecore_evt->data;
100441ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100441ec:	3302      	adds	r3, #2
100441ee:	63bb      	str	r3, [r7, #56]	@ 0x38
          uint8_t error_code = BLE_ATT_ERR_INSUFF_AUTHORIZATION;
100441f0:	2437      	movs	r4, #55	@ 0x37
100441f2:	193b      	adds	r3, r7, r4
100441f4:	2208      	movs	r2, #8
100441f6:	701a      	strb	r2, [r3, #0]

          APP_DBG_MSG("Handle 0x%04X\n",  p_read->Attribute_Handle);
100441f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100441fa:	791a      	ldrb	r2, [r3, #4]
100441fc:	795b      	ldrb	r3, [r3, #5]
100441fe:	021b      	lsls	r3, r3, #8
10044200:	4313      	orrs	r3, r2
10044202:	b29b      	uxth	r3, r3
10044204:	001a      	movs	r2, r3
10044206:	4b34      	ldr	r3, [pc, #208]	@ (100442d8 <BLEEVT_App_Notification+0x6b0>)
10044208:	0011      	movs	r1, r2
1004420a:	0018      	movs	r0, r3
1004420c:	f022 fe7c 	bl	10066f08 <iprintf>

          /* USER CODE BEGIN ACI_GATT_SRV_READ_VSEVT_CODE_1*/

          /* USER CODE END ACI_GATT_SRV_READ_VSEVT_CODE_1*/

          aci_gatt_srv_resp(p_read->Connection_Handle,
10044210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10044212:	781a      	ldrb	r2, [r3, #0]
10044214:	785b      	ldrb	r3, [r3, #1]
10044216:	021b      	lsls	r3, r3, #8
10044218:	4313      	orrs	r3, r2
1004421a:	b298      	uxth	r0, r3
1004421c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004421e:	789a      	ldrb	r2, [r3, #2]
10044220:	78db      	ldrb	r3, [r3, #3]
10044222:	021b      	lsls	r3, r3, #8
10044224:	4313      	orrs	r3, r2
10044226:	b299      	uxth	r1, r3
10044228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004422a:	791a      	ldrb	r2, [r3, #4]
1004422c:	795b      	ldrb	r3, [r3, #5]
1004422e:	021b      	lsls	r3, r3, #8
10044230:	4313      	orrs	r3, r2
10044232:	b29a      	uxth	r2, r3
10044234:	193b      	adds	r3, r7, r4
10044236:	781b      	ldrb	r3, [r3, #0]
10044238:	2400      	movs	r4, #0
1004423a:	9401      	str	r4, [sp, #4]
1004423c:	2400      	movs	r4, #0
1004423e:	9400      	str	r4, [sp, #0]
10044240:	f00d fdc5 	bl	10051dce <aci_gatt_srv_resp>
                            NULL);

          /* USER CODE BEGIN ACI_GATT_SRV_READ_VSEVT_CODE_2*/

          /* USER CODE END ACI_GATT_SRV_READ_VSEVT_CODE_2*/
          break;
10044244:	e00c      	b.n	10044260 <BLEEVT_App_Notification+0x638>
        /* USER CODE BEGIN EVT_VENDOR_1 */

        /* USER CODE END EVT_VENDOR_1 */
      default:
        /* USER CODE BEGIN EVT_VENDOR_DEFAULT */
        APP_DBG_MSG("HCI_VENDOR_EVT: 0x%04X\n", p_blecore_evt->ecode);
10044246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10044248:	781a      	ldrb	r2, [r3, #0]
1004424a:	785b      	ldrb	r3, [r3, #1]
1004424c:	021b      	lsls	r3, r3, #8
1004424e:	4313      	orrs	r3, r2
10044250:	b29b      	uxth	r3, r3
10044252:	001a      	movs	r2, r3
10044254:	4b21      	ldr	r3, [pc, #132]	@ (100442dc <BLEEVT_App_Notification+0x6b4>)
10044256:	0011      	movs	r1, r2
10044258:	0018      	movs	r0, r3
1004425a:	f022 fe55 	bl	10066f08 <iprintf>
        /* USER CODE END EVT_VENDOR_DEFAULT */
        break;
1004425e:	46c0      	nop			@ (mov r8, r8)
      }
    } /* HCI_VENDOR_EVT_CODE */
    break;
10044260:	e014      	b.n	1004428c <BLEEVT_App_Notification+0x664>

  case HCI_HARDWARE_ERROR_EVT_CODE:
    {
      hci_hardware_error_event_rp0 *p_hci_hardware_error_event;
      p_hci_hardware_error_event = (hci_hardware_error_event_rp0*)p_event_pckt->data;
10044262:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10044264:	3302      	adds	r3, #2
10044266:	60fb      	str	r3, [r7, #12]

      if (p_hci_hardware_error_event->Hardware_Code <= 0x03)
10044268:	68fb      	ldr	r3, [r7, #12]
1004426a:	781b      	ldrb	r3, [r3, #0]
1004426c:	2b03      	cmp	r3, #3
1004426e:	d80c      	bhi.n	1004428a <BLEEVT_App_Notification+0x662>
      {
        NVIC_SystemReset();
10044270:	f7ff fa2a 	bl	100436c8 <__NVIC_SystemReset>

    /* USER CODE END EVENT_PCKT */

  default:
    /* USER CODE BEGIN ECODE_DEFAULT*/
    APP_DBG_MSG("HCI_EVENT: 0x%02X\n", p_event_pckt->evt);
10044274:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10044276:	781b      	ldrb	r3, [r3, #0]
10044278:	001a      	movs	r2, r3
1004427a:	4b19      	ldr	r3, [pc, #100]	@ (100442e0 <BLEEVT_App_Notification+0x6b8>)
1004427c:	0011      	movs	r1, r2
1004427e:	0018      	movs	r0, r3
10044280:	f022 fe42 	bl	10066f08 <iprintf>
    /* USER CODE END ECODE_DEFAULT*/
    break;
10044284:	e002      	b.n	1004428c <BLEEVT_App_Notification+0x664>
    return;
10044286:	46c0      	nop			@ (mov r8, r8)
10044288:	e000      	b.n	1004428c <BLEEVT_App_Notification+0x664>
    break;
1004428a:	46c0      	nop			@ (mov r8, r8)
  }
}
1004428c:	46bd      	mov	sp, r7
1004428e:	b015      	add	sp, #84	@ 0x54
10044290:	bdf0      	pop	{r4, r5, r6, r7, pc}
10044292:	46c0      	nop			@ (mov r8, r8)
10044294:	10068ad0 	.word	0x10068ad0
10044298:	20000378 	.word	0x20000378
1004429c:	10068af8 	.word	0x10068af8
100442a0:	10068b28 	.word	0x10068b28
100442a4:	20000350 	.word	0x20000350
100442a8:	0001b207 	.word	0x0001b207
100442ac:	10068b4c 	.word	0x10068b4c
100442b0:	10068b80 	.word	0x10068b80
100442b4:	10068ba4 	.word	0x10068ba4
100442b8:	10068bd8 	.word	0x10068bd8
100442bc:	10068bf4 	.word	0x10068bf4
100442c0:	10068c0c 	.word	0x10068c0c
100442c4:	10068c58 	.word	0x10068c58
100442c8:	10068c98 	.word	0x10068c98
100442cc:	10068cc4 	.word	0x10068cc4
100442d0:	10068d04 	.word	0x10068d04
100442d4:	10068d1c 	.word	0x10068d1c
100442d8:	10068d40 	.word	0x10068d40
100442dc:	10068d50 	.word	0x10068d50
100442e0:	10068d68 	.word	0x10068d68

100442e4 <connection_complete_event>:
                                      uint8_t Peer_Address_Type,
                                      uint8_t Peer_Address[6],
                                      uint16_t Connection_Interval,
                                      uint16_t Peripheral_Latency,
                                      uint16_t Supervision_Timeout)
{
100442e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100442e6:	b087      	sub	sp, #28
100442e8:	af04      	add	r7, sp, #16
100442ea:	0004      	movs	r4, r0
100442ec:	0008      	movs	r0, r1
100442ee:	0011      	movs	r1, r2
100442f0:	603b      	str	r3, [r7, #0]
100442f2:	1dfb      	adds	r3, r7, #7
100442f4:	1c22      	adds	r2, r4, #0
100442f6:	701a      	strb	r2, [r3, #0]
100442f8:	1d3b      	adds	r3, r7, #4
100442fa:	1c02      	adds	r2, r0, #0
100442fc:	801a      	strh	r2, [r3, #0]
100442fe:	1dbb      	adds	r3, r7, #6
10044300:	1c0a      	adds	r2, r1, #0
10044302:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HCI_EVT_LE_CONN_COMPLETE_1 */

  /* USER CODE END HCI_EVT_LE_CONN_COMPLETE_1 */
  APP_DBG_MSG(">>== hci_le_connection_complete_event - Connection handle: 0x%04X\n", Connection_Handle);
10044304:	1d3b      	adds	r3, r7, #4
10044306:	881a      	ldrh	r2, [r3, #0]
10044308:	4b78      	ldr	r3, [pc, #480]	@ (100444ec <connection_complete_event+0x208>)
1004430a:	0011      	movs	r1, r2
1004430c:	0018      	movs	r0, r3
1004430e:	f022 fdfb 	bl	10066f08 <iprintf>
  APP_DBG_MSG("     - Connection established with @:%02x:%02x:%02x:%02x:%02x:%02x\n",
10044312:	683b      	ldr	r3, [r7, #0]
10044314:	3305      	adds	r3, #5
10044316:	781b      	ldrb	r3, [r3, #0]
10044318:	001c      	movs	r4, r3
1004431a:	683b      	ldr	r3, [r7, #0]
1004431c:	3304      	adds	r3, #4
1004431e:	781b      	ldrb	r3, [r3, #0]
10044320:	001d      	movs	r5, r3
10044322:	683b      	ldr	r3, [r7, #0]
10044324:	3303      	adds	r3, #3
10044326:	781b      	ldrb	r3, [r3, #0]
10044328:	001e      	movs	r6, r3
1004432a:	683b      	ldr	r3, [r7, #0]
1004432c:	3302      	adds	r3, #2
1004432e:	781b      	ldrb	r3, [r3, #0]
10044330:	001a      	movs	r2, r3
10044332:	683b      	ldr	r3, [r7, #0]
10044334:	3301      	adds	r3, #1
10044336:	781b      	ldrb	r3, [r3, #0]
10044338:	0019      	movs	r1, r3
1004433a:	683b      	ldr	r3, [r7, #0]
1004433c:	781b      	ldrb	r3, [r3, #0]
1004433e:	486c      	ldr	r0, [pc, #432]	@ (100444f0 <connection_complete_event+0x20c>)
10044340:	9302      	str	r3, [sp, #8]
10044342:	9101      	str	r1, [sp, #4]
10044344:	9200      	str	r2, [sp, #0]
10044346:	0033      	movs	r3, r6
10044348:	002a      	movs	r2, r5
1004434a:	0021      	movs	r1, r4
1004434c:	f022 fddc 	bl	10066f08 <iprintf>
              Peer_Address[4],
              Peer_Address[3],
              Peer_Address[2],
              Peer_Address[1],
              Peer_Address[0]);
  APP_DBG_MSG("     - Connection Interval:   %d.%02d ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n",
10044350:	2420      	movs	r4, #32
10044352:	193b      	adds	r3, r7, r4
10044354:	881b      	ldrh	r3, [r3, #0]
10044356:	0018      	movs	r0, r3
10044358:	f7fe f94e 	bl	100425f8 <__aeabi_i2d>
1004435c:	2200      	movs	r2, #0
1004435e:	4b65      	ldr	r3, [pc, #404]	@ (100444f4 <connection_complete_event+0x210>)
10044360:	f7fd faaa 	bl	100418b8 <__aeabi_dmul>
10044364:	0002      	movs	r2, r0
10044366:	000b      	movs	r3, r1
10044368:	0010      	movs	r0, r2
1004436a:	0019      	movs	r1, r3
1004436c:	f7fe f908 	bl	10042580 <__aeabi_d2iz>
10044370:	0006      	movs	r6, r0
10044372:	193b      	adds	r3, r7, r4
10044374:	881b      	ldrh	r3, [r3, #0]
10044376:	0018      	movs	r0, r3
10044378:	f7fe f93e 	bl	100425f8 <__aeabi_i2d>
1004437c:	2200      	movs	r2, #0
1004437e:	4b5d      	ldr	r3, [pc, #372]	@ (100444f4 <connection_complete_event+0x210>)
10044380:	f7fd fa9a 	bl	100418b8 <__aeabi_dmul>
10044384:	0002      	movs	r2, r0
10044386:	000b      	movs	r3, r1
10044388:	0010      	movs	r0, r2
1004438a:	0019      	movs	r1, r3
1004438c:	2200      	movs	r2, #0
1004438e:	2300      	movs	r3, #0
10044390:	f7fd f81c 	bl	100413cc <__aeabi_dcmpgt>
10044394:	1e03      	subs	r3, r0, #0
10044396:	d036      	beq.n	10044406 <connection_complete_event+0x122>
10044398:	193b      	adds	r3, r7, r4
1004439a:	881b      	ldrh	r3, [r3, #0]
1004439c:	0018      	movs	r0, r3
1004439e:	f7fe f92b 	bl	100425f8 <__aeabi_i2d>
100443a2:	2200      	movs	r2, #0
100443a4:	4b53      	ldr	r3, [pc, #332]	@ (100444f4 <connection_complete_event+0x210>)
100443a6:	f7fd fa87 	bl	100418b8 <__aeabi_dmul>
100443aa:	0002      	movs	r2, r0
100443ac:	000b      	movs	r3, r1
100443ae:	0014      	movs	r4, r2
100443b0:	001d      	movs	r5, r3
100443b2:	2320      	movs	r3, #32
100443b4:	18fb      	adds	r3, r7, r3
100443b6:	881b      	ldrh	r3, [r3, #0]
100443b8:	0018      	movs	r0, r3
100443ba:	f7fe f91d 	bl	100425f8 <__aeabi_i2d>
100443be:	2200      	movs	r2, #0
100443c0:	4b4c      	ldr	r3, [pc, #304]	@ (100444f4 <connection_complete_event+0x210>)
100443c2:	f7fd fa79 	bl	100418b8 <__aeabi_dmul>
100443c6:	0002      	movs	r2, r0
100443c8:	000b      	movs	r3, r1
100443ca:	0010      	movs	r0, r2
100443cc:	0019      	movs	r1, r3
100443ce:	f7fe f8d7 	bl	10042580 <__aeabi_d2iz>
100443d2:	0003      	movs	r3, r0
100443d4:	0018      	movs	r0, r3
100443d6:	f7fe f90f 	bl	100425f8 <__aeabi_i2d>
100443da:	0002      	movs	r2, r0
100443dc:	000b      	movs	r3, r1
100443de:	0020      	movs	r0, r4
100443e0:	0029      	movs	r1, r5
100443e2:	f7fd fd31 	bl	10041e48 <__aeabi_dsub>
100443e6:	0002      	movs	r2, r0
100443e8:	000b      	movs	r3, r1
100443ea:	0010      	movs	r0, r2
100443ec:	0019      	movs	r1, r3
100443ee:	2200      	movs	r2, #0
100443f0:	4b41      	ldr	r3, [pc, #260]	@ (100444f8 <connection_complete_event+0x214>)
100443f2:	f7fd fa61 	bl	100418b8 <__aeabi_dmul>
100443f6:	0002      	movs	r2, r0
100443f8:	000b      	movs	r3, r1
100443fa:	0010      	movs	r0, r2
100443fc:	0019      	movs	r1, r3
100443fe:	f7fe f8bf 	bl	10042580 <__aeabi_d2iz>
10044402:	0002      	movs	r2, r0
10044404:	e034      	b.n	10044470 <connection_complete_event+0x18c>
10044406:	2320      	movs	r3, #32
10044408:	18fb      	adds	r3, r7, r3
1004440a:	881b      	ldrh	r3, [r3, #0]
1004440c:	0018      	movs	r0, r3
1004440e:	f7fe f8f3 	bl	100425f8 <__aeabi_i2d>
10044412:	2200      	movs	r2, #0
10044414:	4b37      	ldr	r3, [pc, #220]	@ (100444f4 <connection_complete_event+0x210>)
10044416:	f7fd fa4f 	bl	100418b8 <__aeabi_dmul>
1004441a:	0002      	movs	r2, r0
1004441c:	000b      	movs	r3, r1
1004441e:	0010      	movs	r0, r2
10044420:	0019      	movs	r1, r3
10044422:	f7fe f8ad 	bl	10042580 <__aeabi_d2iz>
10044426:	0003      	movs	r3, r0
10044428:	0018      	movs	r0, r3
1004442a:	f7fe f8e5 	bl	100425f8 <__aeabi_i2d>
1004442e:	0004      	movs	r4, r0
10044430:	000d      	movs	r5, r1
10044432:	2320      	movs	r3, #32
10044434:	18fb      	adds	r3, r7, r3
10044436:	881b      	ldrh	r3, [r3, #0]
10044438:	0018      	movs	r0, r3
1004443a:	f7fe f8dd 	bl	100425f8 <__aeabi_i2d>
1004443e:	2200      	movs	r2, #0
10044440:	4b2c      	ldr	r3, [pc, #176]	@ (100444f4 <connection_complete_event+0x210>)
10044442:	f7fd fa39 	bl	100418b8 <__aeabi_dmul>
10044446:	0002      	movs	r2, r0
10044448:	000b      	movs	r3, r1
1004444a:	0020      	movs	r0, r4
1004444c:	0029      	movs	r1, r5
1004444e:	f7fd fcfb 	bl	10041e48 <__aeabi_dsub>
10044452:	0002      	movs	r2, r0
10044454:	000b      	movs	r3, r1
10044456:	0010      	movs	r0, r2
10044458:	0019      	movs	r1, r3
1004445a:	2200      	movs	r2, #0
1004445c:	4b26      	ldr	r3, [pc, #152]	@ (100444f8 <connection_complete_event+0x214>)
1004445e:	f7fd fa2b 	bl	100418b8 <__aeabi_dmul>
10044462:	0002      	movs	r2, r0
10044464:	000b      	movs	r3, r1
10044466:	0010      	movs	r0, r2
10044468:	0019      	movs	r1, r3
1004446a:	f7fe f889 	bl	10042580 <__aeabi_d2iz>
1004446e:	0002      	movs	r2, r0
10044470:	2324      	movs	r3, #36	@ 0x24
10044472:	18fb      	adds	r3, r7, r3
10044474:	881c      	ldrh	r4, [r3, #0]
10044476:	2328      	movs	r3, #40	@ 0x28
10044478:	18fb      	adds	r3, r7, r3
1004447a:	8819      	ldrh	r1, [r3, #0]
1004447c:	000b      	movs	r3, r1
1004447e:	009b      	lsls	r3, r3, #2
10044480:	185b      	adds	r3, r3, r1
10044482:	005b      	lsls	r3, r3, #1
10044484:	481d      	ldr	r0, [pc, #116]	@ (100444fc <connection_complete_event+0x218>)
10044486:	9300      	str	r3, [sp, #0]
10044488:	0023      	movs	r3, r4
1004448a:	0031      	movs	r1, r6
1004448c:	f022 fd3c 	bl	10066f08 <iprintf>
              FRACTIONAL_2DIGITS(Connection_Interval*1.25),
              Peripheral_Latency,
              Supervision_Timeout * 10
              );

  if (bleAppContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
10044490:	4b1b      	ldr	r3, [pc, #108]	@ (10044500 <connection_complete_event+0x21c>)
10044492:	7b9b      	ldrb	r3, [r3, #14]
10044494:	2b01      	cmp	r3, #1
10044496:	d103      	bne.n	100444a0 <connection_complete_event+0x1bc>
  {
    /* Connection as client */
    bleAppContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
10044498:	4b19      	ldr	r3, [pc, #100]	@ (10044500 <connection_complete_event+0x21c>)
1004449a:	2203      	movs	r2, #3
1004449c:	739a      	strb	r2, [r3, #14]
1004449e:	e002      	b.n	100444a6 <connection_complete_event+0x1c2>
  }
  else
  {
    /* Connection as server */
    bleAppContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
100444a0:	4b17      	ldr	r3, [pc, #92]	@ (10044500 <connection_complete_event+0x21c>)
100444a2:	2202      	movs	r2, #2
100444a4:	739a      	strb	r2, [r3, #14]
  }
  bleAppContext.BleApplicationContext_legacy.connectionHandle = Connection_Handle;
100444a6:	4b16      	ldr	r3, [pc, #88]	@ (10044500 <connection_complete_event+0x21c>)
100444a8:	1d3a      	adds	r2, r7, #4
100444aa:	8812      	ldrh	r2, [r2, #0]
100444ac:	819a      	strh	r2, [r3, #12]

  P2P_SERVERHandleNotification.EvtOpcode = P2P_SERVER_CONN_HANDLE_EVT;
100444ae:	4b15      	ldr	r3, [pc, #84]	@ (10044504 <connection_complete_event+0x220>)
100444b0:	2200      	movs	r2, #0
100444b2:	701a      	strb	r2, [r3, #0]
  P2P_SERVERHandleNotification.ConnectionHandle = Connection_Handle;
100444b4:	4b13      	ldr	r3, [pc, #76]	@ (10044504 <connection_complete_event+0x220>)
100444b6:	1d3a      	adds	r2, r7, #4
100444b8:	8812      	ldrh	r2, [r2, #0]
100444ba:	805a      	strh	r2, [r3, #2]
  P2P_SERVER_APP_EvtRx(&P2P_SERVERHandleNotification);
100444bc:	4b11      	ldr	r3, [pc, #68]	@ (10044504 <connection_complete_event+0x220>)
100444be:	0018      	movs	r0, r3
100444c0:	f001 fbf2 	bl	10045ca8 <P2P_SERVER_APP_EvtRx>
  OTAHandleNotification.EvtOpcode = OTA_CONN_HANDLE_EVT;
100444c4:	4b10      	ldr	r3, [pc, #64]	@ (10044508 <connection_complete_event+0x224>)
100444c6:	2200      	movs	r2, #0
100444c8:	701a      	strb	r2, [r3, #0]
  OTAHandleNotification.ConnectionHandle = Connection_Handle;
100444ca:	4b0f      	ldr	r3, [pc, #60]	@ (10044508 <connection_complete_event+0x224>)
100444cc:	1d3a      	adds	r2, r7, #4
100444ce:	8812      	ldrh	r2, [r2, #0]
100444d0:	805a      	strh	r2, [r3, #2]
  OTA_APP_EvtRx(&OTAHandleNotification);
100444d2:	4b0d      	ldr	r3, [pc, #52]	@ (10044508 <connection_complete_event+0x224>)
100444d4:	0018      	movs	r0, r3
100444d6:	f001 f8c3 	bl	10045660 <OTA_APP_EvtRx>

  /* USER CODE BEGIN HCI_EVT_LE_CONN_COMPLETE */
  /* The connection is done, there is no need anymore to schedule the LP ADV */
  HAL_RADIO_TIMER_StopVirtualTimer(&(bleAppContext.Advertising_mgr_timer_Id));
100444da:	4b0c      	ldr	r3, [pc, #48]	@ (1004450c <connection_complete_event+0x228>)
100444dc:	0018      	movs	r0, r3
100444de:	f00a fe81 	bl	1004f1e4 <HAL_RADIO_TIMER_StopVirtualTimer>
  /* USER CODE END HCI_EVT_LE_CONN_COMPLETE */
}/* end hci_le_connection_complete_event() */
100444e2:	46c0      	nop			@ (mov r8, r8)
100444e4:	46bd      	mov	sp, r7
100444e6:	b003      	add	sp, #12
100444e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100444ea:	46c0      	nop			@ (mov r8, r8)
100444ec:	10068d7c 	.word	0x10068d7c
100444f0:	10068dc0 	.word	0x10068dc0
100444f4:	3ff40000 	.word	0x3ff40000
100444f8:	40590000 	.word	0x40590000
100444fc:	10068e04 	.word	0x10068e04
10044500:	20000350 	.word	0x20000350
10044504:	20000398 	.word	0x20000398
10044508:	2000039c 	.word	0x2000039c
1004450c:	20000360 	.word	0x20000360

10044510 <APP_BLE_Procedure_Gap_General>:
{
  return bleAppContext.Device_Connection_Status;
}

void APP_BLE_Procedure_Gap_General(ProcGapGeneralId_t ProcGapGeneralId)
{
10044510:	b5b0      	push	{r4, r5, r7, lr}
10044512:	b086      	sub	sp, #24
10044514:	af02      	add	r7, sp, #8
10044516:	0002      	movs	r2, r0
10044518:	1dfb      	adds	r3, r7, #7
1004451a:	701a      	strb	r2, [r3, #0]
  tBleStatus status;

  switch(ProcGapGeneralId)
1004451c:	1dfb      	adds	r3, r7, #7
1004451e:	781b      	ldrb	r3, [r3, #0]
10044520:	2b02      	cmp	r3, #2
10044522:	d100      	bne.n	10044526 <APP_BLE_Procedure_Gap_General+0x16>
10044524:	e09c      	b.n	10044660 <APP_BLE_Procedure_Gap_General+0x150>
10044526:	dd00      	ble.n	1004452a <APP_BLE_Procedure_Gap_General+0x1a>
10044528:	e0b4      	b.n	10044694 <APP_BLE_Procedure_Gap_General+0x184>
1004452a:	2b00      	cmp	r3, #0
1004452c:	d003      	beq.n	10044536 <APP_BLE_Procedure_Gap_General+0x26>
1004452e:	2b01      	cmp	r3, #1
10044530:	d100      	bne.n	10044534 <APP_BLE_Procedure_Gap_General+0x24>
10044532:	e078      	b.n	10044626 <APP_BLE_Procedure_Gap_General+0x116>
    }
    /* USER CODE BEGIN GAP_GENERAL */

    /* USER CODE END GAP_GENERAL */
    default:
      break;
10044534:	e0ae      	b.n	10044694 <APP_BLE_Procedure_Gap_General+0x184>
      status = hci_le_read_phy(bleAppContext.BleApplicationContext_legacy.connectionHandle, &phy_tx, &phy_rx);
10044536:	4b5a      	ldr	r3, [pc, #360]	@ (100446a0 <APP_BLE_Procedure_Gap_General+0x190>)
10044538:	899b      	ldrh	r3, [r3, #12]
1004453a:	250f      	movs	r5, #15
1004453c:	197c      	adds	r4, r7, r5
1004453e:	220d      	movs	r2, #13
10044540:	18ba      	adds	r2, r7, r2
10044542:	210e      	movs	r1, #14
10044544:	1879      	adds	r1, r7, r1
10044546:	0018      	movs	r0, r3
10044548:	f00d fcb7 	bl	10051eba <hci_le_read_phy>
1004454c:	0003      	movs	r3, r0
1004454e:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
10044550:	197b      	adds	r3, r7, r5
10044552:	781b      	ldrb	r3, [r3, #0]
10044554:	2b00      	cmp	r3, #0
10044556:	d007      	beq.n	10044568 <APP_BLE_Procedure_Gap_General+0x58>
        APP_DBG_MSG("hci_le_read_phy failure: reason=0x%02X\n",status);
10044558:	197b      	adds	r3, r7, r5
1004455a:	781a      	ldrb	r2, [r3, #0]
1004455c:	4b51      	ldr	r3, [pc, #324]	@ (100446a4 <APP_BLE_Procedure_Gap_General+0x194>)
1004455e:	0011      	movs	r1, r2
10044560:	0018      	movs	r0, r3
10044562:	f022 fcd1 	bl	10066f08 <iprintf>
      break;
10044566:	e096      	b.n	10044696 <APP_BLE_Procedure_Gap_General+0x186>
        APP_DBG_MSG("==>> hci_le_read_phy - Success\n");
10044568:	4b4f      	ldr	r3, [pc, #316]	@ (100446a8 <APP_BLE_Procedure_Gap_General+0x198>)
1004456a:	0018      	movs	r0, r3
1004456c:	f022 fd3c 	bl	10066fe8 <puts>
        APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d\n", phy_tx, phy_rx);
10044570:	240e      	movs	r4, #14
10044572:	193b      	adds	r3, r7, r4
10044574:	781b      	ldrb	r3, [r3, #0]
10044576:	0019      	movs	r1, r3
10044578:	250d      	movs	r5, #13
1004457a:	197b      	adds	r3, r7, r5
1004457c:	781b      	ldrb	r3, [r3, #0]
1004457e:	001a      	movs	r2, r3
10044580:	4b4a      	ldr	r3, [pc, #296]	@ (100446ac <APP_BLE_Procedure_Gap_General+0x19c>)
10044582:	0018      	movs	r0, r3
10044584:	f022 fcc0 	bl	10066f08 <iprintf>
        if ((phy_tx == HCI_TX_PHY_LE_2M) && (phy_rx == HCI_RX_PHY_LE_2M))
10044588:	193b      	adds	r3, r7, r4
1004458a:	781b      	ldrb	r3, [r3, #0]
1004458c:	2b02      	cmp	r3, #2
1004458e:	d126      	bne.n	100445de <APP_BLE_Procedure_Gap_General+0xce>
10044590:	197b      	adds	r3, r7, r5
10044592:	781b      	ldrb	r3, [r3, #0]
10044594:	2b02      	cmp	r3, #2
10044596:	d122      	bne.n	100445de <APP_BLE_Procedure_Gap_General+0xce>
          APP_DBG_MSG("==>> hci_le_set_phy PHY Param  TX= %d, RX= %d - ", HCI_TX_PHY_LE_1M, HCI_RX_PHY_LE_1M);
10044598:	4b45      	ldr	r3, [pc, #276]	@ (100446b0 <APP_BLE_Procedure_Gap_General+0x1a0>)
1004459a:	2201      	movs	r2, #1
1004459c:	2101      	movs	r1, #1
1004459e:	0018      	movs	r0, r3
100445a0:	f022 fcb2 	bl	10066f08 <iprintf>
          status = hci_le_set_phy(bleAppContext.BleApplicationContext_legacy.connectionHandle, 0, HCI_TX_PHYS_LE_1M_PREF, HCI_RX_PHYS_LE_1M_PREF, 0);
100445a4:	4b3e      	ldr	r3, [pc, #248]	@ (100446a0 <APP_BLE_Procedure_Gap_General+0x190>)
100445a6:	8998      	ldrh	r0, [r3, #12]
100445a8:	250f      	movs	r5, #15
100445aa:	197c      	adds	r4, r7, r5
100445ac:	2300      	movs	r3, #0
100445ae:	9300      	str	r3, [sp, #0]
100445b0:	2301      	movs	r3, #1
100445b2:	2201      	movs	r2, #1
100445b4:	2100      	movs	r1, #0
100445b6:	f00d fcb2 	bl	10051f1e <hci_le_set_phy>
100445ba:	0003      	movs	r3, r0
100445bc:	7023      	strb	r3, [r4, #0]
          if (status != BLE_STATUS_SUCCESS)
100445be:	197b      	adds	r3, r7, r5
100445c0:	781b      	ldrb	r3, [r3, #0]
100445c2:	2b00      	cmp	r3, #0
100445c4:	d004      	beq.n	100445d0 <APP_BLE_Procedure_Gap_General+0xc0>
            APP_DBG_MSG("Fail\n");
100445c6:	4b3b      	ldr	r3, [pc, #236]	@ (100446b4 <APP_BLE_Procedure_Gap_General+0x1a4>)
100445c8:	0018      	movs	r0, r3
100445ca:	f022 fd0d 	bl	10066fe8 <puts>
          if (status != BLE_STATUS_SUCCESS)
100445ce:	e029      	b.n	10044624 <APP_BLE_Procedure_Gap_General+0x114>
            APP_DBG_MSG("Success\n");
100445d0:	4b39      	ldr	r3, [pc, #228]	@ (100446b8 <APP_BLE_Procedure_Gap_General+0x1a8>)
100445d2:	0018      	movs	r0, r3
100445d4:	f022 fd08 	bl	10066fe8 <puts>
            gap_cmd_resp_wait();/* waiting for HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE */
100445d8:	f000 f9d6 	bl	10044988 <gap_cmd_resp_wait>
          if (status != BLE_STATUS_SUCCESS)
100445dc:	e022      	b.n	10044624 <APP_BLE_Procedure_Gap_General+0x114>
          APP_DBG_MSG("==>> hci_le_set_phy PHY Param  TX= %d, RX= %d - ", HCI_TX_PHYS_LE_2M_PREF, HCI_RX_PHYS_LE_2M_PREF);
100445de:	4b34      	ldr	r3, [pc, #208]	@ (100446b0 <APP_BLE_Procedure_Gap_General+0x1a0>)
100445e0:	2202      	movs	r2, #2
100445e2:	2102      	movs	r1, #2
100445e4:	0018      	movs	r0, r3
100445e6:	f022 fc8f 	bl	10066f08 <iprintf>
          status = hci_le_set_phy(bleAppContext.BleApplicationContext_legacy.connectionHandle, 0, HCI_TX_PHYS_LE_2M_PREF, HCI_RX_PHYS_LE_2M_PREF, 0);
100445ea:	4b2d      	ldr	r3, [pc, #180]	@ (100446a0 <APP_BLE_Procedure_Gap_General+0x190>)
100445ec:	8998      	ldrh	r0, [r3, #12]
100445ee:	250f      	movs	r5, #15
100445f0:	197c      	adds	r4, r7, r5
100445f2:	2300      	movs	r3, #0
100445f4:	9300      	str	r3, [sp, #0]
100445f6:	2302      	movs	r3, #2
100445f8:	2202      	movs	r2, #2
100445fa:	2100      	movs	r1, #0
100445fc:	f00d fc8f 	bl	10051f1e <hci_le_set_phy>
10044600:	0003      	movs	r3, r0
10044602:	7023      	strb	r3, [r4, #0]
          if (status != BLE_STATUS_SUCCESS)
10044604:	197b      	adds	r3, r7, r5
10044606:	781b      	ldrb	r3, [r3, #0]
10044608:	2b00      	cmp	r3, #0
1004460a:	d004      	beq.n	10044616 <APP_BLE_Procedure_Gap_General+0x106>
            APP_DBG_MSG("Fail\n");
1004460c:	4b29      	ldr	r3, [pc, #164]	@ (100446b4 <APP_BLE_Procedure_Gap_General+0x1a4>)
1004460e:	0018      	movs	r0, r3
10044610:	f022 fcea 	bl	10066fe8 <puts>
      break;
10044614:	e03f      	b.n	10044696 <APP_BLE_Procedure_Gap_General+0x186>
            APP_DBG_MSG("Success\n");
10044616:	4b28      	ldr	r3, [pc, #160]	@ (100446b8 <APP_BLE_Procedure_Gap_General+0x1a8>)
10044618:	0018      	movs	r0, r3
1004461a:	f022 fce5 	bl	10066fe8 <puts>
            gap_cmd_resp_wait();/* waiting for HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE */
1004461e:	f000 f9b3 	bl	10044988 <gap_cmd_resp_wait>
      break;
10044622:	e038      	b.n	10044696 <APP_BLE_Procedure_Gap_General+0x186>
10044624:	e037      	b.n	10044696 <APP_BLE_Procedure_Gap_General+0x186>
      status = aci_gap_terminate(bleAppContext.BleApplicationContext_legacy.connectionHandle, BLE_ERROR_TERMINATED_REMOTE_USER);
10044626:	4b1e      	ldr	r3, [pc, #120]	@ (100446a0 <APP_BLE_Procedure_Gap_General+0x190>)
10044628:	899b      	ldrh	r3, [r3, #12]
1004462a:	250f      	movs	r5, #15
1004462c:	197c      	adds	r4, r7, r5
1004462e:	2113      	movs	r1, #19
10044630:	0018      	movs	r0, r3
10044632:	f00d fae3 	bl	10051bfc <aci_gap_terminate>
10044636:	0003      	movs	r3, r0
10044638:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
1004463a:	197b      	adds	r3, r7, r5
1004463c:	781b      	ldrb	r3, [r3, #0]
1004463e:	2b00      	cmp	r3, #0
10044640:	d007      	beq.n	10044652 <APP_BLE_Procedure_Gap_General+0x142>
         APP_DBG_MSG("aci_gap_terminate failure: reason=0x%02X\n", status);
10044642:	197b      	adds	r3, r7, r5
10044644:	781a      	ldrb	r2, [r3, #0]
10044646:	4b1d      	ldr	r3, [pc, #116]	@ (100446bc <APP_BLE_Procedure_Gap_General+0x1ac>)
10044648:	0011      	movs	r1, r2
1004464a:	0018      	movs	r0, r3
1004464c:	f022 fc5c 	bl	10066f08 <iprintf>
      break;
10044650:	e021      	b.n	10044696 <APP_BLE_Procedure_Gap_General+0x186>
        APP_DBG_MSG("==>> aci_gap_terminate : Success\n");
10044652:	4b1b      	ldr	r3, [pc, #108]	@ (100446c0 <APP_BLE_Procedure_Gap_General+0x1b0>)
10044654:	0018      	movs	r0, r3
10044656:	f022 fcc7 	bl	10066fe8 <puts>
        gap_cmd_resp_wait();/* waiting for HCI_DISCONNECTION_COMPLETE_EVT_CODE */
1004465a:	f000 f995 	bl	10044988 <gap_cmd_resp_wait>
      break;
1004465e:	e01a      	b.n	10044696 <APP_BLE_Procedure_Gap_General+0x186>
      status =aci_gatt_clt_exchange_config(bleAppContext.BleApplicationContext_legacy.connectionHandle);
10044660:	4b0f      	ldr	r3, [pc, #60]	@ (100446a0 <APP_BLE_Procedure_Gap_General+0x190>)
10044662:	899b      	ldrh	r3, [r3, #12]
10044664:	250f      	movs	r5, #15
10044666:	197c      	adds	r4, r7, r5
10044668:	0018      	movs	r0, r3
1004466a:	f00d fbd9 	bl	10051e20 <aci_gatt_clt_exchange_config>
1004466e:	0003      	movs	r3, r0
10044670:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
10044672:	197b      	adds	r3, r7, r5
10044674:	781b      	ldrb	r3, [r3, #0]
10044676:	2b00      	cmp	r3, #0
10044678:	d007      	beq.n	1004468a <APP_BLE_Procedure_Gap_General+0x17a>
        APP_DBG_MSG("aci_gatt_clt_exchange_config failure: reason=0x%02X\n", status);
1004467a:	197b      	adds	r3, r7, r5
1004467c:	781a      	ldrb	r2, [r3, #0]
1004467e:	4b11      	ldr	r3, [pc, #68]	@ (100446c4 <APP_BLE_Procedure_Gap_General+0x1b4>)
10044680:	0011      	movs	r1, r2
10044682:	0018      	movs	r0, r3
10044684:	f022 fc40 	bl	10066f08 <iprintf>
      break;
10044688:	e005      	b.n	10044696 <APP_BLE_Procedure_Gap_General+0x186>
        APP_DBG_MSG("==>> aci_gatt_clt_exchange_config : Success\n");
1004468a:	4b0f      	ldr	r3, [pc, #60]	@ (100446c8 <APP_BLE_Procedure_Gap_General+0x1b8>)
1004468c:	0018      	movs	r0, r3
1004468e:	f022 fcab 	bl	10066fe8 <puts>
      break;
10044692:	e000      	b.n	10044696 <APP_BLE_Procedure_Gap_General+0x186>
      break;
10044694:	46c0      	nop			@ (mov r8, r8)
  }
  return;
10044696:	46c0      	nop			@ (mov r8, r8)
}
10044698:	46bd      	mov	sp, r7
1004469a:	b004      	add	sp, #16
1004469c:	bdb0      	pop	{r4, r5, r7, pc}
1004469e:	46c0      	nop			@ (mov r8, r8)
100446a0:	20000350 	.word	0x20000350
100446a4:	10068e74 	.word	0x10068e74
100446a8:	10068e9c 	.word	0x10068e9c
100446ac:	10068ebc 	.word	0x10068ebc
100446b0:	10068edc 	.word	0x10068edc
100446b4:	10068f10 	.word	0x10068f10
100446b8:	10068f18 	.word	0x10068f18
100446bc:	10068f20 	.word	0x10068f20
100446c0:	10068f4c 	.word	0x10068f4c
100446c4:	10068f70 	.word	0x10068f70
100446c8:	10068fa8 	.word	0x10068fa8

100446cc <APP_BLE_Procedure_Gap_Peripheral>:

void APP_BLE_Procedure_Gap_Peripheral(ProcGapPeripheralId_t ProcGapPeripheralId)
{
100446cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100446ce:	b095      	sub	sp, #84	@ 0x54
100446d0:	af0c      	add	r7, sp, #48	@ 0x30
100446d2:	0002      	movs	r2, r0
100446d4:	1dfb      	adds	r3, r7, #7
100446d6:	701a      	strb	r2, [r3, #0]
  tBleStatus status;
  uint32_t paramA = ADV_INTERVAL_MIN;
100446d8:	2380      	movs	r3, #128	@ 0x80
100446da:	61fb      	str	r3, [r7, #28]
  uint32_t paramB = ADV_INTERVAL_MAX;
100446dc:	23a0      	movs	r3, #160	@ 0xa0
100446de:	61bb      	str	r3, [r7, #24]
  uint32_t paramC, paramD;

  /* First set parameters before calling ACI APIs, only if needed */
  switch(ProcGapPeripheralId)
100446e0:	1dfb      	adds	r3, r7, #7
100446e2:	781b      	ldrb	r3, [r3, #0]
100446e4:	2b05      	cmp	r3, #5
100446e6:	d858      	bhi.n	1004479a <APP_BLE_Procedure_Gap_Peripheral+0xce>
100446e8:	009a      	lsls	r2, r3, #2
100446ea:	4b94      	ldr	r3, [pc, #592]	@ (1004493c <APP_BLE_Procedure_Gap_Peripheral+0x270>)
100446ec:	18d3      	adds	r3, r2, r3
100446ee:	681b      	ldr	r3, [r3, #0]
100446f0:	469f      	mov	pc, r3
  {
    case PROC_GAP_PERIPH_ADVERTISE_START_FAST:
    {
      paramA = ADV_INTERVAL_MIN;
100446f2:	2380      	movs	r3, #128	@ 0x80
100446f4:	61fb      	str	r3, [r7, #28]
      paramB = ADV_INTERVAL_MAX;
100446f6:	23a0      	movs	r3, #160	@ 0xa0
100446f8:	61bb      	str	r3, [r7, #24]
      paramC = APP_BLE_ADV_FAST;
100446fa:	2304      	movs	r3, #4
100446fc:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_START_FAST */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_START_FAST */
      break;
100446fe:	e04d      	b.n	1004479c <APP_BLE_Procedure_Gap_Peripheral+0xd0>
    }/* PROC_GAP_PERIPH_ADVERTISE_START_FAST */
    case PROC_GAP_PERIPH_ADVERTISE_START_LP:
    {
      paramA = ADV_LP_INTERVAL_MIN;
10044700:	23c8      	movs	r3, #200	@ 0xc8
10044702:	00db      	lsls	r3, r3, #3
10044704:	61fb      	str	r3, [r7, #28]
      paramB = ADV_LP_INTERVAL_MAX;
10044706:	23fa      	movs	r3, #250	@ 0xfa
10044708:	011b      	lsls	r3, r3, #4
1004470a:	61bb      	str	r3, [r7, #24]
      paramC = APP_BLE_ADV_LP;
1004470c:	2305      	movs	r3, #5
1004470e:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_START_LP */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_START_LP */
      break;
10044710:	e044      	b.n	1004479c <APP_BLE_Procedure_Gap_Peripheral+0xd0>
    }/* PROC_GAP_PERIPH_ADVERTISE_START_LP */
    case PROC_GAP_PERIPH_ADVERTISE_STOP:
    {
      paramC = APP_BLE_IDLE;
10044712:	2300      	movs	r3, #0
10044714:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_STOP */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_STOP */
      break;
10044716:	e041      	b.n	1004479c <APP_BLE_Procedure_Gap_Peripheral+0xd0>
    }/* PROC_GAP_PERIPH_ADVERTISE_STOP */
    case PROC_GAP_PERIPH_CONN_PARAM_UPDATE:
    {
      paramA = CONN_INT_MS(1000);
10044718:	23c8      	movs	r3, #200	@ 0xc8
1004471a:	009b      	lsls	r3, r3, #2
1004471c:	61fb      	str	r3, [r7, #28]
      paramB = CONN_INT_MS(1000);
1004471e:	23c8      	movs	r3, #200	@ 0xc8
10044720:	009b      	lsls	r3, r3, #2
10044722:	61bb      	str	r3, [r7, #24]
      paramC = 0x0000;
10044724:	2300      	movs	r3, #0
10044726:	617b      	str	r3, [r7, #20]
      paramD = 0x01F4;
10044728:	23fa      	movs	r3, #250	@ 0xfa
1004472a:	005b      	lsls	r3, r3, #1
1004472c:	613b      	str	r3, [r7, #16]

      /* USER CODE BEGIN CONN_PARAM_UPDATE */
      if (bleAppContext.connIntervalFlag != 0)
1004472e:	4b84      	ldr	r3, [pc, #528]	@ (10044940 <APP_BLE_Procedure_Gap_Peripheral+0x274>)
10044730:	2240      	movs	r2, #64	@ 0x40
10044732:	5c9b      	ldrb	r3, [r3, r2]
10044734:	2b00      	cmp	r3, #0
10044736:	d008      	beq.n	1004474a <APP_BLE_Procedure_Gap_Peripheral+0x7e>
      {
        bleAppContext.connIntervalFlag = 0;
10044738:	4b81      	ldr	r3, [pc, #516]	@ (10044940 <APP_BLE_Procedure_Gap_Peripheral+0x274>)
1004473a:	2240      	movs	r2, #64	@ 0x40
1004473c:	2100      	movs	r1, #0
1004473e:	5499      	strb	r1, [r3, r2]
        paramA = CONN_INT_MS(50);
10044740:	2328      	movs	r3, #40	@ 0x28
10044742:	61fb      	str	r3, [r7, #28]
        paramB = CONN_INT_MS(50);
10044744:	2328      	movs	r3, #40	@ 0x28
10044746:	61bb      	str	r3, [r7, #24]
        bleAppContext.connIntervalFlag = 1;
        paramA = CONN_INT_MS(1000);
        paramB = CONN_INT_MS(1000);
      }
      /* USER CODE END CONN_PARAM_UPDATE */
      break;
10044748:	e028      	b.n	1004479c <APP_BLE_Procedure_Gap_Peripheral+0xd0>
        bleAppContext.connIntervalFlag = 1;
1004474a:	4b7d      	ldr	r3, [pc, #500]	@ (10044940 <APP_BLE_Procedure_Gap_Peripheral+0x274>)
1004474c:	2240      	movs	r2, #64	@ 0x40
1004474e:	2101      	movs	r1, #1
10044750:	5499      	strb	r1, [r3, r2]
        paramA = CONN_INT_MS(1000);
10044752:	23c8      	movs	r3, #200	@ 0xc8
10044754:	009b      	lsls	r3, r3, #2
10044756:	61fb      	str	r3, [r7, #28]
        paramB = CONN_INT_MS(1000);
10044758:	23c8      	movs	r3, #200	@ 0xc8
1004475a:	009b      	lsls	r3, r3, #2
1004475c:	61bb      	str	r3, [r7, #24]
      break;
1004475e:	e01d      	b.n	1004479c <APP_BLE_Procedure_Gap_Peripheral+0xd0>
    }/* PROC_GAP_PERIPH_CONN_PARAM_UPDATE */
    case PROC_GAP_PERIPH_CONN_TERMINATE:
    {
      status = aci_gap_terminate(bleAppContext.BleApplicationContext_legacy.connectionHandle, 0x13);
10044760:	4b77      	ldr	r3, [pc, #476]	@ (10044940 <APP_BLE_Procedure_Gap_Peripheral+0x274>)
10044762:	899b      	ldrh	r3, [r3, #12]
10044764:	250f      	movs	r5, #15
10044766:	197c      	adds	r4, r7, r5
10044768:	2113      	movs	r1, #19
1004476a:	0018      	movs	r0, r3
1004476c:	f00d fa46 	bl	10051bfc <aci_gap_terminate>
10044770:	0003      	movs	r3, r0
10044772:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
10044774:	197b      	adds	r3, r7, r5
10044776:	781b      	ldrb	r3, [r3, #0]
10044778:	2b00      	cmp	r3, #0
1004477a:	d007      	beq.n	1004478c <APP_BLE_Procedure_Gap_Peripheral+0xc0>
      {
         APP_DBG_MSG("aci_gap_terminate failure: reason=0x%02X\n", status);
1004477c:	197b      	adds	r3, r7, r5
1004477e:	781a      	ldrb	r2, [r3, #0]
10044780:	4b70      	ldr	r3, [pc, #448]	@ (10044944 <APP_BLE_Procedure_Gap_Peripheral+0x278>)
10044782:	0011      	movs	r1, r2
10044784:	0018      	movs	r0, r3
10044786:	f022 fbbf 	bl	10066f08 <iprintf>
      else
      {
        APP_DBG_MSG("==>> aci_gap_terminate : Success\n");
        gap_cmd_resp_wait();/* waiting for HCI_DISCONNECTION_COMPLETE_EVT_CODE */
      }
      break;
1004478a:	e007      	b.n	1004479c <APP_BLE_Procedure_Gap_Peripheral+0xd0>
        APP_DBG_MSG("==>> aci_gap_terminate : Success\n");
1004478c:	4b6e      	ldr	r3, [pc, #440]	@ (10044948 <APP_BLE_Procedure_Gap_Peripheral+0x27c>)
1004478e:	0018      	movs	r0, r3
10044790:	f022 fc2a 	bl	10066fe8 <puts>
        gap_cmd_resp_wait();/* waiting for HCI_DISCONNECTION_COMPLETE_EVT_CODE */
10044794:	f000 f8f8 	bl	10044988 <gap_cmd_resp_wait>
      break;
10044798:	e000      	b.n	1004479c <APP_BLE_Procedure_Gap_Peripheral+0xd0>
    }
    /* PROC_GAP_PERIPH_CONN_TERMINATE */
    default:
      break;
1004479a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Call ACI APIs */
  switch(ProcGapPeripheralId)
1004479c:	1dfb      	adds	r3, r7, #7
1004479e:	781b      	ldrb	r3, [r3, #0]
100447a0:	2b06      	cmp	r3, #6
100447a2:	d100      	bne.n	100447a6 <APP_BLE_Procedure_Gap_Peripheral+0xda>
100447a4:	e0c3      	b.n	1004492e <APP_BLE_Procedure_Gap_Peripheral+0x262>
100447a6:	dd00      	ble.n	100447aa <APP_BLE_Procedure_Gap_Peripheral+0xde>
100447a8:	e0c3      	b.n	10044932 <APP_BLE_Procedure_Gap_Peripheral+0x266>
100447aa:	2b04      	cmp	r3, #4
100447ac:	d100      	bne.n	100447b0 <APP_BLE_Procedure_Gap_Peripheral+0xe4>
100447ae:	e09b      	b.n	100448e8 <APP_BLE_Procedure_Gap_Peripheral+0x21c>
100447b0:	dd00      	ble.n	100447b4 <APP_BLE_Procedure_Gap_Peripheral+0xe8>
100447b2:	e0be      	b.n	10044932 <APP_BLE_Procedure_Gap_Peripheral+0x266>
100447b4:	2b01      	cmp	r3, #1
100447b6:	dc02      	bgt.n	100447be <APP_BLE_Procedure_Gap_Peripheral+0xf2>
100447b8:	2b00      	cmp	r3, #0
100447ba:	da03      	bge.n	100447c4 <APP_BLE_Procedure_Gap_Peripheral+0xf8>
    {

      break;
    }/* PROC_GAP_PERIPH_SET_BROADCAST_MODE */
    default:
      break;
100447bc:	e0b9      	b.n	10044932 <APP_BLE_Procedure_Gap_Peripheral+0x266>
  switch(ProcGapPeripheralId)
100447be:	2b02      	cmp	r3, #2
100447c0:	d073      	beq.n	100448aa <APP_BLE_Procedure_Gap_Peripheral+0x1de>
      break;
100447c2:	e0b6      	b.n	10044932 <APP_BLE_Procedure_Gap_Peripheral+0x266>
      Advertising_Set_Parameters_t Advertising_Set_Parameters = {0};
100447c4:	2308      	movs	r3, #8
100447c6:	18fb      	adds	r3, r7, r3
100447c8:	0018      	movs	r0, r3
100447ca:	2306      	movs	r3, #6
100447cc:	001a      	movs	r2, r3
100447ce:	2100      	movs	r1, #0
100447d0:	f022 fdc4 	bl	1006735c <memset>
      status = aci_gap_set_advertising_configuration(0,
100447d4:	250f      	movs	r5, #15
100447d6:	197c      	adds	r4, r7, r5
100447d8:	69fa      	ldr	r2, [r7, #28]
100447da:	2300      	movs	r3, #0
100447dc:	930a      	str	r3, [sp, #40]	@ 0x28
100447de:	2300      	movs	r3, #0
100447e0:	9309      	str	r3, [sp, #36]	@ 0x24
100447e2:	2301      	movs	r3, #1
100447e4:	9308      	str	r3, [sp, #32]
100447e6:	2300      	movs	r3, #0
100447e8:	9307      	str	r3, [sp, #28]
100447ea:	2301      	movs	r3, #1
100447ec:	9306      	str	r3, [sp, #24]
100447ee:	2300      	movs	r3, #0
100447f0:	9305      	str	r3, [sp, #20]
100447f2:	2300      	movs	r3, #0
100447f4:	9304      	str	r3, [sp, #16]
100447f6:	2300      	movs	r3, #0
100447f8:	9303      	str	r3, [sp, #12]
100447fa:	2300      	movs	r3, #0
100447fc:	9302      	str	r3, [sp, #8]
100447fe:	2307      	movs	r3, #7
10044800:	9301      	str	r3, [sp, #4]
10044802:	69bb      	ldr	r3, [r7, #24]
10044804:	9300      	str	r3, [sp, #0]
10044806:	0013      	movs	r3, r2
10044808:	2213      	movs	r2, #19
1004480a:	2102      	movs	r1, #2
1004480c:	2000      	movs	r0, #0
1004480e:	f00d fed9 	bl	100525c4 <aci_gap_set_advertising_configuration>
10044812:	0003      	movs	r3, r0
10044814:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
10044816:	197b      	adds	r3, r7, r5
10044818:	781b      	ldrb	r3, [r3, #0]
1004481a:	2b00      	cmp	r3, #0
1004481c:	d007      	beq.n	1004482e <APP_BLE_Procedure_Gap_Peripheral+0x162>
        APP_DBG_MSG("==>> aci_gap_set_advertising_configuration - fail, result: 0x%02X\n", status);
1004481e:	197b      	adds	r3, r7, r5
10044820:	781a      	ldrb	r2, [r3, #0]
10044822:	4b4a      	ldr	r3, [pc, #296]	@ (1004494c <APP_BLE_Procedure_Gap_Peripheral+0x280>)
10044824:	0011      	movs	r1, r2
10044826:	0018      	movs	r0, r3
10044828:	f022 fb6e 	bl	10066f08 <iprintf>
1004482c:	e007      	b.n	1004483e <APP_BLE_Procedure_Gap_Peripheral+0x172>
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
1004482e:	697b      	ldr	r3, [r7, #20]
10044830:	b2da      	uxtb	r2, r3
10044832:	4b43      	ldr	r3, [pc, #268]	@ (10044940 <APP_BLE_Procedure_Gap_Peripheral+0x274>)
10044834:	739a      	strb	r2, [r3, #14]
        APP_DBG_MSG("==>> Success: aci_gap_set_advertising_configuration\n");
10044836:	4b46      	ldr	r3, [pc, #280]	@ (10044950 <APP_BLE_Procedure_Gap_Peripheral+0x284>)
10044838:	0018      	movs	r0, r3
1004483a:	f022 fbd5 	bl	10066fe8 <puts>
      status = aci_gap_set_advertising_data(0, ADV_COMPLETE_DATA, sizeof(a_AdvData), (uint8_t*) a_AdvData);
1004483e:	250f      	movs	r5, #15
10044840:	197c      	adds	r4, r7, r5
10044842:	4b44      	ldr	r3, [pc, #272]	@ (10044954 <APP_BLE_Procedure_Gap_Peripheral+0x288>)
10044844:	221c      	movs	r2, #28
10044846:	2103      	movs	r1, #3
10044848:	2000      	movs	r0, #0
1004484a:	f00d fef0 	bl	1005262e <aci_gap_set_advertising_data>
1004484e:	0003      	movs	r3, r0
10044850:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
10044852:	197b      	adds	r3, r7, r5
10044854:	781b      	ldrb	r3, [r3, #0]
10044856:	2b00      	cmp	r3, #0
10044858:	d007      	beq.n	1004486a <APP_BLE_Procedure_Gap_Peripheral+0x19e>
        APP_DBG_MSG("==>> aci_gap_set_advertising_data Failed, result: 0x%02X\n", status);
1004485a:	197b      	adds	r3, r7, r5
1004485c:	781a      	ldrb	r2, [r3, #0]
1004485e:	4b3e      	ldr	r3, [pc, #248]	@ (10044958 <APP_BLE_Procedure_Gap_Peripheral+0x28c>)
10044860:	0011      	movs	r1, r2
10044862:	0018      	movs	r0, r3
10044864:	f022 fb50 	bl	10066f08 <iprintf>
10044868:	e003      	b.n	10044872 <APP_BLE_Procedure_Gap_Peripheral+0x1a6>
        APP_DBG_MSG("==>> Success: aci_gap_set_advertising_data\n");
1004486a:	4b3c      	ldr	r3, [pc, #240]	@ (1004495c <APP_BLE_Procedure_Gap_Peripheral+0x290>)
1004486c:	0018      	movs	r0, r3
1004486e:	f022 fbbb 	bl	10066fe8 <puts>
      status = aci_gap_set_advertising_enable(ENABLE, 1, &Advertising_Set_Parameters);
10044872:	250f      	movs	r5, #15
10044874:	197c      	adds	r4, r7, r5
10044876:	2308      	movs	r3, #8
10044878:	18fb      	adds	r3, r7, r3
1004487a:	001a      	movs	r2, r3
1004487c:	2101      	movs	r1, #1
1004487e:	2001      	movs	r0, #1
10044880:	f00d fed9 	bl	10052636 <aci_gap_set_advertising_enable>
10044884:	0003      	movs	r3, r0
10044886:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
10044888:	197b      	adds	r3, r7, r5
1004488a:	781b      	ldrb	r3, [r3, #0]
1004488c:	2b00      	cmp	r3, #0
1004488e:	d007      	beq.n	100448a0 <APP_BLE_Procedure_Gap_Peripheral+0x1d4>
        APP_DBG_MSG("==>> aci_gap_set_advertising_enable Failed, result: 0x%02X\n", status);
10044890:	197b      	adds	r3, r7, r5
10044892:	781a      	ldrb	r2, [r3, #0]
10044894:	4b32      	ldr	r3, [pc, #200]	@ (10044960 <APP_BLE_Procedure_Gap_Peripheral+0x294>)
10044896:	0011      	movs	r1, r2
10044898:	0018      	movs	r0, r3
1004489a:	f022 fb35 	bl	10066f08 <iprintf>
      break;
1004489e:	e049      	b.n	10044934 <APP_BLE_Procedure_Gap_Peripheral+0x268>
        APP_DBG_MSG("==>> Success: aci_gap_set_advertising_enable\n");
100448a0:	4b30      	ldr	r3, [pc, #192]	@ (10044964 <APP_BLE_Procedure_Gap_Peripheral+0x298>)
100448a2:	0018      	movs	r0, r3
100448a4:	f022 fba0 	bl	10066fe8 <puts>
      break;
100448a8:	e044      	b.n	10044934 <APP_BLE_Procedure_Gap_Peripheral+0x268>
      status = aci_gap_set_advertising_enable(DISABLE, 0, NULL);
100448aa:	250f      	movs	r5, #15
100448ac:	197c      	adds	r4, r7, r5
100448ae:	2200      	movs	r2, #0
100448b0:	2100      	movs	r1, #0
100448b2:	2000      	movs	r0, #0
100448b4:	f00d febf 	bl	10052636 <aci_gap_set_advertising_enable>
100448b8:	0003      	movs	r3, r0
100448ba:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
100448bc:	0029      	movs	r1, r5
100448be:	187b      	adds	r3, r7, r1
100448c0:	781b      	ldrb	r3, [r3, #0]
100448c2:	2b00      	cmp	r3, #0
100448c4:	d00b      	beq.n	100448de <APP_BLE_Procedure_Gap_Peripheral+0x212>
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
100448c6:	697b      	ldr	r3, [r7, #20]
100448c8:	b2da      	uxtb	r2, r3
100448ca:	4b1d      	ldr	r3, [pc, #116]	@ (10044940 <APP_BLE_Procedure_Gap_Peripheral+0x274>)
100448cc:	739a      	strb	r2, [r3, #14]
        APP_DBG_MSG("Disable advertising - fail, result: 0x%02X\n",status);
100448ce:	187b      	adds	r3, r7, r1
100448d0:	781a      	ldrb	r2, [r3, #0]
100448d2:	4b25      	ldr	r3, [pc, #148]	@ (10044968 <APP_BLE_Procedure_Gap_Peripheral+0x29c>)
100448d4:	0011      	movs	r1, r2
100448d6:	0018      	movs	r0, r3
100448d8:	f022 fb16 	bl	10066f08 <iprintf>
      break;
100448dc:	e02a      	b.n	10044934 <APP_BLE_Procedure_Gap_Peripheral+0x268>
        APP_DBG_MSG("==>> Disable advertising - Success\n");
100448de:	4b23      	ldr	r3, [pc, #140]	@ (1004496c <APP_BLE_Procedure_Gap_Peripheral+0x2a0>)
100448e0:	0018      	movs	r0, r3
100448e2:	f022 fb81 	bl	10066fe8 <puts>
      break;
100448e6:	e025      	b.n	10044934 <APP_BLE_Procedure_Gap_Peripheral+0x268>
       status = aci_l2cap_connection_parameter_update_req(
100448e8:	4b15      	ldr	r3, [pc, #84]	@ (10044940 <APP_BLE_Procedure_Gap_Peripheral+0x274>)
100448ea:	8998      	ldrh	r0, [r3, #12]
100448ec:	69fb      	ldr	r3, [r7, #28]
100448ee:	b299      	uxth	r1, r3
100448f0:	69bb      	ldr	r3, [r7, #24]
100448f2:	b29a      	uxth	r2, r3
100448f4:	697b      	ldr	r3, [r7, #20]
100448f6:	b29d      	uxth	r5, r3
100448f8:	693b      	ldr	r3, [r7, #16]
100448fa:	b29b      	uxth	r3, r3
100448fc:	260f      	movs	r6, #15
100448fe:	19bc      	adds	r4, r7, r6
10044900:	9300      	str	r3, [sp, #0]
10044902:	002b      	movs	r3, r5
10044904:	f00d fab2 	bl	10051e6c <aci_l2cap_connection_parameter_update_req>
10044908:	0003      	movs	r3, r0
1004490a:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
1004490c:	19bb      	adds	r3, r7, r6
1004490e:	781b      	ldrb	r3, [r3, #0]
10044910:	2b00      	cmp	r3, #0
10044912:	d007      	beq.n	10044924 <APP_BLE_Procedure_Gap_Peripheral+0x258>
        APP_DBG_MSG("aci_l2cap_connection_parameter_update_req - fail, result: 0x%02X\n",status);
10044914:	19bb      	adds	r3, r7, r6
10044916:	781a      	ldrb	r2, [r3, #0]
10044918:	4b15      	ldr	r3, [pc, #84]	@ (10044970 <APP_BLE_Procedure_Gap_Peripheral+0x2a4>)
1004491a:	0011      	movs	r1, r2
1004491c:	0018      	movs	r0, r3
1004491e:	f022 faf3 	bl	10066f08 <iprintf>
      break;
10044922:	e007      	b.n	10044934 <APP_BLE_Procedure_Gap_Peripheral+0x268>
        APP_DBG_MSG("==>> aci_l2cap_connection_parameter_update_req - Success\n");
10044924:	4b13      	ldr	r3, [pc, #76]	@ (10044974 <APP_BLE_Procedure_Gap_Peripheral+0x2a8>)
10044926:	0018      	movs	r0, r3
10044928:	f022 fb5e 	bl	10066fe8 <puts>
      break;
1004492c:	e002      	b.n	10044934 <APP_BLE_Procedure_Gap_Peripheral+0x268>
      break;
1004492e:	46c0      	nop			@ (mov r8, r8)
10044930:	e000      	b.n	10044934 <APP_BLE_Procedure_Gap_Peripheral+0x268>
      break;
10044932:	46c0      	nop			@ (mov r8, r8)
  }
  return;
10044934:	46c0      	nop			@ (mov r8, r8)
}
10044936:	46bd      	mov	sp, r7
10044938:	b009      	add	sp, #36	@ 0x24
1004493a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004493c:	10069998 	.word	0x10069998
10044940:	20000350 	.word	0x20000350
10044944:	10068f20 	.word	0x10068f20
10044948:	10068f4c 	.word	0x10068f4c
1004494c:	10068fd4 	.word	0x10068fd4
10044950:	10069018 	.word	0x10069018
10044954:	200012b0 	.word	0x200012b0
10044958:	1006904c 	.word	0x1006904c
1004495c:	10069088 	.word	0x10069088
10044960:	100690b4 	.word	0x100690b4
10044964:	100690f0 	.word	0x100690f0
10044968:	10069120 	.word	0x10069120
1004496c:	1006914c 	.word	0x1006914c
10044970:	10069170 	.word	0x10069170
10044974:	100691b4 	.word	0x100691b4

10044978 <gap_cmd_resp_release>:
/* USER CODE BEGIN FD*/

/* USER CODE END FD*/

static void gap_cmd_resp_release(void)
{
10044978:	b580      	push	{r7, lr}
1004497a:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_PROC_GAP_COMPLETE);
1004497c:	2001      	movs	r0, #1
1004497e:	f00d fceb 	bl	10052358 <UTIL_SEQ_SetEvt>
  return;
10044982:	46c0      	nop			@ (mov r8, r8)
}
10044984:	46bd      	mov	sp, r7
10044986:	bd80      	pop	{r7, pc}

10044988 <gap_cmd_resp_wait>:

static void gap_cmd_resp_wait(void)
{
10044988:	b580      	push	{r7, lr}
1004498a:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_PROC_GAP_COMPLETE);
1004498c:	2001      	movs	r0, #1
1004498e:	f00d fd1f 	bl	100523d0 <UTIL_SEQ_WaitEvt>
  return;
10044992:	46c0      	nop			@ (mov r8, r8)
}
10044994:	46bd      	mov	sp, r7
10044996:	bd80      	pop	{r7, pc}

10044998 <Adv_Cancel_Req>:
/* USER CODE BEGIN FD_LOCAL_FUNCTION */

static void Adv_Cancel_Req(void *arg)
{
10044998:	b580      	push	{r7, lr}
1004499a:	b082      	sub	sp, #8
1004499c:	af00      	add	r7, sp, #0
1004499e:	6078      	str	r0, [r7, #4]
  APP_DBG_MSG("Adv_Cancel_Req\n");
100449a0:	4b06      	ldr	r3, [pc, #24]	@ (100449bc <Adv_Cancel_Req+0x24>)
100449a2:	0018      	movs	r0, r3
100449a4:	f022 fb20 	bl	10066fe8 <puts>
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SEQ_PRIO_0);
100449a8:	2380      	movs	r3, #128	@ 0x80
100449aa:	009b      	lsls	r3, r3, #2
100449ac:	2100      	movs	r1, #0
100449ae:	0018      	movs	r0, r3
100449b0:	f00d fca6 	bl	10052300 <UTIL_SEQ_SetTask>
  return;
100449b4:	46c0      	nop			@ (mov r8, r8)
}
100449b6:	46bd      	mov	sp, r7
100449b8:	b002      	add	sp, #8
100449ba:	bd80      	pop	{r7, pc}
100449bc:	100691f0 	.word	0x100691f0

100449c0 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(void *arg)
{
100449c0:	b580      	push	{r7, lr}
100449c2:	b082      	sub	sp, #8
100449c4:	af00      	add	r7, sp, #0
100449c6:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_GREEN);
100449c8:	2001      	movs	r0, #1
100449ca:	f007 fd0d 	bl	1004c3e8 <BSP_LED_Off>
  return;
100449ce:	46c0      	nop			@ (mov r8, r8)
}
100449d0:	46bd      	mov	sp, r7
100449d2:	b002      	add	sp, #8
100449d4:	bd80      	pop	{r7, pc}
	...

100449d8 <Adv_Cancel>:

static void Adv_Cancel(void)
{
100449d8:	b580      	push	{r7, lr}
100449da:	af00      	add	r7, sp, #0
  BSP_LED_Off(LED_GREEN);
100449dc:	2001      	movs	r0, #1
100449de:	f007 fd03 	bl	1004c3e8 <BSP_LED_Off>

  APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_STOP);
100449e2:	2002      	movs	r0, #2
100449e4:	f7ff fe72 	bl	100446cc <APP_BLE_Procedure_Gap_Peripheral>
  bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
100449e8:	4b02      	ldr	r3, [pc, #8]	@ (100449f4 <Adv_Cancel+0x1c>)
100449ea:	2200      	movs	r2, #0
100449ec:	739a      	strb	r2, [r3, #14]

  return;
100449ee:	46c0      	nop			@ (mov r8, r8)
}
100449f0:	46bd      	mov	sp, r7
100449f2:	bd80      	pop	{r7, pc}
100449f4:	20000350 	.word	0x20000350

100449f8 <fill_advData>:

static void fill_advData(uint8_t *p_adv_data, uint8_t tab_size, const uint8_t* p_bd_addr)
{
100449f8:	b5b0      	push	{r4, r5, r7, lr}
100449fa:	b086      	sub	sp, #24
100449fc:	af00      	add	r7, sp, #0
100449fe:	60f8      	str	r0, [r7, #12]
10044a00:	607a      	str	r2, [r7, #4]
10044a02:	230b      	movs	r3, #11
10044a04:	18fb      	adds	r3, r7, r3
10044a06:	1c0a      	adds	r2, r1, #0
10044a08:	701a      	strb	r2, [r3, #0]
  uint16_t i =0;
10044a0a:	2316      	movs	r3, #22
10044a0c:	18fb      	adds	r3, r7, r3
10044a0e:	2200      	movs	r2, #0
10044a10:	801a      	strh	r2, [r3, #0]
  uint8_t bd_addr_1, bd_addr_0;
  uint8_t ad_length, ad_type;  
  
  while(i < tab_size)
10044a12:	e115      	b.n	10044c40 <fill_advData+0x248>
  {
    ad_length = p_adv_data[i];
10044a14:	2116      	movs	r1, #22
10044a16:	187b      	adds	r3, r7, r1
10044a18:	881b      	ldrh	r3, [r3, #0]
10044a1a:	68fa      	ldr	r2, [r7, #12]
10044a1c:	18d2      	adds	r2, r2, r3
10044a1e:	2315      	movs	r3, #21
10044a20:	18fb      	adds	r3, r7, r3
10044a22:	7812      	ldrb	r2, [r2, #0]
10044a24:	701a      	strb	r2, [r3, #0]
    ad_type = p_adv_data[i + 1];
10044a26:	187b      	adds	r3, r7, r1
10044a28:	881b      	ldrh	r3, [r3, #0]
10044a2a:	3301      	adds	r3, #1
10044a2c:	68fa      	ldr	r2, [r7, #12]
10044a2e:	18d2      	adds	r2, r2, r3
10044a30:	2114      	movs	r1, #20
10044a32:	187b      	adds	r3, r7, r1
10044a34:	7812      	ldrb	r2, [r2, #0]
10044a36:	701a      	strb	r2, [r3, #0]
      
    switch (ad_type)
10044a38:	187b      	adds	r3, r7, r1
10044a3a:	781b      	ldrb	r3, [r3, #0]
10044a3c:	2bff      	cmp	r3, #255	@ 0xff
10044a3e:	d100      	bne.n	10044a42 <fill_advData+0x4a>
10044a40:	e07c      	b.n	10044b3c <fill_advData+0x144>
10044a42:	dd00      	ble.n	10044a46 <fill_advData+0x4e>
10044a44:	e0e9      	b.n	10044c1a <fill_advData+0x222>
10044a46:	2b0a      	cmp	r3, #10
10044a48:	d100      	bne.n	10044a4c <fill_advData+0x54>
10044a4a:	e0e8      	b.n	10044c1e <fill_advData+0x226>
10044a4c:	dd00      	ble.n	10044a50 <fill_advData+0x58>
10044a4e:	e0e4      	b.n	10044c1a <fill_advData+0x222>
10044a50:	2b01      	cmp	r3, #1
10044a52:	d100      	bne.n	10044a56 <fill_advData+0x5e>
10044a54:	e0e5      	b.n	10044c22 <fill_advData+0x22a>
10044a56:	2b09      	cmp	r3, #9
10044a58:	d000      	beq.n	10044a5c <fill_advData+0x64>
        p_adv_data[i+14] = p_bd_addr[1];
        p_adv_data[i+15] = p_bd_addr[0]; /* LSB BD address */
        break;
      }
    default:
      break;
10044a5a:	e0de      	b.n	10044c1a <fill_advData+0x222>
        if((p_adv_data[i + ad_length] == 'X') && (p_adv_data[i + ad_length - 1] == 'X'))
10044a5c:	2016      	movs	r0, #22
10044a5e:	183b      	adds	r3, r7, r0
10044a60:	881a      	ldrh	r2, [r3, #0]
10044a62:	2415      	movs	r4, #21
10044a64:	193b      	adds	r3, r7, r4
10044a66:	781b      	ldrb	r3, [r3, #0]
10044a68:	18d3      	adds	r3, r2, r3
10044a6a:	001a      	movs	r2, r3
10044a6c:	68fb      	ldr	r3, [r7, #12]
10044a6e:	189b      	adds	r3, r3, r2
10044a70:	781b      	ldrb	r3, [r3, #0]
10044a72:	2b58      	cmp	r3, #88	@ 0x58
10044a74:	d000      	beq.n	10044a78 <fill_advData+0x80>
10044a76:	e0d6      	b.n	10044c26 <fill_advData+0x22e>
10044a78:	183b      	adds	r3, r7, r0
10044a7a:	881a      	ldrh	r2, [r3, #0]
10044a7c:	193b      	adds	r3, r7, r4
10044a7e:	781b      	ldrb	r3, [r3, #0]
10044a80:	18d3      	adds	r3, r2, r3
10044a82:	3b01      	subs	r3, #1
10044a84:	68fa      	ldr	r2, [r7, #12]
10044a86:	18d3      	adds	r3, r2, r3
10044a88:	781b      	ldrb	r3, [r3, #0]
10044a8a:	2b58      	cmp	r3, #88	@ 0x58
10044a8c:	d000      	beq.n	10044a90 <fill_advData+0x98>
10044a8e:	e0ca      	b.n	10044c26 <fill_advData+0x22e>
          bd_addr_1 = ((p_bd_addr[0] & 0xF0)>>4);
10044a90:	687b      	ldr	r3, [r7, #4]
10044a92:	781a      	ldrb	r2, [r3, #0]
10044a94:	2513      	movs	r5, #19
10044a96:	197b      	adds	r3, r7, r5
10044a98:	0912      	lsrs	r2, r2, #4
10044a9a:	701a      	strb	r2, [r3, #0]
          bd_addr_0 = (p_bd_addr[0] & 0xF);
10044a9c:	687b      	ldr	r3, [r7, #4]
10044a9e:	781a      	ldrb	r2, [r3, #0]
10044aa0:	2312      	movs	r3, #18
10044aa2:	18fb      	adds	r3, r7, r3
10044aa4:	210f      	movs	r1, #15
10044aa6:	400a      	ands	r2, r1
10044aa8:	701a      	strb	r2, [r3, #0]
          if(bd_addr_1 > 0x09)
10044aaa:	0029      	movs	r1, r5
10044aac:	187b      	adds	r3, r7, r1
10044aae:	781b      	ldrb	r3, [r3, #0]
10044ab0:	2b09      	cmp	r3, #9
10044ab2:	d90d      	bls.n	10044ad0 <fill_advData+0xd8>
            p_adv_data[i + ad_length - 1] = bd_addr_1 + '7';
10044ab4:	183b      	adds	r3, r7, r0
10044ab6:	881a      	ldrh	r2, [r3, #0]
10044ab8:	193b      	adds	r3, r7, r4
10044aba:	781b      	ldrb	r3, [r3, #0]
10044abc:	18d3      	adds	r3, r2, r3
10044abe:	3b01      	subs	r3, #1
10044ac0:	68fa      	ldr	r2, [r7, #12]
10044ac2:	18d3      	adds	r3, r2, r3
10044ac4:	187a      	adds	r2, r7, r1
10044ac6:	7812      	ldrb	r2, [r2, #0]
10044ac8:	3237      	adds	r2, #55	@ 0x37
10044aca:	b2d2      	uxtb	r2, r2
10044acc:	701a      	strb	r2, [r3, #0]
10044ace:	e00f      	b.n	10044af0 <fill_advData+0xf8>
            p_adv_data[i + ad_length - 1] = bd_addr_1 + '0';
10044ad0:	2316      	movs	r3, #22
10044ad2:	18fb      	adds	r3, r7, r3
10044ad4:	881a      	ldrh	r2, [r3, #0]
10044ad6:	2315      	movs	r3, #21
10044ad8:	18fb      	adds	r3, r7, r3
10044ada:	781b      	ldrb	r3, [r3, #0]
10044adc:	18d3      	adds	r3, r2, r3
10044ade:	3b01      	subs	r3, #1
10044ae0:	68fa      	ldr	r2, [r7, #12]
10044ae2:	18d3      	adds	r3, r2, r3
10044ae4:	2213      	movs	r2, #19
10044ae6:	18ba      	adds	r2, r7, r2
10044ae8:	7812      	ldrb	r2, [r2, #0]
10044aea:	3230      	adds	r2, #48	@ 0x30
10044aec:	b2d2      	uxtb	r2, r2
10044aee:	701a      	strb	r2, [r3, #0]
          if(bd_addr_0 > 0x09)
10044af0:	2112      	movs	r1, #18
10044af2:	187b      	adds	r3, r7, r1
10044af4:	781b      	ldrb	r3, [r3, #0]
10044af6:	2b09      	cmp	r3, #9
10044af8:	d90f      	bls.n	10044b1a <fill_advData+0x122>
            p_adv_data[i + ad_length] = bd_addr_0 + '7';
10044afa:	2316      	movs	r3, #22
10044afc:	18fb      	adds	r3, r7, r3
10044afe:	881a      	ldrh	r2, [r3, #0]
10044b00:	2315      	movs	r3, #21
10044b02:	18fb      	adds	r3, r7, r3
10044b04:	781b      	ldrb	r3, [r3, #0]
10044b06:	18d3      	adds	r3, r2, r3
10044b08:	001a      	movs	r2, r3
10044b0a:	68fb      	ldr	r3, [r7, #12]
10044b0c:	189b      	adds	r3, r3, r2
10044b0e:	187a      	adds	r2, r7, r1
10044b10:	7812      	ldrb	r2, [r2, #0]
10044b12:	3237      	adds	r2, #55	@ 0x37
10044b14:	b2d2      	uxtb	r2, r2
10044b16:	701a      	strb	r2, [r3, #0]
        break;
10044b18:	e085      	b.n	10044c26 <fill_advData+0x22e>
            p_adv_data[i + ad_length] = bd_addr_0 + '0';
10044b1a:	2316      	movs	r3, #22
10044b1c:	18fb      	adds	r3, r7, r3
10044b1e:	881a      	ldrh	r2, [r3, #0]
10044b20:	2315      	movs	r3, #21
10044b22:	18fb      	adds	r3, r7, r3
10044b24:	781b      	ldrb	r3, [r3, #0]
10044b26:	18d3      	adds	r3, r2, r3
10044b28:	001a      	movs	r2, r3
10044b2a:	68fb      	ldr	r3, [r7, #12]
10044b2c:	189b      	adds	r3, r3, r2
10044b2e:	2212      	movs	r2, #18
10044b30:	18ba      	adds	r2, r7, r2
10044b32:	7812      	ldrb	r2, [r2, #0]
10044b34:	3230      	adds	r2, #48	@ 0x30
10044b36:	b2d2      	uxtb	r2, r2
10044b38:	701a      	strb	r2, [r3, #0]
        break;
10044b3a:	e074      	b.n	10044c26 <fill_advData+0x22e>
        p_adv_data[i+2] = ST_MANUF_ID_LSB;
10044b3c:	2016      	movs	r0, #22
10044b3e:	183b      	adds	r3, r7, r0
10044b40:	881b      	ldrh	r3, [r3, #0]
10044b42:	3302      	adds	r3, #2
10044b44:	68fa      	ldr	r2, [r7, #12]
10044b46:	18d3      	adds	r3, r2, r3
10044b48:	2230      	movs	r2, #48	@ 0x30
10044b4a:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+3] = ST_MANUF_ID_MSB;
10044b4c:	183b      	adds	r3, r7, r0
10044b4e:	881b      	ldrh	r3, [r3, #0]
10044b50:	3303      	adds	r3, #3
10044b52:	68fa      	ldr	r2, [r7, #12]
10044b54:	18d3      	adds	r3, r2, r3
10044b56:	2200      	movs	r2, #0
10044b58:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+4] = BLUESTSDK_V2; /* blueST SDK version */
10044b5a:	183b      	adds	r3, r7, r0
10044b5c:	881b      	ldrh	r3, [r3, #0]
10044b5e:	3304      	adds	r3, #4
10044b60:	68fa      	ldr	r2, [r7, #12]
10044b62:	18d3      	adds	r3, r2, r3
10044b64:	2202      	movs	r2, #2
10044b66:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+5] = BOARD_ID_NUCLEO_WB0; /* Board ID */
10044b68:	183b      	adds	r3, r7, r0
10044b6a:	881b      	ldrh	r3, [r3, #0]
10044b6c:	3305      	adds	r3, #5
10044b6e:	68fa      	ldr	r2, [r7, #12]
10044b70:	18d3      	adds	r3, r2, r3
10044b72:	228d      	movs	r2, #141	@ 0x8d
10044b74:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+6] = FW_ID_P2P_SERVER; /* FW ID */
10044b76:	183b      	adds	r3, r7, r0
10044b78:	881b      	ldrh	r3, [r3, #0]
10044b7a:	3306      	adds	r3, #6
10044b7c:	68fa      	ldr	r2, [r7, #12]
10044b7e:	18d3      	adds	r3, r2, r3
10044b80:	2283      	movs	r2, #131	@ 0x83
10044b82:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+7] = 0x00; /* FW data 1 */
10044b84:	183b      	adds	r3, r7, r0
10044b86:	881b      	ldrh	r3, [r3, #0]
10044b88:	3307      	adds	r3, #7
10044b8a:	68fa      	ldr	r2, [r7, #12]
10044b8c:	18d3      	adds	r3, r2, r3
10044b8e:	2200      	movs	r2, #0
10044b90:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+8] = 0x00; /* FW data 2 */
10044b92:	183b      	adds	r3, r7, r0
10044b94:	881b      	ldrh	r3, [r3, #0]
10044b96:	3308      	adds	r3, #8
10044b98:	68fa      	ldr	r2, [r7, #12]
10044b9a:	18d3      	adds	r3, r2, r3
10044b9c:	2200      	movs	r2, #0
10044b9e:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+9] = FW_DATA3_FUOTA; /* FW data 3 */
10044ba0:	183b      	adds	r3, r7, r0
10044ba2:	881b      	ldrh	r3, [r3, #0]
10044ba4:	3309      	adds	r3, #9
10044ba6:	68fa      	ldr	r2, [r7, #12]
10044ba8:	18d3      	adds	r3, r2, r3
10044baa:	2201      	movs	r2, #1
10044bac:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+10] = p_bd_addr[5]; /* MSB BD address */
10044bae:	687b      	ldr	r3, [r7, #4]
10044bb0:	1d5a      	adds	r2, r3, #5
10044bb2:	183b      	adds	r3, r7, r0
10044bb4:	881b      	ldrh	r3, [r3, #0]
10044bb6:	330a      	adds	r3, #10
10044bb8:	68f9      	ldr	r1, [r7, #12]
10044bba:	18cb      	adds	r3, r1, r3
10044bbc:	7812      	ldrb	r2, [r2, #0]
10044bbe:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+11] = p_bd_addr[4];
10044bc0:	687b      	ldr	r3, [r7, #4]
10044bc2:	1d1a      	adds	r2, r3, #4
10044bc4:	183b      	adds	r3, r7, r0
10044bc6:	881b      	ldrh	r3, [r3, #0]
10044bc8:	330b      	adds	r3, #11
10044bca:	68f9      	ldr	r1, [r7, #12]
10044bcc:	18cb      	adds	r3, r1, r3
10044bce:	7812      	ldrb	r2, [r2, #0]
10044bd0:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+12] = p_bd_addr[3];
10044bd2:	687b      	ldr	r3, [r7, #4]
10044bd4:	1cda      	adds	r2, r3, #3
10044bd6:	183b      	adds	r3, r7, r0
10044bd8:	881b      	ldrh	r3, [r3, #0]
10044bda:	330c      	adds	r3, #12
10044bdc:	68f9      	ldr	r1, [r7, #12]
10044bde:	18cb      	adds	r3, r1, r3
10044be0:	7812      	ldrb	r2, [r2, #0]
10044be2:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+13] = p_bd_addr[2];
10044be4:	687b      	ldr	r3, [r7, #4]
10044be6:	1c9a      	adds	r2, r3, #2
10044be8:	183b      	adds	r3, r7, r0
10044bea:	881b      	ldrh	r3, [r3, #0]
10044bec:	330d      	adds	r3, #13
10044bee:	68f9      	ldr	r1, [r7, #12]
10044bf0:	18cb      	adds	r3, r1, r3
10044bf2:	7812      	ldrb	r2, [r2, #0]
10044bf4:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+14] = p_bd_addr[1];
10044bf6:	687b      	ldr	r3, [r7, #4]
10044bf8:	1c5a      	adds	r2, r3, #1
10044bfa:	183b      	adds	r3, r7, r0
10044bfc:	881b      	ldrh	r3, [r3, #0]
10044bfe:	330e      	adds	r3, #14
10044c00:	68f9      	ldr	r1, [r7, #12]
10044c02:	18cb      	adds	r3, r1, r3
10044c04:	7812      	ldrb	r2, [r2, #0]
10044c06:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+15] = p_bd_addr[0]; /* LSB BD address */
10044c08:	183b      	adds	r3, r7, r0
10044c0a:	881b      	ldrh	r3, [r3, #0]
10044c0c:	330f      	adds	r3, #15
10044c0e:	68fa      	ldr	r2, [r7, #12]
10044c10:	18d3      	adds	r3, r2, r3
10044c12:	687a      	ldr	r2, [r7, #4]
10044c14:	7812      	ldrb	r2, [r2, #0]
10044c16:	701a      	strb	r2, [r3, #0]
        break;
10044c18:	e006      	b.n	10044c28 <fill_advData+0x230>
      break;
10044c1a:	46c0      	nop			@ (mov r8, r8)
10044c1c:	e004      	b.n	10044c28 <fill_advData+0x230>
      break;
10044c1e:	46c0      	nop			@ (mov r8, r8)
10044c20:	e002      	b.n	10044c28 <fill_advData+0x230>
      break;
10044c22:	46c0      	nop			@ (mov r8, r8)
10044c24:	e000      	b.n	10044c28 <fill_advData+0x230>
        break;
10044c26:	46c0      	nop			@ (mov r8, r8)
    }
    i += ad_length + 1; /* increment the iterator to go on next element*/
10044c28:	2315      	movs	r3, #21
10044c2a:	18fb      	adds	r3, r7, r3
10044c2c:	781b      	ldrb	r3, [r3, #0]
10044c2e:	b29a      	uxth	r2, r3
10044c30:	2116      	movs	r1, #22
10044c32:	187b      	adds	r3, r7, r1
10044c34:	881b      	ldrh	r3, [r3, #0]
10044c36:	18d3      	adds	r3, r2, r3
10044c38:	b29a      	uxth	r2, r3
10044c3a:	187b      	adds	r3, r7, r1
10044c3c:	3201      	adds	r2, #1
10044c3e:	801a      	strh	r2, [r3, #0]
  while(i < tab_size)
10044c40:	230b      	movs	r3, #11
10044c42:	18fb      	adds	r3, r7, r3
10044c44:	781b      	ldrb	r3, [r3, #0]
10044c46:	b29b      	uxth	r3, r3
10044c48:	2216      	movs	r2, #22
10044c4a:	18ba      	adds	r2, r7, r2
10044c4c:	8812      	ldrh	r2, [r2, #0]
10044c4e:	429a      	cmp	r2, r3
10044c50:	d200      	bcs.n	10044c54 <fill_advData+0x25c>
10044c52:	e6df      	b.n	10044a14 <fill_advData+0x1c>
  }
}
10044c54:	46c0      	nop			@ (mov r8, r8)
10044c56:	46c0      	nop			@ (mov r8, r8)
10044c58:	46bd      	mov	sp, r7
10044c5a:	b006      	add	sp, #24
10044c5c:	bdb0      	pop	{r4, r5, r7, pc}
	...

10044c60 <APPE_Button1Action>:
/* USER CODE END FD_LOCAL_FUNCTION */

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
#if (CFG_BUTTON_SUPPORTED == 1)
void APPE_Button1Action(void)
{
10044c60:	b580      	push	{r7, lr}
10044c62:	af00      	add	r7, sp, #0
  APP_DBG_MSG("==>> APPE_Button1Action - Trigger !!!\n");
10044c64:	4b0f      	ldr	r3, [pc, #60]	@ (10044ca4 <APPE_Button1Action+0x44>)
10044c66:	0018      	movs	r0, r3
10044c68:	f022 f9be 	bl	10066fe8 <puts>
  if (bleAppContext.Device_Connection_Status == APP_BLE_IDLE)
10044c6c:	4b0e      	ldr	r3, [pc, #56]	@ (10044ca8 <APPE_Button1Action+0x48>)
10044c6e:	7b9b      	ldrb	r3, [r3, #14]
10044c70:	2b00      	cmp	r3, #0
10044c72:	d109      	bne.n	10044c88 <APPE_Button1Action+0x28>
  {
    /* Relaunch advertising */
    APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
10044c74:	2001      	movs	r0, #1
10044c76:	f7ff fd29 	bl	100446cc <APP_BLE_Procedure_Gap_Peripheral>
    HAL_RADIO_TIMER_StartVirtualTimer(&bleAppContext.Advertising_mgr_timer_Id, ADV_TIMEOUT_MS);
10044c7a:	4a0c      	ldr	r2, [pc, #48]	@ (10044cac <APPE_Button1Action+0x4c>)
10044c7c:	4b0c      	ldr	r3, [pc, #48]	@ (10044cb0 <APPE_Button1Action+0x50>)
10044c7e:	0011      	movs	r1, r2
10044c80:	0018      	movs	r0, r3
10044c82:	f00a fa5f 	bl	1004f144 <HAL_RADIO_TIMER_StartVirtualTimer>
  else if (bleAppContext.Device_Connection_Status == APP_BLE_CONNECTED_SERVER)
  {
    UTIL_SEQ_SetTask( 1<<CFG_TASK_SEND_NOTIF_ID, CFG_SEQ_PRIO_0);
  }
  
  return;
10044c86:	e00a      	b.n	10044c9e <APPE_Button1Action+0x3e>
  else if (bleAppContext.Device_Connection_Status == APP_BLE_CONNECTED_SERVER)
10044c88:	4b07      	ldr	r3, [pc, #28]	@ (10044ca8 <APPE_Button1Action+0x48>)
10044c8a:	7b9b      	ldrb	r3, [r3, #14]
10044c8c:	2b02      	cmp	r3, #2
10044c8e:	d106      	bne.n	10044c9e <APPE_Button1Action+0x3e>
    UTIL_SEQ_SetTask( 1<<CFG_TASK_SEND_NOTIF_ID, CFG_SEQ_PRIO_0);
10044c90:	2380      	movs	r3, #128	@ 0x80
10044c92:	00db      	lsls	r3, r3, #3
10044c94:	2100      	movs	r1, #0
10044c96:	0018      	movs	r0, r3
10044c98:	f00d fb32 	bl	10052300 <UTIL_SEQ_SetTask>
  return;
10044c9c:	46c0      	nop			@ (mov r8, r8)
10044c9e:	46c0      	nop			@ (mov r8, r8)
}
10044ca0:	46bd      	mov	sp, r7
10044ca2:	bd80      	pop	{r7, pc}
10044ca4:	10069200 	.word	0x10069200
10044ca8:	20000350 	.word	0x20000350
10044cac:	0000ea60 	.word	0x0000ea60
10044cb0:	20000360 	.word	0x20000360

10044cb4 <APPE_Button2Action>:

void APPE_Button2Action(void)
{
10044cb4:	b590      	push	{r4, r7, lr}
10044cb6:	b083      	sub	sp, #12
10044cb8:	af00      	add	r7, sp, #0
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
10044cba:	1dfb      	adds	r3, r7, #7
10044cbc:	2212      	movs	r2, #18
10044cbe:	701a      	strb	r2, [r3, #0]

  APP_DBG_MSG("==>> APPE_Button2Action - Trigger !!!\n");
10044cc0:	4b15      	ldr	r3, [pc, #84]	@ (10044d18 <APPE_Button2Action+0x64>)
10044cc2:	0018      	movs	r0, r3
10044cc4:	f022 f990 	bl	10066fe8 <puts>
  if (bleAppContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
10044cc8:	4b14      	ldr	r3, [pc, #80]	@ (10044d1c <APPE_Button2Action+0x68>)
10044cca:	7b9b      	ldrb	r3, [r3, #14]
10044ccc:	2b02      	cmp	r3, #2
10044cce:	d015      	beq.n	10044cfc <APPE_Button2Action+0x48>
  {
    ret = aci_gap_clear_security_db();
10044cd0:	1dfc      	adds	r4, r7, #7
10044cd2:	f00d f811 	bl	10051cf8 <aci_gap_clear_security_db>
10044cd6:	0003      	movs	r3, r0
10044cd8:	7023      	strb	r3, [r4, #0]
    if (ret != BLE_STATUS_SUCCESS)
10044cda:	1dfb      	adds	r3, r7, #7
10044cdc:	781b      	ldrb	r3, [r3, #0]
10044cde:	2b00      	cmp	r3, #0
10044ce0:	d007      	beq.n	10044cf2 <APPE_Button2Action+0x3e>
    {
      APP_DBG_MSG("==>> aci_gap_clear_security_db - Fail, result: 0x%02X\n", ret);
10044ce2:	1dfb      	adds	r3, r7, #7
10044ce4:	781a      	ldrb	r2, [r3, #0]
10044ce6:	4b0e      	ldr	r3, [pc, #56]	@ (10044d20 <APPE_Button2Action+0x6c>)
10044ce8:	0011      	movs	r1, r2
10044cea:	0018      	movs	r0, r3
10044cec:	f022 f90c 	bl	10066f08 <iprintf>
    /* Launch advertising for multi connection */
    APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
    HAL_RADIO_TIMER_StartVirtualTimer(&bleAppContext.Advertising_mgr_timer_Id, ADV_TIMEOUT_MS);
  }

  return;
10044cf0:	e00e      	b.n	10044d10 <APPE_Button2Action+0x5c>
      APP_DBG_MSG("==>> aci_gap_clear_security_db - Success\n");
10044cf2:	4b0c      	ldr	r3, [pc, #48]	@ (10044d24 <APPE_Button2Action+0x70>)
10044cf4:	0018      	movs	r0, r3
10044cf6:	f022 f977 	bl	10066fe8 <puts>
  return;
10044cfa:	e009      	b.n	10044d10 <APPE_Button2Action+0x5c>
    APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
10044cfc:	2001      	movs	r0, #1
10044cfe:	f7ff fce5 	bl	100446cc <APP_BLE_Procedure_Gap_Peripheral>
    HAL_RADIO_TIMER_StartVirtualTimer(&bleAppContext.Advertising_mgr_timer_Id, ADV_TIMEOUT_MS);
10044d02:	4a09      	ldr	r2, [pc, #36]	@ (10044d28 <APPE_Button2Action+0x74>)
10044d04:	4b09      	ldr	r3, [pc, #36]	@ (10044d2c <APPE_Button2Action+0x78>)
10044d06:	0011      	movs	r1, r2
10044d08:	0018      	movs	r0, r3
10044d0a:	f00a fa1b 	bl	1004f144 <HAL_RADIO_TIMER_StartVirtualTimer>
  return;
10044d0e:	46c0      	nop			@ (mov r8, r8)
}
10044d10:	46bd      	mov	sp, r7
10044d12:	b003      	add	sp, #12
10044d14:	bd90      	pop	{r4, r7, pc}
10044d16:	46c0      	nop			@ (mov r8, r8)
10044d18:	10069228 	.word	0x10069228
10044d1c:	20000350 	.word	0x20000350
10044d20:	10069250 	.word	0x10069250
10044d24:	10069288 	.word	0x10069288
10044d28:	0000ea60 	.word	0x0000ea60
10044d2c:	20000360 	.word	0x20000360

10044d30 <APPE_Button3Action>:

void APPE_Button3Action(void)
{
10044d30:	b580      	push	{r7, lr}
10044d32:	af00      	add	r7, sp, #0
  APP_DBG_MSG("==>> APPE_Button3Action - Trigger !!!\n");
10044d34:	4b07      	ldr	r3, [pc, #28]	@ (10044d54 <APPE_Button3Action+0x24>)
10044d36:	0018      	movs	r0, r3
10044d38:	f022 f956 	bl	10066fe8 <puts>
  if (bleAppContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
10044d3c:	4b06      	ldr	r3, [pc, #24]	@ (10044d58 <APPE_Button3Action+0x28>)
10044d3e:	7b9b      	ldrb	r3, [r3, #14]
10044d40:	2b02      	cmp	r3, #2
10044d42:	d103      	bne.n	10044d4c <APPE_Button3Action+0x1c>
  {

  }
  else
  {
    APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_CONN_PARAM_UPDATE);
10044d44:	2004      	movs	r0, #4
10044d46:	f7ff fcc1 	bl	100446cc <APP_BLE_Procedure_Gap_Peripheral>
  }

  return;
10044d4a:	46c0      	nop			@ (mov r8, r8)
10044d4c:	46c0      	nop			@ (mov r8, r8)
}
10044d4e:	46bd      	mov	sp, r7
10044d50:	bd80      	pop	{r7, pc}
10044d52:	46c0      	nop			@ (mov r8, r8)
10044d54:	100692b4 	.word	0x100692b4
10044d58:	20000350 	.word	0x20000350

10044d5c <APPE_Button4Action>:

void APPE_Button4Action(void)
{
10044d5c:	b580      	push	{r7, lr}
10044d5e:	af00      	add	r7, sp, #0
  APP_DBG_MSG("==>> APPE_Button4Action - Trigger !!!\n");
10044d60:	4b03      	ldr	r3, [pc, #12]	@ (10044d70 <APPE_Button4Action+0x14>)
10044d62:	0018      	movs	r0, r3
10044d64:	f022 f940 	bl	10066fe8 <puts>
  return;
10044d68:	46c0      	nop			@ (mov r8, r8)
}
10044d6a:	46bd      	mov	sp, r7
10044d6c:	bd80      	pop	{r7, pc}
10044d6e:	46c0      	nop			@ (mov r8, r8)
10044d70:	100692dc 	.word	0x100692dc

10044d74 <OTA_EventHandler>:
 * @brief  Event handler
 * @param  p_Event: Address of the buffer holding the p_Event
 * @retval Ack: Return whether the p_Event has been managed or not
 */
static BLEEVT_EvtAckStatus_t OTA_EventHandler(aci_blecore_event *p_evt)
{
10044d74:	b5b0      	push	{r4, r5, r7, lr}
10044d76:	b090      	sub	sp, #64	@ 0x40
10044d78:	af00      	add	r7, sp, #0
10044d7a:	6078      	str	r0, [r7, #4]
  BLEEVT_EvtAckStatus_t return_value = BLEEVT_NoAck;
10044d7c:	233f      	movs	r3, #63	@ 0x3f
10044d7e:	18fb      	adds	r3, r7, r3
10044d80:	2200      	movs	r2, #0
10044d82:	701a      	strb	r2, [r3, #0]
  OTA_NotificationEvt_t notification;
  /* USER CODE BEGIN Service2_EventHandler_1 */

  /* USER CODE END Service2_EventHandler_1 */

  switch(p_evt->ecode)
10044d84:	687b      	ldr	r3, [r7, #4]
10044d86:	781a      	ldrb	r2, [r3, #0]
10044d88:	785b      	ldrb	r3, [r3, #1]
10044d8a:	021b      	lsls	r3, r3, #8
10044d8c:	4313      	orrs	r3, r2
10044d8e:	b29b      	uxth	r3, r3
10044d90:	4a97      	ldr	r2, [pc, #604]	@ (10044ff0 <OTA_EventHandler+0x27c>)
10044d92:	4694      	mov	ip, r2
10044d94:	4463      	add	r3, ip
10044d96:	2b19      	cmp	r3, #25
10044d98:	d900      	bls.n	10044d9c <OTA_EventHandler+0x28>
10044d9a:	e11b      	b.n	10044fd4 <OTA_EventHandler+0x260>
10044d9c:	009a      	lsls	r2, r3, #2
10044d9e:	4b95      	ldr	r3, [pc, #596]	@ (10044ff4 <OTA_EventHandler+0x280>)
10044da0:	18d3      	adds	r3, r2, r3
10044da2:	681b      	ldr	r3, [r3, #0]
10044da4:	469f      	mov	pc, r3
    case ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE:
    {
      /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
      
      /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
      p_attribute_modified = (aci_gatt_srv_attribute_modified_event_rp0*)p_evt->data;
10044da6:	687b      	ldr	r3, [r7, #4]
10044da8:	3302      	adds	r3, #2
10044daa:	623b      	str	r3, [r7, #32]
      notification.ConnectionHandle         = p_attribute_modified->Connection_Handle;
10044dac:	6a3b      	ldr	r3, [r7, #32]
10044dae:	781a      	ldrb	r2, [r3, #0]
10044db0:	785b      	ldrb	r3, [r3, #1]
10044db2:	021b      	lsls	r3, r3, #8
10044db4:	4313      	orrs	r3, r2
10044db6:	b29a      	uxth	r2, r3
10044db8:	210c      	movs	r1, #12
10044dba:	187b      	adds	r3, r7, r1
10044dbc:	819a      	strh	r2, [r3, #12]
      notification.AttributeHandle          = p_attribute_modified->Attr_Handle;
10044dbe:	6a3b      	ldr	r3, [r7, #32]
10044dc0:	791a      	ldrb	r2, [r3, #4]
10044dc2:	795b      	ldrb	r3, [r3, #5]
10044dc4:	021b      	lsls	r3, r3, #8
10044dc6:	4313      	orrs	r3, r2
10044dc8:	b29a      	uxth	r2, r3
10044dca:	187b      	adds	r3, r7, r1
10044dcc:	81da      	strh	r2, [r3, #14]
      notification.DataTransfered.Length    = p_attribute_modified->Attr_Data_Length;
10044dce:	6a3b      	ldr	r3, [r7, #32]
10044dd0:	799a      	ldrb	r2, [r3, #6]
10044dd2:	79db      	ldrb	r3, [r3, #7]
10044dd4:	021b      	lsls	r3, r3, #8
10044dd6:	4313      	orrs	r3, r2
10044dd8:	b29b      	uxth	r3, r3
10044dda:	b2da      	uxtb	r2, r3
10044ddc:	187b      	adds	r3, r7, r1
10044dde:	721a      	strb	r2, [r3, #8]
      notification.DataTransfered.p_Payload = p_attribute_modified->Attr_Data;
10044de0:	6a3b      	ldr	r3, [r7, #32]
10044de2:	3308      	adds	r3, #8
10044de4:	001a      	movs	r2, r3
10044de6:	187b      	adds	r3, r7, r1
10044de8:	605a      	str	r2, [r3, #4]
      if(p_attribute_modified->Attr_Handle == (OTA_Context.ConfCharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
10044dea:	6a3b      	ldr	r3, [r7, #32]
10044dec:	791a      	ldrb	r2, [r3, #4]
10044dee:	795b      	ldrb	r3, [r3, #5]
10044df0:	021b      	lsls	r3, r3, #8
10044df2:	4313      	orrs	r3, r2
10044df4:	b29b      	uxth	r3, r3
10044df6:	001a      	movs	r2, r3
10044df8:	4b7f      	ldr	r3, [pc, #508]	@ (10044ff8 <OTA_EventHandler+0x284>)
10044dfa:	889b      	ldrh	r3, [r3, #4]
10044dfc:	3302      	adds	r3, #2
10044dfe:	429a      	cmp	r2, r3
10044e00:	d11c      	bne.n	10044e3c <OTA_EventHandler+0xc8>
      {
        return_value = BLEEVT_Ack;
10044e02:	233f      	movs	r3, #63	@ 0x3f
10044e04:	18fb      	adds	r3, r7, r3
10044e06:	2201      	movs	r2, #1
10044e08:	701a      	strb	r2, [r3, #0]
        /* USER CODE BEGIN Service2_Char_2 */
        
        /* USER CODE END Service2_Char_2 */

        switch(p_attribute_modified->Attr_Data[0])
10044e0a:	6a3b      	ldr	r3, [r7, #32]
10044e0c:	7a1b      	ldrb	r3, [r3, #8]
10044e0e:	2b00      	cmp	r3, #0
10044e10:	d002      	beq.n	10044e18 <OTA_EventHandler+0xa4>
10044e12:	2b02      	cmp	r3, #2
10044e14:	d009      	beq.n	10044e2a <OTA_EventHandler+0xb6>

          default:
          /* USER CODE BEGIN Service2_Char_2_default */
          
          /* USER CODE END Service2_Char_2_default */
          break;
10044e16:	e060      	b.n	10044eda <OTA_EventHandler+0x166>
          notification.EvtOpcode = OTA_CONF_INDICATE_DISABLED_EVT;
10044e18:	210c      	movs	r1, #12
10044e1a:	187b      	adds	r3, r7, r1
10044e1c:	2202      	movs	r2, #2
10044e1e:	701a      	strb	r2, [r3, #0]
          OTA_Notification(&notification);
10044e20:	187b      	adds	r3, r7, r1
10044e22:	0018      	movs	r0, r3
10044e24:	f000 f9b8 	bl	10045198 <OTA_Notification>
          break;
10044e28:	e057      	b.n	10044eda <OTA_EventHandler+0x166>
          notification.EvtOpcode = OTA_CONF_INDICATE_ENABLED_EVT;
10044e2a:	210c      	movs	r1, #12
10044e2c:	187b      	adds	r3, r7, r1
10044e2e:	2201      	movs	r2, #1
10044e30:	701a      	strb	r2, [r3, #0]
          OTA_Notification(&notification);
10044e32:	187b      	adds	r3, r7, r1
10044e34:	0018      	movs	r0, r3
10044e36:	f000 f9af 	bl	10045198 <OTA_Notification>
          break;
10044e3a:	e04e      	b.n	10044eda <OTA_EventHandler+0x166>
        }
      }  /* if(p_attribute_modified->Attr_Handle == (OTA_Context.CONFHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

      else if(p_attribute_modified->Attr_Handle == (OTA_Context.Base_AdrCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10044e3c:	6a3b      	ldr	r3, [r7, #32]
10044e3e:	791a      	ldrb	r2, [r3, #4]
10044e40:	795b      	ldrb	r3, [r3, #5]
10044e42:	021b      	lsls	r3, r3, #8
10044e44:	4313      	orrs	r3, r2
10044e46:	b29b      	uxth	r3, r3
10044e48:	001a      	movs	r2, r3
10044e4a:	4b6b      	ldr	r3, [pc, #428]	@ (10044ff8 <OTA_EventHandler+0x284>)
10044e4c:	885b      	ldrh	r3, [r3, #2]
10044e4e:	3301      	adds	r3, #1
10044e50:	429a      	cmp	r2, r3
10044e52:	d11a      	bne.n	10044e8a <OTA_EventHandler+0x116>
      {
        return_value = BLEEVT_Ack;
10044e54:	233f      	movs	r3, #63	@ 0x3f
10044e56:	18fb      	adds	r3, r7, r3
10044e58:	2201      	movs	r2, #1
10044e5a:	701a      	strb	r2, [r3, #0]

        notification.EvtOpcode = OTA_BASE_ADR_WRITE_NO_RESP_EVT;
10044e5c:	210c      	movs	r1, #12
10044e5e:	187b      	adds	r3, r7, r1
10044e60:	2200      	movs	r2, #0
10044e62:	701a      	strb	r2, [r3, #0]
        /* USER CODE BEGIN Service2_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
        /**
        * Base Address
        */
        notification.DataTransfered.Length = p_attribute_modified->Attr_Data_Length;
10044e64:	6a3b      	ldr	r3, [r7, #32]
10044e66:	799a      	ldrb	r2, [r3, #6]
10044e68:	79db      	ldrb	r3, [r3, #7]
10044e6a:	021b      	lsls	r3, r3, #8
10044e6c:	4313      	orrs	r3, r2
10044e6e:	b29b      	uxth	r3, r3
10044e70:	b2da      	uxtb	r2, r3
10044e72:	187b      	adds	r3, r7, r1
10044e74:	721a      	strb	r2, [r3, #8]
        notification.DataTransfered.p_Payload = p_attribute_modified->Attr_Data;
10044e76:	6a3b      	ldr	r3, [r7, #32]
10044e78:	3308      	adds	r3, #8
10044e7a:	001a      	movs	r2, r3
10044e7c:	187b      	adds	r3, r7, r1
10044e7e:	605a      	str	r2, [r3, #4]
        /* USER CODE END Service2_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
        OTA_Notification(&notification);
10044e80:	187b      	adds	r3, r7, r1
10044e82:	0018      	movs	r0, r3
10044e84:	f000 f988 	bl	10045198 <OTA_Notification>
      } /* if(p_attribute_modified->Attr_Handle == (OTA_Context.Raw_DataCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
      
      /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
10044e88:	e0a6      	b.n	10044fd8 <OTA_EventHandler+0x264>
      else if(p_attribute_modified->Attr_Handle == (OTA_Context.Raw_DataCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10044e8a:	6a3b      	ldr	r3, [r7, #32]
10044e8c:	791a      	ldrb	r2, [r3, #4]
10044e8e:	795b      	ldrb	r3, [r3, #5]
10044e90:	021b      	lsls	r3, r3, #8
10044e92:	4313      	orrs	r3, r2
10044e94:	b29b      	uxth	r3, r3
10044e96:	001a      	movs	r2, r3
10044e98:	4b57      	ldr	r3, [pc, #348]	@ (10044ff8 <OTA_EventHandler+0x284>)
10044e9a:	88db      	ldrh	r3, [r3, #6]
10044e9c:	3301      	adds	r3, #1
10044e9e:	429a      	cmp	r2, r3
10044ea0:	d000      	beq.n	10044ea4 <OTA_EventHandler+0x130>
10044ea2:	e099      	b.n	10044fd8 <OTA_EventHandler+0x264>
        return_value = BLEEVT_Ack;
10044ea4:	233f      	movs	r3, #63	@ 0x3f
10044ea6:	18fb      	adds	r3, r7, r3
10044ea8:	2201      	movs	r2, #1
10044eaa:	701a      	strb	r2, [r3, #0]
        notification.EvtOpcode = OTA_RAW_DATA_WRITE_NO_RESP_EVT;
10044eac:	210c      	movs	r1, #12
10044eae:	187b      	adds	r3, r7, r1
10044eb0:	2203      	movs	r2, #3
10044eb2:	701a      	strb	r2, [r3, #0]
        notification.DataTransfered.Length = p_attribute_modified->Attr_Data_Length;
10044eb4:	6a3b      	ldr	r3, [r7, #32]
10044eb6:	799a      	ldrb	r2, [r3, #6]
10044eb8:	79db      	ldrb	r3, [r3, #7]
10044eba:	021b      	lsls	r3, r3, #8
10044ebc:	4313      	orrs	r3, r2
10044ebe:	b29b      	uxth	r3, r3
10044ec0:	b2da      	uxtb	r2, r3
10044ec2:	187b      	adds	r3, r7, r1
10044ec4:	721a      	strb	r2, [r3, #8]
        notification.DataTransfered.p_Payload = p_attribute_modified->Attr_Data;
10044ec6:	6a3b      	ldr	r3, [r7, #32]
10044ec8:	3308      	adds	r3, #8
10044eca:	001a      	movs	r2, r3
10044ecc:	187b      	adds	r3, r7, r1
10044ece:	605a      	str	r2, [r3, #4]
        OTA_Notification(&notification);
10044ed0:	187b      	adds	r3, r7, r1
10044ed2:	0018      	movs	r0, r3
10044ed4:	f000 f960 	bl	10045198 <OTA_Notification>
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
10044ed8:	e07e      	b.n	10044fd8 <OTA_EventHandler+0x264>
10044eda:	e07d      	b.n	10044fd8 <OTA_EventHandler+0x264>
    case ACI_GATT_SRV_WRITE_VSEVT_CODE:
    {
      /* USER CODE BEGIN EVT_BLUE_SRV_GATT_BEGIN */

      /* USER CODE END EVT_BLUE_SRV_GATT_BEGIN */
      p_write = (aci_gatt_srv_write_event_rp0*)p_evt->data;
10044edc:	687b      	ldr	r3, [r7, #4]
10044ede:	3302      	adds	r3, #2
10044ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if(p_write->Attribute_Handle == (OTA_Context.Base_AdrCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10044ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10044ee4:	795a      	ldrb	r2, [r3, #5]
10044ee6:	799b      	ldrb	r3, [r3, #6]
10044ee8:	021b      	lsls	r3, r3, #8
10044eea:	4313      	orrs	r3, r2
10044eec:	b29b      	uxth	r3, r3
10044eee:	001a      	movs	r2, r3
10044ef0:	4b41      	ldr	r3, [pc, #260]	@ (10044ff8 <OTA_EventHandler+0x284>)
10044ef2:	885b      	ldrh	r3, [r3, #2]
10044ef4:	3301      	adds	r3, #1
10044ef6:	429a      	cmp	r2, r3
10044ef8:	d104      	bne.n	10044f04 <OTA_EventHandler+0x190>
      {
        return_value = BLEEVT_Ack;
10044efa:	233f      	movs	r3, #63	@ 0x3f
10044efc:	18fb      	adds	r3, r7, r3
10044efe:	2201      	movs	r2, #1
10044f00:	701a      	strb	r2, [r3, #0]
      } /*if(p_write->Attribute_Handle == (OTA_Context.Raw_DataCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_WRITE_END */

      /* USER CODE END EVT_BLUE_GATT_SRV_WRITE_END */
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
10044f02:	e06b      	b.n	10044fdc <OTA_EventHandler+0x268>
      else if(p_write->Attribute_Handle == (OTA_Context.Raw_DataCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10044f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10044f06:	795a      	ldrb	r2, [r3, #5]
10044f08:	799b      	ldrb	r3, [r3, #6]
10044f0a:	021b      	lsls	r3, r3, #8
10044f0c:	4313      	orrs	r3, r2
10044f0e:	b29b      	uxth	r3, r3
10044f10:	001a      	movs	r2, r3
10044f12:	4b39      	ldr	r3, [pc, #228]	@ (10044ff8 <OTA_EventHandler+0x284>)
10044f14:	88db      	ldrh	r3, [r3, #6]
10044f16:	3301      	adds	r3, #1
10044f18:	429a      	cmp	r2, r3
10044f1a:	d15f      	bne.n	10044fdc <OTA_EventHandler+0x268>
        return_value = BLEEVT_Ack;
10044f1c:	233f      	movs	r3, #63	@ 0x3f
10044f1e:	18fb      	adds	r3, r7, r3
10044f20:	2201      	movs	r2, #1
10044f22:	701a      	strb	r2, [r3, #0]
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
10044f24:	e05a      	b.n	10044fdc <OTA_EventHandler+0x268>
    }
    case ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE:
    {
      aci_gatt_tx_pool_available_event_rp0 *p_tx_pool_available_event;
      p_tx_pool_available_event = (aci_gatt_tx_pool_available_event_rp0 *) p_evt->data;
10044f26:	687b      	ldr	r3, [r7, #4]
10044f28:	3302      	adds	r3, #2
10044f2a:	633b      	str	r3, [r7, #48]	@ 0x30
      UNUSED(p_tx_pool_available_event);

      /* USER CODE BEGIN ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE */
      
      /* USER CODE END ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE */
      break;/* ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE*/
10044f2c:	e059      	b.n	10044fe2 <OTA_EventHandler+0x26e>
    }
    case ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE:
    {
      aci_att_exchange_mtu_resp_event_rp0 *p_exchange_mtu;
      p_exchange_mtu = (aci_att_exchange_mtu_resp_event_rp0 *)  p_evt->data;
10044f2e:	687b      	ldr	r3, [r7, #4]
10044f30:	3302      	adds	r3, #2
10044f32:	627b      	str	r3, [r7, #36]	@ 0x24
      UNUSED(p_exchange_mtu);

      /* USER CODE BEGIN ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
      
      /* USER CODE END ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
      break;/* ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
10044f34:	e055      	b.n	10044fe2 <OTA_EventHandler+0x26e>
    }
    /* USER CODE BEGIN BLECORE_EVT */
  case ACI_GATT_SRV_CONFIRMATION_VSEVT_CODE:
    {
      aci_gatt_srv_confirmation_event_rp0 *p_srv_confirmation_event;
      p_srv_confirmation_event = (aci_gatt_srv_confirmation_event_rp0 *) p_evt->data;
10044f36:	687b      	ldr	r3, [r7, #4]
10044f38:	3302      	adds	r3, #2
10044f3a:	637b      	str	r3, [r7, #52]	@ 0x34
      UNUSED(p_srv_confirmation_event);
   
      OTA_Conf_Status = (OTA_Confirmation_Status_t)OTA_APP_GetConfStatus();
10044f3c:	f000 fc18 	bl	10045770 <OTA_APP_GetConfStatus>
10044f40:	0003      	movs	r3, r0
10044f42:	001a      	movs	r2, r3
10044f44:	4b2d      	ldr	r3, [pc, #180]	@ (10044ffc <OTA_EventHandler+0x288>)
10044f46:	701a      	strb	r2, [r3, #0]
      
      if(OTA_Conf_Status == OTA_Pending)
10044f48:	4b2c      	ldr	r3, [pc, #176]	@ (10044ffc <OTA_EventHandler+0x288>)
10044f4a:	781b      	ldrb	r3, [r3, #0]
10044f4c:	2b03      	cmp	r3, #3
10044f4e:	d10b      	bne.n	10044f68 <OTA_EventHandler+0x1f4>
      {
        /**
        * Confirmation Event
        */
        OTA_Conf_Status = OTA_No_Pending;
10044f50:	4b2a      	ldr	r3, [pc, #168]	@ (10044ffc <OTA_EventHandler+0x288>)
10044f52:	2202      	movs	r2, #2
10044f54:	701a      	strb	r2, [r3, #0]
        
        notification.EvtOpcode = OTA_CONF_EVT;
10044f56:	210c      	movs	r1, #12
10044f58:	187b      	adds	r3, r7, r1
10044f5a:	2204      	movs	r2, #4
10044f5c:	701a      	strb	r2, [r3, #0]
        OTA_Notification( &notification );
10044f5e:	187b      	adds	r3, r7, r1
10044f60:	0018      	movs	r0, r3
10044f62:	f000 f919 	bl	10045198 <OTA_Notification>
        
        notification.EvtOpcode = OTA_READY_EVT;
        OTA_Notification( &notification );
      }
    }
    break; /* end ACI_GATT_CLT_INDICATION_VSEVT_CODE */   
10044f66:	e03b      	b.n	10044fe0 <OTA_EventHandler+0x26c>
      else if( OTA_Conf_Status == OTA_Ready_Pending)
10044f68:	4b24      	ldr	r3, [pc, #144]	@ (10044ffc <OTA_EventHandler+0x288>)
10044f6a:	781b      	ldrb	r3, [r3, #0]
10044f6c:	2b04      	cmp	r3, #4
10044f6e:	d137      	bne.n	10044fe0 <OTA_EventHandler+0x26c>
        OTA_Conf_Status = OTA_No_Pending;
10044f70:	4b22      	ldr	r3, [pc, #136]	@ (10044ffc <OTA_EventHandler+0x288>)
10044f72:	2202      	movs	r2, #2
10044f74:	701a      	strb	r2, [r3, #0]
        notification.EvtOpcode = OTA_READY_EVT;
10044f76:	210c      	movs	r1, #12
10044f78:	187b      	adds	r3, r7, r1
10044f7a:	2205      	movs	r2, #5
10044f7c:	701a      	strb	r2, [r3, #0]
        OTA_Notification( &notification );
10044f7e:	187b      	adds	r3, r7, r1
10044f80:	0018      	movs	r0, r3
10044f82:	f000 f909 	bl	10045198 <OTA_Notification>
    break; /* end ACI_GATT_CLT_INDICATION_VSEVT_CODE */   
10044f86:	e02b      	b.n	10044fe0 <OTA_EventHandler+0x26c>
    
    /* Manage ACI_GATT_INDICATION_VSEVT_CODE occurring on Android 12 */   
  case ACI_GATT_CLT_INDICATION_VSEVT_CODE:
    {
      tBleStatus status = BLE_STATUS_FAILED;
10044f88:	212f      	movs	r1, #47	@ 0x2f
10044f8a:	187b      	adds	r3, r7, r1
10044f8c:	2281      	movs	r2, #129	@ 0x81
10044f8e:	701a      	strb	r2, [r3, #0]
      aci_gatt_clt_indication_event_rp0 *pr = (void*)p_evt->data;
10044f90:	687b      	ldr	r3, [r7, #4]
10044f92:	3302      	adds	r3, #2
10044f94:	62bb      	str	r3, [r7, #40]	@ 0x28
      status = aci_gatt_clt_confirm_indication(pr->Connection_Handle, BLE_GATT_UNENHANCED_ATT_L2CAP_CID);
10044f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10044f98:	781a      	ldrb	r2, [r3, #0]
10044f9a:	785b      	ldrb	r3, [r3, #1]
10044f9c:	021b      	lsls	r3, r3, #8
10044f9e:	4313      	orrs	r3, r2
10044fa0:	b29b      	uxth	r3, r3
10044fa2:	000d      	movs	r5, r1
10044fa4:	187c      	adds	r4, r7, r1
10044fa6:	2104      	movs	r1, #4
10044fa8:	0018      	movs	r0, r3
10044faa:	f00c ff49 	bl	10051e40 <aci_gatt_clt_confirm_indication>
10044fae:	0003      	movs	r3, r0
10044fb0:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
10044fb2:	197b      	adds	r3, r7, r5
10044fb4:	781b      	ldrb	r3, [r3, #0]
10044fb6:	2b00      	cmp	r3, #0
10044fb8:	d007      	beq.n	10044fca <OTA_EventHandler+0x256>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_confirm_indication command, result: 0x%x \n", status);
10044fba:	197b      	adds	r3, r7, r5
10044fbc:	781a      	ldrb	r2, [r3, #0]
10044fbe:	4b10      	ldr	r3, [pc, #64]	@ (10045000 <OTA_EventHandler+0x28c>)
10044fc0:	0011      	movs	r1, r2
10044fc2:	0018      	movs	r0, r3
10044fc4:	f021 ffa0 	bl	10066f08 <iprintf>
      else
      {
        APP_DBG_MSG("  Success: aci_gatt_confirm_indication command\n");
      }   
    }
    break; /* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
10044fc8:	e00b      	b.n	10044fe2 <OTA_EventHandler+0x26e>
        APP_DBG_MSG("  Success: aci_gatt_confirm_indication command\n");
10044fca:	4b0e      	ldr	r3, [pc, #56]	@ (10045004 <OTA_EventHandler+0x290>)
10044fcc:	0018      	movs	r0, r3
10044fce:	f022 f80b 	bl	10066fe8 <puts>
    break; /* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
10044fd2:	e006      	b.n	10044fe2 <OTA_EventHandler+0x26e>
    /* USER CODE END BLECORE_EVT */
  default:
    /* USER CODE BEGIN EVT_DEFAULT */
    
    /* USER CODE END EVT_DEFAULT */
    break;
10044fd4:	46c0      	nop			@ (mov r8, r8)
10044fd6:	e004      	b.n	10044fe2 <OTA_EventHandler+0x26e>
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
10044fd8:	46c0      	nop			@ (mov r8, r8)
10044fda:	e002      	b.n	10044fe2 <OTA_EventHandler+0x26e>
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
10044fdc:	46c0      	nop			@ (mov r8, r8)
10044fde:	e000      	b.n	10044fe2 <OTA_EventHandler+0x26e>
    break; /* end ACI_GATT_CLT_INDICATION_VSEVT_CODE */   
10044fe0:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service2_EventHandler_2 */

  /* USER CODE END Service2_EventHandler_2 */

  return(return_value);
10044fe2:	233f      	movs	r3, #63	@ 0x3f
10044fe4:	18fb      	adds	r3, r7, r3
10044fe6:	781b      	ldrb	r3, [r3, #0]
}/* end OTA_EventHandler */
10044fe8:	0018      	movs	r0, r3
10044fea:	46bd      	mov	sp, r7
10044fec:	b010      	add	sp, #64	@ 0x40
10044fee:	bdb0      	pop	{r4, r5, r7, pc}
10044ff0:	fffff3ff 	.word	0xfffff3ff
10044ff4:	10069a50 	.word	0x10069a50
10044ff8:	200003a0 	.word	0x200003a0
10044ffc:	200003a8 	.word	0x200003a8
10045000:	10069304 	.word	0x10069304
10045004:	10069344 	.word	0x10069344

10045008 <OTA_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void OTA_Init(void)
{
10045008:	b590      	push	{r4, r7, lr}
1004500a:	b083      	sub	sp, #12
1004500c:	af00      	add	r7, sp, #0
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
1004500e:	1dfb      	adds	r3, r7, #7
10045010:	2212      	movs	r2, #18
10045012:	701a      	strb	r2, [r3, #0]
  /* USER CODE END InitService2Svc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  BLEEVT_RegisterGattEvtHandler(OTA_EventHandler);
10045014:	4b23      	ldr	r3, [pc, #140]	@ (100450a4 <OTA_Init+0x9c>)
10045016:	0018      	movs	r0, r3
10045018:	f00c fa18 	bl	1005144c <BLEEVT_RegisterGattEvtHandler>

  ret = aci_gatt_srv_add_service((ble_gatt_srv_def_t *)&ota_service);
1004501c:	1dfc      	adds	r4, r7, #7
1004501e:	4b22      	ldr	r3, [pc, #136]	@ (100450a8 <OTA_Init+0xa0>)
10045020:	0018      	movs	r0, r3
10045022:	f00c fe71 	bl	10051d08 <aci_gatt_srv_add_service>
10045026:	0003      	movs	r3, r0
10045028:	7023      	strb	r3, [r4, #0]

  if (ret != BLE_STATUS_SUCCESS)
1004502a:	1dfb      	adds	r3, r7, #7
1004502c:	781b      	ldrb	r3, [r3, #0]
1004502e:	2b00      	cmp	r3, #0
10045030:	d007      	beq.n	10045042 <OTA_Init+0x3a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_srv_add_service command: OTA, error code: 0x%x \n", ret);
10045032:	1dfb      	adds	r3, r7, #7
10045034:	781a      	ldrb	r2, [r3, #0]
10045036:	4b1d      	ldr	r3, [pc, #116]	@ (100450ac <OTA_Init+0xa4>)
10045038:	0011      	movs	r1, r2
1004503a:	0018      	movs	r0, r3
1004503c:	f021 ff64 	bl	10066f08 <iprintf>
10045040:	e003      	b.n	1004504a <OTA_Init+0x42>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_srv_add_service command: OTA \n");
10045042:	4b1b      	ldr	r3, [pc, #108]	@ (100450b0 <OTA_Init+0xa8>)
10045044:	0018      	movs	r0, r3
10045046:	f021 ffcf 	bl	10066fe8 <puts>
  }

  OTA_Context.OtaSvcHdle = aci_gatt_srv_get_service_handle((ble_gatt_srv_def_t *) &ota_service);
1004504a:	4b17      	ldr	r3, [pc, #92]	@ (100450a8 <OTA_Init+0xa0>)
1004504c:	0018      	movs	r0, r3
1004504e:	f00c fe68 	bl	10051d22 <aci_gatt_srv_get_service_handle>
10045052:	0003      	movs	r3, r0
10045054:	001a      	movs	r2, r3
10045056:	4b17      	ldr	r3, [pc, #92]	@ (100450b4 <OTA_Init+0xac>)
10045058:	801a      	strh	r2, [r3, #0]
  OTA_Context.Base_AdrCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&ota_chars[0]);
1004505a:	4b17      	ldr	r3, [pc, #92]	@ (100450b8 <OTA_Init+0xb0>)
1004505c:	0018      	movs	r0, r3
1004505e:	f00c fe80 	bl	10051d62 <aci_gatt_srv_get_char_decl_handle>
10045062:	0003      	movs	r3, r0
10045064:	001a      	movs	r2, r3
10045066:	4b13      	ldr	r3, [pc, #76]	@ (100450b4 <OTA_Init+0xac>)
10045068:	805a      	strh	r2, [r3, #2]
  OTA_Context.ConfCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&ota_chars[1]);
1004506a:	4b14      	ldr	r3, [pc, #80]	@ (100450bc <OTA_Init+0xb4>)
1004506c:	0018      	movs	r0, r3
1004506e:	f00c fe78 	bl	10051d62 <aci_gatt_srv_get_char_decl_handle>
10045072:	0003      	movs	r3, r0
10045074:	001a      	movs	r2, r3
10045076:	4b0f      	ldr	r3, [pc, #60]	@ (100450b4 <OTA_Init+0xac>)
10045078:	809a      	strh	r2, [r3, #4]
  OTA_Context.Raw_DataCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&ota_chars[2]);
1004507a:	4b11      	ldr	r3, [pc, #68]	@ (100450c0 <OTA_Init+0xb8>)
1004507c:	0018      	movs	r0, r3
1004507e:	f00c fe70 	bl	10051d62 <aci_gatt_srv_get_char_decl_handle>
10045082:	0003      	movs	r3, r0
10045084:	001a      	movs	r2, r3
10045086:	4b0b      	ldr	r3, [pc, #44]	@ (100450b4 <OTA_Init+0xac>)
10045088:	80da      	strh	r2, [r3, #6]

  /* USER CODE BEGIN InitService1Svc_2 */

  /* USER CODE END InitService1Svc_2 */

  if (ret != BLE_STATUS_SUCCESS)
1004508a:	1dfb      	adds	r3, r7, #7
1004508c:	781b      	ldrb	r3, [r3, #0]
1004508e:	2b00      	cmp	r3, #0
10045090:	d004      	beq.n	1004509c <OTA_Init+0x94>
  {
    APP_DBG_MSG("  Fail registering OTA handlers\n");
10045092:	4b0c      	ldr	r3, [pc, #48]	@ (100450c4 <OTA_Init+0xbc>)
10045094:	0018      	movs	r0, r3
10045096:	f021 ffa7 	bl	10066fe8 <puts>
  }

  return;
1004509a:	46c0      	nop			@ (mov r8, r8)
1004509c:	46c0      	nop			@ (mov r8, r8)
}
1004509e:	46bd      	mov	sp, r7
100450a0:	b003      	add	sp, #12
100450a2:	bd90      	pop	{r4, r7, pc}
100450a4:	10044d75 	.word	0x10044d75
100450a8:	10069a28 	.word	0x10069a28
100450ac:	10069374 	.word	0x10069374
100450b0:	100693bc 	.word	0x100693bc
100450b4:	200003a0 	.word	0x200003a0
100450b8:	100699bc 	.word	0x100699bc
100450bc:	100699e0 	.word	0x100699e0
100450c0:	10069a04 	.word	0x10069a04
100450c4:	100693f0 	.word	0x100693f0

100450c8 <OTA_NotifyValue>:
 * @param  pData: pointer to the data to be notified to the client
 * @param  ConnectionHandle: connection handle identifying the client to be notified.
 *
 */
tBleStatus OTA_NotifyValue(OTA_CharOpcode_t CharOpcode, OTA_Data_t *pData, uint16_t ConnectionHandle)
{
100450c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100450ca:	b087      	sub	sp, #28
100450cc:	af02      	add	r7, sp, #8
100450ce:	6039      	str	r1, [r7, #0]
100450d0:	0011      	movs	r1, r2
100450d2:	1dfb      	adds	r3, r7, #7
100450d4:	1c02      	adds	r2, r0, #0
100450d6:	701a      	strb	r2, [r3, #0]
100450d8:	1d3b      	adds	r3, r7, #4
100450da:	1c0a      	adds	r2, r1, #0
100450dc:	801a      	strh	r2, [r3, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
100450de:	240f      	movs	r4, #15
100450e0:	193b      	adds	r3, r7, r4
100450e2:	2212      	movs	r2, #18
100450e4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN Service2_App_Notify_Char_1 */

  /* USER CODE END Service2_App_Notify_Char_1 */

  switch(CharOpcode)
100450e6:	1dfb      	adds	r3, r7, #7
100450e8:	781b      	ldrb	r3, [r3, #0]
100450ea:	2b01      	cmp	r3, #1
100450ec:	d132      	bne.n	10045154 <OTA_NotifyValue+0x8c>
  {

    case OTA_CONF:
      memcpy(conf_val_buffer, pData->p_Payload, MIN(pData->Length, sizeof(conf_val_buffer)));
100450ee:	683b      	ldr	r3, [r7, #0]
100450f0:	6819      	ldr	r1, [r3, #0]
100450f2:	683b      	ldr	r3, [r7, #0]
100450f4:	791b      	ldrb	r3, [r3, #4]
100450f6:	1e5a      	subs	r2, r3, #1
100450f8:	4193      	sbcs	r3, r2
100450fa:	b2db      	uxtb	r3, r3
100450fc:	001a      	movs	r2, r3
100450fe:	4b19      	ldr	r3, [pc, #100]	@ (10045164 <OTA_NotifyValue+0x9c>)
10045100:	0018      	movs	r0, r3
10045102:	f022 f993 	bl	1006742c <memcpy>
      ret = aci_gatt_srv_notify(ConnectionHandle,
                                BLE_GATT_UNENHANCED_ATT_L2CAP_CID,
                                OTA_Context.ConfCharHdle + 1,
10045106:	4b18      	ldr	r3, [pc, #96]	@ (10045168 <OTA_NotifyValue+0xa0>)
10045108:	889b      	ldrh	r3, [r3, #4]
      ret = aci_gatt_srv_notify(ConnectionHandle,
1004510a:	3301      	adds	r3, #1
1004510c:	b299      	uxth	r1, r3
                                GATT_INDICATION,
                                pData->Length, /* charValueLen */
1004510e:	683b      	ldr	r3, [r7, #0]
10045110:	791b      	ldrb	r3, [r3, #4]
      ret = aci_gatt_srv_notify(ConnectionHandle,
10045112:	001d      	movs	r5, r3
10045114:	683b      	ldr	r3, [r7, #0]
10045116:	681b      	ldr	r3, [r3, #0]
10045118:	0026      	movs	r6, r4
1004511a:	193c      	adds	r4, r7, r4
1004511c:	1d3a      	adds	r2, r7, #4
1004511e:	8810      	ldrh	r0, [r2, #0]
10045120:	9301      	str	r3, [sp, #4]
10045122:	9500      	str	r5, [sp, #0]
10045124:	2302      	movs	r3, #2
10045126:	000a      	movs	r2, r1
10045128:	2104      	movs	r1, #4
1004512a:	f00c fe27 	bl	10051d7c <aci_gatt_srv_notify>
1004512e:	0003      	movs	r3, r0
10045130:	7023      	strb	r3, [r4, #0]
                                (uint8_t *)pData->p_Payload);
      if (ret != BLE_STATUS_SUCCESS)
10045132:	19bb      	adds	r3, r7, r6
10045134:	781b      	ldrb	r3, [r3, #0]
10045136:	2b00      	cmp	r3, #0
10045138:	d007      	beq.n	1004514a <OTA_NotifyValue+0x82>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_srv_notify CONF command, error code: 0x%2X\n", ret);
1004513a:	19bb      	adds	r3, r7, r6
1004513c:	781a      	ldrb	r2, [r3, #0]
1004513e:	4b0b      	ldr	r3, [pc, #44]	@ (1004516c <OTA_NotifyValue+0xa4>)
10045140:	0011      	movs	r1, r2
10045142:	0018      	movs	r0, r3
10045144:	f021 fee0 	bl	10066f08 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_srv_notify CONF command\n");
      }
      /* USER CODE BEGIN Service2_Char_Value_2*/

      /* USER CODE END Service2_Char_Value_2*/
      break;
10045148:	e005      	b.n	10045156 <OTA_NotifyValue+0x8e>
        APP_DBG_MSG("  Success: aci_gatt_srv_notify CONF command\n");
1004514a:	4b09      	ldr	r3, [pc, #36]	@ (10045170 <OTA_NotifyValue+0xa8>)
1004514c:	0018      	movs	r0, r3
1004514e:	f021 ff4b 	bl	10066fe8 <puts>
      break;
10045152:	e000      	b.n	10045156 <OTA_NotifyValue+0x8e>

    default:
      break;
10045154:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service2_App_Notify_Char_2 */

  /* USER CODE END Service2_App_Notify_Char_2 */

  return ret;
10045156:	230f      	movs	r3, #15
10045158:	18fb      	adds	r3, r7, r3
1004515a:	781b      	ldrb	r3, [r3, #0]
}
1004515c:	0018      	movs	r0, r3
1004515e:	46bd      	mov	sp, r7
10045160:	b005      	add	sp, #20
10045162:	bdf0      	pop	{r4, r5, r6, r7, pc}
10045164:	200003b8 	.word	0x200003b8
10045168:	200003a0 	.word	0x200003a0
1004516c:	10069410 	.word	0x10069410
10045170:	10069450 	.word	0x10069450

10045174 <__NVIC_SystemReset>:
{
10045174:	b580      	push	{r7, lr}
10045176:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
10045178:	f3bf 8f4f 	dsb	sy
}
1004517c:	46c0      	nop			@ (mov r8, r8)
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1004517e:	4b04      	ldr	r3, [pc, #16]	@ (10045190 <__NVIC_SystemReset+0x1c>)
10045180:	4a04      	ldr	r2, [pc, #16]	@ (10045194 <__NVIC_SystemReset+0x20>)
10045182:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
10045184:	f3bf 8f4f 	dsb	sy
}
10045188:	46c0      	nop			@ (mov r8, r8)
    __NOP();
1004518a:	46c0      	nop			@ (mov r8, r8)
1004518c:	e7fd      	b.n	1004518a <__NVIC_SystemReset+0x16>
1004518e:	46c0      	nop			@ (mov r8, r8)
10045190:	e000ed00 	.word	0xe000ed00
10045194:	05fa0004 	.word	0x05fa0004

10045198 <OTA_Notification>:
};
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void OTA_Notification(OTA_NotificationEvt_t *p_Notification)
{
10045198:	b5b0      	push	{r4, r5, r7, lr}
1004519a:	b086      	sub	sp, #24
1004519c:	af00      	add	r7, sp, #0
1004519e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Service2_Notification_1 */
  OTA_Data_t msg_conf;
  /* USER CODE END Service2_Notification_1 */
  switch(p_Notification->EvtOpcode)
100451a0:	687b      	ldr	r3, [r7, #4]
100451a2:	781b      	ldrb	r3, [r3, #0]
100451a4:	2b05      	cmp	r3, #5
100451a6:	d900      	bls.n	100451aa <OTA_Notification+0x12>
100451a8:	e243      	b.n	10045632 <OTA_Notification+0x49a>
100451aa:	009a      	lsls	r2, r3, #2
100451ac:	4be2      	ldr	r3, [pc, #904]	@ (10045538 <OTA_Notification+0x3a0>)
100451ae:	18d3      	adds	r3, r2, r3
100451b0:	681b      	ldr	r3, [r3, #0]
100451b2:	469f      	mov	pc, r3
         * The Remote notifies it has send all the data to be written in Flash
         */
        /**
         * Decide now what to do after all the data has been written in Flash
         */
        switch(OTA_APP_Context.file_type)
100451b4:	4ae1      	ldr	r2, [pc, #900]	@ (1004553c <OTA_Notification+0x3a4>)
100451b6:	2380      	movs	r3, #128	@ 0x80
100451b8:	005b      	lsls	r3, r3, #1
100451ba:	5cd3      	ldrb	r3, [r2, r3]
100451bc:	2b01      	cmp	r3, #1
100451be:	d108      	bne.n	100451d2 <OTA_Notification+0x3a>
        {
          case Fw_App:
            {
              APP_DBG_MSG("OTA_CONF_EVT: Reboot on new application\n");              
100451c0:	4bdf      	ldr	r3, [pc, #892]	@ (10045540 <OTA_Notification+0x3a8>)
100451c2:	0018      	movs	r0, r3
100451c4:	f021 ff10 	bl	10066fe8 <puts>
              
              UTIL_SEQ_SetTask(1<<CFG_TASK_OTA_REBOOT_REQ_ID, CFG_SEQ_PRIO_0);
100451c8:	2100      	movs	r1, #0
100451ca:	2010      	movs	r0, #16
100451cc:	f00d f898 	bl	10052300 <UTIL_SEQ_SetTask>
            }
            break;
100451d0:	e000      	b.n	100451d4 <OTA_Notification+0x3c>
            
          default:
            break;
100451d2:	46c0      	nop			@ (mov r8, r8)
        }
      }
      break;
100451d4:	e230      	b.n	10045638 <OTA_Notification+0x4a0>
    /* USER CODE END Service2_Notification_Service2_EvtOpcode */

    case OTA_BASE_ADR_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN Service2Char1_WRITE_NO_RESP_EVT */
      {
        switch( ((OTA_Base_Addr_Event_Format_t*)(p_Notification->DataTransfered.p_Payload))->Command )
100451d6:	687b      	ldr	r3, [r7, #4]
100451d8:	685b      	ldr	r3, [r3, #4]
100451da:	781b      	ldrb	r3, [r3, #0]
100451dc:	2b08      	cmp	r3, #8
100451de:	d900      	bls.n	100451e2 <OTA_Notification+0x4a>
100451e0:	e13e      	b.n	10045460 <OTA_Notification+0x2c8>
100451e2:	009a      	lsls	r2, r3, #2
100451e4:	4bd7      	ldr	r3, [pc, #860]	@ (10045544 <OTA_Notification+0x3ac>)
100451e6:	18d3      	adds	r3, r2, r3
100451e8:	681b      	ldr	r3, [r3, #0]
100451ea:	469f      	mov	pc, r3
          case OTA_STOP_ALL_UPLOAD:
            break;

          case OTA_USER_CONF_UPLOAD:
            {
              FM_Cmd_Status_t error = FM_ERROR;
100451ec:	2317      	movs	r3, #23
100451ee:	18fb      	adds	r3, r7, r3
100451f0:	2202      	movs	r2, #2
100451f2:	701a      	strb	r2, [r3, #0]
              
              APP_DBG_MSG("OTA_USER_CONF_UPLOAD\n");
100451f4:	4bd4      	ldr	r3, [pc, #848]	@ (10045548 <OTA_Notification+0x3b0>)
100451f6:	0018      	movs	r0, r3
100451f8:	f021 fef6 	bl	10066fe8 <puts>

              OTA_APP_Context.file_type = User_Conf;
100451fc:	4acf      	ldr	r2, [pc, #828]	@ (1004553c <OTA_Notification+0x3a4>)
100451fe:	2380      	movs	r3, #128	@ 0x80
10045200:	005b      	lsls	r3, r3, #1
10045202:	2100      	movs	r1, #0
10045204:	54d1      	strb	r1, [r2, r3]
              OTA_APP_Context.base_address = USER_CFG_SLOT_START_SECTOR_INDEX * FLASH_PAGE_SIZE + FLASH_START_ADDR;
10045206:	4bd1      	ldr	r3, [pc, #836]	@ (1004554c <OTA_Notification+0x3b4>)
10045208:	681b      	ldr	r3, [r3, #0]
1004520a:	03db      	lsls	r3, r3, #15
1004520c:	0bdb      	lsrs	r3, r3, #15
1004520e:	3301      	adds	r3, #1
10045210:	009b      	lsls	r3, r3, #2
10045212:	0adb      	lsrs	r3, r3, #11
10045214:	4ace      	ldr	r2, [pc, #824]	@ (10045550 <OTA_Notification+0x3b8>)
10045216:	4694      	mov	ip, r2
10045218:	4463      	add	r3, ip
1004521a:	02da      	lsls	r2, r3, #11
1004521c:	4bc7      	ldr	r3, [pc, #796]	@ (1004553c <OTA_Notification+0x3a4>)
1004521e:	605a      	str	r2, [r3, #4]
              address_offset = 0;              
10045220:	4bcc      	ldr	r3, [pc, #816]	@ (10045554 <OTA_Notification+0x3bc>)
10045222:	2200      	movs	r2, #0
10045224:	601a      	str	r2, [r3, #0]
              OTA_APP_Context.sectors = CFG_USER_CFG_NB_SECTORS;              
10045226:	4bc5      	ldr	r3, [pc, #788]	@ (1004553c <OTA_Notification+0x3a4>)
10045228:	2202      	movs	r2, #2
1004522a:	721a      	strb	r2, [r3, #8]
              OTA_APP_Context.Conf_Indication_Status = OTA_APP_Ready_Pending;
1004522c:	4bc3      	ldr	r3, [pc, #780]	@ (1004553c <OTA_Notification+0x3a4>)
1004522e:	2204      	movs	r2, #4
10045230:	701a      	strb	r2, [r3, #0]
              
              /* Erase the sector */
              /* Clear events before start testing */
              UTIL_SEQ_ClrEvt ( 1 << CFG_IDLEEVT_FM_ERASE_CALLBACK_EVT_RSP_ID);
10045232:	2004      	movs	r0, #4
10045234:	f00d f8ae 	bl	10052394 <UTIL_SEQ_ClrEvt>
              
              while(error != FM_OK)
10045238:	e040      	b.n	100452bc <OTA_Notification+0x124>
              {  
                /* Flash manager erase */
                if(OTA_APP_Context.sectors == 0)
1004523a:	4bc0      	ldr	r3, [pc, #768]	@ (1004553c <OTA_Notification+0x3a4>)
1004523c:	7a1b      	ldrb	r3, [r3, #8]
1004523e:	2b00      	cmp	r3, #0
10045240:	d102      	bne.n	10045248 <OTA_Notification+0xb0>
                  OTA_APP_Context.sectors = CFG_USER_CFG_NB_SECTORS;
10045242:	4bbe      	ldr	r3, [pc, #760]	@ (1004553c <OTA_Notification+0x3a4>)
10045244:	2202      	movs	r2, #2
10045246:	721a      	strb	r2, [r3, #8]
                error = FM_Erase((uint32_t)USER_CFG_SLOT_START_SECTOR_INDEX, 
10045248:	4bc0      	ldr	r3, [pc, #768]	@ (1004554c <OTA_Notification+0x3b4>)
1004524a:	681b      	ldr	r3, [r3, #0]
1004524c:	03db      	lsls	r3, r3, #15
1004524e:	0bdb      	lsrs	r3, r3, #15
10045250:	3301      	adds	r3, #1
10045252:	009b      	lsls	r3, r3, #2
10045254:	0adb      	lsrs	r3, r3, #11
10045256:	1f18      	subs	r0, r3, #4
                                 (uint32_t)(OTA_APP_Context.sectors),
10045258:	4bb8      	ldr	r3, [pc, #736]	@ (1004553c <OTA_Notification+0x3a4>)
1004525a:	7a1b      	ldrb	r3, [r3, #8]
                error = FM_Erase((uint32_t)USER_CFG_SLOT_START_SECTOR_INDEX, 
1004525c:	0019      	movs	r1, r3
1004525e:	2517      	movs	r5, #23
10045260:	197c      	adds	r4, r7, r5
10045262:	4bbd      	ldr	r3, [pc, #756]	@ (10045558 <OTA_Notification+0x3c0>)
10045264:	001a      	movs	r2, r3
10045266:	f004 f8d3 	bl	10049410 <FM_Erase>
1004526a:	0003      	movs	r3, r0
1004526c:	7023      	strb	r3, [r4, #0]
                                 &FM_EraseStatusCallback);
                
                /* Check write op. */
                if (error == FM_OK)
1004526e:	002c      	movs	r4, r5
10045270:	193b      	adds	r3, r7, r4
10045272:	781b      	ldrb	r3, [r3, #0]
10045274:	2b00      	cmp	r3, #0
10045276:	d111      	bne.n	1004529c <OTA_Notification+0x104>
                {
                  /* Wait for write callback to be invoked */
                  UTIL_SEQ_WaitEvt ( 1 << CFG_IDLEEVT_FM_ERASE_CALLBACK_EVT_RSP_ID);
10045278:	2004      	movs	r0, #4
1004527a:	f00d f8a9 	bl	100523d0 <UTIL_SEQ_WaitEvt>
                  
                  /* Clear events before start testing */
                  UTIL_SEQ_ClrEvt ( 1 << CFG_IDLEEVT_FM_ERASE_CALLBACK_EVT_RSP_ID);
1004527e:	2004      	movs	r0, #4
10045280:	f00d f888 	bl	10052394 <UTIL_SEQ_ClrEvt>
                  
                  /* Check status of write op. */
                  if (FM_EraseStatus != FM_OPERATION_COMPLETE)
10045284:	4bb5      	ldr	r3, [pc, #724]	@ (1004555c <OTA_Notification+0x3c4>)
10045286:	781b      	ldrb	r3, [r3, #0]
10045288:	2b00      	cmp	r3, #0
1004528a:	d017      	beq.n	100452bc <OTA_Notification+0x124>
                  {
                    error = FM_ERROR;
1004528c:	193b      	adds	r3, r7, r4
1004528e:	2202      	movs	r2, #2
10045290:	701a      	strb	r2, [r3, #0]
                    APP_DBG_MSG("FM_WriteStatus != FM_OPERATION_COMPLETE => FM_ERROR\n");
10045292:	4bb3      	ldr	r3, [pc, #716]	@ (10045560 <OTA_Notification+0x3c8>)
10045294:	0018      	movs	r0, r3
10045296:	f021 fea7 	bl	10066fe8 <puts>
1004529a:	e00f      	b.n	100452bc <OTA_Notification+0x124>
                  }
                }
                else if(error == FM_BUSY)
1004529c:	2317      	movs	r3, #23
1004529e:	18fb      	adds	r3, r7, r3
100452a0:	781b      	ldrb	r3, [r3, #0]
100452a2:	2b01      	cmp	r3, #1
100452a4:	d106      	bne.n	100452b4 <OTA_Notification+0x11c>
                {
                  /* Wait for write callback to be invoked */
                  UTIL_SEQ_WaitEvt ( 1 << CFG_IDLEEVT_FM_ERASE_CALLBACK_EVT_RSP_ID);
100452a6:	2004      	movs	r0, #4
100452a8:	f00d f892 	bl	100523d0 <UTIL_SEQ_WaitEvt>
                  
                  /* Clear events before start testing */
                  UTIL_SEQ_ClrEvt ( 1 << CFG_IDLEEVT_FM_ERASE_CALLBACK_EVT_RSP_ID);
100452ac:	2004      	movs	r0, #4
100452ae:	f00d f871 	bl	10052394 <UTIL_SEQ_ClrEvt>
100452b2:	e003      	b.n	100452bc <OTA_Notification+0x124>
                }
                else
                {
                  APP_DBG_MSG("FM_ERROR\n");
100452b4:	4bab      	ldr	r3, [pc, #684]	@ (10045564 <OTA_Notification+0x3cc>)
100452b6:	0018      	movs	r0, r3
100452b8:	f021 fe96 	bl	10066fe8 <puts>
              while(error != FM_OK)
100452bc:	2317      	movs	r3, #23
100452be:	18fb      	adds	r3, r7, r3
100452c0:	781b      	ldrb	r3, [r3, #0]
100452c2:	2b00      	cmp	r3, #0
100452c4:	d1b9      	bne.n	1004523a <OTA_Notification+0xa2>
                }
              } /* while(error != FM_OK) */
              
              a_OTA_UpdateCharData[0] = OTA_READY_TO_RECEIVE_FILE;
100452c6:	4ba8      	ldr	r3, [pc, #672]	@ (10045568 <OTA_Notification+0x3d0>)
100452c8:	2202      	movs	r2, #2
100452ca:	701a      	strb	r2, [r3, #0]
              msg_conf.p_Payload = a_OTA_UpdateCharData;
100452cc:	210c      	movs	r1, #12
100452ce:	187b      	adds	r3, r7, r1
100452d0:	4aa5      	ldr	r2, [pc, #660]	@ (10045568 <OTA_Notification+0x3d0>)
100452d2:	601a      	str	r2, [r3, #0]
              msg_conf.Length = 1;
100452d4:	187b      	adds	r3, r7, r1
100452d6:	2201      	movs	r2, #1
100452d8:	711a      	strb	r2, [r3, #4]
              OTA_NotifyValue(OTA_CONF, &msg_conf, OTA_APP_Context.ConnectionHandle);
100452da:	4a98      	ldr	r2, [pc, #608]	@ (1004553c <OTA_Notification+0x3a4>)
100452dc:	2381      	movs	r3, #129	@ 0x81
100452de:	005b      	lsls	r3, r3, #1
100452e0:	5ad2      	ldrh	r2, [r2, r3]
100452e2:	187b      	adds	r3, r7, r1
100452e4:	0019      	movs	r1, r3
100452e6:	2001      	movs	r0, #1
100452e8:	f7ff feee 	bl	100450c8 <OTA_NotifyValue>
            }
            break;
100452ec:	e0bb      	b.n	10045466 <OTA_Notification+0x2ce>

          case OTA_APPLICATION_UPLOAD:
            {
              FM_Cmd_Status_t error = FM_ERROR;
100452ee:	2316      	movs	r3, #22
100452f0:	18fb      	adds	r3, r7, r3
100452f2:	2202      	movs	r2, #2
100452f4:	701a      	strb	r2, [r3, #0]
              
              APP_DBG_MSG("OTA_APPLICATION_UPLOAD\n");
100452f6:	4b9d      	ldr	r3, [pc, #628]	@ (1004556c <OTA_Notification+0x3d4>)
100452f8:	0018      	movs	r0, r3
100452fa:	f021 fe75 	bl	10066fe8 <puts>
              
              OTA_APP_Context.file_type = Fw_App;
100452fe:	4a8f      	ldr	r2, [pc, #572]	@ (1004553c <OTA_Notification+0x3a4>)
10045300:	2380      	movs	r3, #128	@ 0x80
10045302:	005b      	lsls	r3, r3, #1
10045304:	2101      	movs	r1, #1
10045306:	54d1      	strb	r1, [r2, r3]
              OTA_APP_Context.base_address = (DOWNLOAD_SLOT_START_SECTOR_INDEX * FLASH_PAGE_SIZE) + FLASH_START_ADDR;              
10045308:	4b90      	ldr	r3, [pc, #576]	@ (1004554c <OTA_Notification+0x3b4>)
1004530a:	681b      	ldr	r3, [r3, #0]
1004530c:	03db      	lsls	r3, r3, #15
1004530e:	0bdb      	lsrs	r3, r3, #15
10045310:	3301      	adds	r3, #1
10045312:	009b      	lsls	r3, r3, #2
10045314:	0adb      	lsrs	r3, r3, #11
10045316:	3b06      	subs	r3, #6
10045318:	085b      	lsrs	r3, r3, #1
1004531a:	4a95      	ldr	r2, [pc, #596]	@ (10045570 <OTA_Notification+0x3d8>)
1004531c:	4694      	mov	ip, r2
1004531e:	4463      	add	r3, ip
10045320:	02da      	lsls	r2, r3, #11
10045322:	4b86      	ldr	r3, [pc, #536]	@ (1004553c <OTA_Notification+0x3a4>)
10045324:	605a      	str	r2, [r3, #4]
              address_offset = 0;              
10045326:	4b8b      	ldr	r3, [pc, #556]	@ (10045554 <OTA_Notification+0x3bc>)
10045328:	2200      	movs	r2, #0
1004532a:	601a      	str	r2, [r3, #0]
              OTA_APP_Context.sectors = DOWNLOAD_SLOT_NB_SECTORS;              
1004532c:	4b87      	ldr	r3, [pc, #540]	@ (1004554c <OTA_Notification+0x3b4>)
1004532e:	681b      	ldr	r3, [r3, #0]
10045330:	03db      	lsls	r3, r3, #15
10045332:	0bdb      	lsrs	r3, r3, #15
10045334:	3301      	adds	r3, #1
10045336:	009b      	lsls	r3, r3, #2
10045338:	0adb      	lsrs	r3, r3, #11
1004533a:	3b06      	subs	r3, #6
1004533c:	085b      	lsrs	r3, r3, #1
1004533e:	b2da      	uxtb	r2, r3
10045340:	4b7e      	ldr	r3, [pc, #504]	@ (1004553c <OTA_Notification+0x3a4>)
10045342:	721a      	strb	r2, [r3, #8]
              OTA_APP_Context.Conf_Indication_Status = OTA_APP_Ready_Pending;
10045344:	4b7d      	ldr	r3, [pc, #500]	@ (1004553c <OTA_Notification+0x3a4>)
10045346:	2204      	movs	r2, #4
10045348:	701a      	strb	r2, [r3, #0]
              
              /* Erase the sectors */
              /* Clear events before start testing */
              UTIL_SEQ_ClrEvt ( 1 << CFG_IDLEEVT_FM_ERASE_CALLBACK_EVT_RSP_ID);
1004534a:	2004      	movs	r0, #4
1004534c:	f00d f822 	bl	10052394 <UTIL_SEQ_ClrEvt>
              
              while(error != FM_OK)
10045350:	e047      	b.n	100453e2 <OTA_Notification+0x24a>
              {  
                /* Flash manager write */
                if(OTA_APP_Context.sectors == 0)
10045352:	4b7a      	ldr	r3, [pc, #488]	@ (1004553c <OTA_Notification+0x3a4>)
10045354:	7a1b      	ldrb	r3, [r3, #8]
10045356:	2b00      	cmp	r3, #0
10045358:	d10b      	bne.n	10045372 <OTA_Notification+0x1da>
                  OTA_APP_Context.sectors = DOWNLOAD_SLOT_NB_SECTORS;
1004535a:	4b7c      	ldr	r3, [pc, #496]	@ (1004554c <OTA_Notification+0x3b4>)
1004535c:	681b      	ldr	r3, [r3, #0]
1004535e:	03db      	lsls	r3, r3, #15
10045360:	0bdb      	lsrs	r3, r3, #15
10045362:	3301      	adds	r3, #1
10045364:	009b      	lsls	r3, r3, #2
10045366:	0adb      	lsrs	r3, r3, #11
10045368:	3b06      	subs	r3, #6
1004536a:	085b      	lsrs	r3, r3, #1
1004536c:	b2da      	uxtb	r2, r3
1004536e:	4b73      	ldr	r3, [pc, #460]	@ (1004553c <OTA_Notification+0x3a4>)
10045370:	721a      	strb	r2, [r3, #8]
                error = FM_Erase((uint32_t)((OTA_APP_Context.base_address - FLASH_START_ADDR) / FLASH_PAGE_SIZE), 
10045372:	4b72      	ldr	r3, [pc, #456]	@ (1004553c <OTA_Notification+0x3a4>)
10045374:	685b      	ldr	r3, [r3, #4]
10045376:	4a7f      	ldr	r2, [pc, #508]	@ (10045574 <OTA_Notification+0x3dc>)
10045378:	4694      	mov	ip, r2
1004537a:	4463      	add	r3, ip
1004537c:	0ad8      	lsrs	r0, r3, #11
                                 (uint32_t)(OTA_APP_Context.sectors),
1004537e:	4b6f      	ldr	r3, [pc, #444]	@ (1004553c <OTA_Notification+0x3a4>)
10045380:	7a1b      	ldrb	r3, [r3, #8]
                error = FM_Erase((uint32_t)((OTA_APP_Context.base_address - FLASH_START_ADDR) / FLASH_PAGE_SIZE), 
10045382:	0019      	movs	r1, r3
10045384:	2516      	movs	r5, #22
10045386:	197c      	adds	r4, r7, r5
10045388:	4b73      	ldr	r3, [pc, #460]	@ (10045558 <OTA_Notification+0x3c0>)
1004538a:	001a      	movs	r2, r3
1004538c:	f004 f840 	bl	10049410 <FM_Erase>
10045390:	0003      	movs	r3, r0
10045392:	7023      	strb	r3, [r4, #0]
                                 &FM_EraseStatusCallback);
                
                /* Check write op. */
                if (error == FM_OK)
10045394:	002c      	movs	r4, r5
10045396:	193b      	adds	r3, r7, r4
10045398:	781b      	ldrb	r3, [r3, #0]
1004539a:	2b00      	cmp	r3, #0
1004539c:	d111      	bne.n	100453c2 <OTA_Notification+0x22a>
                {
                  /* Wait for write callback to be invoked */
                  UTIL_SEQ_WaitEvt ( 1 << CFG_IDLEEVT_FM_ERASE_CALLBACK_EVT_RSP_ID);
1004539e:	2004      	movs	r0, #4
100453a0:	f00d f816 	bl	100523d0 <UTIL_SEQ_WaitEvt>
                  
                  /* Clear events before start testing */
                  UTIL_SEQ_ClrEvt ( 1 << CFG_IDLEEVT_FM_ERASE_CALLBACK_EVT_RSP_ID);
100453a4:	2004      	movs	r0, #4
100453a6:	f00c fff5 	bl	10052394 <UTIL_SEQ_ClrEvt>
                  
                  /* Check status of write op. */
                  if (FM_EraseStatus != FM_OPERATION_COMPLETE)
100453aa:	4b6c      	ldr	r3, [pc, #432]	@ (1004555c <OTA_Notification+0x3c4>)
100453ac:	781b      	ldrb	r3, [r3, #0]
100453ae:	2b00      	cmp	r3, #0
100453b0:	d017      	beq.n	100453e2 <OTA_Notification+0x24a>
                  {
                    error = FM_ERROR;
100453b2:	193b      	adds	r3, r7, r4
100453b4:	2202      	movs	r2, #2
100453b6:	701a      	strb	r2, [r3, #0]
                    APP_DBG_MSG("FM_WriteStatus != FM_OPERATION_COMPLETE => FM_ERROR\n");
100453b8:	4b69      	ldr	r3, [pc, #420]	@ (10045560 <OTA_Notification+0x3c8>)
100453ba:	0018      	movs	r0, r3
100453bc:	f021 fe14 	bl	10066fe8 <puts>
100453c0:	e00f      	b.n	100453e2 <OTA_Notification+0x24a>
                  }
                }
                else if(error == FM_BUSY)
100453c2:	2316      	movs	r3, #22
100453c4:	18fb      	adds	r3, r7, r3
100453c6:	781b      	ldrb	r3, [r3, #0]
100453c8:	2b01      	cmp	r3, #1
100453ca:	d106      	bne.n	100453da <OTA_Notification+0x242>
                {
                  /* Wait for write callback to be invoked */
                  UTIL_SEQ_WaitEvt ( 1 << CFG_IDLEEVT_FM_ERASE_CALLBACK_EVT_RSP_ID);
100453cc:	2004      	movs	r0, #4
100453ce:	f00c ffff 	bl	100523d0 <UTIL_SEQ_WaitEvt>
                  
                  /* Clear events before start testing */
                  UTIL_SEQ_ClrEvt ( 1 << CFG_IDLEEVT_FM_ERASE_CALLBACK_EVT_RSP_ID);
100453d2:	2004      	movs	r0, #4
100453d4:	f00c ffde 	bl	10052394 <UTIL_SEQ_ClrEvt>
100453d8:	e003      	b.n	100453e2 <OTA_Notification+0x24a>
                }
                else
                {
                  APP_DBG_MSG("FM_ERROR\n");
100453da:	4b62      	ldr	r3, [pc, #392]	@ (10045564 <OTA_Notification+0x3cc>)
100453dc:	0018      	movs	r0, r3
100453de:	f021 fe03 	bl	10066fe8 <puts>
              while(error != FM_OK)
100453e2:	2316      	movs	r3, #22
100453e4:	18fb      	adds	r3, r7, r3
100453e6:	781b      	ldrb	r3, [r3, #0]
100453e8:	2b00      	cmp	r3, #0
100453ea:	d1b2      	bne.n	10045352 <OTA_Notification+0x1ba>
                }
              } /* while(error != FM_OK) */
              
              msg_conf.Length = 1;
100453ec:	210c      	movs	r1, #12
100453ee:	187b      	adds	r3, r7, r1
100453f0:	2201      	movs	r2, #1
100453f2:	711a      	strb	r2, [r3, #4]
              a_OTA_UpdateCharData[0] = OTA_READY_TO_RECEIVE_FILE;
100453f4:	4b5c      	ldr	r3, [pc, #368]	@ (10045568 <OTA_Notification+0x3d0>)
100453f6:	2202      	movs	r2, #2
100453f8:	701a      	strb	r2, [r3, #0]
              msg_conf.p_Payload = a_OTA_UpdateCharData;
100453fa:	187b      	adds	r3, r7, r1
100453fc:	4a5a      	ldr	r2, [pc, #360]	@ (10045568 <OTA_Notification+0x3d0>)
100453fe:	601a      	str	r2, [r3, #0]
              OTA_NotifyValue(OTA_CONF, &msg_conf, OTA_APP_Context.ConnectionHandle);
10045400:	4a4e      	ldr	r2, [pc, #312]	@ (1004553c <OTA_Notification+0x3a4>)
10045402:	2381      	movs	r3, #129	@ 0x81
10045404:	005b      	lsls	r3, r3, #1
10045406:	5ad2      	ldrh	r2, [r2, r3]
10045408:	187b      	adds	r3, r7, r1
1004540a:	0019      	movs	r1, r3
1004540c:	2001      	movs	r0, #1
1004540e:	f7ff fe5b 	bl	100450c8 <OTA_NotifyValue>
            }
            break;
10045412:	e028      	b.n	10045466 <OTA_Notification+0x2ce>

          case OTA_UPLOAD_FINISHED:
            {
              APP_DBG_MSG("OTA_UPLOAD_FINISHED\n");
10045414:	4b58      	ldr	r3, [pc, #352]	@ (10045578 <OTA_Notification+0x3e0>)
10045416:	0018      	movs	r0, r3
10045418:	f021 fde6 	bl	10066fe8 <puts>
              if(OTA_APP_Context.file_type == Fw_App)
1004541c:	4a47      	ldr	r2, [pc, #284]	@ (1004553c <OTA_Notification+0x3a4>)
1004541e:	2380      	movs	r3, #128	@ 0x80
10045420:	005b      	lsls	r3, r3, #1
10045422:	5cd3      	ldrb	r3, [r2, r3]
10045424:	2b01      	cmp	r3, #1
10045426:	d11d      	bne.n	10045464 <OTA_Notification+0x2cc>
              { /* Reboot only after new application download */
                OTA_APP_Context.Conf_Indication_Status = OTA_APP_Pending;
10045428:	4b44      	ldr	r3, [pc, #272]	@ (1004553c <OTA_Notification+0x3a4>)
1004542a:	2203      	movs	r2, #3
1004542c:	701a      	strb	r2, [r3, #0]
                msg_conf.Length = 1;
1004542e:	210c      	movs	r1, #12
10045430:	187b      	adds	r3, r7, r1
10045432:	2201      	movs	r2, #1
10045434:	711a      	strb	r2, [r3, #4]
                a_OTA_UpdateCharData[0] = OTA_REBOOT_CONFIRMED;
10045436:	4b4c      	ldr	r3, [pc, #304]	@ (10045568 <OTA_Notification+0x3d0>)
10045438:	2201      	movs	r2, #1
1004543a:	701a      	strb	r2, [r3, #0]
                msg_conf.p_Payload = a_OTA_UpdateCharData;
1004543c:	187b      	adds	r3, r7, r1
1004543e:	4a4a      	ldr	r2, [pc, #296]	@ (10045568 <OTA_Notification+0x3d0>)
10045440:	601a      	str	r2, [r3, #0]
                OTA_NotifyValue(OTA_CONF, &msg_conf, OTA_APP_Context.ConnectionHandle);
10045442:	4a3e      	ldr	r2, [pc, #248]	@ (1004553c <OTA_Notification+0x3a4>)
10045444:	2381      	movs	r3, #129	@ 0x81
10045446:	005b      	lsls	r3, r3, #1
10045448:	5ad2      	ldrh	r2, [r2, r3]
1004544a:	187b      	adds	r3, r7, r1
1004544c:	0019      	movs	r1, r3
1004544e:	2001      	movs	r0, #1
10045450:	f7ff fe3a 	bl	100450c8 <OTA_NotifyValue>
              }
            }
            break;
10045454:	e006      	b.n	10045464 <OTA_Notification+0x2cc>

          case OTA_CANCEL_UPLOAD:
            {
              APP_DBG_MSG("OTA_CANCEL_UPLOAD\n");
10045456:	4b49      	ldr	r3, [pc, #292]	@ (1004557c <OTA_Notification+0x3e4>)
10045458:	0018      	movs	r0, r3
1004545a:	f021 fdc5 	bl	10066fe8 <puts>
            }
            break;
1004545e:	e002      	b.n	10045466 <OTA_Notification+0x2ce>

          default:
            break;
10045460:	46c0      	nop			@ (mov r8, r8)
10045462:	e0e9      	b.n	10045638 <OTA_Notification+0x4a0>
            break;
10045464:	46c0      	nop			@ (mov r8, r8)
        }
      }
      /* USER CODE END Service2Char1_WRITE_NO_RESP_EVT */
      break;
10045466:	e0e7      	b.n	10045638 <OTA_Notification+0x4a0>

    case OTA_CONF_INDICATE_ENABLED_EVT:
      /* USER CODE BEGIN Service2Char2_INDICATE_ENABLED_EVT */
      APP_DBG_MSG("OTA_CONF_INDICATE_ENABLED_EVT\n");
10045468:	4b45      	ldr	r3, [pc, #276]	@ (10045580 <OTA_Notification+0x3e8>)
1004546a:	0018      	movs	r0, r3
1004546c:	f021 fdbc 	bl	10066fe8 <puts>
      /* USER CODE END Service2Char2_INDICATE_ENABLED_EVT */
      break;
10045470:	e0e2      	b.n	10045638 <OTA_Notification+0x4a0>

    case OTA_CONF_INDICATE_DISABLED_EVT:
      /* USER CODE BEGIN Service2Char2_INDICATE_DISABLED_EVT */
      APP_DBG_MSG("OTA_CONF_INDICATE_DISABLED_EVT\n");
10045472:	4b44      	ldr	r3, [pc, #272]	@ (10045584 <OTA_Notification+0x3ec>)
10045474:	0018      	movs	r0, r3
10045476:	f021 fdb7 	bl	10066fe8 <puts>
      /* USER CODE END Service2Char2_INDICATE_DISABLED_EVT */
      break;
1004547a:	e0dd      	b.n	10045638 <OTA_Notification+0x4a0>

    case OTA_RAW_DATA_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN Service2Char3_WRITE_NO_RESP_EVT */
      {
        FM_Cmd_Status_t error = FM_ERROR;
1004547c:	2315      	movs	r3, #21
1004547e:	18fb      	adds	r3, r7, r3
10045480:	2202      	movs	r2, #2
10045482:	701a      	strb	r2, [r3, #0]
        
        /**
         * Write in Flash the data received in the BLE packet
         */
        size_left = p_Notification->DataTransfered.Length;
10045484:	687b      	ldr	r3, [r7, #4]
10045486:	7a1b      	ldrb	r3, [r3, #8]
10045488:	001a      	movs	r2, r3
1004548a:	4b3f      	ldr	r3, [pc, #252]	@ (10045588 <OTA_Notification+0x3f0>)
1004548c:	601a      	str	r2, [r3, #0]
        
        if(OTA_APP_Context.file_type == Fw_App)
1004548e:	4a2b      	ldr	r2, [pc, #172]	@ (1004553c <OTA_Notification+0x3a4>)
10045490:	2380      	movs	r3, #128	@ 0x80
10045492:	005b      	lsls	r3, r3, #1
10045494:	5cd3      	ldrb	r3, [r2, r3]
10045496:	2b01      	cmp	r3, #1
10045498:	d11c      	bne.n	100454d4 <OTA_Notification+0x33c>
        {
          // Check address
          if(OTA_APP_Context.base_address + address_offset + size_left > FLASH_START_ADDR + ((DOWNLOAD_SLOT_START_SECTOR_INDEX + DOWNLOAD_SLOT_NB_SECTORS) * FLASH_PAGE_SIZE))
1004549a:	4b28      	ldr	r3, [pc, #160]	@ (1004553c <OTA_Notification+0x3a4>)
1004549c:	685a      	ldr	r2, [r3, #4]
1004549e:	4b2d      	ldr	r3, [pc, #180]	@ (10045554 <OTA_Notification+0x3bc>)
100454a0:	681b      	ldr	r3, [r3, #0]
100454a2:	18d2      	adds	r2, r2, r3
100454a4:	4b38      	ldr	r3, [pc, #224]	@ (10045588 <OTA_Notification+0x3f0>)
100454a6:	681b      	ldr	r3, [r3, #0]
100454a8:	18d2      	adds	r2, r2, r3
100454aa:	4b28      	ldr	r3, [pc, #160]	@ (1004554c <OTA_Notification+0x3b4>)
100454ac:	681b      	ldr	r3, [r3, #0]
100454ae:	03db      	lsls	r3, r3, #15
100454b0:	0bdb      	lsrs	r3, r3, #15
100454b2:	3301      	adds	r3, #1
100454b4:	009b      	lsls	r3, r3, #2
100454b6:	0adb      	lsrs	r3, r3, #11
100454b8:	3b06      	subs	r3, #6
100454ba:	2101      	movs	r1, #1
100454bc:	438b      	bics	r3, r1
100454be:	492c      	ldr	r1, [pc, #176]	@ (10045570 <OTA_Notification+0x3d8>)
100454c0:	468c      	mov	ip, r1
100454c2:	4463      	add	r3, ip
100454c4:	02db      	lsls	r3, r3, #11
100454c6:	429a      	cmp	r2, r3
100454c8:	d924      	bls.n	10045514 <OTA_Notification+0x37c>
          {
            APP_DBG_MSG("Write address outside of allowed space\n");
100454ca:	4b30      	ldr	r3, [pc, #192]	@ (1004558c <OTA_Notification+0x3f4>)
100454cc:	0018      	movs	r0, r3
100454ce:	f021 fd8b 	bl	10066fe8 <puts>
            return;
100454d2:	e0b2      	b.n	1004563a <OTA_Notification+0x4a2>
          }
        }
        else if(OTA_APP_Context.file_type == User_Conf)
100454d4:	4a19      	ldr	r2, [pc, #100]	@ (1004553c <OTA_Notification+0x3a4>)
100454d6:	2380      	movs	r3, #128	@ 0x80
100454d8:	005b      	lsls	r3, r3, #1
100454da:	5cd3      	ldrb	r3, [r2, r3]
100454dc:	2b00      	cmp	r3, #0
100454de:	d119      	bne.n	10045514 <OTA_Notification+0x37c>
        {
          if(OTA_APP_Context.base_address + address_offset + size_left > FLASH_START_ADDR + ((USER_CFG_SLOT_START_SECTOR_INDEX + CFG_USER_CFG_NB_SECTORS) * FLASH_PAGE_SIZE))
100454e0:	4b16      	ldr	r3, [pc, #88]	@ (1004553c <OTA_Notification+0x3a4>)
100454e2:	685a      	ldr	r2, [r3, #4]
100454e4:	4b1b      	ldr	r3, [pc, #108]	@ (10045554 <OTA_Notification+0x3bc>)
100454e6:	681b      	ldr	r3, [r3, #0]
100454e8:	18d2      	adds	r2, r2, r3
100454ea:	4b27      	ldr	r3, [pc, #156]	@ (10045588 <OTA_Notification+0x3f0>)
100454ec:	681b      	ldr	r3, [r3, #0]
100454ee:	18d2      	adds	r2, r2, r3
100454f0:	4b16      	ldr	r3, [pc, #88]	@ (1004554c <OTA_Notification+0x3b4>)
100454f2:	681b      	ldr	r3, [r3, #0]
100454f4:	03db      	lsls	r3, r3, #15
100454f6:	0bdb      	lsrs	r3, r3, #15
100454f8:	3301      	adds	r3, #1
100454fa:	009b      	lsls	r3, r3, #2
100454fc:	0adb      	lsrs	r3, r3, #11
100454fe:	4924      	ldr	r1, [pc, #144]	@ (10045590 <OTA_Notification+0x3f8>)
10045500:	468c      	mov	ip, r1
10045502:	4463      	add	r3, ip
10045504:	02db      	lsls	r3, r3, #11
10045506:	429a      	cmp	r2, r3
10045508:	d904      	bls.n	10045514 <OTA_Notification+0x37c>
          {
            APP_DBG_MSG("Write address outside of allowed space.\n");
1004550a:	4b22      	ldr	r3, [pc, #136]	@ (10045594 <OTA_Notification+0x3fc>)
1004550c:	0018      	movs	r0, r3
1004550e:	f021 fd6b 	bl	10066fe8 <puts>
            return;
10045512:	e092      	b.n	1004563a <OTA_Notification+0x4a2>
        /**
         * For the flash manager the address of the data to be stored in FLASH shall be 32bits aligned
         * and the address where the data shall be written shall be 128bits aligned
         */
        memcpy( (uint8_t*)&OTA_APP_Context.write_value,
                ((OTA_Raw_Data_Event_Format_t*)(p_Notification->DataTransfered.p_Payload))->Raw_Data,
10045514:	687b      	ldr	r3, [r7, #4]
10045516:	685b      	ldr	r3, [r3, #4]
10045518:	0019      	movs	r1, r3
        memcpy( (uint8_t*)&OTA_APP_Context.write_value,
1004551a:	4b1b      	ldr	r3, [pc, #108]	@ (10045588 <OTA_Notification+0x3f0>)
1004551c:	681a      	ldr	r2, [r3, #0]
1004551e:	4b1e      	ldr	r3, [pc, #120]	@ (10045598 <OTA_Notification+0x400>)
10045520:	0018      	movs	r0, r3
10045522:	f021 ff83 	bl	1006742c <memcpy>
                size_left );

        /* Clear events before start testing */
        UTIL_SEQ_ClrEvt ( 1 << CFG_IDLEEVT_FM_WRITE_CALLBACK_EVT_RSP_ID);
10045526:	2002      	movs	r0, #2
10045528:	f00c ff34 	bl	10052394 <UTIL_SEQ_ClrEvt>
        
        FD_SetStatus(FD_FLASHACCESS_RFTS_BYPASS, FD_FLASH_ENABLE);
1004552c:	2100      	movs	r1, #0
1004552e:	2000      	movs	r0, #0
10045530:	f003 fe10 	bl	10049154 <FD_SetStatus>

        while(error != FM_OK)
10045534:	e06c      	b.n	10045610 <OTA_Notification+0x478>
10045536:	46c0      	nop			@ (mov r8, r8)
10045538:	10069ab8 	.word	0x10069ab8
1004553c:	200004b0 	.word	0x200004b0
10045540:	1006947c 	.word	0x1006947c
10045544:	10069ad0 	.word	0x10069ad0
10045548:	100694a4 	.word	0x100694a4
1004554c:	40001014 	.word	0x40001014
10045550:	0002007c 	.word	0x0002007c
10045554:	200006cc 	.word	0x200006cc
10045558:	20001318 	.word	0x20001318
1004555c:	200006d1 	.word	0x200006d1
10045560:	100694bc 	.word	0x100694bc
10045564:	100694f0 	.word	0x100694f0
10045568:	200005b4 	.word	0x200005b4
1004556c:	100694fc 	.word	0x100694fc
10045570:	00020082 	.word	0x00020082
10045574:	effc0000 	.word	0xeffc0000
10045578:	10069514 	.word	0x10069514
1004557c:	10069528 	.word	0x10069528
10045580:	1006953c 	.word	0x1006953c
10045584:	1006955c 	.word	0x1006955c
10045588:	200006c8 	.word	0x200006c8
1004558c:	1006957c 	.word	0x1006957c
10045590:	0002007e 	.word	0x0002007e
10045594:	100695a4 	.word	0x100695a4
10045598:	200004bc 	.word	0x200004bc
        { 
          //APP_DBG_MSG("FM_Write 0x%08X %d\n", (uint32_t *)((OTA_APP_Context.base_address) + address_offset), size_left);
          /* Flash manager write */
          error = FM_Write ((uint32_t *)(&OTA_APP_Context.write_value[0]),
                            (uint32_t *)((OTA_APP_Context.base_address) + address_offset),
1004559c:	4b28      	ldr	r3, [pc, #160]	@ (10045640 <OTA_Notification+0x4a8>)
1004559e:	685a      	ldr	r2, [r3, #4]
100455a0:	4b28      	ldr	r3, [pc, #160]	@ (10045644 <OTA_Notification+0x4ac>)
100455a2:	681b      	ldr	r3, [r3, #0]
100455a4:	18d3      	adds	r3, r2, r3
          error = FM_Write ((uint32_t *)(&OTA_APP_Context.write_value[0]),
100455a6:	0019      	movs	r1, r3
                            size_left >> 2,
100455a8:	4b27      	ldr	r3, [pc, #156]	@ (10045648 <OTA_Notification+0x4b0>)
100455aa:	681b      	ldr	r3, [r3, #0]
100455ac:	089b      	lsrs	r3, r3, #2
          error = FM_Write ((uint32_t *)(&OTA_APP_Context.write_value[0]),
100455ae:	001a      	movs	r2, r3
100455b0:	2515      	movs	r5, #21
100455b2:	197c      	adds	r4, r7, r5
100455b4:	4b25      	ldr	r3, [pc, #148]	@ (1004564c <OTA_Notification+0x4b4>)
100455b6:	4826      	ldr	r0, [pc, #152]	@ (10045650 <OTA_Notification+0x4b8>)
100455b8:	f003 fece 	bl	10049358 <FM_Write>
100455bc:	0003      	movs	r3, r0
100455be:	7023      	strb	r3, [r4, #0]
                            &FM_WriteStatusCallback);

          /* Check write op. */
          if (error == FM_OK)
100455c0:	002c      	movs	r4, r5
100455c2:	193b      	adds	r3, r7, r4
100455c4:	781b      	ldrb	r3, [r3, #0]
100455c6:	2b00      	cmp	r3, #0
100455c8:	d111      	bne.n	100455ee <OTA_Notification+0x456>
          {
            /* Wait for write callback to be invoked */
            UTIL_SEQ_WaitEvt ( 1 << CFG_IDLEEVT_FM_WRITE_CALLBACK_EVT_RSP_ID);
100455ca:	2002      	movs	r0, #2
100455cc:	f00c ff00 	bl	100523d0 <UTIL_SEQ_WaitEvt>

            /* Clear events before start testing */
            UTIL_SEQ_ClrEvt ( 1 << CFG_IDLEEVT_FM_WRITE_CALLBACK_EVT_RSP_ID);
100455d0:	2002      	movs	r0, #2
100455d2:	f00c fedf 	bl	10052394 <UTIL_SEQ_ClrEvt>

            /* Check status of write op. */
            if (FM_WriteStatus != FM_OPERATION_COMPLETE)
100455d6:	4b1f      	ldr	r3, [pc, #124]	@ (10045654 <OTA_Notification+0x4bc>)
100455d8:	781b      	ldrb	r3, [r3, #0]
100455da:	2b00      	cmp	r3, #0
100455dc:	d018      	beq.n	10045610 <OTA_Notification+0x478>
            {
              error = FM_ERROR;
100455de:	193b      	adds	r3, r7, r4
100455e0:	2202      	movs	r2, #2
100455e2:	701a      	strb	r2, [r3, #0]
              APP_DBG_MSG("OTA_RAW_DATA_ID: FM_WriteStatus != FM_OPERATION_COMPLETE => FM_ERROR\n");
100455e4:	4b1c      	ldr	r3, [pc, #112]	@ (10045658 <OTA_Notification+0x4c0>)
100455e6:	0018      	movs	r0, r3
100455e8:	f021 fcfe 	bl	10066fe8 <puts>
100455ec:	e010      	b.n	10045610 <OTA_Notification+0x478>
            }
          }
          else if(error == FM_BUSY)
100455ee:	2315      	movs	r3, #21
100455f0:	18fb      	adds	r3, r7, r3
100455f2:	781b      	ldrb	r3, [r3, #0]
100455f4:	2b01      	cmp	r3, #1
100455f6:	d106      	bne.n	10045606 <OTA_Notification+0x46e>
          {
            /* Wait for write callback to be invoked */
            UTIL_SEQ_WaitEvt ( 1 << CFG_IDLEEVT_FM_WRITE_CALLBACK_EVT_RSP_ID);
100455f8:	2002      	movs	r0, #2
100455fa:	f00c fee9 	bl	100523d0 <UTIL_SEQ_WaitEvt>
            
            /* Clear events before start testing */
            UTIL_SEQ_ClrEvt ( 1 << CFG_IDLEEVT_FM_WRITE_CALLBACK_EVT_RSP_ID);
100455fe:	2002      	movs	r0, #2
10045600:	f00c fec8 	bl	10052394 <UTIL_SEQ_ClrEvt>
10045604:	e004      	b.n	10045610 <OTA_Notification+0x478>
          }
          else
          {
            APP_DBG_MSG("OTA_RAW_DATA_ID: FM_ERROR\n");
10045606:	4b15      	ldr	r3, [pc, #84]	@ (1004565c <OTA_Notification+0x4c4>)
10045608:	0018      	movs	r0, r3
1004560a:	f021 fced 	bl	10066fe8 <puts>
            break;
1004560e:	e004      	b.n	1004561a <OTA_Notification+0x482>
        while(error != FM_OK)
10045610:	2315      	movs	r3, #21
10045612:	18fb      	adds	r3, r7, r3
10045614:	781b      	ldrb	r3, [r3, #0]
10045616:	2b00      	cmp	r3, #0
10045618:	d1c0      	bne.n	1004559c <OTA_Notification+0x404>
          }
        } /* while(error != FM_OK) */
        
        FD_SetStatus(FD_FLASHACCESS_RFTS_BYPASS, FD_FLASH_DISABLE);
1004561a:	2101      	movs	r1, #1
1004561c:	2000      	movs	r0, #0
1004561e:	f003 fd99 	bl	10049154 <FD_SetStatus>

        /* Update write offset address for the next FLASH write */
        address_offset += size_left;
10045622:	4b08      	ldr	r3, [pc, #32]	@ (10045644 <OTA_Notification+0x4ac>)
10045624:	681a      	ldr	r2, [r3, #0]
10045626:	4b08      	ldr	r3, [pc, #32]	@ (10045648 <OTA_Notification+0x4b0>)
10045628:	681b      	ldr	r3, [r3, #0]
1004562a:	18d2      	adds	r2, r2, r3
1004562c:	4b05      	ldr	r3, [pc, #20]	@ (10045644 <OTA_Notification+0x4ac>)
1004562e:	601a      	str	r2, [r3, #0]
      }
      /* USER CODE END Service2Char3_WRITE_NO_RESP_EVT */
      break;
10045630:	e002      	b.n	10045638 <OTA_Notification+0x4a0>

    default:
      /* USER CODE BEGIN Service2_Notification_default */

      /* USER CODE END Service2_Notification_default */
      break;
10045632:	46c0      	nop			@ (mov r8, r8)
10045634:	e000      	b.n	10045638 <OTA_Notification+0x4a0>
      break;
10045636:	46c0      	nop			@ (mov r8, r8)
  }
  /* USER CODE BEGIN Service2_Notification_2 */

  /* USER CODE END Service2_Notification_2 */
  return;
10045638:	46c0      	nop			@ (mov r8, r8)
}
1004563a:	46bd      	mov	sp, r7
1004563c:	b006      	add	sp, #24
1004563e:	bdb0      	pop	{r4, r5, r7, pc}
10045640:	200004b0 	.word	0x200004b0
10045644:	200006cc 	.word	0x200006cc
10045648:	200006c8 	.word	0x200006c8
1004564c:	2000130c 	.word	0x2000130c
10045650:	200004bc 	.word	0x200004bc
10045654:	200006d0 	.word	0x200006d0
10045658:	100695cc 	.word	0x100695cc
1004565c:	10069614 	.word	0x10069614

10045660 <OTA_APP_EvtRx>:

void OTA_APP_EvtRx(OTA_APP_ConnHandleNotEvt_t *p_Notification)
{
10045660:	b580      	push	{r7, lr}
10045662:	b082      	sub	sp, #8
10045664:	af00      	add	r7, sp, #0
10045666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Service2_APP_EvtRx_1 */

  /* USER CODE END Service2_APP_EvtRx_1 */

  switch(p_Notification->EvtOpcode)
10045668:	687b      	ldr	r3, [r7, #4]
1004566a:	781b      	ldrb	r3, [r3, #0]
1004566c:	2b00      	cmp	r3, #0
1004566e:	d002      	beq.n	10045676 <OTA_APP_EvtRx+0x16>
10045670:	2b01      	cmp	r3, #1
10045672:	d007      	beq.n	10045684 <OTA_APP_EvtRx+0x24>

    default:
      /* USER CODE BEGIN Service2_APP_EvtRx_default */

      /* USER CODE END Service2_APP_EvtRx_default */
      break;
10045674:	e00d      	b.n	10045692 <OTA_APP_EvtRx+0x32>
      OTA_APP_Context.ConnectionHandle = p_Notification->ConnectionHandle;
10045676:	687b      	ldr	r3, [r7, #4]
10045678:	8859      	ldrh	r1, [r3, #2]
1004567a:	4a08      	ldr	r2, [pc, #32]	@ (1004569c <OTA_APP_EvtRx+0x3c>)
1004567c:	2381      	movs	r3, #129	@ 0x81
1004567e:	005b      	lsls	r3, r3, #1
10045680:	52d1      	strh	r1, [r2, r3]
      break;
10045682:	e006      	b.n	10045692 <OTA_APP_EvtRx+0x32>
      OTA_APP_Context.ConnectionHandle = 0xFFFF;
10045684:	4a05      	ldr	r2, [pc, #20]	@ (1004569c <OTA_APP_EvtRx+0x3c>)
10045686:	2381      	movs	r3, #129	@ 0x81
10045688:	005b      	lsls	r3, r3, #1
1004568a:	2101      	movs	r1, #1
1004568c:	4249      	negs	r1, r1
1004568e:	52d1      	strh	r1, [r2, r3]
      break;
10045690:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service2_APP_EvtRx_2 */

  /* USER CODE END Service2_APP_EvtRx_2 */

  return;
10045692:	46c0      	nop			@ (mov r8, r8)
}
10045694:	46bd      	mov	sp, r7
10045696:	b002      	add	sp, #8
10045698:	bd80      	pop	{r7, pc}
1004569a:	46c0      	nop			@ (mov r8, r8)
1004569c:	200004b0 	.word	0x200004b0

100456a0 <OTA_APP_Init>:

void OTA_APP_Init(void)
{
100456a0:	b580      	push	{r7, lr}
100456a2:	af00      	add	r7, sp, #0
  OTA_APP_Context.ConnectionHandle = 0xFFFF;
100456a4:	4a15      	ldr	r2, [pc, #84]	@ (100456fc <OTA_APP_Init+0x5c>)
100456a6:	2381      	movs	r3, #129	@ 0x81
100456a8:	005b      	lsls	r3, r3, #1
100456aa:	2101      	movs	r1, #1
100456ac:	4249      	negs	r1, r1
100456ae:	52d1      	strh	r1, [r2, r3]
  OTA_Init();
100456b0:	f7ff fcaa 	bl	10045008 <OTA_Init>

  /* USER CODE BEGIN Service2_APP_Init */
  reset_timer.callback = reset;  
100456b4:	4b12      	ldr	r3, [pc, #72]	@ (10045700 <OTA_APP_Init+0x60>)
100456b6:	4a13      	ldr	r2, [pc, #76]	@ (10045704 <OTA_APP_Init+0x64>)
100456b8:	609a      	str	r2, [r3, #8]
  
  UTIL_SEQ_RegTask( 1U << CFG_TASK_OTA_REBOOT_REQ_ID, UTIL_SEQ_RFU, Reboot);  
100456ba:	4b13      	ldr	r3, [pc, #76]	@ (10045708 <OTA_APP_Init+0x68>)
100456bc:	001a      	movs	r2, r3
100456be:	2100      	movs	r1, #0
100456c0:	2010      	movs	r0, #16
100456c2:	f00c fdf9 	bl	100522b8 <UTIL_SEQ_RegTask>
  DeleteSlot( DOWNLOAD_SLOT_START_SECTOR_INDEX ); /* Erase download slot */
100456c6:	4b11      	ldr	r3, [pc, #68]	@ (1004570c <OTA_APP_Init+0x6c>)
100456c8:	681b      	ldr	r3, [r3, #0]
100456ca:	03db      	lsls	r3, r3, #15
100456cc:	0bdb      	lsrs	r3, r3, #15
100456ce:	3301      	adds	r3, #1
100456d0:	009b      	lsls	r3, r3, #2
100456d2:	0adb      	lsrs	r3, r3, #11
100456d4:	3b06      	subs	r3, #6
100456d6:	085b      	lsrs	r3, r3, #1
100456d8:	b2db      	uxtb	r3, r3
100456da:	3302      	adds	r3, #2
100456dc:	b2db      	uxtb	r3, r3
100456de:	0018      	movs	r0, r3
100456e0:	f000 f850 	bl	10045784 <DeleteSlot>
  FM_WriteStatus = FM_OPERATION_AVAILABLE;
100456e4:	4b0a      	ldr	r3, [pc, #40]	@ (10045710 <OTA_APP_Init+0x70>)
100456e6:	2201      	movs	r2, #1
100456e8:	701a      	strb	r2, [r3, #0]
  size_left = 0;
100456ea:	4b0a      	ldr	r3, [pc, #40]	@ (10045714 <OTA_APP_Init+0x74>)
100456ec:	2200      	movs	r2, #0
100456ee:	601a      	str	r2, [r3, #0]
  address_offset = 0;
100456f0:	4b09      	ldr	r3, [pc, #36]	@ (10045718 <OTA_APP_Init+0x78>)
100456f2:	2200      	movs	r2, #0
100456f4:	601a      	str	r2, [r3, #0]
  /* USER CODE END Service2_APP_Init */
  return;
100456f6:	46c0      	nop			@ (mov r8, r8)
}
100456f8:	46bd      	mov	sp, r7
100456fa:	bd80      	pop	{r7, pc}
100456fc:	200004b0 	.word	0x200004b0
10045700:	200006b0 	.word	0x200006b0
10045704:	10045765 	.word	0x10045765
10045708:	1004571d 	.word	0x1004571d
1004570c:	40001014 	.word	0x40001014
10045710:	200006d0 	.word	0x200006d0
10045714:	200006c8 	.word	0x200006c8
10045718:	200006cc 	.word	0x200006cc

1004571c <Reboot>:

/* USER CODE BEGIN FD */
static void Reboot(void)
{  
1004571c:	b580      	push	{r7, lr}
1004571e:	af00      	add	r7, sp, #0
  APP_BLE_Procedure_Gap_General(PROC_GAP_GEN_CONN_TERMINATE);
10045720:	2001      	movs	r0, #1
10045722:	f7fe fef5 	bl	10044510 <APP_BLE_Procedure_Gap_General>
  
  /**
  * Reboot on FW Application
  */
  CFG_OTA_REBOOT_VAL_MSG_ADDR = REBOOT_ON_FW_APP;
10045726:	4b0b      	ldr	r3, [pc, #44]	@ (10045754 <Reboot+0x38>)
10045728:	2200      	movs	r2, #0
1004572a:	701a      	strb	r2, [r3, #0]
  
  /**
  * Give the download sector
  */
  CFG_OTA_START_SECTOR_IDX_VAL_MSG_ADDR = (OTA_APP_Context.base_address - FLASH_START_ADDR) / FLASH_PAGE_SIZE;
1004572c:	4b0a      	ldr	r3, [pc, #40]	@ (10045758 <Reboot+0x3c>)
1004572e:	685b      	ldr	r3, [r3, #4]
10045730:	4a0a      	ldr	r2, [pc, #40]	@ (1004575c <Reboot+0x40>)
10045732:	4694      	mov	ip, r2
10045734:	4463      	add	r3, ip
10045736:	0adb      	lsrs	r3, r3, #11
10045738:	b2da      	uxtb	r2, r3
1004573a:	4b06      	ldr	r3, [pc, #24]	@ (10045754 <Reboot+0x38>)
1004573c:	705a      	strb	r2, [r3, #1]
  
  /* Do not reset immediately to give time to write potential bonding info.  */
  HAL_RADIO_TIMER_StartVirtualTimer(&reset_timer, 500);  
1004573e:	23fa      	movs	r3, #250	@ 0xfa
10045740:	005a      	lsls	r2, r3, #1
10045742:	4b07      	ldr	r3, [pc, #28]	@ (10045760 <Reboot+0x44>)
10045744:	0011      	movs	r1, r2
10045746:	0018      	movs	r0, r3
10045748:	f009 fcfc 	bl	1004f144 <HAL_RADIO_TIMER_StartVirtualTimer>
}
1004574c:	46c0      	nop			@ (mov r8, r8)
1004574e:	46bd      	mov	sp, r7
10045750:	bd80      	pop	{r7, pc}
10045752:	46c0      	nop			@ (mov r8, r8)
10045754:	20000004 	.word	0x20000004
10045758:	200004b0 	.word	0x200004b0
1004575c:	effc0000 	.word	0xeffc0000
10045760:	200006b0 	.word	0x200006b0

10045764 <reset>:
  
void reset(void *tnode)
{
10045764:	b580      	push	{r7, lr}
10045766:	b082      	sub	sp, #8
10045768:	af00      	add	r7, sp, #0
1004576a:	6078      	str	r0, [r7, #4]
  NVIC_SystemReset();  
1004576c:	f7ff fd02 	bl	10045174 <__NVIC_SystemReset>

10045770 <OTA_APP_GetConfStatus>:

/**
 * Get Confiramation status
 */
uint8_t OTA_APP_GetConfStatus(void)
{
10045770:	b580      	push	{r7, lr}
10045772:	af00      	add	r7, sp, #0
  return(OTA_APP_Context.Conf_Indication_Status);
10045774:	4b02      	ldr	r3, [pc, #8]	@ (10045780 <OTA_APP_GetConfStatus+0x10>)
10045776:	781b      	ldrb	r3, [r3, #0]
}
10045778:	0018      	movs	r0, r3
1004577a:	46bd      	mov	sp, r7
1004577c:	bd80      	pop	{r7, pc}
1004577e:	46c0      	nop			@ (mov r8, r8)
10045780:	200004b0 	.word	0x200004b0

10045784 <DeleteSlot>:

/**
 * Erase active or download slot
 */
static void DeleteSlot( uint8_t page_idx )
{
10045784:	b580      	push	{r7, lr}
10045786:	b088      	sub	sp, #32
10045788:	af00      	add	r7, sp, #0
1004578a:	0002      	movs	r2, r0
1004578c:	1dfb      	adds	r3, r7, #7
1004578e:	701a      	strb	r2, [r3, #0]
   * The number of sectors to erase is read from SRAM1.
   * It shall be checked whether the number of sectors to erase does not overlap on the secured Flash
   * The limit can be read from the SFSA option byte which provides the first secured sector address.
   */

  uint32_t last_page_idx = page_idx + APP_SLOT_NB_SECTORS - 1;
10045790:	1dfb      	adds	r3, r7, #7
10045792:	781a      	ldrb	r2, [r3, #0]
10045794:	4b24      	ldr	r3, [pc, #144]	@ (10045828 <DeleteSlot+0xa4>)
10045796:	681b      	ldr	r3, [r3, #0]
10045798:	03db      	lsls	r3, r3, #15
1004579a:	0bdb      	lsrs	r3, r3, #15
1004579c:	3301      	adds	r3, #1
1004579e:	009b      	lsls	r3, r3, #2
100457a0:	0adb      	lsrs	r3, r3, #11
100457a2:	3b06      	subs	r3, #6
100457a4:	085b      	lsrs	r3, r3, #1
100457a6:	18d3      	adds	r3, r2, r3
100457a8:	3b01      	subs	r3, #1
100457aa:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef p_erase_init;
  uint32_t page_error;
  uint32_t NbrOfPageToBeErased = (uint32_t)APP_SLOT_NB_SECTORS;
100457ac:	4b1e      	ldr	r3, [pc, #120]	@ (10045828 <DeleteSlot+0xa4>)
100457ae:	681b      	ldr	r3, [r3, #0]
100457b0:	03db      	lsls	r3, r3, #15
100457b2:	0bdb      	lsrs	r3, r3, #15
100457b4:	3301      	adds	r3, #1
100457b6:	009b      	lsls	r3, r3, #2
100457b8:	0adb      	lsrs	r3, r3, #11
100457ba:	3b06      	subs	r3, #6
100457bc:	085b      	lsrs	r3, r3, #1
100457be:	61fb      	str	r3, [r7, #28]

  if(page_idx < CFG_ACTIVE_SLOT_START_SECTOR_INDEX)
100457c0:	1dfb      	adds	r3, r7, #7
100457c2:	781b      	ldrb	r3, [r3, #0]
100457c4:	2b01      	cmp	r3, #1
100457c6:	d804      	bhi.n	100457d2 <DeleteSlot+0x4e>
  {
    /**
     * Something has been wrong as there is no case we should delete the BLE_BootMngr application
     * Reboot on the active firmware application
     */
    CFG_OTA_REBOOT_VAL_MSG_ADDR = REBOOT_ON_FW_APP;
100457c8:	4b18      	ldr	r3, [pc, #96]	@ (1004582c <DeleteSlot+0xa8>)
100457ca:	2200      	movs	r2, #0
100457cc:	701a      	strb	r2, [r3, #0]
    NVIC_SystemReset(); /* it waits until reset */
100457ce:	f7ff fcd1 	bl	10045174 <__NVIC_SystemReset>
  }

  if ((page_idx + NbrOfPageToBeErased - 1) > last_page_idx)
100457d2:	1dfb      	adds	r3, r7, #7
100457d4:	781a      	ldrb	r2, [r3, #0]
100457d6:	69fb      	ldr	r3, [r7, #28]
100457d8:	18d3      	adds	r3, r2, r3
100457da:	3b01      	subs	r3, #1
100457dc:	69ba      	ldr	r2, [r7, #24]
100457de:	429a      	cmp	r2, r3
100457e0:	d205      	bcs.n	100457ee <DeleteSlot+0x6a>
  {
    NbrOfPageToBeErased = last_page_idx - page_idx + 1;
100457e2:	1dfb      	adds	r3, r7, #7
100457e4:	781b      	ldrb	r3, [r3, #0]
100457e6:	69ba      	ldr	r2, [r7, #24]
100457e8:	1ad3      	subs	r3, r2, r3
100457ea:	3301      	adds	r3, #1
100457ec:	61fb      	str	r3, [r7, #28]
  }

  p_erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
100457ee:	210c      	movs	r1, #12
100457f0:	187b      	adds	r3, r7, r1
100457f2:	2200      	movs	r2, #0
100457f4:	601a      	str	r2, [r3, #0]
  p_erase_init.NbPages = NbrOfPageToBeErased;
100457f6:	187b      	adds	r3, r7, r1
100457f8:	69fa      	ldr	r2, [r7, #28]
100457fa:	609a      	str	r2, [r3, #8]
  p_erase_init.Page = (uint32_t)page_idx;
100457fc:	1dfb      	adds	r3, r7, #7
100457fe:	781a      	ldrb	r2, [r3, #0]
10045800:	187b      	adds	r3, r7, r1
10045802:	605a      	str	r2, [r3, #4]

  if(HAL_FLASHEx_Erase(&p_erase_init, &page_error) != HAL_OK)
10045804:	2308      	movs	r3, #8
10045806:	18fa      	adds	r2, r7, r3
10045808:	187b      	adds	r3, r7, r1
1004580a:	0011      	movs	r1, r2
1004580c:	0018      	movs	r0, r3
1004580e:	f007 fba7 	bl	1004cf60 <HAL_FLASHEx_Erase>
10045812:	1e03      	subs	r3, r0, #0
10045814:	d004      	beq.n	10045820 <DeleteSlot+0x9c>
  {
    APP_DBG_MSG("Erase error!\n");
10045816:	4b06      	ldr	r3, [pc, #24]	@ (10045830 <DeleteSlot+0xac>)
10045818:	0018      	movs	r0, r3
1004581a:	f021 fbe5 	bl	10066fe8 <puts>
  }
  
  return;
1004581e:	46c0      	nop			@ (mov r8, r8)
10045820:	46c0      	nop			@ (mov r8, r8)
}
10045822:	46bd      	mov	sp, r7
10045824:	b008      	add	sp, #32
10045826:	bd80      	pop	{r7, pc}
10045828:	40001014 	.word	0x40001014
1004582c:	20000004 	.word	0x20000004
10045830:	10069630 	.word	0x10069630

10045834 <FM_WriteCallback>:

static void FM_WriteCallback (FM_FlashOp_Status_t Status)
{
10045834:	b580      	push	{r7, lr}
10045836:	b082      	sub	sp, #8
10045838:	af00      	add	r7, sp, #0
1004583a:	0002      	movs	r2, r0
1004583c:	1dfb      	adds	r3, r7, #7
1004583e:	701a      	strb	r2, [r3, #0]
  /* Update status */ 
  FM_WriteStatus = Status;
10045840:	4b05      	ldr	r3, [pc, #20]	@ (10045858 <FM_WriteCallback+0x24>)
10045842:	1dfa      	adds	r2, r7, #7
10045844:	7812      	ldrb	r2, [r2, #0]
10045846:	701a      	strb	r2, [r3, #0]

  /* Set event on Process request call */
  UTIL_SEQ_SetEvt ( 1 << CFG_IDLEEVT_FM_WRITE_CALLBACK_EVT_RSP_ID);
10045848:	2002      	movs	r0, #2
1004584a:	f00c fd85 	bl	10052358 <UTIL_SEQ_SetEvt>
}
1004584e:	46c0      	nop			@ (mov r8, r8)
10045850:	46bd      	mov	sp, r7
10045852:	b002      	add	sp, #8
10045854:	bd80      	pop	{r7, pc}
10045856:	46c0      	nop			@ (mov r8, r8)
10045858:	200006d0 	.word	0x200006d0

1004585c <FM_EraseCallback>:

static void FM_EraseCallback (FM_FlashOp_Status_t Status)
{
1004585c:	b580      	push	{r7, lr}
1004585e:	b082      	sub	sp, #8
10045860:	af00      	add	r7, sp, #0
10045862:	0002      	movs	r2, r0
10045864:	1dfb      	adds	r3, r7, #7
10045866:	701a      	strb	r2, [r3, #0]
  /* Update status */ 
  FM_EraseStatus = Status;
10045868:	4b05      	ldr	r3, [pc, #20]	@ (10045880 <FM_EraseCallback+0x24>)
1004586a:	1dfa      	adds	r2, r7, #7
1004586c:	7812      	ldrb	r2, [r2, #0]
1004586e:	701a      	strb	r2, [r3, #0]

  /* Set event on Process request call */
  UTIL_SEQ_SetEvt ( 1 << CFG_IDLEEVT_FM_ERASE_CALLBACK_EVT_RSP_ID);
10045870:	2004      	movs	r0, #4
10045872:	f00c fd71 	bl	10052358 <UTIL_SEQ_SetEvt>
}
10045876:	46c0      	nop			@ (mov r8, r8)
10045878:	46bd      	mov	sp, r7
1004587a:	b002      	add	sp, #8
1004587c:	bd80      	pop	{r7, pc}
1004587e:	46c0      	nop			@ (mov r8, r8)
10045880:	200006d1 	.word	0x200006d1

10045884 <P2P_SERVER_EventHandler>:
 * @brief  Event handler
 * @param  p_Event: Address of the buffer holding the p_Event
 * @retval Ack: Return whether the p_Event has been managed or not
 */
static BLEEVT_EvtAckStatus_t P2P_SERVER_EventHandler(aci_blecore_event *p_evt)
{
10045884:	b5b0      	push	{r4, r5, r7, lr}
10045886:	b090      	sub	sp, #64	@ 0x40
10045888:	af00      	add	r7, sp, #0
1004588a:	6078      	str	r0, [r7, #4]
  BLEEVT_EvtAckStatus_t return_value = BLEEVT_NoAck;
1004588c:	233f      	movs	r3, #63	@ 0x3f
1004588e:	18fb      	adds	r3, r7, r3
10045890:	2200      	movs	r2, #0
10045892:	701a      	strb	r2, [r3, #0]
  P2P_SERVER_NotificationEvt_t notification;
  /* USER CODE BEGIN Service1_EventHandler_1 */

  /* USER CODE END Service1_EventHandler_1 */

  switch(p_evt->ecode)
10045894:	687b      	ldr	r3, [r7, #4]
10045896:	781a      	ldrb	r2, [r3, #0]
10045898:	785b      	ldrb	r3, [r3, #1]
1004589a:	021b      	lsls	r3, r3, #8
1004589c:	4313      	orrs	r3, r2
1004589e:	b29b      	uxth	r3, r3
100458a0:	4a73      	ldr	r2, [pc, #460]	@ (10045a70 <P2P_SERVER_EventHandler+0x1ec>)
100458a2:	4694      	mov	ip, r2
100458a4:	4463      	add	r3, ip
100458a6:	2b19      	cmp	r3, #25
100458a8:	d900      	bls.n	100458ac <P2P_SERVER_EventHandler+0x28>
100458aa:	e0d2      	b.n	10045a52 <P2P_SERVER_EventHandler+0x1ce>
100458ac:	009a      	lsls	r2, r3, #2
100458ae:	4b71      	ldr	r3, [pc, #452]	@ (10045a74 <P2P_SERVER_EventHandler+0x1f0>)
100458b0:	18d3      	adds	r3, r2, r3
100458b2:	681b      	ldr	r3, [r3, #0]
100458b4:	469f      	mov	pc, r3
    case ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE:
    {
      /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

      /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
      p_attribute_modified = (aci_gatt_srv_attribute_modified_event_rp0*)p_evt->data;
100458b6:	687b      	ldr	r3, [r7, #4]
100458b8:	3302      	adds	r3, #2
100458ba:	623b      	str	r3, [r7, #32]
      notification.ConnectionHandle         = p_attribute_modified->Connection_Handle;
100458bc:	6a3b      	ldr	r3, [r7, #32]
100458be:	781a      	ldrb	r2, [r3, #0]
100458c0:	785b      	ldrb	r3, [r3, #1]
100458c2:	021b      	lsls	r3, r3, #8
100458c4:	4313      	orrs	r3, r2
100458c6:	b29a      	uxth	r2, r3
100458c8:	210c      	movs	r1, #12
100458ca:	187b      	adds	r3, r7, r1
100458cc:	819a      	strh	r2, [r3, #12]
      notification.AttributeHandle          = p_attribute_modified->Attr_Handle;
100458ce:	6a3b      	ldr	r3, [r7, #32]
100458d0:	791a      	ldrb	r2, [r3, #4]
100458d2:	795b      	ldrb	r3, [r3, #5]
100458d4:	021b      	lsls	r3, r3, #8
100458d6:	4313      	orrs	r3, r2
100458d8:	b29a      	uxth	r2, r3
100458da:	187b      	adds	r3, r7, r1
100458dc:	81da      	strh	r2, [r3, #14]
      notification.DataTransfered.Length    = p_attribute_modified->Attr_Data_Length;
100458de:	6a3b      	ldr	r3, [r7, #32]
100458e0:	799a      	ldrb	r2, [r3, #6]
100458e2:	79db      	ldrb	r3, [r3, #7]
100458e4:	021b      	lsls	r3, r3, #8
100458e6:	4313      	orrs	r3, r2
100458e8:	b29b      	uxth	r3, r3
100458ea:	b2da      	uxtb	r2, r3
100458ec:	187b      	adds	r3, r7, r1
100458ee:	721a      	strb	r2, [r3, #8]
      notification.DataTransfered.p_Payload = p_attribute_modified->Attr_Data;
100458f0:	6a3b      	ldr	r3, [r7, #32]
100458f2:	3308      	adds	r3, #8
100458f4:	001a      	movs	r2, r3
100458f6:	187b      	adds	r3, r7, r1
100458f8:	605a      	str	r2, [r3, #4]
      if(p_attribute_modified->Attr_Handle == (P2P_SERVER_Context.Switch_CCharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
100458fa:	6a3b      	ldr	r3, [r7, #32]
100458fc:	791a      	ldrb	r2, [r3, #4]
100458fe:	795b      	ldrb	r3, [r3, #5]
10045900:	021b      	lsls	r3, r3, #8
10045902:	4313      	orrs	r3, r2
10045904:	b29b      	uxth	r3, r3
10045906:	001a      	movs	r2, r3
10045908:	4b5b      	ldr	r3, [pc, #364]	@ (10045a78 <P2P_SERVER_EventHandler+0x1f4>)
1004590a:	889b      	ldrh	r3, [r3, #4]
1004590c:	3302      	adds	r3, #2
1004590e:	429a      	cmp	r2, r3
10045910:	d11c      	bne.n	1004594c <P2P_SERVER_EventHandler+0xc8>
      {
        return_value = BLEEVT_Ack;
10045912:	233f      	movs	r3, #63	@ 0x3f
10045914:	18fb      	adds	r3, r7, r3
10045916:	2201      	movs	r2, #1
10045918:	701a      	strb	r2, [r3, #0]
        /* USER CODE BEGIN Service1_Char_2 */

        /* USER CODE END Service1_Char_2 */
        switch(p_attribute_modified->Attr_Data[0])
1004591a:	6a3b      	ldr	r3, [r7, #32]
1004591c:	7a1b      	ldrb	r3, [r3, #8]
1004591e:	2b00      	cmp	r3, #0
10045920:	d002      	beq.n	10045928 <P2P_SERVER_EventHandler+0xa4>
10045922:	2b01      	cmp	r3, #1
10045924:	d009      	beq.n	1004593a <P2P_SERVER_EventHandler+0xb6>

        default:
          /* USER CODE BEGIN Service1_Char_2_default */

          /* USER CODE END Service1_Char_2_default */
          break;
10045926:	e03d      	b.n	100459a4 <P2P_SERVER_EventHandler+0x120>
          notification.EvtOpcode = P2P_SERVER_SWITCH_C_NOTIFY_DISABLED_EVT;
10045928:	210c      	movs	r1, #12
1004592a:	187b      	adds	r3, r7, r1
1004592c:	2203      	movs	r2, #3
1004592e:	701a      	strb	r2, [r3, #0]
          P2P_SERVER_Notification(&notification);
10045930:	187b      	adds	r3, r7, r1
10045932:	0018      	movs	r0, r3
10045934:	f000 f958 	bl	10045be8 <P2P_SERVER_Notification>
          break;
10045938:	e034      	b.n	100459a4 <P2P_SERVER_EventHandler+0x120>
          notification.EvtOpcode = P2P_SERVER_SWITCH_C_NOTIFY_ENABLED_EVT;
1004593a:	210c      	movs	r1, #12
1004593c:	187b      	adds	r3, r7, r1
1004593e:	2202      	movs	r2, #2
10045940:	701a      	strb	r2, [r3, #0]
          P2P_SERVER_Notification(&notification);
10045942:	187b      	adds	r3, r7, r1
10045944:	0018      	movs	r0, r3
10045946:	f000 f94f 	bl	10045be8 <P2P_SERVER_Notification>
          break;
1004594a:	e02b      	b.n	100459a4 <P2P_SERVER_EventHandler+0x120>
        }
      }  /* if(p_attribute_modified->Attr_Handle == (P2P_SERVER_Context.Switch_CCharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

      else if(p_attribute_modified->Attr_Handle == (P2P_SERVER_Context.Led_CCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
1004594c:	6a3b      	ldr	r3, [r7, #32]
1004594e:	791a      	ldrb	r2, [r3, #4]
10045950:	795b      	ldrb	r3, [r3, #5]
10045952:	021b      	lsls	r3, r3, #8
10045954:	4313      	orrs	r3, r2
10045956:	b29b      	uxth	r3, r3
10045958:	001a      	movs	r2, r3
1004595a:	4b47      	ldr	r3, [pc, #284]	@ (10045a78 <P2P_SERVER_EventHandler+0x1f4>)
1004595c:	885b      	ldrh	r3, [r3, #2]
1004595e:	3301      	adds	r3, #1
10045960:	429a      	cmp	r2, r3
10045962:	d000      	beq.n	10045966 <P2P_SERVER_EventHandler+0xe2>
10045964:	e077      	b.n	10045a56 <P2P_SERVER_EventHandler+0x1d2>
      {
        return_value = BLEEVT_Ack;
10045966:	233f      	movs	r3, #63	@ 0x3f
10045968:	18fb      	adds	r3, r7, r3
1004596a:	2201      	movs	r2, #1
1004596c:	701a      	strb	r2, [r3, #0]

        notification.EvtOpcode = P2P_SERVER_LED_C_WRITE_NO_RESP_EVT;
1004596e:	240c      	movs	r4, #12
10045970:	193b      	adds	r3, r7, r4
10045972:	2201      	movs	r2, #1
10045974:	701a      	strb	r2, [r3, #0]
        /* USER CODE BEGIN Service1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
        APP_DBG_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
10045976:	4b41      	ldr	r3, [pc, #260]	@ (10045a7c <P2P_SERVER_EventHandler+0x1f8>)
10045978:	0018      	movs	r0, r3
1004597a:	f021 fb35 	bl	10066fe8 <puts>
        notification.DataTransfered.Length = p_attribute_modified->Attr_Data_Length;
1004597e:	6a3b      	ldr	r3, [r7, #32]
10045980:	799a      	ldrb	r2, [r3, #6]
10045982:	79db      	ldrb	r3, [r3, #7]
10045984:	021b      	lsls	r3, r3, #8
10045986:	4313      	orrs	r3, r2
10045988:	b29b      	uxth	r3, r3
1004598a:	b2da      	uxtb	r2, r3
1004598c:	193b      	adds	r3, r7, r4
1004598e:	721a      	strb	r2, [r3, #8]
        notification.DataTransfered.p_Payload = p_attribute_modified->Attr_Data;
10045990:	6a3b      	ldr	r3, [r7, #32]
10045992:	3308      	adds	r3, #8
10045994:	001a      	movs	r2, r3
10045996:	193b      	adds	r3, r7, r4
10045998:	605a      	str	r2, [r3, #4]
        /* USER CODE END Service1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
        P2P_SERVER_Notification(&notification);
1004599a:	193b      	adds	r3, r7, r4
1004599c:	0018      	movs	r0, r3
1004599e:	f000 f923 	bl	10045be8 <P2P_SERVER_Notification>
      } /* if(p_attribute_modified->Attr_Handle == (P2P_SERVER_Context.Led_CCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

      /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
100459a2:	e058      	b.n	10045a56 <P2P_SERVER_EventHandler+0x1d2>
100459a4:	e057      	b.n	10045a56 <P2P_SERVER_EventHandler+0x1d2>
    case ACI_GATT_SRV_READ_VSEVT_CODE :
    {
      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_READ_BEGIN */

      /* USER CODE END EVT_BLUE_GATT_SRV_READ_BEGIN */
      p_read = (aci_gatt_srv_read_event_rp0*)p_evt->data;
100459a6:	687b      	ldr	r3, [r7, #4]
100459a8:	3302      	adds	r3, #2
100459aa:	637b      	str	r3, [r7, #52]	@ 0x34
	  if(p_read->Attribute_Handle == (P2P_SERVER_Context.Led_CCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
100459ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100459ae:	791a      	ldrb	r2, [r3, #4]
100459b0:	795b      	ldrb	r3, [r3, #5]
100459b2:	021b      	lsls	r3, r3, #8
100459b4:	4313      	orrs	r3, r2
100459b6:	b29b      	uxth	r3, r3
100459b8:	001a      	movs	r2, r3
100459ba:	4b2f      	ldr	r3, [pc, #188]	@ (10045a78 <P2P_SERVER_EventHandler+0x1f4>)
100459bc:	885b      	ldrh	r3, [r3, #2]
100459be:	3301      	adds	r3, #1
100459c0:	429a      	cmp	r2, r3
100459c2:	d14a      	bne.n	10045a5a <P2P_SERVER_EventHandler+0x1d6>
	  {
		return_value = BLEEVT_Ack;
100459c4:	233f      	movs	r3, #63	@ 0x3f
100459c6:	18fb      	adds	r3, r7, r3
100459c8:	2201      	movs	r2, #1
100459ca:	701a      	strb	r2, [r3, #0]
	  } /* if(p_read->Attribute_Handle == (P2P_SERVER_Context.Led_CCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_READ_END */

      /* USER CODE END EVT_EVT_BLUE_GATT_SRV_READ_END */
      break;/* ACI_GATT_SRV_READ_VSEVT_CODE */
100459cc:	e045      	b.n	10045a5a <P2P_SERVER_EventHandler+0x1d6>
    case ACI_GATT_SRV_WRITE_VSEVT_CODE:
    {
      /* USER CODE BEGIN EVT_BLUE_SRV_GATT_BEGIN */

      /* USER CODE END EVT_BLUE_SRV_GATT_BEGIN */
      p_write = (aci_gatt_srv_write_event_rp0*)p_evt->data;
100459ce:	687b      	ldr	r3, [r7, #4]
100459d0:	3302      	adds	r3, #2
100459d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if(p_write->Attribute_Handle == (P2P_SERVER_Context.Led_CCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
100459d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100459d6:	795a      	ldrb	r2, [r3, #5]
100459d8:	799b      	ldrb	r3, [r3, #6]
100459da:	021b      	lsls	r3, r3, #8
100459dc:	4313      	orrs	r3, r2
100459de:	b29b      	uxth	r3, r3
100459e0:	001a      	movs	r2, r3
100459e2:	4b25      	ldr	r3, [pc, #148]	@ (10045a78 <P2P_SERVER_EventHandler+0x1f4>)
100459e4:	885b      	ldrh	r3, [r3, #2]
100459e6:	3301      	adds	r3, #1
100459e8:	429a      	cmp	r2, r3
100459ea:	d138      	bne.n	10045a5e <P2P_SERVER_EventHandler+0x1da>
      {
        return_value = BLEEVT_Ack;
100459ec:	233f      	movs	r3, #63	@ 0x3f
100459ee:	18fb      	adds	r3, r7, r3
100459f0:	2201      	movs	r2, #1
100459f2:	701a      	strb	r2, [r3, #0]
      } /*if(p_write->Attribute_Handle == (P2P_SERVER_Context.Led_CCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_WRITE_END */

      /* USER CODE END EVT_BLUE_GATT_SRV_WRITE_END */
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
100459f4:	e033      	b.n	10045a5e <P2P_SERVER_EventHandler+0x1da>
    }
    case ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE:
    {
      aci_gatt_tx_pool_available_event_rp0 *p_tx_pool_available_event;
      p_tx_pool_available_event = (aci_gatt_tx_pool_available_event_rp0 *) p_evt->data;
100459f6:	687b      	ldr	r3, [r7, #4]
100459f8:	3302      	adds	r3, #2
100459fa:	633b      	str	r3, [r7, #48]	@ 0x30
      UNUSED(p_tx_pool_available_event);

      /* USER CODE BEGIN ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE */

      /* USER CODE END ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE */
      break;/* ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE*/
100459fc:	e030      	b.n	10045a60 <P2P_SERVER_EventHandler+0x1dc>
    }
    case ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE:
    {
      aci_att_exchange_mtu_resp_event_rp0 *p_exchange_mtu;
      p_exchange_mtu = (aci_att_exchange_mtu_resp_event_rp0 *)  p_evt->data;
100459fe:	687b      	ldr	r3, [r7, #4]
10045a00:	3302      	adds	r3, #2
10045a02:	627b      	str	r3, [r7, #36]	@ 0x24
      UNUSED(p_exchange_mtu);

      /* USER CODE BEGIN ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */

      /* USER CODE END ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
      break;/* ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
10045a04:	e02c      	b.n	10045a60 <P2P_SERVER_EventHandler+0x1dc>
    }
    /* USER CODE BEGIN BLECORE_EVT */
    /* Manage ACI_GATT_INDICATION_VSEVT_CODE occurring on Android 12 */   
  case ACI_GATT_CLT_INDICATION_VSEVT_CODE:
    {
      tBleStatus status = BLE_STATUS_FAILED;
10045a06:	212f      	movs	r1, #47	@ 0x2f
10045a08:	187b      	adds	r3, r7, r1
10045a0a:	2281      	movs	r2, #129	@ 0x81
10045a0c:	701a      	strb	r2, [r3, #0]
      aci_gatt_clt_indication_event_rp0 *pr = (void*)p_evt->data;
10045a0e:	687b      	ldr	r3, [r7, #4]
10045a10:	3302      	adds	r3, #2
10045a12:	62bb      	str	r3, [r7, #40]	@ 0x28
      status = aci_gatt_clt_confirm_indication(pr->Connection_Handle, BLE_GATT_UNENHANCED_ATT_L2CAP_CID);
10045a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10045a16:	781a      	ldrb	r2, [r3, #0]
10045a18:	785b      	ldrb	r3, [r3, #1]
10045a1a:	021b      	lsls	r3, r3, #8
10045a1c:	4313      	orrs	r3, r2
10045a1e:	b29b      	uxth	r3, r3
10045a20:	000d      	movs	r5, r1
10045a22:	187c      	adds	r4, r7, r1
10045a24:	2104      	movs	r1, #4
10045a26:	0018      	movs	r0, r3
10045a28:	f00c fa0a 	bl	10051e40 <aci_gatt_clt_confirm_indication>
10045a2c:	0003      	movs	r3, r0
10045a2e:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
10045a30:	197b      	adds	r3, r7, r5
10045a32:	781b      	ldrb	r3, [r3, #0]
10045a34:	2b00      	cmp	r3, #0
10045a36:	d007      	beq.n	10045a48 <P2P_SERVER_EventHandler+0x1c4>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_confirm_indication command, result: 0x%x \n", status);
10045a38:	197b      	adds	r3, r7, r5
10045a3a:	781a      	ldrb	r2, [r3, #0]
10045a3c:	4b10      	ldr	r3, [pc, #64]	@ (10045a80 <P2P_SERVER_EventHandler+0x1fc>)
10045a3e:	0011      	movs	r1, r2
10045a40:	0018      	movs	r0, r3
10045a42:	f021 fa61 	bl	10066f08 <iprintf>
      else
      {
        APP_DBG_MSG("  Success: aci_gatt_confirm_indication command\n");
      }   
    }
    break; /* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
10045a46:	e00b      	b.n	10045a60 <P2P_SERVER_EventHandler+0x1dc>
        APP_DBG_MSG("  Success: aci_gatt_confirm_indication command\n");
10045a48:	4b0e      	ldr	r3, [pc, #56]	@ (10045a84 <P2P_SERVER_EventHandler+0x200>)
10045a4a:	0018      	movs	r0, r3
10045a4c:	f021 facc 	bl	10066fe8 <puts>
    break; /* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
10045a50:	e006      	b.n	10045a60 <P2P_SERVER_EventHandler+0x1dc>
    /* USER CODE END BLECORE_EVT */
  default:
    /* USER CODE BEGIN EVT_DEFAULT */

    /* USER CODE END EVT_DEFAULT */
    break;
10045a52:	46c0      	nop			@ (mov r8, r8)
10045a54:	e004      	b.n	10045a60 <P2P_SERVER_EventHandler+0x1dc>
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
10045a56:	46c0      	nop			@ (mov r8, r8)
10045a58:	e002      	b.n	10045a60 <P2P_SERVER_EventHandler+0x1dc>
      break;/* ACI_GATT_SRV_READ_VSEVT_CODE */
10045a5a:	46c0      	nop			@ (mov r8, r8)
10045a5c:	e000      	b.n	10045a60 <P2P_SERVER_EventHandler+0x1dc>
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
10045a5e:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_EventHandler_2 */

  /* USER CODE END Service1_EventHandler_2 */

  return(return_value);
10045a60:	233f      	movs	r3, #63	@ 0x3f
10045a62:	18fb      	adds	r3, r7, r3
10045a64:	781b      	ldrb	r3, [r3, #0]
}/* end P2P_SERVER_EventHandler */
10045a66:	0018      	movs	r0, r3
10045a68:	46bd      	mov	sp, r7
10045a6a:	b010      	add	sp, #64	@ 0x40
10045a6c:	bdb0      	pop	{r4, r5, r7, pc}
10045a6e:	46c0      	nop			@ (mov r8, r8)
10045a70:	fffff3ff 	.word	0xfffff3ff
10045a74:	10069b70 	.word	0x10069b70
10045a78:	200006d4 	.word	0x200006d4
10045a7c:	10069640 	.word	0x10069640
10045a80:	10069668 	.word	0x10069668
10045a84:	100696a8 	.word	0x100696a8

10045a88 <P2P_SERVER_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2P_SERVER_Init(void)
{
10045a88:	b590      	push	{r4, r7, lr}
10045a8a:	b083      	sub	sp, #12
10045a8c:	af00      	add	r7, sp, #0
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
10045a8e:	1dfb      	adds	r3, r7, #7
10045a90:	2212      	movs	r2, #18
10045a92:	701a      	strb	r2, [r3, #0]
  /* USER CODE END InitService1Svc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  BLEEVT_RegisterGattEvtHandler(P2P_SERVER_EventHandler);
10045a94:	4b1f      	ldr	r3, [pc, #124]	@ (10045b14 <P2P_SERVER_Init+0x8c>)
10045a96:	0018      	movs	r0, r3
10045a98:	f00b fcd8 	bl	1005144c <BLEEVT_RegisterGattEvtHandler>

  ret = aci_gatt_srv_add_service((ble_gatt_srv_def_t *)&p2p_server_service);
10045a9c:	1dfc      	adds	r4, r7, #7
10045a9e:	4b1e      	ldr	r3, [pc, #120]	@ (10045b18 <P2P_SERVER_Init+0x90>)
10045aa0:	0018      	movs	r0, r3
10045aa2:	f00c f931 	bl	10051d08 <aci_gatt_srv_add_service>
10045aa6:	0003      	movs	r3, r0
10045aa8:	7023      	strb	r3, [r4, #0]

  if (ret != BLE_STATUS_SUCCESS)
10045aaa:	1dfb      	adds	r3, r7, #7
10045aac:	781b      	ldrb	r3, [r3, #0]
10045aae:	2b00      	cmp	r3, #0
10045ab0:	d007      	beq.n	10045ac2 <P2P_SERVER_Init+0x3a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_srv_add_service command: p2p_Server, error code: 0x%x \n", ret);
10045ab2:	1dfb      	adds	r3, r7, #7
10045ab4:	781a      	ldrb	r2, [r3, #0]
10045ab6:	4b19      	ldr	r3, [pc, #100]	@ (10045b1c <P2P_SERVER_Init+0x94>)
10045ab8:	0011      	movs	r1, r2
10045aba:	0018      	movs	r0, r3
10045abc:	f021 fa24 	bl	10066f08 <iprintf>
10045ac0:	e003      	b.n	10045aca <P2P_SERVER_Init+0x42>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_srv_add_service command: p2p_Server \n");
10045ac2:	4b17      	ldr	r3, [pc, #92]	@ (10045b20 <P2P_SERVER_Init+0x98>)
10045ac4:	0018      	movs	r0, r3
10045ac6:	f021 fa8f 	bl	10066fe8 <puts>
  }

  P2P_SERVER_Context.P2p_serverSvcHdle = aci_gatt_srv_get_service_handle((ble_gatt_srv_def_t *) &p2p_server_service);
10045aca:	4b13      	ldr	r3, [pc, #76]	@ (10045b18 <P2P_SERVER_Init+0x90>)
10045acc:	0018      	movs	r0, r3
10045ace:	f00c f928 	bl	10051d22 <aci_gatt_srv_get_service_handle>
10045ad2:	0003      	movs	r3, r0
10045ad4:	001a      	movs	r2, r3
10045ad6:	4b13      	ldr	r3, [pc, #76]	@ (10045b24 <P2P_SERVER_Init+0x9c>)
10045ad8:	801a      	strh	r2, [r3, #0]
  P2P_SERVER_Context.Led_CCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&p2p_server_chars[0]);
10045ada:	4b13      	ldr	r3, [pc, #76]	@ (10045b28 <P2P_SERVER_Init+0xa0>)
10045adc:	0018      	movs	r0, r3
10045ade:	f00c f940 	bl	10051d62 <aci_gatt_srv_get_char_decl_handle>
10045ae2:	0003      	movs	r3, r0
10045ae4:	001a      	movs	r2, r3
10045ae6:	4b0f      	ldr	r3, [pc, #60]	@ (10045b24 <P2P_SERVER_Init+0x9c>)
10045ae8:	805a      	strh	r2, [r3, #2]
  P2P_SERVER_Context.Switch_CCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&p2p_server_chars[1]);
10045aea:	4b10      	ldr	r3, [pc, #64]	@ (10045b2c <P2P_SERVER_Init+0xa4>)
10045aec:	0018      	movs	r0, r3
10045aee:	f00c f938 	bl	10051d62 <aci_gatt_srv_get_char_decl_handle>
10045af2:	0003      	movs	r3, r0
10045af4:	001a      	movs	r2, r3
10045af6:	4b0b      	ldr	r3, [pc, #44]	@ (10045b24 <P2P_SERVER_Init+0x9c>)
10045af8:	809a      	strh	r2, [r3, #4]

  /* USER CODE BEGIN InitService1Svc_2 */

  /* USER CODE END InitService1Svc_2 */

  if (ret != BLE_STATUS_SUCCESS)
10045afa:	1dfb      	adds	r3, r7, #7
10045afc:	781b      	ldrb	r3, [r3, #0]
10045afe:	2b00      	cmp	r3, #0
10045b00:	d004      	beq.n	10045b0c <P2P_SERVER_Init+0x84>
  {
    APP_DBG_MSG("  Fail registering p2p_Server handlers\n");
10045b02:	4b0b      	ldr	r3, [pc, #44]	@ (10045b30 <P2P_SERVER_Init+0xa8>)
10045b04:	0018      	movs	r0, r3
10045b06:	f021 fa6f 	bl	10066fe8 <puts>
  }

  return;
10045b0a:	46c0      	nop			@ (mov r8, r8)
10045b0c:	46c0      	nop			@ (mov r8, r8)
}
10045b0e:	46bd      	mov	sp, r7
10045b10:	b003      	add	sp, #12
10045b12:	bd90      	pop	{r4, r7, pc}
10045b14:	10045885 	.word	0x10045885
10045b18:	10069b48 	.word	0x10069b48
10045b1c:	100696d8 	.word	0x100696d8
10045b20:	10069724 	.word	0x10069724
10045b24:	200006d4 	.word	0x200006d4
10045b28:	10069b00 	.word	0x10069b00
10045b2c:	10069b24 	.word	0x10069b24
10045b30:	10069760 	.word	0x10069760

10045b34 <P2P_SERVER_NotifyValue>:
 * @param  pData: pointer to the data to be notified to the client
 * @param  ConnectionHandle: connection handle identifying the client to be notified.
 *
 */
tBleStatus P2P_SERVER_NotifyValue(P2P_SERVER_CharOpcode_t CharOpcode, P2P_SERVER_Data_t *pData, uint16_t ConnectionHandle)
{
10045b34:	b5f0      	push	{r4, r5, r6, r7, lr}
10045b36:	b087      	sub	sp, #28
10045b38:	af02      	add	r7, sp, #8
10045b3a:	6039      	str	r1, [r7, #0]
10045b3c:	0011      	movs	r1, r2
10045b3e:	1dfb      	adds	r3, r7, #7
10045b40:	1c02      	adds	r2, r0, #0
10045b42:	701a      	strb	r2, [r3, #0]
10045b44:	1d3b      	adds	r3, r7, #4
10045b46:	1c0a      	adds	r2, r1, #0
10045b48:	801a      	strh	r2, [r3, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
10045b4a:	230f      	movs	r3, #15
10045b4c:	18fb      	adds	r3, r7, r3
10045b4e:	2212      	movs	r2, #18
10045b50:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN Service1_App_Notify_Char_1 */

  /* USER CODE END Service1_App_Notify_Char_1 */

  switch(CharOpcode)
10045b52:	1dfb      	adds	r3, r7, #7
10045b54:	781b      	ldrb	r3, [r3, #0]
10045b56:	2b01      	cmp	r3, #1
10045b58:	d136      	bne.n	10045bc8 <P2P_SERVER_NotifyValue+0x94>
  {

    case P2P_SERVER_SWITCH_C:
      memcpy(switch_c_val_buffer, pData->p_Payload, MIN(pData->Length, sizeof(switch_c_val_buffer)));
10045b5a:	683b      	ldr	r3, [r7, #0]
10045b5c:	6819      	ldr	r1, [r3, #0]
10045b5e:	683b      	ldr	r3, [r7, #0]
10045b60:	791b      	ldrb	r3, [r3, #4]
10045b62:	1c1a      	adds	r2, r3, #0
10045b64:	b2d3      	uxtb	r3, r2
10045b66:	2b02      	cmp	r3, #2
10045b68:	d901      	bls.n	10045b6e <P2P_SERVER_NotifyValue+0x3a>
10045b6a:	2302      	movs	r3, #2
10045b6c:	1c1a      	adds	r2, r3, #0
10045b6e:	b2d3      	uxtb	r3, r2
10045b70:	001a      	movs	r2, r3
10045b72:	4b19      	ldr	r3, [pc, #100]	@ (10045bd8 <P2P_SERVER_NotifyValue+0xa4>)
10045b74:	0018      	movs	r0, r3
10045b76:	f021 fc59 	bl	1006742c <memcpy>
      ret = aci_gatt_srv_notify(ConnectionHandle,
                                BLE_GATT_UNENHANCED_ATT_L2CAP_CID,
                                P2P_SERVER_Context.Switch_CCharHdle + 1,
10045b7a:	4b18      	ldr	r3, [pc, #96]	@ (10045bdc <P2P_SERVER_NotifyValue+0xa8>)
10045b7c:	889b      	ldrh	r3, [r3, #4]
      ret = aci_gatt_srv_notify(ConnectionHandle,
10045b7e:	3301      	adds	r3, #1
10045b80:	b299      	uxth	r1, r3
                                GATT_NOTIFICATION,
                                pData->Length, /* charValueLen */
10045b82:	683b      	ldr	r3, [r7, #0]
10045b84:	791b      	ldrb	r3, [r3, #4]
      ret = aci_gatt_srv_notify(ConnectionHandle,
10045b86:	001d      	movs	r5, r3
10045b88:	683b      	ldr	r3, [r7, #0]
10045b8a:	681b      	ldr	r3, [r3, #0]
10045b8c:	260f      	movs	r6, #15
10045b8e:	19bc      	adds	r4, r7, r6
10045b90:	1d3a      	adds	r2, r7, #4
10045b92:	8810      	ldrh	r0, [r2, #0]
10045b94:	9301      	str	r3, [sp, #4]
10045b96:	9500      	str	r5, [sp, #0]
10045b98:	2300      	movs	r3, #0
10045b9a:	000a      	movs	r2, r1
10045b9c:	2104      	movs	r1, #4
10045b9e:	f00c f8ed 	bl	10051d7c <aci_gatt_srv_notify>
10045ba2:	0003      	movs	r3, r0
10045ba4:	7023      	strb	r3, [r4, #0]
                                (uint8_t *)pData->p_Payload);
      if (ret != BLE_STATUS_SUCCESS)
10045ba6:	19bb      	adds	r3, r7, r6
10045ba8:	781b      	ldrb	r3, [r3, #0]
10045baa:	2b00      	cmp	r3, #0
10045bac:	d007      	beq.n	10045bbe <P2P_SERVER_NotifyValue+0x8a>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_srv_notify SWITCH_C command, error code: 0x%2X\n", ret);
10045bae:	19bb      	adds	r3, r7, r6
10045bb0:	781a      	ldrb	r2, [r3, #0]
10045bb2:	4b0b      	ldr	r3, [pc, #44]	@ (10045be0 <P2P_SERVER_NotifyValue+0xac>)
10045bb4:	0011      	movs	r1, r2
10045bb6:	0018      	movs	r0, r3
10045bb8:	f021 f9a6 	bl	10066f08 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_srv_notify SWITCH_C command\n");
      }
      /* USER CODE BEGIN Service1_Char_Value_2*/

      /* USER CODE END Service1_Char_Value_2*/
      break;
10045bbc:	e005      	b.n	10045bca <P2P_SERVER_NotifyValue+0x96>
        APP_DBG_MSG("  Success: aci_gatt_srv_notify SWITCH_C command\n");
10045bbe:	4b09      	ldr	r3, [pc, #36]	@ (10045be4 <P2P_SERVER_NotifyValue+0xb0>)
10045bc0:	0018      	movs	r0, r3
10045bc2:	f021 fa11 	bl	10066fe8 <puts>
      break;
10045bc6:	e000      	b.n	10045bca <P2P_SERVER_NotifyValue+0x96>

    default:
      break;
10045bc8:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_App_Notify_Char_2 */

  /* USER CODE END Service1_App_Notify_Char_2 */

  return ret;
10045bca:	230f      	movs	r3, #15
10045bcc:	18fb      	adds	r3, r7, r3
10045bce:	781b      	ldrb	r3, [r3, #0]
}
10045bd0:	0018      	movs	r0, r3
10045bd2:	46bd      	mov	sp, r7
10045bd4:	b005      	add	sp, #20
10045bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10045bd8:	200006e4 	.word	0x200006e4
10045bdc:	200006d4 	.word	0x200006d4
10045be0:	10069788 	.word	0x10069788
10045be4:	100697cc 	.word	0x100697cc

10045be8 <P2P_SERVER_Notification>:
static void P2P_SERVER_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2P_SERVER_Notification(P2P_SERVER_NotificationEvt_t *p_Notification)
{
10045be8:	b580      	push	{r7, lr}
10045bea:	b082      	sub	sp, #8
10045bec:	af00      	add	r7, sp, #0
10045bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Service1_Notification_1 */

  /* USER CODE END Service1_Notification_1 */
  switch(p_Notification->EvtOpcode)
10045bf0:	687b      	ldr	r3, [r7, #4]
10045bf2:	781b      	ldrb	r3, [r3, #0]
10045bf4:	2b03      	cmp	r3, #3
10045bf6:	d035      	beq.n	10045c64 <P2P_SERVER_Notification+0x7c>
10045bf8:	dc40      	bgt.n	10045c7c <P2P_SERVER_Notification+0x94>
10045bfa:	2b02      	cmp	r3, #2
10045bfc:	d026      	beq.n	10045c4c <P2P_SERVER_Notification+0x64>
10045bfe:	dc3d      	bgt.n	10045c7c <P2P_SERVER_Notification+0x94>
10045c00:	2b00      	cmp	r3, #0
10045c02:	d03d      	beq.n	10045c80 <P2P_SERVER_Notification+0x98>
10045c04:	2b01      	cmp	r3, #1
10045c06:	d000      	beq.n	10045c0a <P2P_SERVER_Notification+0x22>

    default:
      /* USER CODE BEGIN Service1_Notification_default */

      /* USER CODE END Service1_Notification_default */
      break;
10045c08:	e038      	b.n	10045c7c <P2P_SERVER_Notification+0x94>
      if(p_Notification->DataTransfered.p_Payload[1] == 0x01)
10045c0a:	687b      	ldr	r3, [r7, #4]
10045c0c:	685b      	ldr	r3, [r3, #4]
10045c0e:	3301      	adds	r3, #1
10045c10:	781b      	ldrb	r3, [r3, #0]
10045c12:	2b01      	cmp	r3, #1
10045c14:	d109      	bne.n	10045c2a <P2P_SERVER_Notification+0x42>
        BSP_LED_On(LED_BLUE);
10045c16:	2000      	movs	r0, #0
10045c18:	f006 fbc8 	bl	1004c3ac <BSP_LED_On>
        APP_DBG_MSG("-- P2P APPLICATION SERVER : LED1 ON\n"); 
10045c1c:	4b1c      	ldr	r3, [pc, #112]	@ (10045c90 <P2P_SERVER_Notification+0xa8>)
10045c1e:	0018      	movs	r0, r3
10045c20:	f021 f9e2 	bl	10066fe8 <puts>
        P2P_SERVER_APP_Context.LedControl.Led1 = 0x01; /* LED1 ON */
10045c24:	4b1b      	ldr	r3, [pc, #108]	@ (10045c94 <P2P_SERVER_Notification+0xac>)
10045c26:	2201      	movs	r2, #1
10045c28:	709a      	strb	r2, [r3, #2]
      if(p_Notification->DataTransfered.p_Payload[1] == 0x00)
10045c2a:	687b      	ldr	r3, [r7, #4]
10045c2c:	685b      	ldr	r3, [r3, #4]
10045c2e:	3301      	adds	r3, #1
10045c30:	781b      	ldrb	r3, [r3, #0]
10045c32:	2b00      	cmp	r3, #0
10045c34:	d126      	bne.n	10045c84 <P2P_SERVER_Notification+0x9c>
        BSP_LED_Off(LED_BLUE);
10045c36:	2000      	movs	r0, #0
10045c38:	f006 fbd6 	bl	1004c3e8 <BSP_LED_Off>
        APP_DBG_MSG("-- P2P APPLICATION SERVER : LED1 OFF\n"); 
10045c3c:	4b16      	ldr	r3, [pc, #88]	@ (10045c98 <P2P_SERVER_Notification+0xb0>)
10045c3e:	0018      	movs	r0, r3
10045c40:	f021 f9d2 	bl	10066fe8 <puts>
        P2P_SERVER_APP_Context.LedControl.Led1 = 0x00; /* LED1 OFF */
10045c44:	4b13      	ldr	r3, [pc, #76]	@ (10045c94 <P2P_SERVER_Notification+0xac>)
10045c46:	2200      	movs	r2, #0
10045c48:	709a      	strb	r2, [r3, #2]
      break;
10045c4a:	e01b      	b.n	10045c84 <P2P_SERVER_Notification+0x9c>
      P2P_SERVER_APP_Context.Switch_c_Notification_Status = Switch_c_NOTIFICATION_ON;
10045c4c:	4b11      	ldr	r3, [pc, #68]	@ (10045c94 <P2P_SERVER_Notification+0xac>)
10045c4e:	2201      	movs	r2, #1
10045c50:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
10045c52:	4b12      	ldr	r3, [pc, #72]	@ (10045c9c <P2P_SERVER_Notification+0xb4>)
10045c54:	0018      	movs	r0, r3
10045c56:	f021 f9c7 	bl	10066fe8 <puts>
      APP_DBG_MSG(" \n\r");
10045c5a:	4b11      	ldr	r3, [pc, #68]	@ (10045ca0 <P2P_SERVER_Notification+0xb8>)
10045c5c:	0018      	movs	r0, r3
10045c5e:	f021 f953 	bl	10066f08 <iprintf>
      break;
10045c62:	e010      	b.n	10045c86 <P2P_SERVER_Notification+0x9e>
      P2P_SERVER_APP_Context.Switch_c_Notification_Status = Switch_c_NOTIFICATION_OFF;
10045c64:	4b0b      	ldr	r3, [pc, #44]	@ (10045c94 <P2P_SERVER_Notification+0xac>)
10045c66:	2200      	movs	r2, #0
10045c68:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n"); 
10045c6a:	4b0e      	ldr	r3, [pc, #56]	@ (10045ca4 <P2P_SERVER_Notification+0xbc>)
10045c6c:	0018      	movs	r0, r3
10045c6e:	f021 f9bb 	bl	10066fe8 <puts>
      APP_DBG_MSG(" \n\r");
10045c72:	4b0b      	ldr	r3, [pc, #44]	@ (10045ca0 <P2P_SERVER_Notification+0xb8>)
10045c74:	0018      	movs	r0, r3
10045c76:	f021 f947 	bl	10066f08 <iprintf>
      break;
10045c7a:	e004      	b.n	10045c86 <P2P_SERVER_Notification+0x9e>
      break;
10045c7c:	46c0      	nop			@ (mov r8, r8)
10045c7e:	e002      	b.n	10045c86 <P2P_SERVER_Notification+0x9e>
      break;
10045c80:	46c0      	nop			@ (mov r8, r8)
10045c82:	e000      	b.n	10045c86 <P2P_SERVER_Notification+0x9e>
      break;
10045c84:	46c0      	nop			@ (mov r8, r8)
  }
  /* USER CODE BEGIN Service1_Notification_2 */

  /* USER CODE END Service1_Notification_2 */
  return;
10045c86:	46c0      	nop			@ (mov r8, r8)
}
10045c88:	46bd      	mov	sp, r7
10045c8a:	b002      	add	sp, #8
10045c8c:	bd80      	pop	{r7, pc}
10045c8e:	46c0      	nop			@ (mov r8, r8)
10045c90:	100697fc 	.word	0x100697fc
10045c94:	200006e8 	.word	0x200006e8
10045c98:	10069820 	.word	0x10069820
10045c9c:	10069848 	.word	0x10069848
10045ca0:	1006987c 	.word	0x1006987c
10045ca4:	10069880 	.word	0x10069880

10045ca8 <P2P_SERVER_APP_EvtRx>:

void P2P_SERVER_APP_EvtRx(P2P_SERVER_APP_ConnHandleNotEvt_t *p_Notification)
{
10045ca8:	b580      	push	{r7, lr}
10045caa:	b082      	sub	sp, #8
10045cac:	af00      	add	r7, sp, #0
10045cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Service1_APP_EvtRx_1 */

  /* USER CODE END Service1_APP_EvtRx_1 */

  switch(p_Notification->EvtOpcode)
10045cb0:	687b      	ldr	r3, [r7, #4]
10045cb2:	781b      	ldrb	r3, [r3, #0]
10045cb4:	2b00      	cmp	r3, #0
10045cb6:	d002      	beq.n	10045cbe <P2P_SERVER_APP_EvtRx+0x16>
10045cb8:	2b01      	cmp	r3, #1
10045cba:	d005      	beq.n	10045cc8 <P2P_SERVER_APP_EvtRx+0x20>

    default:
      /* USER CODE BEGIN Service1_APP_EvtRx_default */

      /* USER CODE END Service1_APP_EvtRx_default */
      break;
10045cbc:	e00b      	b.n	10045cd6 <P2P_SERVER_APP_EvtRx+0x2e>
      P2P_SERVER_APP_Context.ConnectionHandle = p_Notification->ConnectionHandle;
10045cbe:	687b      	ldr	r3, [r7, #4]
10045cc0:	885a      	ldrh	r2, [r3, #2]
10045cc2:	4b07      	ldr	r3, [pc, #28]	@ (10045ce0 <P2P_SERVER_APP_EvtRx+0x38>)
10045cc4:	80da      	strh	r2, [r3, #6]
      break;
10045cc6:	e006      	b.n	10045cd6 <P2P_SERVER_APP_EvtRx+0x2e>
      P2P_SERVER_APP_Context.ConnectionHandle = 0xFFFF;
10045cc8:	4b05      	ldr	r3, [pc, #20]	@ (10045ce0 <P2P_SERVER_APP_EvtRx+0x38>)
10045cca:	2201      	movs	r2, #1
10045ccc:	4252      	negs	r2, r2
10045cce:	80da      	strh	r2, [r3, #6]
      P2P_SERVER_APP_LED_BUTTON_context_Init();
10045cd0:	f000 f824 	bl	10045d1c <P2P_SERVER_APP_LED_BUTTON_context_Init>
      break;
10045cd4:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_APP_EvtRx_2 */

  /* USER CODE END Service1_APP_EvtRx_2 */

  return;
10045cd6:	46c0      	nop			@ (mov r8, r8)
}
10045cd8:	46bd      	mov	sp, r7
10045cda:	b002      	add	sp, #8
10045cdc:	bd80      	pop	{r7, pc}
10045cde:	46c0      	nop			@ (mov r8, r8)
10045ce0:	200006e8 	.word	0x200006e8

10045ce4 <P2P_SERVER_APP_Init>:

void P2P_SERVER_APP_Init(void)
{
10045ce4:	b580      	push	{r7, lr}
10045ce6:	af00      	add	r7, sp, #0
  P2P_SERVER_APP_Context.ConnectionHandle = 0xFFFF;
10045ce8:	4b0a      	ldr	r3, [pc, #40]	@ (10045d14 <P2P_SERVER_APP_Init+0x30>)
10045cea:	2201      	movs	r2, #1
10045cec:	4252      	negs	r2, r2
10045cee:	80da      	strh	r2, [r3, #6]
  P2P_SERVER_Init();
10045cf0:	f7ff feca 	bl	10045a88 <P2P_SERVER_Init>

  /* USER CODE BEGIN Service1_APP_Init */
  UTIL_SEQ_RegTask( 1U << CFG_TASK_SEND_NOTIF_ID, UTIL_SEQ_RFU, P2P_SERVER_Switch_c_SendNotification);
10045cf4:	4a08      	ldr	r2, [pc, #32]	@ (10045d18 <P2P_SERVER_APP_Init+0x34>)
10045cf6:	2380      	movs	r3, #128	@ 0x80
10045cf8:	00db      	lsls	r3, r3, #3
10045cfa:	2100      	movs	r1, #0
10045cfc:	0018      	movs	r0, r3
10045cfe:	f00c fadb 	bl	100522b8 <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_SERVER_APP_Context.Switch_c_Notification_Status= Switch_c_NOTIFICATION_OFF;
10045d02:	4b04      	ldr	r3, [pc, #16]	@ (10045d14 <P2P_SERVER_APP_Init+0x30>)
10045d04:	2200      	movs	r2, #0
10045d06:	701a      	strb	r2, [r3, #0]
  P2P_SERVER_APP_LED_BUTTON_context_Init();
10045d08:	f000 f808 	bl	10045d1c <P2P_SERVER_APP_LED_BUTTON_context_Init>
  /* USER CODE END Service1_APP_Init */
  return;
10045d0c:	46c0      	nop			@ (mov r8, r8)
}
10045d0e:	46bd      	mov	sp, r7
10045d10:	bd80      	pop	{r7, pc}
10045d12:	46c0      	nop			@ (mov r8, r8)
10045d14:	200006e8 	.word	0x200006e8
10045d18:	10045d49 	.word	0x10045d49

10045d1c <P2P_SERVER_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2P_SERVER_APP_LED_BUTTON_context_Init(void)
{  
10045d1c:	b580      	push	{r7, lr}
10045d1e:	af00      	add	r7, sp, #0
  BSP_LED_Off(LED_BLUE);
10045d20:	2000      	movs	r0, #0
10045d22:	f006 fb61 	bl	1004c3e8 <BSP_LED_Off>
  P2P_SERVER_APP_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
10045d26:	4b07      	ldr	r3, [pc, #28]	@ (10045d44 <P2P_SERVER_APP_LED_BUTTON_context_Init+0x28>)
10045d28:	2201      	movs	r2, #1
10045d2a:	705a      	strb	r2, [r3, #1]
  P2P_SERVER_APP_Context.LedControl.Led1=0x00; /* led OFF */
10045d2c:	4b05      	ldr	r3, [pc, #20]	@ (10045d44 <P2P_SERVER_APP_LED_BUTTON_context_Init+0x28>)
10045d2e:	2200      	movs	r2, #0
10045d30:	709a      	strb	r2, [r3, #2]
  P2P_SERVER_APP_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
10045d32:	4b04      	ldr	r3, [pc, #16]	@ (10045d44 <P2P_SERVER_APP_LED_BUTTON_context_Init+0x28>)
10045d34:	2201      	movs	r2, #1
10045d36:	70da      	strb	r2, [r3, #3]
  P2P_SERVER_APP_Context.ButtonControl.ButtonStatus=0x00;
10045d38:	4b02      	ldr	r3, [pc, #8]	@ (10045d44 <P2P_SERVER_APP_LED_BUTTON_context_Init+0x28>)
10045d3a:	2200      	movs	r2, #0
10045d3c:	711a      	strb	r2, [r3, #4]

  return;
10045d3e:	46c0      	nop			@ (mov r8, r8)
}
10045d40:	46bd      	mov	sp, r7
10045d42:	bd80      	pop	{r7, pc}
10045d44:	200006e8 	.word	0x200006e8

10045d48 <P2P_SERVER_Switch_c_SendNotification>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
__USED void P2P_SERVER_Switch_c_SendNotification(void) /* Property Notification */
{
10045d48:	b580      	push	{r7, lr}
10045d4a:	b084      	sub	sp, #16
10045d4c:	af00      	add	r7, sp, #0
  P2P_SERVER_APP_SendInformation_t notification_on_off = Switch_c_NOTIFICATION_OFF;
10045d4e:	230f      	movs	r3, #15
10045d50:	18fb      	adds	r3, r7, r3
10045d52:	2200      	movs	r2, #0
10045d54:	701a      	strb	r2, [r3, #0]
  P2P_SERVER_Data_t p2p_server_notification_data;

  p2p_server_notification_data.p_Payload = (uint8_t*)a_P2P_SERVER_UpdateCharData;
10045d56:	1d3b      	adds	r3, r7, #4
10045d58:	4a21      	ldr	r2, [pc, #132]	@ (10045de0 <P2P_SERVER_Switch_c_SendNotification+0x98>)
10045d5a:	601a      	str	r2, [r3, #0]
  p2p_server_notification_data.Length = 0;
10045d5c:	1d3b      	adds	r3, r7, #4
10045d5e:	2200      	movs	r2, #0
10045d60:	711a      	strb	r2, [r3, #4]

  /* USER CODE BEGIN Service1Char2_NS_1*/

  if(P2P_SERVER_APP_Context.ButtonControl.ButtonStatus == 0x00)
10045d62:	4b20      	ldr	r3, [pc, #128]	@ (10045de4 <P2P_SERVER_Switch_c_SendNotification+0x9c>)
10045d64:	791b      	ldrb	r3, [r3, #4]
10045d66:	2b00      	cmp	r3, #0
10045d68:	d103      	bne.n	10045d72 <P2P_SERVER_Switch_c_SendNotification+0x2a>
  {
    P2P_SERVER_APP_Context.ButtonControl.ButtonStatus = 0x01;
10045d6a:	4b1e      	ldr	r3, [pc, #120]	@ (10045de4 <P2P_SERVER_Switch_c_SendNotification+0x9c>)
10045d6c:	2201      	movs	r2, #1
10045d6e:	711a      	strb	r2, [r3, #4]
10045d70:	e002      	b.n	10045d78 <P2P_SERVER_Switch_c_SendNotification+0x30>
  } 
  else
  {
    P2P_SERVER_APP_Context.ButtonControl.ButtonStatus = 0x00;
10045d72:	4b1c      	ldr	r3, [pc, #112]	@ (10045de4 <P2P_SERVER_Switch_c_SendNotification+0x9c>)
10045d74:	2200      	movs	r2, #0
10045d76:	711a      	strb	r2, [r3, #4]
  }
  a_P2P_SERVER_UpdateCharData[0] = 0x01; /* Device Led selection */
10045d78:	4b19      	ldr	r3, [pc, #100]	@ (10045de0 <P2P_SERVER_Switch_c_SendNotification+0x98>)
10045d7a:	2201      	movs	r2, #1
10045d7c:	701a      	strb	r2, [r3, #0]
  a_P2P_SERVER_UpdateCharData[1] = P2P_SERVER_APP_Context.ButtonControl.ButtonStatus;
10045d7e:	4b19      	ldr	r3, [pc, #100]	@ (10045de4 <P2P_SERVER_Switch_c_SendNotification+0x9c>)
10045d80:	791a      	ldrb	r2, [r3, #4]
10045d82:	4b17      	ldr	r3, [pc, #92]	@ (10045de0 <P2P_SERVER_Switch_c_SendNotification+0x98>)
10045d84:	705a      	strb	r2, [r3, #1]
  /* Update notification data length */
  p2p_server_notification_data.Length = (p2p_server_notification_data.Length) + 2; 
10045d86:	1d3b      	adds	r3, r7, #4
10045d88:	791b      	ldrb	r3, [r3, #4]
10045d8a:	3302      	adds	r3, #2
10045d8c:	b2da      	uxtb	r2, r3
10045d8e:	1d3b      	adds	r3, r7, #4
10045d90:	711a      	strb	r2, [r3, #4]
  
  if(P2P_SERVER_APP_Context.Switch_c_Notification_Status == Switch_c_NOTIFICATION_ON)
10045d92:	4b14      	ldr	r3, [pc, #80]	@ (10045de4 <P2P_SERVER_Switch_c_SendNotification+0x9c>)
10045d94:	781b      	ldrb	r3, [r3, #0]
10045d96:	2b01      	cmp	r3, #1
10045d98:	d108      	bne.n	10045dac <P2P_SERVER_Switch_c_SendNotification+0x64>
  { 
    APP_DBG_MSG("-- P2P APPLICATION SERVER : INFORM CLIENT BUTTON 1 PUSHED\n");
10045d9a:	4b13      	ldr	r3, [pc, #76]	@ (10045de8 <P2P_SERVER_Switch_c_SendNotification+0xa0>)
10045d9c:	0018      	movs	r0, r3
10045d9e:	f021 f923 	bl	10066fe8 <puts>
    notification_on_off = Switch_c_NOTIFICATION_ON;
10045da2:	230f      	movs	r3, #15
10045da4:	18fb      	adds	r3, r7, r3
10045da6:	2201      	movs	r2, #1
10045da8:	701a      	strb	r2, [r3, #0]
10045daa:	e003      	b.n	10045db4 <P2P_SERVER_Switch_c_SendNotification+0x6c>
  } 
  else
  {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n"); 
10045dac:	4b0f      	ldr	r3, [pc, #60]	@ (10045dec <P2P_SERVER_Switch_c_SendNotification+0xa4>)
10045dae:	0018      	movs	r0, r3
10045db0:	f021 f91a 	bl	10066fe8 <puts>
  }
  /* USER CODE END Service1Char2_NS_1*/

  if (notification_on_off != Switch_c_NOTIFICATION_OFF && P2P_SERVER_APP_Context.ConnectionHandle != 0xFFFF)
10045db4:	230f      	movs	r3, #15
10045db6:	18fb      	adds	r3, r7, r3
10045db8:	781b      	ldrb	r3, [r3, #0]
10045dba:	2b00      	cmp	r3, #0
10045dbc:	d00c      	beq.n	10045dd8 <P2P_SERVER_Switch_c_SendNotification+0x90>
10045dbe:	4b09      	ldr	r3, [pc, #36]	@ (10045de4 <P2P_SERVER_Switch_c_SendNotification+0x9c>)
10045dc0:	88db      	ldrh	r3, [r3, #6]
10045dc2:	4a0b      	ldr	r2, [pc, #44]	@ (10045df0 <P2P_SERVER_Switch_c_SendNotification+0xa8>)
10045dc4:	4293      	cmp	r3, r2
10045dc6:	d007      	beq.n	10045dd8 <P2P_SERVER_Switch_c_SendNotification+0x90>
  {
    P2P_SERVER_NotifyValue(P2P_SERVER_SWITCH_C, &p2p_server_notification_data, P2P_SERVER_APP_Context.ConnectionHandle);
10045dc8:	4b06      	ldr	r3, [pc, #24]	@ (10045de4 <P2P_SERVER_Switch_c_SendNotification+0x9c>)
10045dca:	88da      	ldrh	r2, [r3, #6]
10045dcc:	1d3b      	adds	r3, r7, #4
10045dce:	0019      	movs	r1, r3
10045dd0:	2001      	movs	r0, #1
10045dd2:	f7ff feaf 	bl	10045b34 <P2P_SERVER_NotifyValue>

  /* USER CODE BEGIN Service1Char2_NS_Last*/

  /* USER CODE END Service1Char2_NS_Last*/

  return;
10045dd6:	46c0      	nop			@ (mov r8, r8)
10045dd8:	46c0      	nop			@ (mov r8, r8)
}
10045dda:	46bd      	mov	sp, r7
10045ddc:	b004      	add	sp, #16
10045dde:	bd80      	pop	{r7, pc}
10045de0:	200006f0 	.word	0x200006f0
10045de4:	200006e8 	.word	0x200006e8
10045de8:	100698b4 	.word	0x100698b4
10045dec:	100698f0 	.word	0x100698f0
10045df0:	0000ffff 	.word	0x0000ffff

10045df4 <BLENVM_Init>:
/** @defgroup NVM_UpperLayer_Public_Functions Public Functions
 * @{
 */

void BLENVM_Init(void)
{
10045df4:	b580      	push	{r7, lr}
10045df6:	af00      	add	r7, sp, #0
  NVMDB_Init();
10045df8:	f004 fd28 	bl	1004a84c <NVMDB_Init>

  NVMDB_HandleInit(SEC_GATT_BD, &sec_gatt_db_h);
10045dfc:	4b07      	ldr	r3, [pc, #28]	@ (10045e1c <BLENVM_Init+0x28>)
10045dfe:	0019      	movs	r1, r3
10045e00:	2000      	movs	r0, #0
10045e02:	f004 fe81 	bl	1004ab08 <NVMDB_HandleInit>
  NVMDB_HandleInit(DEVICE_ID_DB, &device_id_db_h);
10045e06:	4b06      	ldr	r3, [pc, #24]	@ (10045e20 <BLENVM_Init+0x2c>)
10045e08:	0019      	movs	r1, r3
10045e0a:	2001      	movs	r0, #1
10045e0c:	f004 fe7c 	bl	1004ab08 <NVMDB_HandleInit>
  curr_handle_p = &sec_gatt_db_h;
10045e10:	4b04      	ldr	r3, [pc, #16]	@ (10045e24 <BLENVM_Init+0x30>)
10045e12:	4a02      	ldr	r2, [pc, #8]	@ (10045e1c <BLENVM_Init+0x28>)
10045e14:	601a      	str	r2, [r3, #0]
}
10045e16:	46c0      	nop			@ (mov r8, r8)
10045e18:	46bd      	mov	sp, r7
10045e1a:	bd80      	pop	{r7, pc}
10045e1c:	200007e8 	.word	0x200007e8
10045e20:	200007f8 	.word	0x200007f8
10045e24:	20000808 	.word	0x20000808

10045e28 <BLEPLAT_NvmAdd>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmAdd(BLEPLAT_NvmRecordTypeDef Type,
                                        const uint8_t* pData,
                                        uint16_t Size,
                                        const uint8_t* pExtraData,
                                        uint16_t ExtraSize)
{
10045e28:	b5f0      	push	{r4, r5, r6, r7, lr}
10045e2a:	b089      	sub	sp, #36	@ 0x24
10045e2c:	af02      	add	r7, sp, #8
10045e2e:	60b9      	str	r1, [r7, #8]
10045e30:	0011      	movs	r1, r2
10045e32:	607b      	str	r3, [r7, #4]
10045e34:	240f      	movs	r4, #15
10045e36:	193b      	adds	r3, r7, r4
10045e38:	1c02      	adds	r2, r0, #0
10045e3a:	701a      	strb	r2, [r3, #0]
10045e3c:	230c      	movs	r3, #12
10045e3e:	18fb      	adds	r3, r7, r3
10045e40:	1c0a      	adds	r2, r1, #0
10045e42:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t ret;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
10045e44:	193b      	adds	r3, r7, r4
10045e46:	781b      	ldrb	r3, [r3, #0]
10045e48:	2b02      	cmp	r3, #2
10045e4a:	d103      	bne.n	10045e54 <BLEPLAT_NvmAdd+0x2c>
  {
    curr_handle_p = &device_id_db_h;
10045e4c:	4b1a      	ldr	r3, [pc, #104]	@ (10045eb8 <BLEPLAT_NvmAdd+0x90>)
10045e4e:	4a1b      	ldr	r2, [pc, #108]	@ (10045ebc <BLEPLAT_NvmAdd+0x94>)
10045e50:	601a      	str	r2, [r3, #0]
10045e52:	e002      	b.n	10045e5a <BLEPLAT_NvmAdd+0x32>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
10045e54:	4b18      	ldr	r3, [pc, #96]	@ (10045eb8 <BLEPLAT_NvmAdd+0x90>)
10045e56:	4a1a      	ldr	r2, [pc, #104]	@ (10045ec0 <BLEPLAT_NvmAdd+0x98>)
10045e58:	601a      	str	r2, [r3, #0]
  }

  DEBUG_GPIO2_HIGH();

  ret = NVMDB_AppendRecord(curr_handle_p, Type, Size, pData, ExtraSize, pExtraData);
10045e5a:	4b17      	ldr	r3, [pc, #92]	@ (10045eb8 <BLEPLAT_NvmAdd+0x90>)
10045e5c:	6818      	ldr	r0, [r3, #0]
10045e5e:	2617      	movs	r6, #23
10045e60:	19bc      	adds	r4, r7, r6
10045e62:	68bd      	ldr	r5, [r7, #8]
10045e64:	230c      	movs	r3, #12
10045e66:	18fb      	adds	r3, r7, r3
10045e68:	881b      	ldrh	r3, [r3, #0]
10045e6a:	469c      	mov	ip, r3
10045e6c:	230f      	movs	r3, #15
10045e6e:	18fb      	adds	r3, r7, r3
10045e70:	7819      	ldrb	r1, [r3, #0]
10045e72:	687b      	ldr	r3, [r7, #4]
10045e74:	9301      	str	r3, [sp, #4]
10045e76:	2328      	movs	r3, #40	@ 0x28
10045e78:	2208      	movs	r2, #8
10045e7a:	189b      	adds	r3, r3, r2
10045e7c:	19db      	adds	r3, r3, r7
10045e7e:	881b      	ldrh	r3, [r3, #0]
10045e80:	9300      	str	r3, [sp, #0]
10045e82:	002b      	movs	r3, r5
10045e84:	4662      	mov	r2, ip
10045e86:	f004 fee1 	bl	1004ac4c <NVMDB_AppendRecord>
10045e8a:	0003      	movs	r3, r0
10045e8c:	7023      	strb	r3, [r4, #0]

  DEBUG_GPIO2_LOW();

  if(ret == NVMDB_STATUS_OK)
10045e8e:	19bb      	adds	r3, r7, r6
10045e90:	781b      	ldrb	r3, [r3, #0]
10045e92:	2b00      	cmp	r3, #0
10045e94:	d101      	bne.n	10045e9a <BLEPLAT_NvmAdd+0x72>
  {
    return BLEPLAT_OK;
10045e96:	2300      	movs	r3, #0
10045e98:	e009      	b.n	10045eae <BLEPLAT_NvmAdd+0x86>
  }

  if(ret == NVMDB_STATUS_FULL_DB)
10045e9a:	2317      	movs	r3, #23
10045e9c:	18fb      	adds	r3, r7, r3
10045e9e:	781b      	ldrb	r3, [r3, #0]
10045ea0:	2b02      	cmp	r3, #2
10045ea2:	d102      	bne.n	10045eaa <BLEPLAT_NvmAdd+0x82>
  {
    return BLEPLAT_FULL;
10045ea4:	2301      	movs	r3, #1
10045ea6:	425b      	negs	r3, r3
10045ea8:	e001      	b.n	10045eae <BLEPLAT_NvmAdd+0x86>
  }

  return BLEPLAT_BUSY;
10045eaa:	2302      	movs	r3, #2
10045eac:	425b      	negs	r3, r3
}
10045eae:	0018      	movs	r0, r3
10045eb0:	46bd      	mov	sp, r7
10045eb2:	b007      	add	sp, #28
10045eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10045eb6:	46c0      	nop			@ (mov r8, r8)
10045eb8:	20000808 	.word	0x20000808
10045ebc:	200007f8 	.word	0x200007f8
10045ec0:	200007e8 	.word	0x200007e8

10045ec4 <BLEPLAT_NvmGet>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmGet(BLEPLAT_NvmSeekModeTypeDef Mode,
                                        BLEPLAT_NvmRecordTypeDef Type,
                                        uint16_t Offset,
                                        uint8_t* pData,
                                        uint16_t Size)
{
10045ec4:	b5b0      	push	{r4, r5, r7, lr}
10045ec6:	b086      	sub	sp, #24
10045ec8:	af02      	add	r7, sp, #8
10045eca:	0004      	movs	r4, r0
10045ecc:	0008      	movs	r0, r1
10045ece:	0011      	movs	r1, r2
10045ed0:	603b      	str	r3, [r7, #0]
10045ed2:	1dfb      	adds	r3, r7, #7
10045ed4:	1c22      	adds	r2, r4, #0
10045ed6:	701a      	strb	r2, [r3, #0]
10045ed8:	1dbb      	adds	r3, r7, #6
10045eda:	1c02      	adds	r2, r0, #0
10045edc:	701a      	strb	r2, [r3, #0]
10045ede:	1d3b      	adds	r3, r7, #4
10045ee0:	1c0a      	adds	r2, r1, #0
10045ee2:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordSizeType size_out;
  NVMDB_status_t ret;
  NVMDB_IdType db_id;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
10045ee4:	1dbb      	adds	r3, r7, #6
10045ee6:	781b      	ldrb	r3, [r3, #0]
10045ee8:	2b02      	cmp	r3, #2
10045eea:	d107      	bne.n	10045efc <BLEPLAT_NvmGet+0x38>
  {
    curr_handle_p = &device_id_db_h;
10045eec:	4b2e      	ldr	r3, [pc, #184]	@ (10045fa8 <BLEPLAT_NvmGet+0xe4>)
10045eee:	4a2f      	ldr	r2, [pc, #188]	@ (10045fac <BLEPLAT_NvmGet+0xe8>)
10045ef0:	601a      	str	r2, [r3, #0]
    db_id = 1;
10045ef2:	230e      	movs	r3, #14
10045ef4:	18fb      	adds	r3, r7, r3
10045ef6:	2201      	movs	r2, #1
10045ef8:	701a      	strb	r2, [r3, #0]
10045efa:	e006      	b.n	10045f0a <BLEPLAT_NvmGet+0x46>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
10045efc:	4b2a      	ldr	r3, [pc, #168]	@ (10045fa8 <BLEPLAT_NvmGet+0xe4>)
10045efe:	4a2c      	ldr	r2, [pc, #176]	@ (10045fb0 <BLEPLAT_NvmGet+0xec>)
10045f00:	601a      	str	r2, [r3, #0]
    db_id = 0;
10045f02:	230e      	movs	r3, #14
10045f04:	18fb      	adds	r3, r7, r3
10045f06:	2200      	movs	r2, #0
10045f08:	701a      	strb	r2, [r3, #0]
  }

  if(Mode == BLEPLAT_NVM_CURRENT)
10045f0a:	1dfb      	adds	r3, r7, #7
10045f0c:	781b      	ldrb	r3, [r3, #0]
10045f0e:	2b02      	cmp	r3, #2
10045f10:	d112      	bne.n	10045f38 <BLEPLAT_NvmGet+0x74>
  {
    ret = NVMDB_ReadCurrentRecord(curr_handle_p, Offset, pData, Size, &size_out);
10045f12:	4b25      	ldr	r3, [pc, #148]	@ (10045fa8 <BLEPLAT_NvmGet+0xe4>)
10045f14:	6818      	ldr	r0, [r3, #0]
10045f16:	230f      	movs	r3, #15
10045f18:	18fc      	adds	r4, r7, r3
10045f1a:	2320      	movs	r3, #32
10045f1c:	18fb      	adds	r3, r7, r3
10045f1e:	881d      	ldrh	r5, [r3, #0]
10045f20:	683a      	ldr	r2, [r7, #0]
10045f22:	1d3b      	adds	r3, r7, #4
10045f24:	8819      	ldrh	r1, [r3, #0]
10045f26:	230c      	movs	r3, #12
10045f28:	18fb      	adds	r3, r7, r3
10045f2a:	9300      	str	r3, [sp, #0]
10045f2c:	002b      	movs	r3, r5
10045f2e:	f004 fe59 	bl	1004abe4 <NVMDB_ReadCurrentRecord>
10045f32:	0003      	movs	r3, r0
10045f34:	7023      	strb	r3, [r4, #0]
10045f36:	e021      	b.n	10045f7c <BLEPLAT_NvmGet+0xb8>
  }
  else
  {
    if(Mode == BLEPLAT_NVM_FIRST)
10045f38:	1dfb      	adds	r3, r7, #7
10045f3a:	781b      	ldrb	r3, [r3, #0]
10045f3c:	2b00      	cmp	r3, #0
10045f3e:	d108      	bne.n	10045f52 <BLEPLAT_NvmGet+0x8e>
    {
      NVMDB_HandleInit(db_id, curr_handle_p);
10045f40:	4b19      	ldr	r3, [pc, #100]	@ (10045fa8 <BLEPLAT_NvmGet+0xe4>)
10045f42:	681a      	ldr	r2, [r3, #0]
10045f44:	230e      	movs	r3, #14
10045f46:	18fb      	adds	r3, r7, r3
10045f48:	781b      	ldrb	r3, [r3, #0]
10045f4a:	0011      	movs	r1, r2
10045f4c:	0018      	movs	r0, r3
10045f4e:	f004 fddb 	bl	1004ab08 <NVMDB_HandleInit>
    }
    ret = NVMDB_ReadNextRecord(curr_handle_p, Type, Offset, pData, Size, &size_out);
10045f52:	4b15      	ldr	r3, [pc, #84]	@ (10045fa8 <BLEPLAT_NvmGet+0xe4>)
10045f54:	6818      	ldr	r0, [r3, #0]
10045f56:	230f      	movs	r3, #15
10045f58:	18fc      	adds	r4, r7, r3
10045f5a:	683d      	ldr	r5, [r7, #0]
10045f5c:	1d3b      	adds	r3, r7, #4
10045f5e:	881a      	ldrh	r2, [r3, #0]
10045f60:	1dbb      	adds	r3, r7, #6
10045f62:	7819      	ldrb	r1, [r3, #0]
10045f64:	230c      	movs	r3, #12
10045f66:	18fb      	adds	r3, r7, r3
10045f68:	9301      	str	r3, [sp, #4]
10045f6a:	2320      	movs	r3, #32
10045f6c:	18fb      	adds	r3, r7, r3
10045f6e:	881b      	ldrh	r3, [r3, #0]
10045f70:	9300      	str	r3, [sp, #0]
10045f72:	002b      	movs	r3, r5
10045f74:	f004 fdfc 	bl	1004ab70 <NVMDB_ReadNextRecord>
10045f78:	0003      	movs	r3, r0
10045f7a:	7023      	strb	r3, [r4, #0]
  }

  if(ret == NVMDB_STATUS_OK)
10045f7c:	230f      	movs	r3, #15
10045f7e:	18fb      	adds	r3, r7, r3
10045f80:	781b      	ldrb	r3, [r3, #0]
10045f82:	2b00      	cmp	r3, #0
10045f84:	d101      	bne.n	10045f8a <BLEPLAT_NvmGet+0xc6>
  {
    return BLEPLAT_OK;
10045f86:	2300      	movs	r3, #0
10045f88:	e009      	b.n	10045f9e <BLEPLAT_NvmGet+0xda>
  }

  if(ret == NVMDB_STATUS_END_OF_DB)
10045f8a:	230f      	movs	r3, #15
10045f8c:	18fb      	adds	r3, r7, r3
10045f8e:	781b      	ldrb	r3, [r3, #0]
10045f90:	2b04      	cmp	r3, #4
10045f92:	d102      	bne.n	10045f9a <BLEPLAT_NvmGet+0xd6>
  {
    return BLEPLAT_EOF;
10045f94:	2303      	movs	r3, #3
10045f96:	425b      	negs	r3, r3
10045f98:	e001      	b.n	10045f9e <BLEPLAT_NvmGet+0xda>
  }

  return BLEPLAT_BUSY;
10045f9a:	2302      	movs	r3, #2
10045f9c:	425b      	negs	r3, r3
}
10045f9e:	0018      	movs	r0, r3
10045fa0:	46bd      	mov	sp, r7
10045fa2:	b004      	add	sp, #16
10045fa4:	bdb0      	pop	{r4, r5, r7, pc}
10045fa6:	46c0      	nop			@ (mov r8, r8)
10045fa8:	20000808 	.word	0x20000808
10045fac:	200007f8 	.word	0x200007f8
10045fb0:	200007e8 	.word	0x200007e8

10045fb4 <BLEPLAT_NvmCompare>:

int BLEPLAT_NvmCompare(uint16_t Offset, const uint8_t* pData, uint16_t Size)
{
10045fb4:	b590      	push	{r4, r7, lr}
10045fb6:	b085      	sub	sp, #20
10045fb8:	af00      	add	r7, sp, #0
10045fba:	6039      	str	r1, [r7, #0]
10045fbc:	0011      	movs	r1, r2
10045fbe:	1dbb      	adds	r3, r7, #6
10045fc0:	1c02      	adds	r2, r0, #0
10045fc2:	801a      	strh	r2, [r3, #0]
10045fc4:	1d3b      	adds	r3, r7, #4
10045fc6:	1c0a      	adds	r2, r1, #0
10045fc8:	801a      	strh	r2, [r3, #0]
  int ret;

  ret = NVMDB_CompareCurrentRecord(curr_handle_p, Offset, pData, Size);
10045fca:	4b0e      	ldr	r3, [pc, #56]	@ (10046004 <BLEPLAT_NvmCompare+0x50>)
10045fcc:	6818      	ldr	r0, [r3, #0]
10045fce:	1d3b      	adds	r3, r7, #4
10045fd0:	881c      	ldrh	r4, [r3, #0]
10045fd2:	683a      	ldr	r2, [r7, #0]
10045fd4:	1dbb      	adds	r3, r7, #6
10045fd6:	8819      	ldrh	r1, [r3, #0]
10045fd8:	0023      	movs	r3, r4
10045fda:	f003 fdff 	bl	10049bdc <NVMDB_CompareCurrentRecord>
10045fde:	0003      	movs	r3, r0
10045fe0:	60fb      	str	r3, [r7, #12]

  if(ret == 0)
10045fe2:	68fb      	ldr	r3, [r7, #12]
10045fe4:	2b00      	cmp	r3, #0
10045fe6:	d101      	bne.n	10045fec <BLEPLAT_NvmCompare+0x38>
  {
    return BLEPLAT_OK;
10045fe8:	2300      	movs	r3, #0
10045fea:	e007      	b.n	10045ffc <BLEPLAT_NvmCompare+0x48>
  }
  else if(ret < 0)
10045fec:	68fb      	ldr	r3, [r7, #12]
10045fee:	2b00      	cmp	r3, #0
10045ff0:	da02      	bge.n	10045ff8 <BLEPLAT_NvmCompare+0x44>
  {
    return Size;
10045ff2:	1d3b      	adds	r3, r7, #4
10045ff4:	881b      	ldrh	r3, [r3, #0]
10045ff6:	e001      	b.n	10045ffc <BLEPLAT_NvmCompare+0x48>
  }
  else
  {
    return BLEPLAT_EOF;
10045ff8:	2303      	movs	r3, #3
10045ffa:	425b      	negs	r3, r3
  }
}
10045ffc:	0018      	movs	r0, r3
10045ffe:	46bd      	mov	sp, r7
10046000:	b005      	add	sp, #20
10046002:	bd90      	pop	{r4, r7, pc}
10046004:	20000808 	.word	0x20000808

10046008 <BLEPLAT_NvmDiscard>:

void BLEPLAT_NvmDiscard(BLEPLAT_NvmSeekModeTypeDef Mode)
{
10046008:	b580      	push	{r7, lr}
1004600a:	b082      	sub	sp, #8
1004600c:	af00      	add	r7, sp, #0
1004600e:	0002      	movs	r2, r0
10046010:	1dfb      	adds	r3, r7, #7
10046012:	701a      	strb	r2, [r3, #0]
  DEBUG_GPIO2_HIGH();
  if(Mode == BLEPLAT_NVM_CURRENT)
10046014:	1dfb      	adds	r3, r7, #7
10046016:	781b      	ldrb	r3, [r3, #0]
10046018:	2b02      	cmp	r3, #2
1004601a:	d10a      	bne.n	10046032 <BLEPLAT_NvmDiscard+0x2a>
  {
    if(curr_handle_p == &device_id_db_h) // Do not allow to erase device ID data.
1004601c:	4b0b      	ldr	r3, [pc, #44]	@ (1004604c <BLEPLAT_NvmDiscard+0x44>)
1004601e:	681a      	ldr	r2, [r3, #0]
10046020:	4b0b      	ldr	r3, [pc, #44]	@ (10046050 <BLEPLAT_NvmDiscard+0x48>)
10046022:	429a      	cmp	r2, r3
10046024:	d00d      	beq.n	10046042 <BLEPLAT_NvmDiscard+0x3a>
    {
      return;
    }
    NVMDB_DeleteRecord(curr_handle_p);
10046026:	4b09      	ldr	r3, [pc, #36]	@ (1004604c <BLEPLAT_NvmDiscard+0x44>)
10046028:	681b      	ldr	r3, [r3, #0]
1004602a:	0018      	movs	r0, r3
1004602c:	f004 fe74 	bl	1004ad18 <NVMDB_DeleteRecord>
10046030:	e008      	b.n	10046044 <BLEPLAT_NvmDiscard+0x3c>
  }
  else if(Mode == BLEPLAT_NVM_ALL)
10046032:	1dfb      	adds	r3, r7, #7
10046034:	781b      	ldrb	r3, [r3, #0]
10046036:	2b03      	cmp	r3, #3
10046038:	d104      	bne.n	10046044 <BLEPLAT_NvmDiscard+0x3c>
  {

    NVMDB_Erase(SEC_GATT_BD);
1004603a:	2000      	movs	r0, #0
1004603c:	f004 fe7a 	bl	1004ad34 <NVMDB_Erase>
10046040:	e000      	b.n	10046044 <BLEPLAT_NvmDiscard+0x3c>
      return;
10046042:	46c0      	nop			@ (mov r8, r8)
       else
        return;
       }*/
  }
  DEBUG_GPIO2_LOW();
}
10046044:	46bd      	mov	sp, r7
10046046:	b002      	add	sp, #8
10046048:	bd80      	pop	{r7, pc}
1004604a:	46c0      	nop			@ (mov r8, r8)
1004604c:	20000808 	.word	0x20000808
10046050:	200007f8 	.word	0x200007f8

10046054 <BLEPLAT_MemCpy>:
#if defined(STM32WB06) || defined(STM32WB07) || defined(STM32WB09)
uint32_t SYNTH0_ANA_ENG_bak, PWR_ENGTRIM_bak;
#endif

void BLEPLAT_MemCpy(void *Dest, const void *Src, unsigned int Size)
{
10046054:	b580      	push	{r7, lr}
10046056:	b084      	sub	sp, #16
10046058:	af00      	add	r7, sp, #0
1004605a:	60f8      	str	r0, [r7, #12]
1004605c:	60b9      	str	r1, [r7, #8]
1004605e:	607a      	str	r2, [r7, #4]
  Osal_MemCpy(Dest, Src, Size);
10046060:	687a      	ldr	r2, [r7, #4]
10046062:	68b9      	ldr	r1, [r7, #8]
10046064:	68fb      	ldr	r3, [r7, #12]
10046066:	0018      	movs	r0, r3
10046068:	f7fb f84e 	bl	10041108 <Osal_MemCpy>
}
1004606c:	46c0      	nop			@ (mov r8, r8)
1004606e:	46bd      	mov	sp, r7
10046070:	b004      	add	sp, #16
10046072:	bd80      	pop	{r7, pc}

10046074 <BLEPLAT_MemSet>:

void BLEPLAT_MemSet(void *Ptr, int Value, unsigned int Size)
{
10046074:	b580      	push	{r7, lr}
10046076:	b084      	sub	sp, #16
10046078:	af00      	add	r7, sp, #0
1004607a:	60f8      	str	r0, [r7, #12]
1004607c:	60b9      	str	r1, [r7, #8]
1004607e:	607a      	str	r2, [r7, #4]
  memset(Ptr, Value, Size);
10046080:	687a      	ldr	r2, [r7, #4]
10046082:	68b9      	ldr	r1, [r7, #8]
10046084:	68fb      	ldr	r3, [r7, #12]
10046086:	0018      	movs	r0, r3
10046088:	f021 f968 	bl	1006735c <memset>
}
1004608c:	46c0      	nop			@ (mov r8, r8)
1004608e:	46bd      	mov	sp, r7
10046090:	b004      	add	sp, #16
10046092:	bd80      	pop	{r7, pc}

10046094 <BLEPLAT_MemCmp>:

int BLEPLAT_MemCmp(void *S1, void *S2, unsigned int Size)
{
10046094:	b580      	push	{r7, lr}
10046096:	b084      	sub	sp, #16
10046098:	af00      	add	r7, sp, #0
1004609a:	60f8      	str	r0, [r7, #12]
1004609c:	60b9      	str	r1, [r7, #8]
1004609e:	607a      	str	r2, [r7, #4]
  return memcmp(S1, S2, Size);
100460a0:	687a      	ldr	r2, [r7, #4]
100460a2:	68b9      	ldr	r1, [r7, #8]
100460a4:	68fb      	ldr	r3, [r7, #12]
100460a6:	0018      	movs	r0, r3
100460a8:	f021 f94a 	bl	10067340 <memcmp>
100460ac:	0003      	movs	r3, r0
}
100460ae:	0018      	movs	r0, r3
100460b0:	46bd      	mov	sp, r7
100460b2:	b004      	add	sp, #16
100460b4:	bd80      	pop	{r7, pc}

100460b6 <BLEPLAT_GetPartInfo>:

/**
 * @brief Get Device ID, Version and Revision numbers
 */
void BLEPLAT_GetPartInfo(uint8_t *pDeviceId, uint8_t *pMajorCut, uint8_t *pMinorCut)
{
100460b6:	b590      	push	{r4, r7, lr}
100460b8:	b089      	sub	sp, #36	@ 0x24
100460ba:	af00      	add	r7, sp, #0
100460bc:	60f8      	str	r0, [r7, #12]
100460be:	60b9      	str	r1, [r7, #8]
100460c0:	607a      	str	r2, [r7, #4]
   PartInfoType partInfo;

   /* get partInfo */
   GetPartInfo(&partInfo);
100460c2:	2410      	movs	r4, #16
100460c4:	193b      	adds	r3, r7, r4
100460c6:	0018      	movs	r0, r3
100460c8:	f005 faf4 	bl	1004b6b4 <GetPartInfo>

  /* Set device ID */
  *pDeviceId  = partInfo.die_id;
100460cc:	0021      	movs	r1, r4
100460ce:	187b      	adds	r3, r7, r1
100460d0:	781a      	ldrb	r2, [r3, #0]
100460d2:	68fb      	ldr	r3, [r7, #12]
100460d4:	701a      	strb	r2, [r3, #0]

  /* Set major cut  */
  *pMajorCut = partInfo.die_major;
100460d6:	187b      	adds	r3, r7, r1
100460d8:	785a      	ldrb	r2, [r3, #1]
100460da:	68bb      	ldr	r3, [r7, #8]
100460dc:	701a      	strb	r2, [r3, #0]

  /* Set minor cut */
  *pMinorCut = partInfo.die_cut;
100460de:	187b      	adds	r3, r7, r1
100460e0:	789a      	ldrb	r2, [r3, #2]
100460e2:	687b      	ldr	r3, [r7, #4]
100460e4:	701a      	strb	r2, [r3, #0]
}
100460e6:	46c0      	nop			@ (mov r8, r8)
100460e8:	46bd      	mov	sp, r7
100460ea:	b009      	add	sp, #36	@ 0x24
100460ec:	bd90      	pop	{r4, r7, pc}

100460ee <BLEPLAT_PkaStartP256Key>:

BLEPLAT_PkaStatusTypeDef BLEPLAT_PkaStartP256Key(const uint32_t *private_key, BLEPLAT_PkaFuncCb funcCb)
{
100460ee:	b580      	push	{r7, lr}
100460f0:	b082      	sub	sp, #8
100460f2:	af00      	add	r7, sp, #0
100460f4:	6078      	str	r0, [r7, #4]
100460f6:	6039      	str	r1, [r7, #0]
  return (BLEPLAT_PkaStatusTypeDef)PKAMGR_StartP256PublicKeyGeneration(private_key, (PKAMGR_funcCB)funcCb);
100460f8:	683a      	ldr	r2, [r7, #0]
100460fa:	687b      	ldr	r3, [r7, #4]
100460fc:	0011      	movs	r1, r2
100460fe:	0018      	movs	r0, r3
10046100:	f004 ffda 	bl	1004b0b8 <PKAMGR_StartP256PublicKeyGeneration>
10046104:	0003      	movs	r3, r0
}
10046106:	0018      	movs	r0, r3
10046108:	46bd      	mov	sp, r7
1004610a:	b002      	add	sp, #8
1004610c:	bd80      	pop	{r7, pc}

1004610e <BLEPLAT_PkaStartDHkey>:

BLEPLAT_PkaStatusTypeDef BLEPLAT_PkaStartDHkey(uint32_t* private_key,
                                         uint32_t* public_key,
                                         BLEPLAT_PkaFuncCb funcCb)
{
1004610e:	b580      	push	{r7, lr}
10046110:	b084      	sub	sp, #16
10046112:	af00      	add	r7, sp, #0
10046114:	60f8      	str	r0, [r7, #12]
10046116:	60b9      	str	r1, [r7, #8]
10046118:	607a      	str	r2, [r7, #4]
  return (BLEPLAT_PkaStatusTypeDef)HW_PKA_StartP256DHkeyGeneration(private_key, public_key, (PKAMGR_funcCB)funcCb);
1004611a:	687a      	ldr	r2, [r7, #4]
1004611c:	68b9      	ldr	r1, [r7, #8]
1004611e:	68fb      	ldr	r3, [r7, #12]
10046120:	0018      	movs	r0, r3
10046122:	f002 f943 	bl	100483ac <HW_PKA_StartP256DHkeyGeneration>
10046126:	0003      	movs	r3, r0
}
10046128:	0018      	movs	r0, r3
1004612a:	46bd      	mov	sp, r7
1004612c:	b004      	add	sp, #16
1004612e:	bd80      	pop	{r7, pc}

10046130 <BLEPLAT_AesEcbEncrypt>:

void BLEPLAT_AesEcbEncrypt(const uint32_t *plainTextData,
                           const uint32_t *key,
                           uint32_t *encryptedData)
{
10046130:	b580      	push	{r7, lr}
10046132:	b084      	sub	sp, #16
10046134:	af00      	add	r7, sp, #0
10046136:	60f8      	str	r0, [r7, #12]
10046138:	60b9      	str	r1, [r7, #8]
1004613a:	607a      	str	r2, [r7, #4]
  HW_AES_Encrypt(plainTextData, key, encryptedData);
1004613c:	687a      	ldr	r2, [r7, #4]
1004613e:	68b9      	ldr	r1, [r7, #8]
10046140:	68fb      	ldr	r3, [r7, #12]
10046142:	0018      	movs	r0, r3
10046144:	f001 ff64 	bl	10048010 <HW_AES_Encrypt>
}
10046148:	46c0      	nop			@ (mov r8, r8)
1004614a:	46bd      	mov	sp, r7
1004614c:	b004      	add	sp, #16
1004614e:	bd80      	pop	{r7, pc}

10046150 <BLEPLAT_AesCMACEncryptInit>:

int32_t BLEPLAT_AesCMACEncryptInit(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx)
{
10046150:	b580      	push	{r7, lr}
10046152:	b082      	sub	sp, #8
10046154:	af00      	add	r7, sp, #0
10046156:	6078      	str	r0, [r7, #4]
  return AES_CMAC_Encrypt_Init((AESCMACctx_stt*)pAESCMACctx);
10046158:	687b      	ldr	r3, [r7, #4]
1004615a:	0018      	movs	r0, r3
1004615c:	f022 f83e 	bl	100681dc <AES_CMAC_Encrypt_Init>
10046160:	0003      	movs	r3, r0
}
10046162:	0018      	movs	r0, r3
10046164:	46bd      	mov	sp, r7
10046166:	b002      	add	sp, #8
10046168:	bd80      	pop	{r7, pc}

1004616a <BLEPLAT_AesCMACEncryptAppend>:

int32_t BLEPLAT_AesCMACEncryptAppend(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx,
                                     const uint8_t  *pInputBuffer,
                                     int32_t InputSize)
{
1004616a:	b580      	push	{r7, lr}
1004616c:	b084      	sub	sp, #16
1004616e:	af00      	add	r7, sp, #0
10046170:	60f8      	str	r0, [r7, #12]
10046172:	60b9      	str	r1, [r7, #8]
10046174:	607a      	str	r2, [r7, #4]
  return AES_CMAC_Encrypt_Append((AESCMACctx_stt*)pAESCMACctx, pInputBuffer, InputSize);
10046176:	687a      	ldr	r2, [r7, #4]
10046178:	68b9      	ldr	r1, [r7, #8]
1004617a:	68fb      	ldr	r3, [r7, #12]
1004617c:	0018      	movs	r0, r3
1004617e:	f021 fec3 	bl	10067f08 <AES_CMAC_Encrypt_Append>
10046182:	0003      	movs	r3, r0
}
10046184:	0018      	movs	r0, r3
10046186:	46bd      	mov	sp, r7
10046188:	b004      	add	sp, #16
1004618a:	bd80      	pop	{r7, pc}

1004618c <BLEPLAT_AesCMACEncryptFinish>:

int32_t BLEPLAT_AesCMACEncryptFinish(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx,
                                     uint8_t *pOutputBuffer,
                                     int32_t *pOutputSize)
{
1004618c:	b580      	push	{r7, lr}
1004618e:	b084      	sub	sp, #16
10046190:	af00      	add	r7, sp, #0
10046192:	60f8      	str	r0, [r7, #12]
10046194:	60b9      	str	r1, [r7, #8]
10046196:	607a      	str	r2, [r7, #4]
  return AES_CMAC_Encrypt_Finish((AESCMACctx_stt*)pAESCMACctx, pOutputBuffer, pOutputSize);
10046198:	687a      	ldr	r2, [r7, #4]
1004619a:	68b9      	ldr	r1, [r7, #8]
1004619c:	68fb      	ldr	r3, [r7, #12]
1004619e:	0018      	movs	r0, r3
100461a0:	f021 ffe6 	bl	10068170 <AES_CMAC_Encrypt_Finish>
100461a4:	0003      	movs	r3, r0
}
100461a6:	0018      	movs	r0, r3
100461a8:	46bd      	mov	sp, r7
100461aa:	b004      	add	sp, #16
100461ac:	bd80      	pop	{r7, pc}

100461ae <BLEPLAT_RngGetRandom16>:

void BLEPLAT_RngGetRandom16(uint16_t* num)
{
100461ae:	b580      	push	{r7, lr}
100461b0:	b082      	sub	sp, #8
100461b2:	af00      	add	r7, sp, #0
100461b4:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom16(num);
100461b6:	687b      	ldr	r3, [r7, #4]
100461b8:	0018      	movs	r0, r3
100461ba:	f002 fc97 	bl	10048aec <HW_RNG_GetRandom16>
}
100461be:	46c0      	nop			@ (mov r8, r8)
100461c0:	46bd      	mov	sp, r7
100461c2:	b002      	add	sp, #8
100461c4:	bd80      	pop	{r7, pc}

100461c6 <BLEPLAT_RngGetRandom32>:

void BLEPLAT_RngGetRandom32(uint32_t* num)
{
100461c6:	b580      	push	{r7, lr}
100461c8:	b082      	sub	sp, #8
100461ca:	af00      	add	r7, sp, #0
100461cc:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom32(num);
100461ce:	687b      	ldr	r3, [r7, #4]
100461d0:	0018      	movs	r0, r3
100461d2:	f002 fca5 	bl	10048b20 <HW_RNG_GetRandom32>
}
100461d6:	46c0      	nop			@ (mov r8, r8)
100461d8:	46bd      	mov	sp, r7
100461da:	b002      	add	sp, #8
100461dc:	bd80      	pop	{r7, pc}

100461de <BLEPLAT_GetMaxPALevel>:
{
  RADIO_ReadTransmitPower(Min_Tx_Power, Max_Tx_Power);
}

uint8_t BLEPLAT_GetMaxPALevel(void)
{
100461de:	b580      	push	{r7, lr}
100461e0:	af00      	add	r7, sp, #0
  return RADIO_GetMaxPALevel();
100461e2:	f005 f9bb 	bl	1004b55c <RADIO_GetMaxPALevel>
100461e6:	0003      	movs	r3, r0
}
100461e8:	0018      	movs	r0, r3
100461ea:	46bd      	mov	sp, r7
100461ec:	bd80      	pop	{r7, pc}

100461ee <BLEPLAT_GetDefaultPALevel>:

uint8_t BLEPLAT_GetDefaultPALevel(void)
{
100461ee:	b580      	push	{r7, lr}
100461f0:	af00      	add	r7, sp, #0
  return RADIO_GetDefaultPALevel();
100461f2:	f005 f9b9 	bl	1004b568 <RADIO_GetDefaultPALevel>
100461f6:	0003      	movs	r3, r0
}
100461f8:	0018      	movs	r0, r3
100461fa:	46bd      	mov	sp, r7
100461fc:	bd80      	pop	{r7, pc}

100461fe <BLEPLAT_SetHighPower>:

void BLEPLAT_SetHighPower(uint8_t enable)
{
100461fe:	b580      	push	{r7, lr}
10046200:	b082      	sub	sp, #8
10046202:	af00      	add	r7, sp, #0
10046204:	0002      	movs	r2, r0
10046206:	1dfb      	adds	r3, r7, #7
10046208:	701a      	strb	r2, [r3, #0]
  RADIO_SetHighPower((FunctionalState)enable);
1004620a:	1dfb      	adds	r3, r7, #7
1004620c:	781b      	ldrb	r3, [r3, #0]
1004620e:	0018      	movs	r0, r3
10046210:	f005 f9b0 	bl	1004b574 <RADIO_SetHighPower>
}
10046214:	46c0      	nop			@ (mov r8, r8)
10046216:	46bd      	mov	sp, r7
10046218:	b002      	add	sp, #8
1004621a:	bd80      	pop	{r7, pc}

1004621c <BLEPLAT_CalculateRSSI>:

int8_t BLEPLAT_CalculateRSSI(void)
{
1004621c:	b580      	push	{r7, lr}
1004621e:	af00      	add	r7, sp, #0
  return HAL_RADIO_ReadRSSI();
10046220:	f008 f92a 	bl	1004e478 <HAL_RADIO_ReadRSSI>
10046224:	0003      	movs	r3, r0
}
10046226:	0018      	movs	r0, r3
10046228:	46bd      	mov	sp, r7
1004622a:	bd80      	pop	{r7, pc}

1004622c <BLEPLAT_GetCurrentSysTime>:
{
  RADIO_AntIdxRemap(AntPattLen, pAntRamTable, pAntPatt);
}

uint64_t BLEPLAT_GetCurrentSysTime(void)
{
1004622c:	b580      	push	{r7, lr}
1004622e:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_GetCurrentSysTime();
10046230:	f008 ff76 	bl	1004f120 <HAL_RADIO_TIMER_GetCurrentSysTime>
10046234:	0002      	movs	r2, r0
10046236:	000b      	movs	r3, r1

}
10046238:	0010      	movs	r0, r2
1004623a:	0019      	movs	r1, r3
1004623c:	46bd      	mov	sp, r7
1004623e:	bd80      	pop	{r7, pc}

10046240 <BLEPLAT_StartTimer>:
{
  return HAL_RADIO_TIMER_GetFutureSysTime64(SysTime);
}

int BLEPLAT_StartTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle, uint64_t Time)
{
10046240:	b580      	push	{r7, lr}
10046242:	b084      	sub	sp, #16
10046244:	af00      	add	r7, sp, #0
10046246:	60f8      	str	r0, [r7, #12]
10046248:	603a      	str	r2, [r7, #0]
1004624a:	607b      	str	r3, [r7, #4]
  return HAL_RADIO_TIMER_StartVirtualTimerSysTime((VTIMER_HandleType*)TimerHandle, Time);
1004624c:	683a      	ldr	r2, [r7, #0]
1004624e:	687b      	ldr	r3, [r7, #4]
10046250:	68f9      	ldr	r1, [r7, #12]
10046252:	0008      	movs	r0, r1
10046254:	f008 ffac 	bl	1004f1b0 <HAL_RADIO_TIMER_StartVirtualTimerSysTime>
10046258:	0003      	movs	r3, r0
}
1004625a:	0018      	movs	r0, r3
1004625c:	46bd      	mov	sp, r7
1004625e:	b004      	add	sp, #16
10046260:	bd80      	pop	{r7, pc}

10046262 <BLEPLAT_StopTimer>:

void BLEPLAT_StopTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle)
{
10046262:	b580      	push	{r7, lr}
10046264:	b082      	sub	sp, #8
10046266:	af00      	add	r7, sp, #0
10046268:	6078      	str	r0, [r7, #4]
  HAL_RADIO_TIMER_StopVirtualTimer((VTIMER_HandleType*)TimerHandle);
1004626a:	687b      	ldr	r3, [r7, #4]
1004626c:	0018      	movs	r0, r3
1004626e:	f008 ffb9 	bl	1004f1e4 <HAL_RADIO_TIMER_StopVirtualTimer>
}
10046272:	46c0      	nop			@ (mov r8, r8)
10046274:	46bd      	mov	sp, r7
10046276:	b002      	add	sp, #8
10046278:	bd80      	pop	{r7, pc}

1004627a <BLEPLAT_SetRadioTimerValue>:

uint8_t BLEPLAT_SetRadioTimerValue(uint32_t Time, uint8_t EventType, uint8_t CalReq)
{
1004627a:	b580      	push	{r7, lr}
1004627c:	b082      	sub	sp, #8
1004627e:	af00      	add	r7, sp, #0
10046280:	6078      	str	r0, [r7, #4]
10046282:	0008      	movs	r0, r1
10046284:	0011      	movs	r1, r2
10046286:	1cfb      	adds	r3, r7, #3
10046288:	1c02      	adds	r2, r0, #0
1004628a:	701a      	strb	r2, [r3, #0]
1004628c:	1cbb      	adds	r3, r7, #2
1004628e:	1c0a      	adds	r2, r1, #0
10046290:	701a      	strb	r2, [r3, #0]
  return HAL_RADIO_TIMER_SetRadioTimerValue(Time, EventType, CalReq);
10046292:	1cbb      	adds	r3, r7, #2
10046294:	781a      	ldrb	r2, [r3, #0]
10046296:	1cfb      	adds	r3, r7, #3
10046298:	7819      	ldrb	r1, [r3, #0]
1004629a:	687b      	ldr	r3, [r7, #4]
1004629c:	0018      	movs	r0, r3
1004629e:	f008 fe29 	bl	1004eef4 <HAL_RADIO_TIMER_SetRadioTimerValue>
100462a2:	0003      	movs	r3, r0
100462a4:	b2db      	uxtb	r3, r3
}
100462a6:	0018      	movs	r0, r3
100462a8:	46bd      	mov	sp, r7
100462aa:	b002      	add	sp, #8
100462ac:	bd80      	pop	{r7, pc}

100462ae <BLEPLAT_ClearRadioTimerValue>:

uint8_t BLEPLAT_ClearRadioTimerValue(void)
{
100462ae:	b580      	push	{r7, lr}
100462b0:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_ClearRadioTimerValue();
100462b2:	f008 fe6f 	bl	1004ef94 <HAL_RADIO_TIMER_ClearRadioTimerValue>
100462b6:	0003      	movs	r3, r0
100462b8:	b2db      	uxtb	r3, r3
}
100462ba:	0018      	movs	r0, r3
100462bc:	46bd      	mov	sp, r7
100462be:	bd80      	pop	{r7, pc}

100462c0 <BLEPLAT_GetAnchorPoint>:

uint64_t BLEPLAT_GetAnchorPoint(uint64_t *pCurrentSysTime)
{
100462c0:	b580      	push	{r7, lr}
100462c2:	b082      	sub	sp, #8
100462c4:	af00      	add	r7, sp, #0
100462c6:	6078      	str	r0, [r7, #4]
  return HAL_RADIO_TIMER_GetAnchorPoint(pCurrentSysTime);
100462c8:	687b      	ldr	r3, [r7, #4]
100462ca:	0018      	movs	r0, r3
100462cc:	f008 fd34 	bl	1004ed38 <HAL_RADIO_TIMER_GetAnchorPoint>
100462d0:	0002      	movs	r2, r0
100462d2:	000b      	movs	r3, r1
}
100462d4:	0010      	movs	r0, r2
100462d6:	0019      	movs	r1, r3
100462d8:	46bd      	mov	sp, r7
100462da:	b002      	add	sp, #8
100462dc:	bd80      	pop	{r7, pc}

100462de <BLEPLAT_SetRadioCloseTimeout>:

void BLEPLAT_SetRadioCloseTimeout(void)
{
100462de:	b580      	push	{r7, lr}
100462e0:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_SetRadioCloseTimeout();
100462e2:	f008 fecb 	bl	1004f07c <HAL_RADIO_TIMER_SetRadioCloseTimeout>
}
100462e6:	46c0      	nop			@ (mov r8, r8)
100462e8:	46bd      	mov	sp, r7
100462ea:	bd80      	pop	{r7, pc}

100462ec <LL_RADIO_SetCurrentConnectionMachineNumber>:
  * @rmtoll WORD1          CURSTMACHNUM       LL_RADIO_SetCurrentConnectionMachineNumber
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCurrentConnectionMachineNumber(uint32_t value)
{
100462ec:	b580      	push	{r7, lr}
100462ee:	b082      	sub	sp, #8
100462f0:	af00      	add	r7, sp, #0
100462f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_CURSTMACHNUM, value);
100462f4:	4b07      	ldr	r3, [pc, #28]	@ (10046314 <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
100462f6:	685b      	ldr	r3, [r3, #4]
100462f8:	227f      	movs	r2, #127	@ 0x7f
100462fa:	4393      	bics	r3, r2
100462fc:	0019      	movs	r1, r3
100462fe:	687b      	ldr	r3, [r7, #4]
10046300:	227f      	movs	r2, #127	@ 0x7f
10046302:	401a      	ands	r2, r3
10046304:	4b03      	ldr	r3, [pc, #12]	@ (10046314 <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
10046306:	430a      	orrs	r2, r1
10046308:	605a      	str	r2, [r3, #4]
}
1004630a:	46c0      	nop			@ (mov r8, r8)
1004630c:	46bd      	mov	sp, r7
1004630e:	b002      	add	sp, #8
10046310:	bd80      	pop	{r7, pc}
10046312:	46c0      	nop			@ (mov r8, r8)
10046314:	200000c0 	.word	0x200000c0

10046318 <LL_RADIO_GlobalEnableBlue>:
  * @brief  RADIO Enable
  * @rmtoll WORD1          ACTIVE            LL_RADIO_GlobalEnableBlue
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_GlobalEnableBlue(void)
{
10046318:	b580      	push	{r7, lr}
1004631a:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
1004631c:	4b04      	ldr	r3, [pc, #16]	@ (10046330 <LL_RADIO_GlobalEnableBlue+0x18>)
1004631e:	685a      	ldr	r2, [r3, #4]
10046320:	4b03      	ldr	r3, [pc, #12]	@ (10046330 <LL_RADIO_GlobalEnableBlue+0x18>)
10046322:	2180      	movs	r1, #128	@ 0x80
10046324:	430a      	orrs	r2, r1
10046326:	605a      	str	r2, [r3, #4]
}
10046328:	46c0      	nop			@ (mov r8, r8)
1004632a:	46bd      	mov	sp, r7
1004632c:	bd80      	pop	{r7, pc}
1004632e:	46c0      	nop			@ (mov r8, r8)
10046330:	200000c0 	.word	0x200000c0

10046334 <LL_RADIO_GlobalDisableBlue>:
  * @brief  RADIO Disable
  * @rmtoll WORD1          ACTIVE            LL_RADIO_GlobalDisableBlue
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_GlobalDisableBlue(void)
{
10046334:	b580      	push	{r7, lr}
10046336:	af00      	add	r7, sp, #0
  CLEAR_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
10046338:	4b04      	ldr	r3, [pc, #16]	@ (1004634c <LL_RADIO_GlobalDisableBlue+0x18>)
1004633a:	685a      	ldr	r2, [r3, #4]
1004633c:	4b03      	ldr	r3, [pc, #12]	@ (1004634c <LL_RADIO_GlobalDisableBlue+0x18>)
1004633e:	2180      	movs	r1, #128	@ 0x80
10046340:	438a      	bics	r2, r1
10046342:	605a      	str	r2, [r3, #4]
}
10046344:	46c0      	nop			@ (mov r8, r8)
10046346:	46bd      	mov	sp, r7
10046348:	bd80      	pop	{r7, pc}
1004634a:	46c0      	nop			@ (mov r8, r8)
1004634c:	200000c0 	.word	0x200000c0

10046350 <LL_RADIO_SetReceiveWindowTimeout>:
  * @rmtoll WORD4          RCVTIMEOUT       LL_RADIO_SetReceiveWindowTimeout
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceiveWindowTimeout(uint32_t value)
{
10046350:	b580      	push	{r7, lr}
10046352:	b082      	sub	sp, #8
10046354:	af00      	add	r7, sp, #0
10046356:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_RCVTIMEOUT, value);
10046358:	4b07      	ldr	r3, [pc, #28]	@ (10046378 <LL_RADIO_SetReceiveWindowTimeout+0x28>)
1004635a:	691b      	ldr	r3, [r3, #16]
1004635c:	4a07      	ldr	r2, [pc, #28]	@ (1004637c <LL_RADIO_SetReceiveWindowTimeout+0x2c>)
1004635e:	4013      	ands	r3, r2
10046360:	0019      	movs	r1, r3
10046362:	687b      	ldr	r3, [r7, #4]
10046364:	021b      	lsls	r3, r3, #8
10046366:	4a06      	ldr	r2, [pc, #24]	@ (10046380 <LL_RADIO_SetReceiveWindowTimeout+0x30>)
10046368:	401a      	ands	r2, r3
1004636a:	4b03      	ldr	r3, [pc, #12]	@ (10046378 <LL_RADIO_SetReceiveWindowTimeout+0x28>)
1004636c:	430a      	orrs	r2, r1
1004636e:	611a      	str	r2, [r3, #16]
}
10046370:	46c0      	nop			@ (mov r8, r8)
10046372:	46bd      	mov	sp, r7
10046374:	b002      	add	sp, #8
10046376:	bd80      	pop	{r7, pc}
10046378:	200000c0 	.word	0x200000c0
1004637c:	f00000ff 	.word	0xf00000ff
10046380:	0fffff00 	.word	0x0fffff00

10046384 <LL_RADIO_SetUnmappedChannel>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUnmappedChannel(uint8_t stateMachineNo, uint32_t value)
{
10046384:	b580      	push	{r7, lr}
10046386:	b082      	sub	sp, #8
10046388:	af00      	add	r7, sp, #0
1004638a:	0002      	movs	r2, r0
1004638c:	6039      	str	r1, [r7, #0]
1004638e:	1dfb      	adds	r3, r7, #7
10046390:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_UCHAN, value);
10046392:	1dfb      	adds	r3, r7, #7
10046394:	781b      	ldrb	r3, [r3, #0]
10046396:	225c      	movs	r2, #92	@ 0x5c
10046398:	4353      	muls	r3, r2
1004639a:	4a0b      	ldr	r2, [pc, #44]	@ (100463c8 <LL_RADIO_SetUnmappedChannel+0x44>)
1004639c:	4694      	mov	ip, r2
1004639e:	4463      	add	r3, ip
100463a0:	681b      	ldr	r3, [r3, #0]
100463a2:	223f      	movs	r2, #63	@ 0x3f
100463a4:	4393      	bics	r3, r2
100463a6:	0019      	movs	r1, r3
100463a8:	683b      	ldr	r3, [r7, #0]
100463aa:	223f      	movs	r2, #63	@ 0x3f
100463ac:	401a      	ands	r2, r3
100463ae:	1dfb      	adds	r3, r7, #7
100463b0:	781b      	ldrb	r3, [r3, #0]
100463b2:	205c      	movs	r0, #92	@ 0x5c
100463b4:	4343      	muls	r3, r0
100463b6:	4804      	ldr	r0, [pc, #16]	@ (100463c8 <LL_RADIO_SetUnmappedChannel+0x44>)
100463b8:	4684      	mov	ip, r0
100463ba:	4463      	add	r3, ip
100463bc:	430a      	orrs	r2, r1
100463be:	601a      	str	r2, [r3, #0]
}
100463c0:	46c0      	nop			@ (mov r8, r8)
100463c2:	46bd      	mov	sp, r7
100463c4:	b002      	add	sp, #8
100463c6:	bd80      	pop	{r7, pc}
100463c8:	200000dc 	.word	0x200000dc

100463cc <LL_RADIO_RadioCommandList_Enable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Enable(uint8_t stateMachineNo)
{
100463cc:	b580      	push	{r7, lr}
100463ce:	b082      	sub	sp, #8
100463d0:	af00      	add	r7, sp, #0
100463d2:	0002      	movs	r2, r0
100463d4:	1dfb      	adds	r3, r7, #7
100463d6:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
100463d8:	1dfb      	adds	r3, r7, #7
100463da:	781b      	ldrb	r3, [r3, #0]
100463dc:	225c      	movs	r2, #92	@ 0x5c
100463de:	4353      	muls	r3, r2
100463e0:	4a08      	ldr	r2, [pc, #32]	@ (10046404 <LL_RADIO_RadioCommandList_Enable+0x38>)
100463e2:	4694      	mov	ip, r2
100463e4:	4463      	add	r3, ip
100463e6:	681a      	ldr	r2, [r3, #0]
100463e8:	1dfb      	adds	r3, r7, #7
100463ea:	781b      	ldrb	r3, [r3, #0]
100463ec:	215c      	movs	r1, #92	@ 0x5c
100463ee:	434b      	muls	r3, r1
100463f0:	4904      	ldr	r1, [pc, #16]	@ (10046404 <LL_RADIO_RadioCommandList_Enable+0x38>)
100463f2:	468c      	mov	ip, r1
100463f4:	4463      	add	r3, ip
100463f6:	2140      	movs	r1, #64	@ 0x40
100463f8:	430a      	orrs	r2, r1
100463fa:	601a      	str	r2, [r3, #0]
}
100463fc:	46c0      	nop			@ (mov r8, r8)
100463fe:	46bd      	mov	sp, r7
10046400:	b002      	add	sp, #8
10046402:	bd80      	pop	{r7, pc}
10046404:	200000dc 	.word	0x200000dc

10046408 <LL_RADIO_RadioCommandList_Disable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Disable(uint8_t stateMachineNo)
{
10046408:	b580      	push	{r7, lr}
1004640a:	b082      	sub	sp, #8
1004640c:	af00      	add	r7, sp, #0
1004640e:	0002      	movs	r2, r0
10046410:	1dfb      	adds	r3, r7, #7
10046412:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
10046414:	1dfb      	adds	r3, r7, #7
10046416:	781b      	ldrb	r3, [r3, #0]
10046418:	225c      	movs	r2, #92	@ 0x5c
1004641a:	4353      	muls	r3, r2
1004641c:	4a08      	ldr	r2, [pc, #32]	@ (10046440 <LL_RADIO_RadioCommandList_Disable+0x38>)
1004641e:	4694      	mov	ip, r2
10046420:	4463      	add	r3, ip
10046422:	681a      	ldr	r2, [r3, #0]
10046424:	1dfb      	adds	r3, r7, #7
10046426:	781b      	ldrb	r3, [r3, #0]
10046428:	215c      	movs	r1, #92	@ 0x5c
1004642a:	434b      	muls	r3, r1
1004642c:	4904      	ldr	r1, [pc, #16]	@ (10046440 <LL_RADIO_RadioCommandList_Disable+0x38>)
1004642e:	468c      	mov	ip, r1
10046430:	4463      	add	r3, ip
10046432:	2140      	movs	r1, #64	@ 0x40
10046434:	438a      	bics	r2, r1
10046436:	601a      	str	r2, [r3, #0]
}
10046438:	46c0      	nop			@ (mov r8, r8)
1004643a:	46bd      	mov	sp, r7
1004643c:	b002      	add	sp, #8
1004643e:	bd80      	pop	{r7, pc}
10046440:	200000dc 	.word	0x200000dc

10046444 <LL_RADIO_TxMode_Enable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Enable(uint8_t stateMachineNo)
{
10046444:	b580      	push	{r7, lr}
10046446:	b082      	sub	sp, #8
10046448:	af00      	add	r7, sp, #0
1004644a:	0002      	movs	r2, r0
1004644c:	1dfb      	adds	r3, r7, #7
1004644e:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
10046450:	1dfb      	adds	r3, r7, #7
10046452:	781b      	ldrb	r3, [r3, #0]
10046454:	225c      	movs	r2, #92	@ 0x5c
10046456:	4353      	muls	r3, r2
10046458:	4a08      	ldr	r2, [pc, #32]	@ (1004647c <LL_RADIO_TxMode_Enable+0x38>)
1004645a:	4694      	mov	ip, r2
1004645c:	4463      	add	r3, ip
1004645e:	681a      	ldr	r2, [r3, #0]
10046460:	1dfb      	adds	r3, r7, #7
10046462:	781b      	ldrb	r3, [r3, #0]
10046464:	215c      	movs	r1, #92	@ 0x5c
10046466:	434b      	muls	r3, r1
10046468:	4904      	ldr	r1, [pc, #16]	@ (1004647c <LL_RADIO_TxMode_Enable+0x38>)
1004646a:	468c      	mov	ip, r1
1004646c:	4463      	add	r3, ip
1004646e:	2180      	movs	r1, #128	@ 0x80
10046470:	430a      	orrs	r2, r1
10046472:	601a      	str	r2, [r3, #0]
}
10046474:	46c0      	nop			@ (mov r8, r8)
10046476:	46bd      	mov	sp, r7
10046478:	b002      	add	sp, #8
1004647a:	bd80      	pop	{r7, pc}
1004647c:	200000dc 	.word	0x200000dc

10046480 <LL_RADIO_TxMode_Disable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Disable(uint8_t stateMachineNo)
{
10046480:	b580      	push	{r7, lr}
10046482:	b082      	sub	sp, #8
10046484:	af00      	add	r7, sp, #0
10046486:	0002      	movs	r2, r0
10046488:	1dfb      	adds	r3, r7, #7
1004648a:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
1004648c:	1dfb      	adds	r3, r7, #7
1004648e:	781b      	ldrb	r3, [r3, #0]
10046490:	225c      	movs	r2, #92	@ 0x5c
10046492:	4353      	muls	r3, r2
10046494:	4a08      	ldr	r2, [pc, #32]	@ (100464b8 <LL_RADIO_TxMode_Disable+0x38>)
10046496:	4694      	mov	ip, r2
10046498:	4463      	add	r3, ip
1004649a:	681a      	ldr	r2, [r3, #0]
1004649c:	1dfb      	adds	r3, r7, #7
1004649e:	781b      	ldrb	r3, [r3, #0]
100464a0:	215c      	movs	r1, #92	@ 0x5c
100464a2:	434b      	muls	r3, r1
100464a4:	4904      	ldr	r1, [pc, #16]	@ (100464b8 <LL_RADIO_TxMode_Disable+0x38>)
100464a6:	468c      	mov	ip, r1
100464a8:	4463      	add	r3, ip
100464aa:	2180      	movs	r1, #128	@ 0x80
100464ac:	438a      	bics	r2, r1
100464ae:	601a      	str	r2, [r3, #0]
}
100464b0:	46c0      	nop			@ (mov r8, r8)
100464b2:	46bd      	mov	sp, r7
100464b4:	b002      	add	sp, #8
100464b6:	bd80      	pop	{r7, pc}
100464b8:	200000dc 	.word	0x200000dc

100464bc <LL_RADIO_TxMode_IsEnabled>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_IsEnabled
  * @param  stateMachineNo
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TxMode_IsEnabled(uint8_t stateMachineNo)
{
100464bc:	b580      	push	{r7, lr}
100464be:	b082      	sub	sp, #8
100464c0:	af00      	add	r7, sp, #0
100464c2:	0002      	movs	r2, r0
100464c4:	1dfb      	adds	r3, r7, #7
100464c6:	701a      	strb	r2, [r3, #0]
  return ((READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE) == (STATEMACH_WORD0_TXMODE)) ? 1U : 0U);
100464c8:	1dfb      	adds	r3, r7, #7
100464ca:	781b      	ldrb	r3, [r3, #0]
100464cc:	225c      	movs	r2, #92	@ 0x5c
100464ce:	4353      	muls	r3, r2
100464d0:	4a07      	ldr	r2, [pc, #28]	@ (100464f0 <LL_RADIO_TxMode_IsEnabled+0x34>)
100464d2:	4694      	mov	ip, r2
100464d4:	4463      	add	r3, ip
100464d6:	681b      	ldr	r3, [r3, #0]
100464d8:	2280      	movs	r2, #128	@ 0x80
100464da:	4013      	ands	r3, r2
100464dc:	2b80      	cmp	r3, #128	@ 0x80
100464de:	d101      	bne.n	100464e4 <LL_RADIO_TxMode_IsEnabled+0x28>
100464e0:	2301      	movs	r3, #1
100464e2:	e000      	b.n	100464e6 <LL_RADIO_TxMode_IsEnabled+0x2a>
100464e4:	2300      	movs	r3, #0
}
100464e6:	0018      	movs	r0, r3
100464e8:	46bd      	mov	sp, r7
100464ea:	b002      	add	sp, #8
100464ec:	bd80      	pop	{r7, pc}
100464ee:	46c0      	nop			@ (mov r8, r8)
100464f0:	200000dc 	.word	0x200000dc

100464f4 <LL_RADIO_SetRemapChannel>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRemapChannel(uint8_t stateMachineNo, uint32_t value)
{
100464f4:	b580      	push	{r7, lr}
100464f6:	b082      	sub	sp, #8
100464f8:	af00      	add	r7, sp, #0
100464fa:	0002      	movs	r2, r0
100464fc:	6039      	str	r1, [r7, #0]
100464fe:	1dfb      	adds	r3, r7, #7
10046500:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_REMAP_CHAN, value);
10046502:	1dfb      	adds	r3, r7, #7
10046504:	781b      	ldrb	r3, [r3, #0]
10046506:	225c      	movs	r2, #92	@ 0x5c
10046508:	4353      	muls	r3, r2
1004650a:	4a0c      	ldr	r2, [pc, #48]	@ (1004653c <LL_RADIO_SetRemapChannel+0x48>)
1004650c:	4694      	mov	ip, r2
1004650e:	4463      	add	r3, ip
10046510:	681b      	ldr	r3, [r3, #0]
10046512:	4a0b      	ldr	r2, [pc, #44]	@ (10046540 <LL_RADIO_SetRemapChannel+0x4c>)
10046514:	4013      	ands	r3, r2
10046516:	0019      	movs	r1, r3
10046518:	683b      	ldr	r3, [r7, #0]
1004651a:	021a      	lsls	r2, r3, #8
1004651c:	23fc      	movs	r3, #252	@ 0xfc
1004651e:	019b      	lsls	r3, r3, #6
10046520:	401a      	ands	r2, r3
10046522:	1dfb      	adds	r3, r7, #7
10046524:	781b      	ldrb	r3, [r3, #0]
10046526:	205c      	movs	r0, #92	@ 0x5c
10046528:	4343      	muls	r3, r0
1004652a:	4804      	ldr	r0, [pc, #16]	@ (1004653c <LL_RADIO_SetRemapChannel+0x48>)
1004652c:	4684      	mov	ip, r0
1004652e:	4463      	add	r3, ip
10046530:	430a      	orrs	r2, r1
10046532:	601a      	str	r2, [r3, #0]
}
10046534:	46c0      	nop			@ (mov r8, r8)
10046536:	46bd      	mov	sp, r7
10046538:	b002      	add	sp, #8
1004653a:	bd80      	pop	{r7, pc}
1004653c:	200000dc 	.word	0x200000dc
10046540:	ffffc0ff 	.word	0xffffc0ff

10046544 <LL_RADIO_GetRemapChannel>:
  * @rmtoll WORD0          REMAP_CHAN       LL_RADIO_GetRemapChannel
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetRemapChannel(uint8_t stateMachineNo)
{
10046544:	b580      	push	{r7, lr}
10046546:	b082      	sub	sp, #8
10046548:	af00      	add	r7, sp, #0
1004654a:	0002      	movs	r2, r0
1004654c:	1dfb      	adds	r3, r7, #7
1004654e:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0,
10046550:	1dfb      	adds	r3, r7, #7
10046552:	781b      	ldrb	r3, [r3, #0]
10046554:	225c      	movs	r2, #92	@ 0x5c
10046556:	4353      	muls	r3, r2
10046558:	4a05      	ldr	r2, [pc, #20]	@ (10046570 <LL_RADIO_GetRemapChannel+0x2c>)
1004655a:	4694      	mov	ip, r2
1004655c:	4463      	add	r3, ip
1004655e:	681b      	ldr	r3, [r3, #0]
10046560:	0a1b      	lsrs	r3, r3, #8
10046562:	223f      	movs	r2, #63	@ 0x3f
10046564:	4013      	ands	r3, r2
                             STATEMACH_WORD0_REMAP_CHAN) >> STATEMACH_WORD0_REMAP_CHAN_Pos);
}
10046566:	0018      	movs	r0, r3
10046568:	46bd      	mov	sp, r7
1004656a:	b002      	add	sp, #8
1004656c:	bd80      	pop	{r7, pc}
1004656e:	46c0      	nop			@ (mov r8, r8)
10046570:	200000dc 	.word	0x200000dc

10046574 <LL_RADIO_ToggleNextExpectedSequenceNumber>:
  * @rmtoll WORD0          NESN       LL_RADIO_ToggleNextExpectedSequenceNumber
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ToggleNextExpectedSequenceNumber(uint8_t stateMachineNo)
{
10046574:	b580      	push	{r7, lr}
10046576:	b082      	sub	sp, #8
10046578:	af00      	add	r7, sp, #0
1004657a:	0002      	movs	r2, r0
1004657c:	1dfb      	adds	r3, r7, #7
1004657e:	701a      	strb	r2, [r3, #0]
  TOGGLE_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_NESN);
10046580:	1dfb      	adds	r3, r7, #7
10046582:	781b      	ldrb	r3, [r3, #0]
10046584:	225c      	movs	r2, #92	@ 0x5c
10046586:	4353      	muls	r3, r2
10046588:	4a09      	ldr	r2, [pc, #36]	@ (100465b0 <LL_RADIO_ToggleNextExpectedSequenceNumber+0x3c>)
1004658a:	4694      	mov	ip, r2
1004658c:	4463      	add	r3, ip
1004658e:	681a      	ldr	r2, [r3, #0]
10046590:	1dfb      	adds	r3, r7, #7
10046592:	781b      	ldrb	r3, [r3, #0]
10046594:	215c      	movs	r1, #92	@ 0x5c
10046596:	434b      	muls	r3, r1
10046598:	4905      	ldr	r1, [pc, #20]	@ (100465b0 <LL_RADIO_ToggleNextExpectedSequenceNumber+0x3c>)
1004659a:	468c      	mov	ip, r1
1004659c:	4463      	add	r3, ip
1004659e:	2180      	movs	r1, #128	@ 0x80
100465a0:	0209      	lsls	r1, r1, #8
100465a2:	404a      	eors	r2, r1
100465a4:	601a      	str	r2, [r3, #0]
}
100465a6:	46c0      	nop			@ (mov r8, r8)
100465a8:	46bd      	mov	sp, r7
100465aa:	b002      	add	sp, #8
100465ac:	bd80      	pop	{r7, pc}
100465ae:	46c0      	nop			@ (mov r8, r8)
100465b0:	200000dc 	.word	0x200000dc

100465b4 <LL_RADIO_Encryption_Enable>:
  * @rmtoll WORD0          ENCRYPTON            LL_RADIO_Encryption_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Encryption_Enable(uint8_t stateMachineNo)
{
100465b4:	b580      	push	{r7, lr}
100465b6:	b082      	sub	sp, #8
100465b8:	af00      	add	r7, sp, #0
100465ba:	0002      	movs	r2, r0
100465bc:	1dfb      	adds	r3, r7, #7
100465be:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_ENCRYPTON);
100465c0:	1dfb      	adds	r3, r7, #7
100465c2:	781b      	ldrb	r3, [r3, #0]
100465c4:	225c      	movs	r2, #92	@ 0x5c
100465c6:	4353      	muls	r3, r2
100465c8:	4a09      	ldr	r2, [pc, #36]	@ (100465f0 <LL_RADIO_Encryption_Enable+0x3c>)
100465ca:	4694      	mov	ip, r2
100465cc:	4463      	add	r3, ip
100465ce:	681a      	ldr	r2, [r3, #0]
100465d0:	1dfb      	adds	r3, r7, #7
100465d2:	781b      	ldrb	r3, [r3, #0]
100465d4:	215c      	movs	r1, #92	@ 0x5c
100465d6:	434b      	muls	r3, r1
100465d8:	4905      	ldr	r1, [pc, #20]	@ (100465f0 <LL_RADIO_Encryption_Enable+0x3c>)
100465da:	468c      	mov	ip, r1
100465dc:	4463      	add	r3, ip
100465de:	2180      	movs	r1, #128	@ 0x80
100465e0:	0389      	lsls	r1, r1, #14
100465e2:	430a      	orrs	r2, r1
100465e4:	601a      	str	r2, [r3, #0]
}
100465e6:	46c0      	nop			@ (mov r8, r8)
100465e8:	46bd      	mov	sp, r7
100465ea:	b002      	add	sp, #8
100465ec:	bd80      	pop	{r7, pc}
100465ee:	46c0      	nop			@ (mov r8, r8)
100465f0:	200000dc 	.word	0x200000dc

100465f4 <LL_RADIO_Encryption_Disable>:
  * @rmtoll WORD0          ENCRYPTON            LL_RADIO_Encryption_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Encryption_Disable(uint8_t stateMachineNo)
{
100465f4:	b580      	push	{r7, lr}
100465f6:	b082      	sub	sp, #8
100465f8:	af00      	add	r7, sp, #0
100465fa:	0002      	movs	r2, r0
100465fc:	1dfb      	adds	r3, r7, #7
100465fe:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_ENCRYPTON);
10046600:	1dfb      	adds	r3, r7, #7
10046602:	781b      	ldrb	r3, [r3, #0]
10046604:	225c      	movs	r2, #92	@ 0x5c
10046606:	4353      	muls	r3, r2
10046608:	4a08      	ldr	r2, [pc, #32]	@ (1004662c <LL_RADIO_Encryption_Disable+0x38>)
1004660a:	4694      	mov	ip, r2
1004660c:	4463      	add	r3, ip
1004660e:	681a      	ldr	r2, [r3, #0]
10046610:	1dfb      	adds	r3, r7, #7
10046612:	781b      	ldrb	r3, [r3, #0]
10046614:	215c      	movs	r1, #92	@ 0x5c
10046616:	434b      	muls	r3, r1
10046618:	4904      	ldr	r1, [pc, #16]	@ (1004662c <LL_RADIO_Encryption_Disable+0x38>)
1004661a:	468c      	mov	ip, r1
1004661c:	4463      	add	r3, ip
1004661e:	4904      	ldr	r1, [pc, #16]	@ (10046630 <LL_RADIO_Encryption_Disable+0x3c>)
10046620:	400a      	ands	r2, r1
10046622:	601a      	str	r2, [r3, #0]
}
10046624:	46c0      	nop			@ (mov r8, r8)
10046626:	46bd      	mov	sp, r7
10046628:	b002      	add	sp, #8
1004662a:	bd80      	pop	{r7, pc}
1004662c:	200000dc 	.word	0x200000dc
10046630:	ffdfffff 	.word	0xffdfffff

10046634 <LL_RADIO_SetTransmissionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionPhy(uint8_t stateMachineNo, uint32_t value)
{
10046634:	b580      	push	{r7, lr}
10046636:	b082      	sub	sp, #8
10046638:	af00      	add	r7, sp, #0
1004663a:	0002      	movs	r2, r0
1004663c:	6039      	str	r1, [r7, #0]
1004663e:	1dfb      	adds	r3, r7, #7
10046640:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXPHY, value);
10046642:	1dfb      	adds	r3, r7, #7
10046644:	781b      	ldrb	r3, [r3, #0]
10046646:	225c      	movs	r2, #92	@ 0x5c
10046648:	4353      	muls	r3, r2
1004664a:	4a0c      	ldr	r2, [pc, #48]	@ (1004667c <LL_RADIO_SetTransmissionPhy+0x48>)
1004664c:	4694      	mov	ip, r2
1004664e:	4463      	add	r3, ip
10046650:	681b      	ldr	r3, [r3, #0]
10046652:	4a0b      	ldr	r2, [pc, #44]	@ (10046680 <LL_RADIO_SetTransmissionPhy+0x4c>)
10046654:	4013      	ands	r3, r2
10046656:	0019      	movs	r1, r3
10046658:	683b      	ldr	r3, [r7, #0]
1004665a:	061a      	lsls	r2, r3, #24
1004665c:	23e0      	movs	r3, #224	@ 0xe0
1004665e:	04db      	lsls	r3, r3, #19
10046660:	401a      	ands	r2, r3
10046662:	1dfb      	adds	r3, r7, #7
10046664:	781b      	ldrb	r3, [r3, #0]
10046666:	205c      	movs	r0, #92	@ 0x5c
10046668:	4343      	muls	r3, r0
1004666a:	4804      	ldr	r0, [pc, #16]	@ (1004667c <LL_RADIO_SetTransmissionPhy+0x48>)
1004666c:	4684      	mov	ip, r0
1004666e:	4463      	add	r3, ip
10046670:	430a      	orrs	r2, r1
10046672:	601a      	str	r2, [r3, #0]
}
10046674:	46c0      	nop			@ (mov r8, r8)
10046676:	46bd      	mov	sp, r7
10046678:	b002      	add	sp, #8
1004667a:	bd80      	pop	{r7, pc}
1004667c:	200000dc 	.word	0x200000dc
10046680:	f8ffffff 	.word	0xf8ffffff

10046684 <LL_RADIO_GetTransmissionPhy>:
  * @rmtoll WORD0          TXPHY       LL_RADIO_GetTransmissionPhy
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetTransmissionPhy(uint8_t stateMachineNo)
{
10046684:	b580      	push	{r7, lr}
10046686:	b082      	sub	sp, #8
10046688:	af00      	add	r7, sp, #0
1004668a:	0002      	movs	r2, r0
1004668c:	1dfb      	adds	r3, r7, #7
1004668e:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXPHY) >> STATEMACH_WORD0_TXPHY_Pos);
10046690:	1dfb      	adds	r3, r7, #7
10046692:	781b      	ldrb	r3, [r3, #0]
10046694:	225c      	movs	r2, #92	@ 0x5c
10046696:	4353      	muls	r3, r2
10046698:	4a05      	ldr	r2, [pc, #20]	@ (100466b0 <LL_RADIO_GetTransmissionPhy+0x2c>)
1004669a:	4694      	mov	ip, r2
1004669c:	4463      	add	r3, ip
1004669e:	681b      	ldr	r3, [r3, #0]
100466a0:	0e1b      	lsrs	r3, r3, #24
100466a2:	2207      	movs	r2, #7
100466a4:	4013      	ands	r3, r2
}
100466a6:	0018      	movs	r0, r3
100466a8:	46bd      	mov	sp, r7
100466aa:	b002      	add	sp, #8
100466ac:	bd80      	pop	{r7, pc}
100466ae:	46c0      	nop			@ (mov r8, r8)
100466b0:	200000dc 	.word	0x200000dc

100466b4 <LL_RADIO_SetCTEDisable>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCTEDisable(uint8_t stateMachineNo, uint32_t value)
{
100466b4:	b580      	push	{r7, lr}
100466b6:	b082      	sub	sp, #8
100466b8:	af00      	add	r7, sp, #0
100466ba:	0002      	movs	r2, r0
100466bc:	6039      	str	r1, [r7, #0]
100466be:	1dfb      	adds	r3, r7, #7
100466c0:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_CTEDISABLE, value);
100466c2:	1dfb      	adds	r3, r7, #7
100466c4:	781b      	ldrb	r3, [r3, #0]
100466c6:	225c      	movs	r2, #92	@ 0x5c
100466c8:	4353      	muls	r3, r2
100466ca:	4a0c      	ldr	r2, [pc, #48]	@ (100466fc <LL_RADIO_SetCTEDisable+0x48>)
100466cc:	4694      	mov	ip, r2
100466ce:	4463      	add	r3, ip
100466d0:	681b      	ldr	r3, [r3, #0]
100466d2:	4a0b      	ldr	r2, [pc, #44]	@ (10046700 <LL_RADIO_SetCTEDisable+0x4c>)
100466d4:	4013      	ands	r3, r2
100466d6:	0019      	movs	r1, r3
100466d8:	683b      	ldr	r3, [r7, #0]
100466da:	06da      	lsls	r2, r3, #27
100466dc:	2380      	movs	r3, #128	@ 0x80
100466de:	051b      	lsls	r3, r3, #20
100466e0:	401a      	ands	r2, r3
100466e2:	1dfb      	adds	r3, r7, #7
100466e4:	781b      	ldrb	r3, [r3, #0]
100466e6:	205c      	movs	r0, #92	@ 0x5c
100466e8:	4343      	muls	r3, r0
100466ea:	4804      	ldr	r0, [pc, #16]	@ (100466fc <LL_RADIO_SetCTEDisable+0x48>)
100466ec:	4684      	mov	ip, r0
100466ee:	4463      	add	r3, ip
100466f0:	430a      	orrs	r2, r1
100466f2:	601a      	str	r2, [r3, #0]
}
100466f4:	46c0      	nop			@ (mov r8, r8)
100466f6:	46bd      	mov	sp, r7
100466f8:	b002      	add	sp, #8
100466fa:	bd80      	pop	{r7, pc}
100466fc:	200000dc 	.word	0x200000dc
10046700:	f7ffffff 	.word	0xf7ffffff

10046704 <LL_RADIO_SetReceptionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceptionPhy(uint8_t stateMachineNo, uint32_t value)
{
10046704:	b580      	push	{r7, lr}
10046706:	b082      	sub	sp, #8
10046708:	af00      	add	r7, sp, #0
1004670a:	0002      	movs	r2, r0
1004670c:	6039      	str	r1, [r7, #0]
1004670e:	1dfb      	adds	r3, r7, #7
10046710:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RXPHY, value);
10046712:	1dfb      	adds	r3, r7, #7
10046714:	781b      	ldrb	r3, [r3, #0]
10046716:	225c      	movs	r2, #92	@ 0x5c
10046718:	4353      	muls	r3, r2
1004671a:	4a0c      	ldr	r2, [pc, #48]	@ (1004674c <LL_RADIO_SetReceptionPhy+0x48>)
1004671c:	4694      	mov	ip, r2
1004671e:	4463      	add	r3, ip
10046720:	681b      	ldr	r3, [r3, #0]
10046722:	4a0b      	ldr	r2, [pc, #44]	@ (10046750 <LL_RADIO_SetReceptionPhy+0x4c>)
10046724:	4013      	ands	r3, r2
10046726:	0019      	movs	r1, r3
10046728:	683b      	ldr	r3, [r7, #0]
1004672a:	071a      	lsls	r2, r3, #28
1004672c:	23e0      	movs	r3, #224	@ 0xe0
1004672e:	05db      	lsls	r3, r3, #23
10046730:	401a      	ands	r2, r3
10046732:	1dfb      	adds	r3, r7, #7
10046734:	781b      	ldrb	r3, [r3, #0]
10046736:	205c      	movs	r0, #92	@ 0x5c
10046738:	4343      	muls	r3, r0
1004673a:	4804      	ldr	r0, [pc, #16]	@ (1004674c <LL_RADIO_SetReceptionPhy+0x48>)
1004673c:	4684      	mov	ip, r0
1004673e:	4463      	add	r3, ip
10046740:	430a      	orrs	r2, r1
10046742:	601a      	str	r2, [r3, #0]
}
10046744:	46c0      	nop			@ (mov r8, r8)
10046746:	46bd      	mov	sp, r7
10046748:	b002      	add	sp, #8
1004674a:	bd80      	pop	{r7, pc}
1004674c:	200000dc 	.word	0x200000dc
10046750:	8fffffff 	.word	0x8fffffff

10046754 <LL_RADIO_GetReceptionPhy>:
  * @rmtoll WORD0          RXPHY       LL_RADIO_GetReceptionPhy
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetReceptionPhy(uint8_t stateMachineNo)
{
10046754:	b580      	push	{r7, lr}
10046756:	b082      	sub	sp, #8
10046758:	af00      	add	r7, sp, #0
1004675a:	0002      	movs	r2, r0
1004675c:	1dfb      	adds	r3, r7, #7
1004675e:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RXPHY) >> STATEMACH_WORD0_RXPHY_Pos);
10046760:	1dfb      	adds	r3, r7, #7
10046762:	781b      	ldrb	r3, [r3, #0]
10046764:	225c      	movs	r2, #92	@ 0x5c
10046766:	4353      	muls	r3, r2
10046768:	4a05      	ldr	r2, [pc, #20]	@ (10046780 <LL_RADIO_GetReceptionPhy+0x2c>)
1004676a:	4694      	mov	ip, r2
1004676c:	4463      	add	r3, ip
1004676e:	681b      	ldr	r3, [r3, #0]
10046770:	0f1b      	lsrs	r3, r3, #28
10046772:	2207      	movs	r2, #7
10046774:	4013      	ands	r3, r2
}
10046776:	0018      	movs	r0, r3
10046778:	46bd      	mov	sp, r7
1004677a:	b002      	add	sp, #8
1004677c:	bd80      	pop	{r7, pc}
1004677e:	46c0      	nop			@ (mov r8, r8)
10046780:	200000dc 	.word	0x200000dc

10046784 <LL_RADIO_SetTxPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxPoint(uint8_t stateMachineNo, uint32_t value)
{
10046784:	b580      	push	{r7, lr}
10046786:	b082      	sub	sp, #8
10046788:	af00      	add	r7, sp, #0
1004678a:	0002      	movs	r2, r0
1004678c:	6039      	str	r1, [r7, #0]
1004678e:	1dfb      	adds	r3, r7, #7
10046790:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD1, STATEMACH_WORD1_TXPOINT, value);
10046792:	1dfb      	adds	r3, r7, #7
10046794:	781b      	ldrb	r3, [r3, #0]
10046796:	225c      	movs	r2, #92	@ 0x5c
10046798:	4353      	muls	r3, r2
1004679a:	4a08      	ldr	r2, [pc, #32]	@ (100467bc <LL_RADIO_SetTxPoint+0x38>)
1004679c:	4694      	mov	ip, r2
1004679e:	4463      	add	r3, ip
100467a0:	685b      	ldr	r3, [r3, #4]
100467a2:	1dfb      	adds	r3, r7, #7
100467a4:	781b      	ldrb	r3, [r3, #0]
100467a6:	225c      	movs	r2, #92	@ 0x5c
100467a8:	4353      	muls	r3, r2
100467aa:	4a04      	ldr	r2, [pc, #16]	@ (100467bc <LL_RADIO_SetTxPoint+0x38>)
100467ac:	4694      	mov	ip, r2
100467ae:	4463      	add	r3, ip
100467b0:	683a      	ldr	r2, [r7, #0]
100467b2:	605a      	str	r2, [r3, #4]
}
100467b4:	46c0      	nop			@ (mov r8, r8)
100467b6:	46bd      	mov	sp, r7
100467b8:	b002      	add	sp, #8
100467ba:	bd80      	pop	{r7, pc}
100467bc:	200000dc 	.word	0x200000dc

100467c0 <LL_RADIO_SetRcvPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRcvPoint(uint8_t stateMachineNo, uint32_t value)
{
100467c0:	b580      	push	{r7, lr}
100467c2:	b082      	sub	sp, #8
100467c4:	af00      	add	r7, sp, #0
100467c6:	0002      	movs	r2, r0
100467c8:	6039      	str	r1, [r7, #0]
100467ca:	1dfb      	adds	r3, r7, #7
100467cc:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD2, STATEMACH_WORD2_RCVPOINT, value);
100467ce:	1dfb      	adds	r3, r7, #7
100467d0:	781b      	ldrb	r3, [r3, #0]
100467d2:	225c      	movs	r2, #92	@ 0x5c
100467d4:	4353      	muls	r3, r2
100467d6:	4a08      	ldr	r2, [pc, #32]	@ (100467f8 <LL_RADIO_SetRcvPoint+0x38>)
100467d8:	4694      	mov	ip, r2
100467da:	4463      	add	r3, ip
100467dc:	689b      	ldr	r3, [r3, #8]
100467de:	1dfb      	adds	r3, r7, #7
100467e0:	781b      	ldrb	r3, [r3, #0]
100467e2:	225c      	movs	r2, #92	@ 0x5c
100467e4:	4353      	muls	r3, r2
100467e6:	4a04      	ldr	r2, [pc, #16]	@ (100467f8 <LL_RADIO_SetRcvPoint+0x38>)
100467e8:	4694      	mov	ip, r2
100467ea:	4463      	add	r3, ip
100467ec:	683a      	ldr	r2, [r7, #0]
100467ee:	609a      	str	r2, [r3, #8]
}
100467f0:	46c0      	nop			@ (mov r8, r8)
100467f2:	46bd      	mov	sp, r7
100467f4:	b002      	add	sp, #8
100467f6:	bd80      	pop	{r7, pc}
100467f8:	200000dc 	.word	0x200000dc

100467fc <LL_RADIO_SetPacketCounterTx_31_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterTx_31_0(uint8_t stateMachineNo, uint32_t value)
{
100467fc:	b580      	push	{r7, lr}
100467fe:	b082      	sub	sp, #8
10046800:	af00      	add	r7, sp, #0
10046802:	0002      	movs	r2, r0
10046804:	6039      	str	r1, [r7, #0]
10046806:	1dfb      	adds	r3, r7, #7
10046808:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD6, STATEMACH_WORD6_PCNTTX_31_0, value);
1004680a:	1dfb      	adds	r3, r7, #7
1004680c:	781b      	ldrb	r3, [r3, #0]
1004680e:	225c      	movs	r2, #92	@ 0x5c
10046810:	4353      	muls	r3, r2
10046812:	4a08      	ldr	r2, [pc, #32]	@ (10046834 <LL_RADIO_SetPacketCounterTx_31_0+0x38>)
10046814:	4694      	mov	ip, r2
10046816:	4463      	add	r3, ip
10046818:	699b      	ldr	r3, [r3, #24]
1004681a:	1dfb      	adds	r3, r7, #7
1004681c:	781b      	ldrb	r3, [r3, #0]
1004681e:	225c      	movs	r2, #92	@ 0x5c
10046820:	4353      	muls	r3, r2
10046822:	4a04      	ldr	r2, [pc, #16]	@ (10046834 <LL_RADIO_SetPacketCounterTx_31_0+0x38>)
10046824:	4694      	mov	ip, r2
10046826:	4463      	add	r3, ip
10046828:	683a      	ldr	r2, [r7, #0]
1004682a:	619a      	str	r2, [r3, #24]
}
1004682c:	46c0      	nop			@ (mov r8, r8)
1004682e:	46bd      	mov	sp, r7
10046830:	b002      	add	sp, #8
10046832:	bd80      	pop	{r7, pc}
10046834:	200000dc 	.word	0x200000dc

10046838 <LL_RADIO_SetPacketCounterTx_39_32>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterTx_39_32(uint8_t stateMachineNo, uint32_t value)
{
10046838:	b580      	push	{r7, lr}
1004683a:	b082      	sub	sp, #8
1004683c:	af00      	add	r7, sp, #0
1004683e:	0002      	movs	r2, r0
10046840:	6039      	str	r1, [r7, #0]
10046842:	1dfb      	adds	r3, r7, #7
10046844:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD7, STATEMACH_WORD7_PCNTTX_39_32, value);
10046846:	1dfb      	adds	r3, r7, #7
10046848:	781b      	ldrb	r3, [r3, #0]
1004684a:	225c      	movs	r2, #92	@ 0x5c
1004684c:	4353      	muls	r3, r2
1004684e:	4a0b      	ldr	r2, [pc, #44]	@ (1004687c <LL_RADIO_SetPacketCounterTx_39_32+0x44>)
10046850:	4694      	mov	ip, r2
10046852:	4463      	add	r3, ip
10046854:	69db      	ldr	r3, [r3, #28]
10046856:	22ff      	movs	r2, #255	@ 0xff
10046858:	4393      	bics	r3, r2
1004685a:	0019      	movs	r1, r3
1004685c:	683b      	ldr	r3, [r7, #0]
1004685e:	22ff      	movs	r2, #255	@ 0xff
10046860:	401a      	ands	r2, r3
10046862:	1dfb      	adds	r3, r7, #7
10046864:	781b      	ldrb	r3, [r3, #0]
10046866:	205c      	movs	r0, #92	@ 0x5c
10046868:	4343      	muls	r3, r0
1004686a:	4804      	ldr	r0, [pc, #16]	@ (1004687c <LL_RADIO_SetPacketCounterTx_39_32+0x44>)
1004686c:	4684      	mov	ip, r0
1004686e:	4463      	add	r3, ip
10046870:	430a      	orrs	r2, r1
10046872:	61da      	str	r2, [r3, #28]
}
10046874:	46c0      	nop			@ (mov r8, r8)
10046876:	46bd      	mov	sp, r7
10046878:	b002      	add	sp, #8
1004687a:	bd80      	pop	{r7, pc}
1004687c:	200000dc 	.word	0x200000dc

10046880 <LL_RADIO_GetPacketCounterTx_39_32>:
  * @rmtoll WORD7          PCNTTX_39_32       LL_RADIO_GetPacketCounterTx_39_32
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterTx_39_32(uint8_t stateMachineNo)
{
10046880:	b580      	push	{r7, lr}
10046882:	b082      	sub	sp, #8
10046884:	af00      	add	r7, sp, #0
10046886:	0002      	movs	r2, r0
10046888:	1dfb      	adds	r3, r7, #7
1004688a:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD7,
1004688c:	1dfb      	adds	r3, r7, #7
1004688e:	781b      	ldrb	r3, [r3, #0]
10046890:	225c      	movs	r2, #92	@ 0x5c
10046892:	4353      	muls	r3, r2
10046894:	4a04      	ldr	r2, [pc, #16]	@ (100468a8 <LL_RADIO_GetPacketCounterTx_39_32+0x28>)
10046896:	4694      	mov	ip, r2
10046898:	4463      	add	r3, ip
1004689a:	69db      	ldr	r3, [r3, #28]
1004689c:	22ff      	movs	r2, #255	@ 0xff
1004689e:	4013      	ands	r3, r2
                             STATEMACH_WORD7_PCNTTX_39_32) >> STATEMACH_WORD7_PCNTTX_39_32_Pos);
}
100468a0:	0018      	movs	r0, r3
100468a2:	46bd      	mov	sp, r7
100468a4:	b002      	add	sp, #8
100468a6:	bd80      	pop	{r7, pc}
100468a8:	200000dc 	.word	0x200000dc

100468ac <LL_RADIO_SetPacketCounterRx_23_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterRx_23_0(uint8_t stateMachineNo, uint32_t value)
{
100468ac:	b580      	push	{r7, lr}
100468ae:	b082      	sub	sp, #8
100468b0:	af00      	add	r7, sp, #0
100468b2:	0002      	movs	r2, r0
100468b4:	6039      	str	r1, [r7, #0]
100468b6:	1dfb      	adds	r3, r7, #7
100468b8:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD7, STATEMACH_WORD7_PCNTRCV_23_0, value);
100468ba:	1dfb      	adds	r3, r7, #7
100468bc:	781b      	ldrb	r3, [r3, #0]
100468be:	225c      	movs	r2, #92	@ 0x5c
100468c0:	4353      	muls	r3, r2
100468c2:	4a0b      	ldr	r2, [pc, #44]	@ (100468f0 <LL_RADIO_SetPacketCounterRx_23_0+0x44>)
100468c4:	4694      	mov	ip, r2
100468c6:	4463      	add	r3, ip
100468c8:	69db      	ldr	r3, [r3, #28]
100468ca:	22ff      	movs	r2, #255	@ 0xff
100468cc:	4013      	ands	r3, r2
100468ce:	0019      	movs	r1, r3
100468d0:	683b      	ldr	r3, [r7, #0]
100468d2:	021a      	lsls	r2, r3, #8
100468d4:	1dfb      	adds	r3, r7, #7
100468d6:	781b      	ldrb	r3, [r3, #0]
100468d8:	205c      	movs	r0, #92	@ 0x5c
100468da:	4343      	muls	r3, r0
100468dc:	4804      	ldr	r0, [pc, #16]	@ (100468f0 <LL_RADIO_SetPacketCounterRx_23_0+0x44>)
100468de:	4684      	mov	ip, r0
100468e0:	4463      	add	r3, ip
100468e2:	430a      	orrs	r2, r1
100468e4:	61da      	str	r2, [r3, #28]
}
100468e6:	46c0      	nop			@ (mov r8, r8)
100468e8:	46bd      	mov	sp, r7
100468ea:	b002      	add	sp, #8
100468ec:	bd80      	pop	{r7, pc}
100468ee:	46c0      	nop			@ (mov r8, r8)
100468f0:	200000dc 	.word	0x200000dc

100468f4 <LL_RADIO_GetPacketCounterRx_23_0>:
  * @rmtoll WORD7          PCNTRCV_23_0       LL_RADIO_GetPacketCounterRx_23_0
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterRx_23_0(uint8_t stateMachineNo)
{
100468f4:	b580      	push	{r7, lr}
100468f6:	b082      	sub	sp, #8
100468f8:	af00      	add	r7, sp, #0
100468fa:	0002      	movs	r2, r0
100468fc:	1dfb      	adds	r3, r7, #7
100468fe:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD7,
10046900:	1dfb      	adds	r3, r7, #7
10046902:	781b      	ldrb	r3, [r3, #0]
10046904:	225c      	movs	r2, #92	@ 0x5c
10046906:	4353      	muls	r3, r2
10046908:	4a05      	ldr	r2, [pc, #20]	@ (10046920 <LL_RADIO_GetPacketCounterRx_23_0+0x2c>)
1004690a:	4694      	mov	ip, r2
1004690c:	4463      	add	r3, ip
1004690e:	69db      	ldr	r3, [r3, #28]
10046910:	0a1b      	lsrs	r3, r3, #8
10046912:	021b      	lsls	r3, r3, #8
10046914:	0a1b      	lsrs	r3, r3, #8
                             STATEMACH_WORD7_PCNTRCV_23_0) >> STATEMACH_WORD7_PCNTRCV_23_0_Pos);
}
10046916:	0018      	movs	r0, r3
10046918:	46bd      	mov	sp, r7
1004691a:	b002      	add	sp, #8
1004691c:	bd80      	pop	{r7, pc}
1004691e:	46c0      	nop			@ (mov r8, r8)
10046920:	200000dc 	.word	0x200000dc

10046924 <LL_RADIO_SetPacketCounterRx_39_24>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterRx_39_24(uint8_t stateMachineNo, uint32_t value)
{
10046924:	b580      	push	{r7, lr}
10046926:	b082      	sub	sp, #8
10046928:	af00      	add	r7, sp, #0
1004692a:	0002      	movs	r2, r0
1004692c:	6039      	str	r1, [r7, #0]
1004692e:	1dfb      	adds	r3, r7, #7
10046930:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_PCNTRCV_39_24, value);
10046932:	1dfb      	adds	r3, r7, #7
10046934:	781b      	ldrb	r3, [r3, #0]
10046936:	225c      	movs	r2, #92	@ 0x5c
10046938:	4353      	muls	r3, r2
1004693a:	4a0b      	ldr	r2, [pc, #44]	@ (10046968 <LL_RADIO_SetPacketCounterRx_39_24+0x44>)
1004693c:	4694      	mov	ip, r2
1004693e:	4463      	add	r3, ip
10046940:	6a1b      	ldr	r3, [r3, #32]
10046942:	0c1b      	lsrs	r3, r3, #16
10046944:	0419      	lsls	r1, r3, #16
10046946:	683b      	ldr	r3, [r7, #0]
10046948:	041b      	lsls	r3, r3, #16
1004694a:	0c1a      	lsrs	r2, r3, #16
1004694c:	1dfb      	adds	r3, r7, #7
1004694e:	781b      	ldrb	r3, [r3, #0]
10046950:	205c      	movs	r0, #92	@ 0x5c
10046952:	4343      	muls	r3, r0
10046954:	4804      	ldr	r0, [pc, #16]	@ (10046968 <LL_RADIO_SetPacketCounterRx_39_24+0x44>)
10046956:	4684      	mov	ip, r0
10046958:	4463      	add	r3, ip
1004695a:	430a      	orrs	r2, r1
1004695c:	621a      	str	r2, [r3, #32]
}
1004695e:	46c0      	nop			@ (mov r8, r8)
10046960:	46bd      	mov	sp, r7
10046962:	b002      	add	sp, #8
10046964:	bd80      	pop	{r7, pc}
10046966:	46c0      	nop			@ (mov r8, r8)
10046968:	200000dc 	.word	0x200000dc

1004696c <LL_RADIO_GetPacketCounterRx_39_24>:
  * @rmtoll WORD8          PCNTRCV_39_24       LL_RADIO_GetPacketCounterRx_39_24
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterRx_39_24(uint8_t stateMachineNo)
{
1004696c:	b580      	push	{r7, lr}
1004696e:	b082      	sub	sp, #8
10046970:	af00      	add	r7, sp, #0
10046972:	0002      	movs	r2, r0
10046974:	1dfb      	adds	r3, r7, #7
10046976:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD8,
10046978:	1dfb      	adds	r3, r7, #7
1004697a:	781b      	ldrb	r3, [r3, #0]
1004697c:	225c      	movs	r2, #92	@ 0x5c
1004697e:	4353      	muls	r3, r2
10046980:	4a04      	ldr	r2, [pc, #16]	@ (10046994 <LL_RADIO_GetPacketCounterRx_39_24+0x28>)
10046982:	4694      	mov	ip, r2
10046984:	4463      	add	r3, ip
10046986:	6a1b      	ldr	r3, [r3, #32]
10046988:	041b      	lsls	r3, r3, #16
1004698a:	0c1b      	lsrs	r3, r3, #16
                             STATEMACH_WORD8_PCNTRCV_39_24) >> STATEMACH_WORD8_PCNTRCV_39_24_Pos);
}
1004698c:	0018      	movs	r0, r3
1004698e:	46bd      	mov	sp, r7
10046990:	b002      	add	sp, #8
10046992:	bd80      	pop	{r7, pc}
10046994:	200000dc 	.word	0x200000dc

10046998 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable>:
  * @rmtoll WORD8          INTENCERROR            LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable(uint8_t stateMachineNo)
{
10046998:	b580      	push	{r7, lr}
1004699a:	b082      	sub	sp, #8
1004699c:	af00      	add	r7, sp, #0
1004699e:	0002      	movs	r2, r0
100469a0:	1dfb      	adds	r3, r7, #7
100469a2:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_INTENCERROR);
100469a4:	1dfb      	adds	r3, r7, #7
100469a6:	781b      	ldrb	r3, [r3, #0]
100469a8:	225c      	movs	r2, #92	@ 0x5c
100469aa:	4353      	muls	r3, r2
100469ac:	4a09      	ldr	r2, [pc, #36]	@ (100469d4 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable+0x3c>)
100469ae:	4694      	mov	ip, r2
100469b0:	4463      	add	r3, ip
100469b2:	6a1a      	ldr	r2, [r3, #32]
100469b4:	1dfb      	adds	r3, r7, #7
100469b6:	781b      	ldrb	r3, [r3, #0]
100469b8:	215c      	movs	r1, #92	@ 0x5c
100469ba:	434b      	muls	r3, r1
100469bc:	4905      	ldr	r1, [pc, #20]	@ (100469d4 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable+0x3c>)
100469be:	468c      	mov	ip, r1
100469c0:	4463      	add	r3, ip
100469c2:	2180      	movs	r1, #128	@ 0x80
100469c4:	0589      	lsls	r1, r1, #22
100469c6:	430a      	orrs	r2, r1
100469c8:	621a      	str	r2, [r3, #32]
}
100469ca:	46c0      	nop			@ (mov r8, r8)
100469cc:	46bd      	mov	sp, r7
100469ce:	b002      	add	sp, #8
100469d0:	bd80      	pop	{r7, pc}
100469d2:	46c0      	nop			@ (mov r8, r8)
100469d4:	200000dc 	.word	0x200000dc

100469d8 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable>:
  * @rmtoll WORD8          INTENCERROR            LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable(uint8_t stateMachineNo)
{
100469d8:	b580      	push	{r7, lr}
100469da:	b082      	sub	sp, #8
100469dc:	af00      	add	r7, sp, #0
100469de:	0002      	movs	r2, r0
100469e0:	1dfb      	adds	r3, r7, #7
100469e2:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_INTENCERROR);
100469e4:	1dfb      	adds	r3, r7, #7
100469e6:	781b      	ldrb	r3, [r3, #0]
100469e8:	225c      	movs	r2, #92	@ 0x5c
100469ea:	4353      	muls	r3, r2
100469ec:	4a08      	ldr	r2, [pc, #32]	@ (10046a10 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x38>)
100469ee:	4694      	mov	ip, r2
100469f0:	4463      	add	r3, ip
100469f2:	6a1a      	ldr	r2, [r3, #32]
100469f4:	1dfb      	adds	r3, r7, #7
100469f6:	781b      	ldrb	r3, [r3, #0]
100469f8:	215c      	movs	r1, #92	@ 0x5c
100469fa:	434b      	muls	r3, r1
100469fc:	4904      	ldr	r1, [pc, #16]	@ (10046a10 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x38>)
100469fe:	468c      	mov	ip, r1
10046a00:	4463      	add	r3, ip
10046a02:	4904      	ldr	r1, [pc, #16]	@ (10046a14 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x3c>)
10046a04:	400a      	ands	r2, r1
10046a06:	621a      	str	r2, [r3, #32]
}
10046a08:	46c0      	nop			@ (mov r8, r8)
10046a0a:	46bd      	mov	sp, r7
10046a0c:	b002      	add	sp, #8
10046a0e:	bd80      	pop	{r7, pc}
10046a10:	200000dc 	.word	0x200000dc
10046a14:	dfffffff 	.word	0xdfffffff

10046a18 <LL_RADIO_SetAccessAddress>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAccessAddress(uint8_t stateMachineNo, uint32_t value)
{
10046a18:	b580      	push	{r7, lr}
10046a1a:	b082      	sub	sp, #8
10046a1c:	af00      	add	r7, sp, #0
10046a1e:	0002      	movs	r2, r0
10046a20:	6039      	str	r1, [r7, #0]
10046a22:	1dfb      	adds	r3, r7, #7
10046a24:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD9, STATEMACH_WORD9_ACCADDR, value);
10046a26:	1dfb      	adds	r3, r7, #7
10046a28:	781b      	ldrb	r3, [r3, #0]
10046a2a:	225c      	movs	r2, #92	@ 0x5c
10046a2c:	4353      	muls	r3, r2
10046a2e:	4a08      	ldr	r2, [pc, #32]	@ (10046a50 <LL_RADIO_SetAccessAddress+0x38>)
10046a30:	4694      	mov	ip, r2
10046a32:	4463      	add	r3, ip
10046a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10046a36:	1dfb      	adds	r3, r7, #7
10046a38:	781b      	ldrb	r3, [r3, #0]
10046a3a:	225c      	movs	r2, #92	@ 0x5c
10046a3c:	4353      	muls	r3, r2
10046a3e:	4a04      	ldr	r2, [pc, #16]	@ (10046a50 <LL_RADIO_SetAccessAddress+0x38>)
10046a40:	4694      	mov	ip, r2
10046a42:	4463      	add	r3, ip
10046a44:	683a      	ldr	r2, [r7, #0]
10046a46:	625a      	str	r2, [r3, #36]	@ 0x24
}
10046a48:	46c0      	nop			@ (mov r8, r8)
10046a4a:	46bd      	mov	sp, r7
10046a4c:	b002      	add	sp, #8
10046a4e:	bd80      	pop	{r7, pc}
10046a50:	200000dc 	.word	0x200000dc

10046a54 <LL_RADIO_GetAccessAddress>:
  * @rmtoll WORD9          ACCADDR       LL_RADIO_GetAccessAddress
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetAccessAddress(uint8_t stateMachineNo)
{
10046a54:	b580      	push	{r7, lr}
10046a56:	b082      	sub	sp, #8
10046a58:	af00      	add	r7, sp, #0
10046a5a:	0002      	movs	r2, r0
10046a5c:	1dfb      	adds	r3, r7, #7
10046a5e:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD9,
10046a60:	1dfb      	adds	r3, r7, #7
10046a62:	781b      	ldrb	r3, [r3, #0]
10046a64:	225c      	movs	r2, #92	@ 0x5c
10046a66:	4353      	muls	r3, r2
10046a68:	4a03      	ldr	r2, [pc, #12]	@ (10046a78 <LL_RADIO_GetAccessAddress+0x24>)
10046a6a:	4694      	mov	ip, r2
10046a6c:	4463      	add	r3, ip
10046a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                             STATEMACH_WORD9_ACCADDR) >> STATEMACH_WORD9_ACCADDR_Pos);
}
10046a70:	0018      	movs	r0, r3
10046a72:	46bd      	mov	sp, r7
10046a74:	b002      	add	sp, #8
10046a76:	bd80      	pop	{r7, pc}
10046a78:	200000dc 	.word	0x200000dc

10046a7c <LL_RADIO_SetCRCInitializationValue>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCRCInitializationValue(uint8_t stateMachineNo, uint32_t value)
{
10046a7c:	b580      	push	{r7, lr}
10046a7e:	b082      	sub	sp, #8
10046a80:	af00      	add	r7, sp, #0
10046a82:	0002      	movs	r2, r0
10046a84:	6039      	str	r1, [r7, #0]
10046a86:	1dfb      	adds	r3, r7, #7
10046a88:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_CRCINIT, value);
10046a8a:	1dfb      	adds	r3, r7, #7
10046a8c:	781b      	ldrb	r3, [r3, #0]
10046a8e:	225c      	movs	r2, #92	@ 0x5c
10046a90:	4353      	muls	r3, r2
10046a92:	4a0b      	ldr	r2, [pc, #44]	@ (10046ac0 <LL_RADIO_SetCRCInitializationValue+0x44>)
10046a94:	4694      	mov	ip, r2
10046a96:	4463      	add	r3, ip
10046a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10046a9a:	0e1b      	lsrs	r3, r3, #24
10046a9c:	0619      	lsls	r1, r3, #24
10046a9e:	683b      	ldr	r3, [r7, #0]
10046aa0:	021b      	lsls	r3, r3, #8
10046aa2:	0a1a      	lsrs	r2, r3, #8
10046aa4:	1dfb      	adds	r3, r7, #7
10046aa6:	781b      	ldrb	r3, [r3, #0]
10046aa8:	205c      	movs	r0, #92	@ 0x5c
10046aaa:	4343      	muls	r3, r0
10046aac:	4804      	ldr	r0, [pc, #16]	@ (10046ac0 <LL_RADIO_SetCRCInitializationValue+0x44>)
10046aae:	4684      	mov	ip, r0
10046ab0:	4463      	add	r3, ip
10046ab2:	430a      	orrs	r2, r1
10046ab4:	629a      	str	r2, [r3, #40]	@ 0x28
}
10046ab6:	46c0      	nop			@ (mov r8, r8)
10046ab8:	46bd      	mov	sp, r7
10046aba:	b002      	add	sp, #8
10046abc:	bd80      	pop	{r7, pc}
10046abe:	46c0      	nop			@ (mov r8, r8)
10046ac0:	200000dc 	.word	0x200000dc

10046ac4 <LL_RADIO_SetMaximumReceiveLength>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetMaximumReceiveLength(uint8_t stateMachineNo, uint32_t value)
{
10046ac4:	b580      	push	{r7, lr}
10046ac6:	b082      	sub	sp, #8
10046ac8:	af00      	add	r7, sp, #0
10046aca:	0002      	movs	r2, r0
10046acc:	6039      	str	r1, [r7, #0]
10046ace:	1dfb      	adds	r3, r7, #7
10046ad0:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_MAXRECEIVEDLENGTH, value);
10046ad2:	1dfb      	adds	r3, r7, #7
10046ad4:	781b      	ldrb	r3, [r3, #0]
10046ad6:	225c      	movs	r2, #92	@ 0x5c
10046ad8:	4353      	muls	r3, r2
10046ada:	4a0a      	ldr	r2, [pc, #40]	@ (10046b04 <LL_RADIO_SetMaximumReceiveLength+0x40>)
10046adc:	4694      	mov	ip, r2
10046ade:	4463      	add	r3, ip
10046ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10046ae2:	021b      	lsls	r3, r3, #8
10046ae4:	0a19      	lsrs	r1, r3, #8
10046ae6:	683b      	ldr	r3, [r7, #0]
10046ae8:	061a      	lsls	r2, r3, #24
10046aea:	1dfb      	adds	r3, r7, #7
10046aec:	781b      	ldrb	r3, [r3, #0]
10046aee:	205c      	movs	r0, #92	@ 0x5c
10046af0:	4343      	muls	r3, r0
10046af2:	4804      	ldr	r0, [pc, #16]	@ (10046b04 <LL_RADIO_SetMaximumReceiveLength+0x40>)
10046af4:	4684      	mov	ip, r0
10046af6:	4463      	add	r3, ip
10046af8:	430a      	orrs	r2, r1
10046afa:	629a      	str	r2, [r3, #40]	@ 0x28
}
10046afc:	46c0      	nop			@ (mov r8, r8)
10046afe:	46bd      	mov	sp, r7
10046b00:	b002      	add	sp, #8
10046b02:	bd80      	pop	{r7, pc}
10046b04:	200000dc 	.word	0x200000dc

10046b08 <LL_RADIO_TxHp_Enable>:
  * @rmtoll WORDB          TXHP            LL_RADIO_TxHp_Enable
  * @param  stateMachineNo
  * @retval
  */
__STATIC_INLINE void LL_RADIO_TxHp_Enable(uint8_t stateMachineNo)
{
10046b08:	b580      	push	{r7, lr}
10046b0a:	b082      	sub	sp, #8
10046b0c:	af00      	add	r7, sp, #0
10046b0e:	0002      	movs	r2, r0
10046b10:	1dfb      	adds	r3, r7, #7
10046b12:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_TXHP);
10046b14:	1dfb      	adds	r3, r7, #7
10046b16:	781b      	ldrb	r3, [r3, #0]
10046b18:	225c      	movs	r2, #92	@ 0x5c
10046b1a:	4353      	muls	r3, r2
10046b1c:	4a08      	ldr	r2, [pc, #32]	@ (10046b40 <LL_RADIO_TxHp_Enable+0x38>)
10046b1e:	4694      	mov	ip, r2
10046b20:	4463      	add	r3, ip
10046b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10046b24:	1dfb      	adds	r3, r7, #7
10046b26:	781b      	ldrb	r3, [r3, #0]
10046b28:	215c      	movs	r1, #92	@ 0x5c
10046b2a:	434b      	muls	r3, r1
10046b2c:	4904      	ldr	r1, [pc, #16]	@ (10046b40 <LL_RADIO_TxHp_Enable+0x38>)
10046b2e:	468c      	mov	ip, r1
10046b30:	4463      	add	r3, ip
10046b32:	2180      	movs	r1, #128	@ 0x80
10046b34:	430a      	orrs	r2, r1
10046b36:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10046b38:	46c0      	nop			@ (mov r8, r8)
10046b3a:	46bd      	mov	sp, r7
10046b3c:	b002      	add	sp, #8
10046b3e:	bd80      	pop	{r7, pc}
10046b40:	200000dc 	.word	0x200000dc

10046b44 <LL_RADIO_TxHp_Disable>:
  * @rmtoll WORDB          TXHP            LL_RADIO_TxHp_Disable
  * @param  stateMachineNo
  * @retval
  */
__STATIC_INLINE void LL_RADIO_TxHp_Disable(uint8_t stateMachineNo)
{
10046b44:	b580      	push	{r7, lr}
10046b46:	b082      	sub	sp, #8
10046b48:	af00      	add	r7, sp, #0
10046b4a:	0002      	movs	r2, r0
10046b4c:	1dfb      	adds	r3, r7, #7
10046b4e:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_TXHP);
10046b50:	1dfb      	adds	r3, r7, #7
10046b52:	781b      	ldrb	r3, [r3, #0]
10046b54:	225c      	movs	r2, #92	@ 0x5c
10046b56:	4353      	muls	r3, r2
10046b58:	4a08      	ldr	r2, [pc, #32]	@ (10046b7c <LL_RADIO_TxHp_Disable+0x38>)
10046b5a:	4694      	mov	ip, r2
10046b5c:	4463      	add	r3, ip
10046b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10046b60:	1dfb      	adds	r3, r7, #7
10046b62:	781b      	ldrb	r3, [r3, #0]
10046b64:	215c      	movs	r1, #92	@ 0x5c
10046b66:	434b      	muls	r3, r1
10046b68:	4904      	ldr	r1, [pc, #16]	@ (10046b7c <LL_RADIO_TxHp_Disable+0x38>)
10046b6a:	468c      	mov	ip, r1
10046b6c:	4463      	add	r3, ip
10046b6e:	2180      	movs	r1, #128	@ 0x80
10046b70:	438a      	bics	r2, r1
10046b72:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10046b74:	46c0      	nop			@ (mov r8, r8)
10046b76:	46bd      	mov	sp, r7
10046b78:	b002      	add	sp, #8
10046b7a:	bd80      	pop	{r7, pc}
10046b7c:	200000dc 	.word	0x200000dc

10046b80 <LL_RADIO_TxHp_IsEnabled>:
  * @rmtoll WORDB          TXHP            LL_RADIO_TxHp_IsEnabled
  * @param  stateMachineNo
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TxHp_IsEnabled(uint8_t stateMachineNo)
{
10046b80:	b580      	push	{r7, lr}
10046b82:	b082      	sub	sp, #8
10046b84:	af00      	add	r7, sp, #0
10046b86:	0002      	movs	r2, r0
10046b88:	1dfb      	adds	r3, r7, #7
10046b8a:	701a      	strb	r2, [r3, #0]
  return ((READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_TXHP) == (STATEMACH_WORDB_TXHP)) ? 1U : 0U);
10046b8c:	1dfb      	adds	r3, r7, #7
10046b8e:	781b      	ldrb	r3, [r3, #0]
10046b90:	225c      	movs	r2, #92	@ 0x5c
10046b92:	4353      	muls	r3, r2
10046b94:	4a07      	ldr	r2, [pc, #28]	@ (10046bb4 <LL_RADIO_TxHp_IsEnabled+0x34>)
10046b96:	4694      	mov	ip, r2
10046b98:	4463      	add	r3, ip
10046b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046b9c:	2280      	movs	r2, #128	@ 0x80
10046b9e:	4013      	ands	r3, r2
10046ba0:	2b80      	cmp	r3, #128	@ 0x80
10046ba2:	d101      	bne.n	10046ba8 <LL_RADIO_TxHp_IsEnabled+0x28>
10046ba4:	2301      	movs	r3, #1
10046ba6:	e000      	b.n	10046baa <LL_RADIO_TxHp_IsEnabled+0x2a>
10046ba8:	2300      	movs	r3, #0
}
10046baa:	0018      	movs	r0, r3
10046bac:	46bd      	mov	sp, r7
10046bae:	b002      	add	sp, #8
10046bb0:	bd80      	pop	{r7, pc}
10046bb2:	46c0      	nop			@ (mov r8, r8)
10046bb4:	200000dc 	.word	0x200000dc

10046bb8 <LL_RADIO_SetPAPower>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPAPower(uint8_t stateMachineNo, uint32_t value)
{
10046bb8:	b580      	push	{r7, lr}
10046bba:	b082      	sub	sp, #8
10046bbc:	af00      	add	r7, sp, #0
10046bbe:	0002      	movs	r2, r0
10046bc0:	6039      	str	r1, [r7, #0]
10046bc2:	1dfb      	adds	r3, r7, #7
10046bc4:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_PAPOWER, value);
10046bc6:	1dfb      	adds	r3, r7, #7
10046bc8:	781b      	ldrb	r3, [r3, #0]
10046bca:	225c      	movs	r2, #92	@ 0x5c
10046bcc:	4353      	muls	r3, r2
10046bce:	4a0b      	ldr	r2, [pc, #44]	@ (10046bfc <LL_RADIO_SetPAPower+0x44>)
10046bd0:	4694      	mov	ip, r2
10046bd2:	4463      	add	r3, ip
10046bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046bd6:	221f      	movs	r2, #31
10046bd8:	4393      	bics	r3, r2
10046bda:	0019      	movs	r1, r3
10046bdc:	683b      	ldr	r3, [r7, #0]
10046bde:	221f      	movs	r2, #31
10046be0:	401a      	ands	r2, r3
10046be2:	1dfb      	adds	r3, r7, #7
10046be4:	781b      	ldrb	r3, [r3, #0]
10046be6:	205c      	movs	r0, #92	@ 0x5c
10046be8:	4343      	muls	r3, r0
10046bea:	4804      	ldr	r0, [pc, #16]	@ (10046bfc <LL_RADIO_SetPAPower+0x44>)
10046bec:	4684      	mov	ip, r0
10046bee:	4463      	add	r3, ip
10046bf0:	430a      	orrs	r2, r1
10046bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10046bf4:	46c0      	nop			@ (mov r8, r8)
10046bf6:	46bd      	mov	sp, r7
10046bf8:	b002      	add	sp, #8
10046bfa:	bd80      	pop	{r7, pc}
10046bfc:	200000dc 	.word	0x200000dc

10046c00 <LL_RADIO_GetPAPower>:
  * @rmtoll WORDB          PAPOWER       LL_RADIO_GetPAPower
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPAPower(uint8_t stateMachineNo)
{
10046c00:	b580      	push	{r7, lr}
10046c02:	b082      	sub	sp, #8
10046c04:	af00      	add	r7, sp, #0
10046c06:	0002      	movs	r2, r0
10046c08:	1dfb      	adds	r3, r7, #7
10046c0a:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
10046c0c:	1dfb      	adds	r3, r7, #7
10046c0e:	781b      	ldrb	r3, [r3, #0]
10046c10:	225c      	movs	r2, #92	@ 0x5c
10046c12:	4353      	muls	r3, r2
10046c14:	4a04      	ldr	r2, [pc, #16]	@ (10046c28 <LL_RADIO_GetPAPower+0x28>)
10046c16:	4694      	mov	ip, r2
10046c18:	4463      	add	r3, ip
10046c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046c1c:	221f      	movs	r2, #31
10046c1e:	4013      	ands	r3, r2
                             STATEMACH_WORDB_PAPOWER) >> STATEMACH_WORDB_PAPOWER_Pos);
}
10046c20:	0018      	movs	r0, r3
10046c22:	46bd      	mov	sp, r7
10046c24:	b002      	add	sp, #8
10046c26:	bd80      	pop	{r7, pc}
10046c28:	200000dc 	.word	0x200000dc

10046c2c <LL_RADIO_SetHopIncrement>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetHopIncrement(uint8_t stateMachineNo, uint32_t value)
{
10046c2c:	b580      	push	{r7, lr}
10046c2e:	b082      	sub	sp, #8
10046c30:	af00      	add	r7, sp, #0
10046c32:	0002      	movs	r2, r0
10046c34:	6039      	str	r1, [r7, #0]
10046c36:	1dfb      	adds	r3, r7, #7
10046c38:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_HOPINCR, value);
10046c3a:	1dfb      	adds	r3, r7, #7
10046c3c:	781b      	ldrb	r3, [r3, #0]
10046c3e:	225c      	movs	r2, #92	@ 0x5c
10046c40:	4353      	muls	r3, r2
10046c42:	4a0c      	ldr	r2, [pc, #48]	@ (10046c74 <LL_RADIO_SetHopIncrement+0x48>)
10046c44:	4694      	mov	ip, r2
10046c46:	4463      	add	r3, ip
10046c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046c4a:	4a0b      	ldr	r2, [pc, #44]	@ (10046c78 <LL_RADIO_SetHopIncrement+0x4c>)
10046c4c:	4013      	ands	r3, r2
10046c4e:	0019      	movs	r1, r3
10046c50:	683b      	ldr	r3, [r7, #0]
10046c52:	021a      	lsls	r2, r3, #8
10046c54:	23fc      	movs	r3, #252	@ 0xfc
10046c56:	019b      	lsls	r3, r3, #6
10046c58:	401a      	ands	r2, r3
10046c5a:	1dfb      	adds	r3, r7, #7
10046c5c:	781b      	ldrb	r3, [r3, #0]
10046c5e:	205c      	movs	r0, #92	@ 0x5c
10046c60:	4343      	muls	r3, r0
10046c62:	4804      	ldr	r0, [pc, #16]	@ (10046c74 <LL_RADIO_SetHopIncrement+0x48>)
10046c64:	4684      	mov	ip, r0
10046c66:	4463      	add	r3, ip
10046c68:	430a      	orrs	r2, r1
10046c6a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10046c6c:	46c0      	nop			@ (mov r8, r8)
10046c6e:	46bd      	mov	sp, r7
10046c70:	b002      	add	sp, #8
10046c72:	bd80      	pop	{r7, pc}
10046c74:	200000dc 	.word	0x200000dc
10046c78:	ffffc0ff 	.word	0xffffc0ff

10046c7c <LL_RADIO_GetHopIncrement>:
  * @rmtoll WORDB          HOPINCR       LL_RADIO_GetHopIncrement
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetHopIncrement(uint8_t stateMachineNo)
{
10046c7c:	b580      	push	{r7, lr}
10046c7e:	b082      	sub	sp, #8
10046c80:	af00      	add	r7, sp, #0
10046c82:	0002      	movs	r2, r0
10046c84:	1dfb      	adds	r3, r7, #7
10046c86:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
10046c88:	1dfb      	adds	r3, r7, #7
10046c8a:	781b      	ldrb	r3, [r3, #0]
10046c8c:	225c      	movs	r2, #92	@ 0x5c
10046c8e:	4353      	muls	r3, r2
10046c90:	4a05      	ldr	r2, [pc, #20]	@ (10046ca8 <LL_RADIO_GetHopIncrement+0x2c>)
10046c92:	4694      	mov	ip, r2
10046c94:	4463      	add	r3, ip
10046c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046c98:	0a1b      	lsrs	r3, r3, #8
10046c9a:	223f      	movs	r2, #63	@ 0x3f
10046c9c:	4013      	ands	r3, r2
                             STATEMACH_WORDB_HOPINCR) >> STATEMACH_WORDB_HOPINCR_Pos);
}
10046c9e:	0018      	movs	r0, r3
10046ca0:	46bd      	mov	sp, r7
10046ca2:	b002      	add	sp, #8
10046ca4:	bd80      	pop	{r7, pc}
10046ca6:	46c0      	nop			@ (mov r8, r8)
10046ca8:	200000dc 	.word	0x200000dc

10046cac <LL_RADIO_SetUsedChannelFlags_15_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUsedChannelFlags_15_0(uint8_t stateMachineNo, uint32_t value)
{
10046cac:	b580      	push	{r7, lr}
10046cae:	b082      	sub	sp, #8
10046cb0:	af00      	add	r7, sp, #0
10046cb2:	0002      	movs	r2, r0
10046cb4:	6039      	str	r1, [r7, #0]
10046cb6:	1dfb      	adds	r3, r7, #7
10046cb8:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_USEDCHANNELFLAGS_15_0, value);
10046cba:	1dfb      	adds	r3, r7, #7
10046cbc:	781b      	ldrb	r3, [r3, #0]
10046cbe:	225c      	movs	r2, #92	@ 0x5c
10046cc0:	4353      	muls	r3, r2
10046cc2:	4a0a      	ldr	r2, [pc, #40]	@ (10046cec <LL_RADIO_SetUsedChannelFlags_15_0+0x40>)
10046cc4:	4694      	mov	ip, r2
10046cc6:	4463      	add	r3, ip
10046cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046cca:	041b      	lsls	r3, r3, #16
10046ccc:	0c19      	lsrs	r1, r3, #16
10046cce:	683b      	ldr	r3, [r7, #0]
10046cd0:	041a      	lsls	r2, r3, #16
10046cd2:	1dfb      	adds	r3, r7, #7
10046cd4:	781b      	ldrb	r3, [r3, #0]
10046cd6:	205c      	movs	r0, #92	@ 0x5c
10046cd8:	4343      	muls	r3, r0
10046cda:	4804      	ldr	r0, [pc, #16]	@ (10046cec <LL_RADIO_SetUsedChannelFlags_15_0+0x40>)
10046cdc:	4684      	mov	ip, r0
10046cde:	4463      	add	r3, ip
10046ce0:	430a      	orrs	r2, r1
10046ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10046ce4:	46c0      	nop			@ (mov r8, r8)
10046ce6:	46bd      	mov	sp, r7
10046ce8:	b002      	add	sp, #8
10046cea:	bd80      	pop	{r7, pc}
10046cec:	200000dc 	.word	0x200000dc

10046cf0 <LL_RADIO_GetUsedChannelFlags_15_0>:
  * @rmtoll WORDB          USEDCHANNELFLAGS_15_0       LL_RADIO_GetUsedChannelFlags_15_0
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetUsedChannelFlags_15_0(uint8_t stateMachineNo)
{
10046cf0:	b580      	push	{r7, lr}
10046cf2:	b082      	sub	sp, #8
10046cf4:	af00      	add	r7, sp, #0
10046cf6:	0002      	movs	r2, r0
10046cf8:	1dfb      	adds	r3, r7, #7
10046cfa:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
10046cfc:	1dfb      	adds	r3, r7, #7
10046cfe:	781b      	ldrb	r3, [r3, #0]
10046d00:	225c      	movs	r2, #92	@ 0x5c
10046d02:	4353      	muls	r3, r2
10046d04:	4a05      	ldr	r2, [pc, #20]	@ (10046d1c <LL_RADIO_GetUsedChannelFlags_15_0+0x2c>)
10046d06:	4694      	mov	ip, r2
10046d08:	4463      	add	r3, ip
10046d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046d0c:	0c1b      	lsrs	r3, r3, #16
10046d0e:	041b      	lsls	r3, r3, #16
10046d10:	0c1b      	lsrs	r3, r3, #16
                             STATEMACH_WORDB_USEDCHANNELFLAGS_15_0) >> STATEMACH_WORDB_USEDCHANNELFLAGS_15_0_Pos);
}
10046d12:	0018      	movs	r0, r3
10046d14:	46bd      	mov	sp, r7
10046d16:	b002      	add	sp, #8
10046d18:	bd80      	pop	{r7, pc}
10046d1a:	46c0      	nop			@ (mov r8, r8)
10046d1c:	200000dc 	.word	0x200000dc

10046d20 <LL_RADIO_SetUsedChannelFlags_36_16>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUsedChannelFlags_36_16(uint8_t stateMachineNo, uint32_t value)
{
10046d20:	b580      	push	{r7, lr}
10046d22:	b082      	sub	sp, #8
10046d24:	af00      	add	r7, sp, #0
10046d26:	0002      	movs	r2, r0
10046d28:	6039      	str	r1, [r7, #0]
10046d2a:	1dfb      	adds	r3, r7, #7
10046d2c:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDC, STATEMACH_WORDC_USEDCHANNELFLAGS_36_16, value);
10046d2e:	1dfb      	adds	r3, r7, #7
10046d30:	781b      	ldrb	r3, [r3, #0]
10046d32:	225c      	movs	r2, #92	@ 0x5c
10046d34:	4353      	muls	r3, r2
10046d36:	4a0b      	ldr	r2, [pc, #44]	@ (10046d64 <LL_RADIO_SetUsedChannelFlags_36_16+0x44>)
10046d38:	4694      	mov	ip, r2
10046d3a:	4463      	add	r3, ip
10046d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10046d3e:	0d9b      	lsrs	r3, r3, #22
10046d40:	0599      	lsls	r1, r3, #22
10046d42:	683b      	ldr	r3, [r7, #0]
10046d44:	029b      	lsls	r3, r3, #10
10046d46:	0a9a      	lsrs	r2, r3, #10
10046d48:	1dfb      	adds	r3, r7, #7
10046d4a:	781b      	ldrb	r3, [r3, #0]
10046d4c:	205c      	movs	r0, #92	@ 0x5c
10046d4e:	4343      	muls	r3, r0
10046d50:	4804      	ldr	r0, [pc, #16]	@ (10046d64 <LL_RADIO_SetUsedChannelFlags_36_16+0x44>)
10046d52:	4684      	mov	ip, r0
10046d54:	4463      	add	r3, ip
10046d56:	430a      	orrs	r2, r1
10046d58:	631a      	str	r2, [r3, #48]	@ 0x30
}
10046d5a:	46c0      	nop			@ (mov r8, r8)
10046d5c:	46bd      	mov	sp, r7
10046d5e:	b002      	add	sp, #8
10046d60:	bd80      	pop	{r7, pc}
10046d62:	46c0      	nop			@ (mov r8, r8)
10046d64:	200000dc 	.word	0x200000dc

10046d68 <LL_RADIO_GetUsedChannelFlags_36_16>:
  * @rmtoll WORDC          USEDCHANNELFLAGS_36_16       LL_RADIO_GetUsedChannelFlags_36_16
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetUsedChannelFlags_36_16(uint8_t stateMachineNo)
{
10046d68:	b580      	push	{r7, lr}
10046d6a:	b082      	sub	sp, #8
10046d6c:	af00      	add	r7, sp, #0
10046d6e:	0002      	movs	r2, r0
10046d70:	1dfb      	adds	r3, r7, #7
10046d72:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDC,
10046d74:	1dfb      	adds	r3, r7, #7
10046d76:	781b      	ldrb	r3, [r3, #0]
10046d78:	225c      	movs	r2, #92	@ 0x5c
10046d7a:	4353      	muls	r3, r2
10046d7c:	4a04      	ldr	r2, [pc, #16]	@ (10046d90 <LL_RADIO_GetUsedChannelFlags_36_16+0x28>)
10046d7e:	4694      	mov	ip, r2
10046d80:	4463      	add	r3, ip
10046d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10046d84:	029b      	lsls	r3, r3, #10
10046d86:	0a9b      	lsrs	r3, r3, #10
                             STATEMACH_WORDC_USEDCHANNELFLAGS_36_16) >> STATEMACH_WORDC_USEDCHANNELFLAGS_36_16_Pos);
}
10046d88:	0018      	movs	r0, r3
10046d8a:	46bd      	mov	sp, r7
10046d8c:	b002      	add	sp, #8
10046d8e:	bd80      	pop	{r7, pc}
10046d90:	200000dc 	.word	0x200000dc

10046d94 <LL_RADIO_SetNextPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
10046d94:	b580      	push	{r7, lr}
10046d96:	b082      	sub	sp, #8
10046d98:	af00      	add	r7, sp, #0
10046d9a:	6078      	str	r0, [r7, #4]
10046d9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD0, TXRXPACK_WORD0_NEXTPTR, value);
10046d9e:	687b      	ldr	r3, [r7, #4]
10046da0:	681b      	ldr	r3, [r3, #0]
10046da2:	687b      	ldr	r3, [r7, #4]
10046da4:	683a      	ldr	r2, [r7, #0]
10046da6:	601a      	str	r2, [r3, #0]
}
10046da8:	46c0      	nop			@ (mov r8, r8)
10046daa:	46bd      	mov	sp, r7
10046dac:	b002      	add	sp, #8
10046dae:	bd80      	pop	{r7, pc}

10046db0 <LL_RADIO_SetCalibrationRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCalibrationRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
10046db0:	b580      	push	{r7, lr}
10046db2:	b082      	sub	sp, #8
10046db4:	af00      	add	r7, sp, #0
10046db6:	6078      	str	r0, [r7, #4]
10046db8:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CALREQ, value);
10046dba:	687b      	ldr	r3, [r7, #4]
10046dbc:	685b      	ldr	r3, [r3, #4]
10046dbe:	2201      	movs	r2, #1
10046dc0:	4393      	bics	r3, r2
10046dc2:	001a      	movs	r2, r3
10046dc4:	683b      	ldr	r3, [r7, #0]
10046dc6:	2101      	movs	r1, #1
10046dc8:	400b      	ands	r3, r1
10046dca:	431a      	orrs	r2, r3
10046dcc:	687b      	ldr	r3, [r7, #4]
10046dce:	605a      	str	r2, [r3, #4]
}
10046dd0:	46c0      	nop			@ (mov r8, r8)
10046dd2:	46bd      	mov	sp, r7
10046dd4:	b002      	add	sp, #8
10046dd6:	bd80      	pop	{r7, pc}

10046dd8 <LL_RADIO_SetKeepSemaRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetKeepSemaRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
10046dd8:	b580      	push	{r7, lr}
10046dda:	b082      	sub	sp, #8
10046ddc:	af00      	add	r7, sp, #0
10046dde:	6078      	str	r0, [r7, #4]
10046de0:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_KEEPSEMAREQ, value);
10046de2:	687b      	ldr	r3, [r7, #4]
10046de4:	685b      	ldr	r3, [r3, #4]
10046de6:	2204      	movs	r2, #4
10046de8:	4393      	bics	r3, r2
10046dea:	001a      	movs	r2, r3
10046dec:	683b      	ldr	r3, [r7, #0]
10046dee:	009b      	lsls	r3, r3, #2
10046df0:	2104      	movs	r1, #4
10046df2:	400b      	ands	r3, r1
10046df4:	431a      	orrs	r2, r3
10046df6:	687b      	ldr	r3, [r7, #4]
10046df8:	605a      	str	r2, [r3, #4]
}
10046dfa:	46c0      	nop			@ (mov r8, r8)
10046dfc:	46bd      	mov	sp, r7
10046dfe:	b002      	add	sp, #8
10046e00:	bd80      	pop	{r7, pc}

10046e02 <LL_RADIO_SetCTEAndSamplingEnable>:
  * @rmtoll WORD1          CTEANDSAMPLINGENABLE        LL_RADIO_SetCTEAndSamplingEnable
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCTEAndSamplingEnable(TXRXPACK_TypeDef *p, uint32_t value)
{
10046e02:	b580      	push	{r7, lr}
10046e04:	b082      	sub	sp, #8
10046e06:	af00      	add	r7, sp, #0
10046e08:	6078      	str	r0, [r7, #4]
10046e0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CTEANDSAMPLINGENABLE, value);
10046e0c:	687b      	ldr	r3, [r7, #4]
10046e0e:	685b      	ldr	r3, [r3, #4]
10046e10:	2208      	movs	r2, #8
10046e12:	4393      	bics	r3, r2
10046e14:	001a      	movs	r2, r3
10046e16:	683b      	ldr	r3, [r7, #0]
10046e18:	00db      	lsls	r3, r3, #3
10046e1a:	2108      	movs	r1, #8
10046e1c:	400b      	ands	r3, r1
10046e1e:	431a      	orrs	r2, r3
10046e20:	687b      	ldr	r3, [r7, #4]
10046e22:	605a      	str	r2, [r3, #4]
}
10046e24:	46c0      	nop			@ (mov r8, r8)
10046e26:	46bd      	mov	sp, r7
10046e28:	b002      	add	sp, #8
10046e2a:	bd80      	pop	{r7, pc}

10046e2c <LL_RADIO_SetCRCInitializationSelector>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCRCInitializationSelector(TXRXPACK_TypeDef *p, uint32_t value)
{
10046e2c:	b580      	push	{r7, lr}
10046e2e:	b082      	sub	sp, #8
10046e30:	af00      	add	r7, sp, #0
10046e32:	6078      	str	r0, [r7, #4]
10046e34:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CRCINITSEL, value);
10046e36:	687b      	ldr	r3, [r7, #4]
10046e38:	685b      	ldr	r3, [r3, #4]
10046e3a:	2210      	movs	r2, #16
10046e3c:	4393      	bics	r3, r2
10046e3e:	001a      	movs	r2, r3
10046e40:	683b      	ldr	r3, [r7, #0]
10046e42:	011b      	lsls	r3, r3, #4
10046e44:	2110      	movs	r1, #16
10046e46:	400b      	ands	r3, r1
10046e48:	431a      	orrs	r2, r3
10046e4a:	687b      	ldr	r3, [r7, #4]
10046e4c:	605a      	str	r2, [r3, #4]
}
10046e4e:	46c0      	nop			@ (mov r8, r8)
10046e50:	46bd      	mov	sp, r7
10046e52:	b002      	add	sp, #8
10046e54:	bd80      	pop	{r7, pc}

10046e56 <LL_RADIO_SetAdvertise>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAdvertise(TXRXPACK_TypeDef *p, uint32_t value)
{
10046e56:	b580      	push	{r7, lr}
10046e58:	b082      	sub	sp, #8
10046e5a:	af00      	add	r7, sp, #0
10046e5c:	6078      	str	r0, [r7, #4]
10046e5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ADVERTISE, value);
10046e60:	687b      	ldr	r3, [r7, #4]
10046e62:	685b      	ldr	r3, [r3, #4]
10046e64:	2220      	movs	r2, #32
10046e66:	4393      	bics	r3, r2
10046e68:	001a      	movs	r2, r3
10046e6a:	683b      	ldr	r3, [r7, #0]
10046e6c:	015b      	lsls	r3, r3, #5
10046e6e:	2120      	movs	r1, #32
10046e70:	400b      	ands	r3, r1
10046e72:	431a      	orrs	r2, r3
10046e74:	687b      	ldr	r3, [r7, #4]
10046e76:	605a      	str	r2, [r3, #4]
}
10046e78:	46c0      	nop			@ (mov r8, r8)
10046e7a:	46bd      	mov	sp, r7
10046e7c:	b002      	add	sp, #8
10046e7e:	bd80      	pop	{r7, pc}

10046e80 <LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable>:
  * @rmtoll WORD1          SN_EN            LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable(TXRXPACK_TypeDef *p)
{
10046e80:	b580      	push	{r7, lr}
10046e82:	b082      	sub	sp, #8
10046e84:	af00      	add	r7, sp, #0
10046e86:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_SN_EN);
10046e88:	687b      	ldr	r3, [r7, #4]
10046e8a:	685b      	ldr	r3, [r3, #4]
10046e8c:	2240      	movs	r2, #64	@ 0x40
10046e8e:	431a      	orrs	r2, r3
10046e90:	687b      	ldr	r3, [r7, #4]
10046e92:	605a      	str	r2, [r3, #4]
}
10046e94:	46c0      	nop			@ (mov r8, r8)
10046e96:	46bd      	mov	sp, r7
10046e98:	b002      	add	sp, #8
10046e9a:	bd80      	pop	{r7, pc}

10046e9c <LL_RADIO_IncrementerChannel_Enable>:
  * @rmtoll WORD1          INCCHAN            LL_RADIO_IncrementerChannel_Enable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IncrementerChannel_Enable(TXRXPACK_TypeDef *p)
{
10046e9c:	b580      	push	{r7, lr}
10046e9e:	b082      	sub	sp, #8
10046ea0:	af00      	add	r7, sp, #0
10046ea2:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_INCCHAN);
10046ea4:	687b      	ldr	r3, [r7, #4]
10046ea6:	685b      	ldr	r3, [r3, #4]
10046ea8:	2280      	movs	r2, #128	@ 0x80
10046eaa:	431a      	orrs	r2, r3
10046eac:	687b      	ldr	r3, [r7, #4]
10046eae:	605a      	str	r2, [r3, #4]
}
10046eb0:	46c0      	nop			@ (mov r8, r8)
10046eb2:	46bd      	mov	sp, r7
10046eb4:	b002      	add	sp, #8
10046eb6:	bd80      	pop	{r7, pc}

10046eb8 <LL_RADIO_IncrementerChannel_Disable>:
  * @rmtoll WORD1          INCCHAN            LL_RADIO_IncrementerChannel_Disable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IncrementerChannel_Disable(TXRXPACK_TypeDef *p)
{
10046eb8:	b580      	push	{r7, lr}
10046eba:	b082      	sub	sp, #8
10046ebc:	af00      	add	r7, sp, #0
10046ebe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_INCCHAN);
10046ec0:	687b      	ldr	r3, [r7, #4]
10046ec2:	685b      	ldr	r3, [r3, #4]
10046ec4:	2280      	movs	r2, #128	@ 0x80
10046ec6:	4393      	bics	r3, r2
10046ec8:	001a      	movs	r2, r3
10046eca:	687b      	ldr	r3, [r7, #4]
10046ecc:	605a      	str	r2, [r3, #4]
}
10046ece:	46c0      	nop			@ (mov r8, r8)
10046ed0:	46bd      	mov	sp, r7
10046ed2:	b002      	add	sp, #8
10046ed4:	bd80      	pop	{r7, pc}
	...

10046ed8 <LL_RADIO_SetNextTxMode>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextTxMode(TXRXPACK_TypeDef *p, uint32_t value)
{
10046ed8:	b580      	push	{r7, lr}
10046eda:	b082      	sub	sp, #8
10046edc:	af00      	add	r7, sp, #0
10046ede:	6078      	str	r0, [r7, #4]
10046ee0:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_NEXTTXMODE, value);
10046ee2:	687b      	ldr	r3, [r7, #4]
10046ee4:	685b      	ldr	r3, [r3, #4]
10046ee6:	4a07      	ldr	r2, [pc, #28]	@ (10046f04 <LL_RADIO_SetNextTxMode+0x2c>)
10046ee8:	401a      	ands	r2, r3
10046eea:	683b      	ldr	r3, [r7, #0]
10046eec:	0219      	lsls	r1, r3, #8
10046eee:	2380      	movs	r3, #128	@ 0x80
10046ef0:	005b      	lsls	r3, r3, #1
10046ef2:	400b      	ands	r3, r1
10046ef4:	431a      	orrs	r2, r3
10046ef6:	687b      	ldr	r3, [r7, #4]
10046ef8:	605a      	str	r2, [r3, #4]
}
10046efa:	46c0      	nop			@ (mov r8, r8)
10046efc:	46bd      	mov	sp, r7
10046efe:	b002      	add	sp, #8
10046f00:	bd80      	pop	{r7, pc}
10046f02:	46c0      	nop			@ (mov r8, r8)
10046f04:	fffffeff 	.word	0xfffffeff

10046f08 <LL_RADIO_SetAllTableDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAllTableDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
10046f08:	b580      	push	{r7, lr}
10046f0a:	b082      	sub	sp, #8
10046f0c:	af00      	add	r7, sp, #0
10046f0e:	6078      	str	r0, [r7, #4]
10046f10:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ALLTABLEREADY, value);
10046f12:	687b      	ldr	r3, [r7, #4]
10046f14:	685b      	ldr	r3, [r3, #4]
10046f16:	4a07      	ldr	r2, [pc, #28]	@ (10046f34 <LL_RADIO_SetAllTableDataReady+0x2c>)
10046f18:	401a      	ands	r2, r3
10046f1a:	683b      	ldr	r3, [r7, #0]
10046f1c:	0259      	lsls	r1, r3, #9
10046f1e:	2380      	movs	r3, #128	@ 0x80
10046f20:	009b      	lsls	r3, r3, #2
10046f22:	400b      	ands	r3, r1
10046f24:	431a      	orrs	r2, r3
10046f26:	687b      	ldr	r3, [r7, #4]
10046f28:	605a      	str	r2, [r3, #4]
}
10046f2a:	46c0      	nop			@ (mov r8, r8)
10046f2c:	46bd      	mov	sp, r7
10046f2e:	b002      	add	sp, #8
10046f30:	bd80      	pop	{r7, pc}
10046f32:	46c0      	nop			@ (mov r8, r8)
10046f34:	fffffdff 	.word	0xfffffdff

10046f38 <LL_RADIO_SetTransmissionDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
10046f38:	b580      	push	{r7, lr}
10046f3a:	b082      	sub	sp, #8
10046f3c:	af00      	add	r7, sp, #0
10046f3e:	6078      	str	r0, [r7, #4]
10046f40:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_TXDATAREADY, value);
10046f42:	687b      	ldr	r3, [r7, #4]
10046f44:	685b      	ldr	r3, [r3, #4]
10046f46:	4a07      	ldr	r2, [pc, #28]	@ (10046f64 <LL_RADIO_SetTransmissionDataReady+0x2c>)
10046f48:	401a      	ands	r2, r3
10046f4a:	683b      	ldr	r3, [r7, #0]
10046f4c:	0299      	lsls	r1, r3, #10
10046f4e:	2380      	movs	r3, #128	@ 0x80
10046f50:	00db      	lsls	r3, r3, #3
10046f52:	400b      	ands	r3, r1
10046f54:	431a      	orrs	r2, r3
10046f56:	687b      	ldr	r3, [r7, #4]
10046f58:	605a      	str	r2, [r3, #4]
}
10046f5a:	46c0      	nop			@ (mov r8, r8)
10046f5c:	46bd      	mov	sp, r7
10046f5e:	b002      	add	sp, #8
10046f60:	bd80      	pop	{r7, pc}
10046f62:	46c0      	nop			@ (mov r8, r8)
10046f64:	fffffbff 	.word	0xfffffbff

10046f68 <LL_RADIO_SetDataPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetDataPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
10046f68:	b580      	push	{r7, lr}
10046f6a:	b082      	sub	sp, #8
10046f6c:	af00      	add	r7, sp, #0
10046f6e:	6078      	str	r0, [r7, #4]
10046f70:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD2, TXRXPACK_WORD2_DATAPTR, value);
10046f72:	687b      	ldr	r3, [r7, #4]
10046f74:	689b      	ldr	r3, [r3, #8]
10046f76:	687b      	ldr	r3, [r7, #4]
10046f78:	683a      	ldr	r2, [r7, #0]
10046f7a:	609a      	str	r2, [r3, #8]
}
10046f7c:	46c0      	nop			@ (mov r8, r8)
10046f7e:	46bd      	mov	sp, r7
10046f80:	b002      	add	sp, #8
10046f82:	bd80      	pop	{r7, pc}

10046f84 <LL_RADIO_GetDataPointer>:
  * @rmtoll WORD2          DATAPTR       LL_RADIO_GetDataPointer
  * @param  p RADIO Instance
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetDataPointer(TXRXPACK_TypeDef *p)
{
10046f84:	b580      	push	{r7, lr}
10046f86:	b082      	sub	sp, #8
10046f88:	af00      	add	r7, sp, #0
10046f8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD2, TXRXPACK_WORD2_DATAPTR) >> TXRXPACK_WORD2_DATAPTR_Pos);
10046f8c:	687b      	ldr	r3, [r7, #4]
10046f8e:	689b      	ldr	r3, [r3, #8]
}
10046f90:	0018      	movs	r0, r3
10046f92:	46bd      	mov	sp, r7
10046f94:	b002      	add	sp, #8
10046f96:	bd80      	pop	{r7, pc}

10046f98 <LL_RADIO_SetTimer2Triggering>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer2Triggering(TXRXPACK_TypeDef *p, uint32_t value)
{
10046f98:	b580      	push	{r7, lr}
10046f9a:	b082      	sub	sp, #8
10046f9c:	af00      	add	r7, sp, #0
10046f9e:	6078      	str	r0, [r7, #4]
10046fa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2, value);
10046fa2:	687b      	ldr	r3, [r7, #4]
10046fa4:	68db      	ldr	r3, [r3, #12]
10046fa6:	0d1b      	lsrs	r3, r3, #20
10046fa8:	051a      	lsls	r2, r3, #20
10046faa:	683b      	ldr	r3, [r7, #0]
10046fac:	031b      	lsls	r3, r3, #12
10046fae:	0b1b      	lsrs	r3, r3, #12
10046fb0:	431a      	orrs	r2, r3
10046fb2:	687b      	ldr	r3, [r7, #4]
10046fb4:	60da      	str	r2, [r3, #12]
}
10046fb6:	46c0      	nop			@ (mov r8, r8)
10046fb8:	46bd      	mov	sp, r7
10046fba:	b002      	add	sp, #8
10046fbc:	bd80      	pop	{r7, pc}

10046fbe <LL_RADIO_Timer2_Enable>:
  * @rmtoll WORD3          TIMER2EN            LL_RADIO_Timer2_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Timer2_Enable(TXRXPACK_TypeDef *p)
{
10046fbe:	b580      	push	{r7, lr}
10046fc0:	b082      	sub	sp, #8
10046fc2:	af00      	add	r7, sp, #0
10046fc4:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2EN);
10046fc6:	687b      	ldr	r3, [r7, #4]
10046fc8:	68db      	ldr	r3, [r3, #12]
10046fca:	2280      	movs	r2, #128	@ 0x80
10046fcc:	0352      	lsls	r2, r2, #13
10046fce:	431a      	orrs	r2, r3
10046fd0:	687b      	ldr	r3, [r7, #4]
10046fd2:	60da      	str	r2, [r3, #12]
}
10046fd4:	46c0      	nop			@ (mov r8, r8)
10046fd6:	46bd      	mov	sp, r7
10046fd8:	b002      	add	sp, #8
10046fda:	bd80      	pop	{r7, pc}

10046fdc <LL_RADIO_SetTrigRcv>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigRcv(TXRXPACK_TypeDef *p, uint32_t value)
{
10046fdc:	b580      	push	{r7, lr}
10046fde:	b082      	sub	sp, #8
10046fe0:	af00      	add	r7, sp, #0
10046fe2:	6078      	str	r0, [r7, #4]
10046fe4:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGRCV, value);
10046fe6:	687b      	ldr	r3, [r7, #4]
10046fe8:	68db      	ldr	r3, [r3, #12]
10046fea:	4a07      	ldr	r2, [pc, #28]	@ (10047008 <LL_RADIO_SetTrigRcv+0x2c>)
10046fec:	401a      	ands	r2, r3
10046fee:	683b      	ldr	r3, [r7, #0]
10046ff0:	0599      	lsls	r1, r3, #22
10046ff2:	2380      	movs	r3, #128	@ 0x80
10046ff4:	03db      	lsls	r3, r3, #15
10046ff6:	400b      	ands	r3, r1
10046ff8:	431a      	orrs	r2, r3
10046ffa:	687b      	ldr	r3, [r7, #4]
10046ffc:	60da      	str	r2, [r3, #12]
}
10046ffe:	46c0      	nop			@ (mov r8, r8)
10047000:	46bd      	mov	sp, r7
10047002:	b002      	add	sp, #8
10047004:	bd80      	pop	{r7, pc}
10047006:	46c0      	nop			@ (mov r8, r8)
10047008:	ffbfffff 	.word	0xffbfffff

1004700c <LL_RADIO_SetTrigDone>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigDone(TXRXPACK_TypeDef *p, uint32_t value)
{
1004700c:	b580      	push	{r7, lr}
1004700e:	b082      	sub	sp, #8
10047010:	af00      	add	r7, sp, #0
10047012:	6078      	str	r0, [r7, #4]
10047014:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGDONE, value);
10047016:	687b      	ldr	r3, [r7, #4]
10047018:	68db      	ldr	r3, [r3, #12]
1004701a:	4a07      	ldr	r2, [pc, #28]	@ (10047038 <LL_RADIO_SetTrigDone+0x2c>)
1004701c:	401a      	ands	r2, r3
1004701e:	683b      	ldr	r3, [r7, #0]
10047020:	05d9      	lsls	r1, r3, #23
10047022:	2380      	movs	r3, #128	@ 0x80
10047024:	041b      	lsls	r3, r3, #16
10047026:	400b      	ands	r3, r1
10047028:	431a      	orrs	r2, r3
1004702a:	687b      	ldr	r3, [r7, #4]
1004702c:	60da      	str	r2, [r3, #12]
}
1004702e:	46c0      	nop			@ (mov r8, r8)
10047030:	46bd      	mov	sp, r7
10047032:	b002      	add	sp, #8
10047034:	bd80      	pop	{r7, pc}
10047036:	46c0      	nop			@ (mov r8, r8)
10047038:	ff7fffff 	.word	0xff7fffff

1004703c <LL_RADIO_SetIntTxOk>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetIntTxOk(TXRXPACK_TypeDef *p, uint32_t value)
{
1004703c:	b580      	push	{r7, lr}
1004703e:	b082      	sub	sp, #8
10047040:	af00      	add	r7, sp, #0
10047042:	6078      	str	r0, [r7, #4]
10047044:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTTXOK, value);
10047046:	687b      	ldr	r3, [r7, #4]
10047048:	68db      	ldr	r3, [r3, #12]
1004704a:	4a07      	ldr	r2, [pc, #28]	@ (10047068 <LL_RADIO_SetIntTxOk+0x2c>)
1004704c:	401a      	ands	r2, r3
1004704e:	683b      	ldr	r3, [r7, #0]
10047050:	0619      	lsls	r1, r3, #24
10047052:	2380      	movs	r3, #128	@ 0x80
10047054:	045b      	lsls	r3, r3, #17
10047056:	400b      	ands	r3, r1
10047058:	431a      	orrs	r2, r3
1004705a:	687b      	ldr	r3, [r7, #4]
1004705c:	60da      	str	r2, [r3, #12]
}
1004705e:	46c0      	nop			@ (mov r8, r8)
10047060:	46bd      	mov	sp, r7
10047062:	b002      	add	sp, #8
10047064:	bd80      	pop	{r7, pc}
10047066:	46c0      	nop			@ (mov r8, r8)
10047068:	feffffff 	.word	0xfeffffff

1004706c <LL_RADIO_IntDone_Enable>:
  * @rmtoll WORD3          INTDONE            LL_RADIO_IntDone_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntDone_Enable(TXRXPACK_TypeDef *p)
{
1004706c:	b580      	push	{r7, lr}
1004706e:	b082      	sub	sp, #8
10047070:	af00      	add	r7, sp, #0
10047072:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTDONE);
10047074:	687b      	ldr	r3, [r7, #4]
10047076:	68db      	ldr	r3, [r3, #12]
10047078:	2280      	movs	r2, #128	@ 0x80
1004707a:	0492      	lsls	r2, r2, #18
1004707c:	431a      	orrs	r2, r3
1004707e:	687b      	ldr	r3, [r7, #4]
10047080:	60da      	str	r2, [r3, #12]
}
10047082:	46c0      	nop			@ (mov r8, r8)
10047084:	46bd      	mov	sp, r7
10047086:	b002      	add	sp, #8
10047088:	bd80      	pop	{r7, pc}

1004708a <LL_RADIO_IntRcvTimeout_Enable>:
  * @rmtoll WORD3          INTRCVTIMEOUT            LL_RADIO_IntRcvTimeout_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvTimeout_Enable(TXRXPACK_TypeDef *p)
{
1004708a:	b580      	push	{r7, lr}
1004708c:	b082      	sub	sp, #8
1004708e:	af00      	add	r7, sp, #0
10047090:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVTIMEOUT);
10047092:	687b      	ldr	r3, [r7, #4]
10047094:	68db      	ldr	r3, [r3, #12]
10047096:	2280      	movs	r2, #128	@ 0x80
10047098:	04d2      	lsls	r2, r2, #19
1004709a:	431a      	orrs	r2, r3
1004709c:	687b      	ldr	r3, [r7, #4]
1004709e:	60da      	str	r2, [r3, #12]
}
100470a0:	46c0      	nop			@ (mov r8, r8)
100470a2:	46bd      	mov	sp, r7
100470a4:	b002      	add	sp, #8
100470a6:	bd80      	pop	{r7, pc}

100470a8 <LL_RADIO_IntRcvCRCErr_Enable>:
  * @rmtoll WORD3          INTRCVCRCERR            LL_RADIO_IntRcvCRCErr_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvCRCErr_Enable(TXRXPACK_TypeDef *p)
{
100470a8:	b580      	push	{r7, lr}
100470aa:	b082      	sub	sp, #8
100470ac:	af00      	add	r7, sp, #0
100470ae:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVCRCERR);
100470b0:	687b      	ldr	r3, [r7, #4]
100470b2:	68db      	ldr	r3, [r3, #12]
100470b4:	2280      	movs	r2, #128	@ 0x80
100470b6:	05d2      	lsls	r2, r2, #23
100470b8:	431a      	orrs	r2, r3
100470ba:	687b      	ldr	r3, [r7, #4]
100470bc:	60da      	str	r2, [r3, #12]
}
100470be:	46c0      	nop			@ (mov r8, r8)
100470c0:	46bd      	mov	sp, r7
100470c2:	b002      	add	sp, #8
100470c4:	bd80      	pop	{r7, pc}

100470c6 <LL_RADIO_IntRcvOk_Enable>:
  * @rmtoll WORD3          INTRCVOK            LL_RADIO_IntRcvOk_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvOk_Enable(TXRXPACK_TypeDef *p)
{
100470c6:	b580      	push	{r7, lr}
100470c8:	b082      	sub	sp, #8
100470ca:	af00      	add	r7, sp, #0
100470cc:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVOK);
100470ce:	687b      	ldr	r3, [r7, #4]
100470d0:	68db      	ldr	r3, [r3, #12]
100470d2:	2280      	movs	r2, #128	@ 0x80
100470d4:	0612      	lsls	r2, r2, #24
100470d6:	431a      	orrs	r2, r3
100470d8:	687b      	ldr	r3, [r7, #4]
100470da:	60da      	str	r2, [r3, #12]
}
100470dc:	46c0      	nop			@ (mov r8, r8)
100470de:	46bd      	mov	sp, r7
100470e0:	b002      	add	sp, #8
100470e2:	bd80      	pop	{r7, pc}

100470e4 <LL_RADIO_BlueSetInterrupt1RegRegister>:
  * @rmtoll INTERRUPT1REG          ALL       LL_RADIO_BlueSetInterrupt1RegRegister
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetInterrupt1RegRegister(uint32_t value)
{
100470e4:	b580      	push	{r7, lr}
100470e6:	b082      	sub	sp, #8
100470e8:	af00      	add	r7, sp, #0
100470ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->INTERRUPT1REG, BLUE_INTERRUPT1REG_ALL, value);
100470ec:	23c0      	movs	r3, #192	@ 0xc0
100470ee:	05db      	lsls	r3, r3, #23
100470f0:	685b      	ldr	r3, [r3, #4]
100470f2:	4a07      	ldr	r2, [pc, #28]	@ (10047110 <LL_RADIO_BlueSetInterrupt1RegRegister+0x2c>)
100470f4:	4013      	ands	r3, r2
100470f6:	0019      	movs	r1, r3
100470f8:	687b      	ldr	r3, [r7, #4]
100470fa:	4a06      	ldr	r2, [pc, #24]	@ (10047114 <LL_RADIO_BlueSetInterrupt1RegRegister+0x30>)
100470fc:	401a      	ands	r2, r3
100470fe:	23c0      	movs	r3, #192	@ 0xc0
10047100:	05db      	lsls	r3, r3, #23
10047102:	430a      	orrs	r2, r1
10047104:	605a      	str	r2, [r3, #4]
}
10047106:	46c0      	nop			@ (mov r8, r8)
10047108:	46bd      	mov	sp, r7
1004710a:	b002      	add	sp, #8
1004710c:	bd80      	pop	{r7, pc}
1004710e:	46c0      	nop			@ (mov r8, r8)
10047110:	0002004f 	.word	0x0002004f
10047114:	fffdffb0 	.word	0xfffdffb0

10047118 <LL_RADIO_BlueSetClearSemaphoreRequest>:
  * @rmtoll CMDREG          CLEARSEMAREQ       LL_RADIO_BlueSetClearSemaphoreRequest
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetClearSemaphoreRequest(uint32_t value)
{
10047118:	b580      	push	{r7, lr}
1004711a:	b082      	sub	sp, #8
1004711c:	af00      	add	r7, sp, #0
1004711e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->CMDREG, BLUE_CMDREG_CLEARSEMAREQ, value);
10047120:	23c0      	movs	r3, #192	@ 0xc0
10047122:	05db      	lsls	r3, r3, #23
10047124:	699b      	ldr	r3, [r3, #24]
10047126:	2208      	movs	r2, #8
10047128:	4393      	bics	r3, r2
1004712a:	0019      	movs	r1, r3
1004712c:	687b      	ldr	r3, [r7, #4]
1004712e:	00db      	lsls	r3, r3, #3
10047130:	2208      	movs	r2, #8
10047132:	401a      	ands	r2, r3
10047134:	23c0      	movs	r3, #192	@ 0xc0
10047136:	05db      	lsls	r3, r3, #23
10047138:	430a      	orrs	r2, r1
1004713a:	619a      	str	r2, [r3, #24]
}
1004713c:	46c0      	nop			@ (mov r8, r8)
1004713e:	46bd      	mov	sp, r7
10047140:	b002      	add	sp, #8
10047142:	bd80      	pop	{r7, pc}

10047144 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>:
 */
/* Calculate the Timeout to be programmed on Timer2 to obtain a give T_IFS
 * when the next packet is a transmit one
*/
uint32_t BLEPLAT_CNTR_GetTimer2TimeoutForIfs(uint32_t T_Ifs, BLEPLAT_CNTR_Transaction Transaction, uint8_t Cal_Enabled)
{
10047144:	b580      	push	{r7, lr}
10047146:	b088      	sub	sp, #32
10047148:	af00      	add	r7, sp, #0
1004714a:	6078      	str	r0, [r7, #4]
1004714c:	0008      	movs	r0, r1
1004714e:	0011      	movs	r1, r2
10047150:	1cfb      	adds	r3, r7, #3
10047152:	1c02      	adds	r2, r0, #0
10047154:	701a      	strb	r2, [r3, #0]
10047156:	1cbb      	adds	r3, r7, #2
10047158:	1c0a      	adds	r2, r1, #0
1004715a:	701a      	strb	r2, [r3, #0]
    uint32_t Timeout = T_Ifs;
1004715c:	687b      	ldr	r3, [r7, #4]
1004715e:	617b      	str	r3, [r7, #20]
    uint32_t Tx_Delay_Comp;
    uint32_t Init_Delay;

    if(Transaction == BLEPLAT_CNTR_RxTx)
10047160:	1cfb      	adds	r3, r7, #3
10047162:	781b      	ldrb	r3, [r3, #0]
10047164:	2b01      	cmp	r3, #1
10047166:	d105      	bne.n	10047174 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x30>
         * scanning
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
#else
        const int32_t Adjust_Value = 6;
10047168:	2306      	movs	r3, #6
1004716a:	60bb      	str	r3, [r7, #8]
#endif
        Tx_Delay_Comp = (TX_DELAY_START>>3) + Adjust_Value;
1004716c:	68bb      	ldr	r3, [r7, #8]
1004716e:	3302      	adds	r3, #2
10047170:	61fb      	str	r3, [r7, #28]
10047172:	e015      	b.n	100471a0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxRx)
10047174:	1cfb      	adds	r3, r7, #3
10047176:	781b      	ldrb	r3, [r3, #0]
10047178:	2b00      	cmp	r3, #0
1004717a:	d105      	bne.n	10047188 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x44>
         * AGC behavior.
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
#else
        const int32_t Adjust_Value = 4;
1004717c:	2304      	movs	r3, #4
1004717e:	60fb      	str	r3, [r7, #12]
#endif
        Tx_Delay_Comp = (TX_DELAY_END>>3) + Adjust_Value;
10047180:	68fb      	ldr	r3, [r7, #12]
10047182:	3302      	adds	r3, #2
10047184:	61fb      	str	r3, [r7, #28]
10047186:	e00b      	b.n	100471a0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxTx)
10047188:	1cfb      	adds	r3, r7, #3
1004718a:	781b      	ldrb	r3, [r3, #0]
1004718c:	2b02      	cmp	r3, #2
1004718e:	d105      	bne.n	1004719c <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x58>
         * T_IFS measurements in extended advertising (AUX_CHAIN_IND)
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 1;
#else
        const int32_t Adjust_Value = 2;
10047190:	2302      	movs	r3, #2
10047192:	613b      	str	r3, [r7, #16]
#endif
        Tx_Delay_Comp = ((TX_DELAY_START + TX_DELAY_END)>>3) + Adjust_Value;
10047194:	693b      	ldr	r3, [r7, #16]
10047196:	3304      	adds	r3, #4
10047198:	61fb      	str	r3, [r7, #28]
1004719a:	e001      	b.n	100471a0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else
    {
        Tx_Delay_Comp = 0;
1004719c:	2300      	movs	r3, #0
1004719e:	61fb      	str	r3, [r7, #28]
    }

    if((Transaction == BLEPLAT_CNTR_RxTx) || (Transaction == BLEPLAT_CNTR_TxTx))
100471a0:	1cfb      	adds	r3, r7, #3
100471a2:	781b      	ldrb	r3, [r3, #0]
100471a4:	2b01      	cmp	r3, #1
100471a6:	d003      	beq.n	100471b0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x6c>
100471a8:	1cfb      	adds	r3, r7, #3
100471aa:	781b      	ldrb	r3, [r3, #0]
100471ac:	2b02      	cmp	r3, #2
100471ae:	d109      	bne.n	100471c4 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x80>
    {
        if(Cal_Enabled == TRUE)
100471b0:	1cbb      	adds	r3, r7, #2
100471b2:	781b      	ldrb	r3, [r3, #0]
100471b4:	2b01      	cmp	r3, #1
100471b6:	d102      	bne.n	100471be <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x7a>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_TX_DELAY_CAL;
100471b8:	239b      	movs	r3, #155	@ 0x9b
100471ba:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
100471bc:	e013      	b.n	100471e6 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_TX_DELAY_NO_CAL;
100471be:	233d      	movs	r3, #61	@ 0x3d
100471c0:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
100471c2:	e010      	b.n	100471e6 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
    }
    else if((Transaction == BLEPLAT_CNTR_TxRx) || (Transaction == BLEPLAT_CNTR_RxRx))
100471c4:	1cfb      	adds	r3, r7, #3
100471c6:	781b      	ldrb	r3, [r3, #0]
100471c8:	2b00      	cmp	r3, #0
100471ca:	d003      	beq.n	100471d4 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x90>
100471cc:	1cfb      	adds	r3, r7, #3
100471ce:	781b      	ldrb	r3, [r3, #0]
100471d0:	2b03      	cmp	r3, #3
100471d2:	d108      	bne.n	100471e6 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
         * The current calculation of Timer2 for TX-RX events is slightly conservative
         * since it soes not consider the delay from digital modulator to antenna and from
         * antenna to digital demodulator. As a consequence the demodulator is turned on
         * a few microseconds earlier than stricty needed.
         */
        if(Cal_Enabled == TRUE)
100471d4:	1cbb      	adds	r3, r7, #2
100471d6:	781b      	ldrb	r3, [r3, #0]
100471d8:	2b01      	cmp	r3, #1
100471da:	d102      	bne.n	100471e2 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x9e>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_RX_DELAY_CAL;
100471dc:	2399      	movs	r3, #153	@ 0x99
100471de:	61bb      	str	r3, [r7, #24]
100471e0:	e001      	b.n	100471e6 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_RX_DELAY_NO_CAL;
100471e2:	233b      	movs	r3, #59	@ 0x3b
100471e4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
    }

    Timeout -= (Init_Delay + Tx_Delay_Comp);
100471e6:	69ba      	ldr	r2, [r7, #24]
100471e8:	69fb      	ldr	r3, [r7, #28]
100471ea:	18d3      	adds	r3, r2, r3
100471ec:	697a      	ldr	r2, [r7, #20]
100471ee:	1ad3      	subs	r3, r2, r3
100471f0:	617b      	str	r3, [r7, #20]

    return Timeout;
100471f2:	697b      	ldr	r3, [r7, #20]
}
100471f4:	0018      	movs	r0, r3
100471f6:	46bd      	mov	sp, r7
100471f8:	b008      	add	sp, #32
100471fa:	bd80      	pop	{r7, pc}

100471fc <BLEPLAT_CNTR_ClearInterrupt>:

void BLEPLAT_CNTR_ClearInterrupt(uint32_t x)
{
100471fc:	b580      	push	{r7, lr}
100471fe:	b082      	sub	sp, #8
10047200:	af00      	add	r7, sp, #0
10047202:	6078      	str	r0, [r7, #4]
    LL_RADIO_BlueSetInterrupt1RegRegister(x);
10047204:	687b      	ldr	r3, [r7, #4]
10047206:	0018      	movs	r0, r3
10047208:	f7ff ff6c 	bl	100470e4 <LL_RADIO_BlueSetInterrupt1RegRegister>
}
1004720c:	46c0      	nop			@ (mov r8, r8)
1004720e:	46bd      	mov	sp, r7
10047210:	b002      	add	sp, #8
10047212:	bd80      	pop	{r7, pc}

10047214 <BLEPLAT_CNTR_ClearSemareq>:

void BLEPLAT_CNTR_ClearSemareq(void)
{
10047214:	b580      	push	{r7, lr}
10047216:	af00      	add	r7, sp, #0
    LL_RADIO_BlueSetClearSemaphoreRequest(0x1U);
10047218:	2001      	movs	r0, #1
1004721a:	f7ff ff7d 	bl	10047118 <LL_RADIO_BlueSetClearSemaphoreRequest>
}
1004721e:	46c0      	nop			@ (mov r8, r8)
10047220:	46bd      	mov	sp, r7
10047222:	bd80      	pop	{r7, pc}

10047224 <BLEPLAT_CNTR_GlobDisableBlue>:
{
    return LL_RADIO_BlueGetTimerCapture();
}

void BLEPLAT_CNTR_GlobDisableBlue()
{
10047224:	b580      	push	{r7, lr}
10047226:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalDisableBlue();
10047228:	f7ff f884 	bl	10046334 <LL_RADIO_GlobalDisableBlue>
}
1004722c:	46c0      	nop			@ (mov r8, r8)
1004722e:	46bd      	mov	sp, r7
10047230:	bd80      	pop	{r7, pc}

10047232 <BLEPLAT_CNTR_GlobEnableBlue>:

void BLEPLAT_CNTR_GlobEnableBlue()
{
10047232:	b580      	push	{r7, lr}
10047234:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalEnableBlue();
10047236:	f7ff f86f 	bl	10046318 <LL_RADIO_GlobalEnableBlue>
}
1004723a:	46c0      	nop			@ (mov r8, r8)
1004723c:	46bd      	mov	sp, r7
1004723e:	bd80      	pop	{r7, pc}

10047240 <BLEPLAT_CNTR_GlobWriteSlot>:
{
    LL_RADIO_SetReceivedNoCalDelayChk((uint32_t) x);
}

void BLEPLAT_CNTR_GlobWriteSlot(uint8_t slotNo)
{
10047240:	b580      	push	{r7, lr}
10047242:	b082      	sub	sp, #8
10047244:	af00      	add	r7, sp, #0
10047246:	0002      	movs	r2, r0
10047248:	1dfb      	adds	r3, r7, #7
1004724a:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetCurrentConnectionMachineNumber((uint32_t) slotNo);
1004724c:	1dfb      	adds	r3, r7, #7
1004724e:	781b      	ldrb	r3, [r3, #0]
10047250:	0018      	movs	r0, r3
10047252:	f7ff f84b 	bl	100462ec <LL_RADIO_SetCurrentConnectionMachineNumber>
}
10047256:	46c0      	nop			@ (mov r8, r8)
10047258:	46bd      	mov	sp, r7
1004725a:	b002      	add	sp, #8
1004725c:	bd80      	pop	{r7, pc}
	...

10047260 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>:
{
    LL_RADIO_SetTxDelayEnd((uint32_t) x);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusAnyHwError(uint32_t x)
{
10047260:	b580      	push	{r7, lr}
10047262:	b082      	sub	sp, #8
10047264:	af00      	add	r7, sp, #0
10047266:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & ANY_HW_ERROR_INTERRUPT_Msk);
10047268:	687b      	ldr	r3, [r7, #4]
1004726a:	4a03      	ldr	r2, [pc, #12]	@ (10047278 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError+0x18>)
1004726c:	4013      	ands	r3, r2
}
1004726e:	0018      	movs	r0, r3
10047270:	46bd      	mov	sp, r7
10047272:	b002      	add	sp, #8
10047274:	bd80      	pop	{r7, pc}
10047276:	46c0      	nop			@ (mov r8, r8)
10047278:	00c9df30 	.word	0x00c9df30

1004727c <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>:
{
    return (uint32_t)(x & BLUE_STATUSREG_RXOVERFLOWERROR_Msk);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitAct2Error(uint32_t x)
{
1004727c:	b580      	push	{r7, lr}
1004727e:	b082      	sub	sp, #8
10047280:	af00      	add	r7, sp, #0
10047282:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_ACTIVE2ERROR_Msk);
10047284:	687a      	ldr	r2, [r7, #4]
10047286:	2380      	movs	r3, #128	@ 0x80
10047288:	03db      	lsls	r3, r3, #15
1004728a:	4013      	ands	r3, r2
}
1004728c:	0018      	movs	r0, r3
1004728e:	46bd      	mov	sp, r7
10047290:	b002      	add	sp, #8
10047292:	bd80      	pop	{r7, pc}

10047294 <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>:

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun(uint32_t x)
{
10047294:	b580      	push	{r7, lr}
10047296:	b082      	sub	sp, #8
10047298:	af00      	add	r7, sp, #0
1004729a:	6078      	str	r0, [r7, #4]
    return 0;
1004729c:	2300      	movs	r3, #0
}
1004729e:	0018      	movs	r0, r3
100472a0:	46bd      	mov	sp, r7
100472a2:	b002      	add	sp, #8
100472a4:	bd80      	pop	{r7, pc}

100472a6 <BLEPLAT_CNTR_IntGetIntStatusCrcErr>:

#if defined(BLUE_STATUSREG_RCVCRCERR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusCrcErr(uint32_t x)
{
100472a6:	b580      	push	{r7, lr}
100472a8:	b082      	sub	sp, #8
100472aa:	af00      	add	r7, sp, #0
100472ac:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVCRCERR_Msk);
100472ae:	687a      	ldr	r2, [r7, #4]
100472b0:	2380      	movs	r3, #128	@ 0x80
100472b2:	05db      	lsls	r3, r3, #23
100472b4:	4013      	ands	r3, r2
}
100472b6:	0018      	movs	r0, r3
100472b8:	46bd      	mov	sp, r7
100472ba:	b002      	add	sp, #8
100472bc:	bd80      	pop	{r7, pc}

100472be <BLEPLAT_CNTR_IntGetIntStatusDone>:
#endif

#if defined(BLUE_STATUSREG_DONE_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusDone(uint32_t x)
{
100472be:	b580      	push	{r7, lr}
100472c0:	b082      	sub	sp, #8
100472c2:	af00      	add	r7, sp, #0
100472c4:	6078      	str	r0, [r7, #4]
	return (uint32_t)(x & BLUE_STATUSREG_DONE_Msk);
100472c6:	687a      	ldr	r2, [r7, #4]
100472c8:	2380      	movs	r3, #128	@ 0x80
100472ca:	049b      	lsls	r3, r3, #18
100472cc:	4013      	ands	r3, r2
}
100472ce:	0018      	movs	r0, r3
100472d0:	46bd      	mov	sp, r7
100472d2:	b002      	add	sp, #8
100472d4:	bd80      	pop	{r7, pc}

100472d6 <BLEPLAT_CNTR_IntGetIntStatusEncErr>:
#endif

#if defined(BLUE_STATUSREG_ENCERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusEncErr(uint32_t x)
{
100472d6:	b580      	push	{r7, lr}
100472d8:	b082      	sub	sp, #8
100472da:	af00      	add	r7, sp, #0
100472dc:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_ENCERROR_Msk);
100472de:	687a      	ldr	r2, [r7, #4]
100472e0:	2380      	movs	r3, #128	@ 0x80
100472e2:	019b      	lsls	r3, r3, #6
100472e4:	4013      	ands	r3, r2
}
100472e6:	0018      	movs	r0, r3
100472e8:	46bd      	mov	sp, r7
100472ea:	b002      	add	sp, #8
100472ec:	bd80      	pop	{r7, pc}

100472ee <BLEPLAT_CNTR_IntGetIntStatusLenErr>:
#endif

#if defined(BLUE_STATUSREG_RCVLENGTHERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusLenErr(uint32_t x)
{
100472ee:	b580      	push	{r7, lr}
100472f0:	b082      	sub	sp, #8
100472f2:	af00      	add	r7, sp, #0
100472f4:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVLENGTHERROR_Msk);
100472f6:	687a      	ldr	r2, [r7, #4]
100472f8:	2380      	movs	r3, #128	@ 0x80
100472fa:	02db      	lsls	r3, r3, #11
100472fc:	4013      	ands	r3, r2
}
100472fe:	0018      	movs	r0, r3
10047300:	46bd      	mov	sp, r7
10047302:	b002      	add	sp, #8
10047304:	bd80      	pop	{r7, pc}

10047306 <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>:
#endif

#if defined(BLUE_STATUSREG_NOACTIVELERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusNoactiveError(uint32_t x)
{
10047306:	b580      	push	{r7, lr}
10047308:	b082      	sub	sp, #8
1004730a:	af00      	add	r7, sp, #0
1004730c:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_NOACTIVELERROR_Msk);
1004730e:	687a      	ldr	r2, [r7, #4]
10047310:	2380      	movs	r3, #128	@ 0x80
10047312:	025b      	lsls	r3, r3, #9
10047314:	4013      	ands	r3, r2
}
10047316:	0018      	movs	r0, r3
10047318:	46bd      	mov	sp, r7
1004731a:	b002      	add	sp, #8
1004731c:	bd80      	pop	{r7, pc}

1004731e <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>:
#endif

#if defined(BLUE_STATUSREG_TXRXSKIP_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxRxSkip(uint32_t x)
{
1004731e:	b580      	push	{r7, lr}
10047320:	b082      	sub	sp, #8
10047322:	af00      	add	r7, sp, #0
10047324:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXRXSKIP_Msk);
10047326:	687a      	ldr	r2, [r7, #4]
10047328:	2380      	movs	r3, #128	@ 0x80
1004732a:	039b      	lsls	r3, r3, #14
1004732c:	4013      	ands	r3, r2
}
1004732e:	0018      	movs	r0, r3
10047330:	46bd      	mov	sp, r7
10047332:	b002      	add	sp, #8
10047334:	bd80      	pop	{r7, pc}

10047336 <BLEPLAT_CNTR_IntGetIntStatusTxError1>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_1_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError1(uint32_t x)
{
10047336:	b580      	push	{r7, lr}
10047338:	b082      	sub	sp, #8
1004733a:	af00      	add	r7, sp, #0
1004733c:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_1_Msk);
1004733e:	687a      	ldr	r2, [r7, #4]
10047340:	2380      	movs	r3, #128	@ 0x80
10047342:	009b      	lsls	r3, r3, #2
10047344:	4013      	ands	r3, r2
}
10047346:	0018      	movs	r0, r3
10047348:	46bd      	mov	sp, r7
1004734a:	b002      	add	sp, #8
1004734c:	bd80      	pop	{r7, pc}

1004734e <BLEPLAT_CNTR_IntGetIntStatusTxError3>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_3_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError3(uint32_t x)
{
1004734e:	b580      	push	{r7, lr}
10047350:	b082      	sub	sp, #8
10047352:	af00      	add	r7, sp, #0
10047354:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_3_Msk);
10047356:	687a      	ldr	r2, [r7, #4]
10047358:	2380      	movs	r3, #128	@ 0x80
1004735a:	011b      	lsls	r3, r3, #4
1004735c:	4013      	ands	r3, r2
}
1004735e:	0018      	movs	r0, r3
10047360:	46bd      	mov	sp, r7
10047362:	b002      	add	sp, #8
10047364:	bd80      	pop	{r7, pc}

10047366 <BLEPLAT_CNTR_IntGetIntStatusRxOk>:
#endif

#if defined(BLUE_STATUSREG_RCVOK_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusRxOk(uint32_t x)
{
10047366:	b580      	push	{r7, lr}
10047368:	b082      	sub	sp, #8
1004736a:	af00      	add	r7, sp, #0
1004736c:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVOK_Msk);
1004736e:	687b      	ldr	r3, [r7, #4]
10047370:	0fdb      	lsrs	r3, r3, #31
10047372:	07db      	lsls	r3, r3, #31
}
10047374:	0018      	movs	r0, r3
10047376:	46bd      	mov	sp, r7
10047378:	b002      	add	sp, #8
1004737a:	bd80      	pop	{r7, pc}

1004737c <BLEPLAT_CNTR_IntGetIntStatusTimeout>:
#endif

#if defined(BLUE_STATUSREG_RCVTIMEOUT_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTimeout(uint32_t x)
{
1004737c:	b580      	push	{r7, lr}
1004737e:	b082      	sub	sp, #8
10047380:	af00      	add	r7, sp, #0
10047382:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVTIMEOUT_Msk);
10047384:	687a      	ldr	r2, [r7, #4]
10047386:	2380      	movs	r3, #128	@ 0x80
10047388:	04db      	lsls	r3, r3, #19
1004738a:	4013      	ands	r3, r2
}
1004738c:	0018      	movs	r0, r3
1004738e:	46bd      	mov	sp, r7
10047390:	b002      	add	sp, #8
10047392:	bd80      	pop	{r7, pc}

10047394 <BLEPLAT_CNTR_IntGetIntStatusTxDone>:
}
#endif

#if defined(BLUE_STATUSREG_PREVTRANSMIT_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxDone(uint32_t x)
{
10047394:	b580      	push	{r7, lr}
10047396:	b082      	sub	sp, #8
10047398:	af00      	add	r7, sp, #0
1004739a:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_PREVTRANSMIT_Msk);
1004739c:	687b      	ldr	r3, [r7, #4]
1004739e:	2240      	movs	r2, #64	@ 0x40
100473a0:	4013      	ands	r3, r2
}
100473a2:	0018      	movs	r0, r3
100473a4:	46bd      	mov	sp, r7
100473a6:	b002      	add	sp, #8
100473a8:	bd80      	pop	{r7, pc}

100473aa <BLEPLAT_CNTR_IntGetIntStatusTxOk>:
#endif

#if defined(BLUE_STATUSREG_TXOK_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxOk(uint32_t x)
{
100473aa:	b580      	push	{r7, lr}
100473ac:	b082      	sub	sp, #8
100473ae:	af00      	add	r7, sp, #0
100473b0:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXOK_Msk);
100473b2:	687a      	ldr	r2, [r7, #4]
100473b4:	2380      	movs	r3, #128	@ 0x80
100473b6:	045b      	lsls	r3, r3, #17
100473b8:	4013      	ands	r3, r2
}
100473ba:	0018      	movs	r0, r3
100473bc:	46bd      	mov	sp, r7
100473be:	b002      	add	sp, #8
100473c0:	bd80      	pop	{r7, pc}

100473c2 <BLEPLAT_CNTR_PacketClrCteSamplingEn>:
{
    LL_RADIO_SetCRCInitializationSelector((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
}

void BLEPLAT_CNTR_PacketClrCteSamplingEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100473c2:	b580      	push	{r7, lr}
100473c4:	b082      	sub	sp, #8
100473c6:	af00      	add	r7, sp, #0
100473c8:	6078      	str	r0, [r7, #4]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEAndSamplingEnable((TXRXPACK_TypeDef*)packetP, 0x0);
100473ca:	687b      	ldr	r3, [r7, #4]
100473cc:	2100      	movs	r1, #0
100473ce:	0018      	movs	r0, r3
100473d0:	f7ff fd17 	bl	10046e02 <LL_RADIO_SetCTEAndSamplingEnable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
100473d4:	46c0      	nop			@ (mov r8, r8)
100473d6:	46bd      	mov	sp, r7
100473d8:	b002      	add	sp, #8
100473da:	bd80      	pop	{r7, pc}

100473dc <BLEPLAT_CNTR_PacketClrIncChan>:

void BLEPLAT_CNTR_PacketClrIncChan(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100473dc:	b580      	push	{r7, lr}
100473de:	b082      	sub	sp, #8
100473e0:	af00      	add	r7, sp, #0
100473e2:	6078      	str	r0, [r7, #4]
    LL_RADIO_IncrementerChannel_Disable((TXRXPACK_TypeDef*)packetP);
100473e4:	687b      	ldr	r3, [r7, #4]
100473e6:	0018      	movs	r0, r3
100473e8:	f7ff fd66 	bl	10046eb8 <LL_RADIO_IncrementerChannel_Disable>
}
100473ec:	46c0      	nop			@ (mov r8, r8)
100473ee:	46bd      	mov	sp, r7
100473f0:	b002      	add	sp, #8
100473f2:	bd80      	pop	{r7, pc}

100473f4 <BLEPLAT_CNTR_PacketClrPllTrig>:

void BLEPLAT_CNTR_PacketClrPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100473f4:	b580      	push	{r7, lr}
100473f6:	b082      	sub	sp, #8
100473f8:	af00      	add	r7, sp, #0
100473fa:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
100473fc:	687b      	ldr	r3, [r7, #4]
100473fe:	2100      	movs	r1, #0
10047400:	0018      	movs	r0, r3
10047402:	f7ff fcd5 	bl	10046db0 <LL_RADIO_SetCalibrationRequest>
}
10047406:	46c0      	nop			@ (mov r8, r8)
10047408:	46bd      	mov	sp, r7
1004740a:	b002      	add	sp, #8
1004740c:	bd80      	pop	{r7, pc}

1004740e <BLEPLAT_CNTR_PacketGetDataPtr>:
#endif

}

uint8_t* BLEPLAT_CNTR_PacketGetDataPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004740e:	b580      	push	{r7, lr}
10047410:	b082      	sub	sp, #8
10047412:	af00      	add	r7, sp, #0
10047414:	6078      	str	r0, [r7, #4]
    return (uint8_t*)CONV_ADR(LL_RADIO_GetDataPointer((TXRXPACK_TypeDef*)packetP));
10047416:	687b      	ldr	r3, [r7, #4]
10047418:	0018      	movs	r0, r3
1004741a:	f7ff fdb3 	bl	10046f84 <LL_RADIO_GetDataPointer>
1004741e:	0003      	movs	r3, r0
}
10047420:	0018      	movs	r0, r3
10047422:	46bd      	mov	sp, r7
10047424:	b002      	add	sp, #8
10047426:	bd80      	pop	{r7, pc}

10047428 <BLEPLAT_CNTR_PacketInitTo0>:

void BLEPLAT_CNTR_PacketInitTo0(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10047428:	b580      	push	{r7, lr}
1004742a:	b082      	sub	sp, #8
1004742c:	af00      	add	r7, sp, #0
1004742e:	6078      	str	r0, [r7, #4]
    memset((void*)packetP, 0, sizeof(TXRXPACK_WORD_TypeDef));
10047430:	687b      	ldr	r3, [r7, #4]
10047432:	2210      	movs	r2, #16
10047434:	2100      	movs	r1, #0
10047436:	0018      	movs	r0, r3
10047438:	f01f ff90 	bl	1006735c <memset>
}
1004743c:	46c0      	nop			@ (mov r8, r8)
1004743e:	46bd      	mov	sp, r7
10047440:	b002      	add	sp, #8
10047442:	bd80      	pop	{r7, pc}

10047444 <BLEPLAT_CNTR_PacketSetAdvPduFormat>:

void BLEPLAT_CNTR_PacketSetAdvPduFormat(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10047444:	b580      	push	{r7, lr}
10047446:	b082      	sub	sp, #8
10047448:	af00      	add	r7, sp, #0
1004744a:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
1004744c:	687b      	ldr	r3, [r7, #4]
1004744e:	2101      	movs	r1, #1
10047450:	0018      	movs	r0, r3
10047452:	f7ff fd00 	bl	10046e56 <LL_RADIO_SetAdvertise>
}
10047456:	46c0      	nop			@ (mov r8, r8)
10047458:	46bd      	mov	sp, r7
1004745a:	b002      	add	sp, #8
1004745c:	bd80      	pop	{r7, pc}

1004745e <BLEPLAT_CNTR_PacketSetCrcinitSel>:

void BLEPLAT_CNTR_PacketSetCrcinitSel(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004745e:	b580      	push	{r7, lr}
10047460:	b082      	sub	sp, #8
10047462:	af00      	add	r7, sp, #0
10047464:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCRCInitializationSelector((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10047466:	687b      	ldr	r3, [r7, #4]
10047468:	2101      	movs	r1, #1
1004746a:	0018      	movs	r0, r3
1004746c:	f7ff fcde 	bl	10046e2c <LL_RADIO_SetCRCInitializationSelector>
}
10047470:	46c0      	nop			@ (mov r8, r8)
10047472:	46bd      	mov	sp, r7
10047474:	b002      	add	sp, #8
10047476:	bd80      	pop	{r7, pc}

10047478 <BLEPLAT_CNTR_PacketSetCteSamplingEn>:

void BLEPLAT_CNTR_PacketSetCteSamplingEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10047478:	b580      	push	{r7, lr}
1004747a:	b082      	sub	sp, #8
1004747c:	af00      	add	r7, sp, #0
1004747e:	6078      	str	r0, [r7, #4]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEAndSamplingEnable((TXRXPACK_TypeDef*)packetP, 0x01);
10047480:	687b      	ldr	r3, [r7, #4]
10047482:	2101      	movs	r1, #1
10047484:	0018      	movs	r0, r3
10047486:	f7ff fcbc 	bl	10046e02 <LL_RADIO_SetCTEAndSamplingEnable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
1004748a:	46c0      	nop			@ (mov r8, r8)
1004748c:	46bd      	mov	sp, r7
1004748e:	b002      	add	sp, #8
10047490:	bd80      	pop	{r7, pc}

10047492 <BLEPLAT_CNTR_PacketSetDataPtr>:
{
     LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
}

void BLEPLAT_CNTR_PacketSetDataPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, void* dataP)
{
10047492:	b580      	push	{r7, lr}
10047494:	b082      	sub	sp, #8
10047496:	af00      	add	r7, sp, #0
10047498:	6078      	str	r0, [r7, #4]
1004749a:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetDataPointer((TXRXPACK_TypeDef*)packetP, BLUE_DATA_PTR_CAST(dataP));
1004749c:	683a      	ldr	r2, [r7, #0]
1004749e:	687b      	ldr	r3, [r7, #4]
100474a0:	0011      	movs	r1, r2
100474a2:	0018      	movs	r0, r3
100474a4:	f7ff fd60 	bl	10046f68 <LL_RADIO_SetDataPointer>
}
100474a8:	46c0      	nop			@ (mov r8, r8)
100474aa:	46bd      	mov	sp, r7
100474ac:	b002      	add	sp, #8
100474ae:	bd80      	pop	{r7, pc}

100474b0 <BLEPLAT_CNTR_PacketSetIncChan>:

void BLEPLAT_CNTR_PacketSetIncChan(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100474b0:	b580      	push	{r7, lr}
100474b2:	b082      	sub	sp, #8
100474b4:	af00      	add	r7, sp, #0
100474b6:	6078      	str	r0, [r7, #4]
    LL_RADIO_IncrementerChannel_Enable((TXRXPACK_TypeDef*)packetP);
100474b8:	687b      	ldr	r3, [r7, #4]
100474ba:	0018      	movs	r0, r3
100474bc:	f7ff fcee 	bl	10046e9c <LL_RADIO_IncrementerChannel_Enable>
}
100474c0:	46c0      	nop			@ (mov r8, r8)
100474c2:	46bd      	mov	sp, r7
100474c4:	b002      	add	sp, #8
100474c6:	bd80      	pop	{r7, pc}

100474c8 <BLEPLAT_CNTR_PacketSetIntCrcErr>:

void BLEPLAT_CNTR_PacketSetIntCrcErr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100474c8:	b580      	push	{r7, lr}
100474ca:	b082      	sub	sp, #8
100474cc:	af00      	add	r7, sp, #0
100474ce:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvCRCErr_Enable((TXRXPACK_TypeDef*)packetP);
100474d0:	687b      	ldr	r3, [r7, #4]
100474d2:	0018      	movs	r0, r3
100474d4:	f7ff fde8 	bl	100470a8 <LL_RADIO_IntRcvCRCErr_Enable>
}
100474d8:	46c0      	nop			@ (mov r8, r8)
100474da:	46bd      	mov	sp, r7
100474dc:	b002      	add	sp, #8
100474de:	bd80      	pop	{r7, pc}

100474e0 <BLEPLAT_CNTR_PacketSetIntDone>:

void BLEPLAT_CNTR_PacketSetIntDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100474e0:	b580      	push	{r7, lr}
100474e2:	b082      	sub	sp, #8
100474e4:	af00      	add	r7, sp, #0
100474e6:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntDone_Enable((TXRXPACK_TypeDef*)packetP);
100474e8:	687b      	ldr	r3, [r7, #4]
100474ea:	0018      	movs	r0, r3
100474ec:	f7ff fdbe 	bl	1004706c <LL_RADIO_IntDone_Enable>
}
100474f0:	46c0      	nop			@ (mov r8, r8)
100474f2:	46bd      	mov	sp, r7
100474f4:	b002      	add	sp, #8
100474f6:	bd80      	pop	{r7, pc}

100474f8 <BLEPLAT_CNTR_PacketSetIntRcvOk>:

void BLEPLAT_CNTR_PacketSetIntRcvOk(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100474f8:	b580      	push	{r7, lr}
100474fa:	b082      	sub	sp, #8
100474fc:	af00      	add	r7, sp, #0
100474fe:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvOk_Enable((TXRXPACK_TypeDef*)packetP);
10047500:	687b      	ldr	r3, [r7, #4]
10047502:	0018      	movs	r0, r3
10047504:	f7ff fddf 	bl	100470c6 <LL_RADIO_IntRcvOk_Enable>
}
10047508:	46c0      	nop			@ (mov r8, r8)
1004750a:	46bd      	mov	sp, r7
1004750c:	b002      	add	sp, #8
1004750e:	bd80      	pop	{r7, pc}

10047510 <BLEPLAT_CNTR_PacketSetIntTimeout>:

void BLEPLAT_CNTR_PacketSetIntTimeout(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10047510:	b580      	push	{r7, lr}
10047512:	b082      	sub	sp, #8
10047514:	af00      	add	r7, sp, #0
10047516:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvTimeout_Enable((TXRXPACK_TypeDef*)packetP);
10047518:	687b      	ldr	r3, [r7, #4]
1004751a:	0018      	movs	r0, r3
1004751c:	f7ff fdb5 	bl	1004708a <LL_RADIO_IntRcvTimeout_Enable>
}
10047520:	46c0      	nop			@ (mov r8, r8)
10047522:	46bd      	mov	sp, r7
10047524:	b002      	add	sp, #8
10047526:	bd80      	pop	{r7, pc}

10047528 <BLEPLAT_CNTR_PacketSetIntTxOk>:
{
  LL_RADIO_SetIntTimeCapture((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1U);
}

void BLEPLAT_CNTR_PacketSetIntTxOk(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10047528:	b580      	push	{r7, lr}
1004752a:	b082      	sub	sp, #8
1004752c:	af00      	add	r7, sp, #0
1004752e:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetIntTxOk((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10047530:	687b      	ldr	r3, [r7, #4]
10047532:	2101      	movs	r1, #1
10047534:	0018      	movs	r0, r3
10047536:	f7ff fd81 	bl	1004703c <LL_RADIO_SetIntTxOk>
}
1004753a:	46c0      	nop			@ (mov r8, r8)
1004753c:	46bd      	mov	sp, r7
1004753e:	b002      	add	sp, #8
10047540:	bd80      	pop	{r7, pc}

10047542 <BLEPLAT_CNTR_PacketSetKeepsemareq>:

void BLEPLAT_CNTR_PacketSetKeepsemareq(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10047542:	b580      	push	{r7, lr}
10047544:	b082      	sub	sp, #8
10047546:	af00      	add	r7, sp, #0
10047548:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetKeepSemaRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
1004754a:	687b      	ldr	r3, [r7, #4]
1004754c:	2101      	movs	r1, #1
1004754e:	0018      	movs	r0, r3
10047550:	f7ff fc42 	bl	10046dd8 <LL_RADIO_SetKeepSemaRequest>
}
10047554:	46c0      	nop			@ (mov r8, r8)
10047556:	46bd      	mov	sp, r7
10047558:	b002      	add	sp, #8
1004755a:	bd80      	pop	{r7, pc}

1004755c <BLEPLAT_CNTR_PacketSetNextPtr>:

void BLEPLAT_CNTR_PacketSetNextPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetNextP)
{
1004755c:	b580      	push	{r7, lr}
1004755e:	b082      	sub	sp, #8
10047560:	af00      	add	r7, sp, #0
10047562:	6078      	str	r0, [r7, #4]
10047564:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetNextPointer((TXRXPACK_TypeDef*)packetP, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetNextP));
10047566:	683a      	ldr	r2, [r7, #0]
10047568:	687b      	ldr	r3, [r7, #4]
1004756a:	0011      	movs	r1, r2
1004756c:	0018      	movs	r0, r3
1004756e:	f7ff fc11 	bl	10046d94 <LL_RADIO_SetNextPointer>
}
10047572:	46c0      	nop			@ (mov r8, r8)
10047574:	46bd      	mov	sp, r7
10047576:	b002      	add	sp, #8
10047578:	bd80      	pop	{r7, pc}

1004757a <BLEPLAT_CNTR_PacketSetNextRxMode>:

void BLEPLAT_CNTR_PacketSetNextRxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004757a:	b580      	push	{r7, lr}
1004757c:	b082      	sub	sp, #8
1004757e:	af00      	add	r7, sp, #0
10047580:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
10047582:	687b      	ldr	r3, [r7, #4]
10047584:	2100      	movs	r1, #0
10047586:	0018      	movs	r0, r3
10047588:	f7ff fca6 	bl	10046ed8 <LL_RADIO_SetNextTxMode>
}
1004758c:	46c0      	nop			@ (mov r8, r8)
1004758e:	46bd      	mov	sp, r7
10047590:	b002      	add	sp, #8
10047592:	bd80      	pop	{r7, pc}

10047594 <BLEPLAT_CNTR_PacketSetNextSlot>:

void BLEPLAT_CNTR_PacketSetNextSlot(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint8_t slot)
{
10047594:	b580      	push	{r7, lr}
10047596:	b082      	sub	sp, #8
10047598:	af00      	add	r7, sp, #0
1004759a:	6078      	str	r0, [r7, #4]
1004759c:	000a      	movs	r2, r1
1004759e:	1cfb      	adds	r3, r7, #3
100475a0:	701a      	strb	r2, [r3, #0]
    /* nothing to do */
}
100475a2:	46c0      	nop			@ (mov r8, r8)
100475a4:	46bd      	mov	sp, r7
100475a6:	b002      	add	sp, #8
100475a8:	bd80      	pop	{r7, pc}

100475aa <BLEPLAT_CNTR_PacketSetNextTxMode>:

void BLEPLAT_CNTR_PacketSetNextTxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100475aa:	b580      	push	{r7, lr}
100475ac:	b082      	sub	sp, #8
100475ae:	af00      	add	r7, sp, #0
100475b0:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100475b2:	687b      	ldr	r3, [r7, #4]
100475b4:	2101      	movs	r1, #1
100475b6:	0018      	movs	r0, r3
100475b8:	f7ff fc8e 	bl	10046ed8 <LL_RADIO_SetNextTxMode>
}
100475bc:	46c0      	nop			@ (mov r8, r8)
100475be:	46bd      	mov	sp, r7
100475c0:	b002      	add	sp, #8
100475c2:	bd80      	pop	{r7, pc}

100475c4 <BLEPLAT_CNTR_PacketSetNsEn>:

void BLEPLAT_CNTR_PacketSetNsEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100475c4:	b580      	push	{r7, lr}
100475c6:	b082      	sub	sp, #8
100475c8:	af00      	add	r7, sp, #0
100475ca:	6078      	str	r0, [r7, #4]
    LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable((TXRXPACK_TypeDef*)packetP);
100475cc:	687b      	ldr	r3, [r7, #4]
100475ce:	0018      	movs	r0, r3
100475d0:	f7ff fc56 	bl	10046e80 <LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable>
}
100475d4:	46c0      	nop			@ (mov r8, r8)
100475d6:	46bd      	mov	sp, r7
100475d8:	b002      	add	sp, #8
100475da:	bd80      	pop	{r7, pc}

100475dc <BLEPLAT_CNTR_PacketSetPllTrig>:

void BLEPLAT_CNTR_PacketSetPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100475dc:	b580      	push	{r7, lr}
100475de:	b082      	sub	sp, #8
100475e0:	af00      	add	r7, sp, #0
100475e2:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100475e4:	687b      	ldr	r3, [r7, #4]
100475e6:	2101      	movs	r1, #1
100475e8:	0018      	movs	r0, r3
100475ea:	f7ff fbe1 	bl	10046db0 <LL_RADIO_SetCalibrationRequest>
}
100475ee:	46c0      	nop			@ (mov r8, r8)
100475f0:	46bd      	mov	sp, r7
100475f2:	b002      	add	sp, #8
100475f4:	bd80      	pop	{r7, pc}

100475f6 <BLEPLAT_CNTR_PacketSetRxReady>:

void BLEPLAT_CNTR_PacketSetRxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100475f6:	b580      	push	{r7, lr}
100475f8:	b082      	sub	sp, #8
100475fa:	af00      	add	r7, sp, #0
100475fc:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100475fe:	687b      	ldr	r3, [r7, #4]
10047600:	2101      	movs	r1, #1
10047602:	0018      	movs	r0, r3
10047604:	f7ff fc80 	bl	10046f08 <LL_RADIO_SetAllTableDataReady>
}
10047608:	46c0      	nop			@ (mov r8, r8)
1004760a:	46bd      	mov	sp, r7
1004760c:	b002      	add	sp, #8
1004760e:	bd80      	pop	{r7, pc}

10047610 <BLEPLAT_CNTR_PacketSetTimeout>:

void BLEPLAT_CNTR_PacketSetTimeout(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t x)
{
10047610:	b580      	push	{r7, lr}
10047612:	b082      	sub	sp, #8
10047614:	af00      	add	r7, sp, #0
10047616:	6078      	str	r0, [r7, #4]
10047618:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetTimer2Triggering((TXRXPACK_TypeDef*)packetP, x);
1004761a:	683a      	ldr	r2, [r7, #0]
1004761c:	687b      	ldr	r3, [r7, #4]
1004761e:	0011      	movs	r1, r2
10047620:	0018      	movs	r0, r3
10047622:	f7ff fcb9 	bl	10046f98 <LL_RADIO_SetTimer2Triggering>
}
10047626:	46c0      	nop			@ (mov r8, r8)
10047628:	46bd      	mov	sp, r7
1004762a:	b002      	add	sp, #8
1004762c:	bd80      	pop	{r7, pc}

1004762e <BLEPLAT_CNTR_PacketSetTimer2Active>:

void BLEPLAT_CNTR_PacketSetTimer2Active(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004762e:	b580      	push	{r7, lr}
10047630:	b082      	sub	sp, #8
10047632:	af00      	add	r7, sp, #0
10047634:	6078      	str	r0, [r7, #4]
    LL_RADIO_Timer2_Enable((TXRXPACK_TypeDef*)packetP);
10047636:	687b      	ldr	r3, [r7, #4]
10047638:	0018      	movs	r0, r3
1004763a:	f7ff fcc0 	bl	10046fbe <LL_RADIO_Timer2_Enable>
}
1004763e:	46c0      	nop			@ (mov r8, r8)
10047640:	46bd      	mov	sp, r7
10047642:	b002      	add	sp, #8
10047644:	bd80      	pop	{r7, pc}

10047646 <BLEPLAT_CNTR_PacketSetTimerTrigDone>:

void BLEPLAT_CNTR_PacketSetTimerTrigDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10047646:	b580      	push	{r7, lr}
10047648:	b082      	sub	sp, #8
1004764a:	af00      	add	r7, sp, #0
1004764c:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigDone((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
1004764e:	687b      	ldr	r3, [r7, #4]
10047650:	2101      	movs	r1, #1
10047652:	0018      	movs	r0, r3
10047654:	f7ff fcda 	bl	1004700c <LL_RADIO_SetTrigDone>
}
10047658:	46c0      	nop			@ (mov r8, r8)
1004765a:	46bd      	mov	sp, r7
1004765c:	b002      	add	sp, #8
1004765e:	bd80      	pop	{r7, pc}

10047660 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>:

void BLEPLAT_CNTR_PacketSetTimerTrigRcv(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10047660:	b580      	push	{r7, lr}
10047662:	b082      	sub	sp, #8
10047664:	af00      	add	r7, sp, #0
10047666:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigRcv((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10047668:	687b      	ldr	r3, [r7, #4]
1004766a:	2101      	movs	r1, #1
1004766c:	0018      	movs	r0, r3
1004766e:	f7ff fcb5 	bl	10046fdc <LL_RADIO_SetTrigRcv>
}
10047672:	46c0      	nop			@ (mov r8, r8)
10047674:	46bd      	mov	sp, r7
10047676:	b002      	add	sp, #8
10047678:	bd80      	pop	{r7, pc}

1004767a <BLEPLAT_CNTR_PacketSetTxReady>:

void BLEPLAT_CNTR_PacketSetTxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004767a:	b580      	push	{r7, lr}
1004767c:	b082      	sub	sp, #8
1004767e:	af00      	add	r7, sp, #0
10047680:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTransmissionDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10047682:	687b      	ldr	r3, [r7, #4]
10047684:	2101      	movs	r1, #1
10047686:	0018      	movs	r0, r3
10047688:	f7ff fc56 	bl	10046f38 <LL_RADIO_SetTransmissionDataReady>
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
1004768c:	687b      	ldr	r3, [r7, #4]
1004768e:	2101      	movs	r1, #1
10047690:	0018      	movs	r0, r3
10047692:	f7ff fc39 	bl	10046f08 <LL_RADIO_SetAllTableDataReady>
}
10047696:	46c0      	nop			@ (mov r8, r8)
10047698:	46bd      	mov	sp, r7
1004769a:	b002      	add	sp, #8
1004769c:	bd80      	pop	{r7, pc}

1004769e <BLEPLAT_CNTR_SetRcvLen>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SetRcvLen(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t rcvLen)
{
1004769e:	b580      	push	{r7, lr}
100476a0:	b082      	sub	sp, #8
100476a2:	af00      	add	r7, sp, #0
100476a4:	6078      	str	r0, [r7, #4]
100476a6:	6039      	str	r1, [r7, #0]
  (void)packetP;
  LL_RADIO_SetReceiveWindowTimeout((uint32_t) (rcvLen & 0xFFFFFU));
100476a8:	683b      	ldr	r3, [r7, #0]
100476aa:	031b      	lsls	r3, r3, #12
100476ac:	0b1b      	lsrs	r3, r3, #12
100476ae:	0018      	movs	r0, r3
100476b0:	f7fe fe4e 	bl	10046350 <LL_RADIO_SetReceiveWindowTimeout>
}
100476b4:	46c0      	nop			@ (mov r8, r8)
100476b6:	46bd      	mov	sp, r7
100476b8:	b002      	add	sp, #8
100476ba:	bd80      	pop	{r7, pc}

100476bc <BLEPLAT_CNTR_SmCteOff>:

void BLEPLAT_CNTR_SmCteOff(uint8_t smNo)
{
100476bc:	b580      	push	{r7, lr}
100476be:	b082      	sub	sp, #8
100476c0:	af00      	add	r7, sp, #0
100476c2:	0002      	movs	r2, r0
100476c4:	1dfb      	adds	r3, r7, #7
100476c6:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEDisable(smNo, 0x01);
100476c8:	1dfb      	adds	r3, r7, #7
100476ca:	781b      	ldrb	r3, [r3, #0]
100476cc:	2101      	movs	r1, #1
100476ce:	0018      	movs	r0, r3
100476d0:	f7fe fff0 	bl	100466b4 <LL_RADIO_SetCTEDisable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
100476d4:	46c0      	nop			@ (mov r8, r8)
100476d6:	46bd      	mov	sp, r7
100476d8:	b002      	add	sp, #8
100476da:	bd80      	pop	{r7, pc}

100476dc <BLEPLAT_CNTR_SmEnRadioConfig>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmEnRadioConfig(uint8_t smNo, uint32_t enable)
{
100476dc:	b580      	push	{r7, lr}
100476de:	b082      	sub	sp, #8
100476e0:	af00      	add	r7, sp, #0
100476e2:	0002      	movs	r2, r0
100476e4:	6039      	str	r1, [r7, #0]
100476e6:	1dfb      	adds	r3, r7, #7
100476e8:	701a      	strb	r2, [r3, #0]
    if(enable)
100476ea:	683b      	ldr	r3, [r7, #0]
100476ec:	2b00      	cmp	r3, #0
100476ee:	d005      	beq.n	100476fc <BLEPLAT_CNTR_SmEnRadioConfig+0x20>
	    LL_RADIO_RadioCommandList_Enable(smNo);
100476f0:	1dfb      	adds	r3, r7, #7
100476f2:	781b      	ldrb	r3, [r3, #0]
100476f4:	0018      	movs	r0, r3
100476f6:	f7fe fe69 	bl	100463cc <LL_RADIO_RadioCommandList_Enable>
	else
	    LL_RADIO_RadioCommandList_Disable(smNo);
}
100476fa:	e004      	b.n	10047706 <BLEPLAT_CNTR_SmEnRadioConfig+0x2a>
	    LL_RADIO_RadioCommandList_Disable(smNo);
100476fc:	1dfb      	adds	r3, r7, #7
100476fe:	781b      	ldrb	r3, [r3, #0]
10047700:	0018      	movs	r0, r3
10047702:	f7fe fe81 	bl	10046408 <LL_RADIO_RadioCommandList_Disable>
}
10047706:	46c0      	nop			@ (mov r8, r8)
10047708:	46bd      	mov	sp, r7
1004770a:	b002      	add	sp, #8
1004770c:	bd80      	pop	{r7, pc}

1004770e <BLEPLAT_CNTR_SmEncOff>:

void BLEPLAT_CNTR_SmEncOff(uint8_t smNo)
{
1004770e:	b580      	push	{r7, lr}
10047710:	b082      	sub	sp, #8
10047712:	af00      	add	r7, sp, #0
10047714:	0002      	movs	r2, r0
10047716:	1dfb      	adds	r3, r7, #7
10047718:	701a      	strb	r2, [r3, #0]
    LL_RADIO_Encryption_Disable(smNo);
1004771a:	1dfb      	adds	r3, r7, #7
1004771c:	781b      	ldrb	r3, [r3, #0]
1004771e:	0018      	movs	r0, r3
10047720:	f7fe ff68 	bl	100465f4 <LL_RADIO_Encryption_Disable>
    LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable(smNo);
10047724:	1dfb      	adds	r3, r7, #7
10047726:	781b      	ldrb	r3, [r3, #0]
10047728:	0018      	movs	r0, r3
1004772a:	f7ff f955 	bl	100469d8 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable>
}
1004772e:	46c0      	nop			@ (mov r8, r8)
10047730:	46bd      	mov	sp, r7
10047732:	b002      	add	sp, #8
10047734:	bd80      	pop	{r7, pc}

10047736 <BLEPLAT_CNTR_SmEncOn>:

void BLEPLAT_CNTR_SmEncOn(uint8_t smNo)
{
10047736:	b580      	push	{r7, lr}
10047738:	b082      	sub	sp, #8
1004773a:	af00      	add	r7, sp, #0
1004773c:	0002      	movs	r2, r0
1004773e:	1dfb      	adds	r3, r7, #7
10047740:	701a      	strb	r2, [r3, #0]
    LL_RADIO_Encryption_Enable(smNo);
10047742:	1dfb      	adds	r3, r7, #7
10047744:	781b      	ldrb	r3, [r3, #0]
10047746:	0018      	movs	r0, r3
10047748:	f7fe ff34 	bl	100465b4 <LL_RADIO_Encryption_Enable>
    LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable(smNo);
1004774c:	1dfb      	adds	r3, r7, #7
1004774e:	781b      	ldrb	r3, [r3, #0]
10047750:	0018      	movs	r0, r3
10047752:	f7ff f921 	bl	10046998 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable>
}
10047756:	46c0      	nop			@ (mov r8, r8)
10047758:	46bd      	mov	sp, r7
1004775a:	b002      	add	sp, #8
1004775c:	bd80      	pop	{r7, pc}

1004775e <BLEPLAT_CNTR_SmGetAccessAddr>:

uint32_t BLEPLAT_CNTR_SmGetAccessAddr(uint8_t smNo)
{
1004775e:	b580      	push	{r7, lr}
10047760:	b082      	sub	sp, #8
10047762:	af00      	add	r7, sp, #0
10047764:	0002      	movs	r2, r0
10047766:	1dfb      	adds	r3, r7, #7
10047768:	701a      	strb	r2, [r3, #0]
    return LL_RADIO_GetAccessAddress(smNo);
1004776a:	1dfb      	adds	r3, r7, #7
1004776c:	781b      	ldrb	r3, [r3, #0]
1004776e:	0018      	movs	r0, r3
10047770:	f7ff f970 	bl	10046a54 <LL_RADIO_GetAccessAddress>
10047774:	0003      	movs	r3, r0
}
10047776:	0018      	movs	r0, r3
10047778:	46bd      	mov	sp, r7
1004777a:	b002      	add	sp, #8
1004777c:	bd80      	pop	{r7, pc}

1004777e <BLEPLAT_CNTR_SmGetChannelMap>:

void BLEPLAT_CNTR_SmGetChannelMap(uint8_t smNo, uint8_t* chanMap)
{
1004777e:	b580      	push	{r7, lr}
10047780:	b082      	sub	sp, #8
10047782:	af00      	add	r7, sp, #0
10047784:	0002      	movs	r2, r0
10047786:	6039      	str	r1, [r7, #0]
10047788:	1dfb      	adds	r3, r7, #7
1004778a:	701a      	strb	r2, [r3, #0]
    chanMap[0] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_15_0(smNo));
1004778c:	1dfb      	adds	r3, r7, #7
1004778e:	781b      	ldrb	r3, [r3, #0]
10047790:	0018      	movs	r0, r3
10047792:	f7ff faad 	bl	10046cf0 <LL_RADIO_GetUsedChannelFlags_15_0>
10047796:	0003      	movs	r3, r0
10047798:	b2da      	uxtb	r2, r3
1004779a:	683b      	ldr	r3, [r7, #0]
1004779c:	701a      	strb	r2, [r3, #0]
    chanMap[1] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_15_0(smNo) >> 8U);
1004779e:	1dfb      	adds	r3, r7, #7
100477a0:	781b      	ldrb	r3, [r3, #0]
100477a2:	0018      	movs	r0, r3
100477a4:	f7ff faa4 	bl	10046cf0 <LL_RADIO_GetUsedChannelFlags_15_0>
100477a8:	0003      	movs	r3, r0
100477aa:	0a1a      	lsrs	r2, r3, #8
100477ac:	683b      	ldr	r3, [r7, #0]
100477ae:	3301      	adds	r3, #1
100477b0:	b2d2      	uxtb	r2, r2
100477b2:	701a      	strb	r2, [r3, #0]
    chanMap[2] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo));
100477b4:	1dfb      	adds	r3, r7, #7
100477b6:	781b      	ldrb	r3, [r3, #0]
100477b8:	0018      	movs	r0, r3
100477ba:	f7ff fad5 	bl	10046d68 <LL_RADIO_GetUsedChannelFlags_36_16>
100477be:	0002      	movs	r2, r0
100477c0:	683b      	ldr	r3, [r7, #0]
100477c2:	3302      	adds	r3, #2
100477c4:	b2d2      	uxtb	r2, r2
100477c6:	701a      	strb	r2, [r3, #0]
    chanMap[3] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo) >> 8U);
100477c8:	1dfb      	adds	r3, r7, #7
100477ca:	781b      	ldrb	r3, [r3, #0]
100477cc:	0018      	movs	r0, r3
100477ce:	f7ff facb 	bl	10046d68 <LL_RADIO_GetUsedChannelFlags_36_16>
100477d2:	0003      	movs	r3, r0
100477d4:	0a1a      	lsrs	r2, r3, #8
100477d6:	683b      	ldr	r3, [r7, #0]
100477d8:	3303      	adds	r3, #3
100477da:	b2d2      	uxtb	r2, r2
100477dc:	701a      	strb	r2, [r3, #0]
    chanMap[4] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo) >> 16U);
100477de:	1dfb      	adds	r3, r7, #7
100477e0:	781b      	ldrb	r3, [r3, #0]
100477e2:	0018      	movs	r0, r3
100477e4:	f7ff fac0 	bl	10046d68 <LL_RADIO_GetUsedChannelFlags_36_16>
100477e8:	0003      	movs	r3, r0
100477ea:	0c1a      	lsrs	r2, r3, #16
100477ec:	683b      	ldr	r3, [r7, #0]
100477ee:	3304      	adds	r3, #4
100477f0:	b2d2      	uxtb	r2, r2
100477f2:	701a      	strb	r2, [r3, #0]
}
100477f4:	46c0      	nop			@ (mov r8, r8)
100477f6:	46bd      	mov	sp, r7
100477f8:	b002      	add	sp, #8
100477fa:	bd80      	pop	{r7, pc}

100477fc <BLEPLAT_CNTR_SmGetEncIvPtr>:
  return (uint8_t)0;
#endif
}

uint32_t* BLEPLAT_CNTR_SmGetEncIvPtr(uint8_t smNo)
{
100477fc:	b580      	push	{r7, lr}
100477fe:	b082      	sub	sp, #8
10047800:	af00      	add	r7, sp, #0
10047802:	0002      	movs	r2, r0
10047804:	1dfb      	adds	r3, r7, #7
10047806:	701a      	strb	r2, [r3, #0]
    return (uint32_t*)&(bluedata + smNo)->ENCRYPTIV[0];
10047808:	1dfb      	adds	r3, r7, #7
1004780a:	781b      	ldrb	r3, [r3, #0]
1004780c:	225c      	movs	r2, #92	@ 0x5c
1004780e:	4353      	muls	r3, r2
10047810:	4a03      	ldr	r2, [pc, #12]	@ (10047820 <BLEPLAT_CNTR_SmGetEncIvPtr+0x24>)
10047812:	4694      	mov	ip, r2
10047814:	4463      	add	r3, ip
10047816:	3338      	adds	r3, #56	@ 0x38
}
10047818:	0018      	movs	r0, r3
1004781a:	46bd      	mov	sp, r7
1004781c:	b002      	add	sp, #8
1004781e:	bd80      	pop	{r7, pc}
10047820:	200000dc 	.word	0x200000dc

10047824 <BLEPLAT_CNTR_SmGetEncKeyPtr>:

uint32_t* BLEPLAT_CNTR_SmGetEncKeyPtr(uint8_t smNo)
{
10047824:	b580      	push	{r7, lr}
10047826:	b082      	sub	sp, #8
10047828:	af00      	add	r7, sp, #0
1004782a:	0002      	movs	r2, r0
1004782c:	1dfb      	adds	r3, r7, #7
1004782e:	701a      	strb	r2, [r3, #0]
	return (uint32_t*)&(bluedata + smNo)->ENCRYPTK[0];
10047830:	1dfb      	adds	r3, r7, #7
10047832:	781b      	ldrb	r3, [r3, #0]
10047834:	225c      	movs	r2, #92	@ 0x5c
10047836:	4353      	muls	r3, r2
10047838:	4a03      	ldr	r2, [pc, #12]	@ (10047848 <BLEPLAT_CNTR_SmGetEncKeyPtr+0x24>)
1004783a:	4694      	mov	ip, r2
1004783c:	4463      	add	r3, ip
1004783e:	3340      	adds	r3, #64	@ 0x40
}
10047840:	0018      	movs	r0, r3
10047842:	46bd      	mov	sp, r7
10047844:	b002      	add	sp, #8
10047846:	bd80      	pop	{r7, pc}
10047848:	200000dc 	.word	0x200000dc

1004784c <BLEPLAT_CNTR_SmGetHopIncr>:
{
    return (uint8_t)LL_RADIO_Encryption_IsEnabled(smNo);
}

uint8_t BLEPLAT_CNTR_SmGetHopIncr(uint8_t smNo)
{
1004784c:	b580      	push	{r7, lr}
1004784e:	b082      	sub	sp, #8
10047850:	af00      	add	r7, sp, #0
10047852:	0002      	movs	r2, r0
10047854:	1dfb      	adds	r3, r7, #7
10047856:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetHopIncrement(smNo);
10047858:	1dfb      	adds	r3, r7, #7
1004785a:	781b      	ldrb	r3, [r3, #0]
1004785c:	0018      	movs	r0, r3
1004785e:	f7ff fa0d 	bl	10046c7c <LL_RADIO_GetHopIncrement>
10047862:	0003      	movs	r3, r0
10047864:	b2db      	uxtb	r3, r3
}
10047866:	0018      	movs	r0, r3
10047868:	46bd      	mov	sp, r7
1004786a:	b002      	add	sp, #8
1004786c:	bd80      	pop	{r7, pc}

1004786e <BLEPLAT_CNTR_SmGetMode>:

uint8_t BLEPLAT_CNTR_SmGetMode(uint8_t smNo)
{
1004786e:	b580      	push	{r7, lr}
10047870:	b082      	sub	sp, #8
10047872:	af00      	add	r7, sp, #0
10047874:	0002      	movs	r2, r0
10047876:	1dfb      	adds	r3, r7, #7
10047878:	701a      	strb	r2, [r3, #0]
    return LL_RADIO_TxMode_IsEnabled(smNo);
1004787a:	1dfb      	adds	r3, r7, #7
1004787c:	781b      	ldrb	r3, [r3, #0]
1004787e:	0018      	movs	r0, r3
10047880:	f7fe fe1c 	bl	100464bc <LL_RADIO_TxMode_IsEnabled>
10047884:	0003      	movs	r3, r0
10047886:	b2db      	uxtb	r3, r3
}
10047888:	0018      	movs	r0, r3
1004788a:	46bd      	mov	sp, r7
1004788c:	b002      	add	sp, #8
1004788e:	bd80      	pop	{r7, pc}

10047890 <BLEPLAT_CNTR_SmGetRemapChan>:
{
    return (BLEPLAT_CNTR_TXRXPACK_TypeDef*)BLUE_TRANS_STRUCT_PTR_CAST(CONV_ADR(LL_RADIO_GetTxPointPrevious(smNo)));
}

uint8_t BLEPLAT_CNTR_SmGetRemapChan(uint8_t smNo)
{
10047890:	b580      	push	{r7, lr}
10047892:	b082      	sub	sp, #8
10047894:	af00      	add	r7, sp, #0
10047896:	0002      	movs	r2, r0
10047898:	1dfb      	adds	r3, r7, #7
1004789a:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetRemapChannel(smNo);
1004789c:	1dfb      	adds	r3, r7, #7
1004789e:	781b      	ldrb	r3, [r3, #0]
100478a0:	0018      	movs	r0, r3
100478a2:	f7fe fe4f 	bl	10046544 <LL_RADIO_GetRemapChannel>
100478a6:	0003      	movs	r3, r0
100478a8:	b2db      	uxtb	r3, r3
}
100478aa:	0018      	movs	r0, r3
100478ac:	46bd      	mov	sp, r7
100478ae:	b002      	add	sp, #8
100478b0:	bd80      	pop	{r7, pc}

100478b2 <BLEPLAT_CNTR_SmGetRxCount>:

void BLEPLAT_CNTR_SmGetRxCount(uint8_t smNo, uint32_t* packetCount)
{
100478b2:	b590      	push	{r4, r7, lr}
100478b4:	b083      	sub	sp, #12
100478b6:	af00      	add	r7, sp, #0
100478b8:	0002      	movs	r2, r0
100478ba:	6039      	str	r1, [r7, #0]
100478bc:	1dfb      	adds	r3, r7, #7
100478be:	701a      	strb	r2, [r3, #0]

    packetCount[0] = LL_RADIO_GetPacketCounterRx_23_0(smNo);
100478c0:	1dfb      	adds	r3, r7, #7
100478c2:	781b      	ldrb	r3, [r3, #0]
100478c4:	0018      	movs	r0, r3
100478c6:	f7ff f815 	bl	100468f4 <LL_RADIO_GetPacketCounterRx_23_0>
100478ca:	0002      	movs	r2, r0
100478cc:	683b      	ldr	r3, [r7, #0]
100478ce:	601a      	str	r2, [r3, #0]
    packetCount[0] = packetCount[0] | ((uint32_t)LL_RADIO_GetPacketCounterRx_39_24(smNo) << 24U);
100478d0:	683b      	ldr	r3, [r7, #0]
100478d2:	681c      	ldr	r4, [r3, #0]
100478d4:	1dfb      	adds	r3, r7, #7
100478d6:	781b      	ldrb	r3, [r3, #0]
100478d8:	0018      	movs	r0, r3
100478da:	f7ff f847 	bl	1004696c <LL_RADIO_GetPacketCounterRx_39_24>
100478de:	0003      	movs	r3, r0
100478e0:	061b      	lsls	r3, r3, #24
100478e2:	0022      	movs	r2, r4
100478e4:	431a      	orrs	r2, r3
100478e6:	683b      	ldr	r3, [r7, #0]
100478e8:	601a      	str	r2, [r3, #0]
    packetCount[1] = LL_RADIO_GetPacketCounterRx_39_24(smNo) >> 8U;
100478ea:	1dfb      	adds	r3, r7, #7
100478ec:	781b      	ldrb	r3, [r3, #0]
100478ee:	0018      	movs	r0, r3
100478f0:	f7ff f83c 	bl	1004696c <LL_RADIO_GetPacketCounterRx_39_24>
100478f4:	0002      	movs	r2, r0
100478f6:	683b      	ldr	r3, [r7, #0]
100478f8:	3304      	adds	r3, #4
100478fa:	0a12      	lsrs	r2, r2, #8
100478fc:	601a      	str	r2, [r3, #0]
}
100478fe:	46c0      	nop			@ (mov r8, r8)
10047900:	46bd      	mov	sp, r7
10047902:	b003      	add	sp, #12
10047904:	bd90      	pop	{r4, r7, pc}

10047906 <BLEPLAT_CNTR_SmGetRxPhy>:

uint8_t BLEPLAT_CNTR_SmGetRxPhy(uint8_t smNo)
{
10047906:	b580      	push	{r7, lr}
10047908:	b082      	sub	sp, #8
1004790a:	af00      	add	r7, sp, #0
1004790c:	0002      	movs	r2, r0
1004790e:	1dfb      	adds	r3, r7, #7
10047910:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetReceptionPhy(smNo);
10047912:	1dfb      	adds	r3, r7, #7
10047914:	781b      	ldrb	r3, [r3, #0]
10047916:	0018      	movs	r0, r3
10047918:	f7fe ff1c 	bl	10046754 <LL_RADIO_GetReceptionPhy>
1004791c:	0003      	movs	r3, r0
1004791e:	b2db      	uxtb	r3, r3
}
10047920:	0018      	movs	r0, r3
10047922:	46bd      	mov	sp, r7
10047924:	b002      	add	sp, #8
10047926:	bd80      	pop	{r7, pc}

10047928 <BLEPLAT_CNTR_SmGetTxPhy>:
{
    return (BLEPLAT_CNTR_TXRXPACK_TypeDef*)BLUE_TRANS_STRUCT_PTR_CAST(CONV_ADR(LL_RADIO_GetTxPoint(smNo)));
}

uint8_t BLEPLAT_CNTR_SmGetTxPhy(uint8_t smNo)
{
10047928:	b580      	push	{r7, lr}
1004792a:	b082      	sub	sp, #8
1004792c:	af00      	add	r7, sp, #0
1004792e:	0002      	movs	r2, r0
10047930:	1dfb      	adds	r3, r7, #7
10047932:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetTransmissionPhy(smNo);
10047934:	1dfb      	adds	r3, r7, #7
10047936:	781b      	ldrb	r3, [r3, #0]
10047938:	0018      	movs	r0, r3
1004793a:	f7fe fea3 	bl	10046684 <LL_RADIO_GetTransmissionPhy>
1004793e:	0003      	movs	r3, r0
10047940:	b2db      	uxtb	r3, r3
}
10047942:	0018      	movs	r0, r3
10047944:	46bd      	mov	sp, r7
10047946:	b002      	add	sp, #8
10047948:	bd80      	pop	{r7, pc}

1004794a <BLEPLAT_CNTR_SmGetTxPwr>:

uint8_t BLEPLAT_CNTR_SmGetTxPwr(uint8_t smNo)
{
1004794a:	b590      	push	{r4, r7, lr}
1004794c:	b085      	sub	sp, #20
1004794e:	af00      	add	r7, sp, #0
10047950:	0002      	movs	r2, r0
10047952:	1dfb      	adds	r3, r7, #7
10047954:	701a      	strb	r2, [r3, #0]
    uint8_t pa_level = LL_RADIO_GetPAPower(smNo);
10047956:	1dfb      	adds	r3, r7, #7
10047958:	781b      	ldrb	r3, [r3, #0]
1004795a:	0018      	movs	r0, r3
1004795c:	f7ff f950 	bl	10046c00 <LL_RADIO_GetPAPower>
10047960:	0002      	movs	r2, r0
10047962:	240f      	movs	r4, #15
10047964:	193b      	adds	r3, r7, r4
10047966:	701a      	strb	r2, [r3, #0]

#if defined(STM32WB09)
    if (LL_RADIO_TxHp_IsEnabled(smNo) && (pa_level == MAX_PA_LEVEL))
10047968:	1dfb      	adds	r3, r7, #7
1004796a:	781b      	ldrb	r3, [r3, #0]
1004796c:	0018      	movs	r0, r3
1004796e:	f7ff f907 	bl	10046b80 <LL_RADIO_TxHp_IsEnabled>
10047972:	1e03      	subs	r3, r0, #0
10047974:	d006      	beq.n	10047984 <BLEPLAT_CNTR_SmGetTxPwr+0x3a>
10047976:	193b      	adds	r3, r7, r4
10047978:	781b      	ldrb	r3, [r3, #0]
1004797a:	2b1f      	cmp	r3, #31
1004797c:	d102      	bne.n	10047984 <BLEPLAT_CNTR_SmGetTxPwr+0x3a>
    {
        pa_level = HP_PA_LEVEL;
1004797e:	193b      	adds	r3, r7, r4
10047980:	2220      	movs	r2, #32
10047982:	701a      	strb	r2, [r3, #0]
    }
#endif
    return pa_level;
10047984:	230f      	movs	r3, #15
10047986:	18fb      	adds	r3, r7, r3
10047988:	781b      	ldrb	r3, [r3, #0]
}
1004798a:	0018      	movs	r0, r3
1004798c:	46bd      	mov	sp, r7
1004798e:	b005      	add	sp, #20
10047990:	bd90      	pop	{r4, r7, pc}
	...

10047994 <BLEPLAT_CNTR_SmInitTo0>:
{
    return (uint8_t)LL_RADIO_GetUnmappedChannel(smNo);
}

void BLEPLAT_CNTR_SmInitTo0(uint8_t smNo)
{
10047994:	b580      	push	{r7, lr}
10047996:	b082      	sub	sp, #8
10047998:	af00      	add	r7, sp, #0
1004799a:	0002      	movs	r2, r0
1004799c:	1dfb      	adds	r3, r7, #7
1004799e:	701a      	strb	r2, [r3, #0]
  memset((void*)&bluedata[smNo], 0, sizeof(STATMACH_TypeDef));
100479a0:	1dfb      	adds	r3, r7, #7
100479a2:	781b      	ldrb	r3, [r3, #0]
100479a4:	225c      	movs	r2, #92	@ 0x5c
100479a6:	4353      	muls	r3, r2
100479a8:	4a08      	ldr	r2, [pc, #32]	@ (100479cc <BLEPLAT_CNTR_SmInitTo0+0x38>)
100479aa:	4694      	mov	ip, r2
100479ac:	4463      	add	r3, ip
100479ae:	225c      	movs	r2, #92	@ 0x5c
100479b0:	2100      	movs	r1, #0
100479b2:	0018      	movs	r0, r3
100479b4:	f01f fcd2 	bl	1006735c <memset>
  BLEPLAT_CNTR_SmEnRadioConfig(smNo, 0x01);
100479b8:	1dfb      	adds	r3, r7, #7
100479ba:	781b      	ldrb	r3, [r3, #0]
100479bc:	2101      	movs	r1, #1
100479be:	0018      	movs	r0, r3
100479c0:	f7ff fe8c 	bl	100476dc <BLEPLAT_CNTR_SmEnRadioConfig>
}
100479c4:	46c0      	nop			@ (mov r8, r8)
100479c6:	46bd      	mov	sp, r7
100479c8:	b002      	add	sp, #8
100479ca:	bd80      	pop	{r7, pc}
100479cc:	200000dc 	.word	0x200000dc

100479d0 <BLEPLAT_CNTR_SmSetAccessAddr>:

void BLEPLAT_CNTR_SmSetAccessAddr(uint8_t smNo, uint32_t x)
{
100479d0:	b580      	push	{r7, lr}
100479d2:	b082      	sub	sp, #8
100479d4:	af00      	add	r7, sp, #0
100479d6:	0002      	movs	r2, r0
100479d8:	6039      	str	r1, [r7, #0]
100479da:	1dfb      	adds	r3, r7, #7
100479dc:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetAccessAddress(smNo, x);
100479de:	683a      	ldr	r2, [r7, #0]
100479e0:	1dfb      	adds	r3, r7, #7
100479e2:	781b      	ldrb	r3, [r3, #0]
100479e4:	0011      	movs	r1, r2
100479e6:	0018      	movs	r0, r3
100479e8:	f7ff f816 	bl	10046a18 <LL_RADIO_SetAccessAddress>
}
100479ec:	46c0      	nop			@ (mov r8, r8)
100479ee:	46bd      	mov	sp, r7
100479f0:	b002      	add	sp, #8
100479f2:	bd80      	pop	{r7, pc}

100479f4 <BLEPLAT_CNTR_SmSetChannelMap>:

void BLEPLAT_CNTR_SmSetChannelMap(uint8_t smNo, uint8_t* chanMap)
{
100479f4:	b580      	push	{r7, lr}
100479f6:	b084      	sub	sp, #16
100479f8:	af00      	add	r7, sp, #0
100479fa:	0002      	movs	r2, r0
100479fc:	6039      	str	r1, [r7, #0]
100479fe:	1dfb      	adds	r3, r7, #7
10047a00:	701a      	strb	r2, [r3, #0]
    uint32_t value = (uint32_t)chanMap[0] | ((uint32_t)chanMap[1] << 8U);
10047a02:	683b      	ldr	r3, [r7, #0]
10047a04:	781b      	ldrb	r3, [r3, #0]
10047a06:	001a      	movs	r2, r3
10047a08:	683b      	ldr	r3, [r7, #0]
10047a0a:	3301      	adds	r3, #1
10047a0c:	781b      	ldrb	r3, [r3, #0]
10047a0e:	021b      	lsls	r3, r3, #8
10047a10:	4313      	orrs	r3, r2
10047a12:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetUsedChannelFlags_15_0(smNo, value);
10047a14:	68fa      	ldr	r2, [r7, #12]
10047a16:	1dfb      	adds	r3, r7, #7
10047a18:	781b      	ldrb	r3, [r3, #0]
10047a1a:	0011      	movs	r1, r2
10047a1c:	0018      	movs	r0, r3
10047a1e:	f7ff f945 	bl	10046cac <LL_RADIO_SetUsedChannelFlags_15_0>
    value = (uint32_t)chanMap[2] | ((uint32_t)chanMap[3] << 8U) | ((uint32_t)chanMap[4] << 16U);
10047a22:	683b      	ldr	r3, [r7, #0]
10047a24:	3302      	adds	r3, #2
10047a26:	781b      	ldrb	r3, [r3, #0]
10047a28:	001a      	movs	r2, r3
10047a2a:	683b      	ldr	r3, [r7, #0]
10047a2c:	3303      	adds	r3, #3
10047a2e:	781b      	ldrb	r3, [r3, #0]
10047a30:	021b      	lsls	r3, r3, #8
10047a32:	431a      	orrs	r2, r3
10047a34:	683b      	ldr	r3, [r7, #0]
10047a36:	3304      	adds	r3, #4
10047a38:	781b      	ldrb	r3, [r3, #0]
10047a3a:	041b      	lsls	r3, r3, #16
10047a3c:	4313      	orrs	r3, r2
10047a3e:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetUsedChannelFlags_36_16(smNo, value);
10047a40:	68fa      	ldr	r2, [r7, #12]
10047a42:	1dfb      	adds	r3, r7, #7
10047a44:	781b      	ldrb	r3, [r3, #0]
10047a46:	0011      	movs	r1, r2
10047a48:	0018      	movs	r0, r3
10047a4a:	f7ff f969 	bl	10046d20 <LL_RADIO_SetUsedChannelFlags_36_16>
}
10047a4e:	46c0      	nop			@ (mov r8, r8)
10047a50:	46bd      	mov	sp, r7
10047a52:	b004      	add	sp, #16
10047a54:	bd80      	pop	{r7, pc}

10047a56 <BLEPLAT_CNTR_SmSetCrcInit>:

void BLEPLAT_CNTR_SmSetCrcInit(uint8_t smNo, uint32_t x)
{
10047a56:	b580      	push	{r7, lr}
10047a58:	b082      	sub	sp, #8
10047a5a:	af00      	add	r7, sp, #0
10047a5c:	0002      	movs	r2, r0
10047a5e:	6039      	str	r1, [r7, #0]
10047a60:	1dfb      	adds	r3, r7, #7
10047a62:	701a      	strb	r2, [r3, #0]
  LL_RADIO_SetCRCInitializationValue(smNo, x);
10047a64:	683a      	ldr	r2, [r7, #0]
10047a66:	1dfb      	adds	r3, r7, #7
10047a68:	781b      	ldrb	r3, [r3, #0]
10047a6a:	0011      	movs	r1, r2
10047a6c:	0018      	movs	r0, r3
10047a6e:	f7ff f805 	bl	10046a7c <LL_RADIO_SetCRCInitializationValue>
}
10047a72:	46c0      	nop			@ (mov r8, r8)
10047a74:	46bd      	mov	sp, r7
10047a76:	b002      	add	sp, #8
10047a78:	bd80      	pop	{r7, pc}

10047a7a <BLEPLAT_CNTR_SmSetDataLength>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmSetDataLength(uint8_t smNo, uint8_t length)
{
10047a7a:	b580      	push	{r7, lr}
10047a7c:	b082      	sub	sp, #8
10047a7e:	af00      	add	r7, sp, #0
10047a80:	0002      	movs	r2, r0
10047a82:	1dfb      	adds	r3, r7, #7
10047a84:	701a      	strb	r2, [r3, #0]
10047a86:	1dbb      	adds	r3, r7, #6
10047a88:	1c0a      	adds	r2, r1, #0
10047a8a:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetMaximumReceiveLength(smNo, (uint32_t) length);
10047a8c:	1dbb      	adds	r3, r7, #6
10047a8e:	781a      	ldrb	r2, [r3, #0]
10047a90:	1dfb      	adds	r3, r7, #7
10047a92:	781b      	ldrb	r3, [r3, #0]
10047a94:	0011      	movs	r1, r2
10047a96:	0018      	movs	r0, r3
10047a98:	f7ff f814 	bl	10046ac4 <LL_RADIO_SetMaximumReceiveLength>
}
10047a9c:	46c0      	nop			@ (mov r8, r8)
10047a9e:	46bd      	mov	sp, r7
10047aa0:	b002      	add	sp, #8
10047aa2:	bd80      	pop	{r7, pc}

10047aa4 <BLEPLAT_CNTR_SmSetHopIncr>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SmSetHopIncr(uint8_t smNo, uint8_t x)
{
10047aa4:	b580      	push	{r7, lr}
10047aa6:	b082      	sub	sp, #8
10047aa8:	af00      	add	r7, sp, #0
10047aaa:	0002      	movs	r2, r0
10047aac:	1dfb      	adds	r3, r7, #7
10047aae:	701a      	strb	r2, [r3, #0]
10047ab0:	1dbb      	adds	r3, r7, #6
10047ab2:	1c0a      	adds	r2, r1, #0
10047ab4:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetHopIncrement(smNo, (uint32_t) x);
10047ab6:	1dbb      	adds	r3, r7, #6
10047ab8:	781a      	ldrb	r2, [r3, #0]
10047aba:	1dfb      	adds	r3, r7, #7
10047abc:	781b      	ldrb	r3, [r3, #0]
10047abe:	0011      	movs	r1, r2
10047ac0:	0018      	movs	r0, r3
10047ac2:	f7ff f8b3 	bl	10046c2c <LL_RADIO_SetHopIncrement>
}
10047ac6:	46c0      	nop			@ (mov r8, r8)
10047ac8:	46bd      	mov	sp, r7
10047aca:	b002      	add	sp, #8
10047acc:	bd80      	pop	{r7, pc}

10047ace <BLEPLAT_CNTR_SmSetRemapChan>:

void BLEPLAT_CNTR_SmSetRemapChan(uint8_t smNo, uint8_t chan)
{
10047ace:	b580      	push	{r7, lr}
10047ad0:	b082      	sub	sp, #8
10047ad2:	af00      	add	r7, sp, #0
10047ad4:	0002      	movs	r2, r0
10047ad6:	1dfb      	adds	r3, r7, #7
10047ad8:	701a      	strb	r2, [r3, #0]
10047ada:	1dbb      	adds	r3, r7, #6
10047adc:	1c0a      	adds	r2, r1, #0
10047ade:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRemapChannel(smNo, chan);
10047ae0:	1dbb      	adds	r3, r7, #6
10047ae2:	781a      	ldrb	r2, [r3, #0]
10047ae4:	1dfb      	adds	r3, r7, #7
10047ae6:	781b      	ldrb	r3, [r3, #0]
10047ae8:	0011      	movs	r1, r2
10047aea:	0018      	movs	r0, r3
10047aec:	f7fe fd02 	bl	100464f4 <LL_RADIO_SetRemapChannel>
}
10047af0:	46c0      	nop			@ (mov r8, r8)
10047af2:	46bd      	mov	sp, r7
10047af4:	b002      	add	sp, #8
10047af6:	bd80      	pop	{r7, pc}

10047af8 <BLEPLAT_CNTR_SmSetRxCount>:

void BLEPLAT_CNTR_SmSetRxCount(uint8_t smNo, uint32_t* packetCount)
{
10047af8:	b580      	push	{r7, lr}
10047afa:	b084      	sub	sp, #16
10047afc:	af00      	add	r7, sp, #0
10047afe:	0002      	movs	r2, r0
10047b00:	6039      	str	r1, [r7, #0]
10047b02:	1dfb      	adds	r3, r7, #7
10047b04:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetPacketCounterRx_23_0(smNo, (uint32_t) packetCount[0]);
10047b06:	683b      	ldr	r3, [r7, #0]
10047b08:	681a      	ldr	r2, [r3, #0]
10047b0a:	1dfb      	adds	r3, r7, #7
10047b0c:	781b      	ldrb	r3, [r3, #0]
10047b0e:	0011      	movs	r1, r2
10047b10:	0018      	movs	r0, r3
10047b12:	f7fe fecb 	bl	100468ac <LL_RADIO_SetPacketCounterRx_23_0>
    uint32_t value = (uint32_t)(packetCount[1] << 8U) | (uint32_t)(packetCount[0] >> 24U);
10047b16:	683b      	ldr	r3, [r7, #0]
10047b18:	3304      	adds	r3, #4
10047b1a:	681b      	ldr	r3, [r3, #0]
10047b1c:	021a      	lsls	r2, r3, #8
10047b1e:	683b      	ldr	r3, [r7, #0]
10047b20:	681b      	ldr	r3, [r3, #0]
10047b22:	0e1b      	lsrs	r3, r3, #24
10047b24:	4313      	orrs	r3, r2
10047b26:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterRx_39_24(smNo, value);
10047b28:	68fa      	ldr	r2, [r7, #12]
10047b2a:	1dfb      	adds	r3, r7, #7
10047b2c:	781b      	ldrb	r3, [r3, #0]
10047b2e:	0011      	movs	r1, r2
10047b30:	0018      	movs	r0, r3
10047b32:	f7fe fef7 	bl	10046924 <LL_RADIO_SetPacketCounterRx_39_24>
}
10047b36:	46c0      	nop			@ (mov r8, r8)
10047b38:	46bd      	mov	sp, r7
10047b3a:	b004      	add	sp, #16
10047b3c:	bd80      	pop	{r7, pc}

10047b3e <BLEPLAT_CNTR_SmSetRxCountDirectionBit>:

void BLEPLAT_CNTR_SmSetRxCountDirectionBit(uint8_t smNo)
{
10047b3e:	b580      	push	{r7, lr}
10047b40:	b084      	sub	sp, #16
10047b42:	af00      	add	r7, sp, #0
10047b44:	0002      	movs	r2, r0
10047b46:	1dfb      	adds	r3, r7, #7
10047b48:	701a      	strb	r2, [r3, #0]
    uint32_t value = LL_RADIO_GetPacketCounterRx_39_24(smNo) | 0x8000U;
10047b4a:	1dfb      	adds	r3, r7, #7
10047b4c:	781b      	ldrb	r3, [r3, #0]
10047b4e:	0018      	movs	r0, r3
10047b50:	f7fe ff0c 	bl	1004696c <LL_RADIO_GetPacketCounterRx_39_24>
10047b54:	0002      	movs	r2, r0
10047b56:	2380      	movs	r3, #128	@ 0x80
10047b58:	021b      	lsls	r3, r3, #8
10047b5a:	4313      	orrs	r3, r2
10047b5c:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterRx_39_24(smNo, value);
10047b5e:	68fa      	ldr	r2, [r7, #12]
10047b60:	1dfb      	adds	r3, r7, #7
10047b62:	781b      	ldrb	r3, [r3, #0]
10047b64:	0011      	movs	r1, r2
10047b66:	0018      	movs	r0, r3
10047b68:	f7fe fedc 	bl	10046924 <LL_RADIO_SetPacketCounterRx_39_24>
}
10047b6c:	46c0      	nop			@ (mov r8, r8)
10047b6e:	46bd      	mov	sp, r7
10047b70:	b004      	add	sp, #16
10047b72:	bd80      	pop	{r7, pc}

10047b74 <BLEPLAT_CNTR_SmSetRxMode>:

void BLEPLAT_CNTR_SmSetRxMode(uint8_t smNo)
{
10047b74:	b580      	push	{r7, lr}
10047b76:	b082      	sub	sp, #8
10047b78:	af00      	add	r7, sp, #0
10047b7a:	0002      	movs	r2, r0
10047b7c:	1dfb      	adds	r3, r7, #7
10047b7e:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Disable(smNo);
10047b80:	1dfb      	adds	r3, r7, #7
10047b82:	781b      	ldrb	r3, [r3, #0]
10047b84:	0018      	movs	r0, r3
10047b86:	f7fe fc7b 	bl	10046480 <LL_RADIO_TxMode_Disable>
}
10047b8a:	46c0      	nop			@ (mov r8, r8)
10047b8c:	46bd      	mov	sp, r7
10047b8e:	b002      	add	sp, #8
10047b90:	bd80      	pop	{r7, pc}

10047b92 <BLEPLAT_CNTR_SmSetRxPacketPtr>:

void BLEPLAT_CNTR_SmSetRxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10047b92:	b580      	push	{r7, lr}
10047b94:	b082      	sub	sp, #8
10047b96:	af00      	add	r7, sp, #0
10047b98:	0002      	movs	r2, r0
10047b9a:	6039      	str	r1, [r7, #0]
10047b9c:	1dfb      	adds	r3, r7, #7
10047b9e:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRcvPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
10047ba0:	683a      	ldr	r2, [r7, #0]
10047ba2:	1dfb      	adds	r3, r7, #7
10047ba4:	781b      	ldrb	r3, [r3, #0]
10047ba6:	0011      	movs	r1, r2
10047ba8:	0018      	movs	r0, r3
10047baa:	f7fe fe09 	bl	100467c0 <LL_RADIO_SetRcvPoint>
}
10047bae:	46c0      	nop			@ (mov r8, r8)
10047bb0:	46bd      	mov	sp, r7
10047bb2:	b002      	add	sp, #8
10047bb4:	bd80      	pop	{r7, pc}

10047bb6 <BLEPLAT_CNTR_SmSetRxPhy>:

void BLEPLAT_CNTR_SmSetRxPhy(uint8_t smNo, uint8_t rxPhy)
{
10047bb6:	b580      	push	{r7, lr}
10047bb8:	b082      	sub	sp, #8
10047bba:	af00      	add	r7, sp, #0
10047bbc:	0002      	movs	r2, r0
10047bbe:	1dfb      	adds	r3, r7, #7
10047bc0:	701a      	strb	r2, [r3, #0]
10047bc2:	1dbb      	adds	r3, r7, #6
10047bc4:	1c0a      	adds	r2, r1, #0
10047bc6:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetReceptionPhy(smNo, (uint32_t) rxPhy);
10047bc8:	1dbb      	adds	r3, r7, #6
10047bca:	781a      	ldrb	r2, [r3, #0]
10047bcc:	1dfb      	adds	r3, r7, #7
10047bce:	781b      	ldrb	r3, [r3, #0]
10047bd0:	0011      	movs	r1, r2
10047bd2:	0018      	movs	r0, r3
10047bd4:	f7fe fd96 	bl	10046704 <LL_RADIO_SetReceptionPhy>
}
10047bd8:	46c0      	nop			@ (mov r8, r8)
10047bda:	46bd      	mov	sp, r7
10047bdc:	b002      	add	sp, #8
10047bde:	bd80      	pop	{r7, pc}

10047be0 <BLEPLAT_CNTR_SmSetTxCount>:

void BLEPLAT_CNTR_SmSetTxCount(uint8_t smNo, uint32_t* packetCount)
{
10047be0:	b580      	push	{r7, lr}
10047be2:	b082      	sub	sp, #8
10047be4:	af00      	add	r7, sp, #0
10047be6:	0002      	movs	r2, r0
10047be8:	6039      	str	r1, [r7, #0]
10047bea:	1dfb      	adds	r3, r7, #7
10047bec:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetPacketCounterTx_31_0(smNo, (uint32_t) packetCount[0]);
10047bee:	683b      	ldr	r3, [r7, #0]
10047bf0:	681a      	ldr	r2, [r3, #0]
10047bf2:	1dfb      	adds	r3, r7, #7
10047bf4:	781b      	ldrb	r3, [r3, #0]
10047bf6:	0011      	movs	r1, r2
10047bf8:	0018      	movs	r0, r3
10047bfa:	f7fe fdff 	bl	100467fc <LL_RADIO_SetPacketCounterTx_31_0>
    LL_RADIO_SetPacketCounterTx_39_32(smNo, (uint32_t) packetCount[1]);
10047bfe:	683b      	ldr	r3, [r7, #0]
10047c00:	3304      	adds	r3, #4
10047c02:	681a      	ldr	r2, [r3, #0]
10047c04:	1dfb      	adds	r3, r7, #7
10047c06:	781b      	ldrb	r3, [r3, #0]
10047c08:	0011      	movs	r1, r2
10047c0a:	0018      	movs	r0, r3
10047c0c:	f7fe fe14 	bl	10046838 <LL_RADIO_SetPacketCounterTx_39_32>
}
10047c10:	46c0      	nop			@ (mov r8, r8)
10047c12:	46bd      	mov	sp, r7
10047c14:	b002      	add	sp, #8
10047c16:	bd80      	pop	{r7, pc}

10047c18 <BLEPLAT_CNTR_SmSetTxCountDirectionBit>:

void BLEPLAT_CNTR_SmSetTxCountDirectionBit(uint8_t smNo)
{
10047c18:	b580      	push	{r7, lr}
10047c1a:	b084      	sub	sp, #16
10047c1c:	af00      	add	r7, sp, #0
10047c1e:	0002      	movs	r2, r0
10047c20:	1dfb      	adds	r3, r7, #7
10047c22:	701a      	strb	r2, [r3, #0]
    uint32_t value =  (LL_RADIO_GetPacketCounterTx_39_32(smNo) | 0x00000080U);
10047c24:	1dfb      	adds	r3, r7, #7
10047c26:	781b      	ldrb	r3, [r3, #0]
10047c28:	0018      	movs	r0, r3
10047c2a:	f7fe fe29 	bl	10046880 <LL_RADIO_GetPacketCounterTx_39_32>
10047c2e:	0003      	movs	r3, r0
10047c30:	2280      	movs	r2, #128	@ 0x80
10047c32:	4313      	orrs	r3, r2
10047c34:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterTx_39_32(smNo,  value);
10047c36:	68fa      	ldr	r2, [r7, #12]
10047c38:	1dfb      	adds	r3, r7, #7
10047c3a:	781b      	ldrb	r3, [r3, #0]
10047c3c:	0011      	movs	r1, r2
10047c3e:	0018      	movs	r0, r3
10047c40:	f7fe fdfa 	bl	10046838 <LL_RADIO_SetPacketCounterTx_39_32>
}
10047c44:	46c0      	nop			@ (mov r8, r8)
10047c46:	46bd      	mov	sp, r7
10047c48:	b004      	add	sp, #16
10047c4a:	bd80      	pop	{r7, pc}

10047c4c <BLEPLAT_CNTR_SmSetTxMode>:

void BLEPLAT_CNTR_SmSetTxMode(uint8_t smNo)
{
10047c4c:	b580      	push	{r7, lr}
10047c4e:	b082      	sub	sp, #8
10047c50:	af00      	add	r7, sp, #0
10047c52:	0002      	movs	r2, r0
10047c54:	1dfb      	adds	r3, r7, #7
10047c56:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Enable(smNo);
10047c58:	1dfb      	adds	r3, r7, #7
10047c5a:	781b      	ldrb	r3, [r3, #0]
10047c5c:	0018      	movs	r0, r3
10047c5e:	f7fe fbf1 	bl	10046444 <LL_RADIO_TxMode_Enable>
}
10047c62:	46c0      	nop			@ (mov r8, r8)
10047c64:	46bd      	mov	sp, r7
10047c66:	b002      	add	sp, #8
10047c68:	bd80      	pop	{r7, pc}

10047c6a <BLEPLAT_CNTR_SmSetTxPacketPtr>:

void BLEPLAT_CNTR_SmSetTxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10047c6a:	b580      	push	{r7, lr}
10047c6c:	b082      	sub	sp, #8
10047c6e:	af00      	add	r7, sp, #0
10047c70:	0002      	movs	r2, r0
10047c72:	6039      	str	r1, [r7, #0]
10047c74:	1dfb      	adds	r3, r7, #7
10047c76:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTxPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
10047c78:	683a      	ldr	r2, [r7, #0]
10047c7a:	1dfb      	adds	r3, r7, #7
10047c7c:	781b      	ldrb	r3, [r3, #0]
10047c7e:	0011      	movs	r1, r2
10047c80:	0018      	movs	r0, r3
10047c82:	f7fe fd7f 	bl	10046784 <LL_RADIO_SetTxPoint>
}
10047c86:	46c0      	nop			@ (mov r8, r8)
10047c88:	46bd      	mov	sp, r7
10047c8a:	b002      	add	sp, #8
10047c8c:	bd80      	pop	{r7, pc}

10047c8e <BLEPLAT_CNTR_SmSetTxPhy>:

void BLEPLAT_CNTR_SmSetTxPhy(uint8_t smNo, uint8_t txPhy)
{
10047c8e:	b580      	push	{r7, lr}
10047c90:	b082      	sub	sp, #8
10047c92:	af00      	add	r7, sp, #0
10047c94:	0002      	movs	r2, r0
10047c96:	1dfb      	adds	r3, r7, #7
10047c98:	701a      	strb	r2, [r3, #0]
10047c9a:	1dbb      	adds	r3, r7, #6
10047c9c:	1c0a      	adds	r2, r1, #0
10047c9e:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTransmissionPhy(smNo, (uint32_t) txPhy);
10047ca0:	1dbb      	adds	r3, r7, #6
10047ca2:	781a      	ldrb	r2, [r3, #0]
10047ca4:	1dfb      	adds	r3, r7, #7
10047ca6:	781b      	ldrb	r3, [r3, #0]
10047ca8:	0011      	movs	r1, r2
10047caa:	0018      	movs	r0, r3
10047cac:	f7fe fcc2 	bl	10046634 <LL_RADIO_SetTransmissionPhy>
}
10047cb0:	46c0      	nop			@ (mov r8, r8)
10047cb2:	46bd      	mov	sp, r7
10047cb4:	b002      	add	sp, #8
10047cb6:	bd80      	pop	{r7, pc}

10047cb8 <BLEPLAT_CNTR_SmSetTxPwr>:
#endif
}

/* Consider PA Level 32 the one used to enable high power. */
void BLEPLAT_CNTR_SmSetTxPwr(uint8_t smNo, uint8_t paLevel)
{
10047cb8:	b580      	push	{r7, lr}
10047cba:	b082      	sub	sp, #8
10047cbc:	af00      	add	r7, sp, #0
10047cbe:	0002      	movs	r2, r0
10047cc0:	1dfb      	adds	r3, r7, #7
10047cc2:	701a      	strb	r2, [r3, #0]
10047cc4:	1dbb      	adds	r3, r7, #6
10047cc6:	1c0a      	adds	r2, r1, #0
10047cc8:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  if(paLevel == HP_PA_LEVEL)
10047cca:	1dbb      	adds	r3, r7, #6
10047ccc:	781b      	ldrb	r3, [r3, #0]
10047cce:	2b20      	cmp	r3, #32
10047cd0:	d108      	bne.n	10047ce4 <BLEPLAT_CNTR_SmSetTxPwr+0x2c>
  {
    LL_RADIO_TxHp_Enable(smNo);
10047cd2:	1dfb      	adds	r3, r7, #7
10047cd4:	781b      	ldrb	r3, [r3, #0]
10047cd6:	0018      	movs	r0, r3
10047cd8:	f7fe ff16 	bl	10046b08 <LL_RADIO_TxHp_Enable>
    paLevel = MAX_PA_LEVEL;
10047cdc:	1dbb      	adds	r3, r7, #6
10047cde:	221f      	movs	r2, #31
10047ce0:	701a      	strb	r2, [r3, #0]
10047ce2:	e004      	b.n	10047cee <BLEPLAT_CNTR_SmSetTxPwr+0x36>
  }
  else
  {
    LL_RADIO_TxHp_Disable(smNo);
10047ce4:	1dfb      	adds	r3, r7, #7
10047ce6:	781b      	ldrb	r3, [r3, #0]
10047ce8:	0018      	movs	r0, r3
10047cea:	f7fe ff2b 	bl	10046b44 <LL_RADIO_TxHp_Disable>
  }
#endif

  LL_RADIO_SetPAPower(smNo, (uint32_t) paLevel);
10047cee:	1dbb      	adds	r3, r7, #6
10047cf0:	781a      	ldrb	r2, [r3, #0]
10047cf2:	1dfb      	adds	r3, r7, #7
10047cf4:	781b      	ldrb	r3, [r3, #0]
10047cf6:	0011      	movs	r1, r2
10047cf8:	0018      	movs	r0, r3
10047cfa:	f7fe ff5d 	bl	10046bb8 <LL_RADIO_SetPAPower>
}
10047cfe:	46c0      	nop			@ (mov r8, r8)
10047d00:	46bd      	mov	sp, r7
10047d02:	b002      	add	sp, #8
10047d04:	bd80      	pop	{r7, pc}

10047d06 <BLEPLAT_CNTR_SmSetUnmappedChan>:

void BLEPLAT_CNTR_SmSetUnmappedChan(uint8_t smNo, uint8_t chan)
{
10047d06:	b580      	push	{r7, lr}
10047d08:	b082      	sub	sp, #8
10047d0a:	af00      	add	r7, sp, #0
10047d0c:	0002      	movs	r2, r0
10047d0e:	1dfb      	adds	r3, r7, #7
10047d10:	701a      	strb	r2, [r3, #0]
10047d12:	1dbb      	adds	r3, r7, #6
10047d14:	1c0a      	adds	r2, r1, #0
10047d16:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetUnmappedChannel(smNo, (uint32_t) chan);
10047d18:	1dbb      	adds	r3, r7, #6
10047d1a:	781a      	ldrb	r2, [r3, #0]
10047d1c:	1dfb      	adds	r3, r7, #7
10047d1e:	781b      	ldrb	r3, [r3, #0]
10047d20:	0011      	movs	r1, r2
10047d22:	0018      	movs	r0, r3
10047d24:	f7fe fb2e 	bl	10046384 <LL_RADIO_SetUnmappedChannel>
}
10047d28:	46c0      	nop			@ (mov r8, r8)
10047d2a:	46bd      	mov	sp, r7
10047d2c:	b002      	add	sp, #8
10047d2e:	bd80      	pop	{r7, pc}

10047d30 <BLEPLAT_CNTR_SmToggleNesn>:

void BLEPLAT_CNTR_SmToggleNesn(uint8_t smNo)
{
10047d30:	b580      	push	{r7, lr}
10047d32:	b082      	sub	sp, #8
10047d34:	af00      	add	r7, sp, #0
10047d36:	0002      	movs	r2, r0
10047d38:	1dfb      	adds	r3, r7, #7
10047d3a:	701a      	strb	r2, [r3, #0]
  LL_RADIO_ToggleNextExpectedSequenceNumber(smNo);
10047d3c:	1dfb      	adds	r3, r7, #7
10047d3e:	781b      	ldrb	r3, [r3, #0]
10047d40:	0018      	movs	r0, r3
10047d42:	f7fe fc17 	bl	10046574 <LL_RADIO_ToggleNextExpectedSequenceNumber>
}
10047d46:	46c0      	nop			@ (mov r8, r8)
10047d48:	46bd      	mov	sp, r7
10047d4a:	b002      	add	sp, #8
10047d4c:	bd80      	pop	{r7, pc}

10047d4e <BLEPLAT_CNTR_DemodDelaySt>:
{
    return (uint32_t)(x - y);
}

uint8_t BLEPLAT_CNTR_DemodDelaySt(uint8_t RxPHY)
{
10047d4e:	b580      	push	{r7, lr}
10047d50:	b082      	sub	sp, #8
10047d52:	af00      	add	r7, sp, #0
10047d54:	0002      	movs	r2, r0
10047d56:	1dfb      	adds	r3, r7, #7
10047d58:	701a      	strb	r2, [r3, #0]
    return (uint8_t)((LL_PHY_CODED == RxPHY) ? 0x9DU : 0x12U);
10047d5a:	1dfb      	adds	r3, r7, #7
10047d5c:	781b      	ldrb	r3, [r3, #0]
10047d5e:	2b04      	cmp	r3, #4
10047d60:	d101      	bne.n	10047d66 <BLEPLAT_CNTR_DemodDelaySt+0x18>
10047d62:	239d      	movs	r3, #157	@ 0x9d
10047d64:	e000      	b.n	10047d68 <BLEPLAT_CNTR_DemodDelaySt+0x1a>
10047d66:	2312      	movs	r3, #18
}
10047d68:	0018      	movs	r0, r3
10047d6a:	46bd      	mov	sp, r7
10047d6c:	b002      	add	sp, #8
10047d6e:	bd80      	pop	{r7, pc}

10047d70 <Reset_Handler>:

	.section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
10047d70:	4810      	ldr	r0, [pc, #64]	@ (10047db4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
10047d72:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
10047d74:	f004 fd84 	bl	1004c880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
10047d78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10047d7a:	e003      	b.n	10047d84 <LoopCopyDataInit>

10047d7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
10047d7c:	4b0e      	ldr	r3, [pc, #56]	@ (10047db8 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10047d7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10047d80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10047d82:	3104      	adds	r1, #4

10047d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
10047d84:	480d      	ldr	r0, [pc, #52]	@ (10047dbc <LoopForever+0xa>)
  ldr  r3, =_edata
10047d86:	4b0e      	ldr	r3, [pc, #56]	@ (10047dc0 <LoopForever+0xe>)
  adds  r2, r0, r1
10047d88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10047d8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10047d8c:	d3f6      	bcc.n	10047d7c <CopyDataInit>
  ldr  r2, =_sbss
10047d8e:	4a0d      	ldr	r2, [pc, #52]	@ (10047dc4 <LoopForever+0x12>)
  b  LoopFillZerobss
10047d90:	e002      	b.n	10047d98 <LoopFillZerobss>

10047d92 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
10047d92:	2300      	movs	r3, #0
  str  r3, [r2]
10047d94:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10047d96:	3204      	adds	r2, #4

10047d98 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
10047d98:	4b0b      	ldr	r3, [pc, #44]	@ (10047dc8 <LoopForever+0x16>)
  cmp  r2, r3
10047d9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
10047d9c:	d3f9      	bcc.n	10047d92 <FillZerobss>
  ldr  r2, =_sbssblue
10047d9e:	4a0b      	ldr	r2, [pc, #44]	@ (10047dcc <LoopForever+0x1a>)
  b  LoopFillZeroBlueRam
10047da0:	e002      	b.n	10047da8 <LoopFillZeroBlueRam>

10047da2 <FillZerobssram>:


FillZerobssram:
  movs  r3, #0
10047da2:	2300      	movs	r3, #0
  str  r3, [r2]
10047da4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10047da6:	3204      	adds	r2, #4

10047da8 <LoopFillZeroBlueRam>:

LoopFillZeroBlueRam:
  ldr  r3, = _ebssblue
10047da8:	4b09      	ldr	r3, [pc, #36]	@ (10047dd0 <LoopForever+0x1e>)
  cmp  r2, r3
10047daa:	429a      	cmp	r2, r3
  bcc  FillZerobssram
10047dac:	d3f9      	bcc.n	10047da2 <FillZerobssram>

/* Call the application's entry point.*/
  bl  main
10047dae:	f7fb f8c5 	bl	10042f3c <main>

10047db2 <LoopForever>:

LoopForever:
    b LoopForever
10047db2:	e7fe      	b.n	10047db2 <LoopForever>
   ldr   r0, =_estack
10047db4:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
10047db8:	1006a1dc 	.word	0x1006a1dc
  ldr  r0, =_sdata
10047dbc:	20001298 	.word	0x20001298
  ldr  r3, =_edata
10047dc0:	20001554 	.word	0x20001554
  ldr  r2, =_sbss
10047dc4:	20000194 	.word	0x20000194
  ldr  r3, = _ebss
10047dc8:	20001298 	.word	0x20001298
  ldr  r2, =_sbssblue
10047dcc:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebssblue
10047dd0:	20000194 	.word	0x20000194

10047dd4 <ADC_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
10047dd4:	e7fe      	b.n	10047dd4 <ADC_IRQHandler>

10047dd6 <APP_DEBUG_SIGNAL_SET>:
/****************************/
/** Application debug APIs **/
/****************************/

void APP_DEBUG_SIGNAL_SET(app_debug_signal_t signal)
{
10047dd6:	b580      	push	{r7, lr}
10047dd8:	b082      	sub	sp, #8
10047dda:	af00      	add	r7, sp, #0
10047ddc:	0002      	movs	r2, r0
10047dde:	1dfb      	adds	r3, r7, #7
10047de0:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_SET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
10047de2:	46c0      	nop			@ (mov r8, r8)
10047de4:	46bd      	mov	sp, r7
10047de6:	b002      	add	sp, #8
10047de8:	bd80      	pop	{r7, pc}

10047dea <APP_DEBUG_SIGNAL_RESET>:
void APP_DEBUG_SIGNAL_RESET(app_debug_signal_t signal)
{
10047dea:	b580      	push	{r7, lr}
10047dec:	b082      	sub	sp, #8
10047dee:	af00      	add	r7, sp, #0
10047df0:	0002      	movs	r2, r0
10047df2:	1dfb      	adds	r3, r7, #7
10047df4:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_RESET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
10047df6:	46c0      	nop			@ (mov r8, r8)
10047df8:	46bd      	mov	sp, r7
10047dfa:	b002      	add	sp, #8
10047dfc:	bd80      	pop	{r7, pc}

10047dfe <RT_DEBUG_GPIO_Init>:
/*******************************/
/** Debug GPIO Initialization **/
/*******************************/

void RT_DEBUG_GPIO_Init(void)
{
10047dfe:	b580      	push	{r7, lr}
10047e00:	af00      	add	r7, sp, #0
      GPIO_InitStruct.Pin = general_debug_table[cpt].GPIO_pin;
      HAL_GPIO_Init(general_debug_table[cpt].GPIO_port, &GPIO_InitStruct);
    }
  }
#endif /* RT_DEBUG_GPIO_MODULE */
}
10047e02:	46c0      	nop			@ (mov r8, r8)
10047e04:	46bd      	mov	sp, r7
10047e06:	bd80      	pop	{r7, pc}

10047e08 <AES_128_HW_enc>:

/* Implementation of the AES 128 required by the crypto library. */
void AES_128_HW_enc(const uint32_t *P_pInputBuffer,
                    uint32_t *P_pOutputBuffer,
                    const uint8_t *P_pKey)
{
10047e08:	b580      	push	{r7, lr}
10047e0a:	b094      	sub	sp, #80	@ 0x50
10047e0c:	af00      	add	r7, sp, #0
10047e0e:	60f8      	str	r0, [r7, #12]
10047e10:	60b9      	str	r1, [r7, #8]
10047e12:	607a      	str	r2, [r7, #4]
  uint32_t tmp_key_32[4], input_32[4], output_32[4];
  uint8_t *tmp_key = (uint8_t *)tmp_key_32;
10047e14:	2330      	movs	r3, #48	@ 0x30
10047e16:	18fb      	adds	r3, r7, r3
10047e18:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint8_t *input = (uint8_t *)input_32;
10047e1a:	2320      	movs	r3, #32
10047e1c:	18fb      	adds	r3, r7, r3
10047e1e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t *output = (uint8_t *)output_32;
10047e20:	2310      	movs	r3, #16
10047e22:	18fb      	adds	r3, r7, r3
10047e24:	643b      	str	r3, [r7, #64]	@ 0x40
  int32_t i;

  for (i = 0; i < 16; i++)
10047e26:	2300      	movs	r3, #0
10047e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
10047e2a:	e00d      	b.n	10047e48 <AES_128_HW_enc+0x40>
  {
    tmp_key[15 - i] =  P_pKey[i];
10047e2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047e2e:	687a      	ldr	r2, [r7, #4]
10047e30:	18d2      	adds	r2, r2, r3
10047e32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047e34:	210f      	movs	r1, #15
10047e36:	1acb      	subs	r3, r1, r3
10047e38:	0019      	movs	r1, r3
10047e3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10047e3c:	185b      	adds	r3, r3, r1
10047e3e:	7812      	ldrb	r2, [r2, #0]
10047e40:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 16; i++)
10047e42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047e44:	3301      	adds	r3, #1
10047e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
10047e48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047e4a:	2b0f      	cmp	r3, #15
10047e4c:	ddee      	ble.n	10047e2c <AES_128_HW_enc+0x24>
  }

  for (i = 0; i < AES_BLOCK_SIZE; i++)
10047e4e:	2300      	movs	r3, #0
10047e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
10047e52:	e03d      	b.n	10047ed0 <AES_128_HW_enc+0xc8>
  {
    LEW32_2_BUFFER(input, i * 4, P_pInputBuffer[3 - i]);
10047e54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047e56:	2203      	movs	r2, #3
10047e58:	1ad3      	subs	r3, r2, r3
10047e5a:	009b      	lsls	r3, r3, #2
10047e5c:	68fa      	ldr	r2, [r7, #12]
10047e5e:	18d3      	adds	r3, r2, r3
10047e60:	681a      	ldr	r2, [r3, #0]
10047e62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047e64:	009b      	lsls	r3, r3, #2
10047e66:	0019      	movs	r1, r3
10047e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10047e6a:	185b      	adds	r3, r3, r1
10047e6c:	b2d2      	uxtb	r2, r2
10047e6e:	701a      	strb	r2, [r3, #0]
10047e70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047e72:	2203      	movs	r2, #3
10047e74:	1ad3      	subs	r3, r2, r3
10047e76:	009b      	lsls	r3, r3, #2
10047e78:	68fa      	ldr	r2, [r7, #12]
10047e7a:	18d3      	adds	r3, r2, r3
10047e7c:	681b      	ldr	r3, [r3, #0]
10047e7e:	0a19      	lsrs	r1, r3, #8
10047e80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047e82:	009b      	lsls	r3, r3, #2
10047e84:	3301      	adds	r3, #1
10047e86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
10047e88:	18d3      	adds	r3, r2, r3
10047e8a:	b2ca      	uxtb	r2, r1
10047e8c:	701a      	strb	r2, [r3, #0]
10047e8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047e90:	2203      	movs	r2, #3
10047e92:	1ad3      	subs	r3, r2, r3
10047e94:	009b      	lsls	r3, r3, #2
10047e96:	68fa      	ldr	r2, [r7, #12]
10047e98:	18d3      	adds	r3, r2, r3
10047e9a:	681b      	ldr	r3, [r3, #0]
10047e9c:	0c19      	lsrs	r1, r3, #16
10047e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047ea0:	009b      	lsls	r3, r3, #2
10047ea2:	3302      	adds	r3, #2
10047ea4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
10047ea6:	18d3      	adds	r3, r2, r3
10047ea8:	b2ca      	uxtb	r2, r1
10047eaa:	701a      	strb	r2, [r3, #0]
10047eac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047eae:	2203      	movs	r2, #3
10047eb0:	1ad3      	subs	r3, r2, r3
10047eb2:	009b      	lsls	r3, r3, #2
10047eb4:	68fa      	ldr	r2, [r7, #12]
10047eb6:	18d3      	adds	r3, r2, r3
10047eb8:	681b      	ldr	r3, [r3, #0]
10047eba:	0e19      	lsrs	r1, r3, #24
10047ebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047ebe:	009b      	lsls	r3, r3, #2
10047ec0:	3303      	adds	r3, #3
10047ec2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
10047ec4:	18d3      	adds	r3, r2, r3
10047ec6:	b2ca      	uxtb	r2, r1
10047ec8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCK_SIZE; i++)
10047eca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047ecc:	3301      	adds	r3, #1
10047ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
10047ed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047ed2:	2b03      	cmp	r3, #3
10047ed4:	ddbe      	ble.n	10047e54 <AES_128_HW_enc+0x4c>
  }

  HW_AES_Encrypt(input_32, tmp_key_32, output_32);
10047ed6:	2310      	movs	r3, #16
10047ed8:	18fa      	adds	r2, r7, r3
10047eda:	2330      	movs	r3, #48	@ 0x30
10047edc:	18f9      	adds	r1, r7, r3
10047ede:	2320      	movs	r3, #32
10047ee0:	18fb      	adds	r3, r7, r3
10047ee2:	0018      	movs	r0, r3
10047ee4:	f000 f894 	bl	10048010 <HW_AES_Encrypt>

  for (i = 0; i < AES_BLOCK_SIZE; i++)
10047ee8:	2300      	movs	r3, #0
10047eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
10047eec:	e028      	b.n	10047f40 <AES_128_HW_enc+0x138>
  {
    P_pOutputBuffer[3 - i] = BUFFER_2_LEW32(output, i * 4);
10047eee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047ef0:	009b      	lsls	r3, r3, #2
10047ef2:	3303      	adds	r3, #3
10047ef4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
10047ef6:	18d3      	adds	r3, r2, r3
10047ef8:	781b      	ldrb	r3, [r3, #0]
10047efa:	061a      	lsls	r2, r3, #24
10047efc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047efe:	009b      	lsls	r3, r3, #2
10047f00:	3302      	adds	r3, #2
10047f02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
10047f04:	18cb      	adds	r3, r1, r3
10047f06:	781b      	ldrb	r3, [r3, #0]
10047f08:	041b      	lsls	r3, r3, #16
10047f0a:	431a      	orrs	r2, r3
10047f0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047f0e:	009b      	lsls	r3, r3, #2
10047f10:	3301      	adds	r3, #1
10047f12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
10047f14:	18cb      	adds	r3, r1, r3
10047f16:	781b      	ldrb	r3, [r3, #0]
10047f18:	021b      	lsls	r3, r3, #8
10047f1a:	431a      	orrs	r2, r3
10047f1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047f1e:	009b      	lsls	r3, r3, #2
10047f20:	0019      	movs	r1, r3
10047f22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10047f24:	185b      	adds	r3, r3, r1
10047f26:	781b      	ldrb	r3, [r3, #0]
10047f28:	0018      	movs	r0, r3
10047f2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047f2c:	2103      	movs	r1, #3
10047f2e:	1acb      	subs	r3, r1, r3
10047f30:	009b      	lsls	r3, r3, #2
10047f32:	68b9      	ldr	r1, [r7, #8]
10047f34:	18cb      	adds	r3, r1, r3
10047f36:	4302      	orrs	r2, r0
10047f38:	601a      	str	r2, [r3, #0]
  for (i = 0; i < AES_BLOCK_SIZE; i++)
10047f3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047f3c:	3301      	adds	r3, #1
10047f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
10047f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047f42:	2b03      	cmp	r3, #3
10047f44:	ddd3      	ble.n	10047eee <AES_128_HW_enc+0xe6>
  }
}
10047f46:	46c0      	nop			@ (mov r8, r8)
10047f48:	46c0      	nop			@ (mov r8, r8)
10047f4a:	46bd      	mov	sp, r7
10047f4c:	b014      	add	sp, #80	@ 0x50
10047f4e:	bd80      	pop	{r7, pc}

10047f50 <LL_APB2_GRP1_EnableClock>:
{
10047f50:	b580      	push	{r7, lr}
10047f52:	b084      	sub	sp, #16
10047f54:	af00      	add	r7, sp, #0
10047f56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
10047f58:	4b07      	ldr	r3, [pc, #28]	@ (10047f78 <LL_APB2_GRP1_EnableClock+0x28>)
10047f5a:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10047f5c:	4b06      	ldr	r3, [pc, #24]	@ (10047f78 <LL_APB2_GRP1_EnableClock+0x28>)
10047f5e:	687a      	ldr	r2, [r7, #4]
10047f60:	430a      	orrs	r2, r1
10047f62:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10047f64:	4b04      	ldr	r3, [pc, #16]	@ (10047f78 <LL_APB2_GRP1_EnableClock+0x28>)
10047f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10047f68:	687a      	ldr	r2, [r7, #4]
10047f6a:	4013      	ands	r3, r2
10047f6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10047f6e:	68fb      	ldr	r3, [r7, #12]
}
10047f70:	46c0      	nop			@ (mov r8, r8)
10047f72:	46bd      	mov	sp, r7
10047f74:	b004      	add	sp, #16
10047f76:	bd80      	pop	{r7, pc}
10047f78:	48400000 	.word	0x48400000

10047f7c <LL_APB2_GRP1_IsEnabledClock>:
{
10047f7c:	b580      	push	{r7, lr}
10047f7e:	b082      	sub	sp, #8
10047f80:	af00      	add	r7, sp, #0
10047f82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10047f84:	4b06      	ldr	r3, [pc, #24]	@ (10047fa0 <LL_APB2_GRP1_IsEnabledClock+0x24>)
10047f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10047f88:	687a      	ldr	r2, [r7, #4]
10047f8a:	4013      	ands	r3, r2
10047f8c:	687a      	ldr	r2, [r7, #4]
10047f8e:	429a      	cmp	r2, r3
10047f90:	d101      	bne.n	10047f96 <LL_APB2_GRP1_IsEnabledClock+0x1a>
10047f92:	2301      	movs	r3, #1
10047f94:	e000      	b.n	10047f98 <LL_APB2_GRP1_IsEnabledClock+0x1c>
10047f96:	2300      	movs	r3, #0
}
10047f98:	0018      	movs	r0, r3
10047f9a:	46bd      	mov	sp, r7
10047f9c:	b002      	add	sp, #8
10047f9e:	bd80      	pop	{r7, pc}
10047fa0:	48400000 	.word	0x48400000

10047fa4 <LL_APB2_GRP1_ForceReset>:
{
10047fa4:	b580      	push	{r7, lr}
10047fa6:	b082      	sub	sp, #8
10047fa8:	af00      	add	r7, sp, #0
10047faa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10047fac:	4b04      	ldr	r3, [pc, #16]	@ (10047fc0 <LL_APB2_GRP1_ForceReset+0x1c>)
10047fae:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10047fb0:	4b03      	ldr	r3, [pc, #12]	@ (10047fc0 <LL_APB2_GRP1_ForceReset+0x1c>)
10047fb2:	687a      	ldr	r2, [r7, #4]
10047fb4:	430a      	orrs	r2, r1
10047fb6:	641a      	str	r2, [r3, #64]	@ 0x40
}
10047fb8:	46c0      	nop			@ (mov r8, r8)
10047fba:	46bd      	mov	sp, r7
10047fbc:	b002      	add	sp, #8
10047fbe:	bd80      	pop	{r7, pc}
10047fc0:	48400000 	.word	0x48400000

10047fc4 <LL_APB2_GRP1_ReleaseReset>:
{
10047fc4:	b580      	push	{r7, lr}
10047fc6:	b082      	sub	sp, #8
10047fc8:	af00      	add	r7, sp, #0
10047fca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10047fcc:	4b05      	ldr	r3, [pc, #20]	@ (10047fe4 <LL_APB2_GRP1_ReleaseReset+0x20>)
10047fce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10047fd0:	687b      	ldr	r3, [r7, #4]
10047fd2:	43d9      	mvns	r1, r3
10047fd4:	4b03      	ldr	r3, [pc, #12]	@ (10047fe4 <LL_APB2_GRP1_ReleaseReset+0x20>)
10047fd6:	400a      	ands	r2, r1
10047fd8:	641a      	str	r2, [r3, #64]	@ 0x40
}
10047fda:	46c0      	nop			@ (mov r8, r8)
10047fdc:	46bd      	mov	sp, r7
10047fde:	b002      	add	sp, #8
10047fe0:	bd80      	pop	{r7, pc}
10047fe2:	46c0      	nop			@ (mov r8, r8)
10047fe4:	48400000 	.word	0x48400000

10047fe8 <HW_AES_Init>:
/** @defgroup AES_Manager_Public_Functions Public Functions
* @{
*/

HW_AES_ResultStatus HW_AES_Init(void)
{
10047fe8:	b580      	push	{r7, lr}
10047fea:	af00      	add	r7, sp, #0
  if(!LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
10047fec:	2001      	movs	r0, #1
10047fee:	f7ff ffc5 	bl	10047f7c <LL_APB2_GRP1_IsEnabledClock>
10047ff2:	1e03      	subs	r3, r0, #0
10047ff4:	d108      	bne.n	10048008 <HW_AES_Init+0x20>
  {
    /* Peripheral reset */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_MRBLE);
10047ff6:	2001      	movs	r0, #1
10047ff8:	f7ff ffd4 	bl	10047fa4 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_MRBLE);
10047ffc:	2001      	movs	r0, #1
10047ffe:	f7ff ffe1 	bl	10047fc4 <LL_APB2_GRP1_ReleaseReset>

    /* Enable MR_BLE's clock */
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_MRBLE);
10048002:	2001      	movs	r0, #1
10048004:	f7ff ffa4 	bl	10047f50 <LL_APB2_GRP1_EnableClock>
  }
  return HW_AES_SUCCESS;
10048008:	2300      	movs	r3, #0
}
1004800a:	0018      	movs	r0, r3
1004800c:	46bd      	mov	sp, r7
1004800e:	bd80      	pop	{r7, pc}

10048010 <HW_AES_Encrypt>:
{
  return HW_AES_SUCCESS;
}

HW_AES_ResultStatus HW_AES_Encrypt(const uint32_t *plainTextData, const uint32_t *key, uint32_t *encryptedData)
{
10048010:	b590      	push	{r4, r7, lr}
10048012:	b087      	sub	sp, #28
10048014:	af00      	add	r7, sp, #0
10048016:	60f8      	str	r0, [r7, #12]
10048018:	60b9      	str	r1, [r7, #8]
1004801a:	607a      	str	r2, [r7, #4]
  /* Counter to signal interruption by a higher priority routine. */
  static volatile uint8_t start_cnt;
  uint8_t priv_start_cnt;

  start_cnt++;
1004801c:	4b31      	ldr	r3, [pc, #196]	@ (100480e4 <HW_AES_Encrypt+0xd4>)
1004801e:	781b      	ldrb	r3, [r3, #0]
10048020:	b2db      	uxtb	r3, r3
10048022:	3301      	adds	r3, #1
10048024:	b2da      	uxtb	r2, r3
10048026:	4b2f      	ldr	r3, [pc, #188]	@ (100480e4 <HW_AES_Encrypt+0xd4>)
10048028:	701a      	strb	r2, [r3, #0]

  do
  {
    priv_start_cnt = start_cnt;
1004802a:	2417      	movs	r4, #23
1004802c:	193b      	adds	r3, r7, r4
1004802e:	4a2d      	ldr	r2, [pc, #180]	@ (100480e4 <HW_AES_Encrypt+0xd4>)
10048030:	7812      	ldrb	r2, [r2, #0]
10048032:	701a      	strb	r2, [r3, #0]
    /* Starting from this point, any call to HW_AES_Encrypt will change start_cnt. */

    /* Write the Key in the BLE register */
    BLUE->MANAESKEY0REG = key[0];
10048034:	23c0      	movs	r3, #192	@ 0xc0
10048036:	05db      	lsls	r3, r3, #23
10048038:	68ba      	ldr	r2, [r7, #8]
1004803a:	6812      	ldr	r2, [r2, #0]
1004803c:	629a      	str	r2, [r3, #40]	@ 0x28
    BLUE->MANAESKEY1REG = key[1];
1004803e:	68bb      	ldr	r3, [r7, #8]
10048040:	1d1a      	adds	r2, r3, #4
10048042:	23c0      	movs	r3, #192	@ 0xc0
10048044:	05db      	lsls	r3, r3, #23
10048046:	6812      	ldr	r2, [r2, #0]
10048048:	62da      	str	r2, [r3, #44]	@ 0x2c
    BLUE->MANAESKEY2REG = key[2];
1004804a:	68bb      	ldr	r3, [r7, #8]
1004804c:	3308      	adds	r3, #8
1004804e:	001a      	movs	r2, r3
10048050:	23c0      	movs	r3, #192	@ 0xc0
10048052:	05db      	lsls	r3, r3, #23
10048054:	6812      	ldr	r2, [r2, #0]
10048056:	631a      	str	r2, [r3, #48]	@ 0x30
    BLUE->MANAESKEY3REG = key[3];
10048058:	68bb      	ldr	r3, [r7, #8]
1004805a:	330c      	adds	r3, #12
1004805c:	001a      	movs	r2, r3
1004805e:	23c0      	movs	r3, #192	@ 0xc0
10048060:	05db      	lsls	r3, r3, #23
10048062:	6812      	ldr	r2, [r2, #0]
10048064:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Write the plain text data in the BLE register */
    BLUE->MANAESCLEARTEXT0REG = plainTextData[0];
10048066:	23c0      	movs	r3, #192	@ 0xc0
10048068:	05db      	lsls	r3, r3, #23
1004806a:	68fa      	ldr	r2, [r7, #12]
1004806c:	6812      	ldr	r2, [r2, #0]
1004806e:	639a      	str	r2, [r3, #56]	@ 0x38
    BLUE->MANAESCLEARTEXT1REG = plainTextData[1];
10048070:	68fb      	ldr	r3, [r7, #12]
10048072:	1d1a      	adds	r2, r3, #4
10048074:	23c0      	movs	r3, #192	@ 0xc0
10048076:	05db      	lsls	r3, r3, #23
10048078:	6812      	ldr	r2, [r2, #0]
1004807a:	63da      	str	r2, [r3, #60]	@ 0x3c
    BLUE->MANAESCLEARTEXT2REG = plainTextData[2];
1004807c:	68fb      	ldr	r3, [r7, #12]
1004807e:	3308      	adds	r3, #8
10048080:	001a      	movs	r2, r3
10048082:	23c0      	movs	r3, #192	@ 0xc0
10048084:	05db      	lsls	r3, r3, #23
10048086:	6812      	ldr	r2, [r2, #0]
10048088:	641a      	str	r2, [r3, #64]	@ 0x40
    BLUE->MANAESCLEARTEXT3REG = plainTextData[3];
1004808a:	68fb      	ldr	r3, [r7, #12]
1004808c:	330c      	adds	r3, #12
1004808e:	001a      	movs	r2, r3
10048090:	23c0      	movs	r3, #192	@ 0xc0
10048092:	05db      	lsls	r3, r3, #23
10048094:	6812      	ldr	r2, [r2, #0]
10048096:	645a      	str	r2, [r3, #68]	@ 0x44

    HW_AES_Start();
10048098:	f000 f826 	bl	100480e8 <HW_AES_Start>

    /* Read the plain text data in the BLE register */
    encryptedData[0] = BLUE->MANAESCIPHERTEXT0REG;
1004809c:	23c0      	movs	r3, #192	@ 0xc0
1004809e:	05db      	lsls	r3, r3, #23
100480a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
100480a2:	687b      	ldr	r3, [r7, #4]
100480a4:	601a      	str	r2, [r3, #0]
    encryptedData[1] = BLUE->MANAESCIPHERTEXT1REG;
100480a6:	23c0      	movs	r3, #192	@ 0xc0
100480a8:	05da      	lsls	r2, r3, #23
100480aa:	687b      	ldr	r3, [r7, #4]
100480ac:	3304      	adds	r3, #4
100480ae:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
100480b0:	601a      	str	r2, [r3, #0]
    encryptedData[2] = BLUE->MANAESCIPHERTEXT2REG;
100480b2:	23c0      	movs	r3, #192	@ 0xc0
100480b4:	05da      	lsls	r2, r3, #23
100480b6:	687b      	ldr	r3, [r7, #4]
100480b8:	3308      	adds	r3, #8
100480ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
100480bc:	601a      	str	r2, [r3, #0]
    encryptedData[3] = BLUE->MANAESCIPHERTEXT3REG;
100480be:	23c0      	movs	r3, #192	@ 0xc0
100480c0:	05da      	lsls	r2, r3, #23
100480c2:	687b      	ldr	r3, [r7, #4]
100480c4:	330c      	adds	r3, #12
100480c6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
100480c8:	601a      	str	r2, [r3, #0]

  } while (priv_start_cnt != start_cnt);
100480ca:	4b06      	ldr	r3, [pc, #24]	@ (100480e4 <HW_AES_Encrypt+0xd4>)
100480cc:	781b      	ldrb	r3, [r3, #0]
100480ce:	b2db      	uxtb	r3, r3
100480d0:	193a      	adds	r2, r7, r4
100480d2:	7812      	ldrb	r2, [r2, #0]
100480d4:	429a      	cmp	r2, r3
100480d6:	d1a8      	bne.n	1004802a <HW_AES_Encrypt+0x1a>

  return HW_AES_SUCCESS;
100480d8:	2300      	movs	r3, #0
}
100480da:	0018      	movs	r0, r3
100480dc:	46bd      	mov	sp, r7
100480de:	b007      	add	sp, #28
100480e0:	bd90      	pop	{r4, r7, pc}
100480e2:	46c0      	nop			@ (mov r8, r8)
100480e4:	2000080c 	.word	0x2000080c

100480e8 <HW_AES_Start>:
 * @param  None
 *
 * @retval i
 */
__STATIC_INLINE uint8_t HW_AES_Start(void)
{
100480e8:	b580      	push	{r7, lr}
100480ea:	b082      	sub	sp, #8
100480ec:	af00      	add	r7, sp, #0
    volatile uint8_t i = 100U;
100480ee:	1dfb      	adds	r3, r7, #7
100480f0:	2264      	movs	r2, #100	@ 0x64
100480f2:	701a      	strb	r2, [r3, #0]

    /* Start AES encryption */
    LL_AES_StartManualEncription(BLUE);
100480f4:	23c0      	movs	r3, #192	@ 0xc0
100480f6:	05db      	lsls	r3, r3, #23
100480f8:	0018      	movs	r0, r3
100480fa:	f000 f81c 	bl	10048136 <LL_AES_StartManualEncription>
    do
    {
        i--;
100480fe:	1dfb      	adds	r3, r7, #7
10048100:	781b      	ldrb	r3, [r3, #0]
10048102:	b2db      	uxtb	r3, r3
10048104:	3b01      	subs	r3, #1
10048106:	b2da      	uxtb	r2, r3
10048108:	1dfb      	adds	r3, r7, #7
1004810a:	701a      	strb	r2, [r3, #0]
        if( !LL_AES_IsBusy(BLUE) )
1004810c:	23c0      	movs	r3, #192	@ 0xc0
1004810e:	05db      	lsls	r3, r3, #23
10048110:	0018      	movs	r0, r3
10048112:	f000 f81e 	bl	10048152 <LL_AES_IsBusy>
10048116:	1e03      	subs	r3, r0, #0
10048118:	d005      	beq.n	10048126 <HW_AES_Start+0x3e>
        {
            break;
        }
    } while (i != 0U);
1004811a:	1dfb      	adds	r3, r7, #7
1004811c:	781b      	ldrb	r3, [r3, #0]
1004811e:	b2db      	uxtb	r3, r3
10048120:	2b00      	cmp	r3, #0
10048122:	d1ec      	bne.n	100480fe <HW_AES_Start+0x16>
10048124:	e000      	b.n	10048128 <HW_AES_Start+0x40>
            break;
10048126:	46c0      	nop			@ (mov r8, r8)

    return i;
10048128:	1dfb      	adds	r3, r7, #7
1004812a:	781b      	ldrb	r3, [r3, #0]
1004812c:	b2db      	uxtb	r3, r3
}
1004812e:	0018      	movs	r0, r3
10048130:	46bd      	mov	sp, r7
10048132:	b002      	add	sp, #8
10048134:	bd80      	pop	{r7, pc}

10048136 <LL_AES_StartManualEncription>:
  * @rmtoll MANAESCMDREG          START         LL_AES_StartManualEncription
  * @param  BLUEx BLUE Instance
  * @retval None
  */
__STATIC_INLINE void LL_AES_StartManualEncription(BLUE_TypeDef *BLUEx)
{
10048136:	b580      	push	{r7, lr}
10048138:	b082      	sub	sp, #8
1004813a:	af00      	add	r7, sp, #0
1004813c:	6078      	str	r0, [r7, #4]
  SET_BIT(BLUEx->MANAESCMDREG, BLUE_MANAESCMDREG_START);
1004813e:	687b      	ldr	r3, [r7, #4]
10048140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10048142:	2201      	movs	r2, #1
10048144:	431a      	orrs	r2, r3
10048146:	687b      	ldr	r3, [r7, #4]
10048148:	659a      	str	r2, [r3, #88]	@ 0x58
}
1004814a:	46c0      	nop			@ (mov r8, r8)
1004814c:	46bd      	mov	sp, r7
1004814e:	b002      	add	sp, #8
10048150:	bd80      	pop	{r7, pc}

10048152 <LL_AES_IsBusy>:
  * @rmtoll MANAESSTATREG          BUSY         LL_AES_IsBusy
  * @param  BLUEx BLUE Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_AES_IsBusy(BLUE_TypeDef *BLUEx)
{
10048152:	b580      	push	{r7, lr}
10048154:	b082      	sub	sp, #8
10048156:	af00      	add	r7, sp, #0
10048158:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->MANAESSTATREG, BLUE_MANAESSTATREG_BUSY) == (BLUE_MANAESSTATREG_BUSY)) ? 1U : 0U);
1004815a:	687b      	ldr	r3, [r7, #4]
1004815c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004815e:	2201      	movs	r2, #1
10048160:	4013      	ands	r3, r2
10048162:	2b01      	cmp	r3, #1
10048164:	d101      	bne.n	1004816a <LL_AES_IsBusy+0x18>
10048166:	2301      	movs	r3, #1
10048168:	e000      	b.n	1004816c <LL_AES_IsBusy+0x1a>
1004816a:	2300      	movs	r3, #0
}
1004816c:	0018      	movs	r0, r3
1004816e:	46bd      	mov	sp, r7
10048170:	b002      	add	sp, #8
10048172:	bd80      	pop	{r7, pc}

10048174 <LL_PKA_Config>:
  *         @arg @ref LL_PKA_MODE_DOUBLE_BASE_LADDER
  *         @arg @ref LL_PKA_MODE_ECC_COMPLETE_ADD
  */

__STATIC_INLINE void LL_PKA_Config(PKA_TypeDef *PKAx, uint32_t Mode)
{
10048174:	b580      	push	{r7, lr}
10048176:	b082      	sub	sp, #8
10048178:	af00      	add	r7, sp, #0
1004817a:	6078      	str	r0, [r7, #4]
1004817c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(PKAx->CR, (PKA_CR_MODE), (Mode << PKA_CR_MODE_Pos));
1004817e:	687b      	ldr	r3, [r7, #4]
10048180:	681b      	ldr	r3, [r3, #0]
10048182:	4a05      	ldr	r2, [pc, #20]	@ (10048198 <LL_PKA_Config+0x24>)
10048184:	401a      	ands	r2, r3
10048186:	683b      	ldr	r3, [r7, #0]
10048188:	021b      	lsls	r3, r3, #8
1004818a:	431a      	orrs	r2, r3
1004818c:	687b      	ldr	r3, [r7, #4]
1004818e:	601a      	str	r2, [r3, #0]
}
10048190:	46c0      	nop			@ (mov r8, r8)
10048192:	46bd      	mov	sp, r7
10048194:	b002      	add	sp, #8
10048196:	bd80      	pop	{r7, pc}
10048198:	ffffc0ff 	.word	0xffffc0ff

1004819c <LL_PKA_SetMode>:
  *         @arg @ref LL_PKA_MODE_ECC_COMPLETE_ADD
  * @retval None
  */

__STATIC_INLINE void LL_PKA_SetMode(PKA_TypeDef *PKAx, uint32_t Mode)
{
1004819c:	b580      	push	{r7, lr}
1004819e:	b082      	sub	sp, #8
100481a0:	af00      	add	r7, sp, #0
100481a2:	6078      	str	r0, [r7, #4]
100481a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(PKAx->CR, PKA_CR_MODE, Mode << PKA_CR_MODE_Pos);
100481a6:	687b      	ldr	r3, [r7, #4]
100481a8:	681b      	ldr	r3, [r3, #0]
100481aa:	4a05      	ldr	r2, [pc, #20]	@ (100481c0 <LL_PKA_SetMode+0x24>)
100481ac:	401a      	ands	r2, r3
100481ae:	683b      	ldr	r3, [r7, #0]
100481b0:	021b      	lsls	r3, r3, #8
100481b2:	431a      	orrs	r2, r3
100481b4:	687b      	ldr	r3, [r7, #4]
100481b6:	601a      	str	r2, [r3, #0]
}
100481b8:	46c0      	nop			@ (mov r8, r8)
100481ba:	46bd      	mov	sp, r7
100481bc:	b002      	add	sp, #8
100481be:	bd80      	pop	{r7, pc}
100481c0:	ffffc0ff 	.word	0xffffc0ff

100481c4 <LL_PKA_SetSecurityLevel>:
  *         @arg @ref LL_PKA_SECURITY_LEVEL_ENABLE
  * @param  PKAx PKA Instance.
  * @retval NONE
  */
__STATIC_INLINE void LL_PKA_SetSecurityLevel(PKA_TypeDef *PKAx, uint32_t arg)
{
100481c4:	b580      	push	{r7, lr}
100481c6:	b082      	sub	sp, #8
100481c8:	af00      	add	r7, sp, #0
100481ca:	6078      	str	r0, [r7, #4]
100481cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(PKAx->CR, PKA_CR_SECLVL, (arg << PKA_CR_SECLVL_Pos));
100481ce:	687b      	ldr	r3, [r7, #4]
100481d0:	681b      	ldr	r3, [r3, #0]
100481d2:	2204      	movs	r2, #4
100481d4:	4393      	bics	r3, r2
100481d6:	001a      	movs	r2, r3
100481d8:	683b      	ldr	r3, [r7, #0]
100481da:	009b      	lsls	r3, r3, #2
100481dc:	431a      	orrs	r2, r3
100481de:	687b      	ldr	r3, [r7, #4]
100481e0:	601a      	str	r2, [r3, #0]
}
100481e2:	46c0      	nop			@ (mov r8, r8)
100481e4:	46bd      	mov	sp, r7
100481e6:	b002      	add	sp, #8
100481e8:	bd80      	pop	{r7, pc}

100481ea <LL_PKA_Start>:
  * @rmtoll CR           START         LL_PKA_Start
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_Start(PKA_TypeDef *PKAx)
{
100481ea:	b580      	push	{r7, lr}
100481ec:	b082      	sub	sp, #8
100481ee:	af00      	add	r7, sp, #0
100481f0:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_START);
100481f2:	687b      	ldr	r3, [r7, #4]
100481f4:	681b      	ldr	r3, [r3, #0]
100481f6:	2202      	movs	r2, #2
100481f8:	431a      	orrs	r2, r3
100481fa:	687b      	ldr	r3, [r7, #4]
100481fc:	601a      	str	r2, [r3, #0]
}
100481fe:	46c0      	nop			@ (mov r8, r8)
10048200:	46bd      	mov	sp, r7
10048202:	b002      	add	sp, #8
10048204:	bd80      	pop	{r7, pc}

10048206 <LL_PKA_EnableIT_ADDRERR>:
  * @rmtoll CR           ADDRERRIE     LL_PKA_EnableIT_ADDRERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_ADDRERR(PKA_TypeDef *PKAx)
{
10048206:	b580      	push	{r7, lr}
10048208:	b082      	sub	sp, #8
1004820a:	af00      	add	r7, sp, #0
1004820c:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_ADDRERRIE);
1004820e:	687b      	ldr	r3, [r7, #4]
10048210:	681b      	ldr	r3, [r3, #0]
10048212:	2280      	movs	r2, #128	@ 0x80
10048214:	0352      	lsls	r2, r2, #13
10048216:	431a      	orrs	r2, r3
10048218:	687b      	ldr	r3, [r7, #4]
1004821a:	601a      	str	r2, [r3, #0]
}
1004821c:	46c0      	nop			@ (mov r8, r8)
1004821e:	46bd      	mov	sp, r7
10048220:	b002      	add	sp, #8
10048222:	bd80      	pop	{r7, pc}

10048224 <LL_PKA_EnableIT_RAMERR>:
  * @rmtoll CR           RAMERRIE      LL_PKA_EnableIT_RAMERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_RAMERR(PKA_TypeDef *PKAx)
{
10048224:	b580      	push	{r7, lr}
10048226:	b082      	sub	sp, #8
10048228:	af00      	add	r7, sp, #0
1004822a:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_RAMERRIE);
1004822c:	687b      	ldr	r3, [r7, #4]
1004822e:	681b      	ldr	r3, [r3, #0]
10048230:	2280      	movs	r2, #128	@ 0x80
10048232:	0312      	lsls	r2, r2, #12
10048234:	431a      	orrs	r2, r3
10048236:	687b      	ldr	r3, [r7, #4]
10048238:	601a      	str	r2, [r3, #0]
}
1004823a:	46c0      	nop			@ (mov r8, r8)
1004823c:	46bd      	mov	sp, r7
1004823e:	b002      	add	sp, #8
10048240:	bd80      	pop	{r7, pc}

10048242 <LL_PKA_EnableIT_PROCEND>:
  * @rmtoll CR           PROCENDIE     LL_PKA_EnableIT_PROCEND
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_PROCEND(PKA_TypeDef *PKAx)
{
10048242:	b580      	push	{r7, lr}
10048244:	b082      	sub	sp, #8
10048246:	af00      	add	r7, sp, #0
10048248:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_PROCENDIE);
1004824a:	687b      	ldr	r3, [r7, #4]
1004824c:	681b      	ldr	r3, [r3, #0]
1004824e:	2280      	movs	r2, #128	@ 0x80
10048250:	0292      	lsls	r2, r2, #10
10048252:	431a      	orrs	r2, r3
10048254:	687b      	ldr	r3, [r7, #4]
10048256:	601a      	str	r2, [r3, #0]
}
10048258:	46c0      	nop			@ (mov r8, r8)
1004825a:	46bd      	mov	sp, r7
1004825c:	b002      	add	sp, #8
1004825e:	bd80      	pop	{r7, pc}

10048260 <LL_PKA_IsActiveFlag_BUSY>:
  * @rmtoll SR           BUSY          LL_PKA_IsActiveFlag_BUSY
  * @param  PKAx PKA Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PKA_IsActiveFlag_BUSY(const PKA_TypeDef *PKAx)
{
10048260:	b580      	push	{r7, lr}
10048262:	b082      	sub	sp, #8
10048264:	af00      	add	r7, sp, #0
10048266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(PKAx->SR, PKA_SR_BUSY) == (PKA_SR_BUSY)) ? 1UL : 0UL);
10048268:	687b      	ldr	r3, [r7, #4]
1004826a:	685a      	ldr	r2, [r3, #4]
1004826c:	2380      	movs	r3, #128	@ 0x80
1004826e:	025b      	lsls	r3, r3, #9
10048270:	401a      	ands	r2, r3
10048272:	2380      	movs	r3, #128	@ 0x80
10048274:	025b      	lsls	r3, r3, #9
10048276:	429a      	cmp	r2, r3
10048278:	d101      	bne.n	1004827e <LL_PKA_IsActiveFlag_BUSY+0x1e>
1004827a:	2301      	movs	r3, #1
1004827c:	e000      	b.n	10048280 <LL_PKA_IsActiveFlag_BUSY+0x20>
1004827e:	2300      	movs	r3, #0
}
10048280:	0018      	movs	r0, r3
10048282:	46bd      	mov	sp, r7
10048284:	b002      	add	sp, #8
10048286:	bd80      	pop	{r7, pc}

10048288 <HW_PKA_WriteSingleInput>:
*/

#if defined STM32WB09

void HW_PKA_WriteSingleInput( uint32_t index,  int size, const uint32_t* word )
{
10048288:	b580      	push	{r7, lr}
1004828a:	b086      	sub	sp, #24
1004828c:	af00      	add	r7, sp, #0
1004828e:	60f8      	str	r0, [r7, #12]
10048290:	60b9      	str	r1, [r7, #8]
10048292:	607a      	str	r2, [r7, #4]
  /* Write the single word into PKA RAM */
  for(int i=0; i<size; i++)
10048294:	2300      	movs	r3, #0
10048296:	617b      	str	r3, [r7, #20]
10048298:	e00e      	b.n	100482b8 <HW_PKA_WriteSingleInput+0x30>
  {
    PKA->RAM[index++] = *word++;
1004829a:	687b      	ldr	r3, [r7, #4]
1004829c:	1d1a      	adds	r2, r3, #4
1004829e:	607a      	str	r2, [r7, #4]
100482a0:	480a      	ldr	r0, [pc, #40]	@ (100482cc <HW_PKA_WriteSingleInput+0x44>)
100482a2:	68fa      	ldr	r2, [r7, #12]
100482a4:	1c51      	adds	r1, r2, #1
100482a6:	60f9      	str	r1, [r7, #12]
100482a8:	6819      	ldr	r1, [r3, #0]
100482aa:	1c53      	adds	r3, r2, #1
100482ac:	33ff      	adds	r3, #255	@ 0xff
100482ae:	009b      	lsls	r3, r3, #2
100482b0:	5019      	str	r1, [r3, r0]
  for(int i=0; i<size; i++)
100482b2:	697b      	ldr	r3, [r7, #20]
100482b4:	3301      	adds	r3, #1
100482b6:	617b      	str	r3, [r7, #20]
100482b8:	697a      	ldr	r2, [r7, #20]
100482ba:	68bb      	ldr	r3, [r7, #8]
100482bc:	429a      	cmp	r2, r3
100482be:	dbec      	blt.n	1004829a <HW_PKA_WriteSingleInput+0x12>
  }
}
100482c0:	46c0      	nop			@ (mov r8, r8)
100482c2:	46c0      	nop			@ (mov r8, r8)
100482c4:	46bd      	mov	sp, r7
100482c6:	b006      	add	sp, #24
100482c8:	bd80      	pop	{r7, pc}
100482ca:	46c0      	nop			@ (mov r8, r8)
100482cc:	48300000 	.word	0x48300000

100482d0 <HW_PKA_WriteOperand>:
#endif

#if defined STM32WB09

void HW_PKA_WriteOperand( uint32_t index, int size, const uint32_t* in )
  {
100482d0:	b580      	push	{r7, lr}
100482d2:	b086      	sub	sp, #24
100482d4:	af00      	add	r7, sp, #0
100482d6:	60f8      	str	r0, [r7, #12]
100482d8:	60b9      	str	r1, [r7, #8]
100482da:	607a      	str	r2, [r7, #4]
  uint32_t* pka_ram = (uint32_t*)&PKA->RAM[index];
100482dc:	68fb      	ldr	r3, [r7, #12]
100482de:	009b      	lsls	r3, r3, #2
100482e0:	4a0f      	ldr	r2, [pc, #60]	@ (10048320 <HW_PKA_WriteOperand+0x50>)
100482e2:	4694      	mov	ip, r2
100482e4:	4463      	add	r3, ip
100482e6:	617b      	str	r3, [r7, #20]
  /* Write the input data into PKA RAM */
  for ( ; size > 0; size-- )
100482e8:	e00a      	b.n	10048300 <HW_PKA_WriteOperand+0x30>
  {
    *pka_ram++ = *in++;
100482ea:	687a      	ldr	r2, [r7, #4]
100482ec:	1d13      	adds	r3, r2, #4
100482ee:	607b      	str	r3, [r7, #4]
100482f0:	697b      	ldr	r3, [r7, #20]
100482f2:	1d19      	adds	r1, r3, #4
100482f4:	6179      	str	r1, [r7, #20]
100482f6:	6812      	ldr	r2, [r2, #0]
100482f8:	601a      	str	r2, [r3, #0]
  for ( ; size > 0; size-- )
100482fa:	68bb      	ldr	r3, [r7, #8]
100482fc:	3b01      	subs	r3, #1
100482fe:	60bb      	str	r3, [r7, #8]
10048300:	68bb      	ldr	r3, [r7, #8]
10048302:	2b00      	cmp	r3, #0
10048304:	dcf1      	bgt.n	100482ea <HW_PKA_WriteOperand+0x1a>
  }
  /* Write extra zeros into PKA RAM */
  *pka_ram++ = 0;
10048306:	697b      	ldr	r3, [r7, #20]
10048308:	1d1a      	adds	r2, r3, #4
1004830a:	617a      	str	r2, [r7, #20]
1004830c:	2200      	movs	r2, #0
1004830e:	601a      	str	r2, [r3, #0]
  *pka_ram = 0;
10048310:	697b      	ldr	r3, [r7, #20]
10048312:	2200      	movs	r2, #0
10048314:	601a      	str	r2, [r3, #0]
}
10048316:	46c0      	nop			@ (mov r8, r8)
10048318:	46bd      	mov	sp, r7
1004831a:	b006      	add	sp, #24
1004831c:	bd80      	pop	{r7, pc}
1004831e:	46c0      	nop			@ (mov r8, r8)
10048320:	48300400 	.word	0x48300400

10048324 <HW_PKA_ReadResult>:

#endif

#if defined(STM32WB05) || defined(STM32WB09)
void HW_PKA_ReadResult( uint32_t index, int size, uint32_t* out )
{
10048324:	b580      	push	{r7, lr}
10048326:	b086      	sub	sp, #24
10048328:	af00      	add	r7, sp, #0
1004832a:	60f8      	str	r0, [r7, #12]
1004832c:	60b9      	str	r1, [r7, #8]
1004832e:	607a      	str	r2, [r7, #4]
  uint32_t* pka_ram = (uint32_t*)&PKA->RAM[index];
10048330:	68fb      	ldr	r3, [r7, #12]
10048332:	009b      	lsls	r3, r3, #2
10048334:	4a0b      	ldr	r2, [pc, #44]	@ (10048364 <HW_PKA_ReadResult+0x40>)
10048336:	4694      	mov	ip, r2
10048338:	4463      	add	r3, ip
1004833a:	617b      	str	r3, [r7, #20]
  /* Read from PKA RAM */
  for ( ; size > 0; size-- )
1004833c:	e00a      	b.n	10048354 <HW_PKA_ReadResult+0x30>
  {
    *out++ = *pka_ram++;
1004833e:	697a      	ldr	r2, [r7, #20]
10048340:	1d13      	adds	r3, r2, #4
10048342:	617b      	str	r3, [r7, #20]
10048344:	687b      	ldr	r3, [r7, #4]
10048346:	1d19      	adds	r1, r3, #4
10048348:	6079      	str	r1, [r7, #4]
1004834a:	6812      	ldr	r2, [r2, #0]
1004834c:	601a      	str	r2, [r3, #0]
  for ( ; size > 0; size-- )
1004834e:	68bb      	ldr	r3, [r7, #8]
10048350:	3b01      	subs	r3, #1
10048352:	60bb      	str	r3, [r7, #8]
10048354:	68bb      	ldr	r3, [r7, #8]
10048356:	2b00      	cmp	r3, #0
10048358:	dcf1      	bgt.n	1004833e <HW_PKA_ReadResult+0x1a>
  }
}
1004835a:	46c0      	nop			@ (mov r8, r8)
1004835c:	46c0      	nop			@ (mov r8, r8)
1004835e:	46bd      	mov	sp, r7
10048360:	b006      	add	sp, #24
10048362:	bd80      	pop	{r7, pc}
10048364:	48300400 	.word	0x48300400

10048368 <HW_PKA_Init>:
}

#endif /* STM32WB06 STM32WB07 */

void HW_PKA_Init(void)
{
10048368:	b580      	push	{r7, lr}
1004836a:	af00      	add	r7, sp, #0
  PKAMGR_Init();
1004836c:	f002 fe2e 	bl	1004afcc <PKAMGR_Init>
  /* Activate interrupts */
  LL_PKA_EnableIT_ADDRERR(PKA);
10048370:	4b07      	ldr	r3, [pc, #28]	@ (10048390 <HW_PKA_Init+0x28>)
10048372:	0018      	movs	r0, r3
10048374:	f7ff ff47 	bl	10048206 <LL_PKA_EnableIT_ADDRERR>
  LL_PKA_EnableIT_RAMERR(PKA);
10048378:	4b05      	ldr	r3, [pc, #20]	@ (10048390 <HW_PKA_Init+0x28>)
1004837a:	0018      	movs	r0, r3
1004837c:	f7ff ff52 	bl	10048224 <LL_PKA_EnableIT_RAMERR>
  LL_PKA_EnableIT_PROCEND(PKA);
10048380:	4b03      	ldr	r3, [pc, #12]	@ (10048390 <HW_PKA_Init+0x28>)
10048382:	0018      	movs	r0, r3
10048384:	f7ff ff5d 	bl	10048242 <LL_PKA_EnableIT_PROCEND>
}
10048388:	46c0      	nop			@ (mov r8, r8)
1004838a:	46bd      	mov	sp, r7
1004838c:	bd80      	pop	{r7, pc}
1004838e:	46c0      	nop			@ (mov r8, r8)
10048390:	48300000 	.word	0x48300000

10048394 <HW_PKA_PowerSaveLevelCheck>:

uint8_t HW_PKA_PowerSaveLevelCheck(void)
{
10048394:	b580      	push	{r7, lr}
10048396:	af00      	add	r7, sp, #0
  if(PKAMGR_SleepCheck()==PKAMGR_SUCCESS)
10048398:	f002 fe24 	bl	1004afe4 <PKAMGR_SleepCheck>
1004839c:	1e03      	subs	r3, r0, #0
1004839e:	d101      	bne.n	100483a4 <HW_PKA_PowerSaveLevelCheck+0x10>
  {
    return POWER_SAVE_LEVEL_STOP;
100483a0:	2303      	movs	r3, #3
100483a2:	e000      	b.n	100483a6 <HW_PKA_PowerSaveLevelCheck+0x12>
  }
  else // PKA on going
  {
    return POWER_SAVE_LEVEL_CPU_HALT;
100483a4:	2301      	movs	r3, #1
  }
}
100483a6:	0018      	movs	r0, r3
100483a8:	46bd      	mov	sp, r7
100483aa:	bd80      	pop	{r7, pc}

100483ac <HW_PKA_StartP256DHkeyGeneration>:
  * @param
  * @param
  *
  */
PKAMGR_ResultStatus HW_PKA_StartP256DHkeyGeneration(const uint32_t* secretKey, const uint32_t* publicKey, PKAMGR_funcCB funcCB)
{
100483ac:	b580      	push	{r7, lr}
100483ae:	b086      	sub	sp, #24
100483b0:	af00      	add	r7, sp, #0
100483b2:	60f8      	str	r0, [r7, #12]
100483b4:	60b9      	str	r1, [r7, #8]
100483b6:	607a      	str	r2, [r7, #4]
  /* Set the PKA internal state to busy */
  if(PKAMGR_Lock()!=PKAMGR_SUCCESS)
100483b8:	f002 fe2a 	bl	1004b010 <PKAMGR_Lock>
100483bc:	1e03      	subs	r3, r0, #0
100483be:	d002      	beq.n	100483c6 <HW_PKA_StartP256DHkeyGeneration+0x1a>
    return PKAMGR_ERR_BUSY;
100483c0:	2302      	movs	r3, #2
100483c2:	425b      	negs	r3, r3
100483c4:	e096      	b.n	100484f4 <HW_PKA_StartP256DHkeyGeneration+0x148>

  HW_PKA_funcCB_LP = funcCB;
100483c6:	4b4d      	ldr	r3, [pc, #308]	@ (100484fc <HW_PKA_StartP256DHkeyGeneration+0x150>)
100483c8:	687a      	ldr	r2, [r7, #4]
100483ca:	601a      	str	r2, [r3, #0]
#if defined(STM32WB09) || defined(STM32WB05)
  /* Save input data */
  for(int i=0;i<8;i++)
100483cc:	2300      	movs	r3, #0
100483ce:	617b      	str	r3, [r7, #20]
100483d0:	e00b      	b.n	100483ea <HW_PKA_StartP256DHkeyGeneration+0x3e>
    bufferSecretKey[i] = secretKey[i];
100483d2:	697b      	ldr	r3, [r7, #20]
100483d4:	009b      	lsls	r3, r3, #2
100483d6:	68fa      	ldr	r2, [r7, #12]
100483d8:	18d3      	adds	r3, r2, r3
100483da:	6819      	ldr	r1, [r3, #0]
100483dc:	4b48      	ldr	r3, [pc, #288]	@ (10048500 <HW_PKA_StartP256DHkeyGeneration+0x154>)
100483de:	697a      	ldr	r2, [r7, #20]
100483e0:	0092      	lsls	r2, r2, #2
100483e2:	50d1      	str	r1, [r2, r3]
  for(int i=0;i<8;i++)
100483e4:	697b      	ldr	r3, [r7, #20]
100483e6:	3301      	adds	r3, #1
100483e8:	617b      	str	r3, [r7, #20]
100483ea:	697b      	ldr	r3, [r7, #20]
100483ec:	2b07      	cmp	r3, #7
100483ee:	ddf0      	ble.n	100483d2 <HW_PKA_StartP256DHkeyGeneration+0x26>
  for(int i=0;i<16;i++)
100483f0:	2300      	movs	r3, #0
100483f2:	613b      	str	r3, [r7, #16]
100483f4:	e00b      	b.n	1004840e <HW_PKA_StartP256DHkeyGeneration+0x62>
    bufferPublicKey[i] = publicKey[i];
100483f6:	693b      	ldr	r3, [r7, #16]
100483f8:	009b      	lsls	r3, r3, #2
100483fa:	68ba      	ldr	r2, [r7, #8]
100483fc:	18d3      	adds	r3, r2, r3
100483fe:	6819      	ldr	r1, [r3, #0]
10048400:	4b40      	ldr	r3, [pc, #256]	@ (10048504 <HW_PKA_StartP256DHkeyGeneration+0x158>)
10048402:	693a      	ldr	r2, [r7, #16]
10048404:	0092      	lsls	r2, r2, #2
10048406:	50d1      	str	r1, [r2, r3]
  for(int i=0;i<16;i++)
10048408:	693b      	ldr	r3, [r7, #16]
1004840a:	3301      	adds	r3, #1
1004840c:	613b      	str	r3, [r7, #16]
1004840e:	693b      	ldr	r3, [r7, #16]
10048410:	2b0f      	cmp	r3, #15
10048412:	ddf0      	ble.n	100483f6 <HW_PKA_StartP256DHkeyGeneration+0x4a>

  if(HW_PKA_isStartPoint(publicKey))
10048414:	68bb      	ldr	r3, [r7, #8]
10048416:	0018      	movs	r0, r3
10048418:	f000 fa8e 	bl	10048938 <HW_PKA_isStartPoint>
1004841c:	1e03      	subs	r3, r0, #0
1004841e:	d00e      	beq.n	1004843e <HW_PKA_StartP256DHkeyGeneration+0x92>
  {
    /* p256 public key generation */
    internalStateMachine_Step = HW_PKA_STEP_3;
10048420:	4b39      	ldr	r3, [pc, #228]	@ (10048508 <HW_PKA_StartP256DHkeyGeneration+0x15c>)
10048422:	2203      	movs	r2, #3
10048424:	601a      	str	r2, [r3, #0]
    internalStateMachine_Operation = HW_PKA_OPERATION_P256;
10048426:	4b39      	ldr	r3, [pc, #228]	@ (1004850c <HW_PKA_StartP256DHkeyGeneration+0x160>)
10048428:	2201      	movs	r2, #1
1004842a:	601a      	str	r2, [r3, #0]
    HW_PKA_P256_StartEccScalarMul( secretKey, (uint32_t *)&publicKey[0], (uint32_t *)&publicKey[8] );
1004842c:	68bb      	ldr	r3, [r7, #8]
1004842e:	3320      	adds	r3, #32
10048430:	001a      	movs	r2, r3
10048432:	68b9      	ldr	r1, [r7, #8]
10048434:	68fb      	ldr	r3, [r7, #12]
10048436:	0018      	movs	r0, r3
10048438:	f000 f976 	bl	10048728 <HW_PKA_P256_StartEccScalarMul>
1004843c:	e059      	b.n	100484f2 <HW_PKA_StartP256DHkeyGeneration+0x146>
  }
  else
  {
    /* p256 dhkey generation */
    internalStateMachine_Step = HW_PKA_STEP_0;
1004843e:	4b32      	ldr	r3, [pc, #200]	@ (10048508 <HW_PKA_StartP256DHkeyGeneration+0x15c>)
10048440:	2200      	movs	r2, #0
10048442:	601a      	str	r2, [r3, #0]
    internalStateMachine_Operation = HW_PKA_OPERATION_P256;
10048444:	4b31      	ldr	r3, [pc, #196]	@ (1004850c <HW_PKA_StartP256DHkeyGeneration+0x160>)
10048446:	2201      	movs	r2, #1
10048448:	601a      	str	r2, [r3, #0]
    /* Call the PKA range check operation for public key X coordinate */
    HW_PKA_Comparison(HW_PKA_oplen, (uint32_t *)&publicKey[0], HW_PKA_P256_gfp);
1004844a:	4a31      	ldr	r2, [pc, #196]	@ (10048510 <HW_PKA_StartP256DHkeyGeneration+0x164>)
1004844c:	68b9      	ldr	r1, [r7, #8]
1004844e:	4b31      	ldr	r3, [pc, #196]	@ (10048514 <HW_PKA_StartP256DHkeyGeneration+0x168>)
10048450:	0018      	movs	r0, r3
10048452:	f000 f9cd 	bl	100487f0 <HW_PKA_Comparison>

#if !defined(ASYNC_MODE)
    // blocking mode (initial check steps interval time: 0.476ms)
    while(internalStateMachine_Step!=HW_PKA_STEP_1);
10048456:	46c0      	nop			@ (mov r8, r8)
10048458:	4b2b      	ldr	r3, [pc, #172]	@ (10048508 <HW_PKA_StartP256DHkeyGeneration+0x15c>)
1004845a:	681b      	ldr	r3, [r3, #0]
1004845c:	2b01      	cmp	r3, #1
1004845e:	d1fb      	bne.n	10048458 <HW_PKA_StartP256DHkeyGeneration+0xac>

    /* Test result of range check operation for public key X coordinate */
    if( !HW_PKA_IsRangeCheckOk() )
10048460:	f000 f942 	bl	100486e8 <HW_PKA_IsRangeCheckOk>
10048464:	1e03      	subs	r3, r0, #0
10048466:	d10a      	bne.n	1004847e <HW_PKA_StartP256DHkeyGeneration+0xd2>
    {
      internalStateMachine_Operation = HW_PKA_OPERATION_NONE;
10048468:	4b28      	ldr	r3, [pc, #160]	@ (1004850c <HW_PKA_StartP256DHkeyGeneration+0x160>)
1004846a:	2200      	movs	r2, #0
1004846c:	601a      	str	r2, [r3, #0]
      internalStateMachine_Step = HW_PKA_STEP_0;
1004846e:	4b26      	ldr	r3, [pc, #152]	@ (10048508 <HW_PKA_StartP256DHkeyGeneration+0x15c>)
10048470:	2200      	movs	r2, #0
10048472:	601a      	str	r2, [r3, #0]
      PKAMGR_Unlock();
10048474:	f002 fdf6 	bl	1004b064 <PKAMGR_Unlock>
      return PKAMGR_ERR_PARAM;
10048478:	2303      	movs	r3, #3
1004847a:	425b      	negs	r3, r3
1004847c:	e03a      	b.n	100484f4 <HW_PKA_StartP256DHkeyGeneration+0x148>
    }
    else
    {
      /* Call the PKA range check operation for public key Y coordinate */
      HW_PKA_Comparison(HW_PKA_oplen, (uint32_t *)&bufferPublicKey[8], HW_PKA_P256_gfp);
1004847e:	4a24      	ldr	r2, [pc, #144]	@ (10048510 <HW_PKA_StartP256DHkeyGeneration+0x164>)
10048480:	4925      	ldr	r1, [pc, #148]	@ (10048518 <HW_PKA_StartP256DHkeyGeneration+0x16c>)
10048482:	4b24      	ldr	r3, [pc, #144]	@ (10048514 <HW_PKA_StartP256DHkeyGeneration+0x168>)
10048484:	0018      	movs	r0, r3
10048486:	f000 f9b3 	bl	100487f0 <HW_PKA_Comparison>
    }

    while(internalStateMachine_Step!=HW_PKA_STEP_2);
1004848a:	46c0      	nop			@ (mov r8, r8)
1004848c:	4b1e      	ldr	r3, [pc, #120]	@ (10048508 <HW_PKA_StartP256DHkeyGeneration+0x15c>)
1004848e:	681b      	ldr	r3, [r3, #0]
10048490:	2b02      	cmp	r3, #2
10048492:	d1fb      	bne.n	1004848c <HW_PKA_StartP256DHkeyGeneration+0xe0>

    /* Test result of range check operation for public key X coordinate */
    if( !HW_PKA_IsRangeCheckOk() )
10048494:	f000 f928 	bl	100486e8 <HW_PKA_IsRangeCheckOk>
10048498:	1e03      	subs	r3, r0, #0
1004849a:	d10a      	bne.n	100484b2 <HW_PKA_StartP256DHkeyGeneration+0x106>
    {
      internalStateMachine_Operation = HW_PKA_OPERATION_NONE;
1004849c:	4b1b      	ldr	r3, [pc, #108]	@ (1004850c <HW_PKA_StartP256DHkeyGeneration+0x160>)
1004849e:	2200      	movs	r2, #0
100484a0:	601a      	str	r2, [r3, #0]
      internalStateMachine_Step = HW_PKA_STEP_0;
100484a2:	4b19      	ldr	r3, [pc, #100]	@ (10048508 <HW_PKA_StartP256DHkeyGeneration+0x15c>)
100484a4:	2200      	movs	r2, #0
100484a6:	601a      	str	r2, [r3, #0]
      PKAMGR_Unlock();
100484a8:	f002 fddc 	bl	1004b064 <PKAMGR_Unlock>
      return PKAMGR_ERR_PARAM;
100484ac:	2303      	movs	r3, #3
100484ae:	425b      	negs	r3, r3
100484b0:	e020      	b.n	100484f4 <HW_PKA_StartP256DHkeyGeneration+0x148>
    }
    else
    {
      /* Call the PKA point check operation for remote public key */
      HW_PKA_P256_StartPointCheck( (uint32_t *)&bufferPublicKey[0], (uint32_t *)&bufferPublicKey[8] );
100484b2:	4a19      	ldr	r2, [pc, #100]	@ (10048518 <HW_PKA_StartP256DHkeyGeneration+0x16c>)
100484b4:	4b13      	ldr	r3, [pc, #76]	@ (10048504 <HW_PKA_StartP256DHkeyGeneration+0x158>)
100484b6:	0011      	movs	r1, r2
100484b8:	0018      	movs	r0, r3
100484ba:	f000 f9c9 	bl	10048850 <HW_PKA_P256_StartPointCheck>
    }

    while(internalStateMachine_Step!=HW_PKA_STEP_3);
100484be:	46c0      	nop			@ (mov r8, r8)
100484c0:	4b11      	ldr	r3, [pc, #68]	@ (10048508 <HW_PKA_StartP256DHkeyGeneration+0x15c>)
100484c2:	681b      	ldr	r3, [r3, #0]
100484c4:	2b03      	cmp	r3, #3
100484c6:	d1fb      	bne.n	100484c0 <HW_PKA_StartP256DHkeyGeneration+0x114>

    /* Test result of point check operation for remote public key */
    if ( !HW_PKA_IsPointCheckOk() )
100484c8:	f000 f8ee 	bl	100486a8 <HW_PKA_IsPointCheckOk>
100484cc:	1e03      	subs	r3, r0, #0
100484ce:	d10a      	bne.n	100484e6 <HW_PKA_StartP256DHkeyGeneration+0x13a>
    {
      internalStateMachine_Operation = HW_PKA_OPERATION_NONE;
100484d0:	4b0e      	ldr	r3, [pc, #56]	@ (1004850c <HW_PKA_StartP256DHkeyGeneration+0x160>)
100484d2:	2200      	movs	r2, #0
100484d4:	601a      	str	r2, [r3, #0]
      internalStateMachine_Step = HW_PKA_STEP_0;
100484d6:	4b0c      	ldr	r3, [pc, #48]	@ (10048508 <HW_PKA_StartP256DHkeyGeneration+0x15c>)
100484d8:	2200      	movs	r2, #0
100484da:	601a      	str	r2, [r3, #0]
      PKAMGR_Unlock();
100484dc:	f002 fdc2 	bl	1004b064 <PKAMGR_Unlock>
      return PKAMGR_ERR_PARAM;
100484e0:	2303      	movs	r3, #3
100484e2:	425b      	negs	r3, r3
100484e4:	e006      	b.n	100484f4 <HW_PKA_StartP256DHkeyGeneration+0x148>
    else
    {
      /* Call the PKA scalar multiplication with the local private key
         as k and the remote public key as starting point,
         in order to compute the DH key */
      HW_PKA_P256_StartEccScalarMul( (uint32_t *)&bufferSecretKey[0], (uint32_t *)&bufferPublicKey[0], (uint32_t *)&bufferPublicKey[8] );
100484e6:	4a0c      	ldr	r2, [pc, #48]	@ (10048518 <HW_PKA_StartP256DHkeyGeneration+0x16c>)
100484e8:	4906      	ldr	r1, [pc, #24]	@ (10048504 <HW_PKA_StartP256DHkeyGeneration+0x158>)
100484ea:	4b05      	ldr	r3, [pc, #20]	@ (10048500 <HW_PKA_StartP256DHkeyGeneration+0x154>)
100484ec:	0018      	movs	r0, r3
100484ee:	f000 f91b 	bl	10048728 <HW_PKA_P256_StartEccScalarMul>

  /* Launch the computation in interrupt mode */
  LL_PKA_Start(PKA);
#endif /* STM32WB06 STM32WB07 */

  return PKAMGR_SUCCESS;
100484f2:	2300      	movs	r3, #0
}
100484f4:	0018      	movs	r0, r3
100484f6:	46bd      	mov	sp, r7
100484f8:	b006      	add	sp, #24
100484fa:	bd80      	pop	{r7, pc}
100484fc:	200008d8 	.word	0x200008d8
10048500:	20000878 	.word	0x20000878
10048504:	20000898 	.word	0x20000898
10048508:	20000874 	.word	0x20000874
1004850c:	20000870 	.word	0x20000870
10048510:	10069c38 	.word	0x10069c38
10048514:	10069c18 	.word	0x10069c18
10048518:	200008b8 	.word	0x200008b8

1004851c <HW_PKA_ExitWithError>:
  * @param
  * @param
  *
  */
void HW_PKA_ExitWithError(uint32_t errorCode)
{
1004851c:	b580      	push	{r7, lr}
1004851e:	b084      	sub	sp, #16
10048520:	af00      	add	r7, sp, #0
10048522:	6078      	str	r0, [r7, #4]
  internalStateMachine_Operation = 0;
10048524:	4b14      	ldr	r3, [pc, #80]	@ (10048578 <HW_PKA_ExitWithError+0x5c>)
10048526:	2200      	movs	r2, #0
10048528:	601a      	str	r2, [r3, #0]
  internalStateMachine_Step = 0;
1004852a:	4b14      	ldr	r3, [pc, #80]	@ (1004857c <HW_PKA_ExitWithError+0x60>)
1004852c:	2200      	movs	r2, #0
1004852e:	601a      	str	r2, [r3, #0]
  PKAMGR_Unlock();
10048530:	f002 fd98 	bl	1004b064 <PKAMGR_Unlock>
  ret[0]=errorCode;
10048534:	4b12      	ldr	r3, [pc, #72]	@ (10048580 <HW_PKA_ExitWithError+0x64>)
10048536:	687a      	ldr	r2, [r7, #4]
10048538:	601a      	str	r2, [r3, #0]
  for(int i=0; i<8; i++)
1004853a:	2300      	movs	r3, #0
1004853c:	60fb      	str	r3, [r7, #12]
1004853e:	e00c      	b.n	1004855a <HW_PKA_ExitWithError+0x3e>
  {
    ret[i+16] = bufferSecretKey[i];
10048540:	68fb      	ldr	r3, [r7, #12]
10048542:	3310      	adds	r3, #16
10048544:	001a      	movs	r2, r3
10048546:	4b0f      	ldr	r3, [pc, #60]	@ (10048584 <HW_PKA_ExitWithError+0x68>)
10048548:	68f9      	ldr	r1, [r7, #12]
1004854a:	0089      	lsls	r1, r1, #2
1004854c:	58c9      	ldr	r1, [r1, r3]
1004854e:	4b0c      	ldr	r3, [pc, #48]	@ (10048580 <HW_PKA_ExitWithError+0x64>)
10048550:	0092      	lsls	r2, r2, #2
10048552:	50d1      	str	r1, [r2, r3]
  for(int i=0; i<8; i++)
10048554:	68fb      	ldr	r3, [r7, #12]
10048556:	3301      	adds	r3, #1
10048558:	60fb      	str	r3, [r7, #12]
1004855a:	68fb      	ldr	r3, [r7, #12]
1004855c:	2b07      	cmp	r3, #7
1004855e:	ddef      	ble.n	10048540 <HW_PKA_ExitWithError+0x24>
  }
  HW_PKA_funcCB_LP(PKAMGR_ERROR, ret);
10048560:	4b09      	ldr	r3, [pc, #36]	@ (10048588 <HW_PKA_ExitWithError+0x6c>)
10048562:	681b      	ldr	r3, [r3, #0]
10048564:	4906      	ldr	r1, [pc, #24]	@ (10048580 <HW_PKA_ExitWithError+0x64>)
10048566:	2201      	movs	r2, #1
10048568:	4252      	negs	r2, r2
1004856a:	0010      	movs	r0, r2
1004856c:	4798      	blx	r3
}
1004856e:	46c0      	nop			@ (mov r8, r8)
10048570:	46bd      	mov	sp, r7
10048572:	b004      	add	sp, #16
10048574:	bd80      	pop	{r7, pc}
10048576:	46c0      	nop			@ (mov r8, r8)
10048578:	20000870 	.word	0x20000870
1004857c:	20000874 	.word	0x20000874
10048580:	20000810 	.word	0x20000810
10048584:	20000878 	.word	0x20000878
10048588:	200008d8 	.word	0x200008d8

1004858c <HW_PKA_ProcEnd_StateMachine>:
  * @param
  * @param
  *
  */
void HW_PKA_ProcEnd_StateMachine(void)
{
1004858c:	b580      	push	{r7, lr}
1004858e:	b082      	sub	sp, #8
10048590:	af00      	add	r7, sp, #0
  if(internalStateMachine_Operation == HW_PKA_OPERATION_P256)
10048592:	4b2f      	ldr	r3, [pc, #188]	@ (10048650 <HW_PKA_ProcEnd_StateMachine+0xc4>)
10048594:	681b      	ldr	r3, [r3, #0]
10048596:	2b01      	cmp	r3, #1
10048598:	d155      	bne.n	10048646 <HW_PKA_ProcEnd_StateMachine+0xba>
  {
    switch(internalStateMachine_Step)
1004859a:	4b2e      	ldr	r3, [pc, #184]	@ (10048654 <HW_PKA_ProcEnd_StateMachine+0xc8>)
1004859c:	681b      	ldr	r3, [r3, #0]
1004859e:	2b0e      	cmp	r3, #14
100485a0:	d84d      	bhi.n	1004863e <HW_PKA_ProcEnd_StateMachine+0xb2>
100485a2:	009a      	lsls	r2, r3, #2
100485a4:	4b2c      	ldr	r3, [pc, #176]	@ (10048658 <HW_PKA_ProcEnd_StateMachine+0xcc>)
100485a6:	18d3      	adds	r3, r2, r3
100485a8:	681b      	ldr	r3, [r3, #0]
100485aa:	469f      	mov	pc, r3
    {
      case HW_PKA_STEP_0:
        internalStateMachine_Step = HW_PKA_STEP_1;
100485ac:	4b29      	ldr	r3, [pc, #164]	@ (10048654 <HW_PKA_ProcEnd_StateMachine+0xc8>)
100485ae:	2201      	movs	r2, #1
100485b0:	601a      	str	r2, [r3, #0]

      break;
100485b2:	e048      	b.n	10048646 <HW_PKA_ProcEnd_StateMachine+0xba>
      case HW_PKA_STEP_1:
        internalStateMachine_Step = HW_PKA_STEP_2;
100485b4:	4b27      	ldr	r3, [pc, #156]	@ (10048654 <HW_PKA_ProcEnd_StateMachine+0xc8>)
100485b6:	2202      	movs	r2, #2
100485b8:	601a      	str	r2, [r3, #0]
        break;
100485ba:	e044      	b.n	10048646 <HW_PKA_ProcEnd_StateMachine+0xba>
      case HW_PKA_STEP_2:
          internalStateMachine_Step = HW_PKA_STEP_3;
100485bc:	4b25      	ldr	r3, [pc, #148]	@ (10048654 <HW_PKA_ProcEnd_StateMachine+0xc8>)
100485be:	2203      	movs	r2, #3
100485c0:	601a      	str	r2, [r3, #0]
          break;
100485c2:	e040      	b.n	10048646 <HW_PKA_ProcEnd_StateMachine+0xba>
      case HW_PKA_STEP_3:
            /* Read the PKA scalar multiplication result which is the DH key */
            for(int i=0;i<8;i++)
100485c4:	2300      	movs	r3, #0
100485c6:	607b      	str	r3, [r7, #4]
100485c8:	e00a      	b.n	100485e0 <HW_PKA_ProcEnd_StateMachine+0x54>
              ret[i] = bufferSecretKey[i];
100485ca:	4b24      	ldr	r3, [pc, #144]	@ (1004865c <HW_PKA_ProcEnd_StateMachine+0xd0>)
100485cc:	687a      	ldr	r2, [r7, #4]
100485ce:	0092      	lsls	r2, r2, #2
100485d0:	58d1      	ldr	r1, [r2, r3]
100485d2:	4b23      	ldr	r3, [pc, #140]	@ (10048660 <HW_PKA_ProcEnd_StateMachine+0xd4>)
100485d4:	687a      	ldr	r2, [r7, #4]
100485d6:	0092      	lsls	r2, r2, #2
100485d8:	50d1      	str	r1, [r2, r3]
            for(int i=0;i<8;i++)
100485da:	687b      	ldr	r3, [r7, #4]
100485dc:	3301      	adds	r3, #1
100485de:	607b      	str	r3, [r7, #4]
100485e0:	687b      	ldr	r3, [r7, #4]
100485e2:	2b07      	cmp	r3, #7
100485e4:	ddf1      	ble.n	100485ca <HW_PKA_ProcEnd_StateMachine+0x3e>
            HW_PKA_P256_ReadEccScalarMul( (uint32_t *)&ret[8], (uint32_t *)&ret[16] );
100485e6:	4a1f      	ldr	r2, [pc, #124]	@ (10048664 <HW_PKA_ProcEnd_StateMachine+0xd8>)
100485e8:	4b1f      	ldr	r3, [pc, #124]	@ (10048668 <HW_PKA_ProcEnd_StateMachine+0xdc>)
100485ea:	0011      	movs	r1, r2
100485ec:	0018      	movs	r0, r3
100485ee:	f000 f987 	bl	10048900 <HW_PKA_P256_ReadEccScalarMul>
#ifdef STM32WB09
            internalStateMachine_Step = HW_PKA_STEP_END_SUCCESS;
100485f2:	4b18      	ldr	r3, [pc, #96]	@ (10048654 <HW_PKA_ProcEnd_StateMachine+0xc8>)
100485f4:	220e      	movs	r2, #14
100485f6:	601a      	str	r2, [r3, #0]
            HW_PKA_ProcEnd_StateMachine();
100485f8:	f7ff ffc8 	bl	1004858c <HW_PKA_ProcEnd_StateMachine>
         {
           internalStateMachine_Step = HW_PKA_STEP_END_SUCCESS;
           HW_PKA_ProcEnd_StateMachine();
         }
#endif /* STM32WB05 */
          break;
100485fc:	e023      	b.n	10048646 <HW_PKA_ProcEnd_StateMachine+0xba>
       case HW_PKA_STEP_END_SUCCESS:
          internalStateMachine_Operation = HW_PKA_OPERATION_NONE;
100485fe:	4b14      	ldr	r3, [pc, #80]	@ (10048650 <HW_PKA_ProcEnd_StateMachine+0xc4>)
10048600:	2200      	movs	r2, #0
10048602:	601a      	str	r2, [r3, #0]
          internalStateMachine_Step = HW_PKA_STEP_0;
10048604:	4b13      	ldr	r3, [pc, #76]	@ (10048654 <HW_PKA_ProcEnd_StateMachine+0xc8>)
10048606:	2200      	movs	r2, #0
10048608:	601a      	str	r2, [r3, #0]
          PKAMGR_Unlock();
1004860a:	f002 fd2b 	bl	1004b064 <PKAMGR_Unlock>
          for(int i=0;i<8;i++)
1004860e:	2300      	movs	r3, #0
10048610:	603b      	str	r3, [r7, #0]
10048612:	e00a      	b.n	1004862a <HW_PKA_ProcEnd_StateMachine+0x9e>
            ret[i] = bufferSecretKey[i];
10048614:	4b11      	ldr	r3, [pc, #68]	@ (1004865c <HW_PKA_ProcEnd_StateMachine+0xd0>)
10048616:	683a      	ldr	r2, [r7, #0]
10048618:	0092      	lsls	r2, r2, #2
1004861a:	58d1      	ldr	r1, [r2, r3]
1004861c:	4b10      	ldr	r3, [pc, #64]	@ (10048660 <HW_PKA_ProcEnd_StateMachine+0xd4>)
1004861e:	683a      	ldr	r2, [r7, #0]
10048620:	0092      	lsls	r2, r2, #2
10048622:	50d1      	str	r1, [r2, r3]
          for(int i=0;i<8;i++)
10048624:	683b      	ldr	r3, [r7, #0]
10048626:	3301      	adds	r3, #1
10048628:	603b      	str	r3, [r7, #0]
1004862a:	683b      	ldr	r3, [r7, #0]
1004862c:	2b07      	cmp	r3, #7
1004862e:	ddf1      	ble.n	10048614 <HW_PKA_ProcEnd_StateMachine+0x88>
          HW_PKA_funcCB_LP(PKAMGR_SUCCESS, ret);
10048630:	4b0e      	ldr	r3, [pc, #56]	@ (1004866c <HW_PKA_ProcEnd_StateMachine+0xe0>)
10048632:	681b      	ldr	r3, [r3, #0]
10048634:	4a0a      	ldr	r2, [pc, #40]	@ (10048660 <HW_PKA_ProcEnd_StateMachine+0xd4>)
10048636:	0011      	movs	r1, r2
10048638:	2000      	movs	r0, #0
1004863a:	4798      	blx	r3
          break;
1004863c:	e003      	b.n	10048646 <HW_PKA_ProcEnd_StateMachine+0xba>
       default:
          HW_PKA_ExitWithError(0xA0);
1004863e:	20a0      	movs	r0, #160	@ 0xa0
10048640:	f7ff ff6c 	bl	1004851c <HW_PKA_ExitWithError>
    }
  }
}
10048644:	e7ff      	b.n	10048646 <HW_PKA_ProcEnd_StateMachine+0xba>
10048646:	46c0      	nop			@ (mov r8, r8)
10048648:	46bd      	mov	sp, r7
1004864a:	b002      	add	sp, #8
1004864c:	bd80      	pop	{r7, pc}
1004864e:	46c0      	nop			@ (mov r8, r8)
10048650:	20000870 	.word	0x20000870
10048654:	20000874 	.word	0x20000874
10048658:	10069cb8 	.word	0x10069cb8
1004865c:	20000878 	.word	0x20000878
10048660:	20000810 	.word	0x20000810
10048664:	20000850 	.word	0x20000850
10048668:	20000830 	.word	0x20000830
1004866c:	200008d8 	.word	0x200008d8

10048670 <HAL_PKA_OperationCpltCallback>:
    HW_PKA_ProcEnd_StateMachine();
  }
}

void HAL_PKA_OperationCpltCallback(PKA_HandleTypeDef *hpka)
{
10048670:	b580      	push	{r7, lr}
10048672:	b082      	sub	sp, #8
10048674:	af00      	add	r7, sp, #0
10048676:	6078      	str	r0, [r7, #4]
  HW_PKA_ProcEnd_StateMachine();
10048678:	f7ff ff88 	bl	1004858c <HW_PKA_ProcEnd_StateMachine>
  PKAMGR_IRQCallback();
1004867c:	f002 fd2e 	bl	1004b0dc <PKAMGR_IRQCallback>
}
10048680:	46c0      	nop			@ (mov r8, r8)
10048682:	46bd      	mov	sp, r7
10048684:	b002      	add	sp, #8
10048686:	bd80      	pop	{r7, pc}

10048688 <HAL_PKA_ErrorCallback>:

void HAL_PKA_ErrorCallback(PKA_HandleTypeDef *hpka)
{
10048688:	b580      	push	{r7, lr}
1004868a:	b082      	sub	sp, #8
1004868c:	af00      	add	r7, sp, #0
1004868e:	6078      	str	r0, [r7, #4]
  HW_PKA_ExitWithError(hpka->ErrorCode);
10048690:	687b      	ldr	r3, [r7, #4]
10048692:	689b      	ldr	r3, [r3, #8]
10048694:	0018      	movs	r0, r3
10048696:	f7ff ff41 	bl	1004851c <HW_PKA_ExitWithError>
  PKAMGR_IRQCallback();
1004869a:	f002 fd1f 	bl	1004b0dc <PKAMGR_IRQCallback>
}
1004869e:	46c0      	nop			@ (mov r8, r8)
100486a0:	46bd      	mov	sp, r7
100486a2:	b002      	add	sp, #8
100486a4:	bd80      	pop	{r7, pc}
	...

100486a8 <HW_PKA_IsPointCheckOk>:
  * @param
  * @param
  *
  */
uint32_t HW_PKA_IsPointCheckOk(void)
{
100486a8:	b580      	push	{r7, lr}
100486aa:	b082      	sub	sp, #8
100486ac:	af00      	add	r7, sp, #0
#ifdef STM32WB09
  uint32_t result[2] = {0};
100486ae:	003b      	movs	r3, r7
100486b0:	0018      	movs	r0, r3
100486b2:	2308      	movs	r3, #8
100486b4:	001a      	movs	r2, r3
100486b6:	2100      	movs	r1, #0
100486b8:	f01e fe50 	bl	1006735c <memset>
  HW_PKA_ReadResult( PKA_POINT_CHECK_OUT_ERROR, 2, &result[0] );
100486bc:	003a      	movs	r2, r7
100486be:	23b8      	movs	r3, #184	@ 0xb8
100486c0:	009b      	lsls	r3, r3, #2
100486c2:	2102      	movs	r1, #2
100486c4:	0018      	movs	r0, r3
100486c6:	f7ff fe2d 	bl	10048324 <HW_PKA_ReadResult>
  return ( result[0] == 0xD60D);
100486ca:	003b      	movs	r3, r7
100486cc:	681b      	ldr	r3, [r3, #0]
100486ce:	4a05      	ldr	r2, [pc, #20]	@ (100486e4 <HW_PKA_IsPointCheckOk+0x3c>)
100486d0:	4694      	mov	ip, r2
100486d2:	4463      	add	r3, ip
100486d4:	425a      	negs	r2, r3
100486d6:	4153      	adcs	r3, r2
100486d8:	b2db      	uxtb	r3, r3
#endif /* STM32WB09 */

#ifdef STM32WB05
  return (HW_PKA_ReadSingleOutput( 0 ) == 0);
#endif /* STM32WB05 */
}
100486da:	0018      	movs	r0, r3
100486dc:	46bd      	mov	sp, r7
100486de:	b002      	add	sp, #8
100486e0:	bd80      	pop	{r7, pc}
100486e2:	46c0      	nop			@ (mov r8, r8)
100486e4:	ffff29f3 	.word	0xffff29f3

100486e8 <HW_PKA_IsRangeCheckOk>:
  * @param
  * @param
  *
  */
uint32_t HW_PKA_IsRangeCheckOk(void)
{
100486e8:	b580      	push	{r7, lr}
100486ea:	b082      	sub	sp, #8
100486ec:	af00      	add	r7, sp, #0
#ifdef STM32WB09
  uint32_t result[2] = {0};
100486ee:	003b      	movs	r3, r7
100486f0:	0018      	movs	r0, r3
100486f2:	2308      	movs	r3, #8
100486f4:	001a      	movs	r2, r3
100486f6:	2100      	movs	r1, #0
100486f8:	f01e fe30 	bl	1006735c <memset>
  HW_PKA_ReadResult( PKA_COMPARISON_OUT_RESULT, 2, &result[0] );
100486fc:	003a      	movs	r2, r7
100486fe:	23a6      	movs	r3, #166	@ 0xa6
10048700:	009b      	lsls	r3, r3, #2
10048702:	2102      	movs	r1, #2
10048704:	0018      	movs	r0, r3
10048706:	f7ff fe0d 	bl	10048324 <HW_PKA_ReadResult>
  return ( result[0] == 0x916A);
1004870a:	003b      	movs	r3, r7
1004870c:	681b      	ldr	r3, [r3, #0]
1004870e:	4a05      	ldr	r2, [pc, #20]	@ (10048724 <HW_PKA_IsRangeCheckOk+0x3c>)
10048710:	4694      	mov	ip, r2
10048712:	4463      	add	r3, ip
10048714:	425a      	negs	r2, r3
10048716:	4153      	adcs	r3, r2
10048718:	b2db      	uxtb	r3, r3
#endif /* STM32WB09 */

#ifdef STM32WB05
  return (HW_PKA_ReadSingleOutput( 500 ) == 2);
#endif /* STM32WB05 */
}
1004871a:	0018      	movs	r0, r3
1004871c:	46bd      	mov	sp, r7
1004871e:	b002      	add	sp, #8
10048720:	bd80      	pop	{r7, pc}
10048722:	46c0      	nop			@ (mov r8, r8)
10048724:	ffff6e96 	.word	0xffff6e96

10048728 <HW_PKA_P256_StartEccScalarMul>:
  * @param
  * @param
  *
  */
void HW_PKA_P256_StartEccScalarMul( const uint32_t* k, const uint32_t* pX, const uint32_t* pY )
{
10048728:	b580      	push	{r7, lr}
1004872a:	b084      	sub	sp, #16
1004872c:	af00      	add	r7, sp, #0
1004872e:	60f8      	str	r0, [r7, #12]
10048730:	60b9      	str	r1, [r7, #8]
10048732:	607a      	str	r2, [r7, #4]
  /* Set the configuration */
  LL_PKA_Config( PKA, LL_PKA_MODE_ECC_KP_PRIMITIVE );
10048734:	4b27      	ldr	r3, [pc, #156]	@ (100487d4 <HW_PKA_P256_StartEccScalarMul+0xac>)
10048736:	2122      	movs	r1, #34	@ 0x22
10048738:	0018      	movs	r0, r3
1004873a:	f7ff fd1b 	bl	10048174 <LL_PKA_Config>

  /* Enable the Security level */
  LL_PKA_SetSecurityLevel(PKA, LL_PKA_SECURITY_LEVEL_ENABLE);
1004873e:	4b25      	ldr	r3, [pc, #148]	@ (100487d4 <HW_PKA_P256_StartEccScalarMul+0xac>)
10048740:	2101      	movs	r1, #1
10048742:	0018      	movs	r0, r3
10048744:	f7ff fd3e 	bl	100481c4 <LL_PKA_SetSecurityLevel>

#ifdef STM32WB09
  /* Set the scalar multiplier k length */
  HW_PKA_WriteSingleInput( PKA_ECC_SCALAR_MUL_IN_EXP_NB_BITS, 2, HW_PKA_nbits_k);
10048748:	4b23      	ldr	r3, [pc, #140]	@ (100487d8 <HW_PKA_P256_StartEccScalarMul+0xb0>)
1004874a:	001a      	movs	r2, r3
1004874c:	2102      	movs	r1, #2
1004874e:	2000      	movs	r0, #0
10048750:	f7ff fd9a 	bl	10048288 <HW_PKA_WriteSingleInput>
  /* Set the modulus length */
  HW_PKA_WriteSingleInput( PKA_ECC_SCALAR_MUL_IN_OP_NB_BITS, 2, HW_PKA_nbits_m);
10048754:	4b21      	ldr	r3, [pc, #132]	@ (100487dc <HW_PKA_P256_StartEccScalarMul+0xb4>)
10048756:	001a      	movs	r2, r3
10048758:	2102      	movs	r1, #2
1004875a:	2002      	movs	r0, #2
1004875c:	f7ff fd94 	bl	10048288 <HW_PKA_WriteSingleInput>
  /* Set the coefficient a sign */
  HW_PKA_WriteSingleInput( PKA_ECC_SCALAR_MUL_IN_A_COEFF_SIGN, 2, HW_PKA_a_coeff_sign);
10048760:	4b1f      	ldr	r3, [pc, #124]	@ (100487e0 <HW_PKA_P256_StartEccScalarMul+0xb8>)
10048762:	001a      	movs	r2, r3
10048764:	2102      	movs	r1, #2
10048766:	2004      	movs	r0, #4
10048768:	f7ff fd8e 	bl	10048288 <HW_PKA_WriteSingleInput>
  /* Set the coefficient |a| */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_A_COEFF, 8, HW_PKA_P256_a );
1004876c:	4b1d      	ldr	r3, [pc, #116]	@ (100487e4 <HW_PKA_P256_StartEccScalarMul+0xbc>)
1004876e:	001a      	movs	r2, r3
10048770:	2108      	movs	r1, #8
10048772:	2006      	movs	r0, #6
10048774:	f7ff fdac 	bl	100482d0 <HW_PKA_WriteOperand>
  /* Set the modulus value p */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_MOD_GF, 8, HW_PKA_P256_gfp );
10048778:	4b1b      	ldr	r3, [pc, #108]	@ (100487e8 <HW_PKA_P256_StartEccScalarMul+0xc0>)
1004877a:	001a      	movs	r2, r3
1004877c:	2108      	movs	r1, #8
1004877e:	201c      	movs	r0, #28
10048780:	f7ff fda6 	bl	100482d0 <HW_PKA_WriteOperand>
  /* Set the Montgomery parameter */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_MONTGOMERY_PARAM, 8, HW_PKA_P256_r2 );
10048784:	4b19      	ldr	r3, [pc, #100]	@ (100487ec <HW_PKA_P256_StartEccScalarMul+0xc4>)
10048786:	001a      	movs	r2, r3
10048788:	2108      	movs	r1, #8
1004878a:	2032      	movs	r0, #50	@ 0x32
1004878c:	f7ff fda0 	bl	100482d0 <HW_PKA_WriteOperand>
  /* Set the scalar multiplier k */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_K, 8, k );
10048790:	68fb      	ldr	r3, [r7, #12]
10048792:	001a      	movs	r2, r3
10048794:	2108      	movs	r1, #8
10048796:	2048      	movs	r0, #72	@ 0x48
10048798:	f7ff fd9a 	bl	100482d0 <HW_PKA_WriteOperand>
  /* Set the point P coordinate x */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_INITIAL_POINT_X, 8, pX );
1004879c:	68bb      	ldr	r3, [r7, #8]
1004879e:	001a      	movs	r2, r3
100487a0:	2108      	movs	r1, #8
100487a2:	205e      	movs	r0, #94	@ 0x5e
100487a4:	f7ff fd94 	bl	100482d0 <HW_PKA_WriteOperand>
  /* Set the point P coordinate y */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_INITIAL_POINT_Y, 8, pY );
100487a8:	687b      	ldr	r3, [r7, #4]
100487aa:	001a      	movs	r2, r3
100487ac:	2108      	movs	r1, #8
100487ae:	2074      	movs	r0, #116	@ 0x74
100487b0:	f7ff fd8e 	bl	100482d0 <HW_PKA_WriteOperand>
  /* Set the point P coordinate y */
  HW_PKA_WriteOperand( 108, 8, pY );
#endif /* STM32WB05 */

  /* Wait for  PKA busy flag equal to 0 */
  while(LL_PKA_IsActiveFlag_BUSY(PKA));
100487b4:	46c0      	nop			@ (mov r8, r8)
100487b6:	4b07      	ldr	r3, [pc, #28]	@ (100487d4 <HW_PKA_P256_StartEccScalarMul+0xac>)
100487b8:	0018      	movs	r0, r3
100487ba:	f7ff fd51 	bl	10048260 <LL_PKA_IsActiveFlag_BUSY>
100487be:	1e03      	subs	r3, r0, #0
100487c0:	d1f9      	bne.n	100487b6 <HW_PKA_P256_StartEccScalarMul+0x8e>

  /* Start the PKA processing */
  LL_PKA_Start( PKA );
100487c2:	4b04      	ldr	r3, [pc, #16]	@ (100487d4 <HW_PKA_P256_StartEccScalarMul+0xac>)
100487c4:	0018      	movs	r0, r3
100487c6:	f7ff fd10 	bl	100481ea <LL_PKA_Start>
}
100487ca:	46c0      	nop			@ (mov r8, r8)
100487cc:	46bd      	mov	sp, r7
100487ce:	b004      	add	sp, #16
100487d0:	bd80      	pop	{r7, pc}
100487d2:	46c0      	nop			@ (mov r8, r8)
100487d4:	48300000 	.word	0x48300000
100487d8:	10069c20 	.word	0x10069c20
100487dc:	10069c28 	.word	0x10069c28
100487e0:	10069c30 	.word	0x10069c30
100487e4:	10069c78 	.word	0x10069c78
100487e8:	10069c38 	.word	0x10069c38
100487ec:	10069c58 	.word	0x10069c58

100487f0 <HW_PKA_Comparison>:
  * @param
  * @param
  *
  */
void HW_PKA_Comparison( const uint32_t* opLen, const uint32_t* op1 , const uint32_t* op2 )
{
100487f0:	b580      	push	{r7, lr}
100487f2:	b084      	sub	sp, #16
100487f4:	af00      	add	r7, sp, #0
100487f6:	60f8      	str	r0, [r7, #12]
100487f8:	60b9      	str	r1, [r7, #8]
100487fa:	607a      	str	r2, [r7, #4]
  LL_PKA_SetMode(PKA, LL_PKA_MODE_COMPARISON );
100487fc:	4b13      	ldr	r3, [pc, #76]	@ (1004884c <HW_PKA_Comparison+0x5c>)
100487fe:	210c      	movs	r1, #12
10048800:	0018      	movs	r0, r3
10048802:	f7ff fccb 	bl	1004819c <LL_PKA_SetMode>
#ifdef STM32WB09
  /* Loads the input buffers to PKA RAM */
   /* Set the muber of bits of P */
  HW_PKA_WriteSingleInput( PKA_COMPARISON_NB_BITS, 2, opLen );
10048806:	68fb      	ldr	r3, [r7, #12]
10048808:	001a      	movs	r2, r3
1004880a:	2102      	movs	r1, #2
1004880c:	2002      	movs	r0, #2
1004880e:	f7ff fd3b 	bl	10048288 <HW_PKA_WriteSingleInput>
  /* Set the op1 */
  HW_PKA_WriteOperand( PKA_COMPARISON_IN_OP1, 8, op1 );
10048812:	68ba      	ldr	r2, [r7, #8]
10048814:	23c8      	movs	r3, #200	@ 0xc8
10048816:	005b      	lsls	r3, r3, #1
10048818:	2108      	movs	r1, #8
1004881a:	0018      	movs	r0, r3
1004881c:	f7ff fd58 	bl	100482d0 <HW_PKA_WriteOperand>
  /* Set the op2 */
  HW_PKA_WriteOperand( PKA_COMPARISON_IN_OP2, 8, op2 );
10048820:	687a      	ldr	r2, [r7, #4]
10048822:	2385      	movs	r3, #133	@ 0x85
10048824:	009b      	lsls	r3, r3, #2
10048826:	2108      	movs	r1, #8
10048828:	0018      	movs	r0, r3
1004882a:	f7ff fd51 	bl	100482d0 <HW_PKA_WriteOperand>
  HW_PKA_WriteOperand( 301, 8, op1 );
  /* Set the op2 */
  HW_PKA_WriteOperand( 401, 8, op2 );
#endif /* STM32WB05 */
  /* Wait for  PKA busy flag equal to 0 */
  while(LL_PKA_IsActiveFlag_BUSY(PKA));
1004882e:	46c0      	nop			@ (mov r8, r8)
10048830:	4b06      	ldr	r3, [pc, #24]	@ (1004884c <HW_PKA_Comparison+0x5c>)
10048832:	0018      	movs	r0, r3
10048834:	f7ff fd14 	bl	10048260 <LL_PKA_IsActiveFlag_BUSY>
10048838:	1e03      	subs	r3, r0, #0
1004883a:	d1f9      	bne.n	10048830 <HW_PKA_Comparison+0x40>

  /* Launch the computation in interrupt mode */
  LL_PKA_Start(PKA);
1004883c:	4b03      	ldr	r3, [pc, #12]	@ (1004884c <HW_PKA_Comparison+0x5c>)
1004883e:	0018      	movs	r0, r3
10048840:	f7ff fcd3 	bl	100481ea <LL_PKA_Start>
}
10048844:	46c0      	nop			@ (mov r8, r8)
10048846:	46bd      	mov	sp, r7
10048848:	b004      	add	sp, #16
1004884a:	bd80      	pop	{r7, pc}
1004884c:	48300000 	.word	0x48300000

10048850 <HW_PKA_P256_StartPointCheck>:

void HW_PKA_P256_StartPointCheck( const uint32_t* x, const uint32_t* y )
{
10048850:	b580      	push	{r7, lr}
10048852:	b082      	sub	sp, #8
10048854:	af00      	add	r7, sp, #0
10048856:	6078      	str	r0, [r7, #4]
10048858:	6039      	str	r1, [r7, #0]
  /* Set the configuration */
  LL_PKA_Config( PKA, LL_PKA_MODE_POINT_CHECK );
1004885a:	4b22      	ldr	r3, [pc, #136]	@ (100488e4 <HW_PKA_P256_StartPointCheck+0x94>)
1004885c:	2128      	movs	r1, #40	@ 0x28
1004885e:	0018      	movs	r0, r3
10048860:	f7ff fc88 	bl	10048174 <LL_PKA_Config>
#ifdef STM32WB09
  /* Set the muber of bits of p */
  HW_PKA_WriteSingleInput(  PKA_POINT_CHECK_IN_MOD_NB_BITS, 2, HW_PKA_nbits_m);
10048864:	4b20      	ldr	r3, [pc, #128]	@ (100488e8 <HW_PKA_P256_StartPointCheck+0x98>)
10048866:	001a      	movs	r2, r3
10048868:	2102      	movs	r1, #2
1004886a:	2002      	movs	r0, #2
1004886c:	f7ff fd0c 	bl	10048288 <HW_PKA_WriteSingleInput>
  /* Set the coefficient a sign */
  HW_PKA_WriteSingleInput( PKA_POINT_CHECK_IN_A_COEFF_SIGN, 2, HW_PKA_a_coeff_sign);
10048870:	4b1e      	ldr	r3, [pc, #120]	@ (100488ec <HW_PKA_P256_StartPointCheck+0x9c>)
10048872:	001a      	movs	r2, r3
10048874:	2102      	movs	r1, #2
10048876:	2004      	movs	r0, #4
10048878:	f7ff fd06 	bl	10048288 <HW_PKA_WriteSingleInput>
  /* Set the coefficient |a| */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_A_COEFF, 8, HW_PKA_P256_a );
1004887c:	4b1c      	ldr	r3, [pc, #112]	@ (100488f0 <HW_PKA_P256_StartPointCheck+0xa0>)
1004887e:	001a      	movs	r2, r3
10048880:	2108      	movs	r1, #8
10048882:	2006      	movs	r0, #6
10048884:	f7ff fd24 	bl	100482d0 <HW_PKA_WriteOperand>
  /* Set the modulus value p */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_MOD_GF, 8, HW_PKA_P256_gfp );
10048888:	4b1a      	ldr	r3, [pc, #104]	@ (100488f4 <HW_PKA_P256_StartPointCheck+0xa4>)
1004888a:	001a      	movs	r2, r3
1004888c:	2108      	movs	r1, #8
1004888e:	201c      	movs	r0, #28
10048890:	f7ff fd1e 	bl	100482d0 <HW_PKA_WriteOperand>
  /* Set the point coordinate x */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_INITIAL_POINT_X, 8, x );
10048894:	687b      	ldr	r3, [r7, #4]
10048896:	001a      	movs	r2, r3
10048898:	2108      	movs	r1, #8
1004889a:	205e      	movs	r0, #94	@ 0x5e
1004889c:	f7ff fd18 	bl	100482d0 <HW_PKA_WriteOperand>
  /* Set the point coordinate y */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_INITIAL_POINT_Y, 8, y );
100488a0:	683b      	ldr	r3, [r7, #0]
100488a2:	001a      	movs	r2, r3
100488a4:	2108      	movs	r1, #8
100488a6:	2074      	movs	r0, #116	@ 0x74
100488a8:	f7ff fd12 	bl	100482d0 <HW_PKA_WriteOperand>
  /* Set the Montgomery parameter */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_MONTGOMERY, 8, HW_PKA_P256_r2 );
100488ac:	4b12      	ldr	r3, [pc, #72]	@ (100488f8 <HW_PKA_P256_StartPointCheck+0xa8>)
100488ae:	001a      	movs	r2, r3
100488b0:	2108      	movs	r1, #8
100488b2:	2032      	movs	r0, #50	@ 0x32
100488b4:	f7ff fd0c 	bl	100482d0 <HW_PKA_WriteOperand>
  /* Set the coefficient |b| */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_B_COEFF, 8, HW_PKA_P256_b );
100488b8:	4b10      	ldr	r3, [pc, #64]	@ (100488fc <HW_PKA_P256_StartPointCheck+0xac>)
100488ba:	001a      	movs	r2, r3
100488bc:	2108      	movs	r1, #8
100488be:	2048      	movs	r0, #72	@ 0x48
100488c0:	f7ff fd06 	bl	100482d0 <HW_PKA_WriteOperand>
  /* Set the coefficient |b| */
  HW_PKA_WriteOperand( 255, 8, HW_PKA_P256_b );
#endif /* STM32WB05 */

  /* Wait for  PKA busy flag equal to 0 */
  while(LL_PKA_IsActiveFlag_BUSY(PKA));
100488c4:	46c0      	nop			@ (mov r8, r8)
100488c6:	4b07      	ldr	r3, [pc, #28]	@ (100488e4 <HW_PKA_P256_StartPointCheck+0x94>)
100488c8:	0018      	movs	r0, r3
100488ca:	f7ff fcc9 	bl	10048260 <LL_PKA_IsActiveFlag_BUSY>
100488ce:	1e03      	subs	r3, r0, #0
100488d0:	d1f9      	bne.n	100488c6 <HW_PKA_P256_StartPointCheck+0x76>

  /* Start the PKA processing */
  LL_PKA_Start( PKA );
100488d2:	4b04      	ldr	r3, [pc, #16]	@ (100488e4 <HW_PKA_P256_StartPointCheck+0x94>)
100488d4:	0018      	movs	r0, r3
100488d6:	f7ff fc88 	bl	100481ea <LL_PKA_Start>
}
100488da:	46c0      	nop			@ (mov r8, r8)
100488dc:	46bd      	mov	sp, r7
100488de:	b002      	add	sp, #8
100488e0:	bd80      	pop	{r7, pc}
100488e2:	46c0      	nop			@ (mov r8, r8)
100488e4:	48300000 	.word	0x48300000
100488e8:	10069c28 	.word	0x10069c28
100488ec:	10069c30 	.word	0x10069c30
100488f0:	10069c78 	.word	0x10069c78
100488f4:	10069c38 	.word	0x10069c38
100488f8:	10069c58 	.word	0x10069c58
100488fc:	10069c98 	.word	0x10069c98

10048900 <HW_PKA_P256_ReadEccScalarMul>:
  * @param
  * @param
  *
  */
void HW_PKA_P256_ReadEccScalarMul( uint32_t* pX, uint32_t* pY )
{
10048900:	b580      	push	{r7, lr}
10048902:	b082      	sub	sp, #8
10048904:	af00      	add	r7, sp, #0
10048906:	6078      	str	r0, [r7, #4]
10048908:	6039      	str	r1, [r7, #0]
#ifdef STM32WB09
  /* Read the output point X */
  if( pX )
1004890a:	687b      	ldr	r3, [r7, #4]
1004890c:	2b00      	cmp	r3, #0
1004890e:	d005      	beq.n	1004891c <HW_PKA_P256_ReadEccScalarMul+0x1c>
  {
    HW_PKA_ReadResult( PKA_ECC_SCALAR_MUL_OUT_RESULT_X, 8, pX );
10048910:	687b      	ldr	r3, [r7, #4]
10048912:	001a      	movs	r2, r3
10048914:	2108      	movs	r1, #8
10048916:	205e      	movs	r0, #94	@ 0x5e
10048918:	f7ff fd04 	bl	10048324 <HW_PKA_ReadResult>
  }
  /* Read the output point Y as the second half of the result */
  if( pY )
1004891c:	683b      	ldr	r3, [r7, #0]
1004891e:	2b00      	cmp	r3, #0
10048920:	d005      	beq.n	1004892e <HW_PKA_P256_ReadEccScalarMul+0x2e>
  {
    HW_PKA_ReadResult( PKA_ECC_SCALAR_MUL_OUT_RESULT_Y, 8, pY );
10048922:	683b      	ldr	r3, [r7, #0]
10048924:	001a      	movs	r2, r3
10048926:	2108      	movs	r1, #8
10048928:	2074      	movs	r0, #116	@ 0x74
1004892a:	f7ff fcfb 	bl	10048324 <HW_PKA_ReadResult>
  if( pY )
  {
    HW_PKA_ReadResult( 108, 8, pY );
  }
#endif /* STM32WB05 */
}
1004892e:	46c0      	nop			@ (mov r8, r8)
10048930:	46bd      	mov	sp, r7
10048932:	b002      	add	sp, #8
10048934:	bd80      	pop	{r7, pc}
	...

10048938 <HW_PKA_isStartPoint>:
  * Brief   This function checks if the param p is equal to the Start Point.
  * Param   Publick key p
  * Retval  1 if p is equal to the Start Point. 0 in other cases.
  */
uint32_t HW_PKA_isStartPoint(const uint32_t* p)
{
10048938:	b580      	push	{r7, lr}
1004893a:	b084      	sub	sp, #16
1004893c:	af00      	add	r7, sp, #0
1004893e:	6078      	str	r0, [r7, #4]
  for(int i=0; i<16; i++)
10048940:	2300      	movs	r3, #0
10048942:	60fb      	str	r3, [r7, #12]
10048944:	e00f      	b.n	10048966 <HW_PKA_isStartPoint+0x2e>
  {
    if(PKAStartPoint[i]!=p[i])
10048946:	4b0c      	ldr	r3, [pc, #48]	@ (10048978 <HW_PKA_isStartPoint+0x40>)
10048948:	68fa      	ldr	r2, [r7, #12]
1004894a:	0092      	lsls	r2, r2, #2
1004894c:	58d2      	ldr	r2, [r2, r3]
1004894e:	68fb      	ldr	r3, [r7, #12]
10048950:	009b      	lsls	r3, r3, #2
10048952:	6879      	ldr	r1, [r7, #4]
10048954:	18cb      	adds	r3, r1, r3
10048956:	681b      	ldr	r3, [r3, #0]
10048958:	429a      	cmp	r2, r3
1004895a:	d001      	beq.n	10048960 <HW_PKA_isStartPoint+0x28>
      return 0;
1004895c:	2300      	movs	r3, #0
1004895e:	e006      	b.n	1004896e <HW_PKA_isStartPoint+0x36>
  for(int i=0; i<16; i++)
10048960:	68fb      	ldr	r3, [r7, #12]
10048962:	3301      	adds	r3, #1
10048964:	60fb      	str	r3, [r7, #12]
10048966:	68fb      	ldr	r3, [r7, #12]
10048968:	2b0f      	cmp	r3, #15
1004896a:	ddec      	ble.n	10048946 <HW_PKA_isStartPoint+0xe>
  }
  return 1;
1004896c:	2301      	movs	r3, #1
}
1004896e:	0018      	movs	r0, r3
10048970:	46bd      	mov	sp, r7
10048972:	b004      	add	sp, #16
10048974:	bd80      	pop	{r7, pc}
10048976:	46c0      	nop			@ (mov r8, r8)
10048978:	10069bd8 	.word	0x10069bd8

1004897c <LL_AHB1_GRP1_EnableClock>:
{
1004897c:	b580      	push	{r7, lr}
1004897e:	b084      	sub	sp, #16
10048980:	af00      	add	r7, sp, #0
10048982:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
10048984:	4b07      	ldr	r3, [pc, #28]	@ (100489a4 <LL_AHB1_GRP1_EnableClock+0x28>)
10048986:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10048988:	4b06      	ldr	r3, [pc, #24]	@ (100489a4 <LL_AHB1_GRP1_EnableClock+0x28>)
1004898a:	687a      	ldr	r2, [r7, #4]
1004898c:	430a      	orrs	r2, r1
1004898e:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10048990:	4b04      	ldr	r3, [pc, #16]	@ (100489a4 <LL_AHB1_GRP1_EnableClock+0x28>)
10048992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10048994:	687a      	ldr	r2, [r7, #4]
10048996:	4013      	ands	r3, r2
10048998:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004899a:	68fb      	ldr	r3, [r7, #12]
}
1004899c:	46c0      	nop			@ (mov r8, r8)
1004899e:	46bd      	mov	sp, r7
100489a0:	b004      	add	sp, #16
100489a2:	bd80      	pop	{r7, pc}
100489a4:	48400000 	.word	0x48400000

100489a8 <LL_RNG_Enable>:
  * @rmtoll CR           RNG_DIS         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
100489a8:	b580      	push	{r7, lr}
100489aa:	b082      	sub	sp, #8
100489ac:	af00      	add	r7, sp, #0
100489ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RNGx->CR, RNG_CR_DISABLE, LL_RNG_CR_DISABLE_0);
100489b0:	687b      	ldr	r3, [r7, #4]
100489b2:	681b      	ldr	r3, [r3, #0]
100489b4:	2201      	movs	r2, #1
100489b6:	4393      	bics	r3, r2
100489b8:	001a      	movs	r2, r3
100489ba:	687b      	ldr	r3, [r7, #4]
100489bc:	601a      	str	r2, [r3, #0]
}
100489be:	46c0      	nop			@ (mov r8, r8)
100489c0:	46bd      	mov	sp, r7
100489c2:	b002      	add	sp, #8
100489c4:	bd80      	pop	{r7, pc}
	...

100489c8 <LL_RNG_SetSamplingClockEnableDivider>:
  * @param  RNGx RNG Instance
  * @param  value parameter must be a number between 0 and 65535 (form 0x0 to 0xffff)
  * @retval None
  */
__STATIC_INLINE void LL_RNG_SetSamplingClockEnableDivider(RNG_TypeDef *RNGx, uint32_t value)
{
100489c8:	b580      	push	{r7, lr}
100489ca:	b082      	sub	sp, #8
100489cc:	af00      	add	r7, sp, #0
100489ce:	6078      	str	r0, [r7, #4]
100489d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RNGx->CR, RNG_CR_CLKDIV_15_0, value << RNG_CR_CLKDIV_15_0_Pos);
100489d2:	687b      	ldr	r3, [r7, #4]
100489d4:	681b      	ldr	r3, [r3, #0]
100489d6:	4a05      	ldr	r2, [pc, #20]	@ (100489ec <LL_RNG_SetSamplingClockEnableDivider+0x24>)
100489d8:	401a      	ands	r2, r3
100489da:	683b      	ldr	r3, [r7, #0]
100489dc:	021b      	lsls	r3, r3, #8
100489de:	431a      	orrs	r2, r3
100489e0:	687b      	ldr	r3, [r7, #4]
100489e2:	601a      	str	r2, [r3, #0]
}
100489e4:	46c0      	nop			@ (mov r8, r8)
100489e6:	46bd      	mov	sp, r7
100489e8:	b002      	add	sp, #8
100489ea:	bd80      	pop	{r7, pc}
100489ec:	ff0000ff 	.word	0xff0000ff

100489f0 <LL_RNG_GetSamplingClockEnableDivider>:
    @note   dividing by a factor equal to CLKDIV[15:0] + 1, values being in the range of 0 to 65535
  * @rmtoll CR          CLKDIV_15_0       LL_RNG_GetSamplingClockEnableDivider
  * @retval can be one of the following values
  */
__STATIC_INLINE uint32_t LL_RNG_GetSamplingClockEnableDivider(RNG_TypeDef *RNGx)
{
100489f0:	b580      	push	{r7, lr}
100489f2:	b082      	sub	sp, #8
100489f4:	af00      	add	r7, sp, #0
100489f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RNGx->CR, RNG_CR_CLKDIV_15_0) >> RNG_CR_CLKDIV_15_0_Pos);
100489f8:	687b      	ldr	r3, [r7, #4]
100489fa:	681b      	ldr	r3, [r3, #0]
100489fc:	0a1b      	lsrs	r3, r3, #8
100489fe:	041b      	lsls	r3, r3, #16
10048a00:	0c1b      	lsrs	r3, r3, #16
}
10048a02:	0018      	movs	r0, r3
10048a04:	46bd      	mov	sp, r7
10048a06:	b002      	add	sp, #8
10048a08:	bd80      	pop	{r7, pc}

10048a0a <LL_RNG_IsActiveFlag_DISABLED>:
  * @rmtoll SR          DISABLED            LL_RNG_IsActiveFlag_DISABLED
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_DISABLED(RNG_TypeDef *RNGx)
{
10048a0a:	b580      	push	{r7, lr}
10048a0c:	b082      	sub	sp, #8
10048a0e:	af00      	add	r7, sp, #0
10048a10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_DISABLED) == (RNG_SR_DISABLED)) ? 1U : 0U);
10048a12:	687b      	ldr	r3, [r7, #4]
10048a14:	685b      	ldr	r3, [r3, #4]
10048a16:	2201      	movs	r2, #1
10048a18:	4013      	ands	r3, r2
10048a1a:	2b01      	cmp	r3, #1
10048a1c:	d101      	bne.n	10048a22 <LL_RNG_IsActiveFlag_DISABLED+0x18>
10048a1e:	2301      	movs	r3, #1
10048a20:	e000      	b.n	10048a24 <LL_RNG_IsActiveFlag_DISABLED+0x1a>
10048a22:	2300      	movs	r3, #0
}
10048a24:	0018      	movs	r0, r3
10048a26:	46bd      	mov	sp, r7
10048a28:	b002      	add	sp, #8
10048a2a:	bd80      	pop	{r7, pc}

10048a2c <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR>:
  * @rmtoll SR          REVEAL_CLK_ERR            LL_RNG_IsActiveFlag_REVEAL_CLK_ERR
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_REVEAL_CLK_ERR(RNG_TypeDef *RNGx)
{
10048a2c:	b580      	push	{r7, lr}
10048a2e:	b082      	sub	sp, #8
10048a30:	af00      	add	r7, sp, #0
10048a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_REVEAL_CLK_ERR) == (RNG_SR_REVEAL_CLK_ERR)) ? 1U : 0U);
10048a34:	687b      	ldr	r3, [r7, #4]
10048a36:	685b      	ldr	r3, [r3, #4]
10048a38:	2204      	movs	r2, #4
10048a3a:	4013      	ands	r3, r2
10048a3c:	2b04      	cmp	r3, #4
10048a3e:	d101      	bne.n	10048a44 <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR+0x18>
10048a40:	2301      	movs	r3, #1
10048a42:	e000      	b.n	10048a46 <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR+0x1a>
10048a44:	2300      	movs	r3, #0
}
10048a46:	0018      	movs	r0, r3
10048a48:	46bd      	mov	sp, r7
10048a4a:	b002      	add	sp, #8
10048a4c:	bd80      	pop	{r7, pc}

10048a4e <LL_RNG_IsActiveFlag_VAL_READY>:
  * @rmtoll SR          VAL_READY            LL_RNG_IsActiveFlag_VAL_READY
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_VAL_READY(RNG_TypeDef *RNGx)
{
10048a4e:	b580      	push	{r7, lr}
10048a50:	b082      	sub	sp, #8
10048a52:	af00      	add	r7, sp, #0
10048a54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_VAL_READY) == (RNG_SR_VAL_READY)) ? 1U : 0U);
10048a56:	687b      	ldr	r3, [r7, #4]
10048a58:	685b      	ldr	r3, [r3, #4]
10048a5a:	2210      	movs	r2, #16
10048a5c:	4013      	ands	r3, r2
10048a5e:	2b10      	cmp	r3, #16
10048a60:	d101      	bne.n	10048a66 <LL_RNG_IsActiveFlag_VAL_READY+0x18>
10048a62:	2301      	movs	r3, #1
10048a64:	e000      	b.n	10048a68 <LL_RNG_IsActiveFlag_VAL_READY+0x1a>
10048a66:	2300      	movs	r3, #0
}
10048a68:	0018      	movs	r0, r3
10048a6a:	46bd      	mov	sp, r7
10048a6c:	b002      	add	sp, #8
10048a6e:	bd80      	pop	{r7, pc}

10048a70 <LL_RNG_GetRndVal>:
  available in FIFO by ready VAL_READY flag before starting a read otherwise a null value will be returned
  * @rmtoll VAL          RND_VAL       LL_RNG_GetRndVal
  * @retval a 32-bit Random Value
  */
__STATIC_INLINE uint32_t LL_RNG_GetRndVal(RNG_TypeDef *RNGx)
{
10048a70:	b580      	push	{r7, lr}
10048a72:	b082      	sub	sp, #8
10048a74:	af00      	add	r7, sp, #0
10048a76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RNGx->VAL, RNG_VAL_RND_VAL) >> RNG_VAL_RND_VAL_Pos);
10048a78:	687b      	ldr	r3, [r7, #4]
10048a7a:	689b      	ldr	r3, [r3, #8]
}
10048a7c:	0018      	movs	r0, r3
10048a7e:	46bd      	mov	sp, r7
10048a80:	b002      	add	sp, #8
10048a82:	bd80      	pop	{r7, pc}

10048a84 <HW_RNG_Init>:
/** @defgroup RNG_Manager_Public_Functions Public Functions
* @{
*/

HW_RNG_ResultStatus HW_RNG_Init(void)
{
10048a84:	b580      	push	{r7, lr}
10048a86:	b082      	sub	sp, #8
10048a88:	af00      	add	r7, sp, #0
#ifdef STM32WB09
  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_RNG);
10048a8a:	2380      	movs	r3, #128	@ 0x80
10048a8c:	02db      	lsls	r3, r3, #11
10048a8e:	0018      	movs	r0, r3
10048a90:	f7ff ff74 	bl	1004897c <LL_AHB1_GRP1_EnableClock>

  uint32_t SamplingClockDivider = 0;
10048a94:	2300      	movs	r3, #0
10048a96:	607b      	str	r3, [r7, #4]

  /* Check that the divider value is equal to the one to configure. If not, it must redo the write and checking. */
  while( LL_RNG_GetSamplingClockEnableDivider(RNG) != SamplingClockDivider)
10048a98:	e005      	b.n	10048aa6 <HW_RNG_Init+0x22>
  {
     /* While the new divider value is being resynchronized with the TRNG core clock domain, it is not possible to write another new value. */
     LL_RNG_SetSamplingClockEnableDivider(RNG, SamplingClockDivider);
10048a9a:	687b      	ldr	r3, [r7, #4]
10048a9c:	4a12      	ldr	r2, [pc, #72]	@ (10048ae8 <HW_RNG_Init+0x64>)
10048a9e:	0019      	movs	r1, r3
10048aa0:	0010      	movs	r0, r2
10048aa2:	f7ff ff91 	bl	100489c8 <LL_RNG_SetSamplingClockEnableDivider>
  while( LL_RNG_GetSamplingClockEnableDivider(RNG) != SamplingClockDivider)
10048aa6:	4b10      	ldr	r3, [pc, #64]	@ (10048ae8 <HW_RNG_Init+0x64>)
10048aa8:	0018      	movs	r0, r3
10048aaa:	f7ff ffa1 	bl	100489f0 <LL_RNG_GetSamplingClockEnableDivider>
10048aae:	0002      	movs	r2, r0
10048ab0:	687b      	ldr	r3, [r7, #4]
10048ab2:	4293      	cmp	r3, r2
10048ab4:	d1f1      	bne.n	10048a9a <HW_RNG_Init+0x16>
  }

  /* Initialize random numbers generation */
  LL_RNG_Enable(RNG);
10048ab6:	4b0c      	ldr	r3, [pc, #48]	@ (10048ae8 <HW_RNG_Init+0x64>)
10048ab8:	0018      	movs	r0, r3
10048aba:	f7ff ff75 	bl	100489a8 <LL_RNG_Enable>

  /* Wait for RNG enable operation */
  while (LL_RNG_IsActiveFlag_DISABLED(RNG));
10048abe:	46c0      	nop			@ (mov r8, r8)
10048ac0:	4b09      	ldr	r3, [pc, #36]	@ (10048ae8 <HW_RNG_Init+0x64>)
10048ac2:	0018      	movs	r0, r3
10048ac4:	f7ff ffa1 	bl	10048a0a <LL_RNG_IsActiveFlag_DISABLED>
10048ac8:	1e03      	subs	r3, r0, #0
10048aca:	d1f9      	bne.n	10048ac0 <HW_RNG_Init+0x3c>

  /* Check if internal clock error occurs */
  if (LL_RNG_IsActiveFlag_REVEAL_CLK_ERR(RNG))
10048acc:	4b06      	ldr	r3, [pc, #24]	@ (10048ae8 <HW_RNG_Init+0x64>)
10048ace:	0018      	movs	r0, r3
10048ad0:	f7ff ffac 	bl	10048a2c <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR>
10048ad4:	1e03      	subs	r3, r0, #0
10048ad6:	d001      	beq.n	10048adc <HW_RNG_Init+0x58>
  {
    return HW_RNG_ERROR;
10048ad8:	2301      	movs	r3, #1
10048ada:	e000      	b.n	10048ade <HW_RNG_Init+0x5a>
  }

  /* Values of Generated Random numbers are now available in num array. */

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/
  return HW_RNG_SUCCESS;
10048adc:	2300      	movs	r3, #0
}
10048ade:	0018      	movs	r0, r3
10048ae0:	46bd      	mov	sp, r7
10048ae2:	b002      	add	sp, #8
10048ae4:	bd80      	pop	{r7, pc}
10048ae6:	46c0      	nop			@ (mov r8, r8)
10048ae8:	48600000 	.word	0x48600000

10048aec <HW_RNG_GetRandom16>:
 * @brief Provide a 16-bit true random number
 * @param num: pointer to the random value returned
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom16(uint16_t* num)
{
10048aec:	b580      	push	{r7, lr}
10048aee:	b082      	sub	sp, #8
10048af0:	af00      	add	r7, sp, #0
10048af2:	6078      	str	r0, [r7, #4]
#ifdef STM32WB09
  /* Wait for VAL_READY signal */
  while (!LL_RNG_IsActiveFlag_VAL_READY(RNG));
10048af4:	46c0      	nop			@ (mov r8, r8)
10048af6:	4b09      	ldr	r3, [pc, #36]	@ (10048b1c <HW_RNG_GetRandom16+0x30>)
10048af8:	0018      	movs	r0, r3
10048afa:	f7ff ffa8 	bl	10048a4e <LL_RNG_IsActiveFlag_VAL_READY>
10048afe:	1e03      	subs	r3, r0, #0
10048b00:	d0f9      	beq.n	10048af6 <HW_RNG_GetRandom16+0xa>

  *num = LL_RNG_READRANDDATA32(RNG);
10048b02:	4b06      	ldr	r3, [pc, #24]	@ (10048b1c <HW_RNG_GetRandom16+0x30>)
10048b04:	0018      	movs	r0, r3
10048b06:	f7ff ffb3 	bl	10048a70 <LL_RNG_GetRndVal>
10048b0a:	0003      	movs	r3, r0
10048b0c:	b29a      	uxth	r2, r3
10048b0e:	687b      	ldr	r3, [r7, #4]
10048b10:	801a      	strh	r2, [r3, #0]

  *num = (uint16_t)LL_RNG_ReadRandData16(RNG);

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
10048b12:	2300      	movs	r3, #0
}
10048b14:	0018      	movs	r0, r3
10048b16:	46bd      	mov	sp, r7
10048b18:	b002      	add	sp, #8
10048b1a:	bd80      	pop	{r7, pc}
10048b1c:	48600000 	.word	0x48600000

10048b20 <HW_RNG_GetRandom32>:
 * @param num: pointer to the random value returned
 *
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom32(uint32_t* num)
{
10048b20:	b580      	push	{r7, lr}
10048b22:	b082      	sub	sp, #8
10048b24:	af00      	add	r7, sp, #0
10048b26:	6078      	str	r0, [r7, #4]
#ifdef STM32WB09
  /* Wait for VAL_READY signal */
  while (!LL_RNG_IsActiveFlag_VAL_READY(RNG));
10048b28:	46c0      	nop			@ (mov r8, r8)
10048b2a:	4b09      	ldr	r3, [pc, #36]	@ (10048b50 <HW_RNG_GetRandom32+0x30>)
10048b2c:	0018      	movs	r0, r3
10048b2e:	f7ff ff8e 	bl	10048a4e <LL_RNG_IsActiveFlag_VAL_READY>
10048b32:	1e03      	subs	r3, r0, #0
10048b34:	d0f9      	beq.n	10048b2a <HW_RNG_GetRandom32+0xa>

  *num = LL_RNG_READRANDDATA32(RNG);
10048b36:	4b06      	ldr	r3, [pc, #24]	@ (10048b50 <HW_RNG_GetRandom32+0x30>)
10048b38:	0018      	movs	r0, r3
10048b3a:	f7ff ff99 	bl	10048a70 <LL_RNG_GetRndVal>
10048b3e:	0002      	movs	r2, r0
10048b40:	687b      	ldr	r3, [r7, #4]
10048b42:	601a      	str	r2, [r3, #0]
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));

  num_16[1] = (uint16_t)LL_RNG_ReadRandData16(RNG);
#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
10048b44:	2300      	movs	r3, #0
}
10048b46:	0018      	movs	r0, r3
10048b48:	46bd      	mov	sp, r7
10048b4a:	b002      	add	sp, #8
10048b4c:	bd80      	pop	{r7, pc}
10048b4e:	46c0      	nop			@ (mov r8, r8)
10048b50:	48600000 	.word	0x48600000

10048b54 <LL_PWR_SetPowerMode>:
{
10048b54:	b580      	push	{r7, lr}
10048b56:	b082      	sub	sp, #8
10048b58:	af00      	add	r7, sp, #0
10048b5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
10048b5c:	4b06      	ldr	r3, [pc, #24]	@ (10048b78 <LL_PWR_SetPowerMode+0x24>)
10048b5e:	681b      	ldr	r3, [r3, #0]
10048b60:	2201      	movs	r2, #1
10048b62:	4393      	bics	r3, r2
10048b64:	0019      	movs	r1, r3
10048b66:	4b04      	ldr	r3, [pc, #16]	@ (10048b78 <LL_PWR_SetPowerMode+0x24>)
10048b68:	687a      	ldr	r2, [r7, #4]
10048b6a:	430a      	orrs	r2, r1
10048b6c:	601a      	str	r2, [r3, #0]
}
10048b6e:	46c0      	nop			@ (mov r8, r8)
10048b70:	46bd      	mov	sp, r7
10048b72:	b002      	add	sp, #8
10048b74:	bd80      	pop	{r7, pc}
10048b76:	46c0      	nop			@ (mov r8, r8)
10048b78:	48500000 	.word	0x48500000

10048b7c <LL_PWR_DisableGPIORET>:
{
10048b7c:	b580      	push	{r7, lr}
10048b7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_GPIORET);
10048b80:	4b04      	ldr	r3, [pc, #16]	@ (10048b94 <LL_PWR_DisableGPIORET+0x18>)
10048b82:	685a      	ldr	r2, [r3, #4]
10048b84:	4b03      	ldr	r3, [pc, #12]	@ (10048b94 <LL_PWR_DisableGPIORET+0x18>)
10048b86:	4904      	ldr	r1, [pc, #16]	@ (10048b98 <LL_PWR_DisableGPIORET+0x1c>)
10048b88:	400a      	ands	r2, r1
10048b8a:	605a      	str	r2, [r3, #4]
}
10048b8c:	46c0      	nop			@ (mov r8, r8)
10048b8e:	46bd      	mov	sp, r7
10048b90:	bd80      	pop	{r7, pc}
10048b92:	46c0      	nop			@ (mov r8, r8)
10048b94:	48500000 	.word	0x48500000
10048b98:	fffffeff 	.word	0xfffffeff

10048b9c <LL_PWR_ClearWakeupSource>:
{
10048b9c:	b580      	push	{r7, lr}
10048b9e:	b082      	sub	sp, #8
10048ba0:	af00      	add	r7, sp, #0
10048ba2:	6078      	str	r0, [r7, #4]
  WRITE_REG(PWR->SR1, (source & 0x0000FFFF));
10048ba4:	4b06      	ldr	r3, [pc, #24]	@ (10048bc0 <LL_PWR_ClearWakeupSource+0x24>)
10048ba6:	687a      	ldr	r2, [r7, #4]
10048ba8:	0412      	lsls	r2, r2, #16
10048baa:	0c12      	lsrs	r2, r2, #16
10048bac:	611a      	str	r2, [r3, #16]
  WRITE_REG(PWR->SR3, (source >> 16));
10048bae:	4b04      	ldr	r3, [pc, #16]	@ (10048bc0 <LL_PWR_ClearWakeupSource+0x24>)
10048bb0:	687a      	ldr	r2, [r7, #4]
10048bb2:	0c12      	lsrs	r2, r2, #16
10048bb4:	639a      	str	r2, [r3, #56]	@ 0x38
}
10048bb6:	46c0      	nop			@ (mov r8, r8)
10048bb8:	46bd      	mov	sp, r7
10048bba:	b002      	add	sp, #8
10048bbc:	bd80      	pop	{r7, pc}
10048bbe:	46c0      	nop			@ (mov r8, r8)
10048bc0:	48500000 	.word	0x48500000

10048bc4 <LL_PWR_SetNoPullB>:
{
10048bc4:	b580      	push	{r7, lr}
10048bc6:	b082      	sub	sp, #8
10048bc8:	af00      	add	r7, sp, #0
10048bca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
10048bcc:	4b08      	ldr	r3, [pc, #32]	@ (10048bf0 <LL_PWR_SetNoPullB+0x2c>)
10048bce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10048bd0:	687b      	ldr	r3, [r7, #4]
10048bd2:	43d9      	mvns	r1, r3
10048bd4:	4b06      	ldr	r3, [pc, #24]	@ (10048bf0 <LL_PWR_SetNoPullB+0x2c>)
10048bd6:	400a      	ands	r2, r1
10048bd8:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
10048bda:	4b05      	ldr	r3, [pc, #20]	@ (10048bf0 <LL_PWR_SetNoPullB+0x2c>)
10048bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10048bde:	687b      	ldr	r3, [r7, #4]
10048be0:	43d9      	mvns	r1, r3
10048be2:	4b03      	ldr	r3, [pc, #12]	@ (10048bf0 <LL_PWR_SetNoPullB+0x2c>)
10048be4:	400a      	ands	r2, r1
10048be6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10048be8:	46c0      	nop			@ (mov r8, r8)
10048bea:	46bd      	mov	sp, r7
10048bec:	b002      	add	sp, #8
10048bee:	bd80      	pop	{r7, pc}
10048bf0:	48500000 	.word	0x48500000

10048bf4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
10048bf4:	b580      	push	{r7, lr}
10048bf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10048bf8:	4b07      	ldr	r3, [pc, #28]	@ (10048c18 <LL_RCC_HSE_IsReady+0x24>)
10048bfa:	681a      	ldr	r2, [r3, #0]
10048bfc:	2380      	movs	r3, #128	@ 0x80
10048bfe:	029b      	lsls	r3, r3, #10
10048c00:	401a      	ands	r2, r3
10048c02:	2380      	movs	r3, #128	@ 0x80
10048c04:	029b      	lsls	r3, r3, #10
10048c06:	429a      	cmp	r2, r3
10048c08:	d101      	bne.n	10048c0e <LL_RCC_HSE_IsReady+0x1a>
10048c0a:	2301      	movs	r3, #1
10048c0c:	e000      	b.n	10048c10 <LL_RCC_HSE_IsReady+0x1c>
10048c0e:	2300      	movs	r3, #0
}
10048c10:	0018      	movs	r0, r3
10048c12:	46bd      	mov	sp, r7
10048c14:	bd80      	pop	{r7, pc}
10048c16:	46c0      	nop			@ (mov r8, r8)
10048c18:	48400000 	.word	0x48400000

10048c1c <LL_RCC_DIRECT_HSE_Enable>:
  * @brief  Enable DIRECT_HSE mode
  * @rmtoll CFGR       HSESEL/STOPHSI         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DIRECT_HSE_Enable(void)
{
10048c1c:	b580      	push	{r7, lr}
10048c1e:	b082      	sub	sp, #8
10048c20:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
10048c22:	46c0      	nop			@ (mov r8, r8)
10048c24:	4b0f      	ldr	r3, [pc, #60]	@ (10048c64 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10048c26:	681a      	ldr	r2, [r3, #0]
10048c28:	2380      	movs	r3, #128	@ 0x80
10048c2a:	029b      	lsls	r3, r3, #10
10048c2c:	4013      	ands	r3, r2
10048c2e:	d0f9      	beq.n	10048c24 <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10048c30:	4b0c      	ldr	r3, [pc, #48]	@ (10048c64 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10048c32:	689a      	ldr	r2, [r3, #8]
10048c34:	4b0b      	ldr	r3, [pc, #44]	@ (10048c64 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10048c36:	2102      	movs	r1, #2
10048c38:	430a      	orrs	r2, r1
10048c3a:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
10048c3c:	2300      	movs	r3, #0
10048c3e:	607b      	str	r3, [r7, #4]
10048c40:	e003      	b.n	10048c4a <LL_RCC_DIRECT_HSE_Enable+0x2e>
  {
    __asm("NOP");
10048c42:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
10048c44:	687b      	ldr	r3, [r7, #4]
10048c46:	3301      	adds	r3, #1
10048c48:	607b      	str	r3, [r7, #4]
10048c4a:	687b      	ldr	r3, [r7, #4]
10048c4c:	2b05      	cmp	r3, #5
10048c4e:	ddf8      	ble.n	10048c42 <LL_RCC_DIRECT_HSE_Enable+0x26>
  }
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10048c50:	4b04      	ldr	r3, [pc, #16]	@ (10048c64 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10048c52:	689a      	ldr	r2, [r3, #8]
10048c54:	4b03      	ldr	r3, [pc, #12]	@ (10048c64 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10048c56:	2104      	movs	r1, #4
10048c58:	430a      	orrs	r2, r1
10048c5a:	609a      	str	r2, [r3, #8]
}
10048c5c:	46c0      	nop			@ (mov r8, r8)
10048c5e:	46bd      	mov	sp, r7
10048c60:	b002      	add	sp, #8
10048c62:	bd80      	pop	{r7, pc}
10048c64:	48400000 	.word	0x48400000

10048c68 <LL_RCC_DIRECT_HSE_IsEnabled>:
  * @brief  Check if DIRECT_HSE mode is ready
  * @rmtoll CFGR           HSESEL/STOPHSI  LL_RCC_DIRECT_HSE_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_DIRECT_HSE_IsEnabled(void)
{
10048c68:	b580      	push	{r7, lr}
10048c6a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR_HSESEL_STATUS)
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
10048c6c:	4b05      	ldr	r3, [pc, #20]	@ (10048c84 <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
10048c6e:	689b      	ldr	r3, [r3, #8]
10048c70:	2208      	movs	r2, #8
10048c72:	4013      	ands	r3, r2
10048c74:	2b08      	cmp	r3, #8
10048c76:	d101      	bne.n	10048c7c <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
10048c78:	2301      	movs	r3, #1
10048c7a:	e000      	b.n	10048c7e <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
10048c7c:	2300      	movs	r3, #0
#else
  return (((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL) == (RCC_CFGR_HSESEL)) && (READ_BIT(RCC->CFGR, RCC_CFGR_STOPHSI) == (RCC_CFGR_STOPHSI))) ? 1UL : 0UL);
#endif
}
10048c7e:	0018      	movs	r0, r3
10048c80:	46bd      	mov	sp, r7
10048c82:	bd80      	pop	{r7, pc}
10048c84:	48400000 	.word	0x48400000

10048c88 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
10048c88:	b580      	push	{r7, lr}
10048c8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEON);
10048c8c:	4b04      	ldr	r3, [pc, #16]	@ (10048ca0 <LL_RCC_LSE_Enable+0x18>)
10048c8e:	681a      	ldr	r2, [r3, #0]
10048c90:	4b03      	ldr	r3, [pc, #12]	@ (10048ca0 <LL_RCC_LSE_Enable+0x18>)
10048c92:	2110      	movs	r1, #16
10048c94:	430a      	orrs	r2, r1
10048c96:	601a      	str	r2, [r3, #0]
}
10048c98:	46c0      	nop			@ (mov r8, r8)
10048c9a:	46bd      	mov	sp, r7
10048c9c:	bd80      	pop	{r7, pc}
10048c9e:	46c0      	nop			@ (mov r8, r8)
10048ca0:	48400000 	.word	0x48400000

10048ca4 <LL_RCC_LSE_IsEnabled>:
  * @brief  Check if Low Speed External (LSE) crystal has been enabled or not
  * @rmtoll CR         LSEON         LL_RCC_LSE_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsEnabled(void)
{
10048ca4:	b580      	push	{r7, lr}
10048ca6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSEON) == (RCC_CR_LSEON)) ? 1UL : 0UL);
10048ca8:	4b05      	ldr	r3, [pc, #20]	@ (10048cc0 <LL_RCC_LSE_IsEnabled+0x1c>)
10048caa:	681b      	ldr	r3, [r3, #0]
10048cac:	2210      	movs	r2, #16
10048cae:	4013      	ands	r3, r2
10048cb0:	2b10      	cmp	r3, #16
10048cb2:	d101      	bne.n	10048cb8 <LL_RCC_LSE_IsEnabled+0x14>
10048cb4:	2301      	movs	r3, #1
10048cb6:	e000      	b.n	10048cba <LL_RCC_LSE_IsEnabled+0x16>
10048cb8:	2300      	movs	r3, #0
}
10048cba:	0018      	movs	r0, r3
10048cbc:	46bd      	mov	sp, r7
10048cbe:	bd80      	pop	{r7, pc}
10048cc0:	48400000 	.word	0x48400000

10048cc4 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
10048cc4:	b580      	push	{r7, lr}
10048cc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
10048cc8:	4b05      	ldr	r3, [pc, #20]	@ (10048ce0 <LL_RCC_LSE_IsReady+0x1c>)
10048cca:	681b      	ldr	r3, [r3, #0]
10048ccc:	2220      	movs	r2, #32
10048cce:	4013      	ands	r3, r2
10048cd0:	2b20      	cmp	r3, #32
10048cd2:	d101      	bne.n	10048cd8 <LL_RCC_LSE_IsReady+0x14>
10048cd4:	2301      	movs	r3, #1
10048cd6:	e000      	b.n	10048cda <LL_RCC_LSE_IsReady+0x16>
10048cd8:	2300      	movs	r3, #0
}
10048cda:	0018      	movs	r0, r3
10048cdc:	46bd      	mov	sp, r7
10048cde:	bd80      	pop	{r7, pc}
10048ce0:	48400000 	.word	0x48400000

10048ce4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
10048ce4:	b580      	push	{r7, lr}
10048ce6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSION);
10048ce8:	4b04      	ldr	r3, [pc, #16]	@ (10048cfc <LL_RCC_LSI_Enable+0x18>)
10048cea:	681a      	ldr	r2, [r3, #0]
10048cec:	4b03      	ldr	r3, [pc, #12]	@ (10048cfc <LL_RCC_LSI_Enable+0x18>)
10048cee:	2104      	movs	r1, #4
10048cf0:	430a      	orrs	r2, r1
10048cf2:	601a      	str	r2, [r3, #0]
}
10048cf4:	46c0      	nop			@ (mov r8, r8)
10048cf6:	46bd      	mov	sp, r7
10048cf8:	bd80      	pop	{r7, pc}
10048cfa:	46c0      	nop			@ (mov r8, r8)
10048cfc:	48400000 	.word	0x48400000

10048d00 <LL_RCC_LSI_IsEnabled>:
  * @brief  Check if LSI crystal oscillator is enabled.
  * @rmtoll CR         LSION        LL_RCC_LSI_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsEnabled(void)
{
10048d00:	b580      	push	{r7, lr}
10048d02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSION) == (RCC_CR_LSION)) ? 1UL : 0UL);
10048d04:	4b05      	ldr	r3, [pc, #20]	@ (10048d1c <LL_RCC_LSI_IsEnabled+0x1c>)
10048d06:	681b      	ldr	r3, [r3, #0]
10048d08:	2204      	movs	r2, #4
10048d0a:	4013      	ands	r3, r2
10048d0c:	2b04      	cmp	r3, #4
10048d0e:	d101      	bne.n	10048d14 <LL_RCC_LSI_IsEnabled+0x14>
10048d10:	2301      	movs	r3, #1
10048d12:	e000      	b.n	10048d16 <LL_RCC_LSI_IsEnabled+0x16>
10048d14:	2300      	movs	r3, #0
}
10048d16:	0018      	movs	r0, r3
10048d18:	46bd      	mov	sp, r7
10048d1a:	bd80      	pop	{r7, pc}
10048d1c:	48400000 	.word	0x48400000

10048d20 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
10048d20:	b580      	push	{r7, lr}
10048d22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
10048d24:	4b05      	ldr	r3, [pc, #20]	@ (10048d3c <LL_RCC_LSI_IsReady+0x1c>)
10048d26:	681b      	ldr	r3, [r3, #0]
10048d28:	2208      	movs	r2, #8
10048d2a:	4013      	ands	r3, r2
10048d2c:	2b08      	cmp	r3, #8
10048d2e:	d101      	bne.n	10048d34 <LL_RCC_LSI_IsReady+0x14>
10048d30:	2301      	movs	r3, #1
10048d32:	e000      	b.n	10048d36 <LL_RCC_LSI_IsReady+0x16>
10048d34:	2300      	movs	r3, #0
}
10048d36:	0018      	movs	r0, r3
10048d38:	46bd      	mov	sp, r7
10048d3a:	bd80      	pop	{r7, pc}
10048d3c:	48400000 	.word	0x48400000

10048d40 <LL_RCC_RC64MPLL_Disable>:
  * @note Cannot be disabled if the RC64MPLL clock is used as the system clock
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Disable(void)
{
10048d40:	b580      	push	{r7, lr}
10048d42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
10048d44:	4b04      	ldr	r3, [pc, #16]	@ (10048d58 <LL_RCC_RC64MPLL_Disable+0x18>)
10048d46:	681a      	ldr	r2, [r3, #0]
10048d48:	4b03      	ldr	r3, [pc, #12]	@ (10048d58 <LL_RCC_RC64MPLL_Disable+0x18>)
10048d4a:	4904      	ldr	r1, [pc, #16]	@ (10048d5c <LL_RCC_RC64MPLL_Disable+0x1c>)
10048d4c:	400a      	ands	r2, r1
10048d4e:	601a      	str	r2, [r3, #0]
}
10048d50:	46c0      	nop			@ (mov r8, r8)
10048d52:	46bd      	mov	sp, r7
10048d54:	bd80      	pop	{r7, pc}
10048d56:	46c0      	nop			@ (mov r8, r8)
10048d58:	48400000 	.word	0x48400000
10048d5c:	ffffdfff 	.word	0xffffdfff

10048d60 <LL_RCC_SetRC64MPLLPrescaler>:
  *         @arg @ref LL_RCC_RC64MPLL_DIV_32
  *         @arg @ref LL_RCC_RC64MPLL_DIV_64
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRC64MPLLPrescaler(uint32_t Prescaler)
{
10048d60:	b580      	push	{r7, lr}
10048d62:	b082      	sub	sp, #8
10048d64:	af00      	add	r7, sp, #0
10048d66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
10048d68:	4b06      	ldr	r3, [pc, #24]	@ (10048d84 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
10048d6a:	689b      	ldr	r3, [r3, #8]
10048d6c:	22e0      	movs	r2, #224	@ 0xe0
10048d6e:	4393      	bics	r3, r2
10048d70:	0019      	movs	r1, r3
10048d72:	4b04      	ldr	r3, [pc, #16]	@ (10048d84 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
10048d74:	687a      	ldr	r2, [r7, #4]
10048d76:	430a      	orrs	r2, r1
10048d78:	609a      	str	r2, [r3, #8]
}
10048d7a:	46c0      	nop			@ (mov r8, r8)
10048d7c:	46bd      	mov	sp, r7
10048d7e:	b002      	add	sp, #8
10048d80:	bd80      	pop	{r7, pc}
10048d82:	46c0      	nop			@ (mov r8, r8)
10048d84:	48400000 	.word	0x48400000

10048d88 <LL_RCC_GetCLKSYSPrescalerStatus>:
  *         @arg @ref LL_RCC_DIRECT_HSE_DIV_8
  *         @arg @ref LL_RCC_DIRECT_HSE_DIV_16
  *         @arg @ref LL_RCC_DIRECT_HSE_DIV_32
  */
__STATIC_INLINE uint32_t LL_RCC_GetCLKSYSPrescalerStatus(void)
{
10048d88:	b580      	push	{r7, lr}
10048d8a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->CFGR, RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos) << RCC_CFGR_CLKSYSDIV_Pos);
10048d8c:	4b04      	ldr	r3, [pc, #16]	@ (10048da0 <LL_RCC_GetCLKSYSPrescalerStatus+0x18>)
10048d8e:	689b      	ldr	r3, [r3, #8]
10048d90:	0a1b      	lsrs	r3, r3, #8
10048d92:	015b      	lsls	r3, r3, #5
10048d94:	22e0      	movs	r2, #224	@ 0xe0
10048d96:	4013      	ands	r3, r2
}
10048d98:	0018      	movs	r0, r3
10048d9a:	46bd      	mov	sp, r7
10048d9c:	bd80      	pop	{r7, pc}
10048d9e:	46c0      	nop			@ (mov r8, r8)
10048da0:	48400000 	.word	0x48400000

10048da4 <LL_APB2_GRP1_IsEnabledClock>:
{
10048da4:	b580      	push	{r7, lr}
10048da6:	b082      	sub	sp, #8
10048da8:	af00      	add	r7, sp, #0
10048daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10048dac:	4b06      	ldr	r3, [pc, #24]	@ (10048dc8 <LL_APB2_GRP1_IsEnabledClock+0x24>)
10048dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10048db0:	687a      	ldr	r2, [r7, #4]
10048db2:	4013      	ands	r3, r2
10048db4:	687a      	ldr	r2, [r7, #4]
10048db6:	429a      	cmp	r2, r3
10048db8:	d101      	bne.n	10048dbe <LL_APB2_GRP1_IsEnabledClock+0x1a>
10048dba:	2301      	movs	r3, #1
10048dbc:	e000      	b.n	10048dc0 <LL_APB2_GRP1_IsEnabledClock+0x1c>
10048dbe:	2300      	movs	r3, #0
}
10048dc0:	0018      	movs	r0, r3
10048dc2:	46bd      	mov	sp, r7
10048dc4:	b002      	add	sp, #8
10048dc6:	bd80      	pop	{r7, pc}
10048dc8:	48400000 	.word	0x48400000

10048dcc <PWR_EnterOffMode>:
/** @addtogroup TINY_LPM_IF_Exported_functions
 * @{
 */

void PWR_EnterOffMode( void )
{
10048dcc:	b590      	push	{r4, r7, lr}
10048dce:	b085      	sub	sp, #20
10048dd0:	af02      	add	r7, sp, #8
  PWR_DEEPSTOPTypeDef configDS;

  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STANDBY_MODE_ENTER);
10048dd2:	2003      	movs	r0, #3
10048dd4:	f002 fc1b 	bl	1004b60e <SYSTEM_DEBUG_SIGNAL_SET>
  /* USER CODE BEGIN PWR_EnterOffMode_1 */

  /* USER CODE END PWR_EnterOffMode_1 */

  /* Save the clock configuration */
  clockContext.directHSEenabled = FALSE;
10048dd8:	4b32      	ldr	r3, [pc, #200]	@ (10048ea4 <PWR_EnterOffMode+0xd8>)
10048dda:	2200      	movs	r2, #0
10048ddc:	701a      	strb	r2, [r3, #0]
  clockContext.LSEenabled = FALSE;
10048dde:	4b31      	ldr	r3, [pc, #196]	@ (10048ea4 <PWR_EnterOffMode+0xd8>)
10048de0:	2200      	movs	r2, #0
10048de2:	705a      	strb	r2, [r3, #1]
  clockContext.LSIenabled = FALSE;
10048de4:	4b2f      	ldr	r3, [pc, #188]	@ (10048ea4 <PWR_EnterOffMode+0xd8>)
10048de6:	2200      	movs	r2, #0
10048de8:	709a      	strb	r2, [r3, #2]
  if (LL_RCC_DIRECT_HSE_IsEnabled())
10048dea:	f7ff ff3d 	bl	10048c68 <LL_RCC_DIRECT_HSE_IsEnabled>
10048dee:	1e03      	subs	r3, r0, #0
10048df0:	d002      	beq.n	10048df8 <PWR_EnterOffMode+0x2c>
  {
    clockContext.directHSEenabled = TRUE;
10048df2:	4b2c      	ldr	r3, [pc, #176]	@ (10048ea4 <PWR_EnterOffMode+0xd8>)
10048df4:	2201      	movs	r2, #1
10048df6:	701a      	strb	r2, [r3, #0]
  }
#if defined(STM32WB07)
  clockContext.clkDiv =  LL_RCC_GetRC64MPLLPrescaler();
#else
  clockContext.clkDiv = LL_RCC_GetCLKSYSPrescalerStatus();
10048df8:	f7ff ffc6 	bl	10048d88 <LL_RCC_GetCLKSYSPrescalerStatus>
10048dfc:	0002      	movs	r2, r0
10048dfe:	4b29      	ldr	r3, [pc, #164]	@ (10048ea4 <PWR_EnterOffMode+0xd8>)
10048e00:	605a      	str	r2, [r3, #4]
#endif
  if (LL_RCC_LSE_IsEnabled())
10048e02:	f7ff ff4f 	bl	10048ca4 <LL_RCC_LSE_IsEnabled>
10048e06:	1e03      	subs	r3, r0, #0
10048e08:	d00e      	beq.n	10048e28 <PWR_EnterOffMode+0x5c>
  {
    clockContext.LSEenabled = TRUE;
10048e0a:	4b26      	ldr	r3, [pc, #152]	@ (10048ea4 <PWR_EnterOffMode+0xd8>)
10048e0c:	2201      	movs	r2, #1
10048e0e:	705a      	strb	r2, [r3, #1]
    /* Enable pull down for LSE pins */
    HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_B, PWR_GPIO_BIT_12);
10048e10:	2380      	movs	r3, #128	@ 0x80
10048e12:	015b      	lsls	r3, r3, #5
10048e14:	0019      	movs	r1, r3
10048e16:	2001      	movs	r0, #1
10048e18:	f004 fe06 	bl	1004da28 <HAL_PWREx_EnableGPIOPullDown>
    HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_B, PWR_GPIO_BIT_13);
10048e1c:	2380      	movs	r3, #128	@ 0x80
10048e1e:	019b      	lsls	r3, r3, #6
10048e20:	0019      	movs	r1, r3
10048e22:	2001      	movs	r0, #1
10048e24:	f004 fe00 	bl	1004da28 <HAL_PWREx_EnableGPIOPullDown>
  }
  if (LL_RCC_LSI_IsEnabled())
10048e28:	f7ff ff6a 	bl	10048d00 <LL_RCC_LSI_IsEnabled>
10048e2c:	1e03      	subs	r3, r0, #0
10048e2e:	d002      	beq.n	10048e36 <PWR_EnterOffMode+0x6a>
  {
    clockContext.LSIenabled = TRUE;
10048e30:	4b1c      	ldr	r3, [pc, #112]	@ (10048ea4 <PWR_EnterOffMode+0xd8>)
10048e32:	2201      	movs	r2, #1
10048e34:	709a      	strb	r2, [r3, #2]
  }

  /* This signal cannot be reset later otherwise the GPIO output will be
     automatically restored to high at wakeup. */
  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STANDBY_MODE_ENTER);
10048e36:	2003      	movs	r0, #3
10048e38:	f002 fbf3 	bl	1004b622 <SYSTEM_DEBUG_SIGNAL_RESET>

  /* Save all the peripheral registers and CPU peripipheral configuration */
  apb0.deepstop_wdg_state = ENABLE;
10048e3c:	4a1a      	ldr	r2, [pc, #104]	@ (10048ea8 <PWR_EnterOffMode+0xdc>)
10048e3e:	23ba      	movs	r3, #186	@ 0xba
10048e40:	005b      	lsls	r3, r3, #1
10048e42:	2101      	movs	r1, #1
10048e44:	50d1      	str	r1, [r2, r3]
  prepareDeviceLowPower(&apb0, &apb1, &apb2, &ahb0, &cpuPeriph, cStackPreamble);
10048e46:	4c19      	ldr	r4, [pc, #100]	@ (10048eac <PWR_EnterOffMode+0xe0>)
10048e48:	4a19      	ldr	r2, [pc, #100]	@ (10048eb0 <PWR_EnterOffMode+0xe4>)
10048e4a:	491a      	ldr	r1, [pc, #104]	@ (10048eb4 <PWR_EnterOffMode+0xe8>)
10048e4c:	4816      	ldr	r0, [pc, #88]	@ (10048ea8 <PWR_EnterOffMode+0xdc>)
10048e4e:	4b1a      	ldr	r3, [pc, #104]	@ (10048eb8 <PWR_EnterOffMode+0xec>)
10048e50:	9301      	str	r3, [sp, #4]
10048e52:	4b1a      	ldr	r3, [pc, #104]	@ (10048ebc <PWR_EnterOffMode+0xf0>)
10048e54:	9300      	str	r3, [sp, #0]
10048e56:	0023      	movs	r3, r4
10048e58:	f003 f982 	bl	1004c160 <prepareDeviceLowPower>

  /* DEEPSTOP configuration */
  configDS.deepStopMode = PWR_DEEPSTOP_WITH_SLOW_CLOCK_OFF;
10048e5c:	2300      	movs	r3, #0
10048e5e:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigDEEPSTOP(&configDS);
10048e60:	1d3b      	adds	r3, r7, #4
10048e62:	0018      	movs	r0, r3
10048e64:	f004 fd40 	bl	1004d8e8 <HAL_PWR_ConfigDEEPSTOP>

  /* Clear all the wake-up pin flags */
  LL_PWR_ClearWakeupSource(LL_PWR_WAKEUP_ALL);
10048e68:	4b15      	ldr	r3, [pc, #84]	@ (10048ec0 <PWR_EnterOffMode+0xf4>)
10048e6a:	0018      	movs	r0, r3
10048e6c:	f7ff fe96 	bl	10048b9c <LL_PWR_ClearWakeupSource>

  /* Enable the device DEEPSTOP configuration */
  LL_PWR_SetPowerMode(LL_PWR_MODE_DEEPSTOP);
10048e70:	2000      	movs	r0, #0
10048e72:	f7ff fe6f 	bl	10048b54 <LL_PWR_SetPowerMode>

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
10048e76:	4b13      	ldr	r3, [pc, #76]	@ (10048ec4 <PWR_EnterOffMode+0xf8>)
10048e78:	691a      	ldr	r2, [r3, #16]
10048e7a:	4b12      	ldr	r3, [pc, #72]	@ (10048ec4 <PWR_EnterOffMode+0xf8>)
10048e7c:	2104      	movs	r1, #4
10048e7e:	430a      	orrs	r2, r1
10048e80:	611a      	str	r2, [r3, #16]

  /* Setup the SYS CLK DIV with the reset value */
  if (clockContext.clkDiv == LL_RCC_RC64MPLL_DIV_1)
10048e82:	4b08      	ldr	r3, [pc, #32]	@ (10048ea4 <PWR_EnterOffMode+0xd8>)
10048e84:	685b      	ldr	r3, [r3, #4]
10048e86:	2b00      	cmp	r3, #0
10048e88:	d102      	bne.n	10048e90 <PWR_EnterOffMode+0xc4>
  {
    LL_RCC_SetRC64MPLLPrescaler(LL_RCC_RC64MPLL_DIV_4);
10048e8a:	2040      	movs	r0, #64	@ 0x40
10048e8c:	f7ff ff68 	bl	10048d60 <LL_RCC_SetRC64MPLLPrescaler>
  }

  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STANDBY_MODE_ACTIVE);
10048e90:	2005      	movs	r0, #5
10048e92:	f002 fbbc 	bl	1004b60e <SYSTEM_DEBUG_SIGNAL_SET>

  /* Save the CPU context & Wait for Interrupt Request to enter in DEEPSTOP */
  CPUcontextSave();
10048e96:	f7f8 f98f 	bl	100411b8 <CPUcontextSave>

  /* USER CODE BEGIN PWR_EnterOffMode_2 */

  /* USER CODE END PWR_EnterOffMode_2 */
}
10048e9a:	46c0      	nop			@ (mov r8, r8)
10048e9c:	46bd      	mov	sp, r7
10048e9e:	b003      	add	sp, #12
10048ea0:	bd90      	pop	{r4, r7, pc}
10048ea2:	46c0      	nop			@ (mov r8, r8)
10048ea4:	20000db4 	.word	0x20000db4
10048ea8:	200008dc 	.word	0x200008dc
10048eac:	20000b60 	.word	0x20000b60
10048eb0:	20000b5c 	.word	0x20000b5c
10048eb4:	20000a54 	.word	0x20000a54
10048eb8:	20000d64 	.word	0x20000d64
10048ebc:	20000d30 	.word	0x20000d30
10048ec0:	00ffffff 	.word	0x00ffffff
10048ec4:	e000ed00 	.word	0xe000ed00

10048ec8 <PWR_ExitOffMode>:

void PWR_ExitOffMode( void )
{
10048ec8:	b590      	push	{r4, r7, lr}
10048eca:	b083      	sub	sp, #12
10048ecc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN PWR_ExitOffMode_1 */

  /* USER CODE END PWR_ExitOffMode_1 */

  /* Restore low speed clock configuration */
  if (clockContext.LSEenabled == TRUE)
10048ece:	4b33      	ldr	r3, [pc, #204]	@ (10048f9c <PWR_ExitOffMode+0xd4>)
10048ed0:	785b      	ldrb	r3, [r3, #1]
10048ed2:	2b01      	cmp	r3, #1
10048ed4:	d106      	bne.n	10048ee4 <PWR_ExitOffMode+0x1c>
  {
    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_12 | LL_PWR_GPIO_BIT_13);
10048ed6:	23c0      	movs	r3, #192	@ 0xc0
10048ed8:	019b      	lsls	r3, r3, #6
10048eda:	0018      	movs	r0, r3
10048edc:	f7ff fe72 	bl	10048bc4 <LL_PWR_SetNoPullB>
    LL_RCC_LSE_Enable();
10048ee0:	f7ff fed2 	bl	10048c88 <LL_RCC_LSE_Enable>
  }
  if (clockContext.LSIenabled == TRUE)
10048ee4:	4b2d      	ldr	r3, [pc, #180]	@ (10048f9c <PWR_ExitOffMode+0xd4>)
10048ee6:	789b      	ldrb	r3, [r3, #2]
10048ee8:	2b01      	cmp	r3, #1
10048eea:	d101      	bne.n	10048ef0 <PWR_ExitOffMode+0x28>
  {
    LL_RCC_LSI_Enable();
10048eec:	f7ff fefa 	bl	10048ce4 <LL_RCC_LSI_Enable>
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
10048ef0:	4b2b      	ldr	r3, [pc, #172]	@ (10048fa0 <PWR_ExitOffMode+0xd8>)
10048ef2:	691a      	ldr	r2, [r3, #16]
10048ef4:	4b2a      	ldr	r3, [pc, #168]	@ (10048fa0 <PWR_ExitOffMode+0xd8>)
10048ef6:	2104      	movs	r1, #4
10048ef8:	438a      	bics	r2, r1
10048efa:	611a      	str	r2, [r3, #16]

  /* Restore all the peripheral registers and CPU peripipheral configuration */
  restoreDeviceLowPower(&apb0, &apb1, &apb2, &ahb0, &cpuPeriph, cStackPreamble);
10048efc:	4c29      	ldr	r4, [pc, #164]	@ (10048fa4 <PWR_ExitOffMode+0xdc>)
10048efe:	4a2a      	ldr	r2, [pc, #168]	@ (10048fa8 <PWR_ExitOffMode+0xe0>)
10048f00:	492a      	ldr	r1, [pc, #168]	@ (10048fac <PWR_ExitOffMode+0xe4>)
10048f02:	482b      	ldr	r0, [pc, #172]	@ (10048fb0 <PWR_ExitOffMode+0xe8>)
10048f04:	4b2b      	ldr	r3, [pc, #172]	@ (10048fb4 <PWR_ExitOffMode+0xec>)
10048f06:	9301      	str	r3, [sp, #4]
10048f08:	4b2b      	ldr	r3, [pc, #172]	@ (10048fb8 <PWR_ExitOffMode+0xf0>)
10048f0a:	9300      	str	r3, [sp, #0]
10048f0c:	0023      	movs	r3, r4
10048f0e:	f003 f943 	bl	1004c198 <restoreDeviceLowPower>

  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STANDBY_MODE_ACTIVE);
10048f12:	2005      	movs	r0, #5
10048f14:	f002 fb85 	bl	1004b622 <SYSTEM_DEBUG_SIGNAL_RESET>
  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STANDBY_MODE_EXIT);
10048f18:	2004      	movs	r0, #4
10048f1a:	f002 fb78 	bl	1004b60e <SYSTEM_DEBUG_SIGNAL_SET>

#if defined(PWR_CR2_GPIORET)
  /* Disable the GPIO retention at wake DEEPSTOP configuration */
  LL_PWR_DisableGPIORET();
10048f1e:	f7ff fe2d 	bl	10048b7c <LL_PWR_DisableGPIORET>
#endif

  /* Restore the CLK SYS DIV */
  if (clockContext.clkDiv == LL_RCC_RC64MPLL_DIV_1)
10048f22:	4b1e      	ldr	r3, [pc, #120]	@ (10048f9c <PWR_ExitOffMode+0xd4>)
10048f24:	685b      	ldr	r3, [r3, #4]
10048f26:	2b00      	cmp	r3, #0
10048f28:	d102      	bne.n	10048f30 <PWR_ExitOffMode+0x68>
  {
    LL_RCC_SetRC64MPLLPrescaler(LL_RCC_RC64MPLL_DIV_1);
10048f2a:	2000      	movs	r0, #0
10048f2c:	f7ff ff18 	bl	10048d60 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* Wait until the HSE is ready */
  while(LL_RCC_HSE_IsReady() == 0U);
10048f30:	46c0      	nop			@ (mov r8, r8)
10048f32:	f7ff fe5f 	bl	10048bf4 <LL_RCC_HSE_IsReady>
10048f36:	1e03      	subs	r3, r0, #0
10048f38:	d0fb      	beq.n	10048f32 <PWR_ExitOffMode+0x6a>

  /* Restore the DIRECT_HSE configuration */
  if (clockContext.directHSEenabled == TRUE)
10048f3a:	4b18      	ldr	r3, [pc, #96]	@ (10048f9c <PWR_ExitOffMode+0xd4>)
10048f3c:	781b      	ldrb	r3, [r3, #0]
10048f3e:	2b01      	cmp	r3, #1
10048f40:	d103      	bne.n	10048f4a <PWR_ExitOffMode+0x82>
  {
    LL_RCC_DIRECT_HSE_Enable();
10048f42:	f7ff fe6b 	bl	10048c1c <LL_RCC_DIRECT_HSE_Enable>
    LL_RCC_RC64MPLL_Disable();
10048f46:	f7ff fefb 	bl	10048d40 <LL_RCC_RC64MPLL_Disable>
  }
  if (clockContext.LSEenabled == TRUE)
10048f4a:	4b14      	ldr	r3, [pc, #80]	@ (10048f9c <PWR_ExitOffMode+0xd4>)
10048f4c:	785b      	ldrb	r3, [r3, #1]
10048f4e:	2b01      	cmp	r3, #1
10048f50:	d104      	bne.n	10048f5c <PWR_ExitOffMode+0x94>
  {
    /* Wait until the LSE is ready */
    while(LL_RCC_LSE_IsReady() == 0U);
10048f52:	46c0      	nop			@ (mov r8, r8)
10048f54:	f7ff feb6 	bl	10048cc4 <LL_RCC_LSE_IsReady>
10048f58:	1e03      	subs	r3, r0, #0
10048f5a:	d0fb      	beq.n	10048f54 <PWR_ExitOffMode+0x8c>
  }
  if (clockContext.LSIenabled == TRUE)
10048f5c:	4b0f      	ldr	r3, [pc, #60]	@ (10048f9c <PWR_ExitOffMode+0xd4>)
10048f5e:	789b      	ldrb	r3, [r3, #2]
10048f60:	2b01      	cmp	r3, #1
10048f62:	d104      	bne.n	10048f6e <PWR_ExitOffMode+0xa6>
  {
    /* Wait until the LSI is ready */
    while(LL_RCC_LSI_IsReady() == 0U);
10048f64:	46c0      	nop			@ (mov r8, r8)
10048f66:	f7ff fedb 	bl	10048d20 <LL_RCC_LSI_IsReady>
10048f6a:	1e03      	subs	r3, r0, #0
10048f6c:	d0fb      	beq.n	10048f66 <PWR_ExitOffMode+0x9e>
  }
  if (LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
10048f6e:	2001      	movs	r0, #1
10048f70:	f7ff ff18 	bl	10048da4 <LL_APB2_GRP1_IsEnabledClock>
10048f74:	1e03      	subs	r3, r0, #0
10048f76:	d004      	beq.n	10048f82 <PWR_ExitOffMode+0xba>
  {
    /* Wait untile the ABSOLUTE TIME clock correctly */
    while(WAKEUP->ABSOLUTE_TIME == 0xF);
10048f78:	46c0      	nop			@ (mov r8, r8)
10048f7a:	4b10      	ldr	r3, [pc, #64]	@ (10048fbc <PWR_ExitOffMode+0xf4>)
10048f7c:	691b      	ldr	r3, [r3, #16]
10048f7e:	2b0f      	cmp	r3, #15
10048f80:	d0fb      	beq.n	10048f7a <PWR_ExitOffMode+0xb2>
  }

  if(RAM_VR.WakeupFromSleepFlag)
10048f82:	4b0f      	ldr	r3, [pc, #60]	@ (10048fc0 <PWR_ExitOffMode+0xf8>)
10048f84:	689b      	ldr	r3, [r3, #8]
10048f86:	2b00      	cmp	r3, #0
10048f88:	d001      	beq.n	10048f8e <PWR_ExitOffMode+0xc6>
  {
    /* Handler to manage the IOs IRQ if needed */
    HAL_PWR_WKUP_IRQHandler();
10048f8a:	f004 fd01 	bl	1004d990 <HAL_PWR_WKUP_IRQHandler>

  /* USER CODE BEGIN PWR_ExitOffMode_2 */

  /* USER CODE END PWR_ExitOffMode_2 */

  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STANDBY_MODE_EXIT);
10048f8e:	2004      	movs	r0, #4
10048f90:	f002 fb47 	bl	1004b622 <SYSTEM_DEBUG_SIGNAL_RESET>
}
10048f94:	46c0      	nop			@ (mov r8, r8)
10048f96:	46bd      	mov	sp, r7
10048f98:	b001      	add	sp, #4
10048f9a:	bd90      	pop	{r4, r7, pc}
10048f9c:	20000db4 	.word	0x20000db4
10048fa0:	e000ed00 	.word	0xe000ed00
10048fa4:	20000b60 	.word	0x20000b60
10048fa8:	20000b5c 	.word	0x20000b5c
10048fac:	20000a54 	.word	0x20000a54
10048fb0:	200008dc 	.word	0x200008dc
10048fb4:	20000d64 	.word	0x20000d64
10048fb8:	20000d30 	.word	0x20000d30
10048fbc:	60001800 	.word	0x60001800
10048fc0:	20000004 	.word	0x20000004

10048fc4 <PWR_EnterStopMode>:

void PWR_EnterStopMode( void )
{
10048fc4:	b590      	push	{r4, r7, lr}
10048fc6:	b085      	sub	sp, #20
10048fc8:	af02      	add	r7, sp, #8
  PWR_DEEPSTOPTypeDef configDS;

  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STOP_MODE_ENTER);
10048fca:	2000      	movs	r0, #0
10048fcc:	f002 fb1f 	bl	1004b60e <SYSTEM_DEBUG_SIGNAL_SET>
  /* USER CODE BEGIN PWR_EnterStopMode_1 */

  /* USER CODE END PWR_EnterStopMode_1 */

  /* Save the clock configuration */
  clockContext.directHSEenabled = FALSE;
10048fd0:	4b29      	ldr	r3, [pc, #164]	@ (10049078 <PWR_EnterStopMode+0xb4>)
10048fd2:	2200      	movs	r2, #0
10048fd4:	701a      	strb	r2, [r3, #0]
  clockContext.LSEenabled = FALSE;
10048fd6:	4b28      	ldr	r3, [pc, #160]	@ (10049078 <PWR_EnterStopMode+0xb4>)
10048fd8:	2200      	movs	r2, #0
10048fda:	705a      	strb	r2, [r3, #1]
  clockContext.LSIenabled = FALSE;
10048fdc:	4b26      	ldr	r3, [pc, #152]	@ (10049078 <PWR_EnterStopMode+0xb4>)
10048fde:	2200      	movs	r2, #0
10048fe0:	709a      	strb	r2, [r3, #2]
  if (LL_RCC_DIRECT_HSE_IsEnabled())
10048fe2:	f7ff fe41 	bl	10048c68 <LL_RCC_DIRECT_HSE_IsEnabled>
10048fe6:	1e03      	subs	r3, r0, #0
10048fe8:	d002      	beq.n	10048ff0 <PWR_EnterStopMode+0x2c>
  {
    clockContext.directHSEenabled = TRUE;
10048fea:	4b23      	ldr	r3, [pc, #140]	@ (10049078 <PWR_EnterStopMode+0xb4>)
10048fec:	2201      	movs	r2, #1
10048fee:	701a      	strb	r2, [r3, #0]
  }
#if defined(STM32WB07)
  clockContext.clkDiv =  LL_RCC_GetRC64MPLLPrescaler();
#else
  clockContext.clkDiv = LL_RCC_GetCLKSYSPrescalerStatus();
10048ff0:	f7ff feca 	bl	10048d88 <LL_RCC_GetCLKSYSPrescalerStatus>
10048ff4:	0002      	movs	r2, r0
10048ff6:	4b20      	ldr	r3, [pc, #128]	@ (10049078 <PWR_EnterStopMode+0xb4>)
10048ff8:	605a      	str	r2, [r3, #4]
#endif

  /* Setup the wakeup sources */
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_BLEHOST|PWR_WAKEUP_BLE, 0);
10048ffa:	23c0      	movs	r3, #192	@ 0xc0
10048ffc:	019b      	lsls	r3, r3, #6
10048ffe:	2100      	movs	r1, #0
10049000:	0018      	movs	r0, r3
10049002:	f004 fc15 	bl	1004d830 <HAL_PWR_EnableWakeUpPin>

  /* This signal cannot be reset later otherwise the GPIO output will be
     automatically restored to high at wakeup. */
  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STOP_MODE_ENTER);
10049006:	2000      	movs	r0, #0
10049008:	f002 fb0b 	bl	1004b622 <SYSTEM_DEBUG_SIGNAL_RESET>

  /* Save all the peripheral registers and CPU peripipheral configuration */
  apb0.deepstop_wdg_state = ENABLE;
1004900c:	4a1b      	ldr	r2, [pc, #108]	@ (1004907c <PWR_EnterStopMode+0xb8>)
1004900e:	23ba      	movs	r3, #186	@ 0xba
10049010:	005b      	lsls	r3, r3, #1
10049012:	2101      	movs	r1, #1
10049014:	50d1      	str	r1, [r2, r3]
  prepareDeviceLowPower(&apb0, &apb1, &apb2, &ahb0, &cpuPeriph, cStackPreamble);
10049016:	4c1a      	ldr	r4, [pc, #104]	@ (10049080 <PWR_EnterStopMode+0xbc>)
10049018:	4a1a      	ldr	r2, [pc, #104]	@ (10049084 <PWR_EnterStopMode+0xc0>)
1004901a:	491b      	ldr	r1, [pc, #108]	@ (10049088 <PWR_EnterStopMode+0xc4>)
1004901c:	4817      	ldr	r0, [pc, #92]	@ (1004907c <PWR_EnterStopMode+0xb8>)
1004901e:	4b1b      	ldr	r3, [pc, #108]	@ (1004908c <PWR_EnterStopMode+0xc8>)
10049020:	9301      	str	r3, [sp, #4]
10049022:	4b1b      	ldr	r3, [pc, #108]	@ (10049090 <PWR_EnterStopMode+0xcc>)
10049024:	9300      	str	r3, [sp, #0]
10049026:	0023      	movs	r3, r4
10049028:	f003 f89a 	bl	1004c160 <prepareDeviceLowPower>

  /* Clear all the wake-up pin flags */
  LL_PWR_ClearWakeupSource(LL_PWR_WAKEUP_ALL);
1004902c:	4b19      	ldr	r3, [pc, #100]	@ (10049094 <PWR_EnterStopMode+0xd0>)
1004902e:	0018      	movs	r0, r3
10049030:	f7ff fdb4 	bl	10048b9c <LL_PWR_ClearWakeupSource>

  /* DEEPSTOP configuration */
  configDS.deepStopMode = PWR_DEEPSTOP_WITH_SLOW_CLOCK_ON;
10049034:	2301      	movs	r3, #1
10049036:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigDEEPSTOP(&configDS);
10049038:	1d3b      	adds	r3, r7, #4
1004903a:	0018      	movs	r0, r3
1004903c:	f004 fc54 	bl	1004d8e8 <HAL_PWR_ConfigDEEPSTOP>

  /* Enable the device DEEPSTOP configuration */
  LL_PWR_SetPowerMode(LL_PWR_MODE_DEEPSTOP);
10049040:	2000      	movs	r0, #0
10049042:	f7ff fd87 	bl	10048b54 <LL_PWR_SetPowerMode>

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
10049046:	4b14      	ldr	r3, [pc, #80]	@ (10049098 <PWR_EnterStopMode+0xd4>)
10049048:	691a      	ldr	r2, [r3, #16]
1004904a:	4b13      	ldr	r3, [pc, #76]	@ (10049098 <PWR_EnterStopMode+0xd4>)
1004904c:	2104      	movs	r1, #4
1004904e:	430a      	orrs	r2, r1
10049050:	611a      	str	r2, [r3, #16]

  /* Setup the SYS CLK DIV with the reset value */
  if (clockContext.clkDiv == LL_RCC_RC64MPLL_DIV_1)
10049052:	4b09      	ldr	r3, [pc, #36]	@ (10049078 <PWR_EnterStopMode+0xb4>)
10049054:	685b      	ldr	r3, [r3, #4]
10049056:	2b00      	cmp	r3, #0
10049058:	d102      	bne.n	10049060 <PWR_EnterStopMode+0x9c>
  {
    LL_RCC_SetRC64MPLLPrescaler(LL_RCC_RC64MPLL_DIV_4);
1004905a:	2040      	movs	r0, #64	@ 0x40
1004905c:	f7ff fe80 	bl	10048d60 <LL_RCC_SetRC64MPLLPrescaler>
  }

  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STOP_MODE_ACTIVE);
10049060:	2002      	movs	r0, #2
10049062:	f002 fad4 	bl	1004b60e <SYSTEM_DEBUG_SIGNAL_SET>

  /* Save the CPU context & Wait for Interrupt Request to enter in DEEPSTOP */
  CPUcontextSave();
10049066:	f7f8 f8a7 	bl	100411b8 <CPUcontextSave>

  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STOP_MODE_ACTIVE);
1004906a:	2002      	movs	r0, #2
1004906c:	f002 fad9 	bl	1004b622 <SYSTEM_DEBUG_SIGNAL_RESET>

  /* USER CODE BEGIN PWR_EnterStopMode_2 */

  /* USER CODE END PWR_EnterStopMode_2 */
}
10049070:	46c0      	nop			@ (mov r8, r8)
10049072:	46bd      	mov	sp, r7
10049074:	b003      	add	sp, #12
10049076:	bd90      	pop	{r4, r7, pc}
10049078:	20000db4 	.word	0x20000db4
1004907c:	200008dc 	.word	0x200008dc
10049080:	20000b60 	.word	0x20000b60
10049084:	20000b5c 	.word	0x20000b5c
10049088:	20000a54 	.word	0x20000a54
1004908c:	20000d64 	.word	0x20000d64
10049090:	20000d30 	.word	0x20000d30
10049094:	00ffffff 	.word	0x00ffffff
10049098:	e000ed00 	.word	0xe000ed00

1004909c <PWR_ExitStopMode>:

void PWR_ExitStopMode( void )
{
1004909c:	b590      	push	{r4, r7, lr}
1004909e:	b083      	sub	sp, #12
100490a0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN PWR_ExitStopMode_1 */

  /* USER CODE END PWR_ExitStopMode_1 */

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
100490a2:	4b1b      	ldr	r3, [pc, #108]	@ (10049110 <PWR_ExitStopMode+0x74>)
100490a4:	691a      	ldr	r2, [r3, #16]
100490a6:	4b1a      	ldr	r3, [pc, #104]	@ (10049110 <PWR_ExitStopMode+0x74>)
100490a8:	2104      	movs	r1, #4
100490aa:	438a      	bics	r2, r1
100490ac:	611a      	str	r2, [r3, #16]

  /* Restore all the peripheral registers and CPU peripipheral configuration */
  restoreDeviceLowPower(&apb0, &apb1, &apb2, &ahb0, &cpuPeriph, cStackPreamble);
100490ae:	4c19      	ldr	r4, [pc, #100]	@ (10049114 <PWR_ExitStopMode+0x78>)
100490b0:	4a19      	ldr	r2, [pc, #100]	@ (10049118 <PWR_ExitStopMode+0x7c>)
100490b2:	491a      	ldr	r1, [pc, #104]	@ (1004911c <PWR_ExitStopMode+0x80>)
100490b4:	481a      	ldr	r0, [pc, #104]	@ (10049120 <PWR_ExitStopMode+0x84>)
100490b6:	4b1b      	ldr	r3, [pc, #108]	@ (10049124 <PWR_ExitStopMode+0x88>)
100490b8:	9301      	str	r3, [sp, #4]
100490ba:	4b1b      	ldr	r3, [pc, #108]	@ (10049128 <PWR_ExitStopMode+0x8c>)
100490bc:	9300      	str	r3, [sp, #0]
100490be:	0023      	movs	r3, r4
100490c0:	f003 f86a 	bl	1004c198 <restoreDeviceLowPower>

  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STOP_MODE_EXIT);
100490c4:	2001      	movs	r0, #1
100490c6:	f002 faa2 	bl	1004b60e <SYSTEM_DEBUG_SIGNAL_SET>

#if defined(PWR_CR2_GPIORET)
  /* Disable the GPIO retention at wake DEEPSTOP configuration */
  LL_PWR_DisableGPIORET();
100490ca:	f7ff fd57 	bl	10048b7c <LL_PWR_DisableGPIORET>
#endif

  /* Restore the CLK SYS DIV */
  if (clockContext.clkDiv == LL_RCC_RC64MPLL_DIV_1)
100490ce:	4b17      	ldr	r3, [pc, #92]	@ (1004912c <PWR_ExitStopMode+0x90>)
100490d0:	685b      	ldr	r3, [r3, #4]
100490d2:	2b00      	cmp	r3, #0
100490d4:	d102      	bne.n	100490dc <PWR_ExitStopMode+0x40>
  {
    LL_RCC_SetRC64MPLLPrescaler(LL_RCC_RC64MPLL_DIV_1);
100490d6:	2000      	movs	r0, #0
100490d8:	f7ff fe42 	bl	10048d60 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* Wait until the HSE is ready */
  while(LL_RCC_HSE_IsReady() == 0U);
100490dc:	46c0      	nop			@ (mov r8, r8)
100490de:	f7ff fd89 	bl	10048bf4 <LL_RCC_HSE_IsReady>
100490e2:	1e03      	subs	r3, r0, #0
100490e4:	d0fb      	beq.n	100490de <PWR_ExitStopMode+0x42>

  /* Restore the DIRECT_HSE configuration */
  if (clockContext.directHSEenabled == TRUE)
100490e6:	4b11      	ldr	r3, [pc, #68]	@ (1004912c <PWR_ExitStopMode+0x90>)
100490e8:	781b      	ldrb	r3, [r3, #0]
100490ea:	2b01      	cmp	r3, #1
100490ec:	d103      	bne.n	100490f6 <PWR_ExitStopMode+0x5a>
  {
    LL_RCC_DIRECT_HSE_Enable();
100490ee:	f7ff fd95 	bl	10048c1c <LL_RCC_DIRECT_HSE_Enable>
    LL_RCC_RC64MPLL_Disable();
100490f2:	f7ff fe25 	bl	10048d40 <LL_RCC_RC64MPLL_Disable>
  }

  if(RAM_VR.WakeupFromSleepFlag)
100490f6:	4b0e      	ldr	r3, [pc, #56]	@ (10049130 <PWR_ExitStopMode+0x94>)
100490f8:	689b      	ldr	r3, [r3, #8]
100490fa:	2b00      	cmp	r3, #0
100490fc:	d001      	beq.n	10049102 <PWR_ExitStopMode+0x66>
  {
    /* Handler to manage the IOs IRQ if needed */
    HAL_PWR_WKUP_IRQHandler();
100490fe:	f004 fc47 	bl	1004d990 <HAL_PWR_WKUP_IRQHandler>

  /* USER CODE BEGIN PWR_ExitStopMode_2 */

  /* USER CODE END PWR_ExitStopMode_2 */

  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STOP_MODE_EXIT);
10049102:	2001      	movs	r0, #1
10049104:	f002 fa8d 	bl	1004b622 <SYSTEM_DEBUG_SIGNAL_RESET>
}
10049108:	46c0      	nop			@ (mov r8, r8)
1004910a:	46bd      	mov	sp, r7
1004910c:	b001      	add	sp, #4
1004910e:	bd90      	pop	{r4, r7, pc}
10049110:	e000ed00 	.word	0xe000ed00
10049114:	20000b60 	.word	0x20000b60
10049118:	20000b5c 	.word	0x20000b5c
1004911c:	20000a54 	.word	0x20000a54
10049120:	200008dc 	.word	0x200008dc
10049124:	20000d64 	.word	0x20000d64
10049128:	20000d30 	.word	0x20000d30
1004912c:	20000db4 	.word	0x20000db4
10049130:	20000004 	.word	0x20000004

10049134 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode( void )
{
10049134:	b580      	push	{r7, lr}
10049136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PWR_EnterSleepMode */
  HAL_SuspendTick();
10049138:	f003 fd3e 	bl	1004cbb8 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode();
1004913c:	f004 fbc6 	bl	1004d8cc <HAL_PWR_EnterSLEEPMode>
  /* USER CODE END PWR_EnterSleepMode */
}
10049140:	46c0      	nop			@ (mov r8, r8)
10049142:	46bd      	mov	sp, r7
10049144:	bd80      	pop	{r7, pc}

10049146 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode( void )
{
10049146:	b580      	push	{r7, lr}
10049148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PWR_ExitSleepMode */
  HAL_ResumeTick();
1004914a:	f003 fd43 	bl	1004cbd4 <HAL_ResumeTick>
  /* USER CODE END PWR_ExitSleepMode */
}
1004914e:	46c0      	nop			@ (mov r8, r8)
10049150:	46bd      	mov	sp, r7
10049152:	bd80      	pop	{r7, pc}

10049154 <FD_SetStatus>:
  * @param  Flags_bm: Bit mask identifying the caller (1 bit per user)
  * @param  Status:   Action requested
  * @retval None
  */
void FD_SetStatus(FD_FlashAccess_bm_t Flags_bm, FD_FLASH_Status_t Status)
{
10049154:	b580      	push	{r7, lr}
10049156:	b086      	sub	sp, #24
10049158:	af00      	add	r7, sp, #0
1004915a:	0002      	movs	r2, r0
1004915c:	1dfb      	adds	r3, r7, #7
1004915e:	701a      	strb	r2, [r3, #0]
10049160:	1dbb      	adds	r3, r7, #6
10049162:	1c0a      	adds	r2, r1, #0
10049164:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049166:	f3ef 8310 	mrs	r3, PRIMASK
1004916a:	613b      	str	r3, [r7, #16]
  return(result);
1004916c:	693b      	ldr	r3, [r7, #16]
  UTILS_ENTER_CRITICAL_SECTION();
1004916e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
10049170:	b672      	cpsid	i
}
10049172:	46c0      	nop			@ (mov r8, r8)

  switch (Status)
10049174:	1dbb      	adds	r3, r7, #6
10049176:	781b      	ldrb	r3, [r3, #0]
10049178:	2b00      	cmp	r3, #0
1004917a:	d002      	beq.n	10049182 <FD_SetStatus+0x2e>
1004917c:	2b01      	cmp	r3, #1
1004917e:	d00a      	beq.n	10049196 <FD_SetStatus+0x42>
      FD_Flash_Control_status &= ~(1u << Flags_bm);
      break;
    }
    default :
    {
      break;
10049180:	e015      	b.n	100491ae <FD_SetStatus+0x5a>
      FD_Flash_Control_status |= (1u << Flags_bm);
10049182:	1dfb      	adds	r3, r7, #7
10049184:	781b      	ldrb	r3, [r3, #0]
10049186:	2201      	movs	r2, #1
10049188:	409a      	lsls	r2, r3
1004918a:	4b0e      	ldr	r3, [pc, #56]	@ (100491c4 <FD_SetStatus+0x70>)
1004918c:	681b      	ldr	r3, [r3, #0]
1004918e:	431a      	orrs	r2, r3
10049190:	4b0c      	ldr	r3, [pc, #48]	@ (100491c4 <FD_SetStatus+0x70>)
10049192:	601a      	str	r2, [r3, #0]
      break;
10049194:	e00b      	b.n	100491ae <FD_SetStatus+0x5a>
      FD_Flash_Control_status &= ~(1u << Flags_bm);
10049196:	1dfb      	adds	r3, r7, #7
10049198:	781b      	ldrb	r3, [r3, #0]
1004919a:	2201      	movs	r2, #1
1004919c:	409a      	lsls	r2, r3
1004919e:	0013      	movs	r3, r2
100491a0:	43da      	mvns	r2, r3
100491a2:	4b08      	ldr	r3, [pc, #32]	@ (100491c4 <FD_SetStatus+0x70>)
100491a4:	681b      	ldr	r3, [r3, #0]
100491a6:	401a      	ands	r2, r3
100491a8:	4b06      	ldr	r3, [pc, #24]	@ (100491c4 <FD_SetStatus+0x70>)
100491aa:	601a      	str	r2, [r3, #0]
      break;
100491ac:	46c0      	nop			@ (mov r8, r8)
100491ae:	697b      	ldr	r3, [r7, #20]
100491b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100491b2:	68fb      	ldr	r3, [r7, #12]
100491b4:	f383 8810 	msr	PRIMASK, r3
}
100491b8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  UTILS_EXIT_CRITICAL_SECTION();
}
100491ba:	46c0      	nop			@ (mov r8, r8)
100491bc:	46bd      	mov	sp, r7
100491be:	b006      	add	sp, #24
100491c0:	bd80      	pop	{r7, pc}
100491c2:	46c0      	nop			@ (mov r8, r8)
100491c4:	20000dbc 	.word	0x20000dbc

100491c8 <FD_TimeCheck>:

static uint8_t FD_TimeCheck(int32_t time)
{
100491c8:	b580      	push	{r7, lr}
100491ca:	b084      	sub	sp, #16
100491cc:	af00      	add	r7, sp, #0
100491ce:	6078      	str	r0, [r7, #4]
  uint32_t current_time, next_radio_activity_time;

  current_time = HAL_RADIO_TIMER_GetCurrentSysTime();
100491d0:	f005 ffa6 	bl	1004f120 <HAL_RADIO_TIMER_GetCurrentSysTime>
100491d4:	0002      	movs	r2, r0
100491d6:	000b      	movs	r3, r1
100491d8:	0013      	movs	r3, r2
100491da:	60fb      	str	r3, [r7, #12]

  if(BLE_STACK_ReadNextRadioActivity(&next_radio_activity_time) == LL_IDLE)
100491dc:	2308      	movs	r3, #8
100491de:	18fb      	adds	r3, r7, r3
100491e0:	0018      	movs	r0, r3
100491e2:	f009 fb95 	bl	10052910 <BLE_STACK_ReadNextRadioActivity>
100491e6:	1e03      	subs	r3, r0, #0
100491e8:	d101      	bne.n	100491ee <FD_TimeCheck+0x26>
    return TRUE;
100491ea:	2301      	movs	r3, #1
100491ec:	e009      	b.n	10049202 <FD_TimeCheck+0x3a>

  if((int32_t)(next_radio_activity_time - current_time) > time)
100491ee:	68ba      	ldr	r2, [r7, #8]
100491f0:	68fb      	ldr	r3, [r7, #12]
100491f2:	1ad3      	subs	r3, r2, r3
100491f4:	001a      	movs	r2, r3
100491f6:	687b      	ldr	r3, [r7, #4]
100491f8:	4293      	cmp	r3, r2
100491fa:	da01      	bge.n	10049200 <FD_TimeCheck+0x38>
    return TRUE;
100491fc:	2301      	movs	r3, #1
100491fe:	e000      	b.n	10049202 <FD_TimeCheck+0x3a>

  return FALSE;
10049200:	2300      	movs	r3, #0
}
10049202:	0018      	movs	r0, r3
10049204:	46bd      	mov	sp, r7
10049206:	b004      	add	sp, #16
10049208:	bd80      	pop	{r7, pc}
	...

1004920c <FD_WriteData32>:
  * @param  Dest: Address where to write in Flash (128-bit aligned)
  * @param  Payload: Address of data to be written in Flash (32-bit aligned)
  * @retval FD_FlashOp_Status_t: Success or failure of Flash write operation
  */
FD_FlashOp_Status_t FD_WriteData32(uint32_t Dest, uint32_t *Payload)
{
1004920c:	b580      	push	{r7, lr}
1004920e:	b086      	sub	sp, #24
10049210:	af00      	add	r7, sp, #0
10049212:	6078      	str	r0, [r7, #4]
10049214:	6039      	str	r1, [r7, #0]
  FD_FlashOp_Status_t status = FD_FLASHOP_FAILURE;
10049216:	2317      	movs	r3, #23
10049218:	18fb      	adds	r3, r7, r3
1004921a:	2201      	movs	r2, #1
1004921c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004921e:	f3ef 8310 	mrs	r3, PRIMASK
10049222:	60fb      	str	r3, [r7, #12]
  return(result);
10049224:	68fb      	ldr	r3, [r7, #12]

  ATOMIC_SECTION_BEGIN();
10049226:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
10049228:	b672      	cpsid	i
}
1004922a:	46c0      	nop			@ (mov r8, r8)

  DEBUG_GPIO_HIGH();

  if(FD_Flash_Control_status & (1u << FD_FLASHACCESS_RFTS_BYPASS) || FD_TimeCheck(QUAD_WORD_WRITE_TIME_SYS))
1004922c:	4b11      	ldr	r3, [pc, #68]	@ (10049274 <FD_WriteData32+0x68>)
1004922e:	681b      	ldr	r3, [r3, #0]
10049230:	2201      	movs	r2, #1
10049232:	4013      	ands	r3, r2
10049234:	d104      	bne.n	10049240 <FD_WriteData32+0x34>
10049236:	204a      	movs	r0, #74	@ 0x4a
10049238:	f7ff ffc6 	bl	100491c8 <FD_TimeCheck>
1004923c:	1e03      	subs	r3, r0, #0
1004923e:	d00c      	beq.n	1004925a <FD_WriteData32+0x4e>
  {
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Dest, *Payload) == HAL_OK)
10049240:	683b      	ldr	r3, [r7, #0]
10049242:	681a      	ldr	r2, [r3, #0]
10049244:	687b      	ldr	r3, [r7, #4]
10049246:	0019      	movs	r1, r3
10049248:	2000      	movs	r0, #0
1004924a:	f003 fdaf 	bl	1004cdac <HAL_FLASH_Program>
1004924e:	1e03      	subs	r3, r0, #0
10049250:	d103      	bne.n	1004925a <FD_WriteData32+0x4e>
    {
      status = FD_FLASHOP_SUCCESS;
10049252:	2317      	movs	r3, #23
10049254:	18fb      	adds	r3, r7, r3
10049256:	2200      	movs	r2, #0
10049258:	701a      	strb	r2, [r3, #0]
1004925a:	693b      	ldr	r3, [r7, #16]
1004925c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004925e:	68bb      	ldr	r3, [r7, #8]
10049260:	f383 8810 	msr	PRIMASK, r3
}
10049264:	46c0      	nop			@ (mov r8, r8)

  DEBUG_GPIO_LOW();

  ATOMIC_SECTION_END();

  return status;
10049266:	2317      	movs	r3, #23
10049268:	18fb      	adds	r3, r7, r3
1004926a:	781b      	ldrb	r3, [r3, #0]
}
1004926c:	0018      	movs	r0, r3
1004926e:	46bd      	mov	sp, r7
10049270:	b006      	add	sp, #24
10049272:	bd80      	pop	{r7, pc}
10049274:	20000dbc 	.word	0x20000dbc

10049278 <FD_WriteData128>:
  * @param  Dest: Address where to write in Flash (128-bit aligned)
  * @param  Payload: Address of data to be written in Flash (32-bit aligned)
  * @retval FD_FlashOp_Status_t: Success or failure of Flash write operation
  */
FD_FlashOp_Status_t FD_WriteData128(uint32_t Dest, uint32_t *Payload)
{
10049278:	b580      	push	{r7, lr}
1004927a:	b086      	sub	sp, #24
1004927c:	af00      	add	r7, sp, #0
1004927e:	6078      	str	r0, [r7, #4]
10049280:	6039      	str	r1, [r7, #0]
  FD_FlashOp_Status_t status = FD_FLASHOP_FAILURE;
10049282:	2317      	movs	r3, #23
10049284:	18fb      	adds	r3, r7, r3
10049286:	2201      	movs	r2, #1
10049288:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004928a:	f3ef 8310 	mrs	r3, PRIMASK
1004928e:	60fb      	str	r3, [r7, #12]
  return(result);
10049290:	68fb      	ldr	r3, [r7, #12]

  ATOMIC_SECTION_BEGIN();
10049292:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
10049294:	b672      	cpsid	i
}
10049296:	46c0      	nop			@ (mov r8, r8)

  DEBUG_GPIO_HIGH();

  if(FD_Flash_Control_status & (1u << FD_FLASHACCESS_RFTS_BYPASS) || FD_TimeCheck(QUAD_WORD_WRITE_TIME_SYS))
10049298:	4b11      	ldr	r3, [pc, #68]	@ (100492e0 <FD_WriteData128+0x68>)
1004929a:	681b      	ldr	r3, [r3, #0]
1004929c:	2201      	movs	r2, #1
1004929e:	4013      	ands	r3, r2
100492a0:	d104      	bne.n	100492ac <FD_WriteData128+0x34>
100492a2:	204a      	movs	r0, #74	@ 0x4a
100492a4:	f7ff ff90 	bl	100491c8 <FD_TimeCheck>
100492a8:	1e03      	subs	r3, r0, #0
100492aa:	d00b      	beq.n	100492c4 <FD_WriteData128+0x4c>
  {
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BURST, Dest, (uint32_t) Payload) == HAL_OK)
100492ac:	683a      	ldr	r2, [r7, #0]
100492ae:	687b      	ldr	r3, [r7, #4]
100492b0:	0019      	movs	r1, r3
100492b2:	2001      	movs	r0, #1
100492b4:	f003 fd7a 	bl	1004cdac <HAL_FLASH_Program>
100492b8:	1e03      	subs	r3, r0, #0
100492ba:	d103      	bne.n	100492c4 <FD_WriteData128+0x4c>
    {
      status = FD_FLASHOP_SUCCESS;
100492bc:	2317      	movs	r3, #23
100492be:	18fb      	adds	r3, r7, r3
100492c0:	2200      	movs	r2, #0
100492c2:	701a      	strb	r2, [r3, #0]
100492c4:	693b      	ldr	r3, [r7, #16]
100492c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100492c8:	68bb      	ldr	r3, [r7, #8]
100492ca:	f383 8810 	msr	PRIMASK, r3
}
100492ce:	46c0      	nop			@ (mov r8, r8)

  DEBUG_GPIO_LOW();

  ATOMIC_SECTION_END();

  return status;
100492d0:	2317      	movs	r3, #23
100492d2:	18fb      	adds	r3, r7, r3
100492d4:	781b      	ldrb	r3, [r3, #0]
}
100492d6:	0018      	movs	r0, r3
100492d8:	46bd      	mov	sp, r7
100492da:	b006      	add	sp, #24
100492dc:	bd80      	pop	{r7, pc}
100492de:	46c0      	nop			@ (mov r8, r8)
100492e0:	20000dbc 	.word	0x20000dbc

100492e4 <FD_EraseSectors>:
  * @brief  Erase one sector of Flash
  * @param  Sect: Identifier of the sector to erase
  * @retval FD_FlashOp_Status_t: Success or failure of Flash erase operation
  */
FD_FlashOp_Status_t FD_EraseSectors(uint32_t Sect)
{
100492e4:	b5b0      	push	{r4, r5, r7, lr}
100492e6:	b08a      	sub	sp, #40	@ 0x28
100492e8:	af00      	add	r7, sp, #0
100492ea:	6078      	str	r0, [r7, #4]
  FD_FlashOp_Status_t status = FD_FLASHOP_FAILURE;
100492ec:	2527      	movs	r5, #39	@ 0x27
100492ee:	197b      	adds	r3, r7, r5
100492f0:	2201      	movs	r2, #1
100492f2:	701a      	strb	r2, [r3, #0]
  uint32_t page_error;
  FLASH_EraseInitTypeDef p_erase_init;

  p_erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
100492f4:	2408      	movs	r4, #8
100492f6:	193b      	adds	r3, r7, r4
100492f8:	2200      	movs	r2, #0
100492fa:	601a      	str	r2, [r3, #0]
  p_erase_init.Page = Sect;
100492fc:	193b      	adds	r3, r7, r4
100492fe:	687a      	ldr	r2, [r7, #4]
10049300:	605a      	str	r2, [r3, #4]
  p_erase_init.NbPages = 1;
10049302:	193b      	adds	r3, r7, r4
10049304:	2201      	movs	r2, #1
10049306:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049308:	f3ef 8310 	mrs	r3, PRIMASK
1004930c:	61fb      	str	r3, [r7, #28]
  return(result);
1004930e:	69fb      	ldr	r3, [r7, #28]

  ATOMIC_SECTION_BEGIN();
10049310:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
10049312:	b672      	cpsid	i
}
10049314:	46c0      	nop			@ (mov r8, r8)

  DEBUG_GPIO_HIGH();

  if(FD_TimeCheck(PAGE_ERASE_TIME_SYS))
10049316:	4b0f      	ldr	r3, [pc, #60]	@ (10049354 <FD_EraseSectors+0x70>)
10049318:	0018      	movs	r0, r3
1004931a:	f7ff ff55 	bl	100491c8 <FD_TimeCheck>
1004931e:	1e03      	subs	r3, r0, #0
10049320:	d00b      	beq.n	1004933a <FD_EraseSectors+0x56>
  {
    if (HAL_FLASHEx_Erase(&p_erase_init, &page_error) == HAL_OK)
10049322:	2314      	movs	r3, #20
10049324:	18fa      	adds	r2, r7, r3
10049326:	193b      	adds	r3, r7, r4
10049328:	0011      	movs	r1, r2
1004932a:	0018      	movs	r0, r3
1004932c:	f003 fe18 	bl	1004cf60 <HAL_FLASHEx_Erase>
10049330:	1e03      	subs	r3, r0, #0
10049332:	d102      	bne.n	1004933a <FD_EraseSectors+0x56>
    {
      status = FD_FLASHOP_SUCCESS;
10049334:	197b      	adds	r3, r7, r5
10049336:	2200      	movs	r2, #0
10049338:	701a      	strb	r2, [r3, #0]
1004933a:	6a3b      	ldr	r3, [r7, #32]
1004933c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004933e:	69bb      	ldr	r3, [r7, #24]
10049340:	f383 8810 	msr	PRIMASK, r3
}
10049344:	46c0      	nop			@ (mov r8, r8)

  DEBUG_GPIO_LOW();

  ATOMIC_SECTION_END();

  return status;
10049346:	2327      	movs	r3, #39	@ 0x27
10049348:	18fb      	adds	r3, r7, r3
1004934a:	781b      	ldrb	r3, [r3, #0]
}
1004934c:	0018      	movs	r0, r3
1004934e:	46bd      	mov	sp, r7
10049350:	b00a      	add	sp, #40	@ 0x28
10049352:	bdb0      	pop	{r4, r5, r7, pc}
10049354:	00002334 	.word	0x00002334

10049358 <FM_Write>:
  * @param  Size: This is the number of words to be written in Flash.
  * @param  CallbackNode: Pointer to the callback node for storage in list
  * @retval FM_Cmd_Status_t: Status of the Flash Manager module
  */
FM_Cmd_Status_t FM_Write(uint32_t *Src, uint32_t *Dest, int32_t Size, FM_CallbackNode_t *CallbackNode)
{
10049358:	b5b0      	push	{r4, r5, r7, lr}
1004935a:	b086      	sub	sp, #24
1004935c:	af00      	add	r7, sp, #0
1004935e:	60f8      	str	r0, [r7, #12]
10049360:	60b9      	str	r1, [r7, #8]
10049362:	607a      	str	r2, [r7, #4]
10049364:	603b      	str	r3, [r7, #0]
  FM_Cmd_Status_t status;

  if (((uint32_t)Dest < FLASH_START_ADDR) || ((uint32_t)Dest > (FLASH_START_ADDR + FLASH_SIZE))
10049366:	68bb      	ldr	r3, [r7, #8]
10049368:	4a24      	ldr	r2, [pc, #144]	@ (100493fc <FM_Write+0xa4>)
1004936a:	4293      	cmp	r3, r2
1004936c:	d918      	bls.n	100493a0 <FM_Write+0x48>
1004936e:	4b24      	ldr	r3, [pc, #144]	@ (10049400 <FM_Write+0xa8>)
10049370:	681b      	ldr	r3, [r3, #0]
10049372:	03db      	lsls	r3, r3, #15
10049374:	0bdb      	lsrs	r3, r3, #15
10049376:	3301      	adds	r3, #1
10049378:	009b      	lsls	r3, r3, #2
1004937a:	4a22      	ldr	r2, [pc, #136]	@ (10049404 <FM_Write+0xac>)
1004937c:	189a      	adds	r2, r3, r2
1004937e:	68bb      	ldr	r3, [r7, #8]
10049380:	429a      	cmp	r2, r3
10049382:	d30d      	bcc.n	100493a0 <FM_Write+0x48>
                                    || (((uint32_t)Dest + Size) > (FLASH_START_ADDR + FLASH_SIZE)))
10049384:	68ba      	ldr	r2, [r7, #8]
10049386:	687b      	ldr	r3, [r7, #4]
10049388:	18d2      	adds	r2, r2, r3
1004938a:	4b1d      	ldr	r3, [pc, #116]	@ (10049400 <FM_Write+0xa8>)
1004938c:	681b      	ldr	r3, [r3, #0]
1004938e:	03db      	lsls	r3, r3, #15
10049390:	0bdb      	lsrs	r3, r3, #15
10049392:	3301      	adds	r3, #1
10049394:	009b      	lsls	r3, r3, #2
10049396:	491b      	ldr	r1, [pc, #108]	@ (10049404 <FM_Write+0xac>)
10049398:	468c      	mov	ip, r1
1004939a:	4463      	add	r3, ip
1004939c:	429a      	cmp	r2, r3
1004939e:	d901      	bls.n	100493a4 <FM_Write+0x4c>
  {/* Destination address not part of the flash */
    return FM_ERROR;
100493a0:	2302      	movs	r3, #2
100493a2:	e027      	b.n	100493f4 <FM_Write+0x9c>
  }

  if (((uint32_t) Src & ALIGNMENT_32) || ((uint32_t) Dest & ALIGNMENT_32))
100493a4:	68fb      	ldr	r3, [r7, #12]
100493a6:	2203      	movs	r2, #3
100493a8:	4013      	ands	r3, r2
100493aa:	d103      	bne.n	100493b4 <FM_Write+0x5c>
100493ac:	68bb      	ldr	r3, [r7, #8]
100493ae:	2203      	movs	r2, #3
100493b0:	4013      	ands	r3, r2
100493b2:	d001      	beq.n	100493b8 <FM_Write+0x60>
  { /* Source or destination address not properly aligned */
    return FM_ERROR;
100493b4:	2302      	movs	r3, #2
100493b6:	e01d      	b.n	100493f4 <FM_Write+0x9c>
  }

  status = FM_CheckFlashManagerState(CallbackNode);
100493b8:	2517      	movs	r5, #23
100493ba:	197c      	adds	r4, r7, r5
100493bc:	683b      	ldr	r3, [r7, #0]
100493be:	0018      	movs	r0, r3
100493c0:	f000 f994 	bl	100496ec <FM_CheckFlashManagerState>
100493c4:	0003      	movs	r3, r0
100493c6:	7023      	strb	r3, [r4, #0]

  if (status == FM_OK)
100493c8:	197b      	adds	r3, r7, r5
100493ca:	781b      	ldrb	r3, [r3, #0]
100493cc:	2b00      	cmp	r3, #0
100493ce:	d10e      	bne.n	100493ee <FM_Write+0x96>
  { /* Flash manager is available */

    /* Save Write parameters */
    fm_flashop_parameters.writeSrc = Src;
100493d0:	4b0d      	ldr	r3, [pc, #52]	@ (10049408 <FM_Write+0xb0>)
100493d2:	68fa      	ldr	r2, [r7, #12]
100493d4:	601a      	str	r2, [r3, #0]
    fm_flashop_parameters.writeDest = Dest;
100493d6:	4b0c      	ldr	r3, [pc, #48]	@ (10049408 <FM_Write+0xb0>)
100493d8:	68ba      	ldr	r2, [r7, #8]
100493da:	605a      	str	r2, [r3, #4]
    fm_flashop_parameters.writeSize = Size;
100493dc:	4b0a      	ldr	r3, [pc, #40]	@ (10049408 <FM_Write+0xb0>)
100493de:	687a      	ldr	r2, [r7, #4]
100493e0:	609a      	str	r2, [r3, #8]

    fm_flashop = FM_WRITE_OP;
100493e2:	4b0a      	ldr	r3, [pc, #40]	@ (1004940c <FM_Write+0xb4>)
100493e4:	2201      	movs	r2, #1
100493e6:	701a      	strb	r2, [r3, #0]

    /* Window request to be executed in background */
    FM_ProcessRequest(TRUE);
100493e8:	2001      	movs	r0, #1
100493ea:	f7f9 fc1f 	bl	10042c2c <FM_ProcessRequest>
  }
  return status;
100493ee:	2317      	movs	r3, #23
100493f0:	18fb      	adds	r3, r7, r3
100493f2:	781b      	ldrb	r3, [r3, #0]
}
100493f4:	0018      	movs	r0, r3
100493f6:	46bd      	mov	sp, r7
100493f8:	b006      	add	sp, #24
100493fa:	bdb0      	pop	{r4, r5, r7, pc}
100493fc:	1003ffff 	.word	0x1003ffff
10049400:	40001014 	.word	0x40001014
10049404:	10040000 	.word	0x10040000
10049408:	20000dd8 	.word	0x20000dd8
1004940c:	20000dd4 	.word	0x20000dd4

10049410 <FM_Erase>:
  * @param  NbrSect: Number of sector to erase
  * @param  CallbackNode: Pointer to the callback node for storage in list
  * @retval FM_Cmd_Status_t: Status of the Flash Manager module
  */
FM_Cmd_Status_t FM_Erase(uint32_t FirstSect, uint32_t NbrSect, FM_CallbackNode_t *CallbackNode)
{
10049410:	b5b0      	push	{r4, r5, r7, lr}
10049412:	b086      	sub	sp, #24
10049414:	af00      	add	r7, sp, #0
10049416:	60f8      	str	r0, [r7, #12]
10049418:	60b9      	str	r1, [r7, #8]
1004941a:	607a      	str	r2, [r7, #4]
  FM_Cmd_Status_t status;

  if ((FirstSect > FLASH_PAGE_NUMBER) || ((FirstSect + NbrSect) > FLASH_PAGE_NUMBER))
1004941c:	4b1d      	ldr	r3, [pc, #116]	@ (10049494 <FM_Erase+0x84>)
1004941e:	681b      	ldr	r3, [r3, #0]
10049420:	03db      	lsls	r3, r3, #15
10049422:	0bdb      	lsrs	r3, r3, #15
10049424:	3301      	adds	r3, #1
10049426:	009b      	lsls	r3, r3, #2
10049428:	0adb      	lsrs	r3, r3, #11
1004942a:	68fa      	ldr	r2, [r7, #12]
1004942c:	429a      	cmp	r2, r3
1004942e:	d80b      	bhi.n	10049448 <FM_Erase+0x38>
10049430:	68fa      	ldr	r2, [r7, #12]
10049432:	68bb      	ldr	r3, [r7, #8]
10049434:	18d2      	adds	r2, r2, r3
10049436:	4b17      	ldr	r3, [pc, #92]	@ (10049494 <FM_Erase+0x84>)
10049438:	681b      	ldr	r3, [r3, #0]
1004943a:	03db      	lsls	r3, r3, #15
1004943c:	0bdb      	lsrs	r3, r3, #15
1004943e:	3301      	adds	r3, #1
10049440:	009b      	lsls	r3, r3, #2
10049442:	0adb      	lsrs	r3, r3, #11
10049444:	429a      	cmp	r2, r3
10049446:	d901      	bls.n	1004944c <FM_Erase+0x3c>
  { /* Inconsistent request */
    return FM_ERROR;
10049448:	2302      	movs	r3, #2
1004944a:	e01f      	b.n	1004948c <FM_Erase+0x7c>
  }

  if (NbrSect == 0)
1004944c:	68bb      	ldr	r3, [r7, #8]
1004944e:	2b00      	cmp	r3, #0
10049450:	d101      	bne.n	10049456 <FM_Erase+0x46>
  { /* Inconsistent request */
    return FM_ERROR;
10049452:	2302      	movs	r3, #2
10049454:	e01a      	b.n	1004948c <FM_Erase+0x7c>
  }

  status = FM_CheckFlashManagerState(CallbackNode);
10049456:	2517      	movs	r5, #23
10049458:	197c      	adds	r4, r7, r5
1004945a:	687b      	ldr	r3, [r7, #4]
1004945c:	0018      	movs	r0, r3
1004945e:	f000 f945 	bl	100496ec <FM_CheckFlashManagerState>
10049462:	0003      	movs	r3, r0
10049464:	7023      	strb	r3, [r4, #0]

  if (status == FM_OK)
10049466:	197b      	adds	r3, r7, r5
10049468:	781b      	ldrb	r3, [r3, #0]
1004946a:	2b00      	cmp	r3, #0
1004946c:	d10b      	bne.n	10049486 <FM_Erase+0x76>
  { /* Flash manager is available */

    /* Save Erase parameters */
    fm_flashop_parameters.eraseFirstSect = FirstSect;
1004946e:	4b0a      	ldr	r3, [pc, #40]	@ (10049498 <FM_Erase+0x88>)
10049470:	68fa      	ldr	r2, [r7, #12]
10049472:	60da      	str	r2, [r3, #12]
    fm_flashop_parameters.eraseNbrSect = NbrSect;
10049474:	4b08      	ldr	r3, [pc, #32]	@ (10049498 <FM_Erase+0x88>)
10049476:	68ba      	ldr	r2, [r7, #8]
10049478:	611a      	str	r2, [r3, #16]

    fm_flashop = FM_ERASE_OP;
1004947a:	4b08      	ldr	r3, [pc, #32]	@ (1004949c <FM_Erase+0x8c>)
1004947c:	2202      	movs	r2, #2
1004947e:	701a      	strb	r2, [r3, #0]

    /* Window request to be executed in background */
    FM_ProcessRequest(TRUE);
10049480:	2001      	movs	r0, #1
10049482:	f7f9 fbd3 	bl	10042c2c <FM_ProcessRequest>
  }
  return status;
10049486:	2317      	movs	r3, #23
10049488:	18fb      	adds	r3, r7, r3
1004948a:	781b      	ldrb	r3, [r3, #0]
}
1004948c:	0018      	movs	r0, r3
1004948e:	46bd      	mov	sp, r7
10049490:	b006      	add	sp, #24
10049492:	bdb0      	pop	{r4, r5, r7, pc}
10049494:	40001014 	.word	0x40001014
10049498:	20000dd8 	.word	0x20000dd8
1004949c:	20000dd4 	.word	0x20000dd4

100494a0 <FM_BackgroundProcess>:
  * @brief  Execute Flash Manager background tasks
  * @param  None
  * @retval None
  */
void FM_BackgroundProcess (void)
{
100494a0:	b5b0      	push	{r4, r5, r7, lr}
100494a2:	b086      	sub	sp, #24
100494a4:	af00      	add	r7, sp, #0
  bool flashop_complete = false;
100494a6:	2317      	movs	r3, #23
100494a8:	18fb      	adds	r3, r7, r3
100494aa:	2200      	movs	r2, #0
100494ac:	701a      	strb	r2, [r3, #0]
  FD_FlashOp_Status_t fdReturnValue = FD_FLASHOP_SUCCESS;
100494ae:	2316      	movs	r3, #22
100494b0:	18fb      	adds	r3, r7, r3
100494b2:	2200      	movs	r2, #0
100494b4:	701a      	strb	r2, [r3, #0]
  FM_CallbackNode_t *pCbNode = NULL;
100494b6:	2300      	movs	r3, #0
100494b8:	607b      	str	r3, [r7, #4]

  if (fm_flashop == FM_WRITE_OP)
100494ba:	4b86      	ldr	r3, [pc, #536]	@ (100496d4 <FM_BackgroundProcess+0x234>)
100494bc:	781b      	ldrb	r3, [r3, #0]
100494be:	2b01      	cmp	r3, #1
100494c0:	d000      	beq.n	100494c4 <FM_BackgroundProcess+0x24>
100494c2:	e08f      	b.n	100495e4 <FM_BackgroundProcess+0x144>
  {

    /* Write first non-aligned bytes */
    while(fm_flashop_parameters.writeSize > 0 && ((uint32_t)fm_flashop_parameters.writeDest & ALIGNMENT_128) &&
100494c4:	e01f      	b.n	10049506 <FM_BackgroundProcess+0x66>
          fdReturnValue == FD_FLASHOP_SUCCESS)
    {
      /* Write single words */
      fdReturnValue = FD_WriteData32((uint32_t) fm_flashop_parameters.writeDest,
100494c6:	4b84      	ldr	r3, [pc, #528]	@ (100496d8 <FM_BackgroundProcess+0x238>)
100494c8:	685b      	ldr	r3, [r3, #4]
100494ca:	001a      	movs	r2, r3
100494cc:	4b82      	ldr	r3, [pc, #520]	@ (100496d8 <FM_BackgroundProcess+0x238>)
100494ce:	681b      	ldr	r3, [r3, #0]
100494d0:	2516      	movs	r5, #22
100494d2:	197c      	adds	r4, r7, r5
100494d4:	0019      	movs	r1, r3
100494d6:	0010      	movs	r0, r2
100494d8:	f7ff fe98 	bl	1004920c <FD_WriteData32>
100494dc:	0003      	movs	r3, r0
100494de:	7023      	strb	r3, [r4, #0]
                                      fm_flashop_parameters.writeSrc);
      if (fdReturnValue == FD_FLASHOP_SUCCESS)
100494e0:	197b      	adds	r3, r7, r5
100494e2:	781b      	ldrb	r3, [r3, #0]
100494e4:	2b00      	cmp	r3, #0
100494e6:	d10e      	bne.n	10049506 <FM_BackgroundProcess+0x66>
      {
        fm_flashop_parameters.writeDest += 1;
100494e8:	4b7b      	ldr	r3, [pc, #492]	@ (100496d8 <FM_BackgroundProcess+0x238>)
100494ea:	685b      	ldr	r3, [r3, #4]
100494ec:	1d1a      	adds	r2, r3, #4
100494ee:	4b7a      	ldr	r3, [pc, #488]	@ (100496d8 <FM_BackgroundProcess+0x238>)
100494f0:	605a      	str	r2, [r3, #4]
        fm_flashop_parameters.writeSrc += 1;
100494f2:	4b79      	ldr	r3, [pc, #484]	@ (100496d8 <FM_BackgroundProcess+0x238>)
100494f4:	681b      	ldr	r3, [r3, #0]
100494f6:	1d1a      	adds	r2, r3, #4
100494f8:	4b77      	ldr	r3, [pc, #476]	@ (100496d8 <FM_BackgroundProcess+0x238>)
100494fa:	601a      	str	r2, [r3, #0]
        fm_flashop_parameters.writeSize -= 1;
100494fc:	4b76      	ldr	r3, [pc, #472]	@ (100496d8 <FM_BackgroundProcess+0x238>)
100494fe:	689b      	ldr	r3, [r3, #8]
10049500:	1e5a      	subs	r2, r3, #1
10049502:	4b75      	ldr	r3, [pc, #468]	@ (100496d8 <FM_BackgroundProcess+0x238>)
10049504:	609a      	str	r2, [r3, #8]
    while(fm_flashop_parameters.writeSize > 0 && ((uint32_t)fm_flashop_parameters.writeDest & ALIGNMENT_128) &&
10049506:	4b74      	ldr	r3, [pc, #464]	@ (100496d8 <FM_BackgroundProcess+0x238>)
10049508:	689b      	ldr	r3, [r3, #8]
1004950a:	2b00      	cmp	r3, #0
1004950c:	dd2e      	ble.n	1004956c <FM_BackgroundProcess+0xcc>
1004950e:	4b72      	ldr	r3, [pc, #456]	@ (100496d8 <FM_BackgroundProcess+0x238>)
10049510:	685b      	ldr	r3, [r3, #4]
10049512:	001a      	movs	r2, r3
10049514:	230f      	movs	r3, #15
10049516:	4013      	ands	r3, r2
10049518:	d028      	beq.n	1004956c <FM_BackgroundProcess+0xcc>
1004951a:	2316      	movs	r3, #22
1004951c:	18fb      	adds	r3, r7, r3
1004951e:	781b      	ldrb	r3, [r3, #0]
10049520:	2b00      	cmp	r3, #0
10049522:	d0d0      	beq.n	100494c6 <FM_BackgroundProcess+0x26>
      }
    }

    /* Write aligned block */
    while((fm_flashop_parameters.writeSize >= 4) &&
10049524:	e022      	b.n	1004956c <FM_BackgroundProcess+0xcc>
          (fdReturnValue == FD_FLASHOP_SUCCESS))
    {
      fdReturnValue = FD_WriteData128((uint32_t) fm_flashop_parameters.writeDest,
10049526:	4b6c      	ldr	r3, [pc, #432]	@ (100496d8 <FM_BackgroundProcess+0x238>)
10049528:	685b      	ldr	r3, [r3, #4]
1004952a:	001a      	movs	r2, r3
1004952c:	4b6a      	ldr	r3, [pc, #424]	@ (100496d8 <FM_BackgroundProcess+0x238>)
1004952e:	681b      	ldr	r3, [r3, #0]
10049530:	2516      	movs	r5, #22
10049532:	197c      	adds	r4, r7, r5
10049534:	0019      	movs	r1, r3
10049536:	0010      	movs	r0, r2
10049538:	f7ff fe9e 	bl	10049278 <FD_WriteData128>
1004953c:	0003      	movs	r3, r0
1004953e:	7023      	strb	r3, [r4, #0]
                                      fm_flashop_parameters.writeSrc);

      if (fdReturnValue == FD_FLASHOP_SUCCESS)
10049540:	197b      	adds	r3, r7, r5
10049542:	781b      	ldrb	r3, [r3, #0]
10049544:	2b00      	cmp	r3, #0
10049546:	d111      	bne.n	1004956c <FM_BackgroundProcess+0xcc>
      {
        fm_flashop_parameters.writeDest += FLASH_WRITE_BLOCK_SIZE;
10049548:	4b63      	ldr	r3, [pc, #396]	@ (100496d8 <FM_BackgroundProcess+0x238>)
1004954a:	685b      	ldr	r3, [r3, #4]
1004954c:	3310      	adds	r3, #16
1004954e:	001a      	movs	r2, r3
10049550:	4b61      	ldr	r3, [pc, #388]	@ (100496d8 <FM_BackgroundProcess+0x238>)
10049552:	605a      	str	r2, [r3, #4]
        fm_flashop_parameters.writeSrc += FLASH_WRITE_BLOCK_SIZE;
10049554:	4b60      	ldr	r3, [pc, #384]	@ (100496d8 <FM_BackgroundProcess+0x238>)
10049556:	681b      	ldr	r3, [r3, #0]
10049558:	3310      	adds	r3, #16
1004955a:	001a      	movs	r2, r3
1004955c:	4b5e      	ldr	r3, [pc, #376]	@ (100496d8 <FM_BackgroundProcess+0x238>)
1004955e:	601a      	str	r2, [r3, #0]
        fm_flashop_parameters.writeSize -= FLASH_WRITE_BLOCK_SIZE;
10049560:	4b5d      	ldr	r3, [pc, #372]	@ (100496d8 <FM_BackgroundProcess+0x238>)
10049562:	689b      	ldr	r3, [r3, #8]
10049564:	3b04      	subs	r3, #4
10049566:	001a      	movs	r2, r3
10049568:	4b5b      	ldr	r3, [pc, #364]	@ (100496d8 <FM_BackgroundProcess+0x238>)
1004956a:	609a      	str	r2, [r3, #8]
    while((fm_flashop_parameters.writeSize >= 4) &&
1004956c:	4b5a      	ldr	r3, [pc, #360]	@ (100496d8 <FM_BackgroundProcess+0x238>)
1004956e:	689b      	ldr	r3, [r3, #8]
10049570:	2b03      	cmp	r3, #3
10049572:	dd25      	ble.n	100495c0 <FM_BackgroundProcess+0x120>
10049574:	2316      	movs	r3, #22
10049576:	18fb      	adds	r3, r7, r3
10049578:	781b      	ldrb	r3, [r3, #0]
1004957a:	2b00      	cmp	r3, #0
1004957c:	d0d3      	beq.n	10049526 <FM_BackgroundProcess+0x86>
      }
    }

    /* Write remaining words, if any */
    while(fm_flashop_parameters.writeSize > 0 &&
1004957e:	e01f      	b.n	100495c0 <FM_BackgroundProcess+0x120>
          fdReturnValue == FD_FLASHOP_SUCCESS)
    {
      /* Write single words */
      fdReturnValue = FD_WriteData32((uint32_t) fm_flashop_parameters.writeDest,
10049580:	4b55      	ldr	r3, [pc, #340]	@ (100496d8 <FM_BackgroundProcess+0x238>)
10049582:	685b      	ldr	r3, [r3, #4]
10049584:	001a      	movs	r2, r3
10049586:	4b54      	ldr	r3, [pc, #336]	@ (100496d8 <FM_BackgroundProcess+0x238>)
10049588:	681b      	ldr	r3, [r3, #0]
1004958a:	2516      	movs	r5, #22
1004958c:	197c      	adds	r4, r7, r5
1004958e:	0019      	movs	r1, r3
10049590:	0010      	movs	r0, r2
10049592:	f7ff fe3b 	bl	1004920c <FD_WriteData32>
10049596:	0003      	movs	r3, r0
10049598:	7023      	strb	r3, [r4, #0]
                                      fm_flashop_parameters.writeSrc);
      if (fdReturnValue == FD_FLASHOP_SUCCESS)
1004959a:	197b      	adds	r3, r7, r5
1004959c:	781b      	ldrb	r3, [r3, #0]
1004959e:	2b00      	cmp	r3, #0
100495a0:	d10e      	bne.n	100495c0 <FM_BackgroundProcess+0x120>
      {
        fm_flashop_parameters.writeDest += 1;
100495a2:	4b4d      	ldr	r3, [pc, #308]	@ (100496d8 <FM_BackgroundProcess+0x238>)
100495a4:	685b      	ldr	r3, [r3, #4]
100495a6:	1d1a      	adds	r2, r3, #4
100495a8:	4b4b      	ldr	r3, [pc, #300]	@ (100496d8 <FM_BackgroundProcess+0x238>)
100495aa:	605a      	str	r2, [r3, #4]
        fm_flashop_parameters.writeSrc += 1;
100495ac:	4b4a      	ldr	r3, [pc, #296]	@ (100496d8 <FM_BackgroundProcess+0x238>)
100495ae:	681b      	ldr	r3, [r3, #0]
100495b0:	1d1a      	adds	r2, r3, #4
100495b2:	4b49      	ldr	r3, [pc, #292]	@ (100496d8 <FM_BackgroundProcess+0x238>)
100495b4:	601a      	str	r2, [r3, #0]
        fm_flashop_parameters.writeSize -= 1;
100495b6:	4b48      	ldr	r3, [pc, #288]	@ (100496d8 <FM_BackgroundProcess+0x238>)
100495b8:	689b      	ldr	r3, [r3, #8]
100495ba:	1e5a      	subs	r2, r3, #1
100495bc:	4b46      	ldr	r3, [pc, #280]	@ (100496d8 <FM_BackgroundProcess+0x238>)
100495be:	609a      	str	r2, [r3, #8]
    while(fm_flashop_parameters.writeSize > 0 &&
100495c0:	4b45      	ldr	r3, [pc, #276]	@ (100496d8 <FM_BackgroundProcess+0x238>)
100495c2:	689b      	ldr	r3, [r3, #8]
100495c4:	2b00      	cmp	r3, #0
100495c6:	dd04      	ble.n	100495d2 <FM_BackgroundProcess+0x132>
100495c8:	2316      	movs	r3, #22
100495ca:	18fb      	adds	r3, r7, r3
100495cc:	781b      	ldrb	r3, [r3, #0]
100495ce:	2b00      	cmp	r3, #0
100495d0:	d0d6      	beq.n	10049580 <FM_BackgroundProcess+0xe0>
      }
    }

    /* Is write over ? */
    if (fm_flashop_parameters.writeSize <= 0)
100495d2:	4b41      	ldr	r3, [pc, #260]	@ (100496d8 <FM_BackgroundProcess+0x238>)
100495d4:	689b      	ldr	r3, [r3, #8]
100495d6:	2b00      	cmp	r3, #0
100495d8:	dc31      	bgt.n	1004963e <FM_BackgroundProcess+0x19e>
    {
      flashop_complete = true;
100495da:	2317      	movs	r3, #23
100495dc:	18fb      	adds	r3, r7, r3
100495de:	2201      	movs	r2, #1
100495e0:	701a      	strb	r2, [r3, #0]
100495e2:	e02c      	b.n	1004963e <FM_BackgroundProcess+0x19e>
    }
  }
  else if (fm_flashop == FM_ERASE_OP)
100495e4:	4b3b      	ldr	r3, [pc, #236]	@ (100496d4 <FM_BackgroundProcess+0x234>)
100495e6:	781b      	ldrb	r3, [r3, #0]
100495e8:	2b02      	cmp	r3, #2
100495ea:	d128      	bne.n	1004963e <FM_BackgroundProcess+0x19e>
  {

    while((fm_flashop_parameters.eraseNbrSect > 0) &&
100495ec:	e016      	b.n	1004961c <FM_BackgroundProcess+0x17c>
          (fdReturnValue == FD_FLASHOP_SUCCESS))
    {
      fdReturnValue = FD_EraseSectors(fm_flashop_parameters.eraseFirstSect);
100495ee:	4b3a      	ldr	r3, [pc, #232]	@ (100496d8 <FM_BackgroundProcess+0x238>)
100495f0:	68db      	ldr	r3, [r3, #12]
100495f2:	2516      	movs	r5, #22
100495f4:	197c      	adds	r4, r7, r5
100495f6:	0018      	movs	r0, r3
100495f8:	f7ff fe74 	bl	100492e4 <FD_EraseSectors>
100495fc:	0003      	movs	r3, r0
100495fe:	7023      	strb	r3, [r4, #0]

      if (fdReturnValue == FD_FLASHOP_SUCCESS)
10049600:	197b      	adds	r3, r7, r5
10049602:	781b      	ldrb	r3, [r3, #0]
10049604:	2b00      	cmp	r3, #0
10049606:	d109      	bne.n	1004961c <FM_BackgroundProcess+0x17c>
      {
        fm_flashop_parameters.eraseNbrSect--;
10049608:	4b33      	ldr	r3, [pc, #204]	@ (100496d8 <FM_BackgroundProcess+0x238>)
1004960a:	691b      	ldr	r3, [r3, #16]
1004960c:	1e5a      	subs	r2, r3, #1
1004960e:	4b32      	ldr	r3, [pc, #200]	@ (100496d8 <FM_BackgroundProcess+0x238>)
10049610:	611a      	str	r2, [r3, #16]
        fm_flashop_parameters.eraseFirstSect++;
10049612:	4b31      	ldr	r3, [pc, #196]	@ (100496d8 <FM_BackgroundProcess+0x238>)
10049614:	68db      	ldr	r3, [r3, #12]
10049616:	1c5a      	adds	r2, r3, #1
10049618:	4b2f      	ldr	r3, [pc, #188]	@ (100496d8 <FM_BackgroundProcess+0x238>)
1004961a:	60da      	str	r2, [r3, #12]
    while((fm_flashop_parameters.eraseNbrSect > 0) &&
1004961c:	4b2e      	ldr	r3, [pc, #184]	@ (100496d8 <FM_BackgroundProcess+0x238>)
1004961e:	691b      	ldr	r3, [r3, #16]
10049620:	2b00      	cmp	r3, #0
10049622:	d004      	beq.n	1004962e <FM_BackgroundProcess+0x18e>
10049624:	2316      	movs	r3, #22
10049626:	18fb      	adds	r3, r7, r3
10049628:	781b      	ldrb	r3, [r3, #0]
1004962a:	2b00      	cmp	r3, #0
1004962c:	d0df      	beq.n	100495ee <FM_BackgroundProcess+0x14e>
      }
    }

    if (fm_flashop_parameters.eraseNbrSect == 0)
1004962e:	4b2a      	ldr	r3, [pc, #168]	@ (100496d8 <FM_BackgroundProcess+0x238>)
10049630:	691b      	ldr	r3, [r3, #16]
10049632:	2b00      	cmp	r3, #0
10049634:	d103      	bne.n	1004963e <FM_BackgroundProcess+0x19e>
    {
      flashop_complete = true;
10049636:	2317      	movs	r3, #23
10049638:	18fb      	adds	r3, r7, r3
1004963a:	2201      	movs	r2, #1
1004963c:	701a      	strb	r2, [r3, #0]
    }
  }

  if (flashop_complete == true)
1004963e:	2317      	movs	r3, #23
10049640:	18fb      	adds	r3, r7, r3
10049642:	781b      	ldrb	r3, [r3, #0]
10049644:	2b00      	cmp	r3, #0
10049646:	d03d      	beq.n	100496c4 <FM_BackgroundProcess+0x224>
  {
    fm_flashop = FM_NO_OP;
10049648:	4b22      	ldr	r3, [pc, #136]	@ (100496d4 <FM_BackgroundProcess+0x234>)
1004964a:	2200      	movs	r2, #0
1004964c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004964e:	f3ef 8310 	mrs	r3, PRIMASK
10049652:	60bb      	str	r3, [r7, #8]
  return(result);
10049654:	68bb      	ldr	r3, [r7, #8]

    UTILS_ENTER_CRITICAL_SECTION();
10049656:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
10049658:	b672      	cpsid	i
}
1004965a:	46c0      	nop			@ (mov r8, r8)

    /* Release semaphore on flash */
    busy_flash_sem = false;
1004965c:	4b1f      	ldr	r3, [pc, #124]	@ (100496dc <FM_BackgroundProcess+0x23c>)
1004965e:	2200      	movs	r2, #0
10049660:	701a      	strb	r2, [r3, #0]

    /* Set Flash Manager busy */
    flash_manager_busy = false;
10049662:	4b1f      	ldr	r3, [pc, #124]	@ (100496e0 <FM_BackgroundProcess+0x240>)
10049664:	2200      	movs	r2, #0
10049666:	701a      	strb	r2, [r3, #0]
10049668:	693b      	ldr	r3, [r7, #16]
1004966a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004966c:	68fb      	ldr	r3, [r7, #12]
1004966e:	f383 8810 	msr	PRIMASK, r3
}
10049672:	46c0      	nop			@ (mov r8, r8)

    UTILS_EXIT_CRITICAL_SECTION();

    /* Invoke the running callback if present */
    if (fm_running_cb != NULL)
10049674:	4b1b      	ldr	r3, [pc, #108]	@ (100496e4 <FM_BackgroundProcess+0x244>)
10049676:	681b      	ldr	r3, [r3, #0]
10049678:	2b00      	cmp	r3, #0
1004967a:	d00e      	beq.n	1004969a <FM_BackgroundProcess+0x1fa>
    {
      fm_running_cb(FM_OPERATION_COMPLETE);
1004967c:	4b19      	ldr	r3, [pc, #100]	@ (100496e4 <FM_BackgroundProcess+0x244>)
1004967e:	681b      	ldr	r3, [r3, #0]
10049680:	2000      	movs	r0, #0
10049682:	4798      	blx	r3
    }

    /* notify pending requesters */
    while((LST_is_empty (&fm_cb_pending_list) == false) &&
10049684:	e009      	b.n	1004969a <FM_BackgroundProcess+0x1fa>
          (busy_flash_sem == false) && (flash_manager_busy == false))
    {
      LST_remove_head (&fm_cb_pending_list, (tListNode**)&pCbNode);
10049686:	1d3a      	adds	r2, r7, #4
10049688:	4b17      	ldr	r3, [pc, #92]	@ (100496e8 <FM_BackgroundProcess+0x248>)
1004968a:	0011      	movs	r1, r2
1004968c:	0018      	movs	r0, r3
1004968e:	f002 fa33 	bl	1004baf8 <LST_remove_head>
      pCbNode->Callback(FM_OPERATION_AVAILABLE);
10049692:	687b      	ldr	r3, [r7, #4]
10049694:	689b      	ldr	r3, [r3, #8]
10049696:	2001      	movs	r0, #1
10049698:	4798      	blx	r3
    while((LST_is_empty (&fm_cb_pending_list) == false) &&
1004969a:	4b13      	ldr	r3, [pc, #76]	@ (100496e8 <FM_BackgroundProcess+0x248>)
1004969c:	0018      	movs	r0, r3
1004969e:	f002 f8a6 	bl	1004b7ee <LST_is_empty>
100496a2:	1e03      	subs	r3, r0, #0
          (busy_flash_sem == false) && (flash_manager_busy == false))
100496a4:	d111      	bne.n	100496ca <FM_BackgroundProcess+0x22a>
100496a6:	4b0d      	ldr	r3, [pc, #52]	@ (100496dc <FM_BackgroundProcess+0x23c>)
100496a8:	781b      	ldrb	r3, [r3, #0]
100496aa:	2201      	movs	r2, #1
100496ac:	4053      	eors	r3, r2
100496ae:	b2db      	uxtb	r3, r3
    while((LST_is_empty (&fm_cb_pending_list) == false) &&
100496b0:	2b00      	cmp	r3, #0
100496b2:	d00a      	beq.n	100496ca <FM_BackgroundProcess+0x22a>
          (busy_flash_sem == false) && (flash_manager_busy == false))
100496b4:	4b0a      	ldr	r3, [pc, #40]	@ (100496e0 <FM_BackgroundProcess+0x240>)
100496b6:	781b      	ldrb	r3, [r3, #0]
100496b8:	2201      	movs	r2, #1
100496ba:	4053      	eors	r3, r2
100496bc:	b2db      	uxtb	r3, r3
100496be:	2b00      	cmp	r3, #0
100496c0:	d1e1      	bne.n	10049686 <FM_BackgroundProcess+0x1e6>
  else
  {
    FM_ProcessRequest(FALSE);
  }

}
100496c2:	e002      	b.n	100496ca <FM_BackgroundProcess+0x22a>
    FM_ProcessRequest(FALSE);
100496c4:	2000      	movs	r0, #0
100496c6:	f7f9 fab1 	bl	10042c2c <FM_ProcessRequest>
}
100496ca:	46c0      	nop			@ (mov r8, r8)
100496cc:	46bd      	mov	sp, r7
100496ce:	b006      	add	sp, #24
100496d0:	bdb0      	pop	{r4, r5, r7, pc}
100496d2:	46c0      	nop			@ (mov r8, r8)
100496d4:	20000dd4 	.word	0x20000dd4
100496d8:	20000dd8 	.word	0x20000dd8
100496dc:	20000dc0 	.word	0x20000dc0
100496e0:	20000dc1 	.word	0x20000dc1
100496e4:	20000dd0 	.word	0x20000dd0
100496e8:	20000dc4 	.word	0x20000dc4

100496ec <FM_CheckFlashManagerState>:
  * @brief  Check if the Flash Manager is busy or available
  * @param  CallbackNode: Pointer to the callback node for storage in list
  * @retval FM_Cmd_Status_t: Status of the Flash Manager module
  */
static FM_Cmd_Status_t FM_CheckFlashManagerState(FM_CallbackNode_t *CallbackNode)
{
100496ec:	b580      	push	{r7, lr}
100496ee:	b08c      	sub	sp, #48	@ 0x30
100496f0:	af00      	add	r7, sp, #0
100496f2:	6078      	str	r0, [r7, #4]
  bool fm_process_cmd = false;
100496f4:	232f      	movs	r3, #47	@ 0x2f
100496f6:	18fb      	adds	r3, r7, r3
100496f8:	2200      	movs	r2, #0
100496fa:	701a      	strb	r2, [r3, #0]
  FM_Cmd_Status_t status = FM_ERROR;
100496fc:	232e      	movs	r3, #46	@ 0x2e
100496fe:	18fb      	adds	r3, r7, r3
10049700:	2202      	movs	r2, #2
10049702:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049704:	f3ef 8310 	mrs	r3, PRIMASK
10049708:	61fb      	str	r3, [r7, #28]
  return(result);
1004970a:	69fb      	ldr	r3, [r7, #28]

  /* Check if semaphore on flash is available */
  UTILS_ENTER_CRITICAL_SECTION();
1004970c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("cpsid i" : : : "memory");
1004970e:	b672      	cpsid	i
}
10049710:	46c0      	nop			@ (mov r8, r8)

  /* Initialize pending list if not done */
  if (fm_cb_pending_list_init == false)
10049712:	4b42      	ldr	r3, [pc, #264]	@ (1004981c <FM_CheckFlashManagerState+0x130>)
10049714:	781b      	ldrb	r3, [r3, #0]
10049716:	2201      	movs	r2, #1
10049718:	4053      	eors	r3, r2
1004971a:	b2db      	uxtb	r3, r3
1004971c:	2b00      	cmp	r3, #0
1004971e:	d006      	beq.n	1004972e <FM_CheckFlashManagerState+0x42>
  {
    LST_init_head(&fm_cb_pending_list);
10049720:	4b3f      	ldr	r3, [pc, #252]	@ (10049820 <FM_CheckFlashManagerState+0x134>)
10049722:	0018      	movs	r0, r3
10049724:	f002 f811 	bl	1004b74a <LST_init_head>
    fm_cb_pending_list_init = true;
10049728:	4b3c      	ldr	r3, [pc, #240]	@ (1004981c <FM_CheckFlashManagerState+0x130>)
1004972a:	2201      	movs	r2, #1
1004972c:	701a      	strb	r2, [r3, #0]
  }
  /* Check if semaphore on flash is available */
  if (busy_flash_sem == false)
1004972e:	4b3d      	ldr	r3, [pc, #244]	@ (10049824 <FM_CheckFlashManagerState+0x138>)
10049730:	781b      	ldrb	r3, [r3, #0]
10049732:	2201      	movs	r2, #1
10049734:	4053      	eors	r3, r2
10049736:	b2db      	uxtb	r3, r3
10049738:	2b00      	cmp	r3, #0
1004973a:	d016      	beq.n	1004976a <FM_CheckFlashManagerState+0x7e>
  { /* Check if Flash Manager is already busy */
    if (flash_manager_busy == false)
1004973c:	4b3a      	ldr	r3, [pc, #232]	@ (10049828 <FM_CheckFlashManagerState+0x13c>)
1004973e:	781b      	ldrb	r3, [r3, #0]
10049740:	2201      	movs	r2, #1
10049742:	4053      	eors	r3, r2
10049744:	b2db      	uxtb	r3, r3
10049746:	2b00      	cmp	r3, #0
10049748:	d00a      	beq.n	10049760 <FM_CheckFlashManagerState+0x74>
    {
      busy_flash_sem = true; /* Get semaphore on flash */
1004974a:	4b36      	ldr	r3, [pc, #216]	@ (10049824 <FM_CheckFlashManagerState+0x138>)
1004974c:	2201      	movs	r2, #1
1004974e:	701a      	strb	r2, [r3, #0]
      flash_manager_busy = true; /* Set Flash Manager busy */
10049750:	4b35      	ldr	r3, [pc, #212]	@ (10049828 <FM_CheckFlashManagerState+0x13c>)
10049752:	2201      	movs	r2, #1
10049754:	701a      	strb	r2, [r3, #0]
      fm_process_cmd = true;
10049756:	232f      	movs	r3, #47	@ 0x2f
10049758:	18fb      	adds	r3, r7, r3
1004975a:	2201      	movs	r2, #1
1004975c:	701a      	strb	r2, [r3, #0]
1004975e:	e008      	b.n	10049772 <FM_CheckFlashManagerState+0x86>
    }
    else
    {
      fm_process_cmd = false;
10049760:	232f      	movs	r3, #47	@ 0x2f
10049762:	18fb      	adds	r3, r7, r3
10049764:	2200      	movs	r2, #0
10049766:	701a      	strb	r2, [r3, #0]
10049768:	e003      	b.n	10049772 <FM_CheckFlashManagerState+0x86>
    }
  }
  else
  {
    fm_process_cmd = false;
1004976a:	232f      	movs	r3, #47	@ 0x2f
1004976c:	18fb      	adds	r3, r7, r3
1004976e:	2200      	movs	r2, #0
10049770:	701a      	strb	r2, [r3, #0]
10049772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10049774:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049776:	69bb      	ldr	r3, [r7, #24]
10049778:	f383 8810 	msr	PRIMASK, r3
}
1004977c:	46c0      	nop			@ (mov r8, r8)
  }
  UTILS_EXIT_CRITICAL_SECTION();

  if (fm_process_cmd == false)
1004977e:	232f      	movs	r3, #47	@ 0x2f
10049780:	18fb      	adds	r3, r7, r3
10049782:	781b      	ldrb	r3, [r3, #0]
10049784:	2201      	movs	r2, #1
10049786:	4053      	eors	r3, r2
10049788:	b2db      	uxtb	r3, r3
1004978a:	2b00      	cmp	r3, #0
1004978c:	d011      	beq.n	100497b2 <FM_CheckFlashManagerState+0xc6>
  { /* Flash manager busy */

    /* Append callback to the pending list */
    if ((CallbackNode != NULL) && (CallbackNode->Callback != NULL))
1004978e:	687b      	ldr	r3, [r7, #4]
10049790:	2b00      	cmp	r3, #0
10049792:	d009      	beq.n	100497a8 <FM_CheckFlashManagerState+0xbc>
10049794:	687b      	ldr	r3, [r7, #4]
10049796:	689b      	ldr	r3, [r3, #8]
10049798:	2b00      	cmp	r3, #0
1004979a:	d005      	beq.n	100497a8 <FM_CheckFlashManagerState+0xbc>
    {
      LST_insert_tail(&fm_cb_pending_list, &(CallbackNode->NodeList));
1004979c:	687a      	ldr	r2, [r7, #4]
1004979e:	4b20      	ldr	r3, [pc, #128]	@ (10049820 <FM_CheckFlashManagerState+0x134>)
100497a0:	0011      	movs	r1, r2
100497a2:	0018      	movs	r0, r3
100497a4:	f002 f853 	bl	1004b84e <LST_insert_tail>
    }

    status = FM_BUSY;
100497a8:	232e      	movs	r3, #46	@ 0x2e
100497aa:	18fb      	adds	r3, r7, r3
100497ac:	2201      	movs	r2, #1
100497ae:	701a      	strb	r2, [r3, #0]
100497b0:	e02c      	b.n	1004980c <FM_CheckFlashManagerState+0x120>
  }
  else
  { /* Flash manager is available */

    if ((CallbackNode != NULL) && (CallbackNode->Callback != NULL))
100497b2:	687b      	ldr	r3, [r7, #4]
100497b4:	2b00      	cmp	r3, #0
100497b6:	d015      	beq.n	100497e4 <FM_CheckFlashManagerState+0xf8>
100497b8:	687b      	ldr	r3, [r7, #4]
100497ba:	689b      	ldr	r3, [r3, #8]
100497bc:	2b00      	cmp	r3, #0
100497be:	d011      	beq.n	100497e4 <FM_CheckFlashManagerState+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100497c0:	f3ef 8310 	mrs	r3, PRIMASK
100497c4:	613b      	str	r3, [r7, #16]
  return(result);
100497c6:	693b      	ldr	r3, [r7, #16]
    {
      UTILS_ENTER_CRITICAL_SECTION();
100497c8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
100497ca:	b672      	cpsid	i
}
100497cc:	46c0      	nop			@ (mov r8, r8)

      fm_running_cb = CallbackNode->Callback;
100497ce:	687b      	ldr	r3, [r7, #4]
100497d0:	689a      	ldr	r2, [r3, #8]
100497d2:	4b16      	ldr	r3, [pc, #88]	@ (1004982c <FM_CheckFlashManagerState+0x140>)
100497d4:	601a      	str	r2, [r3, #0]
100497d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100497d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100497da:	697b      	ldr	r3, [r7, #20]
100497dc:	f383 8810 	msr	PRIMASK, r3
}
100497e0:	46c0      	nop			@ (mov r8, r8)
    {
100497e2:	e00f      	b.n	10049804 <FM_CheckFlashManagerState+0x118>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100497e4:	f3ef 8310 	mrs	r3, PRIMASK
100497e8:	60bb      	str	r3, [r7, #8]
  return(result);
100497ea:	68bb      	ldr	r3, [r7, #8]

      UTILS_EXIT_CRITICAL_SECTION();
    }
    else
    {
      UTILS_ENTER_CRITICAL_SECTION();
100497ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
100497ee:	b672      	cpsid	i
}
100497f0:	46c0      	nop			@ (mov r8, r8)

      fm_running_cb = NULL;
100497f2:	4b0e      	ldr	r3, [pc, #56]	@ (1004982c <FM_CheckFlashManagerState+0x140>)
100497f4:	2200      	movs	r2, #0
100497f6:	601a      	str	r2, [r3, #0]
100497f8:	6a3b      	ldr	r3, [r7, #32]
100497fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100497fc:	68fb      	ldr	r3, [r7, #12]
100497fe:	f383 8810 	msr	PRIMASK, r3
}
10049802:	46c0      	nop			@ (mov r8, r8)

      UTILS_EXIT_CRITICAL_SECTION();
    }

    status = FM_OK;
10049804:	232e      	movs	r3, #46	@ 0x2e
10049806:	18fb      	adds	r3, r7, r3
10049808:	2200      	movs	r2, #0
1004980a:	701a      	strb	r2, [r3, #0]
  }
  return status;
1004980c:	232e      	movs	r3, #46	@ 0x2e
1004980e:	18fb      	adds	r3, r7, r3
10049810:	781b      	ldrb	r3, [r3, #0]
}
10049812:	0018      	movs	r0, r3
10049814:	46bd      	mov	sp, r7
10049816:	b00c      	add	sp, #48	@ 0x30
10049818:	bd80      	pop	{r7, pc}
1004981a:	46c0      	nop			@ (mov r8, r8)
1004981c:	20000dcc 	.word	0x20000dcc
10049820:	20000dc4 	.word	0x20000dc4
10049824:	20000dc0 	.word	0x20000dc0
10049828:	20000dc1 	.word	0x20000dc1
1004982c:	20000dd0 	.word	0x20000dd0

10049830 <NVMDB_get_info>:
}

#endif

static NVMDB_status_t NVMDB_get_info(NVMDB_info *info)
{
10049830:	b580      	push	{r7, lr}
10049832:	b084      	sub	sp, #16
10049834:	af00      	add	r7, sp, #0
10049836:	6078      	str	r0, [r7, #4]
  uint32_t address = info->start_address;
10049838:	687b      	ldr	r3, [r7, #4]
1004983a:	681b      	ldr	r3, [r3, #0]
1004983c:	60fb      	str	r3, [r7, #12]
  NVMDB_RecordType_ptr record_p;

  info->valid_records = 0;
1004983e:	687b      	ldr	r3, [r7, #4]
10049840:	2200      	movs	r2, #0
10049842:	811a      	strh	r2, [r3, #8]
  info->invalid_records = 0;
10049844:	687b      	ldr	r3, [r7, #4]
10049846:	2200      	movs	r2, #0
10049848:	815a      	strh	r2, [r3, #10]
  info->free_space = 0;
1004984a:	687b      	ldr	r3, [r7, #4]
1004984c:	2200      	movs	r2, #0
1004984e:	819a      	strh	r2, [r3, #12]
  info->locked = FALSE;
10049850:	687b      	ldr	r3, [r7, #4]
10049852:	2200      	movs	r2, #0
10049854:	739a      	strb	r2, [r3, #14]

  while(1)
  {

    record_p = (NVMDB_RecordType_ptr)address;
10049856:	68fb      	ldr	r3, [r7, #12]
10049858:	60bb      	str	r3, [r7, #8]

    if(record_p->header.valid_flag == NO_RECORD)
1004985a:	68bb      	ldr	r3, [r7, #8]
1004985c:	781b      	ldrb	r3, [r3, #0]
1004985e:	2bff      	cmp	r3, #255	@ 0xff
10049860:	d10c      	bne.n	1004987c <NVMDB_get_info+0x4c>
    {
      info->free_space = info->end_address - address - RECORD_HEADER_SIZE;
10049862:	687b      	ldr	r3, [r7, #4]
10049864:	685b      	ldr	r3, [r3, #4]
10049866:	b29a      	uxth	r2, r3
10049868:	68fb      	ldr	r3, [r7, #12]
1004986a:	b29b      	uxth	r3, r3
1004986c:	1ad3      	subs	r3, r2, r3
1004986e:	b29b      	uxth	r3, r3
10049870:	3b04      	subs	r3, #4
10049872:	b29a      	uxth	r2, r3
10049874:	687b      	ldr	r3, [r7, #4]
10049876:	819a      	strh	r2, [r3, #12]
      return NVMDB_STATUS_OK;
10049878:	2300      	movs	r3, #0
1004987a:	e028      	b.n	100498ce <NVMDB_get_info+0x9e>
    }
    else if(record_p->header.valid_flag == VALID_RECORD)
1004987c:	68bb      	ldr	r3, [r7, #8]
1004987e:	781b      	ldrb	r3, [r3, #0]
10049880:	2bfe      	cmp	r3, #254	@ 0xfe
10049882:	d106      	bne.n	10049892 <NVMDB_get_info+0x62>
    {
      info->valid_records++;
10049884:	687b      	ldr	r3, [r7, #4]
10049886:	891b      	ldrh	r3, [r3, #8]
10049888:	3301      	adds	r3, #1
1004988a:	b29a      	uxth	r2, r3
1004988c:	687b      	ldr	r3, [r7, #4]
1004988e:	811a      	strh	r2, [r3, #8]
10049890:	e00c      	b.n	100498ac <NVMDB_get_info+0x7c>
    }
    else if(record_p->header.valid_flag == INVALID_RECORD)
10049892:	68bb      	ldr	r3, [r7, #8]
10049894:	781b      	ldrb	r3, [r3, #0]
10049896:	2b00      	cmp	r3, #0
10049898:	d106      	bne.n	100498a8 <NVMDB_get_info+0x78>
    {
      info->invalid_records++;
1004989a:	687b      	ldr	r3, [r7, #4]
1004989c:	895b      	ldrh	r3, [r3, #10]
1004989e:	3301      	adds	r3, #1
100498a0:	b29a      	uxth	r2, r3
100498a2:	687b      	ldr	r3, [r7, #4]
100498a4:	815a      	strh	r2, [r3, #10]
100498a6:	e001      	b.n	100498ac <NVMDB_get_info+0x7c>
    }
    else
    {
      // Wrong flag
      return NVMDB_STATUS_CORRUPTED_DB;
100498a8:	2303      	movs	r3, #3
100498aa:	e010      	b.n	100498ce <NVMDB_get_info+0x9e>
    }

    address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
100498ac:	68bb      	ldr	r3, [r7, #8]
100498ae:	885b      	ldrh	r3, [r3, #2]
100498b0:	3303      	adds	r3, #3
100498b2:	2203      	movs	r2, #3
100498b4:	4313      	orrs	r3, r2
100498b6:	001a      	movs	r2, r3
100498b8:	68fb      	ldr	r3, [r7, #12]
100498ba:	18d3      	adds	r3, r2, r3
100498bc:	3301      	adds	r3, #1
100498be:	60fb      	str	r3, [r7, #12]

    if(address + MIN_RECORD_SIZE >= info->end_address)  // End of DB reached
100498c0:	68fb      	ldr	r3, [r7, #12]
100498c2:	1d5a      	adds	r2, r3, #5
100498c4:	687b      	ldr	r3, [r7, #4]
100498c6:	685b      	ldr	r3, [r3, #4]
100498c8:	429a      	cmp	r2, r3
100498ca:	d3c4      	bcc.n	10049856 <NVMDB_get_info+0x26>
    {
      return NVMDB_STATUS_OK;
100498cc:	2300      	movs	r3, #0
    }
  }
}
100498ce:	0018      	movs	r0, r3
100498d0:	46bd      	mov	sp, r7
100498d2:	b004      	add	sp, #16
100498d4:	bd80      	pop	{r7, pc}

100498d6 <NextRecordNoLock>:

/* Current_record_length is used to read the next record when the current record
   is no more present (because, for example, a clean operation has canceled it). */
static NVMDB_status_t NextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t type, uint8_t **data_p, NVMDB_RecordSizeType *data_len, NVMDB_RecordSizeType current_record_length, uint8_t *record_type)
{
100498d6:	b580      	push	{r7, lr}
100498d8:	b086      	sub	sp, #24
100498da:	af00      	add	r7, sp, #0
100498dc:	60f8      	str	r0, [r7, #12]
100498de:	607a      	str	r2, [r7, #4]
100498e0:	603b      	str	r3, [r7, #0]
100498e2:	230b      	movs	r3, #11
100498e4:	18fb      	adds	r3, r7, r3
100498e6:	1c0a      	adds	r2, r1, #0
100498e8:	701a      	strb	r2, [r3, #0]
      return NVMDB_STATUS_END_OF_DB;
    }
  }
#endif

  if(current_record_length)
100498ea:	2020      	movs	r0, #32
100498ec:	183b      	adds	r3, r7, r0
100498ee:	881b      	ldrh	r3, [r3, #0]
100498f0:	2b00      	cmp	r3, #0
100498f2:	d00a      	beq.n	1004990a <NextRecordNoLock+0x34>
  {
    header.length = current_record_length;
100498f4:	2110      	movs	r1, #16
100498f6:	187a      	adds	r2, r7, r1
100498f8:	183b      	adds	r3, r7, r0
100498fa:	881b      	ldrh	r3, [r3, #0]
100498fc:	8053      	strh	r3, [r2, #2]
    header.valid_flag = VALID_RECORD;
100498fe:	187b      	adds	r3, r7, r1
10049900:	22fe      	movs	r2, #254	@ 0xfe
10049902:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
10049904:	187b      	adds	r3, r7, r1
10049906:	617b      	str	r3, [r7, #20]
10049908:	e002      	b.n	10049910 <NextRecordNoLock+0x3a>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004990a:	68fb      	ldr	r3, [r7, #12]
1004990c:	685b      	ldr	r3, [r3, #4]
1004990e:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
10049910:	68fb      	ldr	r3, [r7, #12]
10049912:	685a      	ldr	r2, [r3, #4]
10049914:	68fb      	ldr	r3, [r7, #12]
10049916:	689b      	ldr	r3, [r3, #8]
10049918:	429a      	cmp	r2, r3
1004991a:	d203      	bcs.n	10049924 <NextRecordNoLock+0x4e>
1004991c:	697b      	ldr	r3, [r7, #20]
1004991e:	781b      	ldrb	r3, [r3, #0]
10049920:	2bff      	cmp	r3, #255	@ 0xff
10049922:	d101      	bne.n	10049928 <NextRecordNoLock+0x52>
  {
    return NVMDB_STATUS_END_OF_DB;
10049924:	2304      	movs	r3, #4
10049926:	e04b      	b.n	100499c0 <NextRecordNoLock+0xea>
  while(1)
  {

    // If it is the first read, the pointer already points to first record.
    // If it is not the first read, advance the pointer to the next record (word aligned).
    if(handle_p->first_read)
10049928:	68fb      	ldr	r3, [r7, #12]
1004992a:	7b1b      	ldrb	r3, [r3, #12]
1004992c:	2b00      	cmp	r3, #0
1004992e:	d003      	beq.n	10049938 <NextRecordNoLock+0x62>
    {
      handle_p->first_read = FALSE;
10049930:	68fb      	ldr	r3, [r7, #12]
10049932:	2200      	movs	r2, #0
10049934:	731a      	strb	r2, [r3, #12]
10049936:	e019      	b.n	1004996c <NextRecordNoLock+0x96>
    }
    else
    {
      handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
10049938:	68fb      	ldr	r3, [r7, #12]
1004993a:	685b      	ldr	r3, [r3, #4]
1004993c:	697a      	ldr	r2, [r7, #20]
1004993e:	8852      	ldrh	r2, [r2, #2]
10049940:	3203      	adds	r2, #3
10049942:	2103      	movs	r1, #3
10049944:	430a      	orrs	r2, r1
10049946:	189b      	adds	r3, r3, r2
10049948:	1c5a      	adds	r2, r3, #1
1004994a:	68fb      	ldr	r3, [r7, #12]
1004994c:	605a      	str	r2, [r3, #4]
      record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004994e:	68fb      	ldr	r3, [r7, #12]
10049950:	685b      	ldr	r3, [r3, #4]
10049952:	617b      	str	r3, [r7, #20]

      if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
10049954:	68fb      	ldr	r3, [r7, #12]
10049956:	685a      	ldr	r2, [r3, #4]
10049958:	68fb      	ldr	r3, [r7, #12]
1004995a:	689b      	ldr	r3, [r3, #8]
1004995c:	429a      	cmp	r2, r3
1004995e:	d203      	bcs.n	10049968 <NextRecordNoLock+0x92>
10049960:	697b      	ldr	r3, [r7, #20]
10049962:	781b      	ldrb	r3, [r3, #0]
10049964:	2bff      	cmp	r3, #255	@ 0xff
10049966:	d101      	bne.n	1004996c <NextRecordNoLock+0x96>
        {
          // A record to be written has been found in cache
          return NVMDB_STATUS_OK;
        }
#endif
        return NVMDB_STATUS_END_OF_DB;
10049968:	2304      	movs	r3, #4
1004996a:	e029      	b.n	100499c0 <NextRecordNoLock+0xea>
      }
    }

    if(record_p->header.valid_flag == INVALID_RECORD)
1004996c:	697b      	ldr	r3, [r7, #20]
1004996e:	781b      	ldrb	r3, [r3, #0]
10049970:	2b00      	cmp	r3, #0
10049972:	d023      	beq.n	100499bc <NextRecordNoLock+0xe6>
    {
      // If record is invalidated, address is updated in next cycle.
      continue;
    }

    if(record_p->header.valid_flag != VALID_RECORD)
10049974:	697b      	ldr	r3, [r7, #20]
10049976:	781b      	ldrb	r3, [r3, #0]
10049978:	2bfe      	cmp	r3, #254	@ 0xfe
1004997a:	d001      	beq.n	10049980 <NextRecordNoLock+0xaa>
    {
      return NVMDB_STATUS_CORRUPTED_DB;
1004997c:	2303      	movs	r3, #3
1004997e:	e01f      	b.n	100499c0 <NextRecordNoLock+0xea>
    }

    if(type == ALL_TYPES || record_p->header.record_id == type)
10049980:	220b      	movs	r2, #11
10049982:	18bb      	adds	r3, r7, r2
10049984:	781b      	ldrb	r3, [r3, #0]
10049986:	2bff      	cmp	r3, #255	@ 0xff
10049988:	d005      	beq.n	10049996 <NextRecordNoLock+0xc0>
1004998a:	697b      	ldr	r3, [r7, #20]
1004998c:	785b      	ldrb	r3, [r3, #1]
1004998e:	18ba      	adds	r2, r7, r2
10049990:	7812      	ldrb	r2, [r2, #0]
10049992:	429a      	cmp	r2, r3
10049994:	d1c8      	bne.n	10049928 <NextRecordNoLock+0x52>
      {
        continue;
      }
#endif

      *data_p = (uint8_t *)handle_p->address + RECORD_HEADER_SIZE;
10049996:	68fb      	ldr	r3, [r7, #12]
10049998:	685b      	ldr	r3, [r3, #4]
1004999a:	3304      	adds	r3, #4
1004999c:	001a      	movs	r2, r3
1004999e:	687b      	ldr	r3, [r7, #4]
100499a0:	601a      	str	r2, [r3, #0]
      *data_len = record_p->header.length;
100499a2:	697b      	ldr	r3, [r7, #20]
100499a4:	885a      	ldrh	r2, [r3, #2]
100499a6:	683b      	ldr	r3, [r7, #0]
100499a8:	801a      	strh	r2, [r3, #0]

      if(record_type != NULL)
100499aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100499ac:	2b00      	cmp	r3, #0
100499ae:	d003      	beq.n	100499b8 <NextRecordNoLock+0xe2>
      {
        *record_type = record_p->header.record_id;
100499b0:	697b      	ldr	r3, [r7, #20]
100499b2:	785a      	ldrb	r2, [r3, #1]
100499b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100499b6:	701a      	strb	r2, [r3, #0]
      }

      //memcpy(data_p, (uint8_t*)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
      //*size_p = record_p->header.length;

      return NVMDB_STATUS_OK;
100499b8:	2300      	movs	r3, #0
100499ba:	e001      	b.n	100499c0 <NextRecordNoLock+0xea>
      continue;
100499bc:	46c0      	nop			@ (mov r8, r8)
    if(handle_p->first_read)
100499be:	e7b3      	b.n	10049928 <NextRecordNoLock+0x52>
    }
  }
}
100499c0:	0018      	movs	r0, r3
100499c2:	46bd      	mov	sp, r7
100499c4:	b006      	add	sp, #24
100499c6:	bd80      	pop	{r7, pc}

100499c8 <ReadNextRecordNoLock>:

static NVMDB_status_t ReadNextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length, uint8_t *record_type_out)
{
100499c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100499ca:	b08b      	sub	sp, #44	@ 0x2c
100499cc:	af02      	add	r7, sp, #8
100499ce:	60f8      	str	r0, [r7, #12]
100499d0:	0008      	movs	r0, r1
100499d2:	0011      	movs	r1, r2
100499d4:	607b      	str	r3, [r7, #4]
100499d6:	230b      	movs	r3, #11
100499d8:	18fb      	adds	r3, r7, r3
100499da:	1c02      	adds	r2, r0, #0
100499dc:	701a      	strb	r2, [r3, #0]
100499de:	2208      	movs	r2, #8
100499e0:	0010      	movs	r0, r2
100499e2:	18bb      	adds	r3, r7, r2
100499e4:	1c0a      	adds	r2, r1, #0
100499e6:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;

  uint8_t *data;
  NVMDB_RecordSizeType data_len;

  *size_p = 0;
100499e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100499ea:	2200      	movs	r2, #0
100499ec:	801a      	strh	r2, [r3, #0]

  status = NextRecordNoLock(handle_p, record_type, &data, &data_len, current_record_length, record_type_out);
100499ee:	261f      	movs	r6, #31
100499f0:	19bc      	adds	r4, r7, r6
100499f2:	2216      	movs	r2, #22
100499f4:	18bd      	adds	r5, r7, r2
100499f6:	2218      	movs	r2, #24
100499f8:	18ba      	adds	r2, r7, r2
100499fa:	230b      	movs	r3, #11
100499fc:	18fb      	adds	r3, r7, r3
100499fe:	7819      	ldrb	r1, [r3, #0]
10049a00:	68fb      	ldr	r3, [r7, #12]
10049a02:	469c      	mov	ip, r3
10049a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10049a06:	9301      	str	r3, [sp, #4]
10049a08:	2338      	movs	r3, #56	@ 0x38
10049a0a:	181b      	adds	r3, r3, r0
10049a0c:	19db      	adds	r3, r3, r7
10049a0e:	881b      	ldrh	r3, [r3, #0]
10049a10:	9300      	str	r3, [sp, #0]
10049a12:	002b      	movs	r3, r5
10049a14:	4660      	mov	r0, ip
10049a16:	f7ff ff5e 	bl	100498d6 <NextRecordNoLock>
10049a1a:	0003      	movs	r3, r0
10049a1c:	7023      	strb	r3, [r4, #0]

  if(status != NVMDB_STATUS_OK)
10049a1e:	19bb      	adds	r3, r7, r6
10049a20:	781b      	ldrb	r3, [r3, #0]
10049a22:	2b00      	cmp	r3, #0
10049a24:	d002      	beq.n	10049a2c <ReadNextRecordNoLock+0x64>
  {
    return status;
10049a26:	19bb      	adds	r3, r7, r6
10049a28:	781b      	ldrb	r3, [r3, #0]
10049a2a:	e027      	b.n	10049a7c <ReadNextRecordNoLock+0xb4>
  }

  if(offset >= data_len)
10049a2c:	2316      	movs	r3, #22
10049a2e:	18fb      	adds	r3, r7, r3
10049a30:	881b      	ldrh	r3, [r3, #0]
10049a32:	2208      	movs	r2, #8
10049a34:	18ba      	adds	r2, r7, r2
10049a36:	8812      	ldrh	r2, [r2, #0]
10049a38:	429a      	cmp	r2, r3
10049a3a:	d301      	bcc.n	10049a40 <ReadNextRecordNoLock+0x78>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
10049a3c:	2306      	movs	r3, #6
10049a3e:	e01d      	b.n	10049a7c <ReadNextRecordNoLock+0xb4>
  }

  memcpy(data_p, data + offset, MIN(data_len - offset, max_size));
10049a40:	69ba      	ldr	r2, [r7, #24]
10049a42:	2408      	movs	r4, #8
10049a44:	193b      	adds	r3, r7, r4
10049a46:	881b      	ldrh	r3, [r3, #0]
10049a48:	18d1      	adds	r1, r2, r3
10049a4a:	2330      	movs	r3, #48	@ 0x30
10049a4c:	2208      	movs	r2, #8
10049a4e:	189b      	adds	r3, r3, r2
10049a50:	19db      	adds	r3, r3, r7
10049a52:	881a      	ldrh	r2, [r3, #0]
10049a54:	2316      	movs	r3, #22
10049a56:	18fb      	adds	r3, r7, r3
10049a58:	881b      	ldrh	r3, [r3, #0]
10049a5a:	0018      	movs	r0, r3
10049a5c:	193b      	adds	r3, r7, r4
10049a5e:	881b      	ldrh	r3, [r3, #0]
10049a60:	1ac3      	subs	r3, r0, r3
10049a62:	429a      	cmp	r2, r3
10049a64:	dd00      	ble.n	10049a68 <ReadNextRecordNoLock+0xa0>
10049a66:	001a      	movs	r2, r3
10049a68:	687b      	ldr	r3, [r7, #4]
10049a6a:	0018      	movs	r0, r3
10049a6c:	f01d fcde 	bl	1006742c <memcpy>
  *size_p = data_len;
10049a70:	2316      	movs	r3, #22
10049a72:	18fb      	adds	r3, r7, r3
10049a74:	881a      	ldrh	r2, [r3, #0]
10049a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10049a78:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10049a7a:	2300      	movs	r3, #0
}
10049a7c:	0018      	movs	r0, r3
10049a7e:	46bd      	mov	sp, r7
10049a80:	b009      	add	sp, #36	@ 0x24
10049a82:	bdf0      	pop	{r4, r5, r6, r7, pc}

10049a84 <write_data>:
  return TRUE;
}

/* flash_address must be word aligned. */
static void write_data(uint32_t flash_address, uint16_t data_length, const void *data)
{
10049a84:	b590      	push	{r4, r7, lr}
10049a86:	b089      	sub	sp, #36	@ 0x24
10049a88:	af00      	add	r7, sp, #0
10049a8a:	60f8      	str	r0, [r7, #12]
10049a8c:	607a      	str	r2, [r7, #4]
10049a8e:	200a      	movs	r0, #10
10049a90:	183b      	adds	r3, r7, r0
10049a92:	1c0a      	adds	r2, r1, #0
10049a94:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  uint16_t length_word;
  uint8_t rest;
  const uint8_t *data_8 = data;
10049a96:	687b      	ldr	r3, [r7, #4]
10049a98:	61bb      	str	r3, [r7, #24]

  length_word = (data_length >> 2) << 2;
10049a9a:	0001      	movs	r1, r0
10049a9c:	187b      	adds	r3, r7, r1
10049a9e:	881b      	ldrh	r3, [r3, #0]
10049aa0:	089b      	lsrs	r3, r3, #2
10049aa2:	b29a      	uxth	r2, r3
10049aa4:	2016      	movs	r0, #22
10049aa6:	183b      	adds	r3, r7, r0
10049aa8:	0092      	lsls	r2, r2, #2
10049aaa:	801a      	strh	r2, [r3, #0]
  rest = data_length - length_word;
10049aac:	187b      	adds	r3, r7, r1
10049aae:	881b      	ldrh	r3, [r3, #0]
10049ab0:	b2d9      	uxtb	r1, r3
10049ab2:	183b      	adds	r3, r7, r0
10049ab4:	881b      	ldrh	r3, [r3, #0]
10049ab6:	b2da      	uxtb	r2, r3
10049ab8:	2315      	movs	r3, #21
10049aba:	18fb      	adds	r3, r7, r3
10049abc:	1a8a      	subs	r2, r1, r2
10049abe:	701a      	strb	r2, [r3, #0]

  for(int i = 0; i < length_word; i += 4)
10049ac0:	2300      	movs	r3, #0
10049ac2:	61fb      	str	r3, [r7, #28]
10049ac4:	e013      	b.n	10049aee <write_data+0x6a>
  {
    memcpy(&word, data_8 + i, sizeof(word));
10049ac6:	69fb      	ldr	r3, [r7, #28]
10049ac8:	69ba      	ldr	r2, [r7, #24]
10049aca:	18d1      	adds	r1, r2, r3
10049acc:	2310      	movs	r3, #16
10049ace:	18fb      	adds	r3, r7, r3
10049ad0:	2204      	movs	r2, #4
10049ad2:	0018      	movs	r0, r3
10049ad4:	f01d fcaa 	bl	1006742c <memcpy>
    NVMDB_FLASH_WRITE(flash_address + i, word);
10049ad8:	69fa      	ldr	r2, [r7, #28]
10049ada:	68fb      	ldr	r3, [r7, #12]
10049adc:	18d3      	adds	r3, r2, r3
10049ade:	693a      	ldr	r2, [r7, #16]
10049ae0:	0019      	movs	r1, r3
10049ae2:	2000      	movs	r0, #0
10049ae4:	f003 f962 	bl	1004cdac <HAL_FLASH_Program>
  for(int i = 0; i < length_word; i += 4)
10049ae8:	69fb      	ldr	r3, [r7, #28]
10049aea:	3304      	adds	r3, #4
10049aec:	61fb      	str	r3, [r7, #28]
10049aee:	2416      	movs	r4, #22
10049af0:	193b      	adds	r3, r7, r4
10049af2:	881b      	ldrh	r3, [r3, #0]
10049af4:	69fa      	ldr	r2, [r7, #28]
10049af6:	429a      	cmp	r2, r3
10049af8:	dbe5      	blt.n	10049ac6 <write_data+0x42>
  }
  word = 0xFFFFFFFF;
10049afa:	2301      	movs	r3, #1
10049afc:	425b      	negs	r3, r3
10049afe:	613b      	str	r3, [r7, #16]
  memcpy(&word, data_8 + length_word, rest);
10049b00:	193b      	adds	r3, r7, r4
10049b02:	881b      	ldrh	r3, [r3, #0]
10049b04:	69ba      	ldr	r2, [r7, #24]
10049b06:	18d1      	adds	r1, r2, r3
10049b08:	2315      	movs	r3, #21
10049b0a:	18fb      	adds	r3, r7, r3
10049b0c:	781a      	ldrb	r2, [r3, #0]
10049b0e:	2310      	movs	r3, #16
10049b10:	18fb      	adds	r3, r7, r3
10049b12:	0018      	movs	r0, r3
10049b14:	f01d fc8a 	bl	1006742c <memcpy>
  NVMDB_FLASH_WRITE(flash_address + length_word, word);
10049b18:	193b      	adds	r3, r7, r4
10049b1a:	881a      	ldrh	r2, [r3, #0]
10049b1c:	68fb      	ldr	r3, [r7, #12]
10049b1e:	18d3      	adds	r3, r2, r3
10049b20:	693a      	ldr	r2, [r7, #16]
10049b22:	0019      	movs	r1, r3
10049b24:	2000      	movs	r0, #0
10049b26:	f003 f941 	bl	1004cdac <HAL_FLASH_Program>
}
10049b2a:	46c0      	nop			@ (mov r8, r8)
10049b2c:	46bd      	mov	sp, r7
10049b2e:	b009      	add	sp, #36	@ 0x24
10049b30:	bd90      	pop	{r4, r7, pc}

10049b32 <WriteRecord>:

static NVMDB_status_t WriteRecord(uint32_t flash_address, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
10049b32:	b5f0      	push	{r4, r5, r6, r7, lr}
10049b34:	b087      	sub	sp, #28
10049b36:	af00      	add	r7, sp, #0
10049b38:	60f8      	str	r0, [r7, #12]
10049b3a:	0008      	movs	r0, r1
10049b3c:	0011      	movs	r1, r2
10049b3e:	607b      	str	r3, [r7, #4]
10049b40:	250b      	movs	r5, #11
10049b42:	197b      	adds	r3, r7, r5
10049b44:	1c02      	adds	r2, r0, #0
10049b46:	701a      	strb	r2, [r3, #0]
10049b48:	2408      	movs	r4, #8
10049b4a:	193b      	adds	r3, r7, r4
10049b4c:	1c0a      	adds	r2, r1, #0
10049b4e:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  NVMDB_RecordHeaderType *header_p = (NVMDB_RecordHeaderType *)&word;
10049b50:	2310      	movs	r3, #16
10049b52:	18fb      	adds	r3, r7, r3
10049b54:	617b      	str	r3, [r7, #20]
#if NVM_CACHE
  int32_t needed_time;
#endif

  data1_length = ROUND4_R(data1_length); // Make sure data1_length is multiple of 4.
10049b56:	193b      	adds	r3, r7, r4
10049b58:	881b      	ldrh	r3, [r3, #0]
10049b5a:	3b01      	subs	r3, #1
10049b5c:	b29b      	uxth	r3, r3
10049b5e:	b21b      	sxth	r3, r3
10049b60:	2203      	movs	r2, #3
10049b62:	4313      	orrs	r3, r2
10049b64:	b21b      	sxth	r3, r3
10049b66:	b29a      	uxth	r2, r3
10049b68:	193b      	adds	r3, r7, r4
10049b6a:	3201      	adds	r2, #1
10049b6c:	801a      	strh	r2, [r3, #0]

  header_p->valid_flag = VALID_RECORD;
10049b6e:	697b      	ldr	r3, [r7, #20]
10049b70:	22fe      	movs	r2, #254	@ 0xfe
10049b72:	701a      	strb	r2, [r3, #0]
  header_p->record_id = record_id;
10049b74:	697b      	ldr	r3, [r7, #20]
10049b76:	197a      	adds	r2, r7, r5
10049b78:	7812      	ldrb	r2, [r2, #0]
10049b7a:	705a      	strb	r2, [r3, #1]
  header_p->length = data1_length + data2_length;
10049b7c:	193a      	adds	r2, r7, r4
10049b7e:	2520      	movs	r5, #32
10049b80:	2608      	movs	r6, #8
10049b82:	19ab      	adds	r3, r5, r6
10049b84:	2108      	movs	r1, #8
10049b86:	468c      	mov	ip, r1
10049b88:	44bc      	add	ip, r7
10049b8a:	4463      	add	r3, ip
10049b8c:	8812      	ldrh	r2, [r2, #0]
10049b8e:	881b      	ldrh	r3, [r3, #0]
10049b90:	18d3      	adds	r3, r2, r3
10049b92:	b29a      	uxth	r2, r3
10049b94:	697b      	ldr	r3, [r7, #20]
10049b96:	805a      	strh	r2, [r3, #2]
  }
#endif

  DEBUG_GPIO_HIGH();

  NVMDB_FLASH_WRITE(flash_address, word);
10049b98:	693a      	ldr	r2, [r7, #16]
10049b9a:	68fb      	ldr	r3, [r7, #12]
10049b9c:	0019      	movs	r1, r3
10049b9e:	2000      	movs	r0, #0
10049ba0:	f003 f904 	bl	1004cdac <HAL_FLASH_Program>

  write_data(flash_address + 4, data1_length, data1);
10049ba4:	68fb      	ldr	r3, [r7, #12]
10049ba6:	1d18      	adds	r0, r3, #4
10049ba8:	687a      	ldr	r2, [r7, #4]
10049baa:	193b      	adds	r3, r7, r4
10049bac:	881b      	ldrh	r3, [r3, #0]
10049bae:	0019      	movs	r1, r3
10049bb0:	f7ff ff68 	bl	10049a84 <write_data>
  write_data(flash_address + 4 + data1_length, data2_length, data2);
10049bb4:	193b      	adds	r3, r7, r4
10049bb6:	881a      	ldrh	r2, [r3, #0]
10049bb8:	68fb      	ldr	r3, [r7, #12]
10049bba:	18d3      	adds	r3, r2, r3
10049bbc:	1d18      	adds	r0, r3, #4
10049bbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10049bc0:	19ab      	adds	r3, r5, r6
10049bc2:	2108      	movs	r1, #8
10049bc4:	468c      	mov	ip, r1
10049bc6:	44bc      	add	ip, r7
10049bc8:	4463      	add	r3, ip
10049bca:	881b      	ldrh	r3, [r3, #0]
10049bcc:	0019      	movs	r1, r3
10049bce:	f7ff ff59 	bl	10049a84 <write_data>
  DEBUG_GPIO_LOW();
#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
10049bd2:	2300      	movs	r3, #0
}
10049bd4:	0018      	movs	r0, r3
10049bd6:	46bd      	mov	sp, r7
10049bd8:	b007      	add	sp, #28
10049bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

10049bdc <NVMDB_CompareCurrentRecord>:

int NVMDB_CompareCurrentRecord(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType offset, const uint8_t *data_p, NVMDB_RecordSizeType size)
{
10049bdc:	b580      	push	{r7, lr}
10049bde:	b086      	sub	sp, #24
10049be0:	af00      	add	r7, sp, #0
10049be2:	60f8      	str	r0, [r7, #12]
10049be4:	0008      	movs	r0, r1
10049be6:	607a      	str	r2, [r7, #4]
10049be8:	0019      	movs	r1, r3
10049bea:	230a      	movs	r3, #10
10049bec:	18fb      	adds	r3, r7, r3
10049bee:	1c02      	adds	r2, r0, #0
10049bf0:	801a      	strh	r2, [r3, #0]
10049bf2:	2308      	movs	r3, #8
10049bf4:	18fb      	adds	r3, r7, r3
10049bf6:	1c0a      	adds	r2, r1, #0
10049bf8:	801a      	strh	r2, [r3, #0]
    }
  }

#endif

  record_p = (NVMDB_RecordType_ptr)handle_p->address;
10049bfa:	68fb      	ldr	r3, [r7, #12]
10049bfc:	685b      	ldr	r3, [r3, #4]
10049bfe:	617b      	str	r3, [r7, #20]

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
10049c00:	68fb      	ldr	r3, [r7, #12]
10049c02:	685a      	ldr	r2, [r3, #4]
10049c04:	68fb      	ldr	r3, [r7, #12]
10049c06:	689b      	ldr	r3, [r3, #8]
10049c08:	429a      	cmp	r2, r3
10049c0a:	d203      	bcs.n	10049c14 <NVMDB_CompareCurrentRecord+0x38>
10049c0c:	697b      	ldr	r3, [r7, #20]
10049c0e:	781b      	ldrb	r3, [r3, #0]
10049c10:	2bff      	cmp	r3, #255	@ 0xff
10049c12:	d101      	bne.n	10049c18 <NVMDB_CompareCurrentRecord+0x3c>
  {
    return NVMDB_STATUS_END_OF_DB;
10049c14:	2304      	movs	r3, #4
10049c16:	e02a      	b.n	10049c6e <NVMDB_CompareCurrentRecord+0x92>
  }

  if(handle_p->first_read || record_p->header.valid_flag != VALID_RECORD)
10049c18:	68fb      	ldr	r3, [r7, #12]
10049c1a:	7b1b      	ldrb	r3, [r3, #12]
10049c1c:	2b00      	cmp	r3, #0
10049c1e:	d103      	bne.n	10049c28 <NVMDB_CompareCurrentRecord+0x4c>
10049c20:	697b      	ldr	r3, [r7, #20]
10049c22:	781b      	ldrb	r3, [r3, #0]
10049c24:	2bfe      	cmp	r3, #254	@ 0xfe
10049c26:	d001      	beq.n	10049c2c <NVMDB_CompareCurrentRecord+0x50>
  {
    return NVMDB_STATUS_INVALID_RECORD;
10049c28:	2305      	movs	r3, #5
10049c2a:	e020      	b.n	10049c6e <NVMDB_CompareCurrentRecord+0x92>
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(offset >= record_p->header.length)
10049c2c:	697b      	ldr	r3, [r7, #20]
10049c2e:	885b      	ldrh	r3, [r3, #2]
10049c30:	220a      	movs	r2, #10
10049c32:	18ba      	adds	r2, r7, r2
10049c34:	8812      	ldrh	r2, [r2, #0]
10049c36:	429a      	cmp	r2, r3
10049c38:	d301      	bcc.n	10049c3e <NVMDB_CompareCurrentRecord+0x62>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
10049c3a:	2306      	movs	r3, #6
10049c3c:	e017      	b.n	10049c6e <NVMDB_CompareCurrentRecord+0x92>
  }

  handle_p->first_read = FALSE;
10049c3e:	68fb      	ldr	r3, [r7, #12]
10049c40:	2200      	movs	r2, #0
10049c42:	731a      	strb	r2, [r3, #12]

  if(memcmp(data_p, (uint8_t *)handle_p->address + RECORD_HEADER_SIZE + offset, size) == 0)
10049c44:	230a      	movs	r3, #10
10049c46:	18fb      	adds	r3, r7, r3
10049c48:	881a      	ldrh	r2, [r3, #0]
10049c4a:	68fb      	ldr	r3, [r7, #12]
10049c4c:	685b      	ldr	r3, [r3, #4]
10049c4e:	18d3      	adds	r3, r2, r3
10049c50:	3304      	adds	r3, #4
10049c52:	0019      	movs	r1, r3
10049c54:	2308      	movs	r3, #8
10049c56:	18fb      	adds	r3, r7, r3
10049c58:	881a      	ldrh	r2, [r3, #0]
10049c5a:	687b      	ldr	r3, [r7, #4]
10049c5c:	0018      	movs	r0, r3
10049c5e:	f01d fb6f 	bl	10067340 <memcmp>
10049c62:	1e03      	subs	r3, r0, #0
10049c64:	d101      	bne.n	10049c6a <NVMDB_CompareCurrentRecord+0x8e>
  {
    return NVMDB_STATUS_OK;
10049c66:	2300      	movs	r3, #0
10049c68:	e001      	b.n	10049c6e <NVMDB_CompareCurrentRecord+0x92>
  }
  else
  {
    return -1;
10049c6a:	2301      	movs	r3, #1
10049c6c:	425b      	negs	r3, r3
  }
}
10049c6e:	0018      	movs	r0, r3
10049c70:	46bd      	mov	sp, r7
10049c72:	b006      	add	sp, #24
10049c74:	bd80      	pop	{r7, pc}

10049c76 <ReadCurrentRecordNoLock>:

static NVMDB_status_t ReadCurrentRecordNoLock(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length)
{
10049c76:	b590      	push	{r4, r7, lr}
10049c78:	b087      	sub	sp, #28
10049c7a:	af00      	add	r7, sp, #0
10049c7c:	60f8      	str	r0, [r7, #12]
10049c7e:	0008      	movs	r0, r1
10049c80:	607a      	str	r2, [r7, #4]
10049c82:	0019      	movs	r1, r3
10049c84:	230a      	movs	r3, #10
10049c86:	18fb      	adds	r3, r7, r3
10049c88:	1c02      	adds	r2, r0, #0
10049c8a:	801a      	strh	r2, [r3, #0]
10049c8c:	2308      	movs	r3, #8
10049c8e:	0018      	movs	r0, r3
10049c90:	18fb      	adds	r3, r7, r3
10049c92:	1c0a      	adds	r2, r1, #0
10049c94:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordHeaderType header;
  NVMDB_RecordType_ptr record_p;

  *size_p = 0;
10049c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10049c98:	2200      	movs	r2, #0
10049c9a:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(current_record_length)
10049c9c:	2224      	movs	r2, #36	@ 0x24
10049c9e:	1813      	adds	r3, r2, r0
10049ca0:	19db      	adds	r3, r3, r7
10049ca2:	881b      	ldrh	r3, [r3, #0]
10049ca4:	2b00      	cmp	r3, #0
10049ca6:	d00b      	beq.n	10049cc0 <ReadCurrentRecordNoLock+0x4a>
  {
    header.length = current_record_length;
10049ca8:	2110      	movs	r1, #16
10049caa:	187b      	adds	r3, r7, r1
10049cac:	1812      	adds	r2, r2, r0
10049cae:	19d2      	adds	r2, r2, r7
10049cb0:	8812      	ldrh	r2, [r2, #0]
10049cb2:	805a      	strh	r2, [r3, #2]
    header.valid_flag = VALID_RECORD;
10049cb4:	187b      	adds	r3, r7, r1
10049cb6:	22fe      	movs	r2, #254	@ 0xfe
10049cb8:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
10049cba:	187b      	adds	r3, r7, r1
10049cbc:	617b      	str	r3, [r7, #20]
10049cbe:	e002      	b.n	10049cc6 <ReadCurrentRecordNoLock+0x50>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
10049cc0:	68fb      	ldr	r3, [r7, #12]
10049cc2:	685b      	ldr	r3, [r3, #4]
10049cc4:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
10049cc6:	68fb      	ldr	r3, [r7, #12]
10049cc8:	685a      	ldr	r2, [r3, #4]
10049cca:	68fb      	ldr	r3, [r7, #12]
10049ccc:	689b      	ldr	r3, [r3, #8]
10049cce:	429a      	cmp	r2, r3
10049cd0:	d203      	bcs.n	10049cda <ReadCurrentRecordNoLock+0x64>
10049cd2:	697b      	ldr	r3, [r7, #20]
10049cd4:	781b      	ldrb	r3, [r3, #0]
10049cd6:	2bff      	cmp	r3, #255	@ 0xff
10049cd8:	d101      	bne.n	10049cde <ReadCurrentRecordNoLock+0x68>
  {
    return NVMDB_STATUS_END_OF_DB;
10049cda:	2304      	movs	r3, #4
10049cdc:	e033      	b.n	10049d46 <ReadCurrentRecordNoLock+0xd0>
  }

  if(handle_p->first_read || record_p->header.valid_flag != VALID_RECORD)
10049cde:	68fb      	ldr	r3, [r7, #12]
10049ce0:	7b1b      	ldrb	r3, [r3, #12]
10049ce2:	2b00      	cmp	r3, #0
10049ce4:	d103      	bne.n	10049cee <ReadCurrentRecordNoLock+0x78>
10049ce6:	697b      	ldr	r3, [r7, #20]
10049ce8:	781b      	ldrb	r3, [r3, #0]
10049cea:	2bfe      	cmp	r3, #254	@ 0xfe
10049cec:	d001      	beq.n	10049cf2 <ReadCurrentRecordNoLock+0x7c>
  {
    return NVMDB_STATUS_INVALID_RECORD;
10049cee:	2305      	movs	r3, #5
10049cf0:	e029      	b.n	10049d46 <ReadCurrentRecordNoLock+0xd0>
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(offset >= record_p->header.length)
10049cf2:	697b      	ldr	r3, [r7, #20]
10049cf4:	885b      	ldrh	r3, [r3, #2]
10049cf6:	220a      	movs	r2, #10
10049cf8:	18ba      	adds	r2, r7, r2
10049cfa:	8812      	ldrh	r2, [r2, #0]
10049cfc:	429a      	cmp	r2, r3
10049cfe:	d301      	bcc.n	10049d04 <ReadCurrentRecordNoLock+0x8e>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
10049d00:	2306      	movs	r3, #6
10049d02:	e020      	b.n	10049d46 <ReadCurrentRecordNoLock+0xd0>
  }

  handle_p->first_read = FALSE;
10049d04:	68fb      	ldr	r3, [r7, #12]
10049d06:	2200      	movs	r2, #0
10049d08:	731a      	strb	r2, [r3, #12]

  memcpy(data_p, (uint8_t *)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
10049d0a:	240a      	movs	r4, #10
10049d0c:	193b      	adds	r3, r7, r4
10049d0e:	881a      	ldrh	r2, [r3, #0]
10049d10:	68fb      	ldr	r3, [r7, #12]
10049d12:	685b      	ldr	r3, [r3, #4]
10049d14:	18d3      	adds	r3, r2, r3
10049d16:	3304      	adds	r3, #4
10049d18:	0018      	movs	r0, r3
10049d1a:	2308      	movs	r3, #8
10049d1c:	18fb      	adds	r3, r7, r3
10049d1e:	881a      	ldrh	r2, [r3, #0]
10049d20:	697b      	ldr	r3, [r7, #20]
10049d22:	885b      	ldrh	r3, [r3, #2]
10049d24:	0019      	movs	r1, r3
10049d26:	193b      	adds	r3, r7, r4
10049d28:	881b      	ldrh	r3, [r3, #0]
10049d2a:	1acb      	subs	r3, r1, r3
10049d2c:	429a      	cmp	r2, r3
10049d2e:	dd00      	ble.n	10049d32 <ReadCurrentRecordNoLock+0xbc>
10049d30:	001a      	movs	r2, r3
10049d32:	687b      	ldr	r3, [r7, #4]
10049d34:	0001      	movs	r1, r0
10049d36:	0018      	movs	r0, r3
10049d38:	f01d fb78 	bl	1006742c <memcpy>
  *size_p = record_p->header.length;
10049d3c:	697b      	ldr	r3, [r7, #20]
10049d3e:	885a      	ldrh	r2, [r3, #2]
10049d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10049d42:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10049d44:	2300      	movs	r3, #0
}
10049d46:	0018      	movs	r0, r3
10049d48:	46bd      	mov	sp, r7
10049d4a:	b007      	add	sp, #28
10049d4c:	bd90      	pop	{r4, r7, pc}
	...

10049d50 <InvalidateRecord>:

static NVMDB_status_t InvalidateRecord(uint32_t address)
{
10049d50:	b580      	push	{r7, lr}
10049d52:	b084      	sub	sp, #16
10049d54:	af00      	add	r7, sp, #0
10049d56:	6078      	str	r0, [r7, #4]
  uint32_t word = 0xFFFFFF00;
10049d58:	4b06      	ldr	r3, [pc, #24]	@ (10049d74 <InvalidateRecord+0x24>)
10049d5a:	60fb      	str	r3, [r7, #12]
    ATOMIC_SECTION_END();
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif
  DEBUG_GPIO_HIGH();
  NVMDB_FLASH_WRITE(address, word);
10049d5c:	68fa      	ldr	r2, [r7, #12]
10049d5e:	687b      	ldr	r3, [r7, #4]
10049d60:	0019      	movs	r1, r3
10049d62:	2000      	movs	r0, #0
10049d64:	f003 f822 	bl	1004cdac <HAL_FLASH_Program>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
10049d68:	2300      	movs	r3, #0
}
10049d6a:	0018      	movs	r0, r3
10049d6c:	46bd      	mov	sp, r7
10049d6e:	b004      	add	sp, #16
10049d70:	bd80      	pop	{r7, pc}
10049d72:	46c0      	nop			@ (mov r8, r8)
10049d74:	ffffff00 	.word	0xffffff00

10049d78 <NVMDB_DeleteRecordNoCache>:

static NVMDB_status_t NVMDB_DeleteRecordNoCache(const NVMDB_HandleType *handle_p)
{
10049d78:	b5b0      	push	{r4, r5, r7, lr}
10049d7a:	b084      	sub	sp, #16
10049d7c:	af00      	add	r7, sp, #0
10049d7e:	6078      	str	r0, [r7, #4]
  NVMDB_RecordType *record_p;
  NVMDB_status_t status;

  record_p = (NVMDB_RecordType_ptr)handle_p->address;
10049d80:	687b      	ldr	r3, [r7, #4]
10049d82:	685b      	ldr	r3, [r3, #4]
10049d84:	60fb      	str	r3, [r7, #12]

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
10049d86:	687b      	ldr	r3, [r7, #4]
10049d88:	685a      	ldr	r2, [r3, #4]
10049d8a:	687b      	ldr	r3, [r7, #4]
10049d8c:	689b      	ldr	r3, [r3, #8]
10049d8e:	429a      	cmp	r2, r3
10049d90:	d203      	bcs.n	10049d9a <NVMDB_DeleteRecordNoCache+0x22>
10049d92:	68fb      	ldr	r3, [r7, #12]
10049d94:	781b      	ldrb	r3, [r3, #0]
10049d96:	2bff      	cmp	r3, #255	@ 0xff
10049d98:	d101      	bne.n	10049d9e <NVMDB_DeleteRecordNoCache+0x26>
  {
    return NVMDB_STATUS_END_OF_DB;
10049d9a:	2304      	movs	r3, #4
10049d9c:	e041      	b.n	10049e22 <NVMDB_DeleteRecordNoCache+0xaa>
  }
  if(record_p->header.valid_flag == VALID_RECORD)
10049d9e:	68fb      	ldr	r3, [r7, #12]
10049da0:	781b      	ldrb	r3, [r3, #0]
10049da2:	2bfe      	cmp	r3, #254	@ 0xfe
10049da4:	d13c      	bne.n	10049e20 <NVMDB_DeleteRecordNoCache+0xa8>
  {

    status = InvalidateRecord((uint32_t)record_p);
10049da6:	68fb      	ldr	r3, [r7, #12]
10049da8:	250b      	movs	r5, #11
10049daa:	197c      	adds	r4, r7, r5
10049dac:	0018      	movs	r0, r3
10049dae:	f7ff ffcf 	bl	10049d50 <InvalidateRecord>
10049db2:	0003      	movs	r3, r0
10049db4:	7023      	strb	r3, [r4, #0]
    if(status)
10049db6:	197b      	adds	r3, r7, r5
10049db8:	781b      	ldrb	r3, [r3, #0]
10049dba:	2b00      	cmp	r3, #0
10049dbc:	d002      	beq.n	10049dc4 <NVMDB_DeleteRecordNoCache+0x4c>
    {
      return status;
10049dbe:	197b      	adds	r3, r7, r5
10049dc0:	781b      	ldrb	r3, [r3, #0]
10049dc2:	e02e      	b.n	10049e22 <NVMDB_DeleteRecordNoCache+0xaa>
    }

    DBInfo[handle_p->id].valid_records--;
10049dc4:	687b      	ldr	r3, [r7, #4]
10049dc6:	781b      	ldrb	r3, [r3, #0]
10049dc8:	001a      	movs	r2, r3
10049dca:	4918      	ldr	r1, [pc, #96]	@ (10049e2c <NVMDB_DeleteRecordNoCache+0xb4>)
10049dcc:	0013      	movs	r3, r2
10049dce:	009b      	lsls	r3, r3, #2
10049dd0:	189b      	adds	r3, r3, r2
10049dd2:	009b      	lsls	r3, r3, #2
10049dd4:	18cb      	adds	r3, r1, r3
10049dd6:	3308      	adds	r3, #8
10049dd8:	881b      	ldrh	r3, [r3, #0]
10049dda:	3b01      	subs	r3, #1
10049ddc:	b298      	uxth	r0, r3
10049dde:	4913      	ldr	r1, [pc, #76]	@ (10049e2c <NVMDB_DeleteRecordNoCache+0xb4>)
10049de0:	0013      	movs	r3, r2
10049de2:	009b      	lsls	r3, r3, #2
10049de4:	189b      	adds	r3, r3, r2
10049de6:	009b      	lsls	r3, r3, #2
10049de8:	18cb      	adds	r3, r1, r3
10049dea:	3308      	adds	r3, #8
10049dec:	1c02      	adds	r2, r0, #0
10049dee:	801a      	strh	r2, [r3, #0]
    DBInfo[handle_p->id].invalid_records++;
10049df0:	687b      	ldr	r3, [r7, #4]
10049df2:	781b      	ldrb	r3, [r3, #0]
10049df4:	001a      	movs	r2, r3
10049df6:	490d      	ldr	r1, [pc, #52]	@ (10049e2c <NVMDB_DeleteRecordNoCache+0xb4>)
10049df8:	0013      	movs	r3, r2
10049dfa:	009b      	lsls	r3, r3, #2
10049dfc:	189b      	adds	r3, r3, r2
10049dfe:	009b      	lsls	r3, r3, #2
10049e00:	18cb      	adds	r3, r1, r3
10049e02:	330a      	adds	r3, #10
10049e04:	881b      	ldrh	r3, [r3, #0]
10049e06:	3301      	adds	r3, #1
10049e08:	b298      	uxth	r0, r3
10049e0a:	4908      	ldr	r1, [pc, #32]	@ (10049e2c <NVMDB_DeleteRecordNoCache+0xb4>)
10049e0c:	0013      	movs	r3, r2
10049e0e:	009b      	lsls	r3, r3, #2
10049e10:	189b      	adds	r3, r3, r2
10049e12:	009b      	lsls	r3, r3, #2
10049e14:	18cb      	adds	r3, r1, r3
10049e16:	330a      	adds	r3, #10
10049e18:	1c02      	adds	r2, r0, #0
10049e1a:	801a      	strh	r2, [r3, #0]

    return NVMDB_STATUS_OK;
10049e1c:	2300      	movs	r3, #0
10049e1e:	e000      	b.n	10049e22 <NVMDB_DeleteRecordNoCache+0xaa>
  }
  else
  {
    return NVMDB_STATUS_INVALID_RECORD;
10049e20:	2305      	movs	r3, #5
  }
}
10049e22:	0018      	movs	r0, r3
10049e24:	46bd      	mov	sp, r7
10049e26:	b004      	add	sp, #16
10049e28:	bdb0      	pop	{r4, r5, r7, pc}
10049e2a:	46c0      	nop			@ (mov r8, r8)
10049e2c:	20000dec 	.word	0x20000dec

10049e30 <ErasePage>:

static void ErasePage(uint32_t address, uint8_t num_pages)
{
10049e30:	b580      	push	{r7, lr}
10049e32:	b088      	sub	sp, #32
10049e34:	af00      	add	r7, sp, #0
10049e36:	6078      	str	r0, [r7, #4]
10049e38:	000a      	movs	r2, r1
10049e3a:	1cfb      	adds	r3, r7, #3
10049e3c:	701a      	strb	r2, [r3, #0]
  int page_num = (address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
10049e3e:	687b      	ldr	r3, [r7, #4]
10049e40:	4a0d      	ldr	r2, [pc, #52]	@ (10049e78 <ErasePage+0x48>)
10049e42:	4694      	mov	ip, r2
10049e44:	4463      	add	r3, ip
10049e46:	0adb      	lsrs	r3, r3, #11
10049e48:	61fb      	str	r3, [r7, #28]

  DEBUG_GPIO_HIGH();
  NVMDB_FLASH_ERASE_PAGE(page_num, num_pages);
10049e4a:	2110      	movs	r1, #16
10049e4c:	187b      	adds	r3, r7, r1
10049e4e:	2200      	movs	r2, #0
10049e50:	601a      	str	r2, [r3, #0]
10049e52:	69fa      	ldr	r2, [r7, #28]
10049e54:	187b      	adds	r3, r7, r1
10049e56:	605a      	str	r2, [r3, #4]
10049e58:	1cfb      	adds	r3, r7, #3
10049e5a:	781a      	ldrb	r2, [r3, #0]
10049e5c:	187b      	adds	r3, r7, r1
10049e5e:	609a      	str	r2, [r3, #8]
10049e60:	230c      	movs	r3, #12
10049e62:	18fa      	adds	r2, r7, r3
10049e64:	187b      	adds	r3, r7, r1
10049e66:	0011      	movs	r1, r2
10049e68:	0018      	movs	r0, r3
10049e6a:	f003 f879 	bl	1004cf60 <HAL_FLASHEx_Erase>
  DEBUG_GPIO_LOW();
}
10049e6e:	46c0      	nop			@ (mov r8, r8)
10049e70:	46bd      	mov	sp, r7
10049e72:	b008      	add	sp, #32
10049e74:	bd80      	pop	{r7, pc}
10049e76:	46c0      	nop			@ (mov r8, r8)
10049e78:	effc0000 	.word	0xeffc0000

10049e7c <WriteBufferToFlash>:

/* Size of data must be multiple of 4. This function also erases the page if needed. */
static void WriteBufferToFlash(uint32_t address, uint32_t *data, uint32_t size)
{
10049e7c:	b580      	push	{r7, lr}
10049e7e:	b086      	sub	sp, #24
10049e80:	af00      	add	r7, sp, #0
10049e82:	60f8      	str	r0, [r7, #12]
10049e84:	60b9      	str	r1, [r7, #8]
10049e86:	607a      	str	r2, [r7, #4]
  /* Check if we are writing the same data in entire pages.
     If size is less than a page size, we need to erase the page to clean it. */
  if((size % PAGE_SIZE) == 0 && memcmp((uint8_t *)address, data, size) == 0)
10049e88:	687b      	ldr	r3, [r7, #4]
10049e8a:	055b      	lsls	r3, r3, #21
10049e8c:	0d5b      	lsrs	r3, r3, #21
10049e8e:	d107      	bne.n	10049ea0 <WriteBufferToFlash+0x24>
10049e90:	68fb      	ldr	r3, [r7, #12]
10049e92:	687a      	ldr	r2, [r7, #4]
10049e94:	68b9      	ldr	r1, [r7, #8]
10049e96:	0018      	movs	r0, r3
10049e98:	f01d fa52 	bl	10067340 <memcmp>
10049e9c:	1e03      	subs	r3, r0, #0
10049e9e:	d026      	beq.n	10049eee <WriteBufferToFlash+0x72>
  {
    return;
  }

  ErasePage(address, ROUNDPAGE_R(size) / PAGE_SIZE);
10049ea0:	687b      	ldr	r3, [r7, #4]
10049ea2:	3b01      	subs	r3, #1
10049ea4:	4a14      	ldr	r2, [pc, #80]	@ (10049ef8 <WriteBufferToFlash+0x7c>)
10049ea6:	4313      	orrs	r3, r2
10049ea8:	3301      	adds	r3, #1
10049eaa:	0adb      	lsrs	r3, r3, #11
10049eac:	b2da      	uxtb	r2, r3
10049eae:	68fb      	ldr	r3, [r7, #12]
10049eb0:	0011      	movs	r1, r2
10049eb2:	0018      	movs	r0, r3
10049eb4:	f7ff ffbc 	bl	10049e30 <ErasePage>

  DEBUG_GPIO_HIGH();
  for(int i = 0; i < size; i += 4)
10049eb8:	2300      	movs	r3, #0
10049eba:	617b      	str	r3, [r7, #20]
10049ebc:	e012      	b.n	10049ee4 <WriteBufferToFlash+0x68>
  {
    NVMDB_FLASH_WRITE(address + i, data[i / 4]);
10049ebe:	697a      	ldr	r2, [r7, #20]
10049ec0:	68fb      	ldr	r3, [r7, #12]
10049ec2:	18d1      	adds	r1, r2, r3
10049ec4:	697b      	ldr	r3, [r7, #20]
10049ec6:	2b00      	cmp	r3, #0
10049ec8:	da00      	bge.n	10049ecc <WriteBufferToFlash+0x50>
10049eca:	3303      	adds	r3, #3
10049ecc:	109b      	asrs	r3, r3, #2
10049ece:	009b      	lsls	r3, r3, #2
10049ed0:	68ba      	ldr	r2, [r7, #8]
10049ed2:	18d3      	adds	r3, r2, r3
10049ed4:	681b      	ldr	r3, [r3, #0]
10049ed6:	001a      	movs	r2, r3
10049ed8:	2000      	movs	r0, #0
10049eda:	f002 ff67 	bl	1004cdac <HAL_FLASH_Program>
  for(int i = 0; i < size; i += 4)
10049ede:	697b      	ldr	r3, [r7, #20]
10049ee0:	3304      	adds	r3, #4
10049ee2:	617b      	str	r3, [r7, #20]
10049ee4:	697b      	ldr	r3, [r7, #20]
10049ee6:	687a      	ldr	r2, [r7, #4]
10049ee8:	429a      	cmp	r2, r3
10049eea:	d8e8      	bhi.n	10049ebe <WriteBufferToFlash+0x42>
10049eec:	e000      	b.n	10049ef0 <WriteBufferToFlash+0x74>
    return;
10049eee:	46c0      	nop			@ (mov r8, r8)
  }
  DEBUG_GPIO_LOW();
}
10049ef0:	46bd      	mov	sp, r7
10049ef2:	b006      	add	sp, #24
10049ef4:	bd80      	pop	{r7, pc}
10049ef6:	46c0      	nop			@ (mov r8, r8)
10049ef8:	000007ff 	.word	0x000007ff

10049efc <InitReadState>:

static void InitReadState(ReadStateType *state_p)
{
10049efc:	b580      	push	{r7, lr}
10049efe:	b082      	sub	sp, #8
10049f00:	af00      	add	r7, sp, #0
10049f02:	6078      	str	r0, [r7, #4]
  state_p->move_to_next_record = TRUE;
10049f04:	687b      	ldr	r3, [r7, #4]
10049f06:	2201      	movs	r2, #1
10049f08:	701a      	strb	r2, [r3, #0]
  state_p->record_offset = 0;
10049f0a:	687b      	ldr	r3, [r7, #4]
10049f0c:	2200      	movs	r2, #0
10049f0e:	805a      	strh	r2, [r3, #2]
  state_p->record_length = 0;
10049f10:	687b      	ldr	r3, [r7, #4]
10049f12:	2200      	movs	r2, #0
10049f14:	809a      	strh	r2, [r3, #4]
}
10049f16:	46c0      	nop			@ (mov r8, r8)
10049f18:	46bd      	mov	sp, r7
10049f1a:	b002      	add	sp, #8
10049f1c:	bd80      	pop	{r7, pc}

10049f1e <LoadDBToRAM>:
/* Call InitReadState() to initialize read_state before passing it to the function to start loading data from the database.
   This function returns NVMDB_STATUS_OK if other calls must be done to the same function to continue reading the database.
   Pass the same read_state variable to the function if calling it again to continue reading from the same database. */

static NVMDB_status_t LoadDBToRAM(NVMDB_HandleType *handle_p, uint8_t *buff, uint16_t buff_size, uint16_t *num_read_bytes_p, ReadStateType *read_state)
{
10049f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
10049f20:	b08d      	sub	sp, #52	@ 0x34
10049f22:	af04      	add	r7, sp, #16
10049f24:	60f8      	str	r0, [r7, #12]
10049f26:	60b9      	str	r1, [r7, #8]
10049f28:	603b      	str	r3, [r7, #0]
10049f2a:	1dbb      	adds	r3, r7, #6
10049f2c:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;
  uint16_t free_buffer_size;
  NVMDB_RecordSizeType record_size, remaining_record_bytes;
  NVMDB_RecordHeaderType header;
  uint16_t index = 0;
10049f2e:	231e      	movs	r3, #30
10049f30:	18fb      	adds	r3, r7, r3
10049f32:	2200      	movs	r2, #0
10049f34:	801a      	strh	r2, [r3, #0]

  memset(buff, 0xFF, buff_size);
10049f36:	1dbb      	adds	r3, r7, #6
10049f38:	881a      	ldrh	r2, [r3, #0]
10049f3a:	68bb      	ldr	r3, [r7, #8]
10049f3c:	21ff      	movs	r1, #255	@ 0xff
10049f3e:	0018      	movs	r0, r3
10049f40:	f01d fa0c 	bl	1006735c <memset>

  header.valid_flag = VALID_RECORD;
10049f44:	2310      	movs	r3, #16
10049f46:	18fb      	adds	r3, r7, r3
10049f48:	22fe      	movs	r2, #254	@ 0xfe
10049f4a:	701a      	strb	r2, [r3, #0]

  while(1)
  {

    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
10049f4c:	1dba      	adds	r2, r7, #6
10049f4e:	251e      	movs	r5, #30
10049f50:	197b      	adds	r3, r7, r5
10049f52:	8812      	ldrh	r2, [r2, #0]
10049f54:	881b      	ldrh	r3, [r3, #0]
10049f56:	1ad3      	subs	r3, r2, r3
10049f58:	b29a      	uxth	r2, r3
10049f5a:	231c      	movs	r3, #28
10049f5c:	18fb      	adds	r3, r7, r3
10049f5e:	3a04      	subs	r2, #4
10049f60:	801a      	strh	r2, [r3, #0]

    // Read the record
    if(read_state->move_to_next_record)
10049f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10049f64:	781b      	ldrb	r3, [r3, #0]
10049f66:	2b00      	cmp	r3, #0
10049f68:	d04e      	beq.n	1004a008 <LoadDBToRAM+0xea>
    {
      /* Passing read_state->record_length to the function because we do not want
         the function to retrieve the info from the header of the current record,
         since it may not be anymore in the same position in flash. */
      status = ReadNextRecordNoLock(handle_p, ALL_TYPES, 0, buff + index + RECORD_HEADER_SIZE, free_buffer_size, &record_size, read_state->record_length, &header.record_id);
10049f6a:	197b      	adds	r3, r7, r5
10049f6c:	881b      	ldrh	r3, [r3, #0]
10049f6e:	3304      	adds	r3, #4
10049f70:	68ba      	ldr	r2, [r7, #8]
10049f72:	18d1      	adds	r1, r2, r3
10049f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10049f76:	889b      	ldrh	r3, [r3, #4]
10049f78:	261b      	movs	r6, #27
10049f7a:	19bc      	adds	r4, r7, r6
10049f7c:	68f8      	ldr	r0, [r7, #12]
10049f7e:	2210      	movs	r2, #16
10049f80:	18ba      	adds	r2, r7, r2
10049f82:	3201      	adds	r2, #1
10049f84:	9203      	str	r2, [sp, #12]
10049f86:	9302      	str	r3, [sp, #8]
10049f88:	2216      	movs	r2, #22
10049f8a:	18bb      	adds	r3, r7, r2
10049f8c:	9301      	str	r3, [sp, #4]
10049f8e:	231c      	movs	r3, #28
10049f90:	18fb      	adds	r3, r7, r3
10049f92:	881b      	ldrh	r3, [r3, #0]
10049f94:	9300      	str	r3, [sp, #0]
10049f96:	000b      	movs	r3, r1
10049f98:	2200      	movs	r2, #0
10049f9a:	21ff      	movs	r1, #255	@ 0xff
10049f9c:	f7ff fd14 	bl	100499c8 <ReadNextRecordNoLock>
10049fa0:	0003      	movs	r3, r0
10049fa2:	7023      	strb	r3, [r4, #0]
      read_state->record_length = record_size;
10049fa4:	2216      	movs	r2, #22
10049fa6:	18bb      	adds	r3, r7, r2
10049fa8:	881a      	ldrh	r2, [r3, #0]
10049faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10049fac:	809a      	strh	r2, [r3, #4]

      if(status != NVMDB_STATUS_OK)
10049fae:	19bb      	adds	r3, r7, r6
10049fb0:	781b      	ldrb	r3, [r3, #0]
10049fb2:	2b00      	cmp	r3, #0
10049fb4:	d006      	beq.n	10049fc4 <LoadDBToRAM+0xa6>
      {
        *num_read_bytes_p = index;
10049fb6:	683b      	ldr	r3, [r7, #0]
10049fb8:	197a      	adds	r2, r7, r5
10049fba:	8812      	ldrh	r2, [r2, #0]
10049fbc:	801a      	strh	r2, [r3, #0]
        return status;
10049fbe:	19bb      	adds	r3, r7, r6
10049fc0:	781b      	ldrb	r3, [r3, #0]
10049fc2:	e0a1      	b.n	1004a108 <LoadDBToRAM+0x1ea>
      }

      // Prepare the header and copy it to buffer
      header.length = record_size;
10049fc4:	2316      	movs	r3, #22
10049fc6:	18fb      	adds	r3, r7, r3
10049fc8:	881a      	ldrh	r2, [r3, #0]
10049fca:	2110      	movs	r1, #16
10049fcc:	187b      	adds	r3, r7, r1
10049fce:	805a      	strh	r2, [r3, #2]
      memcpy(buff + index, &header, RECORD_HEADER_SIZE);
10049fd0:	251e      	movs	r5, #30
10049fd2:	197b      	adds	r3, r7, r5
10049fd4:	881b      	ldrh	r3, [r3, #0]
10049fd6:	68ba      	ldr	r2, [r7, #8]
10049fd8:	18d3      	adds	r3, r2, r3
10049fda:	000c      	movs	r4, r1
10049fdc:	1879      	adds	r1, r7, r1
10049fde:	2204      	movs	r2, #4
10049fe0:	0018      	movs	r0, r3
10049fe2:	f01d fa23 	bl	1006742c <memcpy>
      index += ROUND4_R(header.length + RECORD_HEADER_SIZE);
10049fe6:	193b      	adds	r3, r7, r4
10049fe8:	885b      	ldrh	r3, [r3, #2]
10049fea:	3303      	adds	r3, #3
10049fec:	b29b      	uxth	r3, r3
10049fee:	b21b      	sxth	r3, r3
10049ff0:	2203      	movs	r2, #3
10049ff2:	4313      	orrs	r3, r2
10049ff4:	b21b      	sxth	r3, r3
10049ff6:	b29a      	uxth	r2, r3
10049ff8:	197b      	adds	r3, r7, r5
10049ffa:	881b      	ldrh	r3, [r3, #0]
10049ffc:	18d3      	adds	r3, r2, r3
10049ffe:	b29a      	uxth	r2, r3
1004a000:	197b      	adds	r3, r7, r5
1004a002:	3201      	adds	r2, #1
1004a004:	801a      	strh	r2, [r3, #0]
1004a006:	e031      	b.n	1004a06c <LoadDBToRAM+0x14e>
    }
    else
    {

      status = ReadCurrentRecordNoLock(handle_p, read_state->record_offset, buff + index, free_buffer_size, &record_size, read_state->record_length); // It will not read record in cache because this operation is not allowed if there are any.
1004a008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004a00a:	8859      	ldrh	r1, [r3, #2]
1004a00c:	231e      	movs	r3, #30
1004a00e:	18fb      	adds	r3, r7, r3
1004a010:	881b      	ldrh	r3, [r3, #0]
1004a012:	68ba      	ldr	r2, [r7, #8]
1004a014:	18d5      	adds	r5, r2, r3
1004a016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004a018:	889b      	ldrh	r3, [r3, #4]
1004a01a:	261b      	movs	r6, #27
1004a01c:	19bc      	adds	r4, r7, r6
1004a01e:	221c      	movs	r2, #28
1004a020:	18ba      	adds	r2, r7, r2
1004a022:	8812      	ldrh	r2, [r2, #0]
1004a024:	68f8      	ldr	r0, [r7, #12]
1004a026:	9301      	str	r3, [sp, #4]
1004a028:	2316      	movs	r3, #22
1004a02a:	18fb      	adds	r3, r7, r3
1004a02c:	9300      	str	r3, [sp, #0]
1004a02e:	0013      	movs	r3, r2
1004a030:	002a      	movs	r2, r5
1004a032:	f7ff fe20 	bl	10049c76 <ReadCurrentRecordNoLock>
1004a036:	0003      	movs	r3, r0
1004a038:	7023      	strb	r3, [r4, #0]

      if(status != NVMDB_STATUS_OK)
1004a03a:	19bb      	adds	r3, r7, r6
1004a03c:	781b      	ldrb	r3, [r3, #0]
1004a03e:	2b00      	cmp	r3, #0
1004a040:	d002      	beq.n	1004a048 <LoadDBToRAM+0x12a>
      {
        // This should not happen
        return status;
1004a042:	19bb      	adds	r3, r7, r6
1004a044:	781b      	ldrb	r3, [r3, #0]
1004a046:	e05f      	b.n	1004a108 <LoadDBToRAM+0x1ea>
      }
      index = ROUND4_R(record_size - read_state->record_offset);
1004a048:	2316      	movs	r3, #22
1004a04a:	18fb      	adds	r3, r7, r3
1004a04c:	881a      	ldrh	r2, [r3, #0]
1004a04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004a050:	885b      	ldrh	r3, [r3, #2]
1004a052:	1ad3      	subs	r3, r2, r3
1004a054:	b29b      	uxth	r3, r3
1004a056:	3b01      	subs	r3, #1
1004a058:	b29b      	uxth	r3, r3
1004a05a:	b21b      	sxth	r3, r3
1004a05c:	2203      	movs	r2, #3
1004a05e:	4313      	orrs	r3, r2
1004a060:	b21b      	sxth	r3, r3
1004a062:	b29a      	uxth	r2, r3
1004a064:	231e      	movs	r3, #30
1004a066:	18fb      	adds	r3, r7, r3
1004a068:	3201      	adds	r2, #1
1004a06a:	801a      	strh	r2, [r3, #0]
    }

    // The number of remaining bytes for the current record that were to be read before calling last NVMDB_ReadNextRecord().
    // Rounded to the next multiple of 4 to find out if buffer can now be written inside the page or not.
    remaining_record_bytes = ROUND4_R(record_size - read_state->record_offset);
1004a06c:	2316      	movs	r3, #22
1004a06e:	18fb      	adds	r3, r7, r3
1004a070:	881a      	ldrh	r2, [r3, #0]
1004a072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004a074:	885b      	ldrh	r3, [r3, #2]
1004a076:	1ad3      	subs	r3, r2, r3
1004a078:	b29b      	uxth	r3, r3
1004a07a:	3b01      	subs	r3, #1
1004a07c:	b29b      	uxth	r3, r3
1004a07e:	b21b      	sxth	r3, r3
1004a080:	2203      	movs	r2, #3
1004a082:	4313      	orrs	r3, r2
1004a084:	b21b      	sxth	r3, r3
1004a086:	b29a      	uxth	r2, r3
1004a088:	2118      	movs	r1, #24
1004a08a:	187b      	adds	r3, r7, r1
1004a08c:	3201      	adds	r2, #1
1004a08e:	801a      	strh	r2, [r3, #0]

    if(remaining_record_bytes > free_buffer_size)
1004a090:	187a      	adds	r2, r7, r1
1004a092:	211c      	movs	r1, #28
1004a094:	187b      	adds	r3, r7, r1
1004a096:	8812      	ldrh	r2, [r2, #0]
1004a098:	881b      	ldrh	r3, [r3, #0]
1004a09a:	429a      	cmp	r2, r3
1004a09c:	d910      	bls.n	1004a0c0 <LoadDBToRAM+0x1a2>
    {
      // Not able to read the entire record.
      read_state->move_to_next_record = FALSE;
1004a09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004a0a0:	2200      	movs	r2, #0
1004a0a2:	701a      	strb	r2, [r3, #0]
      read_state->record_offset += free_buffer_size;
1004a0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004a0a6:	885a      	ldrh	r2, [r3, #2]
1004a0a8:	187b      	adds	r3, r7, r1
1004a0aa:	881b      	ldrh	r3, [r3, #0]
1004a0ac:	18d3      	adds	r3, r2, r3
1004a0ae:	b29a      	uxth	r2, r3
1004a0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004a0b2:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
1004a0b4:	683b      	ldr	r3, [r7, #0]
1004a0b6:	1dba      	adds	r2, r7, #6
1004a0b8:	8812      	ldrh	r2, [r2, #0]
1004a0ba:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
1004a0bc:	2300      	movs	r3, #0
1004a0be:	e023      	b.n	1004a108 <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes == free_buffer_size)
1004a0c0:	2318      	movs	r3, #24
1004a0c2:	18fa      	adds	r2, r7, r3
1004a0c4:	231c      	movs	r3, #28
1004a0c6:	18fb      	adds	r3, r7, r3
1004a0c8:	8812      	ldrh	r2, [r2, #0]
1004a0ca:	881b      	ldrh	r3, [r3, #0]
1004a0cc:	429a      	cmp	r2, r3
1004a0ce:	d10b      	bne.n	1004a0e8 <LoadDBToRAM+0x1ca>
    {
      read_state->move_to_next_record = TRUE;
1004a0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004a0d2:	2201      	movs	r2, #1
1004a0d4:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
1004a0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004a0d8:	2200      	movs	r2, #0
1004a0da:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
1004a0dc:	683b      	ldr	r3, [r7, #0]
1004a0de:	1dba      	adds	r2, r7, #6
1004a0e0:	8812      	ldrh	r2, [r2, #0]
1004a0e2:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
1004a0e4:	2300      	movs	r3, #0
1004a0e6:	e00f      	b.n	1004a108 <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes < free_buffer_size)
1004a0e8:	2318      	movs	r3, #24
1004a0ea:	18fa      	adds	r2, r7, r3
1004a0ec:	231c      	movs	r3, #28
1004a0ee:	18fb      	adds	r3, r7, r3
1004a0f0:	8812      	ldrh	r2, [r2, #0]
1004a0f2:	881b      	ldrh	r3, [r3, #0]
1004a0f4:	429a      	cmp	r2, r3
1004a0f6:	d300      	bcc.n	1004a0fa <LoadDBToRAM+0x1dc>
1004a0f8:	e728      	b.n	10049f4c <LoadDBToRAM+0x2e>
    {
      read_state->move_to_next_record = TRUE;
1004a0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004a0fc:	2201      	movs	r2, #1
1004a0fe:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
1004a100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004a102:	2200      	movs	r2, #0
1004a104:	805a      	strh	r2, [r3, #2]
    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
1004a106:	e721      	b.n	10049f4c <LoadDBToRAM+0x2e>
    }
  }
}
1004a108:	0018      	movs	r0, r3
1004a10a:	46bd      	mov	sp, r7
1004a10c:	b009      	add	sp, #36	@ 0x24
1004a10e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004a110 <CleanLargeDB>:
// No inline to avoid allocating NVM_buffer multiple times at the same time.
__NOINLINE static NVMDB_status_t CleanLargeDB(NVMDB_IdType NVMDB_id)
{
1004a110:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a112:	4c60      	ldr	r4, [pc, #384]	@ (1004a294 <CleanLargeDB+0x184>)
1004a114:	44a5      	add	sp, r4
1004a116:	af02      	add	r7, sp, #8
1004a118:	0002      	movs	r2, r0
1004a11a:	4b5f      	ldr	r3, [pc, #380]	@ (1004a298 <CleanLargeDB+0x188>)
1004a11c:	2184      	movs	r1, #132	@ 0x84
1004a11e:	0109      	lsls	r1, r1, #4
1004a120:	185b      	adds	r3, r3, r1
1004a122:	19db      	adds	r3, r3, r7
1004a124:	701a      	strb	r2, [r3, #0]
  ReadStateType previous_state;
  int32_t needed_time;
  uint8_t clean_started = FALSE;
#endif

  if(!DBInfo[NVMDB_id].invalid_records)
1004a126:	4b5c      	ldr	r3, [pc, #368]	@ (1004a298 <CleanLargeDB+0x188>)
1004a128:	185b      	adds	r3, r3, r1
1004a12a:	19db      	adds	r3, r3, r7
1004a12c:	781a      	ldrb	r2, [r3, #0]
1004a12e:	495b      	ldr	r1, [pc, #364]	@ (1004a29c <CleanLargeDB+0x18c>)
1004a130:	0013      	movs	r3, r2
1004a132:	009b      	lsls	r3, r3, #2
1004a134:	189b      	adds	r3, r3, r2
1004a136:	009b      	lsls	r3, r3, #2
1004a138:	18cb      	adds	r3, r1, r3
1004a13a:	330a      	adds	r3, #10
1004a13c:	881b      	ldrh	r3, [r3, #0]
1004a13e:	2b00      	cmp	r3, #0
1004a140:	d101      	bne.n	1004a146 <CleanLargeDB+0x36>
  {
    return NVMDB_STATUS_OK;
1004a142:	2300      	movs	r3, #0
1004a144:	e0a0      	b.n	1004a288 <CleanLargeDB+0x178>
  {
    return NVMDB_STATUS_CACHE_FULL;
  }
#endif

  status = NVMDB_HandleInit(NVMDB_id, &handle);
1004a146:	4b56      	ldr	r3, [pc, #344]	@ (1004a2a0 <CleanLargeDB+0x190>)
1004a148:	18fc      	adds	r4, r7, r3
1004a14a:	4d56      	ldr	r5, [pc, #344]	@ (1004a2a4 <CleanLargeDB+0x194>)
1004a14c:	197a      	adds	r2, r7, r5
1004a14e:	4b52      	ldr	r3, [pc, #328]	@ (1004a298 <CleanLargeDB+0x188>)
1004a150:	2184      	movs	r1, #132	@ 0x84
1004a152:	0109      	lsls	r1, r1, #4
1004a154:	185b      	adds	r3, r3, r1
1004a156:	19db      	adds	r3, r3, r7
1004a158:	781b      	ldrb	r3, [r3, #0]
1004a15a:	0011      	movs	r1, r2
1004a15c:	0018      	movs	r0, r3
1004a15e:	f000 fcd3 	bl	1004ab08 <NVMDB_HandleInit>
1004a162:	0003      	movs	r3, r0
1004a164:	7023      	strb	r3, [r4, #0]
  flash_write_address = (uint32_t)handle.address;
1004a166:	197b      	adds	r3, r7, r5
1004a168:	685b      	ldr	r3, [r3, #4]
1004a16a:	4a4f      	ldr	r2, [pc, #316]	@ (1004a2a8 <CleanLargeDB+0x198>)
1004a16c:	18ba      	adds	r2, r7, r2
1004a16e:	6013      	str	r3, [r2, #0]

  InitReadState(&state);
1004a170:	4b4e      	ldr	r3, [pc, #312]	@ (1004a2ac <CleanLargeDB+0x19c>)
1004a172:	18fb      	adds	r3, r7, r3
1004a174:	0018      	movs	r0, r3
1004a176:	f7ff fec1 	bl	10049efc <InitReadState>
#if NVM_CACHE
    previous_state = state;
    previous_handle = handle;
#endif

    status = LoadDBToRAM(&handle, NVM_buffer, sizeof(NVM_buffer), &num_read_bytes, &state);
1004a17a:	4e49      	ldr	r6, [pc, #292]	@ (1004a2a0 <CleanLargeDB+0x190>)
1004a17c:	19bc      	adds	r4, r7, r6
1004a17e:	4b4c      	ldr	r3, [pc, #304]	@ (1004a2b0 <CleanLargeDB+0x1a0>)
1004a180:	18fd      	adds	r5, r7, r3
1004a182:	2380      	movs	r3, #128	@ 0x80
1004a184:	011a      	lsls	r2, r3, #4
1004a186:	230c      	movs	r3, #12
1004a188:	18f9      	adds	r1, r7, r3
1004a18a:	4b46      	ldr	r3, [pc, #280]	@ (1004a2a4 <CleanLargeDB+0x194>)
1004a18c:	18f8      	adds	r0, r7, r3
1004a18e:	4b47      	ldr	r3, [pc, #284]	@ (1004a2ac <CleanLargeDB+0x19c>)
1004a190:	18fb      	adds	r3, r7, r3
1004a192:	9300      	str	r3, [sp, #0]
1004a194:	002b      	movs	r3, r5
1004a196:	f7ff fec2 	bl	10049f1e <LoadDBToRAM>
1004a19a:	0003      	movs	r3, r0
1004a19c:	7023      	strb	r3, [r4, #0]
    if(status != NVMDB_STATUS_END_OF_DB && status != NVMDB_STATUS_OK) // No other error codes are expected. This should not happen.
1004a19e:	19bb      	adds	r3, r7, r6
1004a1a0:	781b      	ldrb	r3, [r3, #0]
1004a1a2:	2b04      	cmp	r3, #4
1004a1a4:	d006      	beq.n	1004a1b4 <CleanLargeDB+0xa4>
1004a1a6:	19bb      	adds	r3, r7, r6
1004a1a8:	781b      	ldrb	r3, [r3, #0]
1004a1aa:	2b00      	cmp	r3, #0
1004a1ac:	d002      	beq.n	1004a1b4 <CleanLargeDB+0xa4>
    {
      return status;
1004a1ae:	19bb      	adds	r3, r7, r6
1004a1b0:	781b      	ldrb	r3, [r3, #0]
1004a1b2:	e069      	b.n	1004a288 <CleanLargeDB+0x178>
    }

    if(num_read_bytes == sizeof(NVM_buffer) || status != NVMDB_STATUS_OK)
1004a1b4:	4b3e      	ldr	r3, [pc, #248]	@ (1004a2b0 <CleanLargeDB+0x1a0>)
1004a1b6:	18fb      	adds	r3, r7, r3
1004a1b8:	881a      	ldrh	r2, [r3, #0]
1004a1ba:	2380      	movs	r3, #128	@ 0x80
1004a1bc:	011b      	lsls	r3, r3, #4
1004a1be:	429a      	cmp	r2, r3
1004a1c0:	d004      	beq.n	1004a1cc <CleanLargeDB+0xbc>
1004a1c2:	4b37      	ldr	r3, [pc, #220]	@ (1004a2a0 <CleanLargeDB+0x190>)
1004a1c4:	18fb      	adds	r3, r7, r3
1004a1c6:	781b      	ldrb	r3, [r3, #0]
1004a1c8:	2b00      	cmp	r3, #0
1004a1ca:	d0d6      	beq.n	1004a17a <CleanLargeDB+0x6a>
    {
      if(num_read_bytes == 0)
1004a1cc:	4a38      	ldr	r2, [pc, #224]	@ (1004a2b0 <CleanLargeDB+0x1a0>)
1004a1ce:	18bb      	adds	r3, r7, r2
1004a1d0:	881b      	ldrh	r3, [r3, #0]
1004a1d2:	2b00      	cmp	r3, #0
1004a1d4:	d019      	beq.n	1004a20a <CleanLargeDB+0xfa>
        }
      }
#endif

      // Write buffer to flash
      WriteBufferToFlash(flash_write_address, (uint32_t *)NVM_buffer, num_read_bytes);
1004a1d6:	18bb      	adds	r3, r7, r2
1004a1d8:	881b      	ldrh	r3, [r3, #0]
1004a1da:	001a      	movs	r2, r3
1004a1dc:	230c      	movs	r3, #12
1004a1de:	18f9      	adds	r1, r7, r3
1004a1e0:	4c31      	ldr	r4, [pc, #196]	@ (1004a2a8 <CleanLargeDB+0x198>)
1004a1e2:	193b      	adds	r3, r7, r4
1004a1e4:	681b      	ldr	r3, [r3, #0]
1004a1e6:	0018      	movs	r0, r3
1004a1e8:	f7ff fe48 	bl	10049e7c <WriteBufferToFlash>
#if NVM_CACHE
      ATOMIC_SECTION_END();

      clean_started = TRUE;
#endif
      flash_write_address += sizeof(NVM_buffer);
1004a1ec:	0022      	movs	r2, r4
1004a1ee:	18bb      	adds	r3, r7, r2
1004a1f0:	681b      	ldr	r3, [r3, #0]
1004a1f2:	2180      	movs	r1, #128	@ 0x80
1004a1f4:	0109      	lsls	r1, r1, #4
1004a1f6:	468c      	mov	ip, r1
1004a1f8:	4463      	add	r3, ip
1004a1fa:	18ba      	adds	r2, r7, r2
1004a1fc:	6013      	str	r3, [r2, #0]
      if(status != NVMDB_STATUS_OK)
1004a1fe:	4b28      	ldr	r3, [pc, #160]	@ (1004a2a0 <CleanLargeDB+0x190>)
1004a200:	18fb      	adds	r3, r7, r3
1004a202:	781b      	ldrb	r3, [r3, #0]
1004a204:	2b00      	cmp	r3, #0
1004a206:	d102      	bne.n	1004a20e <CleanLargeDB+0xfe>
  {
1004a208:	e7b7      	b.n	1004a17a <CleanLargeDB+0x6a>
        break;
1004a20a:	46c0      	nop			@ (mov r8, r8)
1004a20c:	e000      	b.n	1004a210 <CleanLargeDB+0x100>
      {
        break;
1004a20e:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
  // Erase remaining pages. A possible optimization could be to erase the page only if it is not already erased.
  uint8_t num_pages = (ROUNDPAGE_R(handle.end_address) - flash_write_address) / PAGE_SIZE;
1004a210:	4b24      	ldr	r3, [pc, #144]	@ (1004a2a4 <CleanLargeDB+0x194>)
1004a212:	18fb      	adds	r3, r7, r3
1004a214:	689b      	ldr	r3, [r3, #8]
1004a216:	3b01      	subs	r3, #1
1004a218:	4a26      	ldr	r2, [pc, #152]	@ (1004a2b4 <CleanLargeDB+0x1a4>)
1004a21a:	431a      	orrs	r2, r3
1004a21c:	4922      	ldr	r1, [pc, #136]	@ (1004a2a8 <CleanLargeDB+0x198>)
1004a21e:	187b      	adds	r3, r7, r1
1004a220:	681b      	ldr	r3, [r3, #0]
1004a222:	1ad3      	subs	r3, r2, r3
1004a224:	3301      	adds	r3, #1
1004a226:	0ada      	lsrs	r2, r3, #11
1004a228:	4823      	ldr	r0, [pc, #140]	@ (1004a2b8 <CleanLargeDB+0x1a8>)
1004a22a:	183b      	adds	r3, r7, r0
1004a22c:	701a      	strb	r2, [r3, #0]
  uint8_t page_num_start = (flash_write_address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
1004a22e:	187b      	adds	r3, r7, r1
1004a230:	681b      	ldr	r3, [r3, #0]
1004a232:	4a22      	ldr	r2, [pc, #136]	@ (1004a2bc <CleanLargeDB+0x1ac>)
1004a234:	4694      	mov	ip, r2
1004a236:	4463      	add	r3, ip
1004a238:	0ada      	lsrs	r2, r3, #11
1004a23a:	4c21      	ldr	r4, [pc, #132]	@ (1004a2c0 <CleanLargeDB+0x1b0>)
1004a23c:	193b      	adds	r3, r7, r4
1004a23e:	701a      	strb	r2, [r3, #0]
  if(EraseWithTimeCheck(&page_num_start, &num_pages) == NVMDB_STATUS_NOT_ENOUGH_TIME)
  {
    return SchedulePageEraseOperation(NVMDB_id, page_num_start, num_pages);
  }
#else
  NVMDB_FLASH_ERASE_PAGE(page_num_start, num_pages);
1004a240:	2181      	movs	r1, #129	@ 0x81
1004a242:	0109      	lsls	r1, r1, #4
1004a244:	187b      	adds	r3, r7, r1
1004a246:	2200      	movs	r2, #0
1004a248:	601a      	str	r2, [r3, #0]
1004a24a:	193b      	adds	r3, r7, r4
1004a24c:	781a      	ldrb	r2, [r3, #0]
1004a24e:	187b      	adds	r3, r7, r1
1004a250:	605a      	str	r2, [r3, #4]
1004a252:	183b      	adds	r3, r7, r0
1004a254:	781a      	ldrb	r2, [r3, #0]
1004a256:	187b      	adds	r3, r7, r1
1004a258:	609a      	str	r2, [r3, #8]
1004a25a:	4b1a      	ldr	r3, [pc, #104]	@ (1004a2c4 <CleanLargeDB+0x1b4>)
1004a25c:	18fa      	adds	r2, r7, r3
1004a25e:	187b      	adds	r3, r7, r1
1004a260:	0011      	movs	r1, r2
1004a262:	0018      	movs	r0, r3
1004a264:	f002 fe7c 	bl	1004cf60 <HAL_FLASHEx_Erase>
#endif

  // Update free space.
  return NVMDB_get_info(&DBInfo[NVMDB_id]);
1004a268:	4b0b      	ldr	r3, [pc, #44]	@ (1004a298 <CleanLargeDB+0x188>)
1004a26a:	2284      	movs	r2, #132	@ 0x84
1004a26c:	0112      	lsls	r2, r2, #4
1004a26e:	189b      	adds	r3, r3, r2
1004a270:	19db      	adds	r3, r3, r7
1004a272:	781a      	ldrb	r2, [r3, #0]
1004a274:	0013      	movs	r3, r2
1004a276:	009b      	lsls	r3, r3, #2
1004a278:	189b      	adds	r3, r3, r2
1004a27a:	009b      	lsls	r3, r3, #2
1004a27c:	4a07      	ldr	r2, [pc, #28]	@ (1004a29c <CleanLargeDB+0x18c>)
1004a27e:	189b      	adds	r3, r3, r2
1004a280:	0018      	movs	r0, r3
1004a282:	f7ff fad5 	bl	10049830 <NVMDB_get_info>
1004a286:	0003      	movs	r3, r0
}
1004a288:	0018      	movs	r0, r3
1004a28a:	46bd      	mov	sp, r7
1004a28c:	4b0e      	ldr	r3, [pc, #56]	@ (1004a2c8 <CleanLargeDB+0x1b8>)
1004a28e:	449d      	add	sp, r3
1004a290:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004a292:	46c0      	nop			@ (mov r8, r8)
1004a294:	fffff7b4 	.word	0xfffff7b4
1004a298:	fffff7c7 	.word	0xfffff7c7
1004a29c:	20000dec 	.word	0x20000dec
1004a2a0:	0000083b 	.word	0x0000083b
1004a2a4:	00000824 	.word	0x00000824
1004a2a8:	0000083c 	.word	0x0000083c
1004a2ac:	0000081c 	.word	0x0000081c
1004a2b0:	00000836 	.word	0x00000836
1004a2b4:	000007ff 	.word	0x000007ff
1004a2b8:	0000083a 	.word	0x0000083a
1004a2bc:	effc0000 	.word	0xeffc0000
1004a2c0:	00000839 	.word	0x00000839
1004a2c4:	0000080c 	.word	0x0000080c
1004a2c8:	00000844 	.word	0x00000844

1004a2cc <CleanPage>:
  return NVMDB_get_info(&DBInfo[op->handle.id]);
}
#endif

__NOINLINE static NVMDB_status_t CleanPage(const NVMDB_SmallDBContainerType *smallDBContainer_p)
{
1004a2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a2ce:	4c7a      	ldr	r4, [pc, #488]	@ (1004a4b8 <CleanPage+0x1ec>)
1004a2d0:	44a5      	add	sp, r4
1004a2d2:	af02      	add	r7, sp, #8
1004a2d4:	6078      	str	r0, [r7, #4]
  NVMDB_status_t status;
  NVMDB_status_t ret = NVMDB_STATUS_OK;
1004a2d6:	4b79      	ldr	r3, [pc, #484]	@ (1004a4bc <CleanPage+0x1f0>)
1004a2d8:	18fb      	adds	r3, r7, r3
1004a2da:	2200      	movs	r2, #0
1004a2dc:	701a      	strb	r2, [r3, #0]
  NVMDB_HandleType handle;
  uint32_t page_offset;
  uint16_t num_bytes;
  ReadStateType state;
  int i;
  uint8_t found = FALSE;
1004a2de:	4b78      	ldr	r3, [pc, #480]	@ (1004a4c0 <CleanPage+0x1f4>)
1004a2e0:	18fb      	adds	r3, r7, r3
1004a2e2:	2200      	movs	r2, #0
1004a2e4:	701a      	strb	r2, [r3, #0]
#if !NVMDB_STATIC_BUFF
  uint8_t NVM_buffer[PAGE_SIZE];
#endif

  /* Check if there are invalids record in the page and if there are pending operations on the databases. */
  for(i = 0; i < smallDBContainer_p->num_db; i++)
1004a2e6:	2300      	movs	r3, #0
1004a2e8:	4a76      	ldr	r2, [pc, #472]	@ (1004a4c4 <CleanPage+0x1f8>)
1004a2ea:	18ba      	adds	r2, r7, r2
1004a2ec:	6013      	str	r3, [r2, #0]
1004a2ee:	e023      	b.n	1004a338 <CleanPage+0x6c>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
1004a2f0:	687b      	ldr	r3, [r7, #4]
1004a2f2:	6899      	ldr	r1, [r3, #8]
1004a2f4:	4b73      	ldr	r3, [pc, #460]	@ (1004a4c4 <CleanPage+0x1f8>)
1004a2f6:	18fb      	adds	r3, r7, r3
1004a2f8:	681a      	ldr	r2, [r3, #0]
1004a2fa:	0013      	movs	r3, r2
1004a2fc:	005b      	lsls	r3, r3, #1
1004a2fe:	189b      	adds	r3, r3, r2
1004a300:	009b      	lsls	r3, r3, #2
1004a302:	18ca      	adds	r2, r1, r3
1004a304:	4970      	ldr	r1, [pc, #448]	@ (1004a4c8 <CleanPage+0x1fc>)
1004a306:	187b      	adds	r3, r7, r1
1004a308:	7812      	ldrb	r2, [r2, #0]
1004a30a:	701a      	strb	r2, [r3, #0]
    if(DBInfo[NVMDB_id].invalid_records)
1004a30c:	187b      	adds	r3, r7, r1
1004a30e:	781a      	ldrb	r2, [r3, #0]
1004a310:	496e      	ldr	r1, [pc, #440]	@ (1004a4cc <CleanPage+0x200>)
1004a312:	0013      	movs	r3, r2
1004a314:	009b      	lsls	r3, r3, #2
1004a316:	189b      	adds	r3, r3, r2
1004a318:	009b      	lsls	r3, r3, #2
1004a31a:	18cb      	adds	r3, r1, r3
1004a31c:	330a      	adds	r3, #10
1004a31e:	881b      	ldrh	r3, [r3, #0]
1004a320:	2b00      	cmp	r3, #0
1004a322:	d003      	beq.n	1004a32c <CleanPage+0x60>
    {
      found = TRUE;
1004a324:	4b66      	ldr	r3, [pc, #408]	@ (1004a4c0 <CleanPage+0x1f4>)
1004a326:	18fb      	adds	r3, r7, r3
1004a328:	2201      	movs	r2, #1
1004a32a:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
1004a32c:	4a65      	ldr	r2, [pc, #404]	@ (1004a4c4 <CleanPage+0x1f8>)
1004a32e:	18bb      	adds	r3, r7, r2
1004a330:	681b      	ldr	r3, [r3, #0]
1004a332:	3301      	adds	r3, #1
1004a334:	18ba      	adds	r2, r7, r2
1004a336:	6013      	str	r3, [r2, #0]
1004a338:	687b      	ldr	r3, [r7, #4]
1004a33a:	791b      	ldrb	r3, [r3, #4]
1004a33c:	001a      	movs	r2, r3
1004a33e:	4b61      	ldr	r3, [pc, #388]	@ (1004a4c4 <CleanPage+0x1f8>)
1004a340:	18fb      	adds	r3, r7, r3
1004a342:	681b      	ldr	r3, [r3, #0]
1004a344:	4293      	cmp	r3, r2
1004a346:	dbd3      	blt.n	1004a2f0 <CleanPage+0x24>
    {
      return NVMDB_STATUS_CACHE_OP_PENDING;
    }
#endif
  }
  if(!found)
1004a348:	4b5d      	ldr	r3, [pc, #372]	@ (1004a4c0 <CleanPage+0x1f4>)
1004a34a:	18fb      	adds	r3, r7, r3
1004a34c:	781b      	ldrb	r3, [r3, #0]
1004a34e:	2b00      	cmp	r3, #0
1004a350:	d101      	bne.n	1004a356 <CleanPage+0x8a>
  {
    /* No invalid records found. */
    return NVMDB_STATUS_OK;
1004a352:	2300      	movs	r3, #0
1004a354:	e0ab      	b.n	1004a4ae <CleanPage+0x1e2>
  }

  memset(NVM_buffer, 0xFF, sizeof(NVM_buffer));
1004a356:	2380      	movs	r3, #128	@ 0x80
1004a358:	011a      	lsls	r2, r3, #4
1004a35a:	2308      	movs	r3, #8
1004a35c:	18fb      	adds	r3, r7, r3
1004a35e:	21ff      	movs	r1, #255	@ 0xff
1004a360:	0018      	movs	r0, r3
1004a362:	f01c fffb 	bl	1006735c <memset>

  for(i = 0; i < smallDBContainer_p->num_db; i++)
1004a366:	2300      	movs	r3, #0
1004a368:	4a56      	ldr	r2, [pc, #344]	@ (1004a4c4 <CleanPage+0x1f8>)
1004a36a:	18ba      	adds	r2, r7, r2
1004a36c:	6013      	str	r3, [r2, #0]
1004a36e:	e051      	b.n	1004a414 <CleanPage+0x148>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
1004a370:	687b      	ldr	r3, [r7, #4]
1004a372:	6899      	ldr	r1, [r3, #8]
1004a374:	4853      	ldr	r0, [pc, #332]	@ (1004a4c4 <CleanPage+0x1f8>)
1004a376:	183b      	adds	r3, r7, r0
1004a378:	681a      	ldr	r2, [r3, #0]
1004a37a:	0013      	movs	r3, r2
1004a37c:	005b      	lsls	r3, r3, #1
1004a37e:	189b      	adds	r3, r3, r2
1004a380:	009b      	lsls	r3, r3, #2
1004a382:	18ca      	adds	r2, r1, r3
1004a384:	4d50      	ldr	r5, [pc, #320]	@ (1004a4c8 <CleanPage+0x1fc>)
1004a386:	197b      	adds	r3, r7, r5
1004a388:	7812      	ldrb	r2, [r2, #0]
1004a38a:	701a      	strb	r2, [r3, #0]
    page_offset = smallDBContainer_p->dbs[i].offset;
1004a38c:	687b      	ldr	r3, [r7, #4]
1004a38e:	6899      	ldr	r1, [r3, #8]
1004a390:	183b      	adds	r3, r7, r0
1004a392:	681a      	ldr	r2, [r3, #0]
1004a394:	0013      	movs	r3, r2
1004a396:	005b      	lsls	r3, r3, #1
1004a398:	189b      	adds	r3, r3, r2
1004a39a:	009b      	lsls	r3, r3, #2
1004a39c:	18cb      	adds	r3, r1, r3
1004a39e:	685b      	ldr	r3, [r3, #4]
1004a3a0:	2282      	movs	r2, #130	@ 0x82
1004a3a2:	0112      	lsls	r2, r2, #4
1004a3a4:	18ba      	adds	r2, r7, r2
1004a3a6:	6013      	str	r3, [r2, #0]

    status = NVMDB_HandleInit(NVMDB_id, &handle);
1004a3a8:	4e49      	ldr	r6, [pc, #292]	@ (1004a4d0 <CleanPage+0x204>)
1004a3aa:	19bc      	adds	r4, r7, r6
1004a3ac:	2381      	movs	r3, #129	@ 0x81
1004a3ae:	011b      	lsls	r3, r3, #4
1004a3b0:	18fa      	adds	r2, r7, r3
1004a3b2:	197b      	adds	r3, r7, r5
1004a3b4:	781b      	ldrb	r3, [r3, #0]
1004a3b6:	0011      	movs	r1, r2
1004a3b8:	0018      	movs	r0, r3
1004a3ba:	f000 fba5 	bl	1004ab08 <NVMDB_HandleInit>
1004a3be:	0003      	movs	r3, r0
1004a3c0:	7023      	strb	r3, [r4, #0]
    if(status) // This should not happen
1004a3c2:	19bb      	adds	r3, r7, r6
1004a3c4:	781b      	ldrb	r3, [r3, #0]
1004a3c6:	2b00      	cmp	r3, #0
1004a3c8:	d001      	beq.n	1004a3ce <CleanPage+0x102>
    {
      return NVMDB_STATUS_OK;
1004a3ca:	2300      	movs	r3, #0
1004a3cc:	e06f      	b.n	1004a4ae <CleanPage+0x1e2>
    }

    InitReadState(&state);
1004a3ce:	4d41      	ldr	r5, [pc, #260]	@ (1004a4d4 <CleanPage+0x208>)
1004a3d0:	197b      	adds	r3, r7, r5
1004a3d2:	0018      	movs	r0, r3
1004a3d4:	f7ff fd92 	bl	10049efc <InitReadState>
    // It cannot happen that the database does not fill inside the buffer. So we call LoadDBToRAM() just once for each db.
    LoadDBToRAM(&handle, NVM_buffer + page_offset, sizeof(NVM_buffer) - page_offset, &num_bytes, &state);
1004a3d8:	2308      	movs	r3, #8
1004a3da:	18fa      	adds	r2, r7, r3
1004a3dc:	2082      	movs	r0, #130	@ 0x82
1004a3de:	0100      	lsls	r0, r0, #4
1004a3e0:	183b      	adds	r3, r7, r0
1004a3e2:	681b      	ldr	r3, [r3, #0]
1004a3e4:	18d1      	adds	r1, r2, r3
1004a3e6:	183b      	adds	r3, r7, r0
1004a3e8:	681b      	ldr	r3, [r3, #0]
1004a3ea:	b29b      	uxth	r3, r3
1004a3ec:	2280      	movs	r2, #128	@ 0x80
1004a3ee:	0112      	lsls	r2, r2, #4
1004a3f0:	1ad3      	subs	r3, r2, r3
1004a3f2:	b29a      	uxth	r2, r3
1004a3f4:	4b38      	ldr	r3, [pc, #224]	@ (1004a4d8 <CleanPage+0x20c>)
1004a3f6:	18fc      	adds	r4, r7, r3
1004a3f8:	2381      	movs	r3, #129	@ 0x81
1004a3fa:	011b      	lsls	r3, r3, #4
1004a3fc:	18f8      	adds	r0, r7, r3
1004a3fe:	197b      	adds	r3, r7, r5
1004a400:	9300      	str	r3, [sp, #0]
1004a402:	0023      	movs	r3, r4
1004a404:	f7ff fd8b 	bl	10049f1e <LoadDBToRAM>
  for(i = 0; i < smallDBContainer_p->num_db; i++)
1004a408:	4a2e      	ldr	r2, [pc, #184]	@ (1004a4c4 <CleanPage+0x1f8>)
1004a40a:	18bb      	adds	r3, r7, r2
1004a40c:	681b      	ldr	r3, [r3, #0]
1004a40e:	3301      	adds	r3, #1
1004a410:	18ba      	adds	r2, r7, r2
1004a412:	6013      	str	r3, [r2, #0]
1004a414:	687b      	ldr	r3, [r7, #4]
1004a416:	791b      	ldrb	r3, [r3, #4]
1004a418:	001a      	movs	r2, r3
1004a41a:	4c2a      	ldr	r4, [pc, #168]	@ (1004a4c4 <CleanPage+0x1f8>)
1004a41c:	193b      	adds	r3, r7, r4
1004a41e:	681b      	ldr	r3, [r3, #0]
1004a420:	4293      	cmp	r3, r2
1004a422:	dba5      	blt.n	1004a370 <CleanPage+0xa4>
    ATOMIC_SECTION_END();
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif

  WriteBufferToFlash(smallDBContainer_p->page_address, (uint32_t *)NVM_buffer, sizeof(NVM_buffer));
1004a424:	687b      	ldr	r3, [r7, #4]
1004a426:	681b      	ldr	r3, [r3, #0]
1004a428:	2280      	movs	r2, #128	@ 0x80
1004a42a:	0112      	lsls	r2, r2, #4
1004a42c:	2108      	movs	r1, #8
1004a42e:	1879      	adds	r1, r7, r1
1004a430:	0018      	movs	r0, r3
1004a432:	f7ff fd23 	bl	10049e7c <WriteBufferToFlash>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  for(i = 0; i < smallDBContainer_p->num_db; i++)
1004a436:	2300      	movs	r3, #0
1004a438:	193a      	adds	r2, r7, r4
1004a43a:	6013      	str	r3, [r2, #0]
1004a43c:	e02c      	b.n	1004a498 <CleanPage+0x1cc>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
1004a43e:	687b      	ldr	r3, [r7, #4]
1004a440:	6899      	ldr	r1, [r3, #8]
1004a442:	4b20      	ldr	r3, [pc, #128]	@ (1004a4c4 <CleanPage+0x1f8>)
1004a444:	18fb      	adds	r3, r7, r3
1004a446:	681a      	ldr	r2, [r3, #0]
1004a448:	0013      	movs	r3, r2
1004a44a:	005b      	lsls	r3, r3, #1
1004a44c:	189b      	adds	r3, r3, r2
1004a44e:	009b      	lsls	r3, r3, #2
1004a450:	18ca      	adds	r2, r1, r3
1004a452:	491d      	ldr	r1, [pc, #116]	@ (1004a4c8 <CleanPage+0x1fc>)
1004a454:	187b      	adds	r3, r7, r1
1004a456:	7812      	ldrb	r2, [r2, #0]
1004a458:	701a      	strb	r2, [r3, #0]
    // Update free space.
    status = NVMDB_get_info(&DBInfo[NVMDB_id]);
1004a45a:	187b      	adds	r3, r7, r1
1004a45c:	781a      	ldrb	r2, [r3, #0]
1004a45e:	0013      	movs	r3, r2
1004a460:	009b      	lsls	r3, r3, #2
1004a462:	189b      	adds	r3, r3, r2
1004a464:	009b      	lsls	r3, r3, #2
1004a466:	4a19      	ldr	r2, [pc, #100]	@ (1004a4cc <CleanPage+0x200>)
1004a468:	189b      	adds	r3, r3, r2
1004a46a:	4d19      	ldr	r5, [pc, #100]	@ (1004a4d0 <CleanPage+0x204>)
1004a46c:	197c      	adds	r4, r7, r5
1004a46e:	0018      	movs	r0, r3
1004a470:	f7ff f9de 	bl	10049830 <NVMDB_get_info>
1004a474:	0003      	movs	r3, r0
1004a476:	7023      	strb	r3, [r4, #0]
    if(status)
1004a478:	002a      	movs	r2, r5
1004a47a:	18bb      	adds	r3, r7, r2
1004a47c:	781b      	ldrb	r3, [r3, #0]
1004a47e:	2b00      	cmp	r3, #0
1004a480:	d004      	beq.n	1004a48c <CleanPage+0x1c0>
    {
      ret = status; // Return last error if any.
1004a482:	4b0e      	ldr	r3, [pc, #56]	@ (1004a4bc <CleanPage+0x1f0>)
1004a484:	18fb      	adds	r3, r7, r3
1004a486:	18ba      	adds	r2, r7, r2
1004a488:	7812      	ldrb	r2, [r2, #0]
1004a48a:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
1004a48c:	4a0d      	ldr	r2, [pc, #52]	@ (1004a4c4 <CleanPage+0x1f8>)
1004a48e:	18bb      	adds	r3, r7, r2
1004a490:	681b      	ldr	r3, [r3, #0]
1004a492:	3301      	adds	r3, #1
1004a494:	18ba      	adds	r2, r7, r2
1004a496:	6013      	str	r3, [r2, #0]
1004a498:	687b      	ldr	r3, [r7, #4]
1004a49a:	791b      	ldrb	r3, [r3, #4]
1004a49c:	001a      	movs	r2, r3
1004a49e:	4b09      	ldr	r3, [pc, #36]	@ (1004a4c4 <CleanPage+0x1f8>)
1004a4a0:	18fb      	adds	r3, r7, r3
1004a4a2:	681b      	ldr	r3, [r3, #0]
1004a4a4:	4293      	cmp	r3, r2
1004a4a6:	dbca      	blt.n	1004a43e <CleanPage+0x172>
    }
  }

  return ret;
1004a4a8:	4b04      	ldr	r3, [pc, #16]	@ (1004a4bc <CleanPage+0x1f0>)
1004a4aa:	18fb      	adds	r3, r7, r3
1004a4ac:	781b      	ldrb	r3, [r3, #0]
}
1004a4ae:	0018      	movs	r0, r3
1004a4b0:	46bd      	mov	sp, r7
1004a4b2:	4b0a      	ldr	r3, [pc, #40]	@ (1004a4dc <CleanPage+0x210>)
1004a4b4:	449d      	add	sp, r3
1004a4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004a4b8:	fffff7c4 	.word	0xfffff7c4
1004a4bc:	0000082f 	.word	0x0000082f
1004a4c0:	00000827 	.word	0x00000827
1004a4c4:	00000828 	.word	0x00000828
1004a4c8:	00000826 	.word	0x00000826
1004a4cc:	20000dec 	.word	0x20000dec
1004a4d0:	00000825 	.word	0x00000825
1004a4d4:	00000808 	.word	0x00000808
1004a4d8:	0000080e 	.word	0x0000080e
1004a4dc:	00000834 	.word	0x00000834

1004a4e0 <GetDBType>:

static uint8_t GetDBType(NVMDB_IdType NVMDB_id, const NVMDB_SmallDBContainerType **smallDBContainer)
{
1004a4e0:	b590      	push	{r4, r7, lr}
1004a4e2:	b087      	sub	sp, #28
1004a4e4:	af00      	add	r7, sp, #0
1004a4e6:	0002      	movs	r2, r0
1004a4e8:	6039      	str	r1, [r7, #0]
1004a4ea:	1dfb      	adds	r3, r7, #7
1004a4ec:	701a      	strb	r2, [r3, #0]
  uint8_t id;

  /* Check if it is a large DB. */

  for(int i = 0; i < NUM_LARGE_DBS; i++)
1004a4ee:	2300      	movs	r3, #0
1004a4f0:	617b      	str	r3, [r7, #20]
1004a4f2:	e016      	b.n	1004a522 <GetDBType+0x42>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
1004a4f4:	240b      	movs	r4, #11
1004a4f6:	1939      	adds	r1, r7, r4
1004a4f8:	482e      	ldr	r0, [pc, #184]	@ (1004a5b4 <GetDBType+0xd4>)
1004a4fa:	697a      	ldr	r2, [r7, #20]
1004a4fc:	0013      	movs	r3, r2
1004a4fe:	005b      	lsls	r3, r3, #1
1004a500:	189b      	adds	r3, r3, r2
1004a502:	009b      	lsls	r3, r3, #2
1004a504:	18c3      	adds	r3, r0, r3
1004a506:	3306      	adds	r3, #6
1004a508:	781b      	ldrb	r3, [r3, #0]
1004a50a:	700b      	strb	r3, [r1, #0]

    if(id == NVMDB_id)
1004a50c:	193a      	adds	r2, r7, r4
1004a50e:	1dfb      	adds	r3, r7, #7
1004a510:	7812      	ldrb	r2, [r2, #0]
1004a512:	781b      	ldrb	r3, [r3, #0]
1004a514:	429a      	cmp	r2, r3
1004a516:	d101      	bne.n	1004a51c <GetDBType+0x3c>
    {
      return LARGE_DB;
1004a518:	2302      	movs	r3, #2
1004a51a:	e046      	b.n	1004a5aa <GetDBType+0xca>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
1004a51c:	697b      	ldr	r3, [r7, #20]
1004a51e:	3301      	adds	r3, #1
1004a520:	617b      	str	r3, [r7, #20]
1004a522:	697b      	ldr	r3, [r7, #20]
1004a524:	2b01      	cmp	r3, #1
1004a526:	dde5      	ble.n	1004a4f4 <GetDBType+0x14>
    }
  }

  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
1004a528:	2300      	movs	r3, #0
1004a52a:	613b      	str	r3, [r7, #16]
1004a52c:	e039      	b.n	1004a5a2 <GetDBType+0xc2>
  {

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
1004a52e:	2300      	movs	r3, #0
1004a530:	60fb      	str	r3, [r7, #12]
1004a532:	e026      	b.n	1004a582 <GetDBType+0xa2>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
1004a534:	4920      	ldr	r1, [pc, #128]	@ (1004a5b8 <GetDBType+0xd8>)
1004a536:	693a      	ldr	r2, [r7, #16]
1004a538:	0013      	movs	r3, r2
1004a53a:	005b      	lsls	r3, r3, #1
1004a53c:	189b      	adds	r3, r3, r2
1004a53e:	009b      	lsls	r3, r3, #2
1004a540:	18cb      	adds	r3, r1, r3
1004a542:	3308      	adds	r3, #8
1004a544:	6819      	ldr	r1, [r3, #0]
1004a546:	68fa      	ldr	r2, [r7, #12]
1004a548:	0013      	movs	r3, r2
1004a54a:	005b      	lsls	r3, r3, #1
1004a54c:	189b      	adds	r3, r3, r2
1004a54e:	009b      	lsls	r3, r3, #2
1004a550:	18ca      	adds	r2, r1, r3
1004a552:	210b      	movs	r1, #11
1004a554:	187b      	adds	r3, r7, r1
1004a556:	7812      	ldrb	r2, [r2, #0]
1004a558:	701a      	strb	r2, [r3, #0]

      if(id == NVMDB_id)
1004a55a:	187a      	adds	r2, r7, r1
1004a55c:	1dfb      	adds	r3, r7, #7
1004a55e:	7812      	ldrb	r2, [r2, #0]
1004a560:	781b      	ldrb	r3, [r3, #0]
1004a562:	429a      	cmp	r2, r3
1004a564:	d10a      	bne.n	1004a57c <GetDBType+0x9c>
      {
        // DB found inside this small db container.
        *smallDBContainer = &NVM_SMALL_DB_STATIC_INFO[i];
1004a566:	693a      	ldr	r2, [r7, #16]
1004a568:	0013      	movs	r3, r2
1004a56a:	005b      	lsls	r3, r3, #1
1004a56c:	189b      	adds	r3, r3, r2
1004a56e:	009b      	lsls	r3, r3, #2
1004a570:	4a11      	ldr	r2, [pc, #68]	@ (1004a5b8 <GetDBType+0xd8>)
1004a572:	189a      	adds	r2, r3, r2
1004a574:	683b      	ldr	r3, [r7, #0]
1004a576:	601a      	str	r2, [r3, #0]
        return SMALL_DB;
1004a578:	2301      	movs	r3, #1
1004a57a:	e016      	b.n	1004a5aa <GetDBType+0xca>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
1004a57c:	68fb      	ldr	r3, [r7, #12]
1004a57e:	3301      	adds	r3, #1
1004a580:	60fb      	str	r3, [r7, #12]
1004a582:	490d      	ldr	r1, [pc, #52]	@ (1004a5b8 <GetDBType+0xd8>)
1004a584:	693a      	ldr	r2, [r7, #16]
1004a586:	0013      	movs	r3, r2
1004a588:	005b      	lsls	r3, r3, #1
1004a58a:	189b      	adds	r3, r3, r2
1004a58c:	009b      	lsls	r3, r3, #2
1004a58e:	18cb      	adds	r3, r1, r3
1004a590:	3304      	adds	r3, #4
1004a592:	781b      	ldrb	r3, [r3, #0]
1004a594:	001a      	movs	r2, r3
1004a596:	68fb      	ldr	r3, [r7, #12]
1004a598:	4293      	cmp	r3, r2
1004a59a:	dbcb      	blt.n	1004a534 <GetDBType+0x54>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
1004a59c:	693b      	ldr	r3, [r7, #16]
1004a59e:	3301      	adds	r3, #1
1004a5a0:	613b      	str	r3, [r7, #16]
1004a5a2:	693b      	ldr	r3, [r7, #16]
1004a5a4:	2b00      	cmp	r3, #0
1004a5a6:	dbc2      	blt.n	1004a52e <GetDBType+0x4e>
      }
    }
  }

  return 0;
1004a5a8:	2300      	movs	r3, #0
}
1004a5aa:	0018      	movs	r0, r3
1004a5ac:	46bd      	mov	sp, r7
1004a5ae:	b007      	add	sp, #28
1004a5b0:	bd90      	pop	{r4, r7, pc}
1004a5b2:	46c0      	nop			@ (mov r8, r8)
1004a5b4:	10069d0c 	.word	0x10069d0c
1004a5b8:	20000e18 	.word	0x20000e18

1004a5bc <EraseSmallDB>:
}

#endif

__NOINLINE static NVMDB_status_t EraseSmallDB(NVMDB_IdType NVMDB_id, const NVMDB_SmallDBContainerType *smallDBContainer_p)
{
1004a5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a5be:	4c3d      	ldr	r4, [pc, #244]	@ (1004a6b4 <EraseSmallDB+0xf8>)
1004a5c0:	44a5      	add	sp, r4
1004a5c2:	af02      	add	r7, sp, #8
1004a5c4:	0002      	movs	r2, r0
1004a5c6:	6039      	str	r1, [r7, #0]
1004a5c8:	4b3b      	ldr	r3, [pc, #236]	@ (1004a6b8 <EraseSmallDB+0xfc>)
1004a5ca:	2183      	movs	r1, #131	@ 0x83
1004a5cc:	0109      	lsls	r1, r1, #4
1004a5ce:	185b      	adds	r3, r3, r1
1004a5d0:	19db      	adds	r3, r3, r7
1004a5d2:	701a      	strb	r2, [r3, #0]
#endif
#if !NVMDB_STATIC_BUFF
  uint8_t NVM_buffer[PAGE_SIZE];
#endif

  memset(NVM_buffer, 0xFF, sizeof(NVM_buffer));
1004a5d4:	2380      	movs	r3, #128	@ 0x80
1004a5d6:	011a      	lsls	r2, r3, #4
1004a5d8:	2324      	movs	r3, #36	@ 0x24
1004a5da:	18fb      	adds	r3, r7, r3
1004a5dc:	21ff      	movs	r1, #255	@ 0xff
1004a5de:	0018      	movs	r0, r3
1004a5e0:	f01c febc 	bl	1006735c <memset>

  // Search other databases in the same page
  for(int i = 0; i < smallDBContainer_p->num_db; i++)
1004a5e4:	2300      	movs	r3, #0
1004a5e6:	4a35      	ldr	r2, [pc, #212]	@ (1004a6bc <EraseSmallDB+0x100>)
1004a5e8:	18ba      	adds	r2, r7, r2
1004a5ea:	6013      	str	r3, [r2, #0]
1004a5ec:	e04b      	b.n	1004a686 <EraseSmallDB+0xca>
  {
    NVMDB_HandleType handle;
    uint16_t num_read_bytes;
    ReadStateType state;
    NVMDB_IdType id = smallDBContainer_p->dbs[i].id;
1004a5ee:	683b      	ldr	r3, [r7, #0]
1004a5f0:	6899      	ldr	r1, [r3, #8]
1004a5f2:	4c32      	ldr	r4, [pc, #200]	@ (1004a6bc <EraseSmallDB+0x100>)
1004a5f4:	193b      	adds	r3, r7, r4
1004a5f6:	681a      	ldr	r2, [r3, #0]
1004a5f8:	0013      	movs	r3, r2
1004a5fa:	005b      	lsls	r3, r3, #1
1004a5fc:	189b      	adds	r3, r3, r2
1004a5fe:	009b      	lsls	r3, r3, #2
1004a600:	18ca      	adds	r2, r1, r3
1004a602:	492f      	ldr	r1, [pc, #188]	@ (1004a6c0 <EraseSmallDB+0x104>)
1004a604:	187b      	adds	r3, r7, r1
1004a606:	7812      	ldrb	r2, [r2, #0]
1004a608:	701a      	strb	r2, [r3, #0]
    if(id != NVMDB_id)
1004a60a:	187a      	adds	r2, r7, r1
1004a60c:	4b2a      	ldr	r3, [pc, #168]	@ (1004a6b8 <EraseSmallDB+0xfc>)
1004a60e:	2083      	movs	r0, #131	@ 0x83
1004a610:	0100      	lsls	r0, r0, #4
1004a612:	181b      	adds	r3, r3, r0
1004a614:	19db      	adds	r3, r3, r7
1004a616:	7812      	ldrb	r2, [r2, #0]
1004a618:	781b      	ldrb	r3, [r3, #0]
1004a61a:	429a      	cmp	r2, r3
1004a61c:	d02d      	beq.n	1004a67a <EraseSmallDB+0xbe>
    {
      // This is not the db to be erased. Save it.
      NVMDB_HandleInit(id, &handle);
1004a61e:	2514      	movs	r5, #20
1004a620:	197a      	adds	r2, r7, r5
1004a622:	187b      	adds	r3, r7, r1
1004a624:	781b      	ldrb	r3, [r3, #0]
1004a626:	0011      	movs	r1, r2
1004a628:	0018      	movs	r0, r3
1004a62a:	f000 fa6d 	bl	1004ab08 <NVMDB_HandleInit>
      uint32_t offset = smallDBContainer_p->dbs[i].offset;
1004a62e:	683b      	ldr	r3, [r7, #0]
1004a630:	6899      	ldr	r1, [r3, #8]
1004a632:	193b      	adds	r3, r7, r4
1004a634:	681a      	ldr	r2, [r3, #0]
1004a636:	0013      	movs	r3, r2
1004a638:	005b      	lsls	r3, r3, #1
1004a63a:	189b      	adds	r3, r3, r2
1004a63c:	009b      	lsls	r3, r3, #2
1004a63e:	18cb      	adds	r3, r1, r3
1004a640:	685b      	ldr	r3, [r3, #4]
1004a642:	4c20      	ldr	r4, [pc, #128]	@ (1004a6c4 <EraseSmallDB+0x108>)
1004a644:	193a      	adds	r2, r7, r4
1004a646:	6013      	str	r3, [r2, #0]
      InitReadState(&state);
1004a648:	260c      	movs	r6, #12
1004a64a:	19bb      	adds	r3, r7, r6
1004a64c:	0018      	movs	r0, r3
1004a64e:	f7ff fc55 	bl	10049efc <InitReadState>
      LoadDBToRAM(&handle, NVM_buffer + offset, sizeof(NVM_buffer) - offset, &num_read_bytes, &state);
1004a652:	2324      	movs	r3, #36	@ 0x24
1004a654:	18fa      	adds	r2, r7, r3
1004a656:	193b      	adds	r3, r7, r4
1004a658:	681b      	ldr	r3, [r3, #0]
1004a65a:	18d1      	adds	r1, r2, r3
1004a65c:	193b      	adds	r3, r7, r4
1004a65e:	681b      	ldr	r3, [r3, #0]
1004a660:	b29b      	uxth	r3, r3
1004a662:	2280      	movs	r2, #128	@ 0x80
1004a664:	0112      	lsls	r2, r2, #4
1004a666:	1ad3      	subs	r3, r2, r3
1004a668:	b29a      	uxth	r2, r3
1004a66a:	2312      	movs	r3, #18
1004a66c:	18fc      	adds	r4, r7, r3
1004a66e:	1978      	adds	r0, r7, r5
1004a670:	19bb      	adds	r3, r7, r6
1004a672:	9300      	str	r3, [sp, #0]
1004a674:	0023      	movs	r3, r4
1004a676:	f7ff fc52 	bl	10049f1e <LoadDBToRAM>
  for(int i = 0; i < smallDBContainer_p->num_db; i++)
1004a67a:	4a10      	ldr	r2, [pc, #64]	@ (1004a6bc <EraseSmallDB+0x100>)
1004a67c:	18bb      	adds	r3, r7, r2
1004a67e:	681b      	ldr	r3, [r3, #0]
1004a680:	3301      	adds	r3, #1
1004a682:	18ba      	adds	r2, r7, r2
1004a684:	6013      	str	r3, [r2, #0]
1004a686:	683b      	ldr	r3, [r7, #0]
1004a688:	791b      	ldrb	r3, [r3, #4]
1004a68a:	001a      	movs	r2, r3
1004a68c:	4b0b      	ldr	r3, [pc, #44]	@ (1004a6bc <EraseSmallDB+0x100>)
1004a68e:	18fb      	adds	r3, r7, r3
1004a690:	681b      	ldr	r3, [r3, #0]
1004a692:	4293      	cmp	r3, r2
1004a694:	dbab      	blt.n	1004a5ee <EraseSmallDB+0x32>
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif

  // Write buffer to flash
  WriteBufferToFlash(smallDBContainer_p->page_address, (uint32_t *)NVM_buffer, sizeof(NVM_buffer));
1004a696:	683b      	ldr	r3, [r7, #0]
1004a698:	681b      	ldr	r3, [r3, #0]
1004a69a:	2280      	movs	r2, #128	@ 0x80
1004a69c:	0112      	lsls	r2, r2, #4
1004a69e:	2124      	movs	r1, #36	@ 0x24
1004a6a0:	1879      	adds	r1, r7, r1
1004a6a2:	0018      	movs	r0, r3
1004a6a4:	f7ff fbea 	bl	10049e7c <WriteBufferToFlash>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
1004a6a8:	2300      	movs	r3, #0
}
1004a6aa:	0018      	movs	r0, r3
1004a6ac:	46bd      	mov	sp, r7
1004a6ae:	4b06      	ldr	r3, [pc, #24]	@ (1004a6c8 <EraseSmallDB+0x10c>)
1004a6b0:	449d      	add	sp, r3
1004a6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004a6b4:	fffff7c4 	.word	0xfffff7c4
1004a6b8:	fffff7d7 	.word	0xfffff7d7
1004a6bc:	0000082c 	.word	0x0000082c
1004a6c0:	0000082b 	.word	0x0000082b
1004a6c4:	00000824 	.word	0x00000824
1004a6c8:	00000834 	.word	0x00000834

1004a6cc <NVMDB_AppendRecordNoCache>:

static NVMDB_status_t NVMDB_AppendRecordNoCache(NVMDB_HandleType *handle_p, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
1004a6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a6ce:	b089      	sub	sp, #36	@ 0x24
1004a6d0:	af02      	add	r7, sp, #8
1004a6d2:	60f8      	str	r0, [r7, #12]
1004a6d4:	0008      	movs	r0, r1
1004a6d6:	0011      	movs	r1, r2
1004a6d8:	607b      	str	r3, [r7, #4]
1004a6da:	230b      	movs	r3, #11
1004a6dc:	18fb      	adds	r3, r7, r3
1004a6de:	1c02      	adds	r2, r0, #0
1004a6e0:	701a      	strb	r2, [r3, #0]
1004a6e2:	2008      	movs	r0, #8
1004a6e4:	183b      	adds	r3, r7, r0
1004a6e6:	1c0a      	adds	r2, r1, #0
1004a6e8:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordType *record_p;
  NVMDB_RecordSizeType available_size;
  NVMDB_status_t status;

  data1_length = ROUND4_R(data1_length);
1004a6ea:	0001      	movs	r1, r0
1004a6ec:	187b      	adds	r3, r7, r1
1004a6ee:	881b      	ldrh	r3, [r3, #0]
1004a6f0:	3b01      	subs	r3, #1
1004a6f2:	b29b      	uxth	r3, r3
1004a6f4:	b21b      	sxth	r3, r3
1004a6f6:	2203      	movs	r2, #3
1004a6f8:	4313      	orrs	r3, r2
1004a6fa:	b21b      	sxth	r3, r3
1004a6fc:	b29a      	uxth	r2, r3
1004a6fe:	187b      	adds	r3, r7, r1
1004a700:	3201      	adds	r2, #1
1004a702:	801a      	strh	r2, [r3, #0]
  /* Search for first available entry. */

  while(1)
  {

    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
1004a704:	68fb      	ldr	r3, [r7, #12]
1004a706:	685b      	ldr	r3, [r3, #4]
1004a708:	1d5a      	adds	r2, r3, #5
1004a70a:	68fb      	ldr	r3, [r7, #12]
1004a70c:	689b      	ldr	r3, [r3, #8]
1004a70e:	429a      	cmp	r2, r3
1004a710:	d310      	bcc.n	1004a734 <NVMDB_AppendRecordNoCache+0x68>
    {
      /* End of DB reached. This should not happen since the free space has been checked before.
         Should we remove this code or keep it to be safer?  */
      if(DBInfo[handle_p->id].invalid_records)
1004a712:	68fb      	ldr	r3, [r7, #12]
1004a714:	781b      	ldrb	r3, [r3, #0]
1004a716:	0019      	movs	r1, r3
1004a718:	4a4a      	ldr	r2, [pc, #296]	@ (1004a844 <NVMDB_AppendRecordNoCache+0x178>)
1004a71a:	000b      	movs	r3, r1
1004a71c:	009b      	lsls	r3, r3, #2
1004a71e:	185b      	adds	r3, r3, r1
1004a720:	009b      	lsls	r3, r3, #2
1004a722:	18d3      	adds	r3, r2, r3
1004a724:	330a      	adds	r3, #10
1004a726:	881b      	ldrh	r3, [r3, #0]
1004a728:	2b00      	cmp	r3, #0
1004a72a:	d001      	beq.n	1004a730 <NVMDB_AppendRecordNoCache+0x64>
      {
        return NVMDB_STATUS_CLEAN_NEEDED;
1004a72c:	230b      	movs	r3, #11
1004a72e:	e084      	b.n	1004a83a <NVMDB_AppendRecordNoCache+0x16e>
      }
      return NVMDB_STATUS_FULL_DB;
1004a730:	2302      	movs	r3, #2
1004a732:	e082      	b.n	1004a83a <NVMDB_AppendRecordNoCache+0x16e>
    }

    record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004a734:	68fb      	ldr	r3, [r7, #12]
1004a736:	685b      	ldr	r3, [r3, #4]
1004a738:	617b      	str	r3, [r7, #20]

    if(record_p->header.valid_flag == NO_RECORD)
1004a73a:	697b      	ldr	r3, [r7, #20]
1004a73c:	781b      	ldrb	r3, [r3, #0]
1004a73e:	2bff      	cmp	r3, #255	@ 0xff
1004a740:	d11c      	bne.n	1004a77c <NVMDB_AppendRecordNoCache+0xb0>
    {
      available_size = MIN(handle_p->end_address - handle_p->address, MAX_RECORD_SIZE);
1004a742:	68fb      	ldr	r3, [r7, #12]
1004a744:	689a      	ldr	r2, [r3, #8]
1004a746:	68fb      	ldr	r3, [r7, #12]
1004a748:	685b      	ldr	r3, [r3, #4]
1004a74a:	1ad3      	subs	r3, r2, r3
1004a74c:	2280      	movs	r2, #128	@ 0x80
1004a74e:	0252      	lsls	r2, r2, #9
1004a750:	4293      	cmp	r3, r2
1004a752:	d300      	bcc.n	1004a756 <NVMDB_AppendRecordNoCache+0x8a>
1004a754:	4b3c      	ldr	r3, [pc, #240]	@ (1004a848 <NVMDB_AppendRecordNoCache+0x17c>)
1004a756:	2112      	movs	r1, #18
1004a758:	187a      	adds	r2, r7, r1
1004a75a:	8013      	strh	r3, [r2, #0]
      break;
1004a75c:	46c0      	nop			@ (mov r8, r8)
    }

    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
  }

  if(available_size < data1_length + data2_length + RECORD_HEADER_SIZE)
1004a75e:	2308      	movs	r3, #8
1004a760:	0018      	movs	r0, r3
1004a762:	18fb      	adds	r3, r7, r3
1004a764:	881a      	ldrh	r2, [r3, #0]
1004a766:	2328      	movs	r3, #40	@ 0x28
1004a768:	181b      	adds	r3, r3, r0
1004a76a:	19db      	adds	r3, r3, r7
1004a76c:	881b      	ldrh	r3, [r3, #0]
1004a76e:	18d3      	adds	r3, r2, r3
1004a770:	1cda      	adds	r2, r3, #3
1004a772:	187b      	adds	r3, r7, r1
1004a774:	881b      	ldrh	r3, [r3, #0]
1004a776:	429a      	cmp	r2, r3
1004a778:	db27      	blt.n	1004a7ca <NVMDB_AppendRecordNoCache+0xfe>
1004a77a:	e015      	b.n	1004a7a8 <NVMDB_AppendRecordNoCache+0xdc>
    else if(record_p->header.valid_flag != VALID_RECORD && record_p->header.valid_flag != INVALID_RECORD)
1004a77c:	697b      	ldr	r3, [r7, #20]
1004a77e:	781b      	ldrb	r3, [r3, #0]
1004a780:	2bfe      	cmp	r3, #254	@ 0xfe
1004a782:	d005      	beq.n	1004a790 <NVMDB_AppendRecordNoCache+0xc4>
1004a784:	697b      	ldr	r3, [r7, #20]
1004a786:	781b      	ldrb	r3, [r3, #0]
1004a788:	2b00      	cmp	r3, #0
1004a78a:	d001      	beq.n	1004a790 <NVMDB_AppendRecordNoCache+0xc4>
      return NVMDB_STATUS_CORRUPTED_DB;
1004a78c:	2303      	movs	r3, #3
1004a78e:	e054      	b.n	1004a83a <NVMDB_AppendRecordNoCache+0x16e>
    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
1004a790:	68fb      	ldr	r3, [r7, #12]
1004a792:	685b      	ldr	r3, [r3, #4]
1004a794:	697a      	ldr	r2, [r7, #20]
1004a796:	8852      	ldrh	r2, [r2, #2]
1004a798:	3203      	adds	r2, #3
1004a79a:	2103      	movs	r1, #3
1004a79c:	430a      	orrs	r2, r1
1004a79e:	189b      	adds	r3, r3, r2
1004a7a0:	1c5a      	adds	r2, r3, #1
1004a7a2:	68fb      	ldr	r3, [r7, #12]
1004a7a4:	605a      	str	r2, [r3, #4]
    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
1004a7a6:	e7ad      	b.n	1004a704 <NVMDB_AppendRecordNoCache+0x38>
  {
    /* End of DB reached. This should not happen since the free space has been checked before.
       Should we remove this code or keep it to be safer?  */
    if(DBInfo[handle_p->id].invalid_records)
1004a7a8:	68fb      	ldr	r3, [r7, #12]
1004a7aa:	781b      	ldrb	r3, [r3, #0]
1004a7ac:	0019      	movs	r1, r3
1004a7ae:	4a25      	ldr	r2, [pc, #148]	@ (1004a844 <NVMDB_AppendRecordNoCache+0x178>)
1004a7b0:	000b      	movs	r3, r1
1004a7b2:	009b      	lsls	r3, r3, #2
1004a7b4:	185b      	adds	r3, r3, r1
1004a7b6:	009b      	lsls	r3, r3, #2
1004a7b8:	18d3      	adds	r3, r2, r3
1004a7ba:	330a      	adds	r3, #10
1004a7bc:	881b      	ldrh	r3, [r3, #0]
1004a7be:	2b00      	cmp	r3, #0
1004a7c0:	d001      	beq.n	1004a7c6 <NVMDB_AppendRecordNoCache+0xfa>
    {
      return NVMDB_STATUS_CLEAN_NEEDED;
1004a7c2:	230b      	movs	r3, #11
1004a7c4:	e039      	b.n	1004a83a <NVMDB_AppendRecordNoCache+0x16e>
    }
    return NVMDB_STATUS_FULL_DB;
1004a7c6:	2302      	movs	r3, #2
1004a7c8:	e037      	b.n	1004a83a <NVMDB_AppendRecordNoCache+0x16e>
  }

  status = WriteRecord(handle_p->address, record_id, data1_length, data1, data2_length, data2);
1004a7ca:	68fb      	ldr	r3, [r7, #12]
1004a7cc:	6858      	ldr	r0, [r3, #4]
1004a7ce:	2611      	movs	r6, #17
1004a7d0:	19bc      	adds	r4, r7, r6
1004a7d2:	687d      	ldr	r5, [r7, #4]
1004a7d4:	2308      	movs	r3, #8
1004a7d6:	001a      	movs	r2, r3
1004a7d8:	18fb      	adds	r3, r7, r3
1004a7da:	881b      	ldrh	r3, [r3, #0]
1004a7dc:	469c      	mov	ip, r3
1004a7de:	230b      	movs	r3, #11
1004a7e0:	18fb      	adds	r3, r7, r3
1004a7e2:	7819      	ldrb	r1, [r3, #0]
1004a7e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004a7e6:	9301      	str	r3, [sp, #4]
1004a7e8:	2328      	movs	r3, #40	@ 0x28
1004a7ea:	189b      	adds	r3, r3, r2
1004a7ec:	19db      	adds	r3, r3, r7
1004a7ee:	881b      	ldrh	r3, [r3, #0]
1004a7f0:	9300      	str	r3, [sp, #0]
1004a7f2:	002b      	movs	r3, r5
1004a7f4:	4662      	mov	r2, ip
1004a7f6:	f7ff f99c 	bl	10049b32 <WriteRecord>
1004a7fa:	0003      	movs	r3, r0
1004a7fc:	7023      	strb	r3, [r4, #0]
  if(status)
1004a7fe:	19bb      	adds	r3, r7, r6
1004a800:	781b      	ldrb	r3, [r3, #0]
1004a802:	2b00      	cmp	r3, #0
1004a804:	d002      	beq.n	1004a80c <NVMDB_AppendRecordNoCache+0x140>
  {
    return status;
1004a806:	19bb      	adds	r3, r7, r6
1004a808:	781b      	ldrb	r3, [r3, #0]
1004a80a:	e016      	b.n	1004a83a <NVMDB_AppendRecordNoCache+0x16e>
  }

  DBInfo[handle_p->id].valid_records++;
1004a80c:	68fb      	ldr	r3, [r7, #12]
1004a80e:	781b      	ldrb	r3, [r3, #0]
1004a810:	001a      	movs	r2, r3
1004a812:	490c      	ldr	r1, [pc, #48]	@ (1004a844 <NVMDB_AppendRecordNoCache+0x178>)
1004a814:	0013      	movs	r3, r2
1004a816:	009b      	lsls	r3, r3, #2
1004a818:	189b      	adds	r3, r3, r2
1004a81a:	009b      	lsls	r3, r3, #2
1004a81c:	18cb      	adds	r3, r1, r3
1004a81e:	3308      	adds	r3, #8
1004a820:	881b      	ldrh	r3, [r3, #0]
1004a822:	3301      	adds	r3, #1
1004a824:	b298      	uxth	r0, r3
1004a826:	4907      	ldr	r1, [pc, #28]	@ (1004a844 <NVMDB_AppendRecordNoCache+0x178>)
1004a828:	0013      	movs	r3, r2
1004a82a:	009b      	lsls	r3, r3, #2
1004a82c:	189b      	adds	r3, r3, r2
1004a82e:	009b      	lsls	r3, r3, #2
1004a830:	18cb      	adds	r3, r1, r3
1004a832:	3308      	adds	r3, #8
1004a834:	1c02      	adds	r2, r0, #0
1004a836:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
1004a838:	2300      	movs	r3, #0
}
1004a83a:	0018      	movs	r0, r3
1004a83c:	46bd      	mov	sp, r7
1004a83e:	b007      	add	sp, #28
1004a840:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004a842:	46c0      	nop			@ (mov r8, r8)
1004a844:	20000dec 	.word	0x20000dec
1004a848:	0000ffff 	.word	0x0000ffff

1004a84c <NVMDB_Init>:
 *
 * @param  None
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_Init(void)
{
1004a84c:	b5b0      	push	{r4, r5, r7, lr}
1004a84e:	b088      	sub	sp, #32
1004a850:	af00      	add	r7, sp, #0
  uint32_t page_address, offset;
  uint16_t clean_threshold;
  uint8_t id;

  /* Parse small DBs. */
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
1004a852:	2300      	movs	r3, #0
1004a854:	61fb      	str	r3, [r7, #28]
1004a856:	e0cd      	b.n	1004a9f4 <NVMDB_Init+0x1a8>
  {

    page_address = NVM_SMALL_DB_STATIC_INFO[i].page_address;
1004a858:	49a8      	ldr	r1, [pc, #672]	@ (1004aafc <NVMDB_Init+0x2b0>)
1004a85a:	69fa      	ldr	r2, [r7, #28]
1004a85c:	0013      	movs	r3, r2
1004a85e:	005b      	lsls	r3, r3, #1
1004a860:	189b      	adds	r3, r3, r2
1004a862:	009b      	lsls	r3, r3, #2
1004a864:	585b      	ldr	r3, [r3, r1]
1004a866:	60fb      	str	r3, [r7, #12]

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
1004a868:	2300      	movs	r3, #0
1004a86a:	61bb      	str	r3, [r7, #24]
1004a86c:	e0b1      	b.n	1004a9d2 <NVMDB_Init+0x186>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
1004a86e:	49a3      	ldr	r1, [pc, #652]	@ (1004aafc <NVMDB_Init+0x2b0>)
1004a870:	69fa      	ldr	r2, [r7, #28]
1004a872:	0013      	movs	r3, r2
1004a874:	005b      	lsls	r3, r3, #1
1004a876:	189b      	adds	r3, r3, r2
1004a878:	009b      	lsls	r3, r3, #2
1004a87a:	18cb      	adds	r3, r1, r3
1004a87c:	3308      	adds	r3, #8
1004a87e:	6819      	ldr	r1, [r3, #0]
1004a880:	69ba      	ldr	r2, [r7, #24]
1004a882:	0013      	movs	r3, r2
1004a884:	005b      	lsls	r3, r3, #1
1004a886:	189b      	adds	r3, r3, r2
1004a888:	009b      	lsls	r3, r3, #2
1004a88a:	18ca      	adds	r2, r1, r3
1004a88c:	2013      	movs	r0, #19
1004a88e:	183b      	adds	r3, r7, r0
1004a890:	7812      	ldrb	r2, [r2, #0]
1004a892:	701a      	strb	r2, [r3, #0]
      offset = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].offset;
1004a894:	4999      	ldr	r1, [pc, #612]	@ (1004aafc <NVMDB_Init+0x2b0>)
1004a896:	69fa      	ldr	r2, [r7, #28]
1004a898:	0013      	movs	r3, r2
1004a89a:	005b      	lsls	r3, r3, #1
1004a89c:	189b      	adds	r3, r3, r2
1004a89e:	009b      	lsls	r3, r3, #2
1004a8a0:	18cb      	adds	r3, r1, r3
1004a8a2:	3308      	adds	r3, #8
1004a8a4:	6819      	ldr	r1, [r3, #0]
1004a8a6:	69ba      	ldr	r2, [r7, #24]
1004a8a8:	0013      	movs	r3, r2
1004a8aa:	005b      	lsls	r3, r3, #1
1004a8ac:	189b      	adds	r3, r3, r2
1004a8ae:	009b      	lsls	r3, r3, #2
1004a8b0:	18cb      	adds	r3, r1, r3
1004a8b2:	685b      	ldr	r3, [r3, #4]
1004a8b4:	60bb      	str	r3, [r7, #8]
#if AUTO_CLEAN
      clean_threshold = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].clean_threshold;
1004a8b6:	4991      	ldr	r1, [pc, #580]	@ (1004aafc <NVMDB_Init+0x2b0>)
1004a8b8:	69fa      	ldr	r2, [r7, #28]
1004a8ba:	0013      	movs	r3, r2
1004a8bc:	005b      	lsls	r3, r3, #1
1004a8be:	189b      	adds	r3, r3, r2
1004a8c0:	009b      	lsls	r3, r3, #2
1004a8c2:	18cb      	adds	r3, r1, r3
1004a8c4:	3308      	adds	r3, #8
1004a8c6:	6819      	ldr	r1, [r3, #0]
1004a8c8:	69ba      	ldr	r2, [r7, #24]
1004a8ca:	0013      	movs	r3, r2
1004a8cc:	005b      	lsls	r3, r3, #1
1004a8ce:	189b      	adds	r3, r3, r2
1004a8d0:	009b      	lsls	r3, r3, #2
1004a8d2:	18ca      	adds	r2, r1, r3
1004a8d4:	1dbb      	adds	r3, r7, #6
1004a8d6:	8912      	ldrh	r2, [r2, #8]
1004a8d8:	801a      	strh	r2, [r3, #0]
#endif
      if(DBInfo[id].start_address || id >= NUM_DB)
1004a8da:	183b      	adds	r3, r7, r0
1004a8dc:	781a      	ldrb	r2, [r3, #0]
1004a8de:	4988      	ldr	r1, [pc, #544]	@ (1004ab00 <NVMDB_Init+0x2b4>)
1004a8e0:	0013      	movs	r3, r2
1004a8e2:	009b      	lsls	r3, r3, #2
1004a8e4:	189b      	adds	r3, r3, r2
1004a8e6:	009b      	lsls	r3, r3, #2
1004a8e8:	585b      	ldr	r3, [r3, r1]
1004a8ea:	2b00      	cmp	r3, #0
1004a8ec:	d103      	bne.n	1004a8f6 <NVMDB_Init+0xaa>
1004a8ee:	183b      	adds	r3, r7, r0
1004a8f0:	781b      	ldrb	r3, [r3, #0]
1004a8f2:	2b01      	cmp	r3, #1
1004a8f4:	d901      	bls.n	1004a8fa <NVMDB_Init+0xae>
      {
        // ID already used.
        return NVMDB_STATUS_INVALID_ID;
1004a8f6:	2301      	movs	r3, #1
1004a8f8:	e0fc      	b.n	1004aaf4 <NVMDB_Init+0x2a8>
      }
      DBInfo[id].start_address = page_address + offset;
1004a8fa:	2413      	movs	r4, #19
1004a8fc:	193b      	adds	r3, r7, r4
1004a8fe:	781a      	ldrb	r2, [r3, #0]
1004a900:	68f9      	ldr	r1, [r7, #12]
1004a902:	68bb      	ldr	r3, [r7, #8]
1004a904:	18c8      	adds	r0, r1, r3
1004a906:	497e      	ldr	r1, [pc, #504]	@ (1004ab00 <NVMDB_Init+0x2b4>)
1004a908:	0013      	movs	r3, r2
1004a90a:	009b      	lsls	r3, r3, #2
1004a90c:	189b      	adds	r3, r3, r2
1004a90e:	009b      	lsls	r3, r3, #2
1004a910:	5058      	str	r0, [r3, r1]

      if(j == NVM_SMALL_DB_STATIC_INFO[i].num_db - 1)
1004a912:	497a      	ldr	r1, [pc, #488]	@ (1004aafc <NVMDB_Init+0x2b0>)
1004a914:	69fa      	ldr	r2, [r7, #28]
1004a916:	0013      	movs	r3, r2
1004a918:	005b      	lsls	r3, r3, #1
1004a91a:	189b      	adds	r3, r3, r2
1004a91c:	009b      	lsls	r3, r3, #2
1004a91e:	18cb      	adds	r3, r1, r3
1004a920:	3304      	adds	r3, #4
1004a922:	781b      	ldrb	r3, [r3, #0]
1004a924:	3b01      	subs	r3, #1
1004a926:	69ba      	ldr	r2, [r7, #24]
1004a928:	429a      	cmp	r2, r3
1004a92a:	d10e      	bne.n	1004a94a <NVMDB_Init+0xfe>
      {
        // If it is the last db of the page, end address is the last address of the page
        DBInfo[id].end_address = page_address + PAGE_SIZE;
1004a92c:	193b      	adds	r3, r7, r4
1004a92e:	781a      	ldrb	r2, [r3, #0]
1004a930:	68fb      	ldr	r3, [r7, #12]
1004a932:	2180      	movs	r1, #128	@ 0x80
1004a934:	0109      	lsls	r1, r1, #4
1004a936:	1859      	adds	r1, r3, r1
1004a938:	4871      	ldr	r0, [pc, #452]	@ (1004ab00 <NVMDB_Init+0x2b4>)
1004a93a:	0013      	movs	r3, r2
1004a93c:	009b      	lsls	r3, r3, #2
1004a93e:	189b      	adds	r3, r3, r2
1004a940:	009b      	lsls	r3, r3, #2
1004a942:	18c3      	adds	r3, r0, r3
1004a944:	3304      	adds	r3, #4
1004a946:	6019      	str	r1, [r3, #0]
1004a948:	e01d      	b.n	1004a986 <NVMDB_Init+0x13a>
      }
      else
      {
        // If it is not the last db of the page, end address is the start address of the next db
        DBInfo[id].end_address = page_address + NVM_SMALL_DB_STATIC_INFO[i].dbs[j + 1].offset;
1004a94a:	496c      	ldr	r1, [pc, #432]	@ (1004aafc <NVMDB_Init+0x2b0>)
1004a94c:	69fa      	ldr	r2, [r7, #28]
1004a94e:	0013      	movs	r3, r2
1004a950:	005b      	lsls	r3, r3, #1
1004a952:	189b      	adds	r3, r3, r2
1004a954:	009b      	lsls	r3, r3, #2
1004a956:	18cb      	adds	r3, r1, r3
1004a958:	3308      	adds	r3, #8
1004a95a:	6819      	ldr	r1, [r3, #0]
1004a95c:	69bb      	ldr	r3, [r7, #24]
1004a95e:	1c5a      	adds	r2, r3, #1
1004a960:	0013      	movs	r3, r2
1004a962:	005b      	lsls	r3, r3, #1
1004a964:	189b      	adds	r3, r3, r2
1004a966:	009b      	lsls	r3, r3, #2
1004a968:	18cb      	adds	r3, r1, r3
1004a96a:	6859      	ldr	r1, [r3, #4]
1004a96c:	2313      	movs	r3, #19
1004a96e:	18fb      	adds	r3, r7, r3
1004a970:	781a      	ldrb	r2, [r3, #0]
1004a972:	68fb      	ldr	r3, [r7, #12]
1004a974:	18c9      	adds	r1, r1, r3
1004a976:	4862      	ldr	r0, [pc, #392]	@ (1004ab00 <NVMDB_Init+0x2b4>)
1004a978:	0013      	movs	r3, r2
1004a97a:	009b      	lsls	r3, r3, #2
1004a97c:	189b      	adds	r3, r3, r2
1004a97e:	009b      	lsls	r3, r3, #2
1004a980:	18c3      	adds	r3, r0, r3
1004a982:	3304      	adds	r3, #4
1004a984:	6019      	str	r1, [r3, #0]
      }
      DBInfo[id].clean_threshold = clean_threshold;
1004a986:	2013      	movs	r0, #19
1004a988:	183b      	adds	r3, r7, r0
1004a98a:	781a      	ldrb	r2, [r3, #0]
1004a98c:	495c      	ldr	r1, [pc, #368]	@ (1004ab00 <NVMDB_Init+0x2b4>)
1004a98e:	0013      	movs	r3, r2
1004a990:	009b      	lsls	r3, r3, #2
1004a992:	189b      	adds	r3, r3, r2
1004a994:	009b      	lsls	r3, r3, #2
1004a996:	18cb      	adds	r3, r1, r3
1004a998:	3310      	adds	r3, #16
1004a99a:	1dba      	adds	r2, r7, #6
1004a99c:	8812      	ldrh	r2, [r2, #0]
1004a99e:	801a      	strh	r2, [r3, #0]

      status = NVMDB_get_info(&DBInfo[id]);
1004a9a0:	183b      	adds	r3, r7, r0
1004a9a2:	781a      	ldrb	r2, [r3, #0]
1004a9a4:	0013      	movs	r3, r2
1004a9a6:	009b      	lsls	r3, r3, #2
1004a9a8:	189b      	adds	r3, r3, r2
1004a9aa:	009b      	lsls	r3, r3, #2
1004a9ac:	4a54      	ldr	r2, [pc, #336]	@ (1004ab00 <NVMDB_Init+0x2b4>)
1004a9ae:	189b      	adds	r3, r3, r2
1004a9b0:	2512      	movs	r5, #18
1004a9b2:	197c      	adds	r4, r7, r5
1004a9b4:	0018      	movs	r0, r3
1004a9b6:	f7fe ff3b 	bl	10049830 <NVMDB_get_info>
1004a9ba:	0003      	movs	r3, r0
1004a9bc:	7023      	strb	r3, [r4, #0]
      if(status)
1004a9be:	197b      	adds	r3, r7, r5
1004a9c0:	781b      	ldrb	r3, [r3, #0]
1004a9c2:	2b00      	cmp	r3, #0
1004a9c4:	d002      	beq.n	1004a9cc <NVMDB_Init+0x180>
      {
        return status;
1004a9c6:	197b      	adds	r3, r7, r5
1004a9c8:	781b      	ldrb	r3, [r3, #0]
1004a9ca:	e093      	b.n	1004aaf4 <NVMDB_Init+0x2a8>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
1004a9cc:	69bb      	ldr	r3, [r7, #24]
1004a9ce:	3301      	adds	r3, #1
1004a9d0:	61bb      	str	r3, [r7, #24]
1004a9d2:	494a      	ldr	r1, [pc, #296]	@ (1004aafc <NVMDB_Init+0x2b0>)
1004a9d4:	69fa      	ldr	r2, [r7, #28]
1004a9d6:	0013      	movs	r3, r2
1004a9d8:	005b      	lsls	r3, r3, #1
1004a9da:	189b      	adds	r3, r3, r2
1004a9dc:	009b      	lsls	r3, r3, #2
1004a9de:	18cb      	adds	r3, r1, r3
1004a9e0:	3304      	adds	r3, #4
1004a9e2:	781b      	ldrb	r3, [r3, #0]
1004a9e4:	001a      	movs	r2, r3
1004a9e6:	69bb      	ldr	r3, [r7, #24]
1004a9e8:	4293      	cmp	r3, r2
1004a9ea:	da00      	bge.n	1004a9ee <NVMDB_Init+0x1a2>
1004a9ec:	e73f      	b.n	1004a86e <NVMDB_Init+0x22>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
1004a9ee:	69fb      	ldr	r3, [r7, #28]
1004a9f0:	3301      	adds	r3, #1
1004a9f2:	61fb      	str	r3, [r7, #28]
1004a9f4:	69fb      	ldr	r3, [r7, #28]
1004a9f6:	2b00      	cmp	r3, #0
1004a9f8:	da00      	bge.n	1004a9fc <NVMDB_Init+0x1b0>
1004a9fa:	e72d      	b.n	1004a858 <NVMDB_Init+0xc>
      }
    }
  }

  /* Parse large DBs. */
  for(int i = 0; i < NUM_LARGE_DBS; i++)
1004a9fc:	2300      	movs	r3, #0
1004a9fe:	617b      	str	r3, [r7, #20]
1004aa00:	e074      	b.n	1004aaec <NVMDB_Init+0x2a0>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
1004aa02:	2413      	movs	r4, #19
1004aa04:	1939      	adds	r1, r7, r4
1004aa06:	483f      	ldr	r0, [pc, #252]	@ (1004ab04 <NVMDB_Init+0x2b8>)
1004aa08:	697a      	ldr	r2, [r7, #20]
1004aa0a:	0013      	movs	r3, r2
1004aa0c:	005b      	lsls	r3, r3, #1
1004aa0e:	189b      	adds	r3, r3, r2
1004aa10:	009b      	lsls	r3, r3, #2
1004aa12:	18c3      	adds	r3, r0, r3
1004aa14:	3306      	adds	r3, #6
1004aa16:	781b      	ldrb	r3, [r3, #0]
1004aa18:	700b      	strb	r3, [r1, #0]

    if(DBInfo[id].start_address || id >= NUM_DB)
1004aa1a:	193b      	adds	r3, r7, r4
1004aa1c:	781a      	ldrb	r2, [r3, #0]
1004aa1e:	4938      	ldr	r1, [pc, #224]	@ (1004ab00 <NVMDB_Init+0x2b4>)
1004aa20:	0013      	movs	r3, r2
1004aa22:	009b      	lsls	r3, r3, #2
1004aa24:	189b      	adds	r3, r3, r2
1004aa26:	009b      	lsls	r3, r3, #2
1004aa28:	585b      	ldr	r3, [r3, r1]
1004aa2a:	2b00      	cmp	r3, #0
1004aa2c:	d103      	bne.n	1004aa36 <NVMDB_Init+0x1ea>
1004aa2e:	193b      	adds	r3, r7, r4
1004aa30:	781b      	ldrb	r3, [r3, #0]
1004aa32:	2b01      	cmp	r3, #1
1004aa34:	d901      	bls.n	1004aa3a <NVMDB_Init+0x1ee>
    {
      // ID already used.
      return NVMDB_STATUS_INVALID_ID;
1004aa36:	2301      	movs	r3, #1
1004aa38:	e05c      	b.n	1004aaf4 <NVMDB_Init+0x2a8>
    }

    DBInfo[id].start_address = NVM_LARGE_DB_STATIC_INFO[i].address;
1004aa3a:	2413      	movs	r4, #19
1004aa3c:	193b      	adds	r3, r7, r4
1004aa3e:	781a      	ldrb	r2, [r3, #0]
1004aa40:	4830      	ldr	r0, [pc, #192]	@ (1004ab04 <NVMDB_Init+0x2b8>)
1004aa42:	6979      	ldr	r1, [r7, #20]
1004aa44:	000b      	movs	r3, r1
1004aa46:	005b      	lsls	r3, r3, #1
1004aa48:	185b      	adds	r3, r3, r1
1004aa4a:	009b      	lsls	r3, r3, #2
1004aa4c:	5818      	ldr	r0, [r3, r0]
1004aa4e:	492c      	ldr	r1, [pc, #176]	@ (1004ab00 <NVMDB_Init+0x2b4>)
1004aa50:	0013      	movs	r3, r2
1004aa52:	009b      	lsls	r3, r3, #2
1004aa54:	189b      	adds	r3, r3, r2
1004aa56:	009b      	lsls	r3, r3, #2
1004aa58:	5058      	str	r0, [r3, r1]
    DBInfo[id].end_address = NVM_LARGE_DB_STATIC_INFO[i].address + NVM_LARGE_DB_STATIC_INFO[i].size;
1004aa5a:	492a      	ldr	r1, [pc, #168]	@ (1004ab04 <NVMDB_Init+0x2b8>)
1004aa5c:	697a      	ldr	r2, [r7, #20]
1004aa5e:	0013      	movs	r3, r2
1004aa60:	005b      	lsls	r3, r3, #1
1004aa62:	189b      	adds	r3, r3, r2
1004aa64:	009b      	lsls	r3, r3, #2
1004aa66:	5859      	ldr	r1, [r3, r1]
1004aa68:	4826      	ldr	r0, [pc, #152]	@ (1004ab04 <NVMDB_Init+0x2b8>)
1004aa6a:	697a      	ldr	r2, [r7, #20]
1004aa6c:	0013      	movs	r3, r2
1004aa6e:	005b      	lsls	r3, r3, #1
1004aa70:	189b      	adds	r3, r3, r2
1004aa72:	009b      	lsls	r3, r3, #2
1004aa74:	18c3      	adds	r3, r0, r3
1004aa76:	3304      	adds	r3, #4
1004aa78:	881b      	ldrh	r3, [r3, #0]
1004aa7a:	0018      	movs	r0, r3
1004aa7c:	193b      	adds	r3, r7, r4
1004aa7e:	781a      	ldrb	r2, [r3, #0]
1004aa80:	1809      	adds	r1, r1, r0
1004aa82:	481f      	ldr	r0, [pc, #124]	@ (1004ab00 <NVMDB_Init+0x2b4>)
1004aa84:	0013      	movs	r3, r2
1004aa86:	009b      	lsls	r3, r3, #2
1004aa88:	189b      	adds	r3, r3, r2
1004aa8a:	009b      	lsls	r3, r3, #2
1004aa8c:	18c3      	adds	r3, r0, r3
1004aa8e:	3304      	adds	r3, #4
1004aa90:	6019      	str	r1, [r3, #0]
#if AUTO_CLEAN
    DBInfo[id].clean_threshold = NVM_LARGE_DB_STATIC_INFO[i].clean_threshold;
1004aa92:	193b      	adds	r3, r7, r4
1004aa94:	781a      	ldrb	r2, [r3, #0]
1004aa96:	481b      	ldr	r0, [pc, #108]	@ (1004ab04 <NVMDB_Init+0x2b8>)
1004aa98:	6979      	ldr	r1, [r7, #20]
1004aa9a:	000b      	movs	r3, r1
1004aa9c:	005b      	lsls	r3, r3, #1
1004aa9e:	185b      	adds	r3, r3, r1
1004aaa0:	009b      	lsls	r3, r3, #2
1004aaa2:	18c3      	adds	r3, r0, r3
1004aaa4:	3308      	adds	r3, #8
1004aaa6:	8818      	ldrh	r0, [r3, #0]
1004aaa8:	4915      	ldr	r1, [pc, #84]	@ (1004ab00 <NVMDB_Init+0x2b4>)
1004aaaa:	0013      	movs	r3, r2
1004aaac:	009b      	lsls	r3, r3, #2
1004aaae:	189b      	adds	r3, r3, r2
1004aab0:	009b      	lsls	r3, r3, #2
1004aab2:	18cb      	adds	r3, r1, r3
1004aab4:	3310      	adds	r3, #16
1004aab6:	1c02      	adds	r2, r0, #0
1004aab8:	801a      	strh	r2, [r3, #0]
#endif

    status = NVMDB_get_info(&DBInfo[id]);
1004aaba:	193b      	adds	r3, r7, r4
1004aabc:	781a      	ldrb	r2, [r3, #0]
1004aabe:	0013      	movs	r3, r2
1004aac0:	009b      	lsls	r3, r3, #2
1004aac2:	189b      	adds	r3, r3, r2
1004aac4:	009b      	lsls	r3, r3, #2
1004aac6:	4a0e      	ldr	r2, [pc, #56]	@ (1004ab00 <NVMDB_Init+0x2b4>)
1004aac8:	189b      	adds	r3, r3, r2
1004aaca:	2512      	movs	r5, #18
1004aacc:	197c      	adds	r4, r7, r5
1004aace:	0018      	movs	r0, r3
1004aad0:	f7fe feae 	bl	10049830 <NVMDB_get_info>
1004aad4:	0003      	movs	r3, r0
1004aad6:	7023      	strb	r3, [r4, #0]
    if(status)
1004aad8:	197b      	adds	r3, r7, r5
1004aada:	781b      	ldrb	r3, [r3, #0]
1004aadc:	2b00      	cmp	r3, #0
1004aade:	d002      	beq.n	1004aae6 <NVMDB_Init+0x29a>
    {
      return status;
1004aae0:	197b      	adds	r3, r7, r5
1004aae2:	781b      	ldrb	r3, [r3, #0]
1004aae4:	e006      	b.n	1004aaf4 <NVMDB_Init+0x2a8>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
1004aae6:	697b      	ldr	r3, [r7, #20]
1004aae8:	3301      	adds	r3, #1
1004aaea:	617b      	str	r3, [r7, #20]
1004aaec:	697b      	ldr	r3, [r7, #20]
1004aaee:	2b01      	cmp	r3, #1
1004aaf0:	dd87      	ble.n	1004aa02 <NVMDB_Init+0x1b6>
    }
  }

  return NVMDB_STATUS_OK;
1004aaf2:	2300      	movs	r3, #0
}
1004aaf4:	0018      	movs	r0, r3
1004aaf6:	46bd      	mov	sp, r7
1004aaf8:	b008      	add	sp, #32
1004aafa:	bdb0      	pop	{r4, r5, r7, pc}
1004aafc:	20000e18 	.word	0x20000e18
1004ab00:	20000dec 	.word	0x20000dec
1004ab04:	10069d0c 	.word	0x10069d0c

1004ab08 <NVMDB_HandleInit>:
 *             through NVM_SMALL_DB_STATIC_INFO and NVM_LARGE_DB_STATIC_INFO variables.
 * @param[out] handle_p Pointer to the handle to be initialized.
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_HandleInit(NVMDB_IdType NVMDB_id, NVMDB_HandleType *handle_p)
{
1004ab08:	b580      	push	{r7, lr}
1004ab0a:	b082      	sub	sp, #8
1004ab0c:	af00      	add	r7, sp, #0
1004ab0e:	0002      	movs	r2, r0
1004ab10:	6039      	str	r1, [r7, #0]
1004ab12:	1dfb      	adds	r3, r7, #7
1004ab14:	701a      	strb	r2, [r3, #0]
  if(NVMDB_id >= NUM_DB)
1004ab16:	1dfb      	adds	r3, r7, #7
1004ab18:	781b      	ldrb	r3, [r3, #0]
1004ab1a:	2b01      	cmp	r3, #1
1004ab1c:	d901      	bls.n	1004ab22 <NVMDB_HandleInit+0x1a>
  {
    return NVMDB_STATUS_INVALID_ID;
1004ab1e:	2301      	movs	r3, #1
1004ab20:	e020      	b.n	1004ab64 <NVMDB_HandleInit+0x5c>
  }

  handle_p->address = DBInfo[NVMDB_id].start_address;
1004ab22:	1dfb      	adds	r3, r7, #7
1004ab24:	781a      	ldrb	r2, [r3, #0]
1004ab26:	4911      	ldr	r1, [pc, #68]	@ (1004ab6c <NVMDB_HandleInit+0x64>)
1004ab28:	0013      	movs	r3, r2
1004ab2a:	009b      	lsls	r3, r3, #2
1004ab2c:	189b      	adds	r3, r3, r2
1004ab2e:	009b      	lsls	r3, r3, #2
1004ab30:	585a      	ldr	r2, [r3, r1]
1004ab32:	683b      	ldr	r3, [r7, #0]
1004ab34:	605a      	str	r2, [r3, #4]
  handle_p->end_address = DBInfo[NVMDB_id].end_address;
1004ab36:	1dfb      	adds	r3, r7, #7
1004ab38:	781a      	ldrb	r2, [r3, #0]
1004ab3a:	490c      	ldr	r1, [pc, #48]	@ (1004ab6c <NVMDB_HandleInit+0x64>)
1004ab3c:	0013      	movs	r3, r2
1004ab3e:	009b      	lsls	r3, r3, #2
1004ab40:	189b      	adds	r3, r3, r2
1004ab42:	009b      	lsls	r3, r3, #2
1004ab44:	18cb      	adds	r3, r1, r3
1004ab46:	3304      	adds	r3, #4
1004ab48:	681a      	ldr	r2, [r3, #0]
1004ab4a:	683b      	ldr	r3, [r7, #0]
1004ab4c:	609a      	str	r2, [r3, #8]
  handle_p->first_read = TRUE;
1004ab4e:	683b      	ldr	r3, [r7, #0]
1004ab50:	2201      	movs	r2, #1
1004ab52:	731a      	strb	r2, [r3, #12]
  handle_p->id = NVMDB_id;
1004ab54:	683b      	ldr	r3, [r7, #0]
1004ab56:	1dfa      	adds	r2, r7, #7
1004ab58:	7812      	ldrb	r2, [r2, #0]
1004ab5a:	701a      	strb	r2, [r3, #0]
  handle_p->cache = FALSE;
1004ab5c:	683b      	ldr	r3, [r7, #0]
1004ab5e:	2200      	movs	r2, #0
1004ab60:	735a      	strb	r2, [r3, #13]

  return NVMDB_STATUS_OK;
1004ab62:	2300      	movs	r3, #0
}
1004ab64:	0018      	movs	r0, r3
1004ab66:	46bd      	mov	sp, r7
1004ab68:	b002      	add	sp, #8
1004ab6a:	bd80      	pop	{r7, pc}
1004ab6c:	20000dec 	.word	0x20000dec

1004ab70 <NVMDB_ReadNextRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadNextRecord(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
1004ab70:	b590      	push	{r4, r7, lr}
1004ab72:	b089      	sub	sp, #36	@ 0x24
1004ab74:	af04      	add	r7, sp, #16
1004ab76:	60f8      	str	r0, [r7, #12]
1004ab78:	0008      	movs	r0, r1
1004ab7a:	0011      	movs	r1, r2
1004ab7c:	607b      	str	r3, [r7, #4]
1004ab7e:	230b      	movs	r3, #11
1004ab80:	18fb      	adds	r3, r7, r3
1004ab82:	1c02      	adds	r2, r0, #0
1004ab84:	701a      	strb	r2, [r3, #0]
1004ab86:	2308      	movs	r3, #8
1004ab88:	18fb      	adds	r3, r7, r3
1004ab8a:	1c0a      	adds	r2, r1, #0
1004ab8c:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
1004ab8e:	68fb      	ldr	r3, [r7, #12]
1004ab90:	781b      	ldrb	r3, [r3, #0]
1004ab92:	0019      	movs	r1, r3
1004ab94:	4a12      	ldr	r2, [pc, #72]	@ (1004abe0 <NVMDB_ReadNextRecord+0x70>)
1004ab96:	000b      	movs	r3, r1
1004ab98:	009b      	lsls	r3, r3, #2
1004ab9a:	185b      	adds	r3, r3, r1
1004ab9c:	009b      	lsls	r3, r3, #2
1004ab9e:	18d3      	adds	r3, r2, r3
1004aba0:	330e      	adds	r3, #14
1004aba2:	781b      	ldrb	r3, [r3, #0]
1004aba4:	2b00      	cmp	r3, #0
1004aba6:	d001      	beq.n	1004abac <NVMDB_ReadNextRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
1004aba8:	230a      	movs	r3, #10
1004abaa:	e015      	b.n	1004abd8 <NVMDB_ReadNextRecord+0x68>
  }

  return ReadNextRecordNoLock(handle_p, record_type, data_offset, data_p, max_size, size_p, 0, NULL);
1004abac:	687c      	ldr	r4, [r7, #4]
1004abae:	2308      	movs	r3, #8
1004abb0:	18fb      	adds	r3, r7, r3
1004abb2:	881a      	ldrh	r2, [r3, #0]
1004abb4:	230b      	movs	r3, #11
1004abb6:	18fb      	adds	r3, r7, r3
1004abb8:	7819      	ldrb	r1, [r3, #0]
1004abba:	68f8      	ldr	r0, [r7, #12]
1004abbc:	2300      	movs	r3, #0
1004abbe:	9303      	str	r3, [sp, #12]
1004abc0:	2300      	movs	r3, #0
1004abc2:	9302      	str	r3, [sp, #8]
1004abc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004abc6:	9301      	str	r3, [sp, #4]
1004abc8:	2320      	movs	r3, #32
1004abca:	18fb      	adds	r3, r7, r3
1004abcc:	881b      	ldrh	r3, [r3, #0]
1004abce:	9300      	str	r3, [sp, #0]
1004abd0:	0023      	movs	r3, r4
1004abd2:	f7fe fef9 	bl	100499c8 <ReadNextRecordNoLock>
1004abd6:	0003      	movs	r3, r0
}
1004abd8:	0018      	movs	r0, r3
1004abda:	46bd      	mov	sp, r7
1004abdc:	b005      	add	sp, #20
1004abde:	bd90      	pop	{r4, r7, pc}
1004abe0:	20000dec 	.word	0x20000dec

1004abe4 <NVMDB_ReadCurrentRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadCurrentRecord(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
1004abe4:	b590      	push	{r4, r7, lr}
1004abe6:	b087      	sub	sp, #28
1004abe8:	af02      	add	r7, sp, #8
1004abea:	60f8      	str	r0, [r7, #12]
1004abec:	0008      	movs	r0, r1
1004abee:	607a      	str	r2, [r7, #4]
1004abf0:	0019      	movs	r1, r3
1004abf2:	230a      	movs	r3, #10
1004abf4:	18fb      	adds	r3, r7, r3
1004abf6:	1c02      	adds	r2, r0, #0
1004abf8:	801a      	strh	r2, [r3, #0]
1004abfa:	2308      	movs	r3, #8
1004abfc:	18fb      	adds	r3, r7, r3
1004abfe:	1c0a      	adds	r2, r1, #0
1004ac00:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
1004ac02:	68fb      	ldr	r3, [r7, #12]
1004ac04:	781b      	ldrb	r3, [r3, #0]
1004ac06:	0019      	movs	r1, r3
1004ac08:	4a0f      	ldr	r2, [pc, #60]	@ (1004ac48 <NVMDB_ReadCurrentRecord+0x64>)
1004ac0a:	000b      	movs	r3, r1
1004ac0c:	009b      	lsls	r3, r3, #2
1004ac0e:	185b      	adds	r3, r3, r1
1004ac10:	009b      	lsls	r3, r3, #2
1004ac12:	18d3      	adds	r3, r2, r3
1004ac14:	330e      	adds	r3, #14
1004ac16:	781b      	ldrb	r3, [r3, #0]
1004ac18:	2b00      	cmp	r3, #0
1004ac1a:	d001      	beq.n	1004ac20 <NVMDB_ReadCurrentRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
1004ac1c:	230a      	movs	r3, #10
1004ac1e:	e00f      	b.n	1004ac40 <NVMDB_ReadCurrentRecord+0x5c>
  }

  return ReadCurrentRecordNoLock(handle_p, data_offset, data_p, max_size, size_p, 0);
1004ac20:	2308      	movs	r3, #8
1004ac22:	18fb      	adds	r3, r7, r3
1004ac24:	881c      	ldrh	r4, [r3, #0]
1004ac26:	687a      	ldr	r2, [r7, #4]
1004ac28:	230a      	movs	r3, #10
1004ac2a:	18fb      	adds	r3, r7, r3
1004ac2c:	8819      	ldrh	r1, [r3, #0]
1004ac2e:	68f8      	ldr	r0, [r7, #12]
1004ac30:	2300      	movs	r3, #0
1004ac32:	9301      	str	r3, [sp, #4]
1004ac34:	6a3b      	ldr	r3, [r7, #32]
1004ac36:	9300      	str	r3, [sp, #0]
1004ac38:	0023      	movs	r3, r4
1004ac3a:	f7ff f81c 	bl	10049c76 <ReadCurrentRecordNoLock>
1004ac3e:	0003      	movs	r3, r0
}
1004ac40:	0018      	movs	r0, r3
1004ac42:	46bd      	mov	sp, r7
1004ac44:	b005      	add	sp, #20
1004ac46:	bd90      	pop	{r4, r7, pc}
1004ac48:	20000dec 	.word	0x20000dec

1004ac4c <NVMDB_AppendRecord>:
 * @param      header_length Length of bytes in data.
 * @param[in]  data Data to be stored inside the record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_AppendRecord(NVMDB_HandleType *handle_p, uint8_t record_type, uint16_t header_length, const void *header, uint16_t data_length, const void *data)
{
1004ac4c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004ac4e:	46c6      	mov	lr, r8
1004ac50:	b500      	push	{lr}
1004ac52:	b088      	sub	sp, #32
1004ac54:	af02      	add	r7, sp, #8
1004ac56:	60f8      	str	r0, [r7, #12]
1004ac58:	0008      	movs	r0, r1
1004ac5a:	0011      	movs	r1, r2
1004ac5c:	607b      	str	r3, [r7, #4]
1004ac5e:	230b      	movs	r3, #11
1004ac60:	001c      	movs	r4, r3
1004ac62:	18fb      	adds	r3, r7, r3
1004ac64:	1c02      	adds	r2, r0, #0
1004ac66:	701a      	strb	r2, [r3, #0]
1004ac68:	2008      	movs	r0, #8
1004ac6a:	183b      	adds	r3, r7, r0
1004ac6c:	1c0a      	adds	r2, r1, #0
1004ac6e:	801a      	strh	r2, [r3, #0]
  }

success:

#else /* NVM_CACHE */
  status = NVMDB_AppendRecordNoCache(handle_p, record_type, header_length, header, data_length, data);
1004ac70:	2617      	movs	r6, #23
1004ac72:	46b0      	mov	r8, r6
1004ac74:	44b8      	add	r8, r7
1004ac76:	687d      	ldr	r5, [r7, #4]
1004ac78:	183b      	adds	r3, r7, r0
1004ac7a:	881a      	ldrh	r2, [r3, #0]
1004ac7c:	0023      	movs	r3, r4
1004ac7e:	18fb      	adds	r3, r7, r3
1004ac80:	7819      	ldrb	r1, [r3, #0]
1004ac82:	68f8      	ldr	r0, [r7, #12]
1004ac84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004ac86:	9301      	str	r3, [sp, #4]
1004ac88:	2328      	movs	r3, #40	@ 0x28
1004ac8a:	2408      	movs	r4, #8
1004ac8c:	191b      	adds	r3, r3, r4
1004ac8e:	19db      	adds	r3, r3, r7
1004ac90:	881b      	ldrh	r3, [r3, #0]
1004ac92:	9300      	str	r3, [sp, #0]
1004ac94:	002b      	movs	r3, r5
1004ac96:	f7ff fd19 	bl	1004a6cc <NVMDB_AppendRecordNoCache>
1004ac9a:	0003      	movs	r3, r0
1004ac9c:	4642      	mov	r2, r8
1004ac9e:	7013      	strb	r3, [r2, #0]

  if(status != NVMDB_STATUS_OK)
1004aca0:	19bb      	adds	r3, r7, r6
1004aca2:	781b      	ldrb	r3, [r3, #0]
1004aca4:	2b00      	cmp	r3, #0
1004aca6:	d002      	beq.n	1004acae <NVMDB_AppendRecord+0x62>
  {
    return status;
1004aca8:	19bb      	adds	r3, r7, r6
1004acaa:	781b      	ldrb	r3, [r3, #0]
1004acac:	e02c      	b.n	1004ad08 <NVMDB_AppendRecord+0xbc>
  }

#endif

  /* Take into account that the free space is reduced, even if the record is actually in cache.  */
  DBInfo[handle_p->id].free_space -= ROUND4_R(header_length + data_length) + RECORD_HEADER_SIZE;
1004acae:	68fb      	ldr	r3, [r7, #12]
1004acb0:	781b      	ldrb	r3, [r3, #0]
1004acb2:	0019      	movs	r1, r3
1004acb4:	4a17      	ldr	r2, [pc, #92]	@ (1004ad14 <NVMDB_AppendRecord+0xc8>)
1004acb6:	000b      	movs	r3, r1
1004acb8:	009b      	lsls	r3, r3, #2
1004acba:	185b      	adds	r3, r3, r1
1004acbc:	009b      	lsls	r3, r3, #2
1004acbe:	18d3      	adds	r3, r2, r3
1004acc0:	330c      	adds	r3, #12
1004acc2:	881a      	ldrh	r2, [r3, #0]
1004acc4:	2308      	movs	r3, #8
1004acc6:	0018      	movs	r0, r3
1004acc8:	18f9      	adds	r1, r7, r3
1004acca:	2328      	movs	r3, #40	@ 0x28
1004accc:	181b      	adds	r3, r3, r0
1004acce:	19db      	adds	r3, r3, r7
1004acd0:	8809      	ldrh	r1, [r1, #0]
1004acd2:	881b      	ldrh	r3, [r3, #0]
1004acd4:	18cb      	adds	r3, r1, r3
1004acd6:	b29b      	uxth	r3, r3
1004acd8:	3b01      	subs	r3, #1
1004acda:	b29b      	uxth	r3, r3
1004acdc:	b21b      	sxth	r3, r3
1004acde:	2103      	movs	r1, #3
1004ace0:	430b      	orrs	r3, r1
1004ace2:	b21b      	sxth	r3, r3
1004ace4:	b29b      	uxth	r3, r3
1004ace6:	1ad3      	subs	r3, r2, r3
1004ace8:	b29b      	uxth	r3, r3
1004acea:	68fa      	ldr	r2, [r7, #12]
1004acec:	7812      	ldrb	r2, [r2, #0]
1004acee:	0011      	movs	r1, r2
1004acf0:	3b05      	subs	r3, #5
1004acf2:	b298      	uxth	r0, r3
1004acf4:	4a07      	ldr	r2, [pc, #28]	@ (1004ad14 <NVMDB_AppendRecord+0xc8>)
1004acf6:	000b      	movs	r3, r1
1004acf8:	009b      	lsls	r3, r3, #2
1004acfa:	185b      	adds	r3, r3, r1
1004acfc:	009b      	lsls	r3, r3, #2
1004acfe:	18d3      	adds	r3, r2, r3
1004ad00:	330c      	adds	r3, #12
1004ad02:	1c02      	adds	r2, r0, #0
1004ad04:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
1004ad06:	2300      	movs	r3, #0
}
1004ad08:	0018      	movs	r0, r3
1004ad0a:	46bd      	mov	sp, r7
1004ad0c:	b006      	add	sp, #24
1004ad0e:	bc80      	pop	{r7}
1004ad10:	46b8      	mov	r8, r7
1004ad12:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004ad14:	20000dec 	.word	0x20000dec

1004ad18 <NVMDB_DeleteRecord>:
 *
 * @param[in,out] handle_p Handle pointing to the record to be deleted.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_DeleteRecord(const NVMDB_HandleType *handle_p)
{
1004ad18:	b580      	push	{r7, lr}
1004ad1a:	b082      	sub	sp, #8
1004ad1c:	af00      	add	r7, sp, #0
1004ad1e:	6078      	str	r0, [r7, #4]
  /* No time to complete the operation immediately.  */
  return ScheduleDeleteOperation(handle_p->id, handle_p->address);

#else /* NVM_CACHE */

  return NVMDB_DeleteRecordNoCache(handle_p);
1004ad20:	687b      	ldr	r3, [r7, #4]
1004ad22:	0018      	movs	r0, r3
1004ad24:	f7ff f828 	bl	10049d78 <NVMDB_DeleteRecordNoCache>
1004ad28:	0003      	movs	r3, r0

#endif
}
1004ad2a:	0018      	movs	r0, r3
1004ad2c:	46bd      	mov	sp, r7
1004ad2e:	b002      	add	sp, #8
1004ad30:	bd80      	pop	{r7, pc}
	...

1004ad34 <NVMDB_Erase>:
 *
 * @param      NVMDB_id The ID of the record to be erased.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_Erase(NVMDB_IdType NVMDB_id)
{
1004ad34:	b5b0      	push	{r4, r5, r7, lr}
1004ad36:	b08c      	sub	sp, #48	@ 0x30
1004ad38:	af00      	add	r7, sp, #0
1004ad3a:	0002      	movs	r2, r0
1004ad3c:	1dfb      	adds	r3, r7, #7
1004ad3e:	701a      	strb	r2, [r3, #0]
  {
    return NVMDB_STATUS_CACHE_OP_PENDING;
  }
#endif

  type = GetDBType(NVMDB_id, &smallDBContainer_p);
1004ad40:	252b      	movs	r5, #43	@ 0x2b
1004ad42:	197c      	adds	r4, r7, r5
1004ad44:	2318      	movs	r3, #24
1004ad46:	18fa      	adds	r2, r7, r3
1004ad48:	1dfb      	adds	r3, r7, #7
1004ad4a:	781b      	ldrb	r3, [r3, #0]
1004ad4c:	0011      	movs	r1, r2
1004ad4e:	0018      	movs	r0, r3
1004ad50:	f7ff fbc6 	bl	1004a4e0 <GetDBType>
1004ad54:	0003      	movs	r3, r0
1004ad56:	7023      	strb	r3, [r4, #0]

  if(type == LARGE_DB)
1004ad58:	197b      	adds	r3, r7, r5
1004ad5a:	781b      	ldrb	r3, [r3, #0]
1004ad5c:	2b02      	cmp	r3, #2
1004ad5e:	d146      	bne.n	1004adee <NVMDB_Erase+0xba>
  {
    uint8_t page_num_start, num_pages;
    uint32_t start_address = DBInfo[NVMDB_id].start_address;
1004ad60:	1dfb      	adds	r3, r7, #7
1004ad62:	781a      	ldrb	r2, [r3, #0]
1004ad64:	4942      	ldr	r1, [pc, #264]	@ (1004ae70 <NVMDB_Erase+0x13c>)
1004ad66:	0013      	movs	r3, r2
1004ad68:	009b      	lsls	r3, r3, #2
1004ad6a:	189b      	adds	r3, r3, r2
1004ad6c:	009b      	lsls	r3, r3, #2
1004ad6e:	585b      	ldr	r3, [r3, r1]
1004ad70:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t end_address = DBInfo[NVMDB_id].end_address;
1004ad72:	1dfb      	adds	r3, r7, #7
1004ad74:	781a      	ldrb	r2, [r3, #0]
1004ad76:	493e      	ldr	r1, [pc, #248]	@ (1004ae70 <NVMDB_Erase+0x13c>)
1004ad78:	0013      	movs	r3, r2
1004ad7a:	009b      	lsls	r3, r3, #2
1004ad7c:	189b      	adds	r3, r3, r2
1004ad7e:	009b      	lsls	r3, r3, #2
1004ad80:	18cb      	adds	r3, r1, r3
1004ad82:	3304      	adds	r3, #4
1004ad84:	681b      	ldr	r3, [r3, #0]
1004ad86:	623b      	str	r3, [r7, #32]

    page_num_start = (start_address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
1004ad88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ad8a:	4a3a      	ldr	r2, [pc, #232]	@ (1004ae74 <NVMDB_Erase+0x140>)
1004ad8c:	4694      	mov	ip, r2
1004ad8e:	4463      	add	r3, ip
1004ad90:	0ada      	lsrs	r2, r3, #11
1004ad92:	201f      	movs	r0, #31
1004ad94:	183b      	adds	r3, r7, r0
1004ad96:	701a      	strb	r2, [r3, #0]
    num_pages = (ROUNDPAGE_R(end_address) - start_address) / PAGE_SIZE;
1004ad98:	6a3b      	ldr	r3, [r7, #32]
1004ad9a:	3b01      	subs	r3, #1
1004ad9c:	4a36      	ldr	r2, [pc, #216]	@ (1004ae78 <NVMDB_Erase+0x144>)
1004ad9e:	431a      	orrs	r2, r3
1004ada0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ada2:	1ad3      	subs	r3, r2, r3
1004ada4:	3301      	adds	r3, #1
1004ada6:	0ada      	lsrs	r2, r3, #11
1004ada8:	241e      	movs	r4, #30
1004adaa:	193b      	adds	r3, r7, r4
1004adac:	701a      	strb	r2, [r3, #0]
      return SchedulePageEraseOperation(NVMDB_id, page_num_start, num_pages);
    }

#else

    NVMDB_FLASH_ERASE_PAGE(page_num_start, num_pages);
1004adae:	210c      	movs	r1, #12
1004adb0:	187b      	adds	r3, r7, r1
1004adb2:	2200      	movs	r2, #0
1004adb4:	601a      	str	r2, [r3, #0]
1004adb6:	183b      	adds	r3, r7, r0
1004adb8:	781a      	ldrb	r2, [r3, #0]
1004adba:	187b      	adds	r3, r7, r1
1004adbc:	605a      	str	r2, [r3, #4]
1004adbe:	193b      	adds	r3, r7, r4
1004adc0:	781a      	ldrb	r2, [r3, #0]
1004adc2:	187b      	adds	r3, r7, r1
1004adc4:	609a      	str	r2, [r3, #8]
1004adc6:	2308      	movs	r3, #8
1004adc8:	18fa      	adds	r2, r7, r3
1004adca:	187b      	adds	r3, r7, r1
1004adcc:	0011      	movs	r1, r2
1004adce:	0018      	movs	r0, r3
1004add0:	f002 f8c6 	bl	1004cf60 <HAL_FLASHEx_Erase>

#endif

    NVMDB_get_info(&DBInfo[NVMDB_id]);
1004add4:	1dfb      	adds	r3, r7, #7
1004add6:	781a      	ldrb	r2, [r3, #0]
1004add8:	0013      	movs	r3, r2
1004adda:	009b      	lsls	r3, r3, #2
1004addc:	189b      	adds	r3, r3, r2
1004adde:	009b      	lsls	r3, r3, #2
1004ade0:	4a23      	ldr	r2, [pc, #140]	@ (1004ae70 <NVMDB_Erase+0x13c>)
1004ade2:	189b      	adds	r3, r3, r2
1004ade4:	0018      	movs	r0, r3
1004ade6:	f7fe fd23 	bl	10049830 <NVMDB_get_info>

    return NVMDB_STATUS_OK;
1004adea:	2300      	movs	r3, #0
1004adec:	e03b      	b.n	1004ae66 <NVMDB_Erase+0x132>
  }

  if(type == SMALL_DB)
1004adee:	232b      	movs	r3, #43	@ 0x2b
1004adf0:	18fb      	adds	r3, r7, r3
1004adf2:	781b      	ldrb	r3, [r3, #0]
1004adf4:	2b01      	cmp	r3, #1
1004adf6:	d135      	bne.n	1004ae64 <NVMDB_Erase+0x130>
  {

    status = EraseSmallDB(NVMDB_id, smallDBContainer_p);
1004adf8:	69ba      	ldr	r2, [r7, #24]
1004adfa:	252a      	movs	r5, #42	@ 0x2a
1004adfc:	197c      	adds	r4, r7, r5
1004adfe:	1dfb      	adds	r3, r7, #7
1004ae00:	781b      	ldrb	r3, [r3, #0]
1004ae02:	0011      	movs	r1, r2
1004ae04:	0018      	movs	r0, r3
1004ae06:	f7ff fbd9 	bl	1004a5bc <EraseSmallDB>
1004ae0a:	0003      	movs	r3, r0
1004ae0c:	7023      	strb	r3, [r4, #0]

    if(status == NVMDB_STATUS_OK)
1004ae0e:	197b      	adds	r3, r7, r5
1004ae10:	781b      	ldrb	r3, [r3, #0]
1004ae12:	2b00      	cmp	r3, #0
1004ae14:	d122      	bne.n	1004ae5c <NVMDB_Erase+0x128>
    {
      // Remove any operations in cache for all the DBs in the page. This means write and delete operations.
      // Cache operations for all the DBs in the same page have been executed by LoadDBToRAM().
      for(int i = 0; i < smallDBContainer_p->num_db; i++)
1004ae16:	2300      	movs	r3, #0
1004ae18:	62fb      	str	r3, [r7, #44]	@ 0x2c
1004ae1a:	e019      	b.n	1004ae50 <NVMDB_Erase+0x11c>
      {
        NVMDB_IdType id = smallDBContainer_p->dbs[i].id;
1004ae1c:	69bb      	ldr	r3, [r7, #24]
1004ae1e:	6899      	ldr	r1, [r3, #8]
1004ae20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
1004ae22:	0013      	movs	r3, r2
1004ae24:	005b      	lsls	r3, r3, #1
1004ae26:	189b      	adds	r3, r3, r2
1004ae28:	009b      	lsls	r3, r3, #2
1004ae2a:	18ca      	adds	r2, r1, r3
1004ae2c:	2129      	movs	r1, #41	@ 0x29
1004ae2e:	187b      	adds	r3, r7, r1
1004ae30:	7812      	ldrb	r2, [r2, #0]
1004ae32:	701a      	strb	r2, [r3, #0]
#if NVM_CACHE
        RemoveCacheOp(id);
#endif
        NVMDB_get_info(&DBInfo[id]);
1004ae34:	187b      	adds	r3, r7, r1
1004ae36:	781a      	ldrb	r2, [r3, #0]
1004ae38:	0013      	movs	r3, r2
1004ae3a:	009b      	lsls	r3, r3, #2
1004ae3c:	189b      	adds	r3, r3, r2
1004ae3e:	009b      	lsls	r3, r3, #2
1004ae40:	4a0b      	ldr	r2, [pc, #44]	@ (1004ae70 <NVMDB_Erase+0x13c>)
1004ae42:	189b      	adds	r3, r3, r2
1004ae44:	0018      	movs	r0, r3
1004ae46:	f7fe fcf3 	bl	10049830 <NVMDB_get_info>
      for(int i = 0; i < smallDBContainer_p->num_db; i++)
1004ae4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004ae4c:	3301      	adds	r3, #1
1004ae4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
1004ae50:	69bb      	ldr	r3, [r7, #24]
1004ae52:	791b      	ldrb	r3, [r3, #4]
1004ae54:	001a      	movs	r2, r3
1004ae56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004ae58:	4293      	cmp	r3, r2
1004ae5a:	dbdf      	blt.n	1004ae1c <NVMDB_Erase+0xe8>
#if NVM_CACHE
      return ScheduleSmallDBEraseOperation(NVMDB_id, smallDBContainer_p);
#endif
    }

    return status;
1004ae5c:	232a      	movs	r3, #42	@ 0x2a
1004ae5e:	18fb      	adds	r3, r7, r3
1004ae60:	781b      	ldrb	r3, [r3, #0]
1004ae62:	e000      	b.n	1004ae66 <NVMDB_Erase+0x132>
  }

  return NVMDB_STATUS_INVALID_ID;
1004ae64:	2301      	movs	r3, #1
}
1004ae66:	0018      	movs	r0, r3
1004ae68:	46bd      	mov	sp, r7
1004ae6a:	b00c      	add	sp, #48	@ 0x30
1004ae6c:	bdb0      	pop	{r4, r5, r7, pc}
1004ae6e:	46c0      	nop			@ (mov r8, r8)
1004ae70:	20000dec 	.word	0x20000dec
1004ae74:	effc0000 	.word	0xeffc0000
1004ae78:	000007ff 	.word	0x000007ff

1004ae7c <NVMDB_CleanDB>:
 *
 * @param      NVMDB_id The ID of the record to be cleaned.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_CleanDB(NVMDB_IdType NVMDB_id)
{
1004ae7c:	b5b0      	push	{r4, r5, r7, lr}
1004ae7e:	b084      	sub	sp, #16
1004ae80:	af00      	add	r7, sp, #0
1004ae82:	0002      	movs	r2, r0
1004ae84:	1dfb      	adds	r3, r7, #7
1004ae86:	701a      	strb	r2, [r3, #0]
  const NVMDB_SmallDBContainerType *smallDBContainer;
  uint8_t type;

  type = GetDBType(NVMDB_id, &smallDBContainer);
1004ae88:	250f      	movs	r5, #15
1004ae8a:	197c      	adds	r4, r7, r5
1004ae8c:	2308      	movs	r3, #8
1004ae8e:	18fa      	adds	r2, r7, r3
1004ae90:	1dfb      	adds	r3, r7, #7
1004ae92:	781b      	ldrb	r3, [r3, #0]
1004ae94:	0011      	movs	r1, r2
1004ae96:	0018      	movs	r0, r3
1004ae98:	f7ff fb22 	bl	1004a4e0 <GetDBType>
1004ae9c:	0003      	movs	r3, r0
1004ae9e:	7023      	strb	r3, [r4, #0]
  if(type == LARGE_DB)
1004aea0:	197b      	adds	r3, r7, r5
1004aea2:	781b      	ldrb	r3, [r3, #0]
1004aea4:	2b02      	cmp	r3, #2
1004aea6:	d106      	bne.n	1004aeb6 <NVMDB_CleanDB+0x3a>
  {
    return CleanLargeDB(NVMDB_id);
1004aea8:	1dfb      	adds	r3, r7, #7
1004aeaa:	781b      	ldrb	r3, [r3, #0]
1004aeac:	0018      	movs	r0, r3
1004aeae:	f7ff f92f 	bl	1004a110 <CleanLargeDB>
1004aeb2:	0003      	movs	r3, r0
1004aeb4:	e00b      	b.n	1004aece <NVMDB_CleanDB+0x52>
  }
  if(type == SMALL_DB)
1004aeb6:	230f      	movs	r3, #15
1004aeb8:	18fb      	adds	r3, r7, r3
1004aeba:	781b      	ldrb	r3, [r3, #0]
1004aebc:	2b01      	cmp	r3, #1
1004aebe:	d105      	bne.n	1004aecc <NVMDB_CleanDB+0x50>
  {
    return CleanPage(smallDBContainer);
1004aec0:	68bb      	ldr	r3, [r7, #8]
1004aec2:	0018      	movs	r0, r3
1004aec4:	f7ff fa02 	bl	1004a2cc <CleanPage>
1004aec8:	0003      	movs	r3, r0
1004aeca:	e000      	b.n	1004aece <NVMDB_CleanDB+0x52>
  }

  return NVMDB_STATUS_INVALID_ID;
1004aecc:	2301      	movs	r3, #1
}
1004aece:	0018      	movs	r0, r3
1004aed0:	46bd      	mov	sp, r7
1004aed2:	b004      	add	sp, #16
1004aed4:	bdb0      	pop	{r4, r5, r7, pc}
	...

1004aed8 <NVMDB_Tick>:
 *             The value NVMDB_STATUS_NOT_ENOUGH_TIME indicates that some operations
 *             cannot be performed because there is not enough time. Other values
 *             indicates unexpected conditions of the database.
 */
NVMDB_status_t NVMDB_Tick(void)
{
1004aed8:	b590      	push	{r4, r7, lr}
1004aeda:	b083      	sub	sp, #12
1004aedc:	af00      	add	r7, sp, #0
#endif

#endif /* NVM_CACHE */

#if AUTO_CLEAN
  dirty_db_id = NVMDB_CleanCheck();
1004aede:	1dfc      	adds	r4, r7, #7
1004aee0:	f000 f816 	bl	1004af10 <NVMDB_CleanCheck>
1004aee4:	0003      	movs	r3, r0
1004aee6:	7023      	strb	r3, [r4, #0]
  if(dirty_db_id >= 0)
1004aee8:	1dfb      	adds	r3, r7, #7
1004aeea:	781b      	ldrb	r3, [r3, #0]
1004aeec:	2b7f      	cmp	r3, #127	@ 0x7f
1004aeee:	d808      	bhi.n	1004af02 <NVMDB_Tick+0x2a>
  {
    NVMDB_CleanDB((NVMDB_IdType)dirty_db_id);
1004aef0:	1dfb      	adds	r3, r7, #7
1004aef2:	781b      	ldrb	r3, [r3, #0]
1004aef4:	0018      	movs	r0, r3
1004aef6:	f7ff ffc1 	bl	1004ae7c <NVMDB_CleanDB>
    PRINTF("Handle possibly not valid anymore!\r\n");
1004aefa:	4b04      	ldr	r3, [pc, #16]	@ (1004af0c <NVMDB_Tick+0x34>)
1004aefc:	0018      	movs	r0, r3
1004aefe:	f01c f873 	bl	10066fe8 <puts>
  }
#endif

  return NVMDB_STATUS_OK;
1004af02:	2300      	movs	r3, #0
}
1004af04:	0018      	movs	r0, r3
1004af06:	46bd      	mov	sp, r7
1004af08:	b003      	add	sp, #12
1004af0a:	bd90      	pop	{r4, r7, pc}
1004af0c:	10069938 	.word	0x10069938

1004af10 <NVMDB_CleanCheck>:

#if AUTO_CLEAN
// Checks if it is a good time to perform a clean operation
static int8_t NVMDB_CleanCheck(void)
{
1004af10:	b580      	push	{r7, lr}
1004af12:	b082      	sub	sp, #8
1004af14:	af00      	add	r7, sp, #0
  static int8_t db_start_index = 0;
  uint8_t i = db_start_index;
1004af16:	4b2b      	ldr	r3, [pc, #172]	@ (1004afc4 <NVMDB_CleanCheck+0xb4>)
1004af18:	2200      	movs	r2, #0
1004af1a:	569a      	ldrsb	r2, [r3, r2]
1004af1c:	1dfb      	adds	r3, r7, #7
1004af1e:	701a      	strb	r2, [r3, #0]

  do
  {
    if(DBInfo[i].invalid_records)
1004af20:	1dfb      	adds	r3, r7, #7
1004af22:	781a      	ldrb	r2, [r3, #0]
1004af24:	4928      	ldr	r1, [pc, #160]	@ (1004afc8 <NVMDB_CleanCheck+0xb8>)
1004af26:	0013      	movs	r3, r2
1004af28:	009b      	lsls	r3, r3, #2
1004af2a:	189b      	adds	r3, r3, r2
1004af2c:	009b      	lsls	r3, r3, #2
1004af2e:	18cb      	adds	r3, r1, r3
1004af30:	330a      	adds	r3, #10
1004af32:	881b      	ldrh	r3, [r3, #0]
1004af34:	2b00      	cmp	r3, #0
1004af36:	d028      	beq.n	1004af8a <NVMDB_CleanCheck+0x7a>
    {
      if(DBInfo[i].free_space < DBInfo[i].clean_threshold)
1004af38:	1dfb      	adds	r3, r7, #7
1004af3a:	781a      	ldrb	r2, [r3, #0]
1004af3c:	4922      	ldr	r1, [pc, #136]	@ (1004afc8 <NVMDB_CleanCheck+0xb8>)
1004af3e:	0013      	movs	r3, r2
1004af40:	009b      	lsls	r3, r3, #2
1004af42:	189b      	adds	r3, r3, r2
1004af44:	009b      	lsls	r3, r3, #2
1004af46:	18cb      	adds	r3, r1, r3
1004af48:	330c      	adds	r3, #12
1004af4a:	8819      	ldrh	r1, [r3, #0]
1004af4c:	1dfb      	adds	r3, r7, #7
1004af4e:	781a      	ldrb	r2, [r3, #0]
1004af50:	481d      	ldr	r0, [pc, #116]	@ (1004afc8 <NVMDB_CleanCheck+0xb8>)
1004af52:	0013      	movs	r3, r2
1004af54:	009b      	lsls	r3, r3, #2
1004af56:	189b      	adds	r3, r3, r2
1004af58:	009b      	lsls	r3, r3, #2
1004af5a:	18c3      	adds	r3, r0, r3
1004af5c:	3310      	adds	r3, #16
1004af5e:	881b      	ldrh	r3, [r3, #0]
1004af60:	4299      	cmp	r1, r3
1004af62:	d212      	bcs.n	1004af8a <NVMDB_CleanCheck+0x7a>
      {
        // Next time do not start from this db.
        // There may be time to clean another one if this one has not been successfully cleaned.
        db_start_index = i + 1;
1004af64:	1dfb      	adds	r3, r7, #7
1004af66:	781b      	ldrb	r3, [r3, #0]
1004af68:	3301      	adds	r3, #1
1004af6a:	b2db      	uxtb	r3, r3
1004af6c:	b25a      	sxtb	r2, r3
1004af6e:	4b15      	ldr	r3, [pc, #84]	@ (1004afc4 <NVMDB_CleanCheck+0xb4>)
1004af70:	701a      	strb	r2, [r3, #0]
        if(db_start_index == NUM_DB)
1004af72:	4b14      	ldr	r3, [pc, #80]	@ (1004afc4 <NVMDB_CleanCheck+0xb4>)
1004af74:	781b      	ldrb	r3, [r3, #0]
1004af76:	b25b      	sxtb	r3, r3
1004af78:	2b02      	cmp	r3, #2
1004af7a:	d102      	bne.n	1004af82 <NVMDB_CleanCheck+0x72>
        {
          db_start_index = 0;
1004af7c:	4b11      	ldr	r3, [pc, #68]	@ (1004afc4 <NVMDB_CleanCheck+0xb4>)
1004af7e:	2200      	movs	r2, #0
1004af80:	701a      	strb	r2, [r3, #0]
        }
        return i;
1004af82:	1dfb      	adds	r3, r7, #7
1004af84:	781b      	ldrb	r3, [r3, #0]
1004af86:	b25b      	sxtb	r3, r3
1004af88:	e017      	b.n	1004afba <NVMDB_CleanCheck+0xaa>
      }
    }

    i++;
1004af8a:	1dfb      	adds	r3, r7, #7
1004af8c:	781a      	ldrb	r2, [r3, #0]
1004af8e:	1dfb      	adds	r3, r7, #7
1004af90:	3201      	adds	r2, #1
1004af92:	701a      	strb	r2, [r3, #0]
    if(i == NUM_DB)
1004af94:	1dfb      	adds	r3, r7, #7
1004af96:	781b      	ldrb	r3, [r3, #0]
1004af98:	2b02      	cmp	r3, #2
1004af9a:	d102      	bne.n	1004afa2 <NVMDB_CleanCheck+0x92>
    {
      i = 0;
1004af9c:	1dfb      	adds	r3, r7, #7
1004af9e:	2200      	movs	r2, #0
1004afa0:	701a      	strb	r2, [r3, #0]
    }
  }
  while(i != db_start_index);
1004afa2:	1dfb      	adds	r3, r7, #7
1004afa4:	781b      	ldrb	r3, [r3, #0]
1004afa6:	4a07      	ldr	r2, [pc, #28]	@ (1004afc4 <NVMDB_CleanCheck+0xb4>)
1004afa8:	7812      	ldrb	r2, [r2, #0]
1004afaa:	b252      	sxtb	r2, r2
1004afac:	4293      	cmp	r3, r2
1004afae:	d1b7      	bne.n	1004af20 <NVMDB_CleanCheck+0x10>

  // All databases have been checked. We can start from first position next time (but not strictly needed).
  db_start_index = 0;
1004afb0:	4b04      	ldr	r3, [pc, #16]	@ (1004afc4 <NVMDB_CleanCheck+0xb4>)
1004afb2:	2200      	movs	r2, #0
1004afb4:	701a      	strb	r2, [r3, #0]

  return -1; // No db to clean
1004afb6:	2301      	movs	r3, #1
1004afb8:	425b      	negs	r3, r3
}
1004afba:	0018      	movs	r0, r3
1004afbc:	46bd      	mov	sp, r7
1004afbe:	b002      	add	sp, #8
1004afc0:	bd80      	pop	{r7, pc}
1004afc2:	46c0      	nop			@ (mov r8, r8)
1004afc4:	20000e14 	.word	0x20000e14
1004afc8:	20000dec 	.word	0x20000dec

1004afcc <PKAMGR_Init>:

/** @defgroup PKA_Manager_Public_Functions Public Functions
* @{
*/
PKAMGR_ResultStatus PKAMGR_Init(void)
{
1004afcc:	b580      	push	{r7, lr}
1004afce:	af00      	add	r7, sp, #0
    internalState = PKAMGR_STATE_IDLE;
1004afd0:	4b03      	ldr	r3, [pc, #12]	@ (1004afe0 <PKAMGR_Init+0x14>)
1004afd2:	2201      	movs	r2, #1
1004afd4:	601a      	str	r2, [r3, #0]

  return PKAMGR_SUCCESS;
1004afd6:	2300      	movs	r3, #0
}
1004afd8:	0018      	movs	r0, r3
1004afda:	46bd      	mov	sp, r7
1004afdc:	bd80      	pop	{r7, pc}
1004afde:	46c0      	nop			@ (mov r8, r8)
1004afe0:	20001358 	.word	0x20001358

1004afe4 <PKAMGR_SleepCheck>:

  return PKAMGR_SUCCESS;
}

PKAMGR_ResultStatus PKAMGR_SleepCheck(void)
{
1004afe4:	b580      	push	{r7, lr}
1004afe6:	b082      	sub	sp, #8
1004afe8:	af00      	add	r7, sp, #0
  PKAMGR_ResultStatus return_value = PKAMGR_ERR_BUSY;
1004afea:	1dfb      	adds	r3, r7, #7
1004afec:	22fe      	movs	r2, #254	@ 0xfe
1004afee:	701a      	strb	r2, [r3, #0]

  if(internalState == PKAMGR_STATE_IDLE)
1004aff0:	4b06      	ldr	r3, [pc, #24]	@ (1004b00c <PKAMGR_SleepCheck+0x28>)
1004aff2:	681b      	ldr	r3, [r3, #0]
1004aff4:	2b01      	cmp	r3, #1
1004aff6:	d102      	bne.n	1004affe <PKAMGR_SleepCheck+0x1a>
    return_value = PKAMGR_SUCCESS;
1004aff8:	1dfb      	adds	r3, r7, #7
1004affa:	2200      	movs	r2, #0
1004affc:	701a      	strb	r2, [r3, #0]

  return return_value;
1004affe:	1dfb      	adds	r3, r7, #7
1004b000:	781b      	ldrb	r3, [r3, #0]
1004b002:	b25b      	sxtb	r3, r3
}
1004b004:	0018      	movs	r0, r3
1004b006:	46bd      	mov	sp, r7
1004b008:	b002      	add	sp, #8
1004b00a:	bd80      	pop	{r7, pc}
1004b00c:	20001358 	.word	0x20001358

1004b010 <PKAMGR_Lock>:

PKAMGR_ResultStatus PKAMGR_Lock()
{
1004b010:	b580      	push	{r7, lr}
1004b012:	b084      	sub	sp, #16
1004b014:	af00      	add	r7, sp, #0
  PKAMGR_ResultStatus return_value = PKAMGR_SUCCESS;
1004b016:	210f      	movs	r1, #15
1004b018:	187b      	adds	r3, r7, r1
1004b01a:	2200      	movs	r2, #0
1004b01c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b01e:	f3ef 8310 	mrs	r3, PRIMASK
1004b022:	607b      	str	r3, [r7, #4]
  return(result);
1004b024:	687b      	ldr	r3, [r7, #4]

  /* Only one consumer (Application layer or Stack) can use the PKA at the time */
  ATOMIC_SECTION_BEGIN();
1004b026:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
1004b028:	b672      	cpsid	i
}
1004b02a:	46c0      	nop			@ (mov r8, r8)
  if(internalState != PKAMGR_STATE_IDLE)
1004b02c:	4b0c      	ldr	r3, [pc, #48]	@ (1004b060 <PKAMGR_Lock+0x50>)
1004b02e:	681b      	ldr	r3, [r3, #0]
1004b030:	2b01      	cmp	r3, #1
1004b032:	d003      	beq.n	1004b03c <PKAMGR_Lock+0x2c>
  {
    return_value = PKAMGR_ERR_BUSY;
1004b034:	187b      	adds	r3, r7, r1
1004b036:	22fe      	movs	r2, #254	@ 0xfe
1004b038:	701a      	strb	r2, [r3, #0]
1004b03a:	e002      	b.n	1004b042 <PKAMGR_Lock+0x32>
  }
  else
  {
    /* Lock mechanism to access concurrently at the PKA resource */
    internalState = PKAMGR_STATE_BUSY;
1004b03c:	4b08      	ldr	r3, [pc, #32]	@ (1004b060 <PKAMGR_Lock+0x50>)
1004b03e:	2203      	movs	r2, #3
1004b040:	601a      	str	r2, [r3, #0]
1004b042:	68bb      	ldr	r3, [r7, #8]
1004b044:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b046:	683b      	ldr	r3, [r7, #0]
1004b048:	f383 8810 	msr	PRIMASK, r3
}
1004b04c:	46c0      	nop			@ (mov r8, r8)
  }
  ATOMIC_SECTION_END();

  return return_value;
1004b04e:	230f      	movs	r3, #15
1004b050:	18fb      	adds	r3, r7, r3
1004b052:	781b      	ldrb	r3, [r3, #0]
1004b054:	b25b      	sxtb	r3, r3
}
1004b056:	0018      	movs	r0, r3
1004b058:	46bd      	mov	sp, r7
1004b05a:	b004      	add	sp, #16
1004b05c:	bd80      	pop	{r7, pc}
1004b05e:	46c0      	nop			@ (mov r8, r8)
1004b060:	20001358 	.word	0x20001358

1004b064 <PKAMGR_Unlock>:

PKAMGR_ResultStatus PKAMGR_Unlock()
{
1004b064:	b580      	push	{r7, lr}
1004b066:	b084      	sub	sp, #16
1004b068:	af00      	add	r7, sp, #0
  PKAMGR_ResultStatus return_value = PKAMGR_SUCCESS;
1004b06a:	210f      	movs	r1, #15
1004b06c:	187b      	adds	r3, r7, r1
1004b06e:	2200      	movs	r2, #0
1004b070:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b072:	f3ef 8310 	mrs	r3, PRIMASK
1004b076:	607b      	str	r3, [r7, #4]
  return(result);
1004b078:	687b      	ldr	r3, [r7, #4]

  /* Only one consumer (Application layer or Stack) can use the PKA at the time */
  ATOMIC_SECTION_BEGIN();
1004b07a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
1004b07c:	b672      	cpsid	i
}
1004b07e:	46c0      	nop			@ (mov r8, r8)
  if(internalState != PKAMGR_STATE_BUSY)
1004b080:	4b0c      	ldr	r3, [pc, #48]	@ (1004b0b4 <PKAMGR_Unlock+0x50>)
1004b082:	681b      	ldr	r3, [r3, #0]
1004b084:	2b03      	cmp	r3, #3
1004b086:	d003      	beq.n	1004b090 <PKAMGR_Unlock+0x2c>
  {
    return_value = PKAMGR_ERR_BUSY;
1004b088:	187b      	adds	r3, r7, r1
1004b08a:	22fe      	movs	r2, #254	@ 0xfe
1004b08c:	701a      	strb	r2, [r3, #0]
1004b08e:	e002      	b.n	1004b096 <PKAMGR_Unlock+0x32>
  }
  else
  {
    /* Unlock mechanism to access concurrently at the PKA resource */
    internalState = PKAMGR_STATE_IDLE;
1004b090:	4b08      	ldr	r3, [pc, #32]	@ (1004b0b4 <PKAMGR_Unlock+0x50>)
1004b092:	2201      	movs	r2, #1
1004b094:	601a      	str	r2, [r3, #0]
1004b096:	68bb      	ldr	r3, [r7, #8]
1004b098:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b09a:	683b      	ldr	r3, [r7, #0]
1004b09c:	f383 8810 	msr	PRIMASK, r3
}
1004b0a0:	46c0      	nop			@ (mov r8, r8)
  }
  ATOMIC_SECTION_END();

  return return_value;
1004b0a2:	230f      	movs	r3, #15
1004b0a4:	18fb      	adds	r3, r7, r3
1004b0a6:	781b      	ldrb	r3, [r3, #0]
1004b0a8:	b25b      	sxtb	r3, r3
}
1004b0aa:	0018      	movs	r0, r3
1004b0ac:	46bd      	mov	sp, r7
1004b0ae:	b004      	add	sp, #16
1004b0b0:	bd80      	pop	{r7, pc}
1004b0b2:	46c0      	nop			@ (mov r8, r8)
1004b0b4:	20001358 	.word	0x20001358

1004b0b8 <PKAMGR_StartP256PublicKeyGeneration>:

PKAMGR_ResultStatus PKAMGR_StartP256PublicKeyGeneration(const uint32_t *privateKey, PKAMGR_funcCB funcCB)
{
1004b0b8:	b580      	push	{r7, lr}
1004b0ba:	b082      	sub	sp, #8
1004b0bc:	af00      	add	r7, sp, #0
1004b0be:	6078      	str	r0, [r7, #4]
1004b0c0:	6039      	str	r1, [r7, #0]
  return HW_PKA_StartP256DHkeyGeneration(privateKey, (uint32_t *)&PKAStartPoint[0], funcCB);
1004b0c2:	683a      	ldr	r2, [r7, #0]
1004b0c4:	4904      	ldr	r1, [pc, #16]	@ (1004b0d8 <PKAMGR_StartP256PublicKeyGeneration+0x20>)
1004b0c6:	687b      	ldr	r3, [r7, #4]
1004b0c8:	0018      	movs	r0, r3
1004b0ca:	f7fd f96f 	bl	100483ac <HW_PKA_StartP256DHkeyGeneration>
1004b0ce:	0003      	movs	r3, r0
}
1004b0d0:	0018      	movs	r0, r3
1004b0d2:	46bd      	mov	sp, r7
1004b0d4:	b002      	add	sp, #8
1004b0d6:	bd80      	pop	{r7, pc}
1004b0d8:	10069d24 	.word	0x10069d24

1004b0dc <PKAMGR_IRQCallback>:

__weak void PKAMGR_IRQCallback(void)
{
1004b0dc:	b580      	push	{r7, lr}
1004b0de:	af00      	add	r7, sp, #0
}
1004b0e0:	46c0      	nop			@ (mov r8, r8)
1004b0e2:	46bd      	mov	sp, r7
1004b0e4:	bd80      	pop	{r7, pc}
	...

1004b0e8 <aci_gap_profile_init>:
tBleStatus aci_gap_profile_init(uint8_t Role,
                                uint8_t Privacy_Type,
                                uint16_t *Dev_Name_Char_Handle,
                                uint16_t *Appearance_Char_Handle,
                                uint16_t *Periph_Pref_Conn_Param_Char_Handle)
{
1004b0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1004b0ea:	b087      	sub	sp, #28
1004b0ec:	af00      	add	r7, sp, #0
1004b0ee:	60ba      	str	r2, [r7, #8]
1004b0f0:	607b      	str	r3, [r7, #4]
1004b0f2:	240f      	movs	r4, #15
1004b0f4:	193b      	adds	r3, r7, r4
1004b0f6:	1c02      	adds	r2, r0, #0
1004b0f8:	701a      	strb	r2, [r3, #0]
1004b0fa:	230e      	movs	r3, #14
1004b0fc:	18fb      	adds	r3, r7, r3
1004b0fe:	1c0a      	adds	r2, r1, #0
1004b100:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gap_srvc_handle;
  
  *Dev_Name_Char_Handle = 0x0000;
1004b102:	68bb      	ldr	r3, [r7, #8]
1004b104:	2200      	movs	r2, #0
1004b106:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle= 0x0000;
1004b108:	687b      	ldr	r3, [r7, #4]
1004b10a:	2200      	movs	r2, #0
1004b10c:	801a      	strh	r2, [r3, #0]
  *Periph_Pref_Conn_Param_Char_Handle = 0x0000;
1004b10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004b110:	2200      	movs	r2, #0
1004b112:	801a      	strh	r2, [r3, #0]
  
  if ((Role & (GAP_PERIPHERAL_ROLE | GAP_CENTRAL_ROLE)) != 0x0U)
1004b114:	193b      	adds	r3, r7, r4
1004b116:	781b      	ldrb	r3, [r3, #0]
1004b118:	2205      	movs	r2, #5
1004b11a:	4013      	ands	r3, r2
1004b11c:	d046      	beq.n	1004b1ac <aci_gap_profile_init+0xc4>
  {
    /**
    * Register GAP service.
    * Device Name and Appearance Characteristics will be also registered.
    */
    ret = aci_gatt_srv_add_service(&gap_srvc);
1004b11e:	2517      	movs	r5, #23
1004b120:	197c      	adds	r4, r7, r5
1004b122:	4b25      	ldr	r3, [pc, #148]	@ (1004b1b8 <aci_gap_profile_init+0xd0>)
1004b124:	0018      	movs	r0, r3
1004b126:	f006 fdef 	bl	10051d08 <aci_gatt_srv_add_service>
1004b12a:	0003      	movs	r3, r0
1004b12c:	7023      	strb	r3, [r4, #0]
    if (ret != BLE_STATUS_SUCCESS)
1004b12e:	197b      	adds	r3, r7, r5
1004b130:	781b      	ldrb	r3, [r3, #0]
1004b132:	2b00      	cmp	r3, #0
1004b134:	d002      	beq.n	1004b13c <aci_gap_profile_init+0x54>
    {
      return ret;
1004b136:	197b      	adds	r3, r7, r5
1004b138:	781b      	ldrb	r3, [r3, #0]
1004b13a:	e038      	b.n	1004b1ae <aci_gap_profile_init+0xc6>
    }
    
    *Dev_Name_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[0U]);
1004b13c:	4b1f      	ldr	r3, [pc, #124]	@ (1004b1bc <aci_gap_profile_init+0xd4>)
1004b13e:	0018      	movs	r0, r3
1004b140:	f006 fe0f 	bl	10051d62 <aci_gatt_srv_get_char_decl_handle>
1004b144:	0003      	movs	r3, r0
1004b146:	001a      	movs	r2, r3
1004b148:	68bb      	ldr	r3, [r7, #8]
1004b14a:	801a      	strh	r2, [r3, #0]
    *Appearance_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[1U]);
1004b14c:	4b1c      	ldr	r3, [pc, #112]	@ (1004b1c0 <aci_gap_profile_init+0xd8>)
1004b14e:	0018      	movs	r0, r3
1004b150:	f006 fe07 	bl	10051d62 <aci_gatt_srv_get_char_decl_handle>
1004b154:	0003      	movs	r3, r0
1004b156:	001a      	movs	r2, r3
1004b158:	687b      	ldr	r3, [r7, #4]
1004b15a:	801a      	strh	r2, [r3, #0]
    
    gap_srvc_handle = aci_gatt_srv_get_service_handle(&gap_srvc);
1004b15c:	2614      	movs	r6, #20
1004b15e:	19bc      	adds	r4, r7, r6
1004b160:	4b15      	ldr	r3, [pc, #84]	@ (1004b1b8 <aci_gap_profile_init+0xd0>)
1004b162:	0018      	movs	r0, r3
1004b164:	f006 fddd 	bl	10051d22 <aci_gatt_srv_get_service_handle>
1004b168:	0003      	movs	r3, r0
1004b16a:	8023      	strh	r3, [r4, #0]
      }
    }
    
    *Periph_Pref_Conn_Param_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[2U]);
#else
    *Periph_Pref_Conn_Param_Char_Handle = 0;
1004b16c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004b16e:	2200      	movs	r2, #0
1004b170:	801a      	strh	r2, [r3, #0]
#endif    
    
    if (Privacy_Type == 2U)
1004b172:	230e      	movs	r3, #14
1004b174:	18fb      	adds	r3, r7, r3
1004b176:	781b      	ldrb	r3, [r3, #0]
1004b178:	2b02      	cmp	r3, #2
1004b17a:	d111      	bne.n	1004b1a0 <aci_gap_profile_init+0xb8>
    {
      /**
      * Register Central Address Resolution Characteristic.
      */
      ret = aci_gatt_srv_add_char(&gap_chrs[3U], gap_srvc_handle);
1004b17c:	2517      	movs	r5, #23
1004b17e:	197c      	adds	r4, r7, r5
1004b180:	19bb      	adds	r3, r7, r6
1004b182:	881a      	ldrh	r2, [r3, #0]
1004b184:	4b0f      	ldr	r3, [pc, #60]	@ (1004b1c4 <aci_gap_profile_init+0xdc>)
1004b186:	0011      	movs	r1, r2
1004b188:	0018      	movs	r0, r3
1004b18a:	f006 fdd7 	bl	10051d3c <aci_gatt_srv_add_char>
1004b18e:	0003      	movs	r3, r0
1004b190:	7023      	strb	r3, [r4, #0]
      if (ret != BLE_STATUS_SUCCESS)
1004b192:	197b      	adds	r3, r7, r5
1004b194:	781b      	ldrb	r3, [r3, #0]
1004b196:	2b00      	cmp	r3, #0
1004b198:	d002      	beq.n	1004b1a0 <aci_gap_profile_init+0xb8>
      {
        return ret;
1004b19a:	197b      	adds	r3, r7, r5
1004b19c:	781b      	ldrb	r3, [r3, #0]
1004b19e:	e006      	b.n	1004b1ae <aci_gap_profile_init+0xc6>
#endif /* CFG_BLE_GAP_ENCRYPTED_KEY_MATERIAL_CHARACTERISTIC */
    
    /**
    * Set default device name.
    */
    Gap_profile_set_dev_name(0U, sizeof(default_dev_name),
1004b1a0:	4b09      	ldr	r3, [pc, #36]	@ (1004b1c8 <aci_gap_profile_init+0xe0>)
1004b1a2:	001a      	movs	r2, r3
1004b1a4:	2108      	movs	r1, #8
1004b1a6:	2000      	movs	r0, #0
1004b1a8:	f000 f810 	bl	1004b1cc <Gap_profile_set_dev_name>
                             (uint8_t *)default_dev_name);
    
  }
  
  return BLE_STATUS_SUCCESS;
1004b1ac:	2300      	movs	r3, #0
}
1004b1ae:	0018      	movs	r0, r3
1004b1b0:	46bd      	mov	sp, r7
1004b1b2:	b007      	add	sp, #28
1004b1b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004b1b6:	46c0      	nop			@ (mov r8, r8)
1004b1b8:	20001428 	.word	0x20001428
1004b1bc:	20001374 	.word	0x20001374
1004b1c0:	20001398 	.word	0x20001398
1004b1c4:	200013e0 	.word	0x200013e0
1004b1c8:	10069d64 	.word	0x10069d64

1004b1cc <Gap_profile_set_dev_name>:

tBleStatus Gap_profile_set_dev_name(uint16_t offset,
                                    uint16_t length,
                                    uint8_t *dev_name_p)
{
1004b1cc:	b590      	push	{r4, r7, lr}
1004b1ce:	b085      	sub	sp, #20
1004b1d0:	af00      	add	r7, sp, #0
1004b1d2:	603a      	str	r2, [r7, #0]
1004b1d4:	1dbb      	adds	r3, r7, #6
1004b1d6:	1c02      	adds	r2, r0, #0
1004b1d8:	801a      	strh	r2, [r3, #0]
1004b1da:	1d3b      	adds	r3, r7, #4
1004b1dc:	1c0a      	adds	r2, r1, #0
1004b1de:	801a      	strh	r2, [r3, #0]
    uint16_t handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[0U]) + 1U;
1004b1e0:	4b0c      	ldr	r3, [pc, #48]	@ (1004b214 <Gap_profile_set_dev_name+0x48>)
1004b1e2:	0018      	movs	r0, r3
1004b1e4:	f006 fdbd 	bl	10051d62 <aci_gatt_srv_get_char_decl_handle>
1004b1e8:	0003      	movs	r3, r0
1004b1ea:	001a      	movs	r2, r3
1004b1ec:	200e      	movs	r0, #14
1004b1ee:	183b      	adds	r3, r7, r0
1004b1f0:	3201      	adds	r2, #1
1004b1f2:	801a      	strh	r2, [r3, #0]

    return Gap_profile_set_char_value(handle, offset, length, dev_name_p);
1004b1f4:	683c      	ldr	r4, [r7, #0]
1004b1f6:	1d3b      	adds	r3, r7, #4
1004b1f8:	881a      	ldrh	r2, [r3, #0]
1004b1fa:	1dbb      	adds	r3, r7, #6
1004b1fc:	8819      	ldrh	r1, [r3, #0]
1004b1fe:	183b      	adds	r3, r7, r0
1004b200:	8818      	ldrh	r0, [r3, #0]
1004b202:	0023      	movs	r3, r4
1004b204:	f000 f82e 	bl	1004b264 <Gap_profile_set_char_value>
1004b208:	0003      	movs	r3, r0
}
1004b20a:	0018      	movs	r0, r3
1004b20c:	46bd      	mov	sp, r7
1004b20e:	b005      	add	sp, #20
1004b210:	bd90      	pop	{r4, r7, pc}
1004b212:	46c0      	nop			@ (mov r8, r8)
1004b214:	20001374 	.word	0x20001374

1004b218 <Gap_profile_set_appearance>:

tBleStatus Gap_profile_set_appearance(uint16_t offset,
                                      uint16_t length,
                                      uint8_t *appearance_p)
{
1004b218:	b590      	push	{r4, r7, lr}
1004b21a:	b085      	sub	sp, #20
1004b21c:	af00      	add	r7, sp, #0
1004b21e:	603a      	str	r2, [r7, #0]
1004b220:	1dbb      	adds	r3, r7, #6
1004b222:	1c02      	adds	r2, r0, #0
1004b224:	801a      	strh	r2, [r3, #0]
1004b226:	1d3b      	adds	r3, r7, #4
1004b228:	1c0a      	adds	r2, r1, #0
1004b22a:	801a      	strh	r2, [r3, #0]
    uint16_t handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[1U]) + 1U;
1004b22c:	4b0c      	ldr	r3, [pc, #48]	@ (1004b260 <Gap_profile_set_appearance+0x48>)
1004b22e:	0018      	movs	r0, r3
1004b230:	f006 fd97 	bl	10051d62 <aci_gatt_srv_get_char_decl_handle>
1004b234:	0003      	movs	r3, r0
1004b236:	001a      	movs	r2, r3
1004b238:	200e      	movs	r0, #14
1004b23a:	183b      	adds	r3, r7, r0
1004b23c:	3201      	adds	r2, #1
1004b23e:	801a      	strh	r2, [r3, #0]

    return Gap_profile_set_char_value(handle, offset, length, appearance_p);
1004b240:	683c      	ldr	r4, [r7, #0]
1004b242:	1d3b      	adds	r3, r7, #4
1004b244:	881a      	ldrh	r2, [r3, #0]
1004b246:	1dbb      	adds	r3, r7, #6
1004b248:	8819      	ldrh	r1, [r3, #0]
1004b24a:	183b      	adds	r3, r7, r0
1004b24c:	8818      	ldrh	r0, [r3, #0]
1004b24e:	0023      	movs	r3, r4
1004b250:	f000 f808 	bl	1004b264 <Gap_profile_set_char_value>
1004b254:	0003      	movs	r3, r0
}
1004b256:	0018      	movs	r0, r3
1004b258:	46bd      	mov	sp, r7
1004b25a:	b005      	add	sp, #20
1004b25c:	bd90      	pop	{r4, r7, pc}
1004b25e:	46c0      	nop			@ (mov r8, r8)
1004b260:	20001398 	.word	0x20001398

1004b264 <Gap_profile_set_char_value>:

tBleStatus Gap_profile_set_char_value(uint16_t attr_h,
                                      uint16_t val_offset,
                                      uint16_t val_length,
                                      uint8_t *val_p)
{
1004b264:	b5b0      	push	{r4, r5, r7, lr}
1004b266:	b086      	sub	sp, #24
1004b268:	af00      	add	r7, sp, #0
1004b26a:	0004      	movs	r4, r0
1004b26c:	0008      	movs	r0, r1
1004b26e:	0011      	movs	r1, r2
1004b270:	607b      	str	r3, [r7, #4]
1004b272:	230e      	movs	r3, #14
1004b274:	18fb      	adds	r3, r7, r3
1004b276:	1c22      	adds	r2, r4, #0
1004b278:	801a      	strh	r2, [r3, #0]
1004b27a:	230c      	movs	r3, #12
1004b27c:	18fb      	adds	r3, r7, r3
1004b27e:	1c02      	adds	r2, r0, #0
1004b280:	801a      	strh	r2, [r3, #0]
1004b282:	230a      	movs	r3, #10
1004b284:	18fb      	adds	r3, r7, r3
1004b286:	1c0a      	adds	r2, r1, #0
1004b288:	801a      	strh	r2, [r3, #0]
    uint16_t handle;

    /**
     * Search for GAP characteristic.
     */
    for (i = 0U; i < (sizeof(gap_chrs) / sizeof(gap_chrs[0U])); i++)
1004b28a:	2317      	movs	r3, #23
1004b28c:	18fb      	adds	r3, r7, r3
1004b28e:	2200      	movs	r2, #0
1004b290:	701a      	strb	r2, [r3, #0]
1004b292:	e021      	b.n	1004b2d8 <Gap_profile_set_char_value+0x74>
    {
        handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[i]);
1004b294:	2317      	movs	r3, #23
1004b296:	18fb      	adds	r3, r7, r3
1004b298:	781a      	ldrb	r2, [r3, #0]
1004b29a:	0013      	movs	r3, r2
1004b29c:	00db      	lsls	r3, r3, #3
1004b29e:	189b      	adds	r3, r3, r2
1004b2a0:	009b      	lsls	r3, r3, #2
1004b2a2:	4a3c      	ldr	r2, [pc, #240]	@ (1004b394 <Gap_profile_set_char_value+0x130>)
1004b2a4:	189b      	adds	r3, r3, r2
1004b2a6:	2514      	movs	r5, #20
1004b2a8:	197c      	adds	r4, r7, r5
1004b2aa:	0018      	movs	r0, r3
1004b2ac:	f006 fd59 	bl	10051d62 <aci_gatt_srv_get_char_decl_handle>
1004b2b0:	0003      	movs	r3, r0
1004b2b2:	8023      	strh	r3, [r4, #0]
        if ((handle != BLE_ATT_INVALID_ATTR_HANDLE) &&
1004b2b4:	197b      	adds	r3, r7, r5
1004b2b6:	881b      	ldrh	r3, [r3, #0]
1004b2b8:	2b00      	cmp	r3, #0
1004b2ba:	d007      	beq.n	1004b2cc <Gap_profile_set_char_value+0x68>
            ((handle + 1U) == attr_h))
1004b2bc:	197b      	adds	r3, r7, r5
1004b2be:	881b      	ldrh	r3, [r3, #0]
1004b2c0:	1c5a      	adds	r2, r3, #1
1004b2c2:	230e      	movs	r3, #14
1004b2c4:	18fb      	adds	r3, r7, r3
1004b2c6:	881b      	ldrh	r3, [r3, #0]
        if ((handle != BLE_ATT_INVALID_ATTR_HANDLE) &&
1004b2c8:	429a      	cmp	r2, r3
1004b2ca:	d00b      	beq.n	1004b2e4 <Gap_profile_set_char_value+0x80>
    for (i = 0U; i < (sizeof(gap_chrs) / sizeof(gap_chrs[0U])); i++)
1004b2cc:	2117      	movs	r1, #23
1004b2ce:	187b      	adds	r3, r7, r1
1004b2d0:	781a      	ldrb	r2, [r3, #0]
1004b2d2:	187b      	adds	r3, r7, r1
1004b2d4:	3201      	adds	r2, #1
1004b2d6:	701a      	strb	r2, [r3, #0]
1004b2d8:	2317      	movs	r3, #23
1004b2da:	18fb      	adds	r3, r7, r3
1004b2dc:	781b      	ldrb	r3, [r3, #0]
1004b2de:	2b04      	cmp	r3, #4
1004b2e0:	d9d8      	bls.n	1004b294 <Gap_profile_set_char_value+0x30>
1004b2e2:	e000      	b.n	1004b2e6 <Gap_profile_set_char_value+0x82>
        {
            break;
1004b2e4:	46c0      	nop			@ (mov r8, r8)
        }
    }

    if (i == (sizeof(gap_chrs) / sizeof(gap_chrs[0U])))
1004b2e6:	2317      	movs	r3, #23
1004b2e8:	18fb      	adds	r3, r7, r3
1004b2ea:	781b      	ldrb	r3, [r3, #0]
1004b2ec:	2b05      	cmp	r3, #5
1004b2ee:	d101      	bne.n	1004b2f4 <Gap_profile_set_char_value+0x90>
    {
        /**
         * The given attribute handle is not registered for GAP service.
         */
        return BLE_STATUS_INVALID_PARAMS;
1004b2f0:	2312      	movs	r3, #18
1004b2f2:	e04a      	b.n	1004b38a <Gap_profile_set_char_value+0x126>
    }

    if ((val_offset + val_length) > gap_chrs[i].val_buffer_p->buffer_len)
1004b2f4:	230c      	movs	r3, #12
1004b2f6:	18fb      	adds	r3, r7, r3
1004b2f8:	881a      	ldrh	r2, [r3, #0]
1004b2fa:	230a      	movs	r3, #10
1004b2fc:	18fb      	adds	r3, r7, r3
1004b2fe:	881b      	ldrh	r3, [r3, #0]
1004b300:	18d1      	adds	r1, r2, r3
1004b302:	2317      	movs	r3, #23
1004b304:	18fb      	adds	r3, r7, r3
1004b306:	781a      	ldrb	r2, [r3, #0]
1004b308:	4822      	ldr	r0, [pc, #136]	@ (1004b394 <Gap_profile_set_char_value+0x130>)
1004b30a:	0013      	movs	r3, r2
1004b30c:	00db      	lsls	r3, r3, #3
1004b30e:	189b      	adds	r3, r3, r2
1004b310:	009b      	lsls	r3, r3, #2
1004b312:	18c3      	adds	r3, r0, r3
1004b314:	3320      	adds	r3, #32
1004b316:	681b      	ldr	r3, [r3, #0]
1004b318:	889b      	ldrh	r3, [r3, #4]
1004b31a:	4299      	cmp	r1, r3
1004b31c:	dd01      	ble.n	1004b322 <Gap_profile_set_char_value+0xbe>
    {
        /**
         * Invalid value length.
         */
        return BLE_STATUS_INVALID_PARAMS;
1004b31e:	2312      	movs	r3, #18
1004b320:	e033      	b.n	1004b38a <Gap_profile_set_char_value+0x126>
    }

    /**
     * Write characteristic value.
     */
    memcpy(&gap_chrs[i].val_buffer_p->buffer_p[val_offset], val_p, val_length);
1004b322:	2417      	movs	r4, #23
1004b324:	193b      	adds	r3, r7, r4
1004b326:	781a      	ldrb	r2, [r3, #0]
1004b328:	491a      	ldr	r1, [pc, #104]	@ (1004b394 <Gap_profile_set_char_value+0x130>)
1004b32a:	0013      	movs	r3, r2
1004b32c:	00db      	lsls	r3, r3, #3
1004b32e:	189b      	adds	r3, r3, r2
1004b330:	009b      	lsls	r3, r3, #2
1004b332:	18cb      	adds	r3, r1, r3
1004b334:	3320      	adds	r3, #32
1004b336:	681b      	ldr	r3, [r3, #0]
1004b338:	689a      	ldr	r2, [r3, #8]
1004b33a:	230c      	movs	r3, #12
1004b33c:	18fb      	adds	r3, r7, r3
1004b33e:	881b      	ldrh	r3, [r3, #0]
1004b340:	18d0      	adds	r0, r2, r3
1004b342:	250a      	movs	r5, #10
1004b344:	197b      	adds	r3, r7, r5
1004b346:	881a      	ldrh	r2, [r3, #0]
1004b348:	687b      	ldr	r3, [r7, #4]
1004b34a:	0019      	movs	r1, r3
1004b34c:	f01c f86e 	bl	1006742c <memcpy>
    if ((gap_chrs[i].val_buffer_p->op_flags & BLE_GATT_SRV_OP_VALUE_VAR_LENGTH_FLAG) != 0U)
1004b350:	193b      	adds	r3, r7, r4
1004b352:	781a      	ldrb	r2, [r3, #0]
1004b354:	490f      	ldr	r1, [pc, #60]	@ (1004b394 <Gap_profile_set_char_value+0x130>)
1004b356:	0013      	movs	r3, r2
1004b358:	00db      	lsls	r3, r3, #3
1004b35a:	189b      	adds	r3, r3, r2
1004b35c:	009b      	lsls	r3, r3, #2
1004b35e:	18cb      	adds	r3, r1, r3
1004b360:	3320      	adds	r3, #32
1004b362:	681b      	ldr	r3, [r3, #0]
1004b364:	781b      	ldrb	r3, [r3, #0]
1004b366:	001a      	movs	r2, r3
1004b368:	2302      	movs	r3, #2
1004b36a:	4013      	ands	r3, r2
1004b36c:	d00c      	beq.n	1004b388 <Gap_profile_set_char_value+0x124>
    {
        gap_chrs[i].val_buffer_p->val_len = val_length;
1004b36e:	193b      	adds	r3, r7, r4
1004b370:	781a      	ldrb	r2, [r3, #0]
1004b372:	4908      	ldr	r1, [pc, #32]	@ (1004b394 <Gap_profile_set_char_value+0x130>)
1004b374:	0013      	movs	r3, r2
1004b376:	00db      	lsls	r3, r3, #3
1004b378:	189b      	adds	r3, r3, r2
1004b37a:	009b      	lsls	r3, r3, #2
1004b37c:	18cb      	adds	r3, r1, r3
1004b37e:	3320      	adds	r3, #32
1004b380:	681b      	ldr	r3, [r3, #0]
1004b382:	197a      	adds	r2, r7, r5
1004b384:	8812      	ldrh	r2, [r2, #0]
1004b386:	805a      	strh	r2, [r3, #2]
    }

    return BLE_STATUS_SUCCESS;
1004b388:	2300      	movs	r3, #0
}
1004b38a:	0018      	movs	r0, r3
1004b38c:	46bd      	mov	sp, r7
1004b38e:	b006      	add	sp, #24
1004b390:	bdb0      	pop	{r4, r5, r7, pc}
1004b392:	46c0      	nop			@ (mov r8, r8)
1004b394:	20001374 	.word	0x20001374

1004b398 <aci_gatt_srv_profile_init>:
    .chrs = {0, NULL},
};

tBleStatus aci_gatt_srv_profile_init(uint8_t Characteristics,
                                     uint16_t *Service_Changed_Handle)
{
1004b398:	b5f0      	push	{r4, r5, r6, r7, lr}
1004b39a:	b085      	sub	sp, #20
1004b39c:	af00      	add	r7, sp, #0
1004b39e:	0002      	movs	r2, r0
1004b3a0:	6039      	str	r1, [r7, #0]
1004b3a2:	1dfb      	adds	r3, r7, #7
1004b3a4:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gatt_srvc_handle;

  *Service_Changed_Handle = 0x0000;
1004b3a6:	683b      	ldr	r3, [r7, #0]
1004b3a8:	2200      	movs	r2, #0
1004b3aa:	801a      	strh	r2, [r3, #0]

  ret = aci_gatt_srv_add_service(&gatt_srvc);
1004b3ac:	250f      	movs	r5, #15
1004b3ae:	197c      	adds	r4, r7, r5
1004b3b0:	4b38      	ldr	r3, [pc, #224]	@ (1004b494 <aci_gatt_srv_profile_init+0xfc>)
1004b3b2:	0018      	movs	r0, r3
1004b3b4:	f006 fca8 	bl	10051d08 <aci_gatt_srv_add_service>
1004b3b8:	0003      	movs	r3, r0
1004b3ba:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004b3bc:	197b      	adds	r3, r7, r5
1004b3be:	781b      	ldrb	r3, [r3, #0]
1004b3c0:	2b00      	cmp	r3, #0
1004b3c2:	d002      	beq.n	1004b3ca <aci_gatt_srv_profile_init+0x32>
  {
    return ret;
1004b3c4:	197b      	adds	r3, r7, r5
1004b3c6:	781b      	ldrb	r3, [r3, #0]
1004b3c8:	e060      	b.n	1004b48c <aci_gatt_srv_profile_init+0xf4>
  }

  gatt_srvc_handle = aci_gatt_srv_get_service_handle(&gatt_srvc);
1004b3ca:	260c      	movs	r6, #12
1004b3cc:	19bc      	adds	r4, r7, r6
1004b3ce:	4b31      	ldr	r3, [pc, #196]	@ (1004b494 <aci_gatt_srv_profile_init+0xfc>)
1004b3d0:	0018      	movs	r0, r3
1004b3d2:	f006 fca6 	bl	10051d22 <aci_gatt_srv_get_service_handle>
1004b3d6:	0003      	movs	r3, r0
1004b3d8:	8023      	strh	r3, [r4, #0]

  if(Characteristics & GATT_INIT_SERVICE_CHANGED_BIT)
1004b3da:	1dfb      	adds	r3, r7, #7
1004b3dc:	781b      	ldrb	r3, [r3, #0]
1004b3de:	2201      	movs	r2, #1
1004b3e0:	4013      	ands	r3, r2
1004b3e2:	d011      	beq.n	1004b408 <aci_gatt_srv_profile_init+0x70>
  {
    ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_srvc_changed_chr, gatt_srvc_handle);
1004b3e4:	250f      	movs	r5, #15
1004b3e6:	197c      	adds	r4, r7, r5
1004b3e8:	19bb      	adds	r3, r7, r6
1004b3ea:	881a      	ldrh	r2, [r3, #0]
1004b3ec:	4b2a      	ldr	r3, [pc, #168]	@ (1004b498 <aci_gatt_srv_profile_init+0x100>)
1004b3ee:	0011      	movs	r1, r2
1004b3f0:	0018      	movs	r0, r3
1004b3f2:	f006 fca3 	bl	10051d3c <aci_gatt_srv_add_char>
1004b3f6:	0003      	movs	r3, r0
1004b3f8:	7023      	strb	r3, [r4, #0]
    if (ret != BLE_STATUS_SUCCESS)
1004b3fa:	197b      	adds	r3, r7, r5
1004b3fc:	781b      	ldrb	r3, [r3, #0]
1004b3fe:	2b00      	cmp	r3, #0
1004b400:	d002      	beq.n	1004b408 <aci_gatt_srv_profile_init+0x70>
    {
      return ret;
1004b402:	197b      	adds	r3, r7, r5
1004b404:	781b      	ldrb	r3, [r3, #0]
1004b406:	e041      	b.n	1004b48c <aci_gatt_srv_profile_init+0xf4>
    }
  }
  *Service_Changed_Handle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t*)&gatt_srvc_changed_chr);
1004b408:	4b23      	ldr	r3, [pc, #140]	@ (1004b498 <aci_gatt_srv_profile_init+0x100>)
1004b40a:	0018      	movs	r0, r3
1004b40c:	f006 fca9 	bl	10051d62 <aci_gatt_srv_get_char_decl_handle>
1004b410:	0003      	movs	r3, r0
1004b412:	001a      	movs	r2, r3
1004b414:	683b      	ldr	r3, [r7, #0]
1004b416:	801a      	strh	r2, [r3, #0]

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_clt_supp_feat_chr, gatt_srvc_handle);
1004b418:	250f      	movs	r5, #15
1004b41a:	197c      	adds	r4, r7, r5
1004b41c:	230c      	movs	r3, #12
1004b41e:	18fb      	adds	r3, r7, r3
1004b420:	881a      	ldrh	r2, [r3, #0]
1004b422:	4b1e      	ldr	r3, [pc, #120]	@ (1004b49c <aci_gatt_srv_profile_init+0x104>)
1004b424:	0011      	movs	r1, r2
1004b426:	0018      	movs	r0, r3
1004b428:	f006 fc88 	bl	10051d3c <aci_gatt_srv_add_char>
1004b42c:	0003      	movs	r3, r0
1004b42e:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004b430:	197b      	adds	r3, r7, r5
1004b432:	781b      	ldrb	r3, [r3, #0]
1004b434:	2b00      	cmp	r3, #0
1004b436:	d002      	beq.n	1004b43e <aci_gatt_srv_profile_init+0xa6>
  {
    return ret;
1004b438:	197b      	adds	r3, r7, r5
1004b43a:	781b      	ldrb	r3, [r3, #0]
1004b43c:	e026      	b.n	1004b48c <aci_gatt_srv_profile_init+0xf4>
  }

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_db_hash_chr, gatt_srvc_handle);
1004b43e:	250f      	movs	r5, #15
1004b440:	197c      	adds	r4, r7, r5
1004b442:	230c      	movs	r3, #12
1004b444:	18fb      	adds	r3, r7, r3
1004b446:	881a      	ldrh	r2, [r3, #0]
1004b448:	4b15      	ldr	r3, [pc, #84]	@ (1004b4a0 <aci_gatt_srv_profile_init+0x108>)
1004b44a:	0011      	movs	r1, r2
1004b44c:	0018      	movs	r0, r3
1004b44e:	f006 fc75 	bl	10051d3c <aci_gatt_srv_add_char>
1004b452:	0003      	movs	r3, r0
1004b454:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004b456:	197b      	adds	r3, r7, r5
1004b458:	781b      	ldrb	r3, [r3, #0]
1004b45a:	2b00      	cmp	r3, #0
1004b45c:	d002      	beq.n	1004b464 <aci_gatt_srv_profile_init+0xcc>
  {
    return ret;
1004b45e:	197b      	adds	r3, r7, r5
1004b460:	781b      	ldrb	r3, [r3, #0]
1004b462:	e013      	b.n	1004b48c <aci_gatt_srv_profile_init+0xf4>
  }

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_srv_supp_feat_chr, gatt_srvc_handle);
1004b464:	250f      	movs	r5, #15
1004b466:	197c      	adds	r4, r7, r5
1004b468:	230c      	movs	r3, #12
1004b46a:	18fb      	adds	r3, r7, r3
1004b46c:	881a      	ldrh	r2, [r3, #0]
1004b46e:	4b0d      	ldr	r3, [pc, #52]	@ (1004b4a4 <aci_gatt_srv_profile_init+0x10c>)
1004b470:	0011      	movs	r1, r2
1004b472:	0018      	movs	r0, r3
1004b474:	f006 fc62 	bl	10051d3c <aci_gatt_srv_add_char>
1004b478:	0003      	movs	r3, r0
1004b47a:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004b47c:	197b      	adds	r3, r7, r5
1004b47e:	781b      	ldrb	r3, [r3, #0]
1004b480:	2b00      	cmp	r3, #0
1004b482:	d002      	beq.n	1004b48a <aci_gatt_srv_profile_init+0xf2>
  {
    return ret;
1004b484:	197b      	adds	r3, r7, r5
1004b486:	781b      	ldrb	r3, [r3, #0]
1004b488:	e000      	b.n	1004b48c <aci_gatt_srv_profile_init+0xf4>
  }

  return   BLE_STATUS_SUCCESS;
1004b48a:	2300      	movs	r3, #0
}
1004b48c:	0018      	movs	r0, r3
1004b48e:	46bd      	mov	sp, r7
1004b490:	b005      	add	sp, #20
1004b492:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004b494:	2000146c 	.word	0x2000146c
1004b498:	10069dc8 	.word	0x10069dc8
1004b49c:	10069dec 	.word	0x10069dec
1004b4a0:	10069e10 	.word	0x10069e10
1004b4a4:	10069e34 	.word	0x10069e34

1004b4a8 <LL_PWR_IsSMPSReady>:
{
1004b4a8:	b580      	push	{r7, lr}
1004b4aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) == (PWR_SR2_SMPSRDY)) ? 1UL : 0UL);
1004b4ac:	4b05      	ldr	r3, [pc, #20]	@ (1004b4c4 <LL_PWR_IsSMPSReady+0x1c>)
1004b4ae:	695b      	ldr	r3, [r3, #20]
1004b4b0:	2204      	movs	r2, #4
1004b4b2:	4013      	ands	r3, r2
1004b4b4:	2b04      	cmp	r3, #4
1004b4b6:	d101      	bne.n	1004b4bc <LL_PWR_IsSMPSReady+0x14>
1004b4b8:	2301      	movs	r3, #1
1004b4ba:	e000      	b.n	1004b4be <LL_PWR_IsSMPSReady+0x16>
1004b4bc:	2300      	movs	r3, #0
}
1004b4be:	0018      	movs	r0, r3
1004b4c0:	46bd      	mov	sp, r7
1004b4c2:	bd80      	pop	{r7, pc}
1004b4c4:	48500000 	.word	0x48500000

1004b4c8 <LL_PWR_GetSMPSMode>:
{
1004b4c8:	b580      	push	{r7, lr}
1004b4ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(PWR->CR5, PWR_CR5_NOSMPS));
1004b4cc:	4b03      	ldr	r3, [pc, #12]	@ (1004b4dc <LL_PWR_GetSMPSMode+0x14>)
1004b4ce:	69da      	ldr	r2, [r3, #28]
1004b4d0:	2380      	movs	r3, #128	@ 0x80
1004b4d2:	00db      	lsls	r3, r3, #3
1004b4d4:	4013      	ands	r3, r2
}
1004b4d6:	0018      	movs	r0, r3
1004b4d8:	46bd      	mov	sp, r7
1004b4da:	bd80      	pop	{r7, pc}
1004b4dc:	48500000 	.word	0x48500000

1004b4e0 <LL_PWR_SetSMPSPrechargeMode>:
{
1004b4e0:	b580      	push	{r7, lr}
1004b4e2:	b082      	sub	sp, #8
1004b4e4:	af00      	add	r7, sp, #0
1004b4e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, mode);
1004b4e8:	4b06      	ldr	r3, [pc, #24]	@ (1004b504 <LL_PWR_SetSMPSPrechargeMode+0x24>)
1004b4ea:	69db      	ldr	r3, [r3, #28]
1004b4ec:	4a06      	ldr	r2, [pc, #24]	@ (1004b508 <LL_PWR_SetSMPSPrechargeMode+0x28>)
1004b4ee:	4013      	ands	r3, r2
1004b4f0:	0019      	movs	r1, r3
1004b4f2:	4b04      	ldr	r3, [pc, #16]	@ (1004b504 <LL_PWR_SetSMPSPrechargeMode+0x24>)
1004b4f4:	687a      	ldr	r2, [r7, #4]
1004b4f6:	430a      	orrs	r2, r1
1004b4f8:	61da      	str	r2, [r3, #28]
}
1004b4fa:	46c0      	nop			@ (mov r8, r8)
1004b4fc:	46bd      	mov	sp, r7
1004b4fe:	b002      	add	sp, #8
1004b500:	bd80      	pop	{r7, pc}
1004b502:	46c0      	nop			@ (mov r8, r8)
1004b504:	48500000 	.word	0x48500000
1004b508:	fffffdff 	.word	0xfffffdff

1004b50c <LL_PWR_IsEnabledSMPSPrechargeMode>:
{
1004b50c:	b580      	push	{r7, lr}
1004b50e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR5, PWR_CR5_SMPSFBYP) == (PWR_CR5_SMPSFBYP)) ? 1UL : 0UL);
1004b510:	4b07      	ldr	r3, [pc, #28]	@ (1004b530 <LL_PWR_IsEnabledSMPSPrechargeMode+0x24>)
1004b512:	69da      	ldr	r2, [r3, #28]
1004b514:	2380      	movs	r3, #128	@ 0x80
1004b516:	009b      	lsls	r3, r3, #2
1004b518:	401a      	ands	r2, r3
1004b51a:	2380      	movs	r3, #128	@ 0x80
1004b51c:	009b      	lsls	r3, r3, #2
1004b51e:	429a      	cmp	r2, r3
1004b520:	d101      	bne.n	1004b526 <LL_PWR_IsEnabledSMPSPrechargeMode+0x1a>
1004b522:	2301      	movs	r3, #1
1004b524:	e000      	b.n	1004b528 <LL_PWR_IsEnabledSMPSPrechargeMode+0x1c>
1004b526:	2300      	movs	r3, #0
}
1004b528:	0018      	movs	r0, r3
1004b52a:	46bd      	mov	sp, r7
1004b52c:	bd80      	pop	{r7, pc}
1004b52e:	46c0      	nop			@ (mov r8, r8)
1004b530:	48500000 	.word	0x48500000

1004b534 <LL_PWR_SMPS_SetOutputVoltageLevel>:
{
1004b534:	b580      	push	{r7, lr}
1004b536:	b082      	sub	sp, #8
1004b538:	af00      	add	r7, sp, #0
1004b53a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLVL, OutputVoltageLevel);
1004b53c:	4b06      	ldr	r3, [pc, #24]	@ (1004b558 <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
1004b53e:	69db      	ldr	r3, [r3, #28]
1004b540:	220f      	movs	r2, #15
1004b542:	4393      	bics	r3, r2
1004b544:	0019      	movs	r1, r3
1004b546:	4b04      	ldr	r3, [pc, #16]	@ (1004b558 <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
1004b548:	687a      	ldr	r2, [r7, #4]
1004b54a:	430a      	orrs	r2, r1
1004b54c:	61da      	str	r2, [r3, #28]
}
1004b54e:	46c0      	nop			@ (mov r8, r8)
1004b550:	46bd      	mov	sp, r7
1004b552:	b002      	add	sp, #8
1004b554:	bd80      	pop	{r7, pc}
1004b556:	46c0      	nop			@ (mov r8, r8)
1004b558:	48500000 	.word	0x48500000

1004b55c <RADIO_GetMaxPALevel>:

  return pa_level_table[PA_Level];
}

uint8_t RADIO_GetMaxPALevel(void)
{
1004b55c:	b580      	push	{r7, lr}
1004b55e:	af00      	add	r7, sp, #0
  return HP_TX_POWER_LEVELS - 1;
1004b560:	2320      	movs	r3, #32
}
1004b562:	0018      	movs	r0, r3
1004b564:	46bd      	mov	sp, r7
1004b566:	bd80      	pop	{r7, pc}

1004b568 <RADIO_GetDefaultPALevel>:

uint8_t RADIO_GetDefaultPALevel(void)
{
1004b568:	b580      	push	{r7, lr}
1004b56a:	af00      	add	r7, sp, #0
  return DEFAULT_TX_PA_LEVEL;
1004b56c:	231f      	movs	r3, #31
}
1004b56e:	0018      	movs	r0, r3
1004b570:	46bd      	mov	sp, r7
1004b572:	bd80      	pop	{r7, pc}

1004b574 <RADIO_SetHighPower>:
        *Max_Tx_Power = MAX_TX_POWER_LOW;
    }
}

void RADIO_SetHighPower(FunctionalState state)
{
1004b574:	b580      	push	{r7, lr}
1004b576:	b082      	sub	sp, #8
1004b578:	af00      	add	r7, sp, #0
1004b57a:	0002      	movs	r2, r0
1004b57c:	1dfb      	adds	r3, r7, #7
1004b57e:	701a      	strb	r2, [r3, #0]
  if(state != DISABLE)
1004b580:	1dfb      	adds	r3, r7, #7
1004b582:	781b      	ldrb	r3, [r3, #0]
1004b584:	2b00      	cmp	r3, #0
1004b586:	d007      	beq.n	1004b598 <RADIO_SetHighPower+0x24>
  {
    if(high_power == FALSE)
1004b588:	4b1d      	ldr	r3, [pc, #116]	@ (1004b600 <RADIO_SetHighPower+0x8c>)
1004b58a:	781b      	ldrb	r3, [r3, #0]
1004b58c:	2b00      	cmp	r3, #0
1004b58e:	d10a      	bne.n	1004b5a6 <RADIO_SetHighPower+0x32>
    {
      high_power = TRUE;
1004b590:	4b1b      	ldr	r3, [pc, #108]	@ (1004b600 <RADIO_SetHighPower+0x8c>)
1004b592:	2201      	movs	r2, #1
1004b594:	701a      	strb	r2, [r3, #0]
1004b596:	e006      	b.n	1004b5a6 <RADIO_SetHighPower+0x32>
#endif
    }
  }
  else
  {
    if(high_power == TRUE)
1004b598:	4b19      	ldr	r3, [pc, #100]	@ (1004b600 <RADIO_SetHighPower+0x8c>)
1004b59a:	781b      	ldrb	r3, [r3, #0]
1004b59c:	2b01      	cmp	r3, #1
1004b59e:	d102      	bne.n	1004b5a6 <RADIO_SetHighPower+0x32>
    {
      high_power = FALSE;
1004b5a0:	4b17      	ldr	r3, [pc, #92]	@ (1004b600 <RADIO_SetHighPower+0x8c>)
1004b5a2:	2200      	movs	r2, #0
1004b5a4:	701a      	strb	r2, [r3, #0]
      LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
#endif
    }
  }

  if (LL_PWR_IsEnabledSMPSPrechargeMode() || (LL_PWR_GetSMPSMode() == LL_PWR_NO_SMPS))
1004b5a6:	f7ff ffb1 	bl	1004b50c <LL_PWR_IsEnabledSMPSPrechargeMode>
1004b5aa:	1e03      	subs	r3, r0, #0
1004b5ac:	d124      	bne.n	1004b5f8 <RADIO_SetHighPower+0x84>
1004b5ae:	f7ff ff8b 	bl	1004b4c8 <LL_PWR_GetSMPSMode>
1004b5b2:	0002      	movs	r2, r0
1004b5b4:	2380      	movs	r3, #128	@ 0x80
1004b5b6:	00db      	lsls	r3, r3, #3
1004b5b8:	429a      	cmp	r2, r3
1004b5ba:	d01d      	beq.n	1004b5f8 <RADIO_SetHighPower+0x84>
    return;

  /* Bypass SMPS */
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_SMPS_PRECHARGE);
1004b5bc:	2380      	movs	r3, #128	@ 0x80
1004b5be:	009b      	lsls	r3, r3, #2
1004b5c0:	0018      	movs	r0, r3
1004b5c2:	f7ff ff8d 	bl	1004b4e0 <LL_PWR_SetSMPSPrechargeMode>
  while(LL_PWR_IsSMPSReady());
1004b5c6:	46c0      	nop			@ (mov r8, r8)
1004b5c8:	f7ff ff6e 	bl	1004b4a8 <LL_PWR_IsSMPSReady>
1004b5cc:	1e03      	subs	r3, r0, #0
1004b5ce:	d1fb      	bne.n	1004b5c8 <RADIO_SetHighPower+0x54>
  /* Change level */
  if(state != DISABLE)
1004b5d0:	1dfb      	adds	r3, r7, #7
1004b5d2:	781b      	ldrb	r3, [r3, #0]
1004b5d4:	2b00      	cmp	r3, #0
1004b5d6:	d003      	beq.n	1004b5e0 <RADIO_SetHighPower+0x6c>
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V90);
1004b5d8:	200e      	movs	r0, #14
1004b5da:	f7ff ffab 	bl	1004b534 <LL_PWR_SMPS_SetOutputVoltageLevel>
1004b5de:	e002      	b.n	1004b5e6 <RADIO_SetHighPower+0x72>
  }
  else
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V40);
1004b5e0:	2004      	movs	r0, #4
1004b5e2:	f7ff ffa7 	bl	1004b534 <LL_PWR_SMPS_SetOutputVoltageLevel>
  }
  /* Disable bypass*/
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_NO_SMPS_PRECHARGE);
1004b5e6:	2000      	movs	r0, #0
1004b5e8:	f7ff ff7a 	bl	1004b4e0 <LL_PWR_SetSMPSPrechargeMode>
  while(!LL_PWR_IsSMPSReady());
1004b5ec:	46c0      	nop			@ (mov r8, r8)
1004b5ee:	f7ff ff5b 	bl	1004b4a8 <LL_PWR_IsSMPSReady>
1004b5f2:	1e03      	subs	r3, r0, #0
1004b5f4:	d0fb      	beq.n	1004b5ee <RADIO_SetHighPower+0x7a>
1004b5f6:	e000      	b.n	1004b5fa <RADIO_SetHighPower+0x86>
    return;
1004b5f8:	46c0      	nop			@ (mov r8, r8)
}
1004b5fa:	46bd      	mov	sp, r7
1004b5fc:	b002      	add	sp, #8
1004b5fe:	bd80      	pop	{r7, pc}
1004b600:	20000e5f 	.word	0x20000e5f

1004b604 <HAL_RADIO_TxRxSeqCallback>:

void HAL_RADIO_TxRxSeqCallback(void)
{
1004b604:	b580      	push	{r7, lr}
1004b606:	af00      	add	r7, sp, #0
      MODIFY_REG_FIELD(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS, 0);
    }
    LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
  }
#endif
}
1004b608:	46c0      	nop			@ (mov r8, r8)
1004b60a:	46bd      	mov	sp, r7
1004b60c:	bd80      	pop	{r7, pc}

1004b60e <SYSTEM_DEBUG_SIGNAL_SET>:
/***********************/
/** System debug APIs **/
/***********************/

void SYSTEM_DEBUG_SIGNAL_SET(system_debug_signal_t signal)
{
1004b60e:	b580      	push	{r7, lr}
1004b610:	b082      	sub	sp, #8
1004b612:	af00      	add	r7, sp, #0
1004b614:	0002      	movs	r2, r0
1004b616:	1dfb      	adds	r3, r7, #7
1004b618:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_SET(signal, system_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
1004b61a:	46c0      	nop			@ (mov r8, r8)
1004b61c:	46bd      	mov	sp, r7
1004b61e:	b002      	add	sp, #8
1004b620:	bd80      	pop	{r7, pc}

1004b622 <SYSTEM_DEBUG_SIGNAL_RESET>:

void SYSTEM_DEBUG_SIGNAL_RESET(system_debug_signal_t signal)
{
1004b622:	b580      	push	{r7, lr}
1004b624:	b082      	sub	sp, #8
1004b626:	af00      	add	r7, sp, #0
1004b628:	0002      	movs	r2, r0
1004b62a:	1dfb      	adds	r3, r7, #7
1004b62c:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_RESET(signal, system_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
1004b62e:	46c0      	nop			@ (mov r8, r8)
1004b630:	46bd      	mov	sp, r7
1004b632:	b002      	add	sp, #8
1004b634:	bd80      	pop	{r7, pc}

1004b636 <LL_SYSCFG_GetDeviceRevision>:
  * @brief  Get the device cut revision (metal fix) information.
  * @rmtoll DIE_ID REVISION   LL_SYSCFG_GetDeviceRevision
  * @retval Device ID
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetDeviceRevision(void)
{
1004b636:	b580      	push	{r7, lr}
1004b638:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_REVISION) >> SYSCFG_DIE_ID_REVISION_Pos);
1004b63a:	2380      	movs	r3, #128	@ 0x80
1004b63c:	05db      	lsls	r3, r3, #23
1004b63e:	681b      	ldr	r3, [r3, #0]
1004b640:	220f      	movs	r2, #15
1004b642:	4013      	ands	r3, r2
}
1004b644:	0018      	movs	r0, r3
1004b646:	46bd      	mov	sp, r7
1004b648:	bd80      	pop	{r7, pc}

1004b64a <LL_SYSCFG_GetDeviceVersion>:
  * @brief  Get the device cut version information.
  * @rmtoll DIE_ID VERSION   LL_SYSCFG_GetDeviceVersion
  * @retval Device ID
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetDeviceVersion(void)
{
1004b64a:	b580      	push	{r7, lr}
1004b64c:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_VERSION) >> SYSCFG_DIE_ID_VERSION_Pos);
1004b64e:	2380      	movs	r3, #128	@ 0x80
1004b650:	05db      	lsls	r3, r3, #23
1004b652:	681b      	ldr	r3, [r3, #0]
1004b654:	091b      	lsrs	r3, r3, #4
1004b656:	220f      	movs	r2, #15
1004b658:	4013      	ands	r3, r2
}
1004b65a:	0018      	movs	r0, r3
1004b65c:	46bd      	mov	sp, r7
1004b65e:	bd80      	pop	{r7, pc}

1004b660 <LL_SYSCFG_GetDeviceJTAG_ID>:
  * @brief  Get the JTAG_ID device information.
  * @rmtoll JTAG_ID    LL_SYSCFG_GetDeviceJTAG_ID
  * @retval Device ID
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetDeviceJTAG_ID(void)
{
1004b660:	b580      	push	{r7, lr}
1004b662:	af00      	add	r7, sp, #0
  return (uint32_t)READ_REG(SYSCFG->JTAG_ID);
1004b664:	2380      	movs	r3, #128	@ 0x80
1004b666:	05db      	lsls	r3, r3, #23
1004b668:	685b      	ldr	r3, [r3, #4]
}
1004b66a:	0018      	movs	r0, r3
1004b66c:	46bd      	mov	sp, r7
1004b66e:	bd80      	pop	{r7, pc}

1004b670 <LL_GetFlashSize>:
    * @note   This bitfield indicates the words number of the device Flash memory expressed.
    *         As an example, 0x7FFF corresponds to 128 Kbytes.
    * @retval FLASH_SIZE[15:0]: Flash memory size
    */
__STATIC_INLINE uint32_t LL_GetFlashSize(void)
{
1004b670:	b580      	push	{r7, lr}
1004b672:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)FLASHSIZE_BASE_ADDRESS)) & 0x0000FFFFUL);
1004b674:	4b03      	ldr	r3, [pc, #12]	@ (1004b684 <LL_GetFlashSize+0x14>)
1004b676:	681b      	ldr	r3, [r3, #0]
1004b678:	041b      	lsls	r3, r3, #16
1004b67a:	0c1b      	lsrs	r3, r3, #16
}
1004b67c:	0018      	movs	r0, r3
1004b67e:	46bd      	mov	sp, r7
1004b680:	bd80      	pop	{r7, pc}
1004b682:	46c0      	nop			@ (mov r8, r8)
1004b684:	40001014 	.word	0x40001014

1004b688 <LL_GetRAMSize>:
    * @arg LL_UTILS_RAMSIZE_32K
    * @arg LL_UTILS_RAMSIZE_48K
    * @arg LL_UTILS_RAMSIZE_64K
    */
  __STATIC_INLINE uint32_t LL_GetRAMSize(void)
  {
1004b688:	b580      	push	{r7, lr}
1004b68a:	b082      	sub	sp, #8
1004b68c:	af00      	add	r7, sp, #0
    __IOM uint32_t tmpreg;
#if defined(FLASH_FLASH_SIZE_RAM_SIZE)
    tmpreg = (READ_REG(*((uint32_t *)RAMSIZE_BASE_ADDRESS)) & FLASH_FLASH_SIZE_RAM_SIZE) >> FLASH_FLASH_SIZE_RAM_SIZE_Pos;
1004b68e:	4b08      	ldr	r3, [pc, #32]	@ (1004b6b0 <LL_GetRAMSize+0x28>)
1004b690:	681b      	ldr	r3, [r3, #0]
1004b692:	0c5b      	lsrs	r3, r3, #17
1004b694:	2203      	movs	r2, #3
1004b696:	4013      	ands	r3, r2
1004b698:	607b      	str	r3, [r7, #4]

    if (tmpreg == 0) {
1004b69a:	687b      	ldr	r3, [r7, #4]
1004b69c:	2b00      	cmp	r3, #0
1004b69e:	d101      	bne.n	1004b6a4 <LL_GetRAMSize+0x1c>
      tmpreg = LL_UTILS_RAMSIZE_32K;
1004b6a0:	2301      	movs	r3, #1
1004b6a2:	607b      	str	r3, [r7, #4]
    }
#else
    tmpreg = LL_UTILS_RAMSIZE_24K;
#endif
    
    return tmpreg;
1004b6a4:	687b      	ldr	r3, [r7, #4]
  }
1004b6a6:	0018      	movs	r0, r3
1004b6a8:	46bd      	mov	sp, r7
1004b6aa:	b002      	add	sp, #8
1004b6ac:	bd80      	pop	{r7, pc}
1004b6ae:	46c0      	nop			@ (mov r8, r8)
1004b6b0:	40001014 	.word	0x40001014

1004b6b4 <GetPartInfo>:
/* Private variables ---------------------------------------------------------*/

/*---------------------------------------------------------------------------*/

void GetPartInfo(PartInfoType *partInfo)
{
1004b6b4:	b580      	push	{r7, lr}
1004b6b6:	b084      	sub	sp, #16
1004b6b8:	af00      	add	r7, sp, #0
1004b6ba:	6078      	str	r0, [r7, #4]
  uint32_t jtag_id;

  partInfo->die_id = DIE_SW_ID_UNKOWN;
1004b6bc:	687b      	ldr	r3, [r7, #4]
1004b6be:	22ff      	movs	r2, #255	@ 0xff
1004b6c0:	701a      	strb	r2, [r3, #0]

  jtag_id = LL_SYSCFG_GetDeviceJTAG_ID();
1004b6c2:	f7ff ffcd 	bl	1004b660 <LL_SYSCFG_GetDeviceJTAG_ID>
1004b6c6:	0003      	movs	r3, r0
1004b6c8:	60fb      	str	r3, [r7, #12]

#if defined(STM32WB09)
  if(jtag_id == JTAG_ID_CODE_STM32WB09XX)
1004b6ca:	68fb      	ldr	r3, [r7, #12]
1004b6cc:	4a18      	ldr	r2, [pc, #96]	@ (1004b730 <GetPartInfo+0x7c>)
1004b6ce:	4293      	cmp	r3, r2
1004b6d0:	d102      	bne.n	1004b6d8 <GetPartInfo+0x24>
  {
    partInfo->die_id = DIE_SW_ID_STM32WB09XX;
1004b6d2:	687b      	ldr	r3, [r7, #4]
1004b6d4:	2206      	movs	r2, #6
1004b6d6:	701a      	strb	r2, [r3, #0]
  {
    partInfo->die_id = DIE_SW_ID_STM32WB05XX;
  }
#endif

  partInfo->die_major     =  LL_SYSCFG_GetDeviceVersion();
1004b6d8:	f7ff ffb7 	bl	1004b64a <LL_SYSCFG_GetDeviceVersion>
1004b6dc:	0003      	movs	r3, r0
1004b6de:	b2da      	uxtb	r2, r3
1004b6e0:	687b      	ldr	r3, [r7, #4]
1004b6e2:	705a      	strb	r2, [r3, #1]
  partInfo->die_cut       =  LL_SYSCFG_GetDeviceRevision();
1004b6e4:	f7ff ffa7 	bl	1004b636 <LL_SYSCFG_GetDeviceRevision>
1004b6e8:	0003      	movs	r3, r0
1004b6ea:	b2da      	uxtb	r2, r3
1004b6ec:	687b      	ldr	r3, [r7, #4]
1004b6ee:	709a      	strb	r2, [r3, #2]
  partInfo->jtag_id_code  =  LL_SYSCFG_GetDeviceJTAG_ID(); // Duplicated
1004b6f0:	f7ff ffb6 	bl	1004b660 <LL_SYSCFG_GetDeviceJTAG_ID>
1004b6f4:	0002      	movs	r2, r0
1004b6f6:	687b      	ldr	r3, [r7, #4]
1004b6f8:	605a      	str	r2, [r3, #4]
  partInfo->flash_size    =  (LL_GetFlashSize() + 1) * 4;
1004b6fa:	f7ff ffb9 	bl	1004b670 <LL_GetFlashSize>
1004b6fe:	0003      	movs	r3, r0
1004b700:	3301      	adds	r3, #1
1004b702:	009a      	lsls	r2, r3, #2
1004b704:	687b      	ldr	r3, [r7, #4]
1004b706:	609a      	str	r2, [r3, #8]

  if (LL_GetRAMSize() != LL_UTILS_RAMSIZE_24K)
1004b708:	f7ff ffbe 	bl	1004b688 <LL_GetRAMSize>
1004b70c:	1e03      	subs	r3, r0, #0
1004b70e:	d007      	beq.n	1004b720 <GetPartInfo+0x6c>
  {
    partInfo->ram_size    =  (LL_GetRAMSize() + 1) * 16 * 1024;
1004b710:	f7ff ffba 	bl	1004b688 <LL_GetRAMSize>
1004b714:	0003      	movs	r3, r0
1004b716:	3301      	adds	r3, #1
1004b718:	039a      	lsls	r2, r3, #14
1004b71a:	687b      	ldr	r3, [r7, #4]
1004b71c:	60da      	str	r2, [r3, #12]
  else
  {
    partInfo->ram_size    =  24*1024;
  }

}
1004b71e:	e003      	b.n	1004b728 <GetPartInfo+0x74>
    partInfo->ram_size    =  24*1024;
1004b720:	687b      	ldr	r3, [r7, #4]
1004b722:	22c0      	movs	r2, #192	@ 0xc0
1004b724:	01d2      	lsls	r2, r2, #7
1004b726:	60da      	str	r2, [r3, #12]
}
1004b728:	46c0      	nop			@ (mov r8, r8)
1004b72a:	46bd      	mov	sp, r7
1004b72c:	b004      	add	sp, #16
1004b72e:	bd80      	pop	{r7, pc}
1004b730:	02032041 	.word	0x02032041

1004b734 <Osal_MemCpy4>:
 * A version of the memcpy that only uses 32-bit accesses.
 * dest and src must be 32-bit aligned and size must be a multiple of 4.
 */
void Osal_MemCpy4(uint32_t *dest, const uint32_t *src, unsigned int size)
{
    for (unsigned int i = 0; i < size/4; i++)
1004b734:	2300      	movs	r3, #0
{
1004b736:	b510      	push	{r4, lr}
    for (unsigned int i = 0; i < size/4; i++)
1004b738:	0892      	lsrs	r2, r2, #2
1004b73a:	0092      	lsls	r2, r2, #2
1004b73c:	4293      	cmp	r3, r2
1004b73e:	d100      	bne.n	1004b742 <Osal_MemCpy4+0xe>
        dest[i] = src[i];
}
1004b740:	bd10      	pop	{r4, pc}
        dest[i] = src[i];
1004b742:	58cc      	ldr	r4, [r1, r3]
1004b744:	50c4      	str	r4, [r0, r3]
    for (unsigned int i = 0; i < size/4; i++)
1004b746:	3304      	adds	r3, #4
1004b748:	e7f8      	b.n	1004b73c <Osal_MemCpy4+0x8>

1004b74a <LST_init_head>:

/******************************************************************************
 * Function Definitions
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
1004b74a:	b580      	push	{r7, lr}
1004b74c:	b082      	sub	sp, #8
1004b74e:	af00      	add	r7, sp, #0
1004b750:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
1004b752:	687b      	ldr	r3, [r7, #4]
1004b754:	1d3a      	adds	r2, r7, #4
1004b756:	7810      	ldrb	r0, [r2, #0]
1004b758:	781a      	ldrb	r2, [r3, #0]
1004b75a:	2100      	movs	r1, #0
1004b75c:	400a      	ands	r2, r1
1004b75e:	1c11      	adds	r1, r2, #0
1004b760:	1c02      	adds	r2, r0, #0
1004b762:	430a      	orrs	r2, r1
1004b764:	701a      	strb	r2, [r3, #0]
1004b766:	1d7a      	adds	r2, r7, #5
1004b768:	7810      	ldrb	r0, [r2, #0]
1004b76a:	785a      	ldrb	r2, [r3, #1]
1004b76c:	2100      	movs	r1, #0
1004b76e:	400a      	ands	r2, r1
1004b770:	1c11      	adds	r1, r2, #0
1004b772:	1c02      	adds	r2, r0, #0
1004b774:	430a      	orrs	r2, r1
1004b776:	705a      	strb	r2, [r3, #1]
1004b778:	1dba      	adds	r2, r7, #6
1004b77a:	7810      	ldrb	r0, [r2, #0]
1004b77c:	789a      	ldrb	r2, [r3, #2]
1004b77e:	2100      	movs	r1, #0
1004b780:	400a      	ands	r2, r1
1004b782:	1c11      	adds	r1, r2, #0
1004b784:	1c02      	adds	r2, r0, #0
1004b786:	430a      	orrs	r2, r1
1004b788:	709a      	strb	r2, [r3, #2]
1004b78a:	1dfa      	adds	r2, r7, #7
1004b78c:	7810      	ldrb	r0, [r2, #0]
1004b78e:	78da      	ldrb	r2, [r3, #3]
1004b790:	2100      	movs	r1, #0
1004b792:	400a      	ands	r2, r1
1004b794:	1c11      	adds	r1, r2, #0
1004b796:	1c02      	adds	r2, r0, #0
1004b798:	430a      	orrs	r2, r1
1004b79a:	70da      	strb	r2, [r3, #3]
  listHead->prev = listHead;
1004b79c:	687b      	ldr	r3, [r7, #4]
1004b79e:	1d3a      	adds	r2, r7, #4
1004b7a0:	7810      	ldrb	r0, [r2, #0]
1004b7a2:	791a      	ldrb	r2, [r3, #4]
1004b7a4:	2100      	movs	r1, #0
1004b7a6:	400a      	ands	r2, r1
1004b7a8:	1c11      	adds	r1, r2, #0
1004b7aa:	1c02      	adds	r2, r0, #0
1004b7ac:	430a      	orrs	r2, r1
1004b7ae:	711a      	strb	r2, [r3, #4]
1004b7b0:	1d7a      	adds	r2, r7, #5
1004b7b2:	7810      	ldrb	r0, [r2, #0]
1004b7b4:	795a      	ldrb	r2, [r3, #5]
1004b7b6:	2100      	movs	r1, #0
1004b7b8:	400a      	ands	r2, r1
1004b7ba:	1c11      	adds	r1, r2, #0
1004b7bc:	1c02      	adds	r2, r0, #0
1004b7be:	430a      	orrs	r2, r1
1004b7c0:	715a      	strb	r2, [r3, #5]
1004b7c2:	1dba      	adds	r2, r7, #6
1004b7c4:	7810      	ldrb	r0, [r2, #0]
1004b7c6:	799a      	ldrb	r2, [r3, #6]
1004b7c8:	2100      	movs	r1, #0
1004b7ca:	400a      	ands	r2, r1
1004b7cc:	1c11      	adds	r1, r2, #0
1004b7ce:	1c02      	adds	r2, r0, #0
1004b7d0:	430a      	orrs	r2, r1
1004b7d2:	719a      	strb	r2, [r3, #6]
1004b7d4:	1dfa      	adds	r2, r7, #7
1004b7d6:	7810      	ldrb	r0, [r2, #0]
1004b7d8:	79da      	ldrb	r2, [r3, #7]
1004b7da:	2100      	movs	r1, #0
1004b7dc:	400a      	ands	r2, r1
1004b7de:	1c11      	adds	r1, r2, #0
1004b7e0:	1c02      	adds	r2, r0, #0
1004b7e2:	430a      	orrs	r2, r1
1004b7e4:	71da      	strb	r2, [r3, #7]
}
1004b7e6:	46c0      	nop			@ (mov r8, r8)
1004b7e8:	46bd      	mov	sp, r7
1004b7ea:	b002      	add	sp, #8
1004b7ec:	bd80      	pop	{r7, pc}

1004b7ee <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
1004b7ee:	b580      	push	{r7, lr}
1004b7f0:	b086      	sub	sp, #24
1004b7f2:	af00      	add	r7, sp, #0
1004b7f4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b7f6:	f3ef 8310 	mrs	r3, PRIMASK
1004b7fa:	60fb      	str	r3, [r7, #12]
  return(result);
1004b7fc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
1004b7fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
1004b800:	b672      	cpsid	i
}
1004b802:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
1004b804:	687b      	ldr	r3, [r7, #4]
1004b806:	781a      	ldrb	r2, [r3, #0]
1004b808:	7859      	ldrb	r1, [r3, #1]
1004b80a:	0209      	lsls	r1, r1, #8
1004b80c:	430a      	orrs	r2, r1
1004b80e:	7899      	ldrb	r1, [r3, #2]
1004b810:	0409      	lsls	r1, r1, #16
1004b812:	430a      	orrs	r2, r1
1004b814:	78db      	ldrb	r3, [r3, #3]
1004b816:	061b      	lsls	r3, r3, #24
1004b818:	4313      	orrs	r3, r2
1004b81a:	001a      	movs	r2, r3
1004b81c:	687b      	ldr	r3, [r7, #4]
1004b81e:	4293      	cmp	r3, r2
1004b820:	d104      	bne.n	1004b82c <LST_is_empty+0x3e>
  {
    return_value = TRUE;
1004b822:	2317      	movs	r3, #23
1004b824:	18fb      	adds	r3, r7, r3
1004b826:	2201      	movs	r2, #1
1004b828:	701a      	strb	r2, [r3, #0]
1004b82a:	e003      	b.n	1004b834 <LST_is_empty+0x46>
  }
  else
  {
    return_value = FALSE;
1004b82c:	2317      	movs	r3, #23
1004b82e:	18fb      	adds	r3, r7, r3
1004b830:	2200      	movs	r2, #0
1004b832:	701a      	strb	r2, [r3, #0]
1004b834:	693b      	ldr	r3, [r7, #16]
1004b836:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b838:	68bb      	ldr	r3, [r7, #8]
1004b83a:	f383 8810 	msr	PRIMASK, r3
}
1004b83e:	46c0      	nop			@ (mov r8, r8)
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
1004b840:	2317      	movs	r3, #23
1004b842:	18fb      	adds	r3, r7, r3
1004b844:	781b      	ldrb	r3, [r3, #0]
}
1004b846:	0018      	movs	r0, r3
1004b848:	46bd      	mov	sp, r7
1004b84a:	b006      	add	sp, #24
1004b84c:	bd80      	pop	{r7, pc}

1004b84e <LST_insert_tail>:

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}

void LST_insert_tail (tListNode * listHead, tListNode * node)
{
1004b84e:	b590      	push	{r4, r7, lr}
1004b850:	b087      	sub	sp, #28
1004b852:	af00      	add	r7, sp, #0
1004b854:	6078      	str	r0, [r7, #4]
1004b856:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b858:	f3ef 8310 	mrs	r3, PRIMASK
1004b85c:	60fb      	str	r3, [r7, #12]
  return(result);
1004b85e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
1004b860:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
1004b862:	b672      	cpsid	i
}
1004b864:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
1004b866:	683b      	ldr	r3, [r7, #0]
1004b868:	1d3a      	adds	r2, r7, #4
1004b86a:	7810      	ldrb	r0, [r2, #0]
1004b86c:	781a      	ldrb	r2, [r3, #0]
1004b86e:	2100      	movs	r1, #0
1004b870:	400a      	ands	r2, r1
1004b872:	1c11      	adds	r1, r2, #0
1004b874:	1c02      	adds	r2, r0, #0
1004b876:	430a      	orrs	r2, r1
1004b878:	701a      	strb	r2, [r3, #0]
1004b87a:	1d7a      	adds	r2, r7, #5
1004b87c:	7810      	ldrb	r0, [r2, #0]
1004b87e:	785a      	ldrb	r2, [r3, #1]
1004b880:	2100      	movs	r1, #0
1004b882:	400a      	ands	r2, r1
1004b884:	1c11      	adds	r1, r2, #0
1004b886:	1c02      	adds	r2, r0, #0
1004b888:	430a      	orrs	r2, r1
1004b88a:	705a      	strb	r2, [r3, #1]
1004b88c:	1dba      	adds	r2, r7, #6
1004b88e:	7810      	ldrb	r0, [r2, #0]
1004b890:	789a      	ldrb	r2, [r3, #2]
1004b892:	2100      	movs	r1, #0
1004b894:	400a      	ands	r2, r1
1004b896:	1c11      	adds	r1, r2, #0
1004b898:	1c02      	adds	r2, r0, #0
1004b89a:	430a      	orrs	r2, r1
1004b89c:	709a      	strb	r2, [r3, #2]
1004b89e:	1dfa      	adds	r2, r7, #7
1004b8a0:	7810      	ldrb	r0, [r2, #0]
1004b8a2:	78da      	ldrb	r2, [r3, #3]
1004b8a4:	2100      	movs	r1, #0
1004b8a6:	400a      	ands	r2, r1
1004b8a8:	1c11      	adds	r1, r2, #0
1004b8aa:	1c02      	adds	r2, r0, #0
1004b8ac:	430a      	orrs	r2, r1
1004b8ae:	70da      	strb	r2, [r3, #3]
  node->prev = listHead->prev;
1004b8b0:	687b      	ldr	r3, [r7, #4]
1004b8b2:	791a      	ldrb	r2, [r3, #4]
1004b8b4:	7959      	ldrb	r1, [r3, #5]
1004b8b6:	0209      	lsls	r1, r1, #8
1004b8b8:	430a      	orrs	r2, r1
1004b8ba:	7999      	ldrb	r1, [r3, #6]
1004b8bc:	0409      	lsls	r1, r1, #16
1004b8be:	430a      	orrs	r2, r1
1004b8c0:	79db      	ldrb	r3, [r3, #7]
1004b8c2:	061b      	lsls	r3, r3, #24
1004b8c4:	4313      	orrs	r3, r2
1004b8c6:	001a      	movs	r2, r3
1004b8c8:	683b      	ldr	r3, [r7, #0]
1004b8ca:	21ff      	movs	r1, #255	@ 0xff
1004b8cc:	4011      	ands	r1, r2
1004b8ce:	000c      	movs	r4, r1
1004b8d0:	7919      	ldrb	r1, [r3, #4]
1004b8d2:	2000      	movs	r0, #0
1004b8d4:	4001      	ands	r1, r0
1004b8d6:	1c08      	adds	r0, r1, #0
1004b8d8:	1c21      	adds	r1, r4, #0
1004b8da:	4301      	orrs	r1, r0
1004b8dc:	7119      	strb	r1, [r3, #4]
1004b8de:	0a11      	lsrs	r1, r2, #8
1004b8e0:	20ff      	movs	r0, #255	@ 0xff
1004b8e2:	4001      	ands	r1, r0
1004b8e4:	000c      	movs	r4, r1
1004b8e6:	7959      	ldrb	r1, [r3, #5]
1004b8e8:	2000      	movs	r0, #0
1004b8ea:	4001      	ands	r1, r0
1004b8ec:	1c08      	adds	r0, r1, #0
1004b8ee:	1c21      	adds	r1, r4, #0
1004b8f0:	4301      	orrs	r1, r0
1004b8f2:	7159      	strb	r1, [r3, #5]
1004b8f4:	0c11      	lsrs	r1, r2, #16
1004b8f6:	20ff      	movs	r0, #255	@ 0xff
1004b8f8:	4001      	ands	r1, r0
1004b8fa:	000c      	movs	r4, r1
1004b8fc:	7999      	ldrb	r1, [r3, #6]
1004b8fe:	2000      	movs	r0, #0
1004b900:	4001      	ands	r1, r0
1004b902:	1c08      	adds	r0, r1, #0
1004b904:	1c21      	adds	r1, r4, #0
1004b906:	4301      	orrs	r1, r0
1004b908:	7199      	strb	r1, [r3, #6]
1004b90a:	0e10      	lsrs	r0, r2, #24
1004b90c:	79da      	ldrb	r2, [r3, #7]
1004b90e:	2100      	movs	r1, #0
1004b910:	400a      	ands	r2, r1
1004b912:	1c11      	adds	r1, r2, #0
1004b914:	1c02      	adds	r2, r0, #0
1004b916:	430a      	orrs	r2, r1
1004b918:	71da      	strb	r2, [r3, #7]
  listHead->prev = node;
1004b91a:	687b      	ldr	r3, [r7, #4]
1004b91c:	003a      	movs	r2, r7
1004b91e:	7810      	ldrb	r0, [r2, #0]
1004b920:	791a      	ldrb	r2, [r3, #4]
1004b922:	2100      	movs	r1, #0
1004b924:	400a      	ands	r2, r1
1004b926:	1c11      	adds	r1, r2, #0
1004b928:	1c02      	adds	r2, r0, #0
1004b92a:	430a      	orrs	r2, r1
1004b92c:	711a      	strb	r2, [r3, #4]
1004b92e:	1c7a      	adds	r2, r7, #1
1004b930:	7810      	ldrb	r0, [r2, #0]
1004b932:	795a      	ldrb	r2, [r3, #5]
1004b934:	2100      	movs	r1, #0
1004b936:	400a      	ands	r2, r1
1004b938:	1c11      	adds	r1, r2, #0
1004b93a:	1c02      	adds	r2, r0, #0
1004b93c:	430a      	orrs	r2, r1
1004b93e:	715a      	strb	r2, [r3, #5]
1004b940:	1cba      	adds	r2, r7, #2
1004b942:	7810      	ldrb	r0, [r2, #0]
1004b944:	799a      	ldrb	r2, [r3, #6]
1004b946:	2100      	movs	r1, #0
1004b948:	400a      	ands	r2, r1
1004b94a:	1c11      	adds	r1, r2, #0
1004b94c:	1c02      	adds	r2, r0, #0
1004b94e:	430a      	orrs	r2, r1
1004b950:	719a      	strb	r2, [r3, #6]
1004b952:	1cfa      	adds	r2, r7, #3
1004b954:	7810      	ldrb	r0, [r2, #0]
1004b956:	79da      	ldrb	r2, [r3, #7]
1004b958:	2100      	movs	r1, #0
1004b95a:	400a      	ands	r2, r1
1004b95c:	1c11      	adds	r1, r2, #0
1004b95e:	1c02      	adds	r2, r0, #0
1004b960:	430a      	orrs	r2, r1
1004b962:	71da      	strb	r2, [r3, #7]
  (node->prev)->next = node;
1004b964:	683b      	ldr	r3, [r7, #0]
1004b966:	791a      	ldrb	r2, [r3, #4]
1004b968:	7959      	ldrb	r1, [r3, #5]
1004b96a:	0209      	lsls	r1, r1, #8
1004b96c:	430a      	orrs	r2, r1
1004b96e:	7999      	ldrb	r1, [r3, #6]
1004b970:	0409      	lsls	r1, r1, #16
1004b972:	430a      	orrs	r2, r1
1004b974:	79db      	ldrb	r3, [r3, #7]
1004b976:	061b      	lsls	r3, r3, #24
1004b978:	4313      	orrs	r3, r2
1004b97a:	003a      	movs	r2, r7
1004b97c:	7810      	ldrb	r0, [r2, #0]
1004b97e:	781a      	ldrb	r2, [r3, #0]
1004b980:	2100      	movs	r1, #0
1004b982:	400a      	ands	r2, r1
1004b984:	1c11      	adds	r1, r2, #0
1004b986:	1c02      	adds	r2, r0, #0
1004b988:	430a      	orrs	r2, r1
1004b98a:	701a      	strb	r2, [r3, #0]
1004b98c:	1c7a      	adds	r2, r7, #1
1004b98e:	7810      	ldrb	r0, [r2, #0]
1004b990:	785a      	ldrb	r2, [r3, #1]
1004b992:	2100      	movs	r1, #0
1004b994:	400a      	ands	r2, r1
1004b996:	1c11      	adds	r1, r2, #0
1004b998:	1c02      	adds	r2, r0, #0
1004b99a:	430a      	orrs	r2, r1
1004b99c:	705a      	strb	r2, [r3, #1]
1004b99e:	1cba      	adds	r2, r7, #2
1004b9a0:	7810      	ldrb	r0, [r2, #0]
1004b9a2:	789a      	ldrb	r2, [r3, #2]
1004b9a4:	2100      	movs	r1, #0
1004b9a6:	400a      	ands	r2, r1
1004b9a8:	1c11      	adds	r1, r2, #0
1004b9aa:	1c02      	adds	r2, r0, #0
1004b9ac:	430a      	orrs	r2, r1
1004b9ae:	709a      	strb	r2, [r3, #2]
1004b9b0:	1cfa      	adds	r2, r7, #3
1004b9b2:	7810      	ldrb	r0, [r2, #0]
1004b9b4:	78da      	ldrb	r2, [r3, #3]
1004b9b6:	2100      	movs	r1, #0
1004b9b8:	400a      	ands	r2, r1
1004b9ba:	1c11      	adds	r1, r2, #0
1004b9bc:	1c02      	adds	r2, r0, #0
1004b9be:	430a      	orrs	r2, r1
1004b9c0:	70da      	strb	r2, [r3, #3]
1004b9c2:	697b      	ldr	r3, [r7, #20]
1004b9c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b9c6:	693b      	ldr	r3, [r7, #16]
1004b9c8:	f383 8810 	msr	PRIMASK, r3
}
1004b9cc:	46c0      	nop			@ (mov r8, r8)

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
1004b9ce:	46c0      	nop			@ (mov r8, r8)
1004b9d0:	46bd      	mov	sp, r7
1004b9d2:	b007      	add	sp, #28
1004b9d4:	bd90      	pop	{r4, r7, pc}

1004b9d6 <LST_remove_node>:

void LST_remove_node (tListNode * node)
{
1004b9d6:	b590      	push	{r4, r7, lr}
1004b9d8:	b087      	sub	sp, #28
1004b9da:	af00      	add	r7, sp, #0
1004b9dc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b9de:	f3ef 8310 	mrs	r3, PRIMASK
1004b9e2:	60fb      	str	r3, [r7, #12]
  return(result);
1004b9e4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
1004b9e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
1004b9e8:	b672      	cpsid	i
}
1004b9ea:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
1004b9ec:	687b      	ldr	r3, [r7, #4]
1004b9ee:	791a      	ldrb	r2, [r3, #4]
1004b9f0:	7959      	ldrb	r1, [r3, #5]
1004b9f2:	0209      	lsls	r1, r1, #8
1004b9f4:	430a      	orrs	r2, r1
1004b9f6:	7999      	ldrb	r1, [r3, #6]
1004b9f8:	0409      	lsls	r1, r1, #16
1004b9fa:	430a      	orrs	r2, r1
1004b9fc:	79db      	ldrb	r3, [r3, #7]
1004b9fe:	061b      	lsls	r3, r3, #24
1004ba00:	4313      	orrs	r3, r2
1004ba02:	687a      	ldr	r2, [r7, #4]
1004ba04:	7811      	ldrb	r1, [r2, #0]
1004ba06:	7850      	ldrb	r0, [r2, #1]
1004ba08:	0200      	lsls	r0, r0, #8
1004ba0a:	4301      	orrs	r1, r0
1004ba0c:	7890      	ldrb	r0, [r2, #2]
1004ba0e:	0400      	lsls	r0, r0, #16
1004ba10:	4301      	orrs	r1, r0
1004ba12:	78d2      	ldrb	r2, [r2, #3]
1004ba14:	0612      	lsls	r2, r2, #24
1004ba16:	430a      	orrs	r2, r1
1004ba18:	21ff      	movs	r1, #255	@ 0xff
1004ba1a:	4011      	ands	r1, r2
1004ba1c:	000c      	movs	r4, r1
1004ba1e:	7819      	ldrb	r1, [r3, #0]
1004ba20:	2000      	movs	r0, #0
1004ba22:	4001      	ands	r1, r0
1004ba24:	1c08      	adds	r0, r1, #0
1004ba26:	1c21      	adds	r1, r4, #0
1004ba28:	4301      	orrs	r1, r0
1004ba2a:	7019      	strb	r1, [r3, #0]
1004ba2c:	0a11      	lsrs	r1, r2, #8
1004ba2e:	20ff      	movs	r0, #255	@ 0xff
1004ba30:	4001      	ands	r1, r0
1004ba32:	000c      	movs	r4, r1
1004ba34:	7859      	ldrb	r1, [r3, #1]
1004ba36:	2000      	movs	r0, #0
1004ba38:	4001      	ands	r1, r0
1004ba3a:	1c08      	adds	r0, r1, #0
1004ba3c:	1c21      	adds	r1, r4, #0
1004ba3e:	4301      	orrs	r1, r0
1004ba40:	7059      	strb	r1, [r3, #1]
1004ba42:	0c11      	lsrs	r1, r2, #16
1004ba44:	20ff      	movs	r0, #255	@ 0xff
1004ba46:	4001      	ands	r1, r0
1004ba48:	000c      	movs	r4, r1
1004ba4a:	7899      	ldrb	r1, [r3, #2]
1004ba4c:	2000      	movs	r0, #0
1004ba4e:	4001      	ands	r1, r0
1004ba50:	1c08      	adds	r0, r1, #0
1004ba52:	1c21      	adds	r1, r4, #0
1004ba54:	4301      	orrs	r1, r0
1004ba56:	7099      	strb	r1, [r3, #2]
1004ba58:	0e10      	lsrs	r0, r2, #24
1004ba5a:	78da      	ldrb	r2, [r3, #3]
1004ba5c:	2100      	movs	r1, #0
1004ba5e:	400a      	ands	r2, r1
1004ba60:	1c11      	adds	r1, r2, #0
1004ba62:	1c02      	adds	r2, r0, #0
1004ba64:	430a      	orrs	r2, r1
1004ba66:	70da      	strb	r2, [r3, #3]
  (node->next)->prev = node->prev;
1004ba68:	687b      	ldr	r3, [r7, #4]
1004ba6a:	781a      	ldrb	r2, [r3, #0]
1004ba6c:	7859      	ldrb	r1, [r3, #1]
1004ba6e:	0209      	lsls	r1, r1, #8
1004ba70:	430a      	orrs	r2, r1
1004ba72:	7899      	ldrb	r1, [r3, #2]
1004ba74:	0409      	lsls	r1, r1, #16
1004ba76:	430a      	orrs	r2, r1
1004ba78:	78db      	ldrb	r3, [r3, #3]
1004ba7a:	061b      	lsls	r3, r3, #24
1004ba7c:	4313      	orrs	r3, r2
1004ba7e:	687a      	ldr	r2, [r7, #4]
1004ba80:	7911      	ldrb	r1, [r2, #4]
1004ba82:	7950      	ldrb	r0, [r2, #5]
1004ba84:	0200      	lsls	r0, r0, #8
1004ba86:	4301      	orrs	r1, r0
1004ba88:	7990      	ldrb	r0, [r2, #6]
1004ba8a:	0400      	lsls	r0, r0, #16
1004ba8c:	4301      	orrs	r1, r0
1004ba8e:	79d2      	ldrb	r2, [r2, #7]
1004ba90:	0612      	lsls	r2, r2, #24
1004ba92:	430a      	orrs	r2, r1
1004ba94:	21ff      	movs	r1, #255	@ 0xff
1004ba96:	4011      	ands	r1, r2
1004ba98:	000c      	movs	r4, r1
1004ba9a:	7919      	ldrb	r1, [r3, #4]
1004ba9c:	2000      	movs	r0, #0
1004ba9e:	4001      	ands	r1, r0
1004baa0:	1c08      	adds	r0, r1, #0
1004baa2:	1c21      	adds	r1, r4, #0
1004baa4:	4301      	orrs	r1, r0
1004baa6:	7119      	strb	r1, [r3, #4]
1004baa8:	0a11      	lsrs	r1, r2, #8
1004baaa:	20ff      	movs	r0, #255	@ 0xff
1004baac:	4001      	ands	r1, r0
1004baae:	000c      	movs	r4, r1
1004bab0:	7959      	ldrb	r1, [r3, #5]
1004bab2:	2000      	movs	r0, #0
1004bab4:	4001      	ands	r1, r0
1004bab6:	1c08      	adds	r0, r1, #0
1004bab8:	1c21      	adds	r1, r4, #0
1004baba:	4301      	orrs	r1, r0
1004babc:	7159      	strb	r1, [r3, #5]
1004babe:	0c11      	lsrs	r1, r2, #16
1004bac0:	20ff      	movs	r0, #255	@ 0xff
1004bac2:	4001      	ands	r1, r0
1004bac4:	000c      	movs	r4, r1
1004bac6:	7999      	ldrb	r1, [r3, #6]
1004bac8:	2000      	movs	r0, #0
1004baca:	4001      	ands	r1, r0
1004bacc:	1c08      	adds	r0, r1, #0
1004bace:	1c21      	adds	r1, r4, #0
1004bad0:	4301      	orrs	r1, r0
1004bad2:	7199      	strb	r1, [r3, #6]
1004bad4:	0e10      	lsrs	r0, r2, #24
1004bad6:	79da      	ldrb	r2, [r3, #7]
1004bad8:	2100      	movs	r1, #0
1004bada:	400a      	ands	r2, r1
1004badc:	1c11      	adds	r1, r2, #0
1004bade:	1c02      	adds	r2, r0, #0
1004bae0:	430a      	orrs	r2, r1
1004bae2:	71da      	strb	r2, [r3, #7]
1004bae4:	697b      	ldr	r3, [r7, #20]
1004bae6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004bae8:	693b      	ldr	r3, [r7, #16]
1004baea:	f383 8810 	msr	PRIMASK, r3
}
1004baee:	46c0      	nop			@ (mov r8, r8)

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
1004baf0:	46c0      	nop			@ (mov r8, r8)
1004baf2:	46bd      	mov	sp, r7
1004baf4:	b007      	add	sp, #28
1004baf6:	bd90      	pop	{r4, r7, pc}

1004baf8 <LST_remove_head>:

void LST_remove_head (tListNode * listHead, tListNode ** node )
{
1004baf8:	b580      	push	{r7, lr}
1004bafa:	b086      	sub	sp, #24
1004bafc:	af00      	add	r7, sp, #0
1004bafe:	6078      	str	r0, [r7, #4]
1004bb00:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004bb02:	f3ef 8310 	mrs	r3, PRIMASK
1004bb06:	60fb      	str	r3, [r7, #12]
  return(result);
1004bb08:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
1004bb0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
1004bb0c:	b672      	cpsid	i
}
1004bb0e:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
1004bb10:	687b      	ldr	r3, [r7, #4]
1004bb12:	781a      	ldrb	r2, [r3, #0]
1004bb14:	7859      	ldrb	r1, [r3, #1]
1004bb16:	0209      	lsls	r1, r1, #8
1004bb18:	430a      	orrs	r2, r1
1004bb1a:	7899      	ldrb	r1, [r3, #2]
1004bb1c:	0409      	lsls	r1, r1, #16
1004bb1e:	430a      	orrs	r2, r1
1004bb20:	78db      	ldrb	r3, [r3, #3]
1004bb22:	061b      	lsls	r3, r3, #24
1004bb24:	4313      	orrs	r3, r2
1004bb26:	001a      	movs	r2, r3
1004bb28:	683b      	ldr	r3, [r7, #0]
1004bb2a:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
1004bb2c:	687b      	ldr	r3, [r7, #4]
1004bb2e:	781a      	ldrb	r2, [r3, #0]
1004bb30:	7859      	ldrb	r1, [r3, #1]
1004bb32:	0209      	lsls	r1, r1, #8
1004bb34:	430a      	orrs	r2, r1
1004bb36:	7899      	ldrb	r1, [r3, #2]
1004bb38:	0409      	lsls	r1, r1, #16
1004bb3a:	430a      	orrs	r2, r1
1004bb3c:	78db      	ldrb	r3, [r3, #3]
1004bb3e:	061b      	lsls	r3, r3, #24
1004bb40:	4313      	orrs	r3, r2
1004bb42:	0018      	movs	r0, r3
1004bb44:	f7ff ff47 	bl	1004b9d6 <LST_remove_node>
1004bb48:	697b      	ldr	r3, [r7, #20]
1004bb4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004bb4c:	693b      	ldr	r3, [r7, #16]
1004bb4e:	f383 8810 	msr	PRIMASK, r3
}
1004bb52:	46c0      	nop			@ (mov r8, r8)

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
1004bb54:	46c0      	nop			@ (mov r8, r8)
1004bb56:	46bd      	mov	sp, r7
1004bb58:	b006      	add	sp, #24
1004bb5a:	bd80      	pop	{r7, pc}

1004bb5c <LL_RCC_GetLPUARTClockSource>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_LPUCLKSEL));
1004bb5c:	4b02      	ldr	r3, [pc, #8]	@ (1004bb68 <LL_RCC_GetLPUARTClockSource+0xc>)
1004bb5e:	6898      	ldr	r0, [r3, #8]
1004bb60:	2380      	movs	r3, #128	@ 0x80
1004bb62:	019b      	lsls	r3, r3, #6
1004bb64:	4018      	ands	r0, r3
}
1004bb66:	4770      	bx	lr
1004bb68:	48400000 	.word	0x48400000

1004bb6c <LL_AHB1_GRP1_IsEnabledClock>:
  return ((READ_BIT(RCC->AHBENR, Periphs) == (Periphs)) ? 1UL : 0UL);
1004bb6c:	4b03      	ldr	r3, [pc, #12]	@ (1004bb7c <LL_AHB1_GRP1_IsEnabledClock+0x10>)
1004bb6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004bb70:	4003      	ands	r3, r0
1004bb72:	1a18      	subs	r0, r3, r0
1004bb74:	4243      	negs	r3, r0
1004bb76:	4158      	adcs	r0, r3
}
1004bb78:	4770      	bx	lr
1004bb7a:	46c0      	nop			@ (mov r8, r8)
1004bb7c:	48400000 	.word	0x48400000

1004bb80 <LL_APB0_GRP1_EnableClock>:
  SET_BIT(RCC->APB0ENR, Periphs);
1004bb80:	4b05      	ldr	r3, [pc, #20]	@ (1004bb98 <LL_APB0_GRP1_EnableClock+0x18>)
{
1004bb82:	b082      	sub	sp, #8
  SET_BIT(RCC->APB0ENR, Periphs);
1004bb84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
1004bb86:	4302      	orrs	r2, r0
1004bb88:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
1004bb8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004bb8c:	4018      	ands	r0, r3
1004bb8e:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
1004bb90:	9b01      	ldr	r3, [sp, #4]
}
1004bb92:	b002      	add	sp, #8
1004bb94:	4770      	bx	lr
1004bb96:	46c0      	nop			@ (mov r8, r8)
1004bb98:	48400000 	.word	0x48400000

1004bb9c <LL_APB0_GRP1_IsEnabledClock>:
  return ((READ_BIT(RCC->APB0ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
1004bb9c:	4b03      	ldr	r3, [pc, #12]	@ (1004bbac <LL_APB0_GRP1_IsEnabledClock+0x10>)
1004bb9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004bba0:	4003      	ands	r3, r0
1004bba2:	1a18      	subs	r0, r3, r0
1004bba4:	4243      	negs	r3, r0
1004bba6:	4158      	adcs	r0, r3
}
1004bba8:	4770      	bx	lr
1004bbaa:	46c0      	nop			@ (mov r8, r8)
1004bbac:	48400000 	.word	0x48400000

1004bbb0 <LL_APB0_GRP1_DisableClock>:
  CLEAR_BIT(RCC->APB0ENR, Periphs);
1004bbb0:	4a02      	ldr	r2, [pc, #8]	@ (1004bbbc <LL_APB0_GRP1_DisableClock+0xc>)
1004bbb2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
1004bbb4:	4383      	bics	r3, r0
1004bbb6:	6553      	str	r3, [r2, #84]	@ 0x54
}
1004bbb8:	4770      	bx	lr
1004bbba:	46c0      	nop			@ (mov r8, r8)
1004bbbc:	48400000 	.word	0x48400000

1004bbc0 <LL_APB1_GRP1_IsEnabledClock>:
  return ((READ_BIT(RCC->APB1ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
1004bbc0:	4b03      	ldr	r3, [pc, #12]	@ (1004bbd0 <LL_APB1_GRP1_IsEnabledClock+0x10>)
1004bbc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
1004bbc4:	4003      	ands	r3, r0
1004bbc6:	1a18      	subs	r0, r3, r0
1004bbc8:	4243      	negs	r3, r0
1004bbca:	4158      	adcs	r0, r3
}
1004bbcc:	4770      	bx	lr
1004bbce:	46c0      	nop			@ (mov r8, r8)
1004bbd0:	48400000 	.word	0x48400000

1004bbd4 <LL_APB2_GRP1_IsEnabledClock>:
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
1004bbd4:	4b03      	ldr	r3, [pc, #12]	@ (1004bbe4 <LL_APB2_GRP1_IsEnabledClock+0x10>)
1004bbd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004bbd8:	4003      	ands	r3, r0
1004bbda:	1a18      	subs	r0, r3, r0
1004bbdc:	4243      	negs	r3, r0
1004bbde:	4158      	adcs	r0, r3
}
1004bbe0:	4770      	bx	lr
1004bbe2:	46c0      	nop			@ (mov r8, r8)
1004bbe4:	48400000 	.word	0x48400000

1004bbe8 <APB0periphContextSave>:
  * @brief  Save the APB0 peripheral registers content.
  * @param  apb0 Pointer to a APB0 structure
  * @retval None
  */
static void APB0periphContextSave(apb0PeriphT *apb0)
{
1004bbe8:	b510      	push	{r4, lr}
1004bbea:	0004      	movs	r4, r0
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_SYSCFG))
1004bbec:	2080      	movs	r0, #128	@ 0x80
1004bbee:	0040      	lsls	r0, r0, #1
1004bbf0:	f7ff ffd4 	bl	1004bb9c <LL_APB0_GRP1_IsEnabledClock>
1004bbf4:	2800      	cmp	r0, #0
1004bbf6:	d005      	beq.n	1004bc04 <APB0periphContextSave+0x1c>
  {
    Osal_MemCpy4((uint32_t *)&apb0->SYSCFG_vr, (uint32_t *)SYSCFG, sizeof(SYSCFG_TypeDef));
1004bbf8:	2180      	movs	r1, #128	@ 0x80
1004bbfa:	2240      	movs	r2, #64	@ 0x40
1004bbfc:	0020      	movs	r0, r4
1004bbfe:	05c9      	lsls	r1, r1, #23
1004bc00:	f7ff fd98 	bl	1004b734 <Osal_MemCpy4>
  {
    Osal_MemCpy4((uint32_t *)&apb0->TIM1_vr, (uint32_t *)TIM1, sizeof(TIM_TypeDef));
  }
#endif
#if defined(TIM2)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM2))
1004bc04:	2001      	movs	r0, #1
1004bc06:	f7ff ffc9 	bl	1004bb9c <LL_APB0_GRP1_IsEnabledClock>
1004bc0a:	2800      	cmp	r0, #0
1004bc0c:	d005      	beq.n	1004bc1a <APB0periphContextSave+0x32>
  {
    Osal_MemCpy4((uint32_t *)&apb0->TIM2_vr, (uint32_t *)TIM2, sizeof(TIM_TypeDef));
1004bc0e:	0020      	movs	r0, r4
1004bc10:	2264      	movs	r2, #100	@ 0x64
1004bc12:	4919      	ldr	r1, [pc, #100]	@ (1004bc78 <APB0periphContextSave+0x90>)
1004bc14:	3044      	adds	r0, #68	@ 0x44
1004bc16:	f7ff fd8d 	bl	1004b734 <Osal_MemCpy4>
  }
#endif
#if defined(TIM16)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM16))
1004bc1a:	2002      	movs	r0, #2
1004bc1c:	f7ff ffbe 	bl	1004bb9c <LL_APB0_GRP1_IsEnabledClock>
1004bc20:	2800      	cmp	r0, #0
1004bc22:	d005      	beq.n	1004bc30 <APB0periphContextSave+0x48>
  {
    Osal_MemCpy4((uint32_t *)&apb0->TIM16_vr, (uint32_t *)TIM16, sizeof(TIM_TypeDef));
1004bc24:	0020      	movs	r0, r4
1004bc26:	2264      	movs	r2, #100	@ 0x64
1004bc28:	4914      	ldr	r1, [pc, #80]	@ (1004bc7c <APB0periphContextSave+0x94>)
1004bc2a:	30a8      	adds	r0, #168	@ 0xa8
1004bc2c:	f7ff fd82 	bl	1004b734 <Osal_MemCpy4>
  }
#endif
#if defined(TIM17)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM17))
1004bc30:	2004      	movs	r0, #4
1004bc32:	f7ff ffb3 	bl	1004bb9c <LL_APB0_GRP1_IsEnabledClock>
1004bc36:	2800      	cmp	r0, #0
1004bc38:	d006      	beq.n	1004bc48 <APB0periphContextSave+0x60>
  {
    Osal_MemCpy4((uint32_t *)&apb0->TIM17_vr, (uint32_t *)TIM17, sizeof(TIM_TypeDef));
1004bc3a:	0020      	movs	r0, r4
1004bc3c:	300d      	adds	r0, #13
1004bc3e:	2264      	movs	r2, #100	@ 0x64
1004bc40:	490f      	ldr	r1, [pc, #60]	@ (1004bc80 <APB0periphContextSave+0x98>)
1004bc42:	30ff      	adds	r0, #255	@ 0xff
1004bc44:	f7ff fd76 	bl	1004b734 <Osal_MemCpy4>
  }
#endif

  apb0->wdg_to_be_enabled = FALSE;
1004bc48:	0022      	movs	r2, r4
1004bc4a:	2300      	movs	r3, #0
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_WDG))
1004bc4c:	2080      	movs	r0, #128	@ 0x80
  apb0->wdg_to_be_enabled = FALSE;
1004bc4e:	32fc      	adds	r2, #252	@ 0xfc
1004bc50:	6753      	str	r3, [r2, #116]	@ 0x74
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_WDG))
1004bc52:	01c0      	lsls	r0, r0, #7
1004bc54:	f7ff ffa2 	bl	1004bb9c <LL_APB0_GRP1_IsEnabledClock>
1004bc58:	2800      	cmp	r0, #0
1004bc5a:	d008      	beq.n	1004bc6e <APB0periphContextSave+0x86>
  {
    if (apb0->deepstop_wdg_state == DISABLE)
1004bc5c:	6f93      	ldr	r3, [r2, #120]	@ 0x78
1004bc5e:	2b00      	cmp	r3, #0
1004bc60:	d105      	bne.n	1004bc6e <APB0periphContextSave+0x86>
    {
      apb0->wdg_to_be_enabled = TRUE;
      LL_APB0_GRP1_DisableClock(LL_APB0_GRP1_PERIPH_WDG);
1004bc62:	2080      	movs	r0, #128	@ 0x80
      apb0->wdg_to_be_enabled = TRUE;
1004bc64:	3301      	adds	r3, #1
1004bc66:	6753      	str	r3, [r2, #116]	@ 0x74
      LL_APB0_GRP1_DisableClock(LL_APB0_GRP1_PERIPH_WDG);
1004bc68:	01c0      	lsls	r0, r0, #7
1004bc6a:	f7ff ffa1 	bl	1004bbb0 <LL_APB0_GRP1_DisableClock>
    }
  }

  apb0->FLASH_CONFIG_vr = FLASH->CONFIG;
1004bc6e:	4b05      	ldr	r3, [pc, #20]	@ (1004bc84 <APB0periphContextSave+0x9c>)
1004bc70:	685b      	ldr	r3, [r3, #4]
1004bc72:	6423      	str	r3, [r4, #64]	@ 0x40
}
1004bc74:	bd10      	pop	{r4, pc}
1004bc76:	46c0      	nop			@ (mov r8, r8)
1004bc78:	40002000 	.word	0x40002000
1004bc7c:	40005000 	.word	0x40005000
1004bc80:	40006000 	.word	0x40006000
1004bc84:	40001000 	.word	0x40001000

1004bc88 <APB1periphContextSave>:
  * @brief  Save the APB1 peripheral registers content.
  * @param  apb1 Pointer to a APB1 structure
  * @retval None
  */
static void APB1periphContextSave(apb1PeriphT *apb1)
{
1004bc88:	b510      	push	{r4, lr}
1004bc8a:	0004      	movs	r4, r0
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_SPI2))
  {
    Osal_MemCpy4((uint32_t *)&apb1->SPI2_vr, (uint32_t *)SPI2, sizeof(SPI_TypeDef));
  }
#endif
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_SPI3))
1004bc8c:	2080      	movs	r0, #128	@ 0x80
1004bc8e:	01c0      	lsls	r0, r0, #7
1004bc90:	f7ff ff96 	bl	1004bbc0 <LL_APB1_GRP1_IsEnabledClock>
1004bc94:	2800      	cmp	r0, #0
1004bc96:	d005      	beq.n	1004bca4 <APB1periphContextSave+0x1c>
  {
    Osal_MemCpy4((uint32_t *)&apb1->SPI3_vr, (uint32_t *)SPI3, sizeof(SPI_TypeDef));
1004bc98:	0020      	movs	r0, r4
1004bc9a:	2224      	movs	r2, #36	@ 0x24
1004bc9c:	491b      	ldr	r1, [pc, #108]	@ (1004bd0c <APB1periphContextSave+0x84>)
1004bc9e:	30e4      	adds	r0, #228	@ 0xe4
1004bca0:	f7ff fd48 	bl	1004b734 <Osal_MemCpy4>
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_ADCDIG))
1004bca4:	2010      	movs	r0, #16
1004bca6:	f7ff ff8b 	bl	1004bbc0 <LL_APB1_GRP1_IsEnabledClock>
1004bcaa:	2800      	cmp	r0, #0
1004bcac:	d005      	beq.n	1004bcba <APB1periphContextSave+0x32>
  {
    Osal_MemCpy4((uint32_t *)&apb1->ADC_vr, (uint32_t *)ADC1, sizeof(ADC_TypeDef));
1004bcae:	0020      	movs	r0, r4
1004bcb0:	2258      	movs	r2, #88	@ 0x58
1004bcb2:	4917      	ldr	r1, [pc, #92]	@ (1004bd10 <APB1periphContextSave+0x88>)
1004bcb4:	308c      	adds	r0, #140	@ 0x8c
1004bcb6:	f7ff fd3d 	bl	1004b734 <Osal_MemCpy4>
  }

#if defined(STM32WB06) || defined(STM32WB07)
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1))
#else
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1) &&
1004bcba:	2080      	movs	r0, #128	@ 0x80
1004bcbc:	0040      	lsls	r0, r0, #1
1004bcbe:	f7ff ff7f 	bl	1004bbc0 <LL_APB1_GRP1_IsEnabledClock>
1004bcc2:	2800      	cmp	r0, #0
1004bcc4:	d009      	beq.n	1004bcda <APB1periphContextSave+0x52>
     (LL_RCC_GetLPUARTClockSource() == LL_RCC_LPUCLKSEL_CLK16M))
1004bcc6:	f7ff ff49 	bl	1004bb5c <LL_RCC_GetLPUARTClockSource>
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1) &&
1004bcca:	2800      	cmp	r0, #0
1004bccc:	d105      	bne.n	1004bcda <APB1periphContextSave+0x52>
#endif
  {
    Osal_MemCpy4((uint32_t *)&apb1->LPUART_vr, (uint32_t *)LPUART1, sizeof(USART_TypeDef));
1004bcce:	0020      	movs	r0, r4
1004bcd0:	2230      	movs	r2, #48	@ 0x30
1004bcd2:	4910      	ldr	r1, [pc, #64]	@ (1004bd14 <APB1periphContextSave+0x8c>)
1004bcd4:	305c      	adds	r0, #92	@ 0x5c
1004bcd6:	f7ff fd2d 	bl	1004b734 <Osal_MemCpy4>
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_USART1))
1004bcda:	2080      	movs	r0, #128	@ 0x80
1004bcdc:	00c0      	lsls	r0, r0, #3
1004bcde:	f7ff ff6f 	bl	1004bbc0 <LL_APB1_GRP1_IsEnabledClock>
1004bce2:	2800      	cmp	r0, #0
1004bce4:	d005      	beq.n	1004bcf2 <APB1periphContextSave+0x6a>
  {
    Osal_MemCpy4((uint32_t *)&apb1->USART_vr, (uint32_t *)USART1, sizeof(USART_TypeDef));
1004bce6:	0020      	movs	r0, r4
1004bce8:	2230      	movs	r2, #48	@ 0x30
1004bcea:	490b      	ldr	r1, [pc, #44]	@ (1004bd18 <APB1periphContextSave+0x90>)
1004bcec:	302c      	adds	r0, #44	@ 0x2c
1004bcee:	f7ff fd21 	bl	1004b734 <Osal_MemCpy4>
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_I2C1))
1004bcf2:	2080      	movs	r0, #128	@ 0x80
1004bcf4:	0380      	lsls	r0, r0, #14
1004bcf6:	f7ff ff63 	bl	1004bbc0 <LL_APB1_GRP1_IsEnabledClock>
1004bcfa:	2800      	cmp	r0, #0
1004bcfc:	d005      	beq.n	1004bd0a <APB1periphContextSave+0x82>
  {
    Osal_MemCpy4((uint32_t *)&apb1->I2C1_vr, (uint32_t *)I2C1, sizeof(I2C_TypeDef));
1004bcfe:	2182      	movs	r1, #130	@ 0x82
1004bd00:	222c      	movs	r2, #44	@ 0x2c
1004bd02:	0020      	movs	r0, r4
1004bd04:	05c9      	lsls	r1, r1, #23
1004bd06:	f7ff fd15 	bl	1004b734 <Osal_MemCpy4>
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_I2C2))
  {
    Osal_MemCpy4((uint32_t *)&apb1->I2C2_vr, (uint32_t *)I2C2, sizeof(I2C_TypeDef));
  }
#endif
}
1004bd0a:	bd10      	pop	{r4, pc}
1004bd0c:	41007000 	.word	0x41007000
1004bd10:	41006000 	.word	0x41006000
1004bd14:	41005000 	.word	0x41005000
1004bd18:	41004000 	.word	0x41004000

1004bd1c <APB2periphContextSave>:
  * @brief  Save the APB2 peripheral registers content.
  * @param  apb2 Pointer to a APB2 structure
  * @retval None
  */
static void APB2periphContextSave(apb2PeriphT *apb2)
{
1004bd1c:	b510      	push	{r4, lr}
  if (LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
1004bd1e:	2001      	movs	r0, #1
1004bd20:	f7ff ff58 	bl	1004bbd4 <LL_APB2_GRP1_IsEnabledClock>
  {
#if defined(RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS)
    apb2->LDO_TRANSFO_vr = READ_BIT(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS);
#endif
  }
}
1004bd24:	bd10      	pop	{r4, pc}
	...

1004bd28 <AHB0periphContextSave>:
  * @brief  Save the AHB0 peripheral registers content.
  * @param  ahb0 Pointer to a AHB0 structure
  * @retval None
  */
static void AHB0periphContextSave(ahb0PeriphT *ahb0)
{
1004bd28:	b510      	push	{r4, lr}
1004bd2a:	0004      	movs	r4, r0
  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_DMA)) {
1004bd2c:	2001      	movs	r0, #1
1004bd2e:	f7ff ff1d 	bl	1004bb6c <LL_AHB1_GRP1_IsEnabledClock>
1004bd32:	2800      	cmp	r0, #0
1004bd34:	d00d      	beq.n	1004bd52 <AHB0periphContextSave+0x2a>
    Osal_MemCpy4((uint32_t *)ahb0->DMAMUX_vr, (uint32_t *)DMAMUX1, 8*sizeof(DMAMUX_Channel_TypeDef));
1004bd36:	0020      	movs	r0, r4
1004bd38:	2191      	movs	r1, #145	@ 0x91
1004bd3a:	309d      	adds	r0, #157	@ 0x9d
1004bd3c:	2220      	movs	r2, #32
1004bd3e:	05c9      	lsls	r1, r1, #23
1004bd40:	30ff      	adds	r0, #255	@ 0xff
1004bd42:	f7ff fcf7 	bl	1004b734 <Osal_MemCpy4>
    Osal_MemCpy4((uint32_t *)ahb0->DMA_vr, (uint32_t *)DMA1, 8*sizeof(DMA_Channel_TypeDef));
1004bd46:	0020      	movs	r0, r4
1004bd48:	22a0      	movs	r2, #160	@ 0xa0
1004bd4a:	4925      	ldr	r1, [pc, #148]	@ (1004bde0 <AHB0periphContextSave+0xb8>)
1004bd4c:	30fc      	adds	r0, #252	@ 0xfc
1004bd4e:	f7ff fcf1 	bl	1004b734 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_RNG)) {
1004bd52:	2080      	movs	r0, #128	@ 0x80
1004bd54:	02c0      	lsls	r0, r0, #11
1004bd56:	f7ff ff09 	bl	1004bb6c <LL_AHB1_GRP1_IsEnabledClock>
1004bd5a:	2800      	cmp	r0, #0
1004bd5c:	d005      	beq.n	1004bd6a <AHB0periphContextSave+0x42>
    Osal_MemCpy4((uint32_t *)&ahb0->RNG_vr, (uint32_t *)RNG, sizeof(RNG_TypeDef));
1004bd5e:	0020      	movs	r0, r4
1004bd60:	2288      	movs	r2, #136	@ 0x88
1004bd62:	4920      	ldr	r1, [pc, #128]	@ (1004bde4 <AHB0periphContextSave+0xbc>)
1004bd64:	3074      	adds	r0, #116	@ 0x74
1004bd66:	f7ff fce5 	bl	1004b734 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_PKA)) {
1004bd6a:	2080      	movs	r0, #128	@ 0x80
1004bd6c:	0240      	lsls	r0, r0, #9
1004bd6e:	f7ff fefd 	bl	1004bb6c <LL_AHB1_GRP1_IsEnabledClock>
1004bd72:	2800      	cmp	r0, #0
1004bd74:	d002      	beq.n	1004bd7c <AHB0periphContextSave+0x54>
#if defined(STM32WB06) || defined(STM32WB07)
    ahb0->PKA_CSR_vr = PKA->CSR;
    ahb0->PKA_ISR_vr = PKA->ISR;
    ahb0->PKA_IEN_vr = PKA->IEN;
#else
    ahb0->PKA_CR_vr = PKA->CR;
1004bd76:	4b1c      	ldr	r3, [pc, #112]	@ (1004bde8 <AHB0periphContextSave+0xc0>)
1004bd78:	681b      	ldr	r3, [r3, #0]
1004bd7a:	6723      	str	r3, [r4, #112]	@ 0x70
#endif
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_CRC)) {
1004bd7c:	2080      	movs	r0, #128	@ 0x80
1004bd7e:	0140      	lsls	r0, r0, #5
1004bd80:	f7ff fef4 	bl	1004bb6c <LL_AHB1_GRP1_IsEnabledClock>
1004bd84:	2800      	cmp	r0, #0
1004bd86:	d005      	beq.n	1004bd94 <AHB0periphContextSave+0x6c>
    Osal_MemCpy4((uint32_t *)&ahb0->CRC_vr, (uint32_t *)CRC, sizeof(CRC_TypeDef));
1004bd88:	0020      	movs	r0, r4
1004bd8a:	2218      	movs	r2, #24
1004bd8c:	4917      	ldr	r1, [pc, #92]	@ (1004bdec <AHB0periphContextSave+0xc4>)
1004bd8e:	3058      	adds	r0, #88	@ 0x58
1004bd90:	f7ff fcd0 	bl	1004b734 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_GPIOA)) {
1004bd94:	2004      	movs	r0, #4
1004bd96:	f7ff fee9 	bl	1004bb6c <LL_AHB1_GRP1_IsEnabledClock>
1004bd9a:	2800      	cmp	r0, #0
1004bd9c:	d005      	beq.n	1004bdaa <AHB0periphContextSave+0x82>
    Osal_MemCpy4((uint32_t *)&ahb0->GPIOA_vr, (uint32_t *)GPIOA, sizeof(GPIO_TypeDef));
1004bd9e:	2190      	movs	r1, #144	@ 0x90
1004bda0:	222c      	movs	r2, #44	@ 0x2c
1004bda2:	0020      	movs	r0, r4
1004bda4:	05c9      	lsls	r1, r1, #23
1004bda6:	f7ff fcc5 	bl	1004b734 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_GPIOB)) {
1004bdaa:	2008      	movs	r0, #8
1004bdac:	f7ff fede 	bl	1004bb6c <LL_AHB1_GRP1_IsEnabledClock>
1004bdb0:	2800      	cmp	r0, #0
1004bdb2:	d004      	beq.n	1004bdbe <AHB0periphContextSave+0x96>
    Osal_MemCpy4((uint32_t *)&ahb0->GPIOB_vr, (uint32_t *)GPIOB, sizeof(GPIO_TypeDef));
1004bdb4:	222c      	movs	r2, #44	@ 0x2c
1004bdb6:	490e      	ldr	r1, [pc, #56]	@ (1004bdf0 <AHB0periphContextSave+0xc8>)
1004bdb8:	18a0      	adds	r0, r4, r2
1004bdba:	f7ff fcbb 	bl	1004b734 <Osal_MemCpy4>
  }

  ahb0->RCC_AHBRSTR_vr  = RCC->AHBRSTR;
1004bdbe:	22de      	movs	r2, #222	@ 0xde
1004bdc0:	4b0c      	ldr	r3, [pc, #48]	@ (1004bdf4 <AHB0periphContextSave+0xcc>)
1004bdc2:	0052      	lsls	r2, r2, #1
1004bdc4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
1004bdc6:	50a1      	str	r1, [r4, r2]
  ahb0->RCC_APB1RSTR_vr = RCC->APB1RSTR;
1004bdc8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
1004bdca:	3204      	adds	r2, #4
1004bdcc:	50a1      	str	r1, [r4, r2]
  ahb0->RCC_AHBENR_vr   = RCC->AHBENR;
1004bdce:	6d19      	ldr	r1, [r3, #80]	@ 0x50
1004bdd0:	3204      	adds	r2, #4
1004bdd2:	50a1      	str	r1, [r4, r2]
  ahb0->RCC_APB1ENR_vr  = RCC->APB1ENR;
1004bdd4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
1004bdd6:	23e4      	movs	r3, #228	@ 0xe4
1004bdd8:	005b      	lsls	r3, r3, #1
1004bdda:	50e2      	str	r2, [r4, r3]
}
1004bddc:	bd10      	pop	{r4, pc}
1004bdde:	46c0      	nop			@ (mov r8, r8)
1004bde0:	48700000 	.word	0x48700000
1004bde4:	48600000 	.word	0x48600000
1004bde8:	48300000 	.word	0x48300000
1004bdec:	48200000 	.word	0x48200000
1004bdf0:	48100000 	.word	0x48100000
1004bdf4:	48400000 	.word	0x48400000

1004bdf8 <cstackContextSave>:
{
  uint8_t i;
  volatile uint32_t *ptr;

  i = 0;
  ptr = __vector_table[0].__ptr ;
1004bdf8:	4b04      	ldr	r3, [pc, #16]	@ (1004be0c <cstackContextSave+0x14>)
1004bdfa:	681a      	ldr	r2, [r3, #0]
  ptr -= CSTACK_PREAMBLE_NUMBER;
1004bdfc:	0013      	movs	r3, r2
1004bdfe:	3b50      	subs	r3, #80	@ 0x50
  do
  {
    cStackPreamble[i] = *ptr;
1004be00:	cb02      	ldmia	r3!, {r1}
1004be02:	c002      	stmia	r0!, {r1}
    i++;
    ptr++;
  } while (i < CSTACK_PREAMBLE_NUMBER);
1004be04:	429a      	cmp	r2, r3
1004be06:	d1fb      	bne.n	1004be00 <cstackContextSave+0x8>

}
1004be08:	4770      	bx	lr
1004be0a:	46c0      	nop			@ (mov r8, r8)
1004be0c:	10041000 	.word	0x10041000

1004be10 <cpuPeriphContextSave>:
  */
static void cpuPeriphContextSave(cpuPeriphT *cpuPeriph)
{
  uint8_t i;

  cpuPeriph->SCB_VTOR_vr = SCB->VTOR;
1004be10:	4b0d      	ldr	r3, [pc, #52]	@ (1004be48 <cpuPeriphContextSave+0x38>)
  cpuPeriph->NVIC_ISER_vr = NVIC->ISER[0];
1004be12:	490e      	ldr	r1, [pc, #56]	@ (1004be4c <cpuPeriphContextSave+0x3c>)
  cpuPeriph->SCB_VTOR_vr = SCB->VTOR;
1004be14:	689b      	ldr	r3, [r3, #8]
{
1004be16:	b530      	push	{r4, r5, lr}
  cpuPeriph->SCB_VTOR_vr = SCB->VTOR;
1004be18:	6003      	str	r3, [r0, #0]
  cpuPeriph->NVIC_ISER_vr = NVIC->ISER[0];
1004be1a:	680b      	ldr	r3, [r1, #0]
  for (i=0; i<8; i++)
  {
   cpuPeriph->NVIC_IPR_vr[i] = NVIC->IP[i];
1004be1c:	0004      	movs	r4, r0
  cpuPeriph->NVIC_ISER_vr = NVIC->ISER[0];
1004be1e:	6043      	str	r3, [r0, #4]
1004be20:	2300      	movs	r3, #0
   cpuPeriph->NVIC_IPR_vr[i] = NVIC->IP[i];
1004be22:	3408      	adds	r4, #8
1004be24:	001a      	movs	r2, r3
1004be26:	32c0      	adds	r2, #192	@ 0xc0
1004be28:	0092      	lsls	r2, r2, #2
1004be2a:	588d      	ldr	r5, [r1, r2]
1004be2c:	009a      	lsls	r2, r3, #2
  for (i=0; i<8; i++)
1004be2e:	3301      	adds	r3, #1
   cpuPeriph->NVIC_IPR_vr[i] = NVIC->IP[i];
1004be30:	50a5      	str	r5, [r4, r2]
  for (i=0; i<8; i++)
1004be32:	2b08      	cmp	r3, #8
1004be34:	d1f6      	bne.n	1004be24 <cpuPeriphContextSave+0x14>
  }
  cpuPeriph->SYSTICK_IPR_vr = *(volatile uint32_t *)SHPR3_REG;
1004be36:	4b06      	ldr	r3, [pc, #24]	@ (1004be50 <cpuPeriphContextSave+0x40>)
1004be38:	681b      	ldr	r3, [r3, #0]
1004be3a:	6283      	str	r3, [r0, #40]	@ 0x28
  cpuPeriph->SYST_CSR_vr = SysTick->CTRL;
1004be3c:	4b05      	ldr	r3, [pc, #20]	@ (1004be54 <cpuPeriphContextSave+0x44>)
1004be3e:	681a      	ldr	r2, [r3, #0]
1004be40:	62c2      	str	r2, [r0, #44]	@ 0x2c
  cpuPeriph->SYST_RVR_vr = SysTick->LOAD;
1004be42:	685b      	ldr	r3, [r3, #4]
1004be44:	6303      	str	r3, [r0, #48]	@ 0x30
}
1004be46:	bd30      	pop	{r4, r5, pc}
1004be48:	e000ed00 	.word	0xe000ed00
1004be4c:	e000e100 	.word	0xe000e100
1004be50:	e000ed20 	.word	0xe000ed20
1004be54:	e000e010 	.word	0xe000e010

1004be58 <APB0periphContextRestore>:
  * @brief  Restore the APB0 peripheral registers content.
  * @param  apb0 Pointer to a APB0 structure
  * @retval None
  */
static void APB0periphContextRestore(apb0PeriphT *apb0)
{
1004be58:	b570      	push	{r4, r5, r6, lr}
1004be5a:	0004      	movs	r4, r0
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_SYSCFG))
1004be5c:	2080      	movs	r0, #128	@ 0x80
1004be5e:	0040      	lsls	r0, r0, #1
1004be60:	f7ff fe9c 	bl	1004bb9c <LL_APB0_GRP1_IsEnabledClock>
1004be64:	2800      	cmp	r0, #0
1004be66:	d005      	beq.n	1004be74 <APB0periphContextRestore+0x1c>
  {
    Osal_MemCpy4((uint32_t *)SYSCFG, (uint32_t *)&apb0->SYSCFG_vr, sizeof(SYSCFG_TypeDef));
1004be68:	2080      	movs	r0, #128	@ 0x80
1004be6a:	2240      	movs	r2, #64	@ 0x40
1004be6c:	0021      	movs	r1, r4
1004be6e:	05c0      	lsls	r0, r0, #23
1004be70:	f7ff fc60 	bl	1004b734 <Osal_MemCpy4>
    TIM1->CR1 = app;
  }
#endif

#if defined(TIM2)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM2))
1004be74:	2001      	movs	r0, #1
1004be76:	f7ff fe91 	bl	1004bb9c <LL_APB0_GRP1_IsEnabledClock>
1004be7a:	2800      	cmp	r0, #0
1004be7c:	d00c      	beq.n	1004be98 <APB0periphContextRestore+0x40>
  {
    uint32_t app;
    app = apb0->TIM2_vr.CR1;
    apb0->TIM2_vr.CR1 &= ~TIM_CR1_CEN;
1004be7e:	2201      	movs	r2, #1
    Osal_MemCpy4((uint32_t *)TIM2, (uint32_t *)&apb0->TIM2_vr, sizeof(TIM_TypeDef));
1004be80:	0021      	movs	r1, r4
    app = apb0->TIM2_vr.CR1;
1004be82:	6c66      	ldr	r6, [r4, #68]	@ 0x44
    apb0->TIM2_vr.CR1 &= ~TIM_CR1_CEN;
1004be84:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    Osal_MemCpy4((uint32_t *)TIM2, (uint32_t *)&apb0->TIM2_vr, sizeof(TIM_TypeDef));
1004be86:	4d1a      	ldr	r5, [pc, #104]	@ (1004bef0 <APB0periphContextRestore+0x98>)
    apb0->TIM2_vr.CR1 &= ~TIM_CR1_CEN;
1004be88:	4393      	bics	r3, r2
    Osal_MemCpy4((uint32_t *)TIM2, (uint32_t *)&apb0->TIM2_vr, sizeof(TIM_TypeDef));
1004be8a:	0028      	movs	r0, r5
    apb0->TIM2_vr.CR1 &= ~TIM_CR1_CEN;
1004be8c:	6463      	str	r3, [r4, #68]	@ 0x44
    Osal_MemCpy4((uint32_t *)TIM2, (uint32_t *)&apb0->TIM2_vr, sizeof(TIM_TypeDef));
1004be8e:	3263      	adds	r2, #99	@ 0x63
1004be90:	3144      	adds	r1, #68	@ 0x44
1004be92:	f7ff fc4f 	bl	1004b734 <Osal_MemCpy4>
    TIM2->CR1 = app;
1004be96:	602e      	str	r6, [r5, #0]
  }
#endif

#if defined(TIM16)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM16))
1004be98:	2002      	movs	r0, #2
1004be9a:	f7ff fe7f 	bl	1004bb9c <LL_APB0_GRP1_IsEnabledClock>
1004be9e:	2800      	cmp	r0, #0
1004bea0:	d00c      	beq.n	1004bebc <APB0periphContextRestore+0x64>
  {
    uint32_t app;
    app = apb0->TIM16_vr.CR1;
1004bea2:	0021      	movs	r1, r4
    apb0->TIM16_vr.CR1 &= ~TIM_CR1_CEN;
1004bea4:	2201      	movs	r2, #1
    app = apb0->TIM16_vr.CR1;
1004bea6:	31a8      	adds	r1, #168	@ 0xa8
1004bea8:	680e      	ldr	r6, [r1, #0]
    apb0->TIM16_vr.CR1 &= ~TIM_CR1_CEN;
1004beaa:	680b      	ldr	r3, [r1, #0]
    Osal_MemCpy4((uint32_t *)TIM16, (uint32_t *)&apb0->TIM16_vr, sizeof(TIM_TypeDef));
1004beac:	4d11      	ldr	r5, [pc, #68]	@ (1004bef4 <APB0periphContextRestore+0x9c>)
    apb0->TIM16_vr.CR1 &= ~TIM_CR1_CEN;
1004beae:	4393      	bics	r3, r2
    Osal_MemCpy4((uint32_t *)TIM16, (uint32_t *)&apb0->TIM16_vr, sizeof(TIM_TypeDef));
1004beb0:	0028      	movs	r0, r5
    apb0->TIM16_vr.CR1 &= ~TIM_CR1_CEN;
1004beb2:	600b      	str	r3, [r1, #0]
    Osal_MemCpy4((uint32_t *)TIM16, (uint32_t *)&apb0->TIM16_vr, sizeof(TIM_TypeDef));
1004beb4:	3263      	adds	r2, #99	@ 0x63
1004beb6:	f7ff fc3d 	bl	1004b734 <Osal_MemCpy4>
    TIM16->CR1 = app;
1004beba:	602e      	str	r6, [r5, #0]
  }
#endif

#if defined(TIM17)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM17))
1004bebc:	2004      	movs	r0, #4
1004bebe:	f7ff fe6d 	bl	1004bb9c <LL_APB0_GRP1_IsEnabledClock>
1004bec2:	2800      	cmp	r0, #0
1004bec4:	d00f      	beq.n	1004bee6 <APB0periphContextRestore+0x8e>
  {
    uint32_t app;
    app = apb0->TIM17_vr.CR1;
1004bec6:	0023      	movs	r3, r4
    apb0->TIM17_vr.CR1 &= ~TIM_CR1_CEN;
1004bec8:	2101      	movs	r1, #1
    app = apb0->TIM17_vr.CR1;
1004beca:	33fc      	adds	r3, #252	@ 0xfc
1004becc:	691e      	ldr	r6, [r3, #16]
    apb0->TIM17_vr.CR1 &= ~TIM_CR1_CEN;
1004bece:	691a      	ldr	r2, [r3, #16]
    Osal_MemCpy4((uint32_t *)TIM17, (uint32_t *)&apb0->TIM17_vr, sizeof(TIM_TypeDef));
1004bed0:	4d09      	ldr	r5, [pc, #36]	@ (1004bef8 <APB0periphContextRestore+0xa0>)
    apb0->TIM17_vr.CR1 &= ~TIM_CR1_CEN;
1004bed2:	438a      	bics	r2, r1
    Osal_MemCpy4((uint32_t *)TIM17, (uint32_t *)&apb0->TIM17_vr, sizeof(TIM_TypeDef));
1004bed4:	0021      	movs	r1, r4
1004bed6:	310d      	adds	r1, #13
    apb0->TIM17_vr.CR1 &= ~TIM_CR1_CEN;
1004bed8:	611a      	str	r2, [r3, #16]
    Osal_MemCpy4((uint32_t *)TIM17, (uint32_t *)&apb0->TIM17_vr, sizeof(TIM_TypeDef));
1004beda:	0028      	movs	r0, r5
1004bedc:	2264      	movs	r2, #100	@ 0x64
1004bede:	31ff      	adds	r1, #255	@ 0xff
1004bee0:	f7ff fc28 	bl	1004b734 <Osal_MemCpy4>
    TIM17->CR1 = app;
1004bee4:	602e      	str	r6, [r5, #0]
  }
#endif

  FLASH->CONFIG = apb0->FLASH_CONFIG_vr;
1004bee6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
1004bee8:	4b04      	ldr	r3, [pc, #16]	@ (1004befc <APB0periphContextRestore+0xa4>)
1004beea:	605a      	str	r2, [r3, #4]
}
1004beec:	bd70      	pop	{r4, r5, r6, pc}
1004beee:	46c0      	nop			@ (mov r8, r8)
1004bef0:	40002000 	.word	0x40002000
1004bef4:	40005000 	.word	0x40005000
1004bef8:	40006000 	.word	0x40006000
1004befc:	40001000 	.word	0x40001000

1004bf00 <APB1periphContextRestore>:
  * @brief  Restore the APB1 peripheral registers content.
  * @param  apb1 Pointer to a APB1 structure
  * @retval None
  */
static void APB1periphContextRestore(apb1PeriphT *apb1)
{
1004bf00:	b570      	push	{r4, r5, r6, lr}
1004bf02:	0004      	movs	r4, r0
    Osal_MemCpy4((uint32_t *)SPI2, (uint32_t *)&apb1->SPI2_vr, 12); /* Skip DR */
    Osal_MemCpy4((uint32_t *)(&(SPI2->CRCPR)), (uint32_t *)(&apb1->SPI2_vr.CRCPR), 20);
    SPI2->CR1 = app;
  }
#endif
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_SPI3))
1004bf04:	2080      	movs	r0, #128	@ 0x80
1004bf06:	01c0      	lsls	r0, r0, #7
1004bf08:	f7ff fe5a 	bl	1004bbc0 <LL_APB1_GRP1_IsEnabledClock>
1004bf0c:	2800      	cmp	r0, #0
1004bf0e:	d012      	beq.n	1004bf36 <APB1periphContextRestore+0x36>
  {
    uint32_t app;
    app = apb1->SPI3_vr.CR1;
1004bf10:	0021      	movs	r1, r4
    apb1->SPI3_vr.CR1 &= ~SPI_CR1_SPE;
1004bf12:	2240      	movs	r2, #64	@ 0x40
    app = apb1->SPI3_vr.CR1;
1004bf14:	31e4      	adds	r1, #228	@ 0xe4
1004bf16:	680e      	ldr	r6, [r1, #0]
    apb1->SPI3_vr.CR1 &= ~SPI_CR1_SPE;
1004bf18:	680b      	ldr	r3, [r1, #0]
    Osal_MemCpy4((uint32_t *)SPI3, (uint32_t *)&apb1->SPI3_vr, 12); /* Skip DR */
1004bf1a:	4d2e      	ldr	r5, [pc, #184]	@ (1004bfd4 <APB1periphContextRestore+0xd4>)
    apb1->SPI3_vr.CR1 &= ~SPI_CR1_SPE;
1004bf1c:	4393      	bics	r3, r2
1004bf1e:	600b      	str	r3, [r1, #0]
    Osal_MemCpy4((uint32_t *)SPI3, (uint32_t *)&apb1->SPI3_vr, 12); /* Skip DR */
1004bf20:	0028      	movs	r0, r5
1004bf22:	3a34      	subs	r2, #52	@ 0x34
1004bf24:	f7ff fc06 	bl	1004b734 <Osal_MemCpy4>
    Osal_MemCpy4((uint32_t *)(&(SPI3->CRCPR)), (uint32_t *)(&apb1->SPI3_vr.CRCPR), 20);
1004bf28:	0021      	movs	r1, r4
1004bf2a:	2214      	movs	r2, #20
1004bf2c:	482a      	ldr	r0, [pc, #168]	@ (1004bfd8 <APB1periphContextRestore+0xd8>)
1004bf2e:	31f4      	adds	r1, #244	@ 0xf4
1004bf30:	f7ff fc00 	bl	1004b734 <Osal_MemCpy4>
    SPI3->CR1 = app;
1004bf34:	602e      	str	r6, [r5, #0]
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_ADCDIG))
1004bf36:	2010      	movs	r0, #16
1004bf38:	f7ff fe42 	bl	1004bbc0 <LL_APB1_GRP1_IsEnabledClock>
1004bf3c:	2800      	cmp	r0, #0
1004bf3e:	d005      	beq.n	1004bf4c <APB1periphContextRestore+0x4c>
  {
    Osal_MemCpy4((uint32_t *)ADC1, (uint32_t *)&apb1->ADC_vr, sizeof(ADC_TypeDef));
1004bf40:	0021      	movs	r1, r4
1004bf42:	2258      	movs	r2, #88	@ 0x58
1004bf44:	4825      	ldr	r0, [pc, #148]	@ (1004bfdc <APB1periphContextRestore+0xdc>)
1004bf46:	318c      	adds	r1, #140	@ 0x8c
1004bf48:	f7ff fbf4 	bl	1004b734 <Osal_MemCpy4>
  }

#if defined(STM32WB06) || defined(STM32WB07)
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1))
#else
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1) &&
1004bf4c:	2080      	movs	r0, #128	@ 0x80
1004bf4e:	0040      	lsls	r0, r0, #1
1004bf50:	f7ff fe36 	bl	1004bbc0 <LL_APB1_GRP1_IsEnabledClock>
1004bf54:	2800      	cmp	r0, #0
1004bf56:	d014      	beq.n	1004bf82 <APB1periphContextRestore+0x82>
     (LL_RCC_GetLPUARTClockSource() == LL_RCC_LPUCLKSEL_CLK16M))
1004bf58:	f7ff fe00 	bl	1004bb5c <LL_RCC_GetLPUARTClockSource>
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1) &&
1004bf5c:	2800      	cmp	r0, #0
1004bf5e:	d110      	bne.n	1004bf82 <APB1periphContextRestore+0x82>
#endif
  {
    uint32_t app;
    app = apb1->LPUART_vr.CR1;
    apb1->LPUART_vr.CR1 &= ~USART_CR1_UE;
1004bf60:	2201      	movs	r2, #1
    Osal_MemCpy4((uint32_t *)LPUART1, (uint32_t *)&apb1->LPUART_vr, 36); /* Skip RDR and TDR */
1004bf62:	0021      	movs	r1, r4
    app = apb1->LPUART_vr.CR1;
1004bf64:	6de6      	ldr	r6, [r4, #92]	@ 0x5c
    apb1->LPUART_vr.CR1 &= ~USART_CR1_UE;
1004bf66:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
    Osal_MemCpy4((uint32_t *)LPUART1, (uint32_t *)&apb1->LPUART_vr, 36); /* Skip RDR and TDR */
1004bf68:	4d1d      	ldr	r5, [pc, #116]	@ (1004bfe0 <APB1periphContextRestore+0xe0>)
    apb1->LPUART_vr.CR1 &= ~USART_CR1_UE;
1004bf6a:	4393      	bics	r3, r2
1004bf6c:	65e3      	str	r3, [r4, #92]	@ 0x5c
    Osal_MemCpy4((uint32_t *)LPUART1, (uint32_t *)&apb1->LPUART_vr, 36); /* Skip RDR and TDR */
1004bf6e:	0028      	movs	r0, r5
1004bf70:	3223      	adds	r2, #35	@ 0x23
1004bf72:	315c      	adds	r1, #92	@ 0x5c
1004bf74:	f7ff fbde 	bl	1004b734 <Osal_MemCpy4>
    LPUART1->PRESC = apb1->LPUART_vr.PRESC;
1004bf78:	0023      	movs	r3, r4
1004bf7a:	3388      	adds	r3, #136	@ 0x88
1004bf7c:	681b      	ldr	r3, [r3, #0]
1004bf7e:	62eb      	str	r3, [r5, #44]	@ 0x2c
    LPUART1->CR1 = app;
1004bf80:	602e      	str	r6, [r5, #0]
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_USART1))
1004bf82:	2080      	movs	r0, #128	@ 0x80
1004bf84:	00c0      	lsls	r0, r0, #3
1004bf86:	f7ff fe1b 	bl	1004bbc0 <LL_APB1_GRP1_IsEnabledClock>
1004bf8a:	2800      	cmp	r0, #0
1004bf8c:	d00e      	beq.n	1004bfac <APB1periphContextRestore+0xac>
  {
    uint32_t app;
    app = apb1->USART_vr.CR1;
    apb1->USART_vr.CR1 &= ~USART_CR1_UE;
1004bf8e:	2201      	movs	r2, #1
    Osal_MemCpy4((uint32_t *)USART1, (uint32_t *)&apb1->USART_vr, 36); /* Skip RDR and TDR */
1004bf90:	0021      	movs	r1, r4
    app = apb1->USART_vr.CR1;
1004bf92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
    apb1->USART_vr.CR1 &= ~USART_CR1_UE;
1004bf94:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    Osal_MemCpy4((uint32_t *)USART1, (uint32_t *)&apb1->USART_vr, 36); /* Skip RDR and TDR */
1004bf96:	4d13      	ldr	r5, [pc, #76]	@ (1004bfe4 <APB1periphContextRestore+0xe4>)
    apb1->USART_vr.CR1 &= ~USART_CR1_UE;
1004bf98:	4393      	bics	r3, r2
1004bf9a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    Osal_MemCpy4((uint32_t *)USART1, (uint32_t *)&apb1->USART_vr, 36); /* Skip RDR and TDR */
1004bf9c:	0028      	movs	r0, r5
1004bf9e:	3223      	adds	r2, #35	@ 0x23
1004bfa0:	312c      	adds	r1, #44	@ 0x2c
1004bfa2:	f7ff fbc7 	bl	1004b734 <Osal_MemCpy4>
    USART1->PRESC = apb1->USART_vr.PRESC;
1004bfa6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
1004bfa8:	62eb      	str	r3, [r5, #44]	@ 0x2c
    USART1->CR1 = app;
1004bfaa:	602e      	str	r6, [r5, #0]
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_I2C1))
1004bfac:	2080      	movs	r0, #128	@ 0x80
1004bfae:	0380      	lsls	r0, r0, #14
1004bfb0:	f7ff fe06 	bl	1004bbc0 <LL_APB1_GRP1_IsEnabledClock>
1004bfb4:	2800      	cmp	r0, #0
1004bfb6:	d00c      	beq.n	1004bfd2 <APB1periphContextRestore+0xd2>
  {
    uint32_t app;
    app = apb1->I2C1_vr.CR1;
    apb1->I2C1_vr.CR1 &= ~I2C_CR1_PE;
1004bfb8:	2201      	movs	r2, #1
    Osal_MemCpy4((uint32_t *)I2C1, (uint32_t *)&apb1->I2C1_vr, 32); /* Skip PECR, RDR and TDR */
1004bfba:	2582      	movs	r5, #130	@ 0x82
    app = apb1->I2C1_vr.CR1;
1004bfbc:	6826      	ldr	r6, [r4, #0]
    apb1->I2C1_vr.CR1 &= ~I2C_CR1_PE;
1004bfbe:	6823      	ldr	r3, [r4, #0]
    Osal_MemCpy4((uint32_t *)I2C1, (uint32_t *)&apb1->I2C1_vr, 32); /* Skip PECR, RDR and TDR */
1004bfc0:	05ed      	lsls	r5, r5, #23
    apb1->I2C1_vr.CR1 &= ~I2C_CR1_PE;
1004bfc2:	4393      	bics	r3, r2
    Osal_MemCpy4((uint32_t *)I2C1, (uint32_t *)&apb1->I2C1_vr, 32); /* Skip PECR, RDR and TDR */
1004bfc4:	0021      	movs	r1, r4
1004bfc6:	0028      	movs	r0, r5
    apb1->I2C1_vr.CR1 &= ~I2C_CR1_PE;
1004bfc8:	6023      	str	r3, [r4, #0]
    Osal_MemCpy4((uint32_t *)I2C1, (uint32_t *)&apb1->I2C1_vr, 32); /* Skip PECR, RDR and TDR */
1004bfca:	321f      	adds	r2, #31
1004bfcc:	f7ff fbb2 	bl	1004b734 <Osal_MemCpy4>
    I2C1->CR1 = app;
1004bfd0:	602e      	str	r6, [r5, #0]
    apb1->I2C2_vr.CR1 &= ~I2C_CR1_PE;
    Osal_MemCpy4((uint32_t *)I2C2, (uint32_t *)&apb1->I2C2_vr, 32); /* Skip PECR, RDR and TDR */
    I2C2->CR1 = app;
  }
#endif
}
1004bfd2:	bd70      	pop	{r4, r5, r6, pc}
1004bfd4:	41007000 	.word	0x41007000
1004bfd8:	41007010 	.word	0x41007010
1004bfdc:	41006000 	.word	0x41006000
1004bfe0:	41005000 	.word	0x41005000
1004bfe4:	41004000 	.word	0x41004000

1004bfe8 <APB2periphContextRestore>:
  * @brief  Restore the APB2 peripheral registers content.
  * @param  apb2 Pointer to a APB2 structure
  * @retval None
  */
static void APB2periphContextRestore(apb2PeriphT *apb2)
{
1004bfe8:	b510      	push	{r4, lr}
  if (LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
1004bfea:	2001      	movs	r0, #1
1004bfec:	f7ff fdf2 	bl	1004bbd4 <LL_APB2_GRP1_IsEnabledClock>
      {
        SET_BIT(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS);
      }
#endif
  }
}
1004bff0:	bd10      	pop	{r4, pc}
	...

1004bff4 <AHB0periphContextRestore>:
  * @param  ahb0 Pointer to a AHB0 structure
  * @retval None
  */
static void AHB0periphContextRestore(ahb0PeriphT *ahb0)
{
  RCC->AHBRSTR = ahb0->RCC_AHBRSTR_vr;
1004bff4:	23de      	movs	r3, #222	@ 0xde
1004bff6:	005b      	lsls	r3, r3, #1
1004bff8:	58c2      	ldr	r2, [r0, r3]
1004bffa:	4b3a      	ldr	r3, [pc, #232]	@ (1004c0e4 <AHB0periphContextRestore+0xf0>)
{
1004bffc:	b510      	push	{r4, lr}
  RCC->AHBRSTR = ahb0->RCC_AHBRSTR_vr;
1004bffe:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC->APB1RSTR = ahb0->RCC_APB1RSTR_vr;
1004c000:	22e0      	movs	r2, #224	@ 0xe0
1004c002:	0052      	lsls	r2, r2, #1
1004c004:	5882      	ldr	r2, [r0, r2]
{
1004c006:	0004      	movs	r4, r0
  RCC->APB1RSTR = ahb0->RCC_APB1RSTR_vr;
1004c008:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC->AHBENR = ahb0->RCC_AHBENR_vr;
1004c00a:	22e2      	movs	r2, #226	@ 0xe2
1004c00c:	0052      	lsls	r2, r2, #1
1004c00e:	5882      	ldr	r2, [r0, r2]
1004c010:	651a      	str	r2, [r3, #80]	@ 0x50
  RCC->APB1ENR = ahb0->RCC_APB1ENR_vr;
1004c012:	22e4      	movs	r2, #228	@ 0xe4
1004c014:	0052      	lsls	r2, r2, #1
1004c016:	5882      	ldr	r2, [r0, r2]

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_DMA)) {
1004c018:	2001      	movs	r0, #1
  RCC->APB1ENR = ahb0->RCC_APB1ENR_vr;
1004c01a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_DMA)) {
1004c01c:	f7ff fda6 	bl	1004bb6c <LL_AHB1_GRP1_IsEnabledClock>
1004c020:	2800      	cmp	r0, #0
1004c022:	d018      	beq.n	1004c056 <AHB0periphContextRestore+0x62>
    Osal_MemCpy4((uint32_t *)DMAMUX1, (uint32_t *)ahb0->DMAMUX_vr, 8*sizeof(DMAMUX_Channel_TypeDef));
1004c024:	0021      	movs	r1, r4
1004c026:	2091      	movs	r0, #145	@ 0x91
1004c028:	319d      	adds	r1, #157	@ 0x9d
1004c02a:	2220      	movs	r2, #32
1004c02c:	31ff      	adds	r1, #255	@ 0xff
1004c02e:	05c0      	lsls	r0, r0, #23
1004c030:	f7ff fb80 	bl	1004b734 <Osal_MemCpy4>
    ahb0->DMA_vr[0].CNDTR = 0;
1004c034:	0021      	movs	r1, r4
    ahb0->DMA_vr[2].CNDTR = 0;
    ahb0->DMA_vr[3].CNDTR = 0;
    ahb0->DMA_vr[4].CNDTR = 0;
    ahb0->DMA_vr[5].CNDTR = 0;
    ahb0->DMA_vr[6].CNDTR = 0;
    ahb0->DMA_vr[7].CNDTR = 0;
1004c036:	22c6      	movs	r2, #198	@ 0xc6
    ahb0->DMA_vr[0].CNDTR = 0;
1004c038:	2300      	movs	r3, #0
1004c03a:	31fc      	adds	r1, #252	@ 0xfc
    ahb0->DMA_vr[7].CNDTR = 0;
1004c03c:	0052      	lsls	r2, r2, #1
    ahb0->DMA_vr[0].CNDTR = 0;
1004c03e:	604b      	str	r3, [r1, #4]
    Osal_MemCpy4((uint32_t *)DMA1, (uint32_t *)ahb0->DMA_vr, 8*sizeof(DMA_Channel_TypeDef));
1004c040:	4829      	ldr	r0, [pc, #164]	@ (1004c0e8 <AHB0periphContextRestore+0xf4>)
    ahb0->DMA_vr[1].CNDTR = 0;
1004c042:	618b      	str	r3, [r1, #24]
    ahb0->DMA_vr[2].CNDTR = 0;
1004c044:	62cb      	str	r3, [r1, #44]	@ 0x2c
    ahb0->DMA_vr[3].CNDTR = 0;
1004c046:	640b      	str	r3, [r1, #64]	@ 0x40
    ahb0->DMA_vr[4].CNDTR = 0;
1004c048:	654b      	str	r3, [r1, #84]	@ 0x54
    ahb0->DMA_vr[5].CNDTR = 0;
1004c04a:	668b      	str	r3, [r1, #104]	@ 0x68
    ahb0->DMA_vr[6].CNDTR = 0;
1004c04c:	67cb      	str	r3, [r1, #124]	@ 0x7c
    ahb0->DMA_vr[7].CNDTR = 0;
1004c04e:	50a3      	str	r3, [r4, r2]
    Osal_MemCpy4((uint32_t *)DMA1, (uint32_t *)ahb0->DMA_vr, 8*sizeof(DMA_Channel_TypeDef));
1004c050:	3aec      	subs	r2, #236	@ 0xec
1004c052:	f7ff fb6f 	bl	1004b734 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_RNG)) {
1004c056:	2080      	movs	r0, #128	@ 0x80
1004c058:	02c0      	lsls	r0, r0, #11
1004c05a:	f7ff fd87 	bl	1004bb6c <LL_AHB1_GRP1_IsEnabledClock>
1004c05e:	2800      	cmp	r0, #0
1004c060:	d005      	beq.n	1004c06e <AHB0periphContextRestore+0x7a>
    Osal_MemCpy4((uint32_t *)RNG, (uint32_t *)&ahb0->RNG_vr, sizeof(RNG_TypeDef));
1004c062:	0021      	movs	r1, r4
1004c064:	2288      	movs	r2, #136	@ 0x88
1004c066:	4821      	ldr	r0, [pc, #132]	@ (1004c0ec <AHB0periphContextRestore+0xf8>)
1004c068:	3174      	adds	r1, #116	@ 0x74
1004c06a:	f7ff fb63 	bl	1004b734 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_PKA)) {
1004c06e:	2080      	movs	r0, #128	@ 0x80
1004c070:	0240      	lsls	r0, r0, #9
1004c072:	f7ff fd7b 	bl	1004bb6c <LL_AHB1_GRP1_IsEnabledClock>
1004c076:	2800      	cmp	r0, #0
1004c078:	d005      	beq.n	1004c086 <AHB0periphContextRestore+0x92>
#if defined(STM32WB06) || defined(STM32WB07)
    PKA->CSR = ahb0->PKA_CSR_vr;
    PKA->ISR = ahb0->PKA_ISR_vr;
    PKA->IEN = ahb0->PKA_IEN_vr;
#else
    PKA->CLRFR = 0x1A0000;
1004c07a:	22d0      	movs	r2, #208	@ 0xd0
1004c07c:	4b1c      	ldr	r3, [pc, #112]	@ (1004c0f0 <AHB0periphContextRestore+0xfc>)
1004c07e:	0352      	lsls	r2, r2, #13
1004c080:	609a      	str	r2, [r3, #8]
    PKA->CR = ahb0->PKA_CR_vr;
1004c082:	6f22      	ldr	r2, [r4, #112]	@ 0x70
1004c084:	601a      	str	r2, [r3, #0]
#endif
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_CRC)) {
1004c086:	2080      	movs	r0, #128	@ 0x80
1004c088:	0140      	lsls	r0, r0, #5
1004c08a:	f7ff fd6f 	bl	1004bb6c <LL_AHB1_GRP1_IsEnabledClock>
1004c08e:	2800      	cmp	r0, #0
1004c090:	d005      	beq.n	1004c09e <AHB0periphContextRestore+0xaa>
    Osal_MemCpy4((uint32_t *)CRC, (uint32_t *)&ahb0->CRC_vr, sizeof(CRC_TypeDef));
1004c092:	0021      	movs	r1, r4
1004c094:	2218      	movs	r2, #24
1004c096:	4817      	ldr	r0, [pc, #92]	@ (1004c0f4 <AHB0periphContextRestore+0x100>)
1004c098:	3158      	adds	r1, #88	@ 0x58
1004c09a:	f7ff fb4b 	bl	1004b734 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_GPIOA)) {
1004c09e:	2004      	movs	r0, #4
1004c0a0:	f7ff fd64 	bl	1004bb6c <LL_AHB1_GRP1_IsEnabledClock>
1004c0a4:	2800      	cmp	r0, #0
1004c0a6:	d00b      	beq.n	1004c0c0 <AHB0periphContextRestore+0xcc>
    GPIOA->AFR[0] = ahb0->GPIOA_vr.AFR[0]; /* To avoid glitch in the line when an AF is set */
1004c0a8:	2090      	movs	r0, #144	@ 0x90
1004c0aa:	6a23      	ldr	r3, [r4, #32]
1004c0ac:	05c0      	lsls	r0, r0, #23
1004c0ae:	6203      	str	r3, [r0, #32]
    GPIOA->AFR[1] = ahb0->GPIOA_vr.AFR[1];
1004c0b0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    GPIOA->ODR = ahb0->GPIOA_vr.ODR;       /* To avoid glitch in the line when GPIO_MODE_OUTPUT is set */
    Osal_MemCpy4((uint32_t *)GPIOA, (uint32_t *)&ahb0->GPIOA_vr, sizeof(GPIO_TypeDef));
1004c0b2:	222c      	movs	r2, #44	@ 0x2c
    GPIOA->AFR[1] = ahb0->GPIOA_vr.AFR[1];
1004c0b4:	6243      	str	r3, [r0, #36]	@ 0x24
    GPIOA->ODR = ahb0->GPIOA_vr.ODR;       /* To avoid glitch in the line when GPIO_MODE_OUTPUT is set */
1004c0b6:	6963      	ldr	r3, [r4, #20]
    Osal_MemCpy4((uint32_t *)GPIOA, (uint32_t *)&ahb0->GPIOA_vr, sizeof(GPIO_TypeDef));
1004c0b8:	0021      	movs	r1, r4
    GPIOA->ODR = ahb0->GPIOA_vr.ODR;       /* To avoid glitch in the line when GPIO_MODE_OUTPUT is set */
1004c0ba:	6143      	str	r3, [r0, #20]
    Osal_MemCpy4((uint32_t *)GPIOA, (uint32_t *)&ahb0->GPIOA_vr, sizeof(GPIO_TypeDef));
1004c0bc:	f7ff fb3a 	bl	1004b734 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_GPIOB)) {
1004c0c0:	2008      	movs	r0, #8
1004c0c2:	f7ff fd53 	bl	1004bb6c <LL_AHB1_GRP1_IsEnabledClock>
1004c0c6:	2800      	cmp	r0, #0
1004c0c8:	d00b      	beq.n	1004c0e2 <AHB0periphContextRestore+0xee>
    GPIOB->AFR[0] = ahb0->GPIOB_vr.AFR[0]; /* To avoid glitch in the line when an AF is set */
    GPIOB->AFR[1] = ahb0->GPIOB_vr.AFR[1];
    GPIOB->ODR = ahb0->GPIOB_vr.ODR;       /* To avoid glitch in the line when GPIO_MODE_OUTPUT is set */
    Osal_MemCpy4((uint32_t *)GPIOB, (uint32_t *)&ahb0->GPIOB_vr, sizeof(GPIO_TypeDef));
1004c0ca:	0021      	movs	r1, r4
    GPIOB->AFR[0] = ahb0->GPIOB_vr.AFR[0]; /* To avoid glitch in the line when an AF is set */
1004c0cc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
1004c0ce:	480a      	ldr	r0, [pc, #40]	@ (1004c0f8 <AHB0periphContextRestore+0x104>)
    Osal_MemCpy4((uint32_t *)GPIOB, (uint32_t *)&ahb0->GPIOB_vr, sizeof(GPIO_TypeDef));
1004c0d0:	222c      	movs	r2, #44	@ 0x2c
    GPIOB->AFR[0] = ahb0->GPIOB_vr.AFR[0]; /* To avoid glitch in the line when an AF is set */
1004c0d2:	6203      	str	r3, [r0, #32]
    GPIOB->AFR[1] = ahb0->GPIOB_vr.AFR[1];
1004c0d4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
    Osal_MemCpy4((uint32_t *)GPIOB, (uint32_t *)&ahb0->GPIOB_vr, sizeof(GPIO_TypeDef));
1004c0d6:	312c      	adds	r1, #44	@ 0x2c
    GPIOB->AFR[1] = ahb0->GPIOB_vr.AFR[1];
1004c0d8:	6243      	str	r3, [r0, #36]	@ 0x24
    GPIOB->ODR = ahb0->GPIOB_vr.ODR;       /* To avoid glitch in the line when GPIO_MODE_OUTPUT is set */
1004c0da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
1004c0dc:	6143      	str	r3, [r0, #20]
    Osal_MemCpy4((uint32_t *)GPIOB, (uint32_t *)&ahb0->GPIOB_vr, sizeof(GPIO_TypeDef));
1004c0de:	f7ff fb29 	bl	1004b734 <Osal_MemCpy4>
  }
}
1004c0e2:	bd10      	pop	{r4, pc}
1004c0e4:	48400000 	.word	0x48400000
1004c0e8:	48700000 	.word	0x48700000
1004c0ec:	48600000 	.word	0x48600000
1004c0f0:	48300000 	.word	0x48300000
1004c0f4:	48200000 	.word	0x48200000
1004c0f8:	48100000 	.word	0x48100000

1004c0fc <cstackContextRestore>:
{
  uint8_t i;
  volatile uint32_t *ptr;

  i = 0;
  ptr = __vector_table[0].__ptr ;
1004c0fc:	4b04      	ldr	r3, [pc, #16]	@ (1004c110 <cstackContextRestore+0x14>)
1004c0fe:	681a      	ldr	r2, [r3, #0]
  ptr -= CSTACK_PREAMBLE_NUMBER;
1004c100:	0013      	movs	r3, r2
1004c102:	3b50      	subs	r3, #80	@ 0x50
  do
  {
    *ptr = cStackPreamble[i];
1004c104:	c802      	ldmia	r0!, {r1}
1004c106:	c302      	stmia	r3!, {r1}
    i++;
    ptr++;
  } while (i < CSTACK_PREAMBLE_NUMBER);
1004c108:	429a      	cmp	r2, r3
1004c10a:	d1fb      	bne.n	1004c104 <cstackContextRestore+0x8>

}
1004c10c:	4770      	bx	lr
1004c10e:	46c0      	nop			@ (mov r8, r8)
1004c110:	10041000 	.word	0x10041000

1004c114 <cpuPeriphContextRestore>:
  */
static void cpuPeriphContextRestore(cpuPeriphT *cpuPeriph)
{
  uint8_t i;

  SCB->VTOR = cpuPeriph->SCB_VTOR_vr;
1004c114:	6802      	ldr	r2, [r0, #0]
1004c116:	4b0e      	ldr	r3, [pc, #56]	@ (1004c150 <cpuPeriphContextRestore+0x3c>)
{
1004c118:	b530      	push	{r4, r5, lr}
  SCB->VTOR = cpuPeriph->SCB_VTOR_vr;
1004c11a:	609a      	str	r2, [r3, #8]
  NVIC->ISER[0] = cpuPeriph->NVIC_ISER_vr;
1004c11c:	6843      	ldr	r3, [r0, #4]
1004c11e:	490d      	ldr	r1, [pc, #52]	@ (1004c154 <cpuPeriphContextRestore+0x40>)
  for (i=0; i<8; i++)
  {
   NVIC->IP[i] = cpuPeriph->NVIC_IPR_vr[i];
1004c120:	0005      	movs	r5, r0
  NVIC->ISER[0] = cpuPeriph->NVIC_ISER_vr;
1004c122:	600b      	str	r3, [r1, #0]
1004c124:	2300      	movs	r3, #0
   NVIC->IP[i] = cpuPeriph->NVIC_IPR_vr[i];
1004c126:	3508      	adds	r5, #8
1004c128:	009a      	lsls	r2, r3, #2
1004c12a:	58ac      	ldr	r4, [r5, r2]
1004c12c:	001a      	movs	r2, r3
1004c12e:	32c0      	adds	r2, #192	@ 0xc0
1004c130:	0092      	lsls	r2, r2, #2
  for (i=0; i<8; i++)
1004c132:	3301      	adds	r3, #1
   NVIC->IP[i] = cpuPeriph->NVIC_IPR_vr[i];
1004c134:	508c      	str	r4, [r1, r2]
  for (i=0; i<8; i++)
1004c136:	2b08      	cmp	r3, #8
1004c138:	d1f6      	bne.n	1004c128 <cpuPeriphContextRestore+0x14>
  }
  *(volatile uint32_t *)SHPR3_REG = cpuPeriph->SYSTICK_IPR_vr;
1004c13a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
1004c13c:	4b06      	ldr	r3, [pc, #24]	@ (1004c158 <cpuPeriphContextRestore+0x44>)
1004c13e:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = cpuPeriph->SYST_RVR_vr;
1004c140:	6b02      	ldr	r2, [r0, #48]	@ 0x30
1004c142:	4b06      	ldr	r3, [pc, #24]	@ (1004c15c <cpuPeriphContextRestore+0x48>)
1004c144:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
1004c146:	2200      	movs	r2, #0
1004c148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = cpuPeriph->SYST_CSR_vr;
1004c14a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
1004c14c:	601a      	str	r2, [r3, #0]
}
1004c14e:	bd30      	pop	{r4, r5, pc}
1004c150:	e000ed00 	.word	0xe000ed00
1004c154:	e000e100 	.word	0xe000e100
1004c158:	e000ed20 	.word	0xe000ed20
1004c15c:	e000e010 	.word	0xe000e010

1004c160 <prepareDeviceLowPower>:
  * @retval None
  */
void prepareDeviceLowPower(apb0PeriphT *apb0, apb1PeriphT *apb1,
                           apb2PeriphT *apb2, ahb0PeriphT *ahb0,
                           cpuPeriphT *cpuPeriph, uint32_t *cStackPreamble)
{
1004c160:	b570      	push	{r4, r5, r6, lr}
1004c162:	000e      	movs	r6, r1
1004c164:	0015      	movs	r5, r2
  /* Reset the wakeup flag before the low power mode */
  RAM_VR.WakeupFromSleepFlag = 0;
1004c166:	2200      	movs	r2, #0
{
1004c168:	001c      	movs	r4, r3
  RAM_VR.WakeupFromSleepFlag = 0;
1004c16a:	4b0a      	ldr	r3, [pc, #40]	@ (1004c194 <prepareDeviceLowPower+0x34>)
1004c16c:	609a      	str	r2, [r3, #8]

  /* Save the APB0 peripheral configuration */
  APB0periphContextSave(apb0);
1004c16e:	f7ff fd3b 	bl	1004bbe8 <APB0periphContextSave>

  /* Save the APB1 peripheral configuration */
  APB1periphContextSave(apb1);
1004c172:	0030      	movs	r0, r6
1004c174:	f7ff fd88 	bl	1004bc88 <APB1periphContextSave>

  /* Save the APB2 peripheral configuration */
  APB2periphContextSave(apb2);
1004c178:	0028      	movs	r0, r5
1004c17a:	f7ff fdcf 	bl	1004bd1c <APB2periphContextSave>

  /* Save the AHB0 peripheral configuration */
  AHB0periphContextSave(ahb0);
1004c17e:	0020      	movs	r0, r4
1004c180:	f7ff fdd2 	bl	1004bd28 <AHB0periphContextSave>

  /* Save the first N c-stack location that will be restored at wakeup reset */
  cstackContextSave(cStackPreamble);
1004c184:	9805      	ldr	r0, [sp, #20]
1004c186:	f7ff fe37 	bl	1004bdf8 <cstackContextSave>

  /* Save the CPU peripheral configuration (NVIC, SysTick, Vector Table) */
  cpuPeriphContextSave(cpuPeriph);
1004c18a:	9804      	ldr	r0, [sp, #16]
1004c18c:	f7ff fe40 	bl	1004be10 <cpuPeriphContextSave>
}
1004c190:	bd70      	pop	{r4, r5, r6, pc}
1004c192:	46c0      	nop			@ (mov r8, r8)
1004c194:	20000004 	.word	0x20000004

1004c198 <restoreDeviceLowPower>:
  * @retval None
  */
void restoreDeviceLowPower(apb0PeriphT *apb0, apb1PeriphT *apb1,
                           apb2PeriphT *apb2, ahb0PeriphT *ahb0,
                           cpuPeriphT *cpuPeriph, uint32_t *cStackPreamble)
{
1004c198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004c19a:	001f      	movs	r7, r3
  /* Enable Watchdog IP if previous disabled */
  if (apb0->wdg_to_be_enabled)
1004c19c:	0003      	movs	r3, r0
1004c19e:	33fc      	adds	r3, #252	@ 0xfc
{
1004c1a0:	0015      	movs	r5, r2
  if (apb0->wdg_to_be_enabled)
1004c1a2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
{
1004c1a4:	0004      	movs	r4, r0
1004c1a6:	000e      	movs	r6, r1
  if (apb0->wdg_to_be_enabled)
1004c1a8:	2a00      	cmp	r2, #0
1004c1aa:	d005      	beq.n	1004c1b8 <restoreDeviceLowPower+0x20>
  {
    apb0->wdg_to_be_enabled = FALSE;
1004c1ac:	2200      	movs	r2, #0
    LL_APB0_GRP1_EnableClock(LL_APB0_GRP1_PERIPH_WDG);
1004c1ae:	2080      	movs	r0, #128	@ 0x80
    apb0->wdg_to_be_enabled = FALSE;
1004c1b0:	675a      	str	r2, [r3, #116]	@ 0x74
    LL_APB0_GRP1_EnableClock(LL_APB0_GRP1_PERIPH_WDG);
1004c1b2:	01c0      	lsls	r0, r0, #7
1004c1b4:	f7ff fce4 	bl	1004bb80 <LL_APB0_GRP1_EnableClock>
  }

  /* No Wakeup from DEEPSTOP, so the peripehral configuration is not lost */
  if (RAM_VR.WakeupFromSleepFlag == 0)
1004c1b8:	4b0b      	ldr	r3, [pc, #44]	@ (1004c1e8 <restoreDeviceLowPower+0x50>)
1004c1ba:	689b      	ldr	r3, [r3, #8]
1004c1bc:	2b00      	cmp	r3, #0
1004c1be:	d011      	beq.n	1004c1e4 <restoreDeviceLowPower+0x4c>
  {
    return;
  }

  /* Restore the first N c-stack location that will be restored at wakeup reset */
  cstackContextRestore(cStackPreamble);
1004c1c0:	9807      	ldr	r0, [sp, #28]
1004c1c2:	f7ff ff9b 	bl	1004c0fc <cstackContextRestore>

  /* Restore the CPU peripheral configuration (NVIC, SysTick, Vector Table) */
  cpuPeriphContextRestore(cpuPeriph);
1004c1c6:	9806      	ldr	r0, [sp, #24]
1004c1c8:	f7ff ffa4 	bl	1004c114 <cpuPeriphContextRestore>

  /* Restore the AHB0 peripheral configuration */
  AHB0periphContextRestore(ahb0);
1004c1cc:	0038      	movs	r0, r7
1004c1ce:	f7ff ff11 	bl	1004bff4 <AHB0periphContextRestore>

  /* Restore the APB0 peripheral configuration */
  APB0periphContextRestore(apb0);
1004c1d2:	0020      	movs	r0, r4
1004c1d4:	f7ff fe40 	bl	1004be58 <APB0periphContextRestore>

  /* Restore the APB1 peripheral configuration */
  APB1periphContextRestore(apb1);
1004c1d8:	0030      	movs	r0, r6
1004c1da:	f7ff fe91 	bl	1004bf00 <APB1periphContextRestore>

  /* Restore the APB2 peripheral configuration */
  APB2periphContextRestore(apb2);
1004c1de:	0028      	movs	r0, r5
1004c1e0:	f7ff ff02 	bl	1004bfe8 <APB2periphContextRestore>
}
1004c1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004c1e6:	46c0      	nop			@ (mov r8, r8)
1004c1e8:	20000004 	.word	0x20000004

1004c1ec <LL_PWR_IsEnabledPUPDCfg>:
{
1004c1ec:	b580      	push	{r7, lr}
1004c1ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_APC) == (PWR_CR1_APC)) ? 1UL : 0UL);
1004c1f0:	4b05      	ldr	r3, [pc, #20]	@ (1004c208 <LL_PWR_IsEnabledPUPDCfg+0x1c>)
1004c1f2:	681b      	ldr	r3, [r3, #0]
1004c1f4:	2210      	movs	r2, #16
1004c1f6:	4013      	ands	r3, r2
1004c1f8:	2b10      	cmp	r3, #16
1004c1fa:	d101      	bne.n	1004c200 <LL_PWR_IsEnabledPUPDCfg+0x14>
1004c1fc:	2301      	movs	r3, #1
1004c1fe:	e000      	b.n	1004c202 <LL_PWR_IsEnabledPUPDCfg+0x16>
1004c200:	2300      	movs	r3, #0
}
1004c202:	0018      	movs	r0, r3
1004c204:	46bd      	mov	sp, r7
1004c206:	bd80      	pop	{r7, pc}
1004c208:	48500000 	.word	0x48500000

1004c20c <LL_PWR_EnableGPIOPullUp>:
{
1004c20c:	b580      	push	{r7, lr}
1004c20e:	b082      	sub	sp, #8
1004c210:	af00      	add	r7, sp, #0
1004c212:	6078      	str	r0, [r7, #4]
1004c214:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4UL)), GPIONumber);
1004c216:	687b      	ldr	r3, [r7, #4]
1004c218:	3304      	adds	r3, #4
1004c21a:	681a      	ldr	r2, [r3, #0]
1004c21c:	683b      	ldr	r3, [r7, #0]
1004c21e:	43d9      	mvns	r1, r3
1004c220:	687b      	ldr	r3, [r7, #4]
1004c222:	3304      	adds	r3, #4
1004c224:	400a      	ands	r2, r1
1004c226:	601a      	str	r2, [r3, #0]
  SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
1004c228:	687b      	ldr	r3, [r7, #4]
1004c22a:	6819      	ldr	r1, [r3, #0]
1004c22c:	687b      	ldr	r3, [r7, #4]
1004c22e:	683a      	ldr	r2, [r7, #0]
1004c230:	430a      	orrs	r2, r1
1004c232:	601a      	str	r2, [r3, #0]
}
1004c234:	46c0      	nop			@ (mov r8, r8)
1004c236:	46bd      	mov	sp, r7
1004c238:	b002      	add	sp, #8
1004c23a:	bd80      	pop	{r7, pc}

1004c23c <LL_AHB1_GRP1_EnableClock>:
{
1004c23c:	b580      	push	{r7, lr}
1004c23e:	b084      	sub	sp, #16
1004c240:	af00      	add	r7, sp, #0
1004c242:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
1004c244:	4b07      	ldr	r3, [pc, #28]	@ (1004c264 <LL_AHB1_GRP1_EnableClock+0x28>)
1004c246:	6d19      	ldr	r1, [r3, #80]	@ 0x50
1004c248:	4b06      	ldr	r3, [pc, #24]	@ (1004c264 <LL_AHB1_GRP1_EnableClock+0x28>)
1004c24a:	687a      	ldr	r2, [r7, #4]
1004c24c:	430a      	orrs	r2, r1
1004c24e:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
1004c250:	4b04      	ldr	r3, [pc, #16]	@ (1004c264 <LL_AHB1_GRP1_EnableClock+0x28>)
1004c252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004c254:	687a      	ldr	r2, [r7, #4]
1004c256:	4013      	ands	r3, r2
1004c258:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004c25a:	68fb      	ldr	r3, [r7, #12]
}
1004c25c:	46c0      	nop			@ (mov r8, r8)
1004c25e:	46bd      	mov	sp, r7
1004c260:	b004      	add	sp, #16
1004c262:	bd80      	pop	{r7, pc}
1004c264:	48400000 	.word	0x48400000

1004c268 <LL_APB0_GRP1_EnableClock>:
{
1004c268:	b580      	push	{r7, lr}
1004c26a:	b084      	sub	sp, #16
1004c26c:	af00      	add	r7, sp, #0
1004c26e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
1004c270:	4b07      	ldr	r3, [pc, #28]	@ (1004c290 <LL_APB0_GRP1_EnableClock+0x28>)
1004c272:	6d59      	ldr	r1, [r3, #84]	@ 0x54
1004c274:	4b06      	ldr	r3, [pc, #24]	@ (1004c290 <LL_APB0_GRP1_EnableClock+0x28>)
1004c276:	687a      	ldr	r2, [r7, #4]
1004c278:	430a      	orrs	r2, r1
1004c27a:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
1004c27c:	4b04      	ldr	r3, [pc, #16]	@ (1004c290 <LL_APB0_GRP1_EnableClock+0x28>)
1004c27e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004c280:	687a      	ldr	r2, [r7, #4]
1004c282:	4013      	ands	r3, r2
1004c284:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004c286:	68fb      	ldr	r3, [r7, #12]
}
1004c288:	46c0      	nop			@ (mov r8, r8)
1004c28a:	46bd      	mov	sp, r7
1004c28c:	b004      	add	sp, #16
1004c28e:	bd80      	pop	{r7, pc}
1004c290:	48400000 	.word	0x48400000

1004c294 <LL_APB1_GRP1_EnableClock>:
{
1004c294:	b580      	push	{r7, lr}
1004c296:	b084      	sub	sp, #16
1004c298:	af00      	add	r7, sp, #0
1004c29a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
1004c29c:	4b07      	ldr	r3, [pc, #28]	@ (1004c2bc <LL_APB1_GRP1_EnableClock+0x28>)
1004c29e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
1004c2a0:	4b06      	ldr	r3, [pc, #24]	@ (1004c2bc <LL_APB1_GRP1_EnableClock+0x28>)
1004c2a2:	687a      	ldr	r2, [r7, #4]
1004c2a4:	430a      	orrs	r2, r1
1004c2a6:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
1004c2a8:	4b04      	ldr	r3, [pc, #16]	@ (1004c2bc <LL_APB1_GRP1_EnableClock+0x28>)
1004c2aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
1004c2ac:	687a      	ldr	r2, [r7, #4]
1004c2ae:	4013      	ands	r3, r2
1004c2b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004c2b2:	68fb      	ldr	r3, [r7, #12]
}
1004c2b4:	46c0      	nop			@ (mov r8, r8)
1004c2b6:	46bd      	mov	sp, r7
1004c2b8:	b004      	add	sp, #16
1004c2ba:	bd80      	pop	{r7, pc}
1004c2bc:	48400000 	.word	0x48400000

1004c2c0 <BSP_LED_Init>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
1004c2c0:	b590      	push	{r4, r7, lr}
1004c2c2:	b089      	sub	sp, #36	@ 0x24
1004c2c4:	af00      	add	r7, sp, #0
1004c2c6:	0002      	movs	r2, r0
1004c2c8:	1dfb      	adds	r3, r7, #7
1004c2ca:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LD1)
1004c2cc:	1dfb      	adds	r3, r7, #7
1004c2ce:	781b      	ldrb	r3, [r3, #0]
1004c2d0:	2b00      	cmp	r3, #0
1004c2d2:	d103      	bne.n	1004c2dc <BSP_LED_Init+0x1c>
  {
    LD1_GPIO_CLK_ENABLE();
1004c2d4:	2008      	movs	r0, #8
1004c2d6:	f7ff ffb1 	bl	1004c23c <LL_AHB1_GRP1_EnableClock>
1004c2da:	e00a      	b.n	1004c2f2 <BSP_LED_Init+0x32>
  }
  else if (Led == LD2)
1004c2dc:	1dfb      	adds	r3, r7, #7
1004c2de:	781b      	ldrb	r3, [r3, #0]
1004c2e0:	2b01      	cmp	r3, #1
1004c2e2:	d103      	bne.n	1004c2ec <BSP_LED_Init+0x2c>
  {
    LD2_GPIO_CLK_ENABLE();
1004c2e4:	2008      	movs	r0, #8
1004c2e6:	f7ff ffa9 	bl	1004c23c <LL_AHB1_GRP1_EnableClock>
1004c2ea:	e002      	b.n	1004c2f2 <BSP_LED_Init+0x32>
  }
  else /* Led = LD3 */
  {
    LD3_GPIO_CLK_ENABLE();
1004c2ec:	2008      	movs	r0, #8
1004c2ee:	f7ff ffa5 	bl	1004c23c <LL_AHB1_GRP1_EnableClock>
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
1004c2f2:	1dfb      	adds	r3, r7, #7
1004c2f4:	781a      	ldrb	r2, [r3, #0]
1004c2f6:	4b28      	ldr	r3, [pc, #160]	@ (1004c398 <BSP_LED_Init+0xd8>)
1004c2f8:	0052      	lsls	r2, r2, #1
1004c2fa:	5ad3      	ldrh	r3, [r2, r3]
1004c2fc:	001a      	movs	r2, r3
1004c2fe:	240c      	movs	r4, #12
1004c300:	193b      	adds	r3, r7, r4
1004c302:	601a      	str	r2, [r3, #0]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
1004c304:	193b      	adds	r3, r7, r4
1004c306:	2201      	movs	r2, #1
1004c308:	605a      	str	r2, [r3, #4]
  GPIO_Init.Pull  = GPIO_PULLUP;
1004c30a:	193b      	adds	r3, r7, r4
1004c30c:	2201      	movs	r2, #1
1004c30e:	609a      	str	r2, [r3, #8]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
1004c310:	193b      	adds	r3, r7, r4
1004c312:	2202      	movs	r2, #2
1004c314:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
1004c316:	1dfb      	adds	r3, r7, #7
1004c318:	781a      	ldrb	r2, [r3, #0]
1004c31a:	4b20      	ldr	r3, [pc, #128]	@ (1004c39c <BSP_LED_Init+0xdc>)
1004c31c:	0092      	lsls	r2, r2, #2
1004c31e:	58d3      	ldr	r3, [r2, r3]
1004c320:	193a      	adds	r2, r7, r4
1004c322:	0011      	movs	r1, r2
1004c324:	0018      	movs	r0, r3
1004c326:	f000 fe9b 	bl	1004d060 <HAL_GPIO_Init>

  if( LL_PWR_IsEnabledPUPDCfg() != 0)
1004c32a:	f7ff ff5f 	bl	1004c1ec <LL_PWR_IsEnabledPUPDCfg>
1004c32e:	1e03      	subs	r3, r0, #0
1004c330:	d01f      	beq.n	1004c372 <BSP_LED_Init+0xb2>
  {
    if (LED_PORT[Led] == GPIOA)
1004c332:	1dfb      	adds	r3, r7, #7
1004c334:	781a      	ldrb	r2, [r3, #0]
1004c336:	4b19      	ldr	r3, [pc, #100]	@ (1004c39c <BSP_LED_Init+0xdc>)
1004c338:	0092      	lsls	r2, r2, #2
1004c33a:	58d2      	ldr	r2, [r2, r3]
1004c33c:	2390      	movs	r3, #144	@ 0x90
1004c33e:	05db      	lsls	r3, r3, #23
1004c340:	429a      	cmp	r2, r3
1004c342:	d106      	bne.n	1004c352 <BSP_LED_Init+0x92>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
1004c344:	193b      	adds	r3, r7, r4
1004c346:	681b      	ldr	r3, [r3, #0]
1004c348:	4a15      	ldr	r2, [pc, #84]	@ (1004c3a0 <BSP_LED_Init+0xe0>)
1004c34a:	0019      	movs	r1, r3
1004c34c:	0010      	movs	r0, r2
1004c34e:	f7ff ff5d 	bl	1004c20c <LL_PWR_EnableGPIOPullUp>
    }
     if (LED_PORT[Led] == GPIOB)
1004c352:	1dfb      	adds	r3, r7, #7
1004c354:	781a      	ldrb	r2, [r3, #0]
1004c356:	4b11      	ldr	r3, [pc, #68]	@ (1004c39c <BSP_LED_Init+0xdc>)
1004c358:	0092      	lsls	r2, r2, #2
1004c35a:	58d3      	ldr	r3, [r2, r3]
1004c35c:	4a11      	ldr	r2, [pc, #68]	@ (1004c3a4 <BSP_LED_Init+0xe4>)
1004c35e:	4293      	cmp	r3, r2
1004c360:	d107      	bne.n	1004c372 <BSP_LED_Init+0xb2>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_B, GPIO_Init.Pin);
1004c362:	230c      	movs	r3, #12
1004c364:	18fb      	adds	r3, r7, r3
1004c366:	681b      	ldr	r3, [r3, #0]
1004c368:	4a0f      	ldr	r2, [pc, #60]	@ (1004c3a8 <BSP_LED_Init+0xe8>)
1004c36a:	0019      	movs	r1, r3
1004c36c:	0010      	movs	r0, r2
1004c36e:	f7ff ff4d 	bl	1004c20c <LL_PWR_EnableGPIOPullUp>
    }
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
1004c372:	1dfb      	adds	r3, r7, #7
1004c374:	781a      	ldrb	r2, [r3, #0]
1004c376:	4b09      	ldr	r3, [pc, #36]	@ (1004c39c <BSP_LED_Init+0xdc>)
1004c378:	0092      	lsls	r2, r2, #2
1004c37a:	58d0      	ldr	r0, [r2, r3]
1004c37c:	1dfb      	adds	r3, r7, #7
1004c37e:	781a      	ldrb	r2, [r3, #0]
1004c380:	4b05      	ldr	r3, [pc, #20]	@ (1004c398 <BSP_LED_Init+0xd8>)
1004c382:	0052      	lsls	r2, r2, #1
1004c384:	5ad3      	ldrh	r3, [r2, r3]
1004c386:	2201      	movs	r2, #1
1004c388:	0019      	movs	r1, r3
1004c38a:	f001 f82f 	bl	1004d3ec <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
1004c38e:	2300      	movs	r3, #0
}
1004c390:	0018      	movs	r0, r3
1004c392:	46bd      	mov	sp, r7
1004c394:	b009      	add	sp, #36	@ 0x24
1004c396:	bd90      	pop	{r4, r7, pc}
1004c398:	20001494 	.word	0x20001494
1004c39c:	2000149c 	.word	0x2000149c
1004c3a0:	48500020 	.word	0x48500020
1004c3a4:	48100000 	.word	0x48100000
1004c3a8:	48500028 	.word	0x48500028

1004c3ac <BSP_LED_On>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
1004c3ac:	b580      	push	{r7, lr}
1004c3ae:	b082      	sub	sp, #8
1004c3b0:	af00      	add	r7, sp, #0
1004c3b2:	0002      	movs	r2, r0
1004c3b4:	1dfb      	adds	r3, r7, #7
1004c3b6:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
1004c3b8:	1dfb      	adds	r3, r7, #7
1004c3ba:	781a      	ldrb	r2, [r3, #0]
1004c3bc:	4b08      	ldr	r3, [pc, #32]	@ (1004c3e0 <BSP_LED_On+0x34>)
1004c3be:	0092      	lsls	r2, r2, #2
1004c3c0:	58d0      	ldr	r0, [r2, r3]
1004c3c2:	1dfb      	adds	r3, r7, #7
1004c3c4:	781a      	ldrb	r2, [r3, #0]
1004c3c6:	4b07      	ldr	r3, [pc, #28]	@ (1004c3e4 <BSP_LED_On+0x38>)
1004c3c8:	0052      	lsls	r2, r2, #1
1004c3ca:	5ad3      	ldrh	r3, [r2, r3]
1004c3cc:	2200      	movs	r2, #0
1004c3ce:	0019      	movs	r1, r3
1004c3d0:	f001 f80c 	bl	1004d3ec <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
1004c3d4:	2300      	movs	r3, #0
}
1004c3d6:	0018      	movs	r0, r3
1004c3d8:	46bd      	mov	sp, r7
1004c3da:	b002      	add	sp, #8
1004c3dc:	bd80      	pop	{r7, pc}
1004c3de:	46c0      	nop			@ (mov r8, r8)
1004c3e0:	2000149c 	.word	0x2000149c
1004c3e4:	20001494 	.word	0x20001494

1004c3e8 <BSP_LED_Off>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
1004c3e8:	b580      	push	{r7, lr}
1004c3ea:	b082      	sub	sp, #8
1004c3ec:	af00      	add	r7, sp, #0
1004c3ee:	0002      	movs	r2, r0
1004c3f0:	1dfb      	adds	r3, r7, #7
1004c3f2:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
1004c3f4:	1dfb      	adds	r3, r7, #7
1004c3f6:	781a      	ldrb	r2, [r3, #0]
1004c3f8:	4b08      	ldr	r3, [pc, #32]	@ (1004c41c <BSP_LED_Off+0x34>)
1004c3fa:	0092      	lsls	r2, r2, #2
1004c3fc:	58d0      	ldr	r0, [r2, r3]
1004c3fe:	1dfb      	adds	r3, r7, #7
1004c400:	781a      	ldrb	r2, [r3, #0]
1004c402:	4b07      	ldr	r3, [pc, #28]	@ (1004c420 <BSP_LED_Off+0x38>)
1004c404:	0052      	lsls	r2, r2, #1
1004c406:	5ad3      	ldrh	r3, [r2, r3]
1004c408:	2201      	movs	r2, #1
1004c40a:	0019      	movs	r1, r3
1004c40c:	f000 ffee 	bl	1004d3ec <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
1004c410:	2300      	movs	r3, #0
}
1004c412:	0018      	movs	r0, r3
1004c414:	46bd      	mov	sp, r7
1004c416:	b002      	add	sp, #8
1004c418:	bd80      	pop	{r7, pc}
1004c41a:	46c0      	nop			@ (mov r8, r8)
1004c41c:	2000149c 	.word	0x2000149c
1004c420:	20001494 	.word	0x20001494

1004c424 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code.
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
1004c424:	b580      	push	{r7, lr}
1004c426:	b088      	sub	sp, #32
1004c428:	af00      	add	r7, sp, #0
1004c42a:	0002      	movs	r2, r0
1004c42c:	1dfb      	adds	r3, r7, #7
1004c42e:	701a      	strb	r2, [r3, #0]
1004c430:	1dbb      	adds	r3, r7, #6
1004c432:	1c0a      	adds	r2, r1, #0
1004c434:	701a      	strb	r2, [r3, #0]
  int32_t               status = BSP_ERROR_NONE;
1004c436:	2300      	movs	r3, #0
1004c438:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef      GPIO_Init;

  /* Enable the BUTTON clock */
  if (Button == B1)
1004c43a:	1dfb      	adds	r3, r7, #7
1004c43c:	781b      	ldrb	r3, [r3, #0]
1004c43e:	2b00      	cmp	r3, #0
1004c440:	d103      	bne.n	1004c44a <BSP_PB_Init+0x26>
  {
    B1_GPIO_CLK_ENABLE();
1004c442:	2004      	movs	r0, #4
1004c444:	f7ff fefa 	bl	1004c23c <LL_AHB1_GRP1_EnableClock>
1004c448:	e016      	b.n	1004c478 <BSP_PB_Init+0x54>
  }
  else if (Button == B2)
1004c44a:	1dfb      	adds	r3, r7, #7
1004c44c:	781b      	ldrb	r3, [r3, #0]
1004c44e:	2b01      	cmp	r3, #1
1004c450:	d103      	bne.n	1004c45a <BSP_PB_Init+0x36>
  {
    B2_GPIO_CLK_ENABLE();
1004c452:	2008      	movs	r0, #8
1004c454:	f7ff fef2 	bl	1004c23c <LL_AHB1_GRP1_EnableClock>
1004c458:	e00e      	b.n	1004c478 <BSP_PB_Init+0x54>
  }
  else if (Button == B3)
1004c45a:	1dfb      	adds	r3, r7, #7
1004c45c:	781b      	ldrb	r3, [r3, #0]
1004c45e:	2b02      	cmp	r3, #2
1004c460:	d103      	bne.n	1004c46a <BSP_PB_Init+0x46>
  {
	B3_GPIO_CLK_ENABLE();
1004c462:	2008      	movs	r0, #8
1004c464:	f7ff feea 	bl	1004c23c <LL_AHB1_GRP1_EnableClock>
1004c468:	e006      	b.n	1004c478 <BSP_PB_Init+0x54>
  }
  else if (Button == B4) /* B3 */
1004c46a:	1dfb      	adds	r3, r7, #7
1004c46c:	781b      	ldrb	r3, [r3, #0]
1004c46e:	2b03      	cmp	r3, #3
1004c470:	d102      	bne.n	1004c478 <BSP_PB_Init+0x54>
  {
    B4_GPIO_CLK_ENABLE();
1004c472:	2004      	movs	r0, #4
1004c474:	f7ff fee2 	bl	1004c23c <LL_AHB1_GRP1_EnableClock>
  }

  GPIO_Init.Pin   = BUTTON_PIN[Button];
1004c478:	1dfb      	adds	r3, r7, #7
1004c47a:	781a      	ldrb	r2, [r3, #0]
1004c47c:	4b37      	ldr	r3, [pc, #220]	@ (1004c55c <BSP_PB_Init+0x138>)
1004c47e:	0052      	lsls	r2, r2, #1
1004c480:	5ad3      	ldrh	r3, [r2, r3]
1004c482:	001a      	movs	r2, r3
1004c484:	2108      	movs	r1, #8
1004c486:	187b      	adds	r3, r7, r1
1004c488:	601a      	str	r2, [r3, #0]
  GPIO_Init.Pull  = GPIO_PULLUP;
1004c48a:	187b      	adds	r3, r7, r1
1004c48c:	2201      	movs	r2, #1
1004c48e:	609a      	str	r2, [r3, #8]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
1004c490:	187b      	adds	r3, r7, r1
1004c492:	2202      	movs	r2, #2
1004c494:	60da      	str	r2, [r3, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
1004c496:	1dbb      	adds	r3, r7, #6
1004c498:	781b      	ldrb	r3, [r3, #0]
1004c49a:	2b00      	cmp	r3, #0
1004c49c:	d10c      	bne.n	1004c4b8 <BSP_PB_Init+0x94>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
1004c49e:	187b      	adds	r3, r7, r1
1004c4a0:	2200      	movs	r2, #0
1004c4a2:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
1004c4a4:	1dfb      	adds	r3, r7, #7
1004c4a6:	781a      	ldrb	r2, [r3, #0]
1004c4a8:	4b2d      	ldr	r3, [pc, #180]	@ (1004c560 <BSP_PB_Init+0x13c>)
1004c4aa:	0092      	lsls	r2, r2, #2
1004c4ac:	58d3      	ldr	r3, [r2, r3]
1004c4ae:	187a      	adds	r2, r7, r1
1004c4b0:	0011      	movs	r1, r2
1004c4b2:	0018      	movs	r0, r3
1004c4b4:	f000 fdd4 	bl	1004d060 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
1004c4b8:	1dbb      	adds	r3, r7, #6
1004c4ba:	781b      	ldrb	r3, [r3, #0]
1004c4bc:	2b01      	cmp	r3, #1
1004c4be:	d123      	bne.n	1004c508 <BSP_PB_Init+0xe4>
  {
    __HAL_RCC_SYSCFG_CLK_ENABLE();
1004c4c0:	2380      	movs	r3, #128	@ 0x80
1004c4c2:	005b      	lsls	r3, r3, #1
1004c4c4:	0018      	movs	r0, r3
1004c4c6:	f7ff fecf 	bl	1004c268 <LL_APB0_GRP1_EnableClock>

    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_FALLING;
1004c4ca:	2108      	movs	r1, #8
1004c4cc:	187b      	adds	r3, r7, r1
1004c4ce:	2280      	movs	r2, #128	@ 0x80
1004c4d0:	0252      	lsls	r2, r2, #9
1004c4d2:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
1004c4d4:	1dfb      	adds	r3, r7, #7
1004c4d6:	781a      	ldrb	r2, [r3, #0]
1004c4d8:	4b21      	ldr	r3, [pc, #132]	@ (1004c560 <BSP_PB_Init+0x13c>)
1004c4da:	0092      	lsls	r2, r2, #2
1004c4dc:	58d3      	ldr	r3, [r2, r3]
1004c4de:	187a      	adds	r2, r7, r1
1004c4e0:	0011      	movs	r1, r2
1004c4e2:	0018      	movs	r0, r3
1004c4e4:	f000 fdbc 	bl	1004d060 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(BUTTON_IRQn[Button], NVIC_LOW_PRIORITY, 0);
1004c4e8:	1dfb      	adds	r3, r7, #7
1004c4ea:	781b      	ldrb	r3, [r3, #0]
1004c4ec:	4a1d      	ldr	r2, [pc, #116]	@ (1004c564 <BSP_PB_Init+0x140>)
1004c4ee:	56d3      	ldrsb	r3, [r2, r3]
1004c4f0:	2200      	movs	r2, #0
1004c4f2:	2103      	movs	r1, #3
1004c4f4:	0018      	movs	r0, r3
1004c4f6:	f000 fc27 	bl	1004cd48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
1004c4fa:	1dfb      	adds	r3, r7, #7
1004c4fc:	781b      	ldrb	r3, [r3, #0]
1004c4fe:	4a19      	ldr	r2, [pc, #100]	@ (1004c564 <BSP_PB_Init+0x140>)
1004c500:	56d3      	ldrsb	r3, [r2, r3]
1004c502:	0018      	movs	r0, r3
1004c504:	f000 fc35 	bl	1004cd72 <HAL_NVIC_EnableIRQ>

  }
  if( LL_PWR_IsEnabledPUPDCfg() != 0)
1004c508:	f7ff fe70 	bl	1004c1ec <LL_PWR_IsEnabledPUPDCfg>
1004c50c:	1e03      	subs	r3, r0, #0
1004c50e:	d020      	beq.n	1004c552 <BSP_PB_Init+0x12e>
  {
    if (BUTTON_PORT[Button] == GPIOA)
1004c510:	1dfb      	adds	r3, r7, #7
1004c512:	781a      	ldrb	r2, [r3, #0]
1004c514:	4b12      	ldr	r3, [pc, #72]	@ (1004c560 <BSP_PB_Init+0x13c>)
1004c516:	0092      	lsls	r2, r2, #2
1004c518:	58d2      	ldr	r2, [r2, r3]
1004c51a:	2390      	movs	r3, #144	@ 0x90
1004c51c:	05db      	lsls	r3, r3, #23
1004c51e:	429a      	cmp	r2, r3
1004c520:	d107      	bne.n	1004c532 <BSP_PB_Init+0x10e>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
1004c522:	2308      	movs	r3, #8
1004c524:	18fb      	adds	r3, r7, r3
1004c526:	681b      	ldr	r3, [r3, #0]
1004c528:	4a0f      	ldr	r2, [pc, #60]	@ (1004c568 <BSP_PB_Init+0x144>)
1004c52a:	0019      	movs	r1, r3
1004c52c:	0010      	movs	r0, r2
1004c52e:	f7ff fe6d 	bl	1004c20c <LL_PWR_EnableGPIOPullUp>
    }
     if (BUTTON_PORT[Button] == GPIOB)
1004c532:	1dfb      	adds	r3, r7, #7
1004c534:	781a      	ldrb	r2, [r3, #0]
1004c536:	4b0a      	ldr	r3, [pc, #40]	@ (1004c560 <BSP_PB_Init+0x13c>)
1004c538:	0092      	lsls	r2, r2, #2
1004c53a:	58d3      	ldr	r3, [r2, r3]
1004c53c:	4a0b      	ldr	r2, [pc, #44]	@ (1004c56c <BSP_PB_Init+0x148>)
1004c53e:	4293      	cmp	r3, r2
1004c540:	d107      	bne.n	1004c552 <BSP_PB_Init+0x12e>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_B, GPIO_Init.Pin);
1004c542:	2308      	movs	r3, #8
1004c544:	18fb      	adds	r3, r7, r3
1004c546:	681b      	ldr	r3, [r3, #0]
1004c548:	4a09      	ldr	r2, [pc, #36]	@ (1004c570 <BSP_PB_Init+0x14c>)
1004c54a:	0019      	movs	r1, r3
1004c54c:	0010      	movs	r0, r2
1004c54e:	f7ff fe5d 	bl	1004c20c <LL_PWR_EnableGPIOPullUp>
    }
  }
  return status;
1004c552:	69fb      	ldr	r3, [r7, #28]
}
1004c554:	0018      	movs	r0, r3
1004c556:	46bd      	mov	sp, r7
1004c558:	b008      	add	sp, #32
1004c55a:	bd80      	pop	{r7, pc}
1004c55c:	200014a8 	.word	0x200014a8
1004c560:	200014b0 	.word	0x200014b0
1004c564:	200014c0 	.word	0x200014c0
1004c568:	48500020 	.word	0x48500020
1004c56c:	48100000 	.word	0x48100000
1004c570:	48500028 	.word	0x48500028

1004c574 <BSP_PB_GetState>:
  *     @arg B2
  *     @arg B3
  * @retval 0 means released, 1 means pressed.
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
1004c574:	b580      	push	{r7, lr}
1004c576:	b084      	sub	sp, #16
1004c578:	af00      	add	r7, sp, #0
1004c57a:	0002      	movs	r2, r0
1004c57c:	1dfb      	adds	r3, r7, #7
1004c57e:	701a      	strb	r2, [r3, #0]
  int32_t status;

  status = (HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET) ? 1 : 0;
1004c580:	1dfb      	adds	r3, r7, #7
1004c582:	781a      	ldrb	r2, [r3, #0]
1004c584:	4b0a      	ldr	r3, [pc, #40]	@ (1004c5b0 <BSP_PB_GetState+0x3c>)
1004c586:	0092      	lsls	r2, r2, #2
1004c588:	58d0      	ldr	r0, [r2, r3]
1004c58a:	1dfb      	adds	r3, r7, #7
1004c58c:	781a      	ldrb	r2, [r3, #0]
1004c58e:	4b09      	ldr	r3, [pc, #36]	@ (1004c5b4 <BSP_PB_GetState+0x40>)
1004c590:	0052      	lsls	r2, r2, #1
1004c592:	5ad3      	ldrh	r3, [r2, r3]
1004c594:	0019      	movs	r1, r3
1004c596:	f000 ff0c 	bl	1004d3b2 <HAL_GPIO_ReadPin>
1004c59a:	0003      	movs	r3, r0
1004c59c:	425a      	negs	r2, r3
1004c59e:	4153      	adcs	r3, r2
1004c5a0:	b2db      	uxtb	r3, r3
1004c5a2:	60fb      	str	r3, [r7, #12]

  return status;
1004c5a4:	68fb      	ldr	r3, [r7, #12]
}
1004c5a6:	0018      	movs	r0, r3
1004c5a8:	46bd      	mov	sp, r7
1004c5aa:	b004      	add	sp, #16
1004c5ac:	bd80      	pop	{r7, pc}
1004c5ae:	46c0      	nop			@ (mov r8, r8)
1004c5b0:	200014b0 	.word	0x200014b0
1004c5b4:	200014a8 	.word	0x200014a8

1004c5b8 <BSP_PB_IRQHandler>:
  * @param  GPIO_Pin Contains the pin state of GPIO when the interrupt occurred
  * @retval None.
  */

void BSP_PB_IRQHandler(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
1004c5b8:	b580      	push	{r7, lr}
1004c5ba:	b082      	sub	sp, #8
1004c5bc:	af00      	add	r7, sp, #0
1004c5be:	6078      	str	r0, [r7, #4]
1004c5c0:	000a      	movs	r2, r1
1004c5c2:	1cbb      	adds	r3, r7, #2
1004c5c4:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_EXTI_IRQHandler( GPIOx, GPIO_Pin);
1004c5c6:	1cbb      	adds	r3, r7, #2
1004c5c8:	881a      	ldrh	r2, [r3, #0]
1004c5ca:	687b      	ldr	r3, [r7, #4]
1004c5cc:	0011      	movs	r1, r2
1004c5ce:	0018      	movs	r0, r3
1004c5d0:	f000 ff29 	bl	1004d426 <HAL_GPIO_EXTI_IRQHandler>
}
1004c5d4:	46c0      	nop			@ (mov r8, r8)
1004c5d6:	46bd      	mov	sp, r7
1004c5d8:	b002      	add	sp, #8
1004c5da:	bd80      	pop	{r7, pc}

1004c5dc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                  configuration information for the specified COM peripheral.
  * @retval BSP error code.
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
1004c5dc:	b580      	push	{r7, lr}
1004c5de:	b084      	sub	sp, #16
1004c5e0:	af00      	add	r7, sp, #0
1004c5e2:	0002      	movs	r2, r0
1004c5e4:	6039      	str	r1, [r7, #0]
1004c5e6:	1dfb      	adds	r3, r7, #7
1004c5e8:	701a      	strb	r2, [r3, #0]
  int32_t status = BSP_ERROR_NONE;
1004c5ea:	2300      	movs	r3, #0
1004c5ec:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
1004c5ee:	683b      	ldr	r3, [r7, #0]
1004c5f0:	2b00      	cmp	r3, #0
1004c5f2:	d103      	bne.n	1004c5fc <BSP_COM_Init+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
1004c5f4:	2302      	movs	r3, #2
1004c5f6:	425b      	negs	r3, r3
1004c5f8:	60fb      	str	r3, [r7, #12]
1004c5fa:	e026      	b.n	1004c64a <BSP_COM_Init+0x6e>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
1004c5fc:	1dfb      	adds	r3, r7, #7
1004c5fe:	7819      	ldrb	r1, [r3, #0]
1004c600:	1dfb      	adds	r3, r7, #7
1004c602:	781a      	ldrb	r2, [r3, #0]
1004c604:	4b13      	ldr	r3, [pc, #76]	@ (1004c654 <BSP_COM_Init+0x78>)
1004c606:	0089      	lsls	r1, r1, #2
1004c608:	58c9      	ldr	r1, [r1, r3]
1004c60a:	4b13      	ldr	r3, [pc, #76]	@ (1004c658 <BSP_COM_Init+0x7c>)
1004c60c:	2094      	movs	r0, #148	@ 0x94
1004c60e:	4342      	muls	r2, r0
1004c610:	50d1      	str	r1, [r2, r3]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
1004c612:	1dfb      	adds	r3, r7, #7
1004c614:	781b      	ldrb	r3, [r3, #0]
1004c616:	2294      	movs	r2, #148	@ 0x94
1004c618:	435a      	muls	r2, r3
1004c61a:	4b0f      	ldr	r3, [pc, #60]	@ (1004c658 <BSP_COM_Init+0x7c>)
1004c61c:	18d3      	adds	r3, r2, r3
1004c61e:	0018      	movs	r0, r3
1004c620:	f000 f868 	bl	1004c6f4 <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
1004c624:	68fb      	ldr	r3, [r7, #12]
1004c626:	2b00      	cmp	r3, #0
1004c628:	d10f      	bne.n	1004c64a <BSP_COM_Init+0x6e>
    {
      if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
1004c62a:	1dfb      	adds	r3, r7, #7
1004c62c:	781b      	ldrb	r3, [r3, #0]
1004c62e:	2294      	movs	r2, #148	@ 0x94
1004c630:	435a      	muls	r2, r3
1004c632:	4b09      	ldr	r3, [pc, #36]	@ (1004c658 <BSP_COM_Init+0x7c>)
1004c634:	18d3      	adds	r3, r2, r3
1004c636:	683a      	ldr	r2, [r7, #0]
1004c638:	0011      	movs	r1, r2
1004c63a:	0018      	movs	r0, r3
1004c63c:	f000 f828 	bl	1004c690 <MX_USART1_Init>
1004c640:	1e03      	subs	r3, r0, #0
1004c642:	d002      	beq.n	1004c64a <BSP_COM_Init+0x6e>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
1004c644:	2304      	movs	r3, #4
1004c646:	425b      	negs	r3, r3
1004c648:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return status;
1004c64a:	68fb      	ldr	r3, [r7, #12]
}
1004c64c:	0018      	movs	r0, r3
1004c64e:	46bd      	mov	sp, r7
1004c650:	b004      	add	sp, #16
1004c652:	bd80      	pop	{r7, pc}
1004c654:	200014c4 	.word	0x200014c4
1004c658:	20000e60 	.word	0x20000e60

1004c65c <__io_putchar>:
  return 1;
}

#elif defined(__GNUC__)
int __io_putchar(int ch)
{
1004c65c:	b580      	push	{r7, lr}
1004c65e:	b082      	sub	sp, #8
1004c660:	af00      	add	r7, sp, #0
1004c662:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
1004c664:	4b08      	ldr	r3, [pc, #32]	@ (1004c688 <__io_putchar+0x2c>)
1004c666:	781b      	ldrb	r3, [r3, #0]
1004c668:	001a      	movs	r2, r3
1004c66a:	2394      	movs	r3, #148	@ 0x94
1004c66c:	435a      	muls	r2, r3
1004c66e:	4b07      	ldr	r3, [pc, #28]	@ (1004c68c <__io_putchar+0x30>)
1004c670:	18d0      	adds	r0, r2, r3
1004c672:	23fa      	movs	r3, #250	@ 0xfa
1004c674:	009b      	lsls	r3, r3, #2
1004c676:	1d39      	adds	r1, r7, #4
1004c678:	2201      	movs	r2, #1
1004c67a:	f004 faa7 	bl	10050bcc <HAL_UART_Transmit>
  return ch;
1004c67e:	687b      	ldr	r3, [r7, #4]
}
1004c680:	0018      	movs	r0, r3
1004c682:	46bd      	mov	sp, r7
1004c684:	b002      	add	sp, #8
1004c686:	bd80      	pop	{r7, pc}
1004c688:	20000ef4 	.word	0x20000ef4
1004c68c:	20000e60 	.word	0x20000e60

1004c690 <MX_USART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
1004c690:	b580      	push	{r7, lr}
1004c692:	b082      	sub	sp, #8
1004c694:	af00      	add	r7, sp, #0
1004c696:	6078      	str	r0, [r7, #4]
1004c698:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
1004c69a:	683b      	ldr	r3, [r7, #0]
1004c69c:	681a      	ldr	r2, [r3, #0]
1004c69e:	687b      	ldr	r3, [r7, #4]
1004c6a0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
1004c6a2:	683b      	ldr	r3, [r7, #0]
1004c6a4:	685a      	ldr	r2, [r3, #4]
1004c6a6:	687b      	ldr	r3, [r7, #4]
1004c6a8:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
1004c6aa:	683b      	ldr	r3, [r7, #0]
1004c6ac:	891b      	ldrh	r3, [r3, #8]
1004c6ae:	001a      	movs	r2, r3
1004c6b0:	687b      	ldr	r3, [r7, #4]
1004c6b2:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
1004c6b4:	683b      	ldr	r3, [r7, #0]
1004c6b6:	895b      	ldrh	r3, [r3, #10]
1004c6b8:	001a      	movs	r2, r3
1004c6ba:	687b      	ldr	r3, [r7, #4]
1004c6bc:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
1004c6be:	687b      	ldr	r3, [r7, #4]
1004c6c0:	220c      	movs	r2, #12
1004c6c2:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
1004c6c4:	683b      	ldr	r3, [r7, #0]
1004c6c6:	899b      	ldrh	r3, [r3, #12]
1004c6c8:	001a      	movs	r2, r3
1004c6ca:	687b      	ldr	r3, [r7, #4]
1004c6cc:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
1004c6ce:	687b      	ldr	r3, [r7, #4]
1004c6d0:	2280      	movs	r2, #128	@ 0x80
1004c6d2:	0212      	lsls	r2, r2, #8
1004c6d4:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
1004c6d6:	687b      	ldr	r3, [r7, #4]
1004c6d8:	2200      	movs	r2, #0
1004c6da:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
1004c6dc:	687b      	ldr	r3, [r7, #4]
1004c6de:	2200      	movs	r2, #0
1004c6e0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
1004c6e2:	687b      	ldr	r3, [r7, #4]
1004c6e4:	0018      	movs	r0, r3
1004c6e6:	f004 fa1b 	bl	10050b20 <HAL_UART_Init>
1004c6ea:	0003      	movs	r3, r0
}
1004c6ec:	0018      	movs	r0, r3
1004c6ee:	46bd      	mov	sp, r7
1004c6f0:	b002      	add	sp, #8
1004c6f2:	bd80      	pop	{r7, pc}

1004c6f4 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
1004c6f4:	b590      	push	{r4, r7, lr}
1004c6f6:	b089      	sub	sp, #36	@ 0x24
1004c6f8:	af00      	add	r7, sp, #0
1004c6fa:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable COM and GPIO clocks */
  COM1_TX_GPIO_CLK_ENABLE();
1004c6fc:	2004      	movs	r0, #4
1004c6fe:	f7ff fd9d 	bl	1004c23c <LL_AHB1_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
1004c702:	2008      	movs	r0, #8
1004c704:	f7ff fd9a 	bl	1004c23c <LL_AHB1_GRP1_EnableClock>
  COM1_CLK_ENABLE();
1004c708:	2380      	movs	r3, #128	@ 0x80
1004c70a:	00db      	lsls	r3, r3, #3
1004c70c:	0018      	movs	r0, r3
1004c70e:	f7ff fdc1 	bl	1004c294 <LL_APB1_GRP1_EnableClock>

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM1_TX_PIN;
1004c712:	240c      	movs	r4, #12
1004c714:	193b      	adds	r3, r7, r4
1004c716:	2202      	movs	r2, #2
1004c718:	601a      	str	r2, [r3, #0]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
1004c71a:	193b      	adds	r3, r7, r4
1004c71c:	2202      	movs	r2, #2
1004c71e:	605a      	str	r2, [r3, #4]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
1004c720:	193b      	adds	r3, r7, r4
1004c722:	2202      	movs	r2, #2
1004c724:	60da      	str	r2, [r3, #12]
  GPIO_Init.Pull      = GPIO_PULLUP;
1004c726:	193b      	adds	r3, r7, r4
1004c728:	2201      	movs	r2, #1
1004c72a:	609a      	str	r2, [r3, #8]
  GPIO_Init.Alternate = COM1_TX_AF;
1004c72c:	193b      	adds	r3, r7, r4
1004c72e:	2202      	movs	r2, #2
1004c730:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &GPIO_Init);
1004c732:	193a      	adds	r2, r7, r4
1004c734:	2390      	movs	r3, #144	@ 0x90
1004c736:	05db      	lsls	r3, r3, #23
1004c738:	0011      	movs	r1, r2
1004c73a:	0018      	movs	r0, r3
1004c73c:	f000 fc90 	bl	1004d060 <HAL_GPIO_Init>
  if( LL_PWR_IsEnabledPUPDCfg() != 0)
1004c740:	f7ff fd54 	bl	1004c1ec <LL_PWR_IsEnabledPUPDCfg>
1004c744:	1e03      	subs	r3, r0, #0
1004c746:	d006      	beq.n	1004c756 <UART_MspInit+0x62>
  {
    LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
1004c748:	193b      	adds	r3, r7, r4
1004c74a:	681b      	ldr	r3, [r3, #0]
1004c74c:	4a0a      	ldr	r2, [pc, #40]	@ (1004c778 <UART_MspInit+0x84>)
1004c74e:	0019      	movs	r1, r3
1004c750:	0010      	movs	r0, r2
1004c752:	f7ff fd5b 	bl	1004c20c <LL_PWR_EnableGPIOPullUp>
  }
  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM1_RX_PIN;
1004c756:	210c      	movs	r1, #12
1004c758:	187b      	adds	r3, r7, r1
1004c75a:	2201      	movs	r2, #1
1004c75c:	601a      	str	r2, [r3, #0]
  GPIO_Init.Alternate = COM1_RX_AF;
1004c75e:	187b      	adds	r3, r7, r1
1004c760:	2200      	movs	r2, #0
1004c762:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &GPIO_Init);
1004c764:	187b      	adds	r3, r7, r1
1004c766:	4a05      	ldr	r2, [pc, #20]	@ (1004c77c <UART_MspInit+0x88>)
1004c768:	0019      	movs	r1, r3
1004c76a:	0010      	movs	r0, r2
1004c76c:	f000 fc78 	bl	1004d060 <HAL_GPIO_Init>
}
1004c770:	46c0      	nop			@ (mov r8, r8)
1004c772:	46bd      	mov	sp, r7
1004c774:	b009      	add	sp, #36	@ 0x24
1004c776:	bd90      	pop	{r4, r7, pc}
1004c778:	48500020 	.word	0x48500020
1004c77c:	48100000 	.word	0x48100000

1004c780 <__NVIC_SetPriority>:
{
1004c780:	b590      	push	{r4, r7, lr}
1004c782:	b083      	sub	sp, #12
1004c784:	af00      	add	r7, sp, #0
1004c786:	0002      	movs	r2, r0
1004c788:	6039      	str	r1, [r7, #0]
1004c78a:	1dfb      	adds	r3, r7, #7
1004c78c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004c78e:	1dfb      	adds	r3, r7, #7
1004c790:	781b      	ldrb	r3, [r3, #0]
1004c792:	2b7f      	cmp	r3, #127	@ 0x7f
1004c794:	d828      	bhi.n	1004c7e8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004c796:	4a2f      	ldr	r2, [pc, #188]	@ (1004c854 <__NVIC_SetPriority+0xd4>)
1004c798:	1dfb      	adds	r3, r7, #7
1004c79a:	781b      	ldrb	r3, [r3, #0]
1004c79c:	b25b      	sxtb	r3, r3
1004c79e:	089b      	lsrs	r3, r3, #2
1004c7a0:	33c0      	adds	r3, #192	@ 0xc0
1004c7a2:	009b      	lsls	r3, r3, #2
1004c7a4:	589b      	ldr	r3, [r3, r2]
1004c7a6:	1dfa      	adds	r2, r7, #7
1004c7a8:	7812      	ldrb	r2, [r2, #0]
1004c7aa:	0011      	movs	r1, r2
1004c7ac:	2203      	movs	r2, #3
1004c7ae:	400a      	ands	r2, r1
1004c7b0:	00d2      	lsls	r2, r2, #3
1004c7b2:	21ff      	movs	r1, #255	@ 0xff
1004c7b4:	4091      	lsls	r1, r2
1004c7b6:	000a      	movs	r2, r1
1004c7b8:	43d2      	mvns	r2, r2
1004c7ba:	401a      	ands	r2, r3
1004c7bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004c7be:	683b      	ldr	r3, [r7, #0]
1004c7c0:	019b      	lsls	r3, r3, #6
1004c7c2:	22ff      	movs	r2, #255	@ 0xff
1004c7c4:	401a      	ands	r2, r3
1004c7c6:	1dfb      	adds	r3, r7, #7
1004c7c8:	781b      	ldrb	r3, [r3, #0]
1004c7ca:	0018      	movs	r0, r3
1004c7cc:	2303      	movs	r3, #3
1004c7ce:	4003      	ands	r3, r0
1004c7d0:	00db      	lsls	r3, r3, #3
1004c7d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004c7d4:	481f      	ldr	r0, [pc, #124]	@ (1004c854 <__NVIC_SetPriority+0xd4>)
1004c7d6:	1dfb      	adds	r3, r7, #7
1004c7d8:	781b      	ldrb	r3, [r3, #0]
1004c7da:	b25b      	sxtb	r3, r3
1004c7dc:	089b      	lsrs	r3, r3, #2
1004c7de:	430a      	orrs	r2, r1
1004c7e0:	33c0      	adds	r3, #192	@ 0xc0
1004c7e2:	009b      	lsls	r3, r3, #2
1004c7e4:	501a      	str	r2, [r3, r0]
}
1004c7e6:	e031      	b.n	1004c84c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004c7e8:	4a1b      	ldr	r2, [pc, #108]	@ (1004c858 <__NVIC_SetPriority+0xd8>)
1004c7ea:	1dfb      	adds	r3, r7, #7
1004c7ec:	781b      	ldrb	r3, [r3, #0]
1004c7ee:	0019      	movs	r1, r3
1004c7f0:	230f      	movs	r3, #15
1004c7f2:	400b      	ands	r3, r1
1004c7f4:	3b08      	subs	r3, #8
1004c7f6:	089b      	lsrs	r3, r3, #2
1004c7f8:	3306      	adds	r3, #6
1004c7fa:	009b      	lsls	r3, r3, #2
1004c7fc:	18d3      	adds	r3, r2, r3
1004c7fe:	3304      	adds	r3, #4
1004c800:	681b      	ldr	r3, [r3, #0]
1004c802:	1dfa      	adds	r2, r7, #7
1004c804:	7812      	ldrb	r2, [r2, #0]
1004c806:	0011      	movs	r1, r2
1004c808:	2203      	movs	r2, #3
1004c80a:	400a      	ands	r2, r1
1004c80c:	00d2      	lsls	r2, r2, #3
1004c80e:	21ff      	movs	r1, #255	@ 0xff
1004c810:	4091      	lsls	r1, r2
1004c812:	000a      	movs	r2, r1
1004c814:	43d2      	mvns	r2, r2
1004c816:	401a      	ands	r2, r3
1004c818:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004c81a:	683b      	ldr	r3, [r7, #0]
1004c81c:	019b      	lsls	r3, r3, #6
1004c81e:	22ff      	movs	r2, #255	@ 0xff
1004c820:	401a      	ands	r2, r3
1004c822:	1dfb      	adds	r3, r7, #7
1004c824:	781b      	ldrb	r3, [r3, #0]
1004c826:	0018      	movs	r0, r3
1004c828:	2303      	movs	r3, #3
1004c82a:	4003      	ands	r3, r0
1004c82c:	00db      	lsls	r3, r3, #3
1004c82e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004c830:	4809      	ldr	r0, [pc, #36]	@ (1004c858 <__NVIC_SetPriority+0xd8>)
1004c832:	1dfb      	adds	r3, r7, #7
1004c834:	781b      	ldrb	r3, [r3, #0]
1004c836:	001c      	movs	r4, r3
1004c838:	230f      	movs	r3, #15
1004c83a:	4023      	ands	r3, r4
1004c83c:	3b08      	subs	r3, #8
1004c83e:	089b      	lsrs	r3, r3, #2
1004c840:	430a      	orrs	r2, r1
1004c842:	3306      	adds	r3, #6
1004c844:	009b      	lsls	r3, r3, #2
1004c846:	18c3      	adds	r3, r0, r3
1004c848:	3304      	adds	r3, #4
1004c84a:	601a      	str	r2, [r3, #0]
}
1004c84c:	46c0      	nop			@ (mov r8, r8)
1004c84e:	46bd      	mov	sp, r7
1004c850:	b003      	add	sp, #12
1004c852:	bd90      	pop	{r4, r7, pc}
1004c854:	e000e100 	.word	0xe000e100
1004c858:	e000ed00 	.word	0xe000ed00

1004c85c <__NVIC_SystemReset>:
{
1004c85c:	b580      	push	{r7, lr}
1004c85e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
1004c860:	f3bf 8f4f 	dsb	sy
}
1004c864:	46c0      	nop			@ (mov r8, r8)
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1004c866:	4b04      	ldr	r3, [pc, #16]	@ (1004c878 <__NVIC_SystemReset+0x1c>)
1004c868:	4a04      	ldr	r2, [pc, #16]	@ (1004c87c <__NVIC_SystemReset+0x20>)
1004c86a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
1004c86c:	f3bf 8f4f 	dsb	sy
}
1004c870:	46c0      	nop			@ (mov r8, r8)
    __NOP();
1004c872:	46c0      	nop			@ (mov r8, r8)
1004c874:	e7fd      	b.n	1004c872 <__NVIC_SystemReset+0x16>
1004c876:	46c0      	nop			@ (mov r8, r8)
1004c878:	e000ed00 	.word	0xe000ed00
1004c87c:	05fa0004 	.word	0x05fa0004

1004c880 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
1004c880:	b590      	push	{r4, r7, lr}
1004c882:	b087      	sub	sp, #28
1004c884:	af00      	add	r7, sp, #0
  uint32_t lsiBw;
#endif
  uint8_t i;
  
  /* If the reset reason is a wakeup from power save restore the context */
  if ((RCC->CSR == 0) && ((PWR->SR1 != 0)||(PWR->SR3 != 0))) {
1004c886:	4a64      	ldr	r2, [pc, #400]	@ (1004ca18 <SystemInit+0x198>)
1004c888:	2394      	movs	r3, #148	@ 0x94
1004c88a:	58d3      	ldr	r3, [r2, r3]
1004c88c:	2b00      	cmp	r3, #0
1004c88e:	d10e      	bne.n	1004c8ae <SystemInit+0x2e>
1004c890:	4b62      	ldr	r3, [pc, #392]	@ (1004ca1c <SystemInit+0x19c>)
1004c892:	691b      	ldr	r3, [r3, #16]
1004c894:	2b00      	cmp	r3, #0
1004c896:	d103      	bne.n	1004c8a0 <SystemInit+0x20>
1004c898:	4b60      	ldr	r3, [pc, #384]	@ (1004ca1c <SystemInit+0x19c>)
1004c89a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004c89c:	2b00      	cmp	r3, #0
1004c89e:	d006      	beq.n	1004c8ae <SystemInit+0x2e>
    RAM_VR.WakeupFromSleepFlag = 1; /* A wakeup from power save occurred */
1004c8a0:	4b5f      	ldr	r3, [pc, #380]	@ (1004ca20 <SystemInit+0x1a0>)
1004c8a2:	2201      	movs	r2, #1
1004c8a4:	609a      	str	r2, [r3, #8]
    CPUcontextRestore();            /* Restore the context */
1004c8a6:	f7f4 fca1 	bl	100411ec <CPUcontextRestore>
    /* if the context restore worked properly, we should never return here */
    while(1) { 
      NVIC_SystemReset(); 
1004c8aa:	f7ff ffd7 	bl	1004c85c <__NVIC_SystemReset>

  /* Configure the Vector Table location */
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#else
  SCB->VTOR = (uint32_t) (__vector_table);
1004c8ae:	4b5d      	ldr	r3, [pc, #372]	@ (1004ca24 <SystemInit+0x1a4>)
1004c8b0:	4a5d      	ldr	r2, [pc, #372]	@ (1004ca28 <SystemInit+0x1a8>)
1004c8b2:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* Store in RAM the AppBase information */
  RAM_VR.AppBase = (uint32_t) SCB->VTOR;
1004c8b4:	4b5b      	ldr	r3, [pc, #364]	@ (1004ca24 <SystemInit+0x1a4>)
1004c8b6:	689a      	ldr	r2, [r3, #8]
1004c8b8:	4b59      	ldr	r3, [pc, #356]	@ (1004ca20 <SystemInit+0x1a0>)
1004c8ba:	611a      	str	r2, [r3, #16]

  /* Enable all the RAM banks in retention during power save */
#if defined(PWR_CR2_RAMRET1)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET1);
1004c8bc:	4b57      	ldr	r3, [pc, #348]	@ (1004ca1c <SystemInit+0x19c>)
1004c8be:	685a      	ldr	r2, [r3, #4]
1004c8c0:	4b56      	ldr	r3, [pc, #344]	@ (1004ca1c <SystemInit+0x19c>)
1004c8c2:	2120      	movs	r1, #32
1004c8c4:	430a      	orrs	r2, r1
1004c8c6:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET1 */
  
#if defined(PWR_CR2_RAMRET2)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET2);
1004c8c8:	4b54      	ldr	r3, [pc, #336]	@ (1004ca1c <SystemInit+0x19c>)
1004c8ca:	685a      	ldr	r2, [r3, #4]
1004c8cc:	4b53      	ldr	r3, [pc, #332]	@ (1004ca1c <SystemInit+0x19c>)
1004c8ce:	2140      	movs	r1, #64	@ 0x40
1004c8d0:	430a      	orrs	r2, r1
1004c8d2:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET2 */
  
#if defined(PWR_CR2_RAMRET3)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET3);
1004c8d4:	4b51      	ldr	r3, [pc, #324]	@ (1004ca1c <SystemInit+0x19c>)
1004c8d6:	685a      	ldr	r2, [r3, #4]
1004c8d8:	4b50      	ldr	r3, [pc, #320]	@ (1004ca1c <SystemInit+0x19c>)
1004c8da:	2180      	movs	r1, #128	@ 0x80
1004c8dc:	430a      	orrs	r2, r1
1004c8de:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET3 */

  /* Disable the GPIO retention in power save configuration */
#if defined(PWR_CR2_GPIORET)
  CLEAR_BIT(PWR->CR2, PWR_CR2_GPIORET);
1004c8e0:	4b4e      	ldr	r3, [pc, #312]	@ (1004ca1c <SystemInit+0x19c>)
1004c8e2:	685a      	ldr	r2, [r3, #4]
1004c8e4:	4b4d      	ldr	r3, [pc, #308]	@ (1004ca1c <SystemInit+0x19c>)
1004c8e6:	4951      	ldr	r1, [pc, #324]	@ (1004ca2c <SystemInit+0x1ac>)
1004c8e8:	400a      	ands	r2, r1
1004c8ea:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_GPIORET */
   
  /* SMPS setup */
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_BYPAPSS))
  {
    while(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) != PWR_SR2_SMPSRDY); // Wait until SMPS is ready
1004c8ec:	46c0      	nop			@ (mov r8, r8)
1004c8ee:	4b4b      	ldr	r3, [pc, #300]	@ (1004ca1c <SystemInit+0x19c>)
1004c8f0:	695b      	ldr	r3, [r3, #20]
1004c8f2:	2204      	movs	r2, #4
1004c8f4:	4013      	ands	r3, r2
1004c8f6:	2b04      	cmp	r3, #4
1004c8f8:	d1f9      	bne.n	1004c8ee <SystemInit+0x6e>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSBOMSEL, (CFG_HW_SMPS_BOM<<PWR_CR5_SMPSBOMSEL_Pos)); // Configure the SMPS BOM
1004c8fa:	4b48      	ldr	r3, [pc, #288]	@ (1004ca1c <SystemInit+0x19c>)
1004c8fc:	69db      	ldr	r3, [r3, #28]
1004c8fe:	2230      	movs	r2, #48	@ 0x30
1004c900:	4393      	bics	r3, r2
1004c902:	001a      	movs	r2, r3
1004c904:	4b45      	ldr	r3, [pc, #276]	@ (1004ca1c <SystemInit+0x19c>)
1004c906:	2120      	movs	r1, #32
1004c908:	430a      	orrs	r2, r1
1004c90a:	61da      	str	r2, [r3, #28]
  }
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_OFF))
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_NOSMPS, (CFG_HW_SMPS<<PWR_CR5_NOSMPS_Pos)); // SMPS ON/OFF Configuration
1004c90c:	4b43      	ldr	r3, [pc, #268]	@ (1004ca1c <SystemInit+0x19c>)
1004c90e:	69da      	ldr	r2, [r3, #28]
1004c910:	4b42      	ldr	r3, [pc, #264]	@ (1004ca1c <SystemInit+0x19c>)
1004c912:	4947      	ldr	r1, [pc, #284]	@ (1004ca30 <SystemInit+0x1b0>)
1004c914:	400a      	ands	r2, r1
1004c916:	61da      	str	r2, [r3, #28]
  }
  else
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, (1<<PWR_CR5_SMPSFBYP_Pos)); // SMPS BYPASS Configuration
  }
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLPOPEN, (CFG_HW_SMPS_LOW_POWER<<PWR_CR5_SMPSLPOPEN_Pos)); // SMPS configuration during power save
1004c918:	4b40      	ldr	r3, [pc, #256]	@ (1004ca1c <SystemInit+0x19c>)
1004c91a:	69da      	ldr	r2, [r3, #28]
1004c91c:	4b3f      	ldr	r3, [pc, #252]	@ (1004ca1c <SystemInit+0x19c>)
1004c91e:	2180      	movs	r1, #128	@ 0x80
1004c920:	0049      	lsls	r1, r1, #1
1004c922:	430a      	orrs	r2, r1
1004c924:	61da      	str	r2, [r3, #28]
  
  /* If Trimming values from engineering in flash locations are not present load default values */
  if (*(volatile uint32_t*)VALIDITY_LOCATION != VALIDITY_TAG)
1004c926:	4b43      	ldr	r3, [pc, #268]	@ (1004ca34 <SystemInit+0x1b4>)
1004c928:	681b      	ldr	r3, [r3, #0]
1004c92a:	4a43      	ldr	r2, [pc, #268]	@ (1004ca38 <SystemInit+0x1b8>)
1004c92c:	4293      	cmp	r3, r2
1004c92e:	d055      	beq.n	1004c9dc <SystemInit+0x15c>

    /* Set Low Speed Internal oscillator LPMU trimming value. */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_LSI_LPMU, ((lsiLpmu << PWR_ENGTRIM_TRIM_LSI_LPMU_Pos) & PWR_ENGTRIM_TRIM_LSI_LPMU));
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMLSILPMUEN);
#else
    hsiCalib       = 0x1F;
1004c930:	231f      	movs	r3, #31
1004c932:	613b      	str	r3, [r7, #16]
    lsiBw          = 8;
1004c934:	2308      	movs	r3, #8
1004c936:	60fb      	str	r3, [r7, #12]
    mainRegulator  = 0x0A;
1004c938:	230a      	movs	r3, #10
1004c93a:	60bb      	str	r3, [r7, #8]
    smpsOutVoltage = 0x03;
1004c93c:	2303      	movs	r3, #3
1004c93e:	607b      	str	r3, [r7, #4]

    /* Low speed internal RC trimming value set by software */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSISWBW, lsiBw << RCC_CSSWCR_LSISWBW_Pos);
1004c940:	4b35      	ldr	r3, [pc, #212]	@ (1004ca18 <SystemInit+0x198>)
1004c942:	68db      	ldr	r3, [r3, #12]
1004c944:	221e      	movs	r2, #30
1004c946:	4393      	bics	r3, r2
1004c948:	0019      	movs	r1, r3
1004c94a:	68fb      	ldr	r3, [r7, #12]
1004c94c:	005a      	lsls	r2, r3, #1
1004c94e:	4b32      	ldr	r3, [pc, #200]	@ (1004ca18 <SystemInit+0x198>)
1004c950:	430a      	orrs	r2, r1
1004c952:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_LSISWTRIMEN);
1004c954:	4b30      	ldr	r3, [pc, #192]	@ (1004ca18 <SystemInit+0x198>)
1004c956:	68da      	ldr	r2, [r3, #12]
1004c958:	4b2f      	ldr	r3, [pc, #188]	@ (1004ca18 <SystemInit+0x198>)
1004c95a:	2101      	movs	r1, #1
1004c95c:	430a      	orrs	r2, r1
1004c95e:	60da      	str	r2, [r3, #12]
#endif
    
    /* Set HSI Calibration Trimming value */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_HSITRIMSW, hsiCalib << RCC_CSSWCR_HSITRIMSW_Pos);
1004c960:	4b2d      	ldr	r3, [pc, #180]	@ (1004ca18 <SystemInit+0x198>)
1004c962:	68db      	ldr	r3, [r3, #12]
1004c964:	4a35      	ldr	r2, [pc, #212]	@ (1004ca3c <SystemInit+0x1bc>)
1004c966:	4013      	ands	r3, r2
1004c968:	0019      	movs	r1, r3
1004c96a:	693b      	ldr	r3, [r7, #16]
1004c96c:	061a      	lsls	r2, r3, #24
1004c96e:	4b2a      	ldr	r3, [pc, #168]	@ (1004ca18 <SystemInit+0x198>)
1004c970:	430a      	orrs	r2, r1
1004c972:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_HSISWTRIMEN);
1004c974:	4b28      	ldr	r3, [pc, #160]	@ (1004ca18 <SystemInit+0x198>)
1004c976:	68da      	ldr	r2, [r3, #12]
1004c978:	4b27      	ldr	r3, [pc, #156]	@ (1004ca18 <SystemInit+0x198>)
1004c97a:	2180      	movs	r1, #128	@ 0x80
1004c97c:	0409      	lsls	r1, r1, #16
1004c97e:	430a      	orrs	r2, r1
1004c980:	60da      	str	r2, [r3, #12]
              
    /* Set Main Regulator voltage Trimming value */ 
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_MR, ((mainRegulator << PWR_ENGTRIM_TRIM_MR_Pos) & PWR_ENGTRIM_TRIM_MR));
1004c982:	4a26      	ldr	r2, [pc, #152]	@ (1004ca1c <SystemInit+0x19c>)
1004c984:	2394      	movs	r3, #148	@ 0x94
1004c986:	58d3      	ldr	r3, [r2, r3]
1004c988:	4a2d      	ldr	r2, [pc, #180]	@ (1004ca40 <SystemInit+0x1c0>)
1004c98a:	401a      	ands	r2, r3
1004c98c:	68bb      	ldr	r3, [r7, #8]
1004c98e:	0199      	lsls	r1, r3, #6
1004c990:	23f0      	movs	r3, #240	@ 0xf0
1004c992:	009b      	lsls	r3, r3, #2
1004c994:	400b      	ands	r3, r1
1004c996:	4921      	ldr	r1, [pc, #132]	@ (1004ca1c <SystemInit+0x19c>)
1004c998:	4313      	orrs	r3, r2
1004c99a:	2294      	movs	r2, #148	@ 0x94
1004c99c:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMMREN);
1004c99e:	4a1f      	ldr	r2, [pc, #124]	@ (1004ca1c <SystemInit+0x19c>)
1004c9a0:	2394      	movs	r3, #148	@ 0x94
1004c9a2:	58d3      	ldr	r3, [r2, r3]
1004c9a4:	491d      	ldr	r1, [pc, #116]	@ (1004ca1c <SystemInit+0x19c>)
1004c9a6:	2220      	movs	r2, #32
1004c9a8:	4313      	orrs	r3, r2
1004c9aa:	2294      	movs	r2, #148	@ 0x94
1004c9ac:	508b      	str	r3, [r1, r2]

    /* Set SMPS output voltage Trimming value */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_SMPS_TRIM, ((smpsOutVoltage << PWR_ENGTRIM_SMPS_TRIM_Pos) & PWR_ENGTRIM_SMPS_TRIM));
1004c9ae:	4a1b      	ldr	r2, [pc, #108]	@ (1004ca1c <SystemInit+0x19c>)
1004c9b0:	2394      	movs	r3, #148	@ 0x94
1004c9b2:	58d3      	ldr	r3, [r2, r3]
1004c9b4:	4a23      	ldr	r2, [pc, #140]	@ (1004ca44 <SystemInit+0x1c4>)
1004c9b6:	401a      	ands	r2, r3
1004c9b8:	687b      	ldr	r3, [r7, #4]
1004c9ba:	02d9      	lsls	r1, r3, #11
1004c9bc:	23e0      	movs	r3, #224	@ 0xe0
1004c9be:	019b      	lsls	r3, r3, #6
1004c9c0:	400b      	ands	r3, r1
1004c9c2:	4916      	ldr	r1, [pc, #88]	@ (1004ca1c <SystemInit+0x19c>)
1004c9c4:	4313      	orrs	r3, r2
1004c9c6:	2294      	movs	r2, #148	@ 0x94
1004c9c8:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_SMPSTRIMEN);    
1004c9ca:	4a14      	ldr	r2, [pc, #80]	@ (1004ca1c <SystemInit+0x19c>)
1004c9cc:	2394      	movs	r3, #148	@ 0x94
1004c9ce:	58d3      	ldr	r3, [r2, r3]
1004c9d0:	4912      	ldr	r1, [pc, #72]	@ (1004ca1c <SystemInit+0x19c>)
1004c9d2:	2280      	movs	r2, #128	@ 0x80
1004c9d4:	00d2      	lsls	r2, r2, #3
1004c9d6:	4313      	orrs	r3, r2
1004c9d8:	2294      	movs	r2, #148	@ 0x94
1004c9da:	508b      	str	r3, [r1, r2]
  }

  /* Set all the interrupt with low priprity */
  for (i=0; i<32; i++)
1004c9dc:	2317      	movs	r3, #23
1004c9de:	18fb      	adds	r3, r7, r3
1004c9e0:	2200      	movs	r2, #0
1004c9e2:	701a      	strb	r2, [r3, #0]
1004c9e4:	e00d      	b.n	1004ca02 <SystemInit+0x182>
  {
    NVIC_SetPriority((IRQn_Type)i, IRQ_LOW_PRIORITY);
1004c9e6:	2417      	movs	r4, #23
1004c9e8:	193b      	adds	r3, r7, r4
1004c9ea:	781b      	ldrb	r3, [r3, #0]
1004c9ec:	b25b      	sxtb	r3, r3
1004c9ee:	2103      	movs	r1, #3
1004c9f0:	0018      	movs	r0, r3
1004c9f2:	f7ff fec5 	bl	1004c780 <__NVIC_SetPriority>
  for (i=0; i<32; i++)
1004c9f6:	0021      	movs	r1, r4
1004c9f8:	187b      	adds	r3, r7, r1
1004c9fa:	781a      	ldrb	r2, [r3, #0]
1004c9fc:	187b      	adds	r3, r7, r1
1004c9fe:	3201      	adds	r2, #1
1004ca00:	701a      	strb	r2, [r3, #0]
1004ca02:	2317      	movs	r3, #23
1004ca04:	18fb      	adds	r3, r7, r3
1004ca06:	781b      	ldrb	r3, [r3, #0]
1004ca08:	2b1f      	cmp	r3, #31
1004ca0a:	d9ec      	bls.n	1004c9e6 <SystemInit+0x166>
  __ASM volatile ("cpsie i" : : : "memory");
1004ca0c:	b662      	cpsie	i
}
1004ca0e:	46c0      	nop			@ (mov r8, r8)
  }
  
  /* Enable all the irqs */
  __enable_irq();
}
1004ca10:	46c0      	nop			@ (mov r8, r8)
1004ca12:	46bd      	mov	sp, r7
1004ca14:	b007      	add	sp, #28
1004ca16:	bd90      	pop	{r4, r7, pc}
1004ca18:	48400000 	.word	0x48400000
1004ca1c:	48500000 	.word	0x48500000
1004ca20:	20000004 	.word	0x20000004
1004ca24:	e000ed00 	.word	0xe000ed00
1004ca28:	10041000 	.word	0x10041000
1004ca2c:	fffffeff 	.word	0xfffffeff
1004ca30:	fffffbff 	.word	0xfffffbff
1004ca34:	10001ef8 	.word	0x10001ef8
1004ca38:	fcbceccc 	.word	0xfcbceccc
1004ca3c:	c0ffffff 	.word	0xc0ffffff
1004ca40:	fffffc3f 	.word	0xfffffc3f
1004ca44:	ffffc7ff 	.word	0xffffc7ff

1004ca48 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
1004ca48:	b580      	push	{r7, lr}
1004ca4a:	b082      	sub	sp, #8
1004ca4c:	af00      	add	r7, sp, #0
  uint8_t directHSE_enabled;
  uint8_t divPrescaler;

  /* Get SYSCLK source HSE or HSI+PLL64MHz */
  directHSE_enabled = (RCC->CFGR & RCC_CFGR_HSESEL) >> RCC_CFGR_HSESEL_Pos;
1004ca4e:	4b13      	ldr	r3, [pc, #76]	@ (1004ca9c <SystemCoreClockUpdate+0x54>)
1004ca50:	689b      	ldr	r3, [r3, #8]
1004ca52:	085b      	lsrs	r3, r3, #1
1004ca54:	b2da      	uxtb	r2, r3
1004ca56:	1dfb      	adds	r3, r7, #7
1004ca58:	2101      	movs	r1, #1
1004ca5a:	400a      	ands	r2, r1
1004ca5c:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB06) || defined(STM32WB07)
  /* Get the clock divider */
    divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV) >> RCC_CFGR_CLKSYSDIV_Pos;
#else
  /* Get the clock divider */
  divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos;
1004ca5e:	4b0f      	ldr	r3, [pc, #60]	@ (1004ca9c <SystemCoreClockUpdate+0x54>)
1004ca60:	689b      	ldr	r3, [r3, #8]
1004ca62:	0a1b      	lsrs	r3, r3, #8
1004ca64:	b2da      	uxtb	r2, r3
1004ca66:	1dbb      	adds	r3, r7, #6
1004ca68:	2107      	movs	r1, #7
1004ca6a:	400a      	ands	r2, r1
1004ca6c:	701a      	strb	r2, [r3, #0]
#endif

  if (directHSE_enabled)
1004ca6e:	1dfb      	adds	r3, r7, #7
1004ca70:	781b      	ldrb	r3, [r3, #0]
1004ca72:	2b00      	cmp	r3, #0
1004ca74:	d007      	beq.n	1004ca86 <SystemCoreClockUpdate+0x3e>
  {
    SystemCoreClock = HSE_VALUE >> (divPrescaler - 1U);
1004ca76:	1dbb      	adds	r3, r7, #6
1004ca78:	781b      	ldrb	r3, [r3, #0]
1004ca7a:	3b01      	subs	r3, #1
1004ca7c:	4a08      	ldr	r2, [pc, #32]	@ (1004caa0 <SystemCoreClockUpdate+0x58>)
1004ca7e:	40da      	lsrs	r2, r3
1004ca80:	4b08      	ldr	r3, [pc, #32]	@ (1004caa4 <SystemCoreClockUpdate+0x5c>)
1004ca82:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SystemCoreClock = HSI_VALUE >> divPrescaler;
  }  
}
1004ca84:	e005      	b.n	1004ca92 <SystemCoreClockUpdate+0x4a>
    SystemCoreClock = HSI_VALUE >> divPrescaler;
1004ca86:	1dbb      	adds	r3, r7, #6
1004ca88:	781b      	ldrb	r3, [r3, #0]
1004ca8a:	4a07      	ldr	r2, [pc, #28]	@ (1004caa8 <SystemCoreClockUpdate+0x60>)
1004ca8c:	40da      	lsrs	r2, r3
1004ca8e:	4b05      	ldr	r3, [pc, #20]	@ (1004caa4 <SystemCoreClockUpdate+0x5c>)
1004ca90:	601a      	str	r2, [r3, #0]
}
1004ca92:	46c0      	nop			@ (mov r8, r8)
1004ca94:	46bd      	mov	sp, r7
1004ca96:	b002      	add	sp, #8
1004ca98:	bd80      	pop	{r7, pc}
1004ca9a:	46c0      	nop			@ (mov r8, r8)
1004ca9c:	48400000 	.word	0x48400000
1004caa0:	01e84800 	.word	0x01e84800
1004caa4:	200014c8 	.word	0x200014c8
1004caa8:	03d09000 	.word	0x03d09000

1004caac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
1004caac:	b580      	push	{r7, lr}
1004caae:	b082      	sub	sp, #8
1004cab0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
1004cab2:	1dfb      	adds	r3, r7, #7
1004cab4:	2200      	movs	r2, #0
1004cab6:	701a      	strb	r2, [r3, #0]

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
1004cab8:	2003      	movs	r0, #3
1004caba:	f000 f80f 	bl	1004cadc <HAL_InitTick>
1004cabe:	1e03      	subs	r3, r0, #0
1004cac0:	d003      	beq.n	1004caca <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
1004cac2:	1dfb      	adds	r3, r7, #7
1004cac4:	2201      	movs	r2, #1
1004cac6:	701a      	strb	r2, [r3, #0]
1004cac8:	e001      	b.n	1004cace <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
1004caca:	f7f6 fbd7 	bl	1004327c <HAL_MspInit>
  }

  /* Return function status */
  return status;
1004cace:	1dfb      	adds	r3, r7, #7
1004cad0:	781b      	ldrb	r3, [r3, #0]
}
1004cad2:	0018      	movs	r0, r3
1004cad4:	46bd      	mov	sp, r7
1004cad6:	b002      	add	sp, #8
1004cad8:	bd80      	pop	{r7, pc}
	...

1004cadc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
1004cadc:	b590      	push	{r4, r7, lr}
1004cade:	b085      	sub	sp, #20
1004cae0:	af00      	add	r7, sp, #0
1004cae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
1004cae4:	230f      	movs	r3, #15
1004cae6:	18fb      	adds	r3, r7, r3
1004cae8:	2200      	movs	r2, #0
1004caea:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
1004caec:	4b1d      	ldr	r3, [pc, #116]	@ (1004cb64 <HAL_InitTick+0x88>)
1004caee:	781b      	ldrb	r3, [r3, #0]
1004caf0:	2b00      	cmp	r3, #0
1004caf2:	d02c      	beq.n	1004cb4e <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / (1000U / uwTickFreq)) == 0U)
1004caf4:	f003 fe52 	bl	1005079c <HAL_RCC_GetSysClockFreq>
1004caf8:	0004      	movs	r4, r0
1004cafa:	4b1a      	ldr	r3, [pc, #104]	@ (1004cb64 <HAL_InitTick+0x88>)
1004cafc:	781b      	ldrb	r3, [r3, #0]
1004cafe:	0019      	movs	r1, r3
1004cb00:	23fa      	movs	r3, #250	@ 0xfa
1004cb02:	0098      	lsls	r0, r3, #2
1004cb04:	f7f4 fba0 	bl	10041248 <__udivsi3>
1004cb08:	0003      	movs	r3, r0
1004cb0a:	0019      	movs	r1, r3
1004cb0c:	0020      	movs	r0, r4
1004cb0e:	f7f4 fb9b 	bl	10041248 <__udivsi3>
1004cb12:	0003      	movs	r3, r0
1004cb14:	0018      	movs	r0, r3
1004cb16:	f000 f93c 	bl	1004cd92 <HAL_SYSTICK_Config>
1004cb1a:	1e03      	subs	r3, r0, #0
1004cb1c:	d112      	bne.n	1004cb44 <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
1004cb1e:	687b      	ldr	r3, [r7, #4]
1004cb20:	2b03      	cmp	r3, #3
1004cb22:	d80a      	bhi.n	1004cb3a <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
1004cb24:	6879      	ldr	r1, [r7, #4]
1004cb26:	2301      	movs	r3, #1
1004cb28:	425b      	negs	r3, r3
1004cb2a:	2200      	movs	r2, #0
1004cb2c:	0018      	movs	r0, r3
1004cb2e:	f000 f90b 	bl	1004cd48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
1004cb32:	4b0d      	ldr	r3, [pc, #52]	@ (1004cb68 <HAL_InitTick+0x8c>)
1004cb34:	687a      	ldr	r2, [r7, #4]
1004cb36:	601a      	str	r2, [r3, #0]
1004cb38:	e00d      	b.n	1004cb56 <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
1004cb3a:	230f      	movs	r3, #15
1004cb3c:	18fb      	adds	r3, r7, r3
1004cb3e:	2201      	movs	r2, #1
1004cb40:	701a      	strb	r2, [r3, #0]
1004cb42:	e008      	b.n	1004cb56 <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
1004cb44:	230f      	movs	r3, #15
1004cb46:	18fb      	adds	r3, r7, r3
1004cb48:	2201      	movs	r2, #1
1004cb4a:	701a      	strb	r2, [r3, #0]
1004cb4c:	e003      	b.n	1004cb56 <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
1004cb4e:	230f      	movs	r3, #15
1004cb50:	18fb      	adds	r3, r7, r3
1004cb52:	2201      	movs	r2, #1
1004cb54:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
1004cb56:	230f      	movs	r3, #15
1004cb58:	18fb      	adds	r3, r7, r3
1004cb5a:	781b      	ldrb	r3, [r3, #0]
}
1004cb5c:	0018      	movs	r0, r3
1004cb5e:	46bd      	mov	sp, r7
1004cb60:	b005      	add	sp, #20
1004cb62:	bd90      	pop	{r4, r7, pc}
1004cb64:	200014d0 	.word	0x200014d0
1004cb68:	200014cc 	.word	0x200014cc

1004cb6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
1004cb6c:	b580      	push	{r7, lr}
1004cb6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
1004cb70:	4b05      	ldr	r3, [pc, #20]	@ (1004cb88 <HAL_IncTick+0x1c>)
1004cb72:	781b      	ldrb	r3, [r3, #0]
1004cb74:	001a      	movs	r2, r3
1004cb76:	4b05      	ldr	r3, [pc, #20]	@ (1004cb8c <HAL_IncTick+0x20>)
1004cb78:	681b      	ldr	r3, [r3, #0]
1004cb7a:	18d2      	adds	r2, r2, r3
1004cb7c:	4b03      	ldr	r3, [pc, #12]	@ (1004cb8c <HAL_IncTick+0x20>)
1004cb7e:	601a      	str	r2, [r3, #0]
}
1004cb80:	46c0      	nop			@ (mov r8, r8)
1004cb82:	46bd      	mov	sp, r7
1004cb84:	bd80      	pop	{r7, pc}
1004cb86:	46c0      	nop			@ (mov r8, r8)
1004cb88:	200014d0 	.word	0x200014d0
1004cb8c:	20000ef8 	.word	0x20000ef8

1004cb90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
1004cb90:	b580      	push	{r7, lr}
1004cb92:	af00      	add	r7, sp, #0
  return uwTick;
1004cb94:	4b02      	ldr	r3, [pc, #8]	@ (1004cba0 <HAL_GetTick+0x10>)
1004cb96:	681b      	ldr	r3, [r3, #0]
}
1004cb98:	0018      	movs	r0, r3
1004cb9a:	46bd      	mov	sp, r7
1004cb9c:	bd80      	pop	{r7, pc}
1004cb9e:	46c0      	nop			@ (mov r8, r8)
1004cba0:	20000ef8 	.word	0x20000ef8

1004cba4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
1004cba4:	b580      	push	{r7, lr}
1004cba6:	af00      	add	r7, sp, #0
  return uwTickPrio;
1004cba8:	4b02      	ldr	r3, [pc, #8]	@ (1004cbb4 <HAL_GetTickPrio+0x10>)
1004cbaa:	681b      	ldr	r3, [r3, #0]
}
1004cbac:	0018      	movs	r0, r3
1004cbae:	46bd      	mov	sp, r7
1004cbb0:	bd80      	pop	{r7, pc}
1004cbb2:	46c0      	nop			@ (mov r8, r8)
1004cbb4:	200014cc 	.word	0x200014cc

1004cbb8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
1004cbb8:	b580      	push	{r7, lr}
1004cbba:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
1004cbbc:	4b04      	ldr	r3, [pc, #16]	@ (1004cbd0 <HAL_SuspendTick+0x18>)
1004cbbe:	681a      	ldr	r2, [r3, #0]
1004cbc0:	4b03      	ldr	r3, [pc, #12]	@ (1004cbd0 <HAL_SuspendTick+0x18>)
1004cbc2:	2102      	movs	r1, #2
1004cbc4:	438a      	bics	r2, r1
1004cbc6:	601a      	str	r2, [r3, #0]
}
1004cbc8:	46c0      	nop			@ (mov r8, r8)
1004cbca:	46bd      	mov	sp, r7
1004cbcc:	bd80      	pop	{r7, pc}
1004cbce:	46c0      	nop			@ (mov r8, r8)
1004cbd0:	e000e010 	.word	0xe000e010

1004cbd4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
1004cbd4:	b580      	push	{r7, lr}
1004cbd6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
1004cbd8:	4b04      	ldr	r3, [pc, #16]	@ (1004cbec <HAL_ResumeTick+0x18>)
1004cbda:	681a      	ldr	r2, [r3, #0]
1004cbdc:	4b03      	ldr	r3, [pc, #12]	@ (1004cbec <HAL_ResumeTick+0x18>)
1004cbde:	2102      	movs	r1, #2
1004cbe0:	430a      	orrs	r2, r1
1004cbe2:	601a      	str	r2, [r3, #0]
}
1004cbe4:	46c0      	nop			@ (mov r8, r8)
1004cbe6:	46bd      	mov	sp, r7
1004cbe8:	bd80      	pop	{r7, pc}
1004cbea:	46c0      	nop			@ (mov r8, r8)
1004cbec:	e000e010 	.word	0xe000e010

1004cbf0 <__NVIC_EnableIRQ>:
{
1004cbf0:	b580      	push	{r7, lr}
1004cbf2:	b082      	sub	sp, #8
1004cbf4:	af00      	add	r7, sp, #0
1004cbf6:	0002      	movs	r2, r0
1004cbf8:	1dfb      	adds	r3, r7, #7
1004cbfa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004cbfc:	1dfb      	adds	r3, r7, #7
1004cbfe:	781b      	ldrb	r3, [r3, #0]
1004cc00:	2b7f      	cmp	r3, #127	@ 0x7f
1004cc02:	d809      	bhi.n	1004cc18 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1004cc04:	1dfb      	adds	r3, r7, #7
1004cc06:	781b      	ldrb	r3, [r3, #0]
1004cc08:	001a      	movs	r2, r3
1004cc0a:	231f      	movs	r3, #31
1004cc0c:	401a      	ands	r2, r3
1004cc0e:	4b04      	ldr	r3, [pc, #16]	@ (1004cc20 <__NVIC_EnableIRQ+0x30>)
1004cc10:	2101      	movs	r1, #1
1004cc12:	4091      	lsls	r1, r2
1004cc14:	000a      	movs	r2, r1
1004cc16:	601a      	str	r2, [r3, #0]
}
1004cc18:	46c0      	nop			@ (mov r8, r8)
1004cc1a:	46bd      	mov	sp, r7
1004cc1c:	b002      	add	sp, #8
1004cc1e:	bd80      	pop	{r7, pc}
1004cc20:	e000e100 	.word	0xe000e100

1004cc24 <__NVIC_SetPriority>:
{
1004cc24:	b590      	push	{r4, r7, lr}
1004cc26:	b083      	sub	sp, #12
1004cc28:	af00      	add	r7, sp, #0
1004cc2a:	0002      	movs	r2, r0
1004cc2c:	6039      	str	r1, [r7, #0]
1004cc2e:	1dfb      	adds	r3, r7, #7
1004cc30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004cc32:	1dfb      	adds	r3, r7, #7
1004cc34:	781b      	ldrb	r3, [r3, #0]
1004cc36:	2b7f      	cmp	r3, #127	@ 0x7f
1004cc38:	d828      	bhi.n	1004cc8c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004cc3a:	4a2f      	ldr	r2, [pc, #188]	@ (1004ccf8 <__NVIC_SetPriority+0xd4>)
1004cc3c:	1dfb      	adds	r3, r7, #7
1004cc3e:	781b      	ldrb	r3, [r3, #0]
1004cc40:	b25b      	sxtb	r3, r3
1004cc42:	089b      	lsrs	r3, r3, #2
1004cc44:	33c0      	adds	r3, #192	@ 0xc0
1004cc46:	009b      	lsls	r3, r3, #2
1004cc48:	589b      	ldr	r3, [r3, r2]
1004cc4a:	1dfa      	adds	r2, r7, #7
1004cc4c:	7812      	ldrb	r2, [r2, #0]
1004cc4e:	0011      	movs	r1, r2
1004cc50:	2203      	movs	r2, #3
1004cc52:	400a      	ands	r2, r1
1004cc54:	00d2      	lsls	r2, r2, #3
1004cc56:	21ff      	movs	r1, #255	@ 0xff
1004cc58:	4091      	lsls	r1, r2
1004cc5a:	000a      	movs	r2, r1
1004cc5c:	43d2      	mvns	r2, r2
1004cc5e:	401a      	ands	r2, r3
1004cc60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004cc62:	683b      	ldr	r3, [r7, #0]
1004cc64:	019b      	lsls	r3, r3, #6
1004cc66:	22ff      	movs	r2, #255	@ 0xff
1004cc68:	401a      	ands	r2, r3
1004cc6a:	1dfb      	adds	r3, r7, #7
1004cc6c:	781b      	ldrb	r3, [r3, #0]
1004cc6e:	0018      	movs	r0, r3
1004cc70:	2303      	movs	r3, #3
1004cc72:	4003      	ands	r3, r0
1004cc74:	00db      	lsls	r3, r3, #3
1004cc76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004cc78:	481f      	ldr	r0, [pc, #124]	@ (1004ccf8 <__NVIC_SetPriority+0xd4>)
1004cc7a:	1dfb      	adds	r3, r7, #7
1004cc7c:	781b      	ldrb	r3, [r3, #0]
1004cc7e:	b25b      	sxtb	r3, r3
1004cc80:	089b      	lsrs	r3, r3, #2
1004cc82:	430a      	orrs	r2, r1
1004cc84:	33c0      	adds	r3, #192	@ 0xc0
1004cc86:	009b      	lsls	r3, r3, #2
1004cc88:	501a      	str	r2, [r3, r0]
}
1004cc8a:	e031      	b.n	1004ccf0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004cc8c:	4a1b      	ldr	r2, [pc, #108]	@ (1004ccfc <__NVIC_SetPriority+0xd8>)
1004cc8e:	1dfb      	adds	r3, r7, #7
1004cc90:	781b      	ldrb	r3, [r3, #0]
1004cc92:	0019      	movs	r1, r3
1004cc94:	230f      	movs	r3, #15
1004cc96:	400b      	ands	r3, r1
1004cc98:	3b08      	subs	r3, #8
1004cc9a:	089b      	lsrs	r3, r3, #2
1004cc9c:	3306      	adds	r3, #6
1004cc9e:	009b      	lsls	r3, r3, #2
1004cca0:	18d3      	adds	r3, r2, r3
1004cca2:	3304      	adds	r3, #4
1004cca4:	681b      	ldr	r3, [r3, #0]
1004cca6:	1dfa      	adds	r2, r7, #7
1004cca8:	7812      	ldrb	r2, [r2, #0]
1004ccaa:	0011      	movs	r1, r2
1004ccac:	2203      	movs	r2, #3
1004ccae:	400a      	ands	r2, r1
1004ccb0:	00d2      	lsls	r2, r2, #3
1004ccb2:	21ff      	movs	r1, #255	@ 0xff
1004ccb4:	4091      	lsls	r1, r2
1004ccb6:	000a      	movs	r2, r1
1004ccb8:	43d2      	mvns	r2, r2
1004ccba:	401a      	ands	r2, r3
1004ccbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004ccbe:	683b      	ldr	r3, [r7, #0]
1004ccc0:	019b      	lsls	r3, r3, #6
1004ccc2:	22ff      	movs	r2, #255	@ 0xff
1004ccc4:	401a      	ands	r2, r3
1004ccc6:	1dfb      	adds	r3, r7, #7
1004ccc8:	781b      	ldrb	r3, [r3, #0]
1004ccca:	0018      	movs	r0, r3
1004cccc:	2303      	movs	r3, #3
1004ccce:	4003      	ands	r3, r0
1004ccd0:	00db      	lsls	r3, r3, #3
1004ccd2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004ccd4:	4809      	ldr	r0, [pc, #36]	@ (1004ccfc <__NVIC_SetPriority+0xd8>)
1004ccd6:	1dfb      	adds	r3, r7, #7
1004ccd8:	781b      	ldrb	r3, [r3, #0]
1004ccda:	001c      	movs	r4, r3
1004ccdc:	230f      	movs	r3, #15
1004ccde:	4023      	ands	r3, r4
1004cce0:	3b08      	subs	r3, #8
1004cce2:	089b      	lsrs	r3, r3, #2
1004cce4:	430a      	orrs	r2, r1
1004cce6:	3306      	adds	r3, #6
1004cce8:	009b      	lsls	r3, r3, #2
1004ccea:	18c3      	adds	r3, r0, r3
1004ccec:	3304      	adds	r3, #4
1004ccee:	601a      	str	r2, [r3, #0]
}
1004ccf0:	46c0      	nop			@ (mov r8, r8)
1004ccf2:	46bd      	mov	sp, r7
1004ccf4:	b003      	add	sp, #12
1004ccf6:	bd90      	pop	{r4, r7, pc}
1004ccf8:	e000e100 	.word	0xe000e100
1004ccfc:	e000ed00 	.word	0xe000ed00

1004cd00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
1004cd00:	b580      	push	{r7, lr}
1004cd02:	b082      	sub	sp, #8
1004cd04:	af00      	add	r7, sp, #0
1004cd06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1004cd08:	687b      	ldr	r3, [r7, #4]
1004cd0a:	1e5a      	subs	r2, r3, #1
1004cd0c:	2380      	movs	r3, #128	@ 0x80
1004cd0e:	045b      	lsls	r3, r3, #17
1004cd10:	429a      	cmp	r2, r3
1004cd12:	d301      	bcc.n	1004cd18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
1004cd14:	2301      	movs	r3, #1
1004cd16:	e010      	b.n	1004cd3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1004cd18:	4b0a      	ldr	r3, [pc, #40]	@ (1004cd44 <SysTick_Config+0x44>)
1004cd1a:	687a      	ldr	r2, [r7, #4]
1004cd1c:	3a01      	subs	r2, #1
1004cd1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
1004cd20:	2301      	movs	r3, #1
1004cd22:	425b      	negs	r3, r3
1004cd24:	2103      	movs	r1, #3
1004cd26:	0018      	movs	r0, r3
1004cd28:	f7ff ff7c 	bl	1004cc24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1004cd2c:	4b05      	ldr	r3, [pc, #20]	@ (1004cd44 <SysTick_Config+0x44>)
1004cd2e:	2200      	movs	r2, #0
1004cd30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1004cd32:	4b04      	ldr	r3, [pc, #16]	@ (1004cd44 <SysTick_Config+0x44>)
1004cd34:	2207      	movs	r2, #7
1004cd36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
1004cd38:	2300      	movs	r3, #0
}
1004cd3a:	0018      	movs	r0, r3
1004cd3c:	46bd      	mov	sp, r7
1004cd3e:	b002      	add	sp, #8
1004cd40:	bd80      	pop	{r7, pc}
1004cd42:	46c0      	nop			@ (mov r8, r8)
1004cd44:	e000e010 	.word	0xe000e010

1004cd48 <HAL_NVIC_SetPriority>:
  *         with stm32wb0x devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
1004cd48:	b580      	push	{r7, lr}
1004cd4a:	b084      	sub	sp, #16
1004cd4c:	af00      	add	r7, sp, #0
1004cd4e:	60b9      	str	r1, [r7, #8]
1004cd50:	607a      	str	r2, [r7, #4]
1004cd52:	210f      	movs	r1, #15
1004cd54:	187b      	adds	r3, r7, r1
1004cd56:	1c02      	adds	r2, r0, #0
1004cd58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
1004cd5a:	68ba      	ldr	r2, [r7, #8]
1004cd5c:	187b      	adds	r3, r7, r1
1004cd5e:	781b      	ldrb	r3, [r3, #0]
1004cd60:	b25b      	sxtb	r3, r3
1004cd62:	0011      	movs	r1, r2
1004cd64:	0018      	movs	r0, r3
1004cd66:	f7ff ff5d 	bl	1004cc24 <__NVIC_SetPriority>
}
1004cd6a:	46c0      	nop			@ (mov r8, r8)
1004cd6c:	46bd      	mov	sp, r7
1004cd6e:	b004      	add	sp, #16
1004cd70:	bd80      	pop	{r7, pc}

1004cd72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file)
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
1004cd72:	b580      	push	{r7, lr}
1004cd74:	b082      	sub	sp, #8
1004cd76:	af00      	add	r7, sp, #0
1004cd78:	0002      	movs	r2, r0
1004cd7a:	1dfb      	adds	r3, r7, #7
1004cd7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
1004cd7e:	1dfb      	adds	r3, r7, #7
1004cd80:	781b      	ldrb	r3, [r3, #0]
1004cd82:	b25b      	sxtb	r3, r3
1004cd84:	0018      	movs	r0, r3
1004cd86:	f7ff ff33 	bl	1004cbf0 <__NVIC_EnableIRQ>
}
1004cd8a:	46c0      	nop			@ (mov r8, r8)
1004cd8c:	46bd      	mov	sp, r7
1004cd8e:	b002      	add	sp, #8
1004cd90:	bd80      	pop	{r7, pc}

1004cd92 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
1004cd92:	b580      	push	{r7, lr}
1004cd94:	b082      	sub	sp, #8
1004cd96:	af00      	add	r7, sp, #0
1004cd98:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
1004cd9a:	687b      	ldr	r3, [r7, #4]
1004cd9c:	0018      	movs	r0, r3
1004cd9e:	f7ff ffaf 	bl	1004cd00 <SysTick_Config>
1004cda2:	0003      	movs	r3, r0
}
1004cda4:	0018      	movs	r0, r3
1004cda6:	46bd      	mov	sp, r7
1004cda8:	b002      	add	sp, #8
1004cdaa:	bd80      	pop	{r7, pc}

1004cdac <HAL_FLASH_Program>:
  *                are stored the data for the burst program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
1004cdac:	b5b0      	push	{r4, r5, r7, lr}
1004cdae:	b086      	sub	sp, #24
1004cdb0:	af00      	add	r7, sp, #0
1004cdb2:	60f8      	str	r0, [r7, #12]
1004cdb4:	60b9      	str	r1, [r7, #8]
1004cdb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_32BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
1004cdb8:	4b1d      	ldr	r3, [pc, #116]	@ (1004ce30 <HAL_FLASH_Program+0x84>)
1004cdba:	781b      	ldrb	r3, [r3, #0]
1004cdbc:	2b01      	cmp	r3, #1
1004cdbe:	d101      	bne.n	1004cdc4 <HAL_FLASH_Program+0x18>
1004cdc0:	2302      	movs	r3, #2
1004cdc2:	e031      	b.n	1004ce28 <HAL_FLASH_Program+0x7c>
1004cdc4:	4b1a      	ldr	r3, [pc, #104]	@ (1004ce30 <HAL_FLASH_Program+0x84>)
1004cdc6:	2201      	movs	r2, #1
1004cdc8:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
1004cdca:	4b19      	ldr	r3, [pc, #100]	@ (1004ce30 <HAL_FLASH_Program+0x84>)
1004cdcc:	2200      	movs	r2, #0
1004cdce:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1004cdd0:	2517      	movs	r5, #23
1004cdd2:	197c      	adds	r4, r7, r5
1004cdd4:	23fa      	movs	r3, #250	@ 0xfa
1004cdd6:	009b      	lsls	r3, r3, #2
1004cdd8:	0018      	movs	r0, r3
1004cdda:	f000 f82b 	bl	1004ce34 <FLASH_WaitForLastOperation>
1004cdde:	0003      	movs	r3, r0
1004cde0:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
1004cde2:	197b      	adds	r3, r7, r5
1004cde4:	781b      	ldrb	r3, [r3, #0]
1004cde6:	2b00      	cmp	r3, #0
1004cde8:	d118      	bne.n	1004ce1c <HAL_FLASH_Program+0x70>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
1004cdea:	68fb      	ldr	r3, [r7, #12]
1004cdec:	2b00      	cmp	r3, #0
1004cdee:	d106      	bne.n	1004cdfe <HAL_FLASH_Program+0x52>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program a word (32-bit) at a specified address */
      FLASH_Program_Word(Address, Data);
1004cdf0:	687a      	ldr	r2, [r7, #4]
1004cdf2:	68bb      	ldr	r3, [r7, #8]
1004cdf4:	0011      	movs	r1, r2
1004cdf6:	0018      	movs	r0, r3
1004cdf8:	f000 f856 	bl	1004cea8 <FLASH_Program_Word>
1004cdfc:	e005      	b.n	1004ce0a <HAL_FLASH_Program+0x5e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program 4 word starting from a specified address */
      FLASH_Program_Burst(Address, Data);
1004cdfe:	687a      	ldr	r2, [r7, #4]
1004ce00:	68bb      	ldr	r3, [r7, #8]
1004ce02:	0011      	movs	r1, r2
1004ce04:	0018      	movs	r0, r3
1004ce06:	f000 f871 	bl	1004ceec <FLASH_Program_Burst>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1004ce0a:	2317      	movs	r3, #23
1004ce0c:	18fc      	adds	r4, r7, r3
1004ce0e:	23fa      	movs	r3, #250	@ 0xfa
1004ce10:	009b      	lsls	r3, r3, #2
1004ce12:	0018      	movs	r0, r3
1004ce14:	f000 f80e 	bl	1004ce34 <FLASH_WaitForLastOperation>
1004ce18:	0003      	movs	r3, r0
1004ce1a:	7023      	strb	r3, [r4, #0]

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
1004ce1c:	4b04      	ldr	r3, [pc, #16]	@ (1004ce30 <HAL_FLASH_Program+0x84>)
1004ce1e:	2200      	movs	r2, #0
1004ce20:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
1004ce22:	2317      	movs	r3, #23
1004ce24:	18fb      	adds	r3, r7, r3
1004ce26:	781b      	ldrb	r3, [r3, #0]
}
1004ce28:	0018      	movs	r0, r3
1004ce2a:	46bd      	mov	sp, r7
1004ce2c:	b006      	add	sp, #24
1004ce2e:	bdb0      	pop	{r4, r5, r7, pc}
1004ce30:	20000efc 	.word	0x20000efc

1004ce34 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
1004ce34:	b580      	push	{r7, lr}
1004ce36:	b084      	sub	sp, #16
1004ce38:	af00      	add	r7, sp, #0
1004ce3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
1004ce3c:	f7ff fea8 	bl	1004cb90 <HAL_GetTick>
1004ce40:	0003      	movs	r3, r0
1004ce42:	60fb      	str	r3, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on CMDDONE flag to be set.
     If the FLASH operation fails, an error flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
1004ce44:	e00c      	b.n	1004ce60 <FLASH_WaitForLastOperation+0x2c>
  {
    if (Timeout != HAL_MAX_DELAY)
1004ce46:	687b      	ldr	r3, [r7, #4]
1004ce48:	3301      	adds	r3, #1
1004ce4a:	d009      	beq.n	1004ce60 <FLASH_WaitForLastOperation+0x2c>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
1004ce4c:	f7ff fea0 	bl	1004cb90 <HAL_GetTick>
1004ce50:	0002      	movs	r2, r0
1004ce52:	68fb      	ldr	r3, [r7, #12]
1004ce54:	1ad3      	subs	r3, r2, r3
1004ce56:	687a      	ldr	r2, [r7, #4]
1004ce58:	429a      	cmp	r2, r3
1004ce5a:	d801      	bhi.n	1004ce60 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
1004ce5c:	2303      	movs	r3, #3
1004ce5e:	e01b      	b.n	1004ce98 <FLASH_WaitForLastOperation+0x64>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
1004ce60:	4b0f      	ldr	r3, [pc, #60]	@ (1004cea0 <FLASH_WaitForLastOperation+0x6c>)
1004ce62:	691b      	ldr	r3, [r3, #16]
1004ce64:	2201      	movs	r2, #1
1004ce66:	4013      	ands	r3, r2
1004ce68:	2b01      	cmp	r3, #1
1004ce6a:	d1ec      	bne.n	1004ce46 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }

  /* Check flash errors */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS))
1004ce6c:	4b0c      	ldr	r3, [pc, #48]	@ (1004cea0 <FLASH_WaitForLastOperation+0x6c>)
1004ce6e:	691b      	ldr	r3, [r3, #16]
1004ce70:	220c      	movs	r2, #12
1004ce72:	4013      	ands	r3, r2
1004ce74:	2b0c      	cmp	r3, #12
1004ce76:	d10e      	bne.n	1004ce96 <FLASH_WaitForLastOperation+0x62>
  {
    /* Save the error code */
    pFlash.ErrorCode |= FLASH->IRQSTAT;
1004ce78:	4b09      	ldr	r3, [pc, #36]	@ (1004cea0 <FLASH_WaitForLastOperation+0x6c>)
1004ce7a:	689a      	ldr	r2, [r3, #8]
1004ce7c:	4b09      	ldr	r3, [pc, #36]	@ (1004cea4 <FLASH_WaitForLastOperation+0x70>)
1004ce7e:	685b      	ldr	r3, [r3, #4]
1004ce80:	431a      	orrs	r2, r3
1004ce82:	4b08      	ldr	r3, [pc, #32]	@ (1004cea4 <FLASH_WaitForLastOperation+0x70>)
1004ce84:	605a      	str	r2, [r3, #4]

    /* Clear error flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
1004ce86:	4b06      	ldr	r3, [pc, #24]	@ (1004cea0 <FLASH_WaitForLastOperation+0x6c>)
1004ce88:	691a      	ldr	r2, [r3, #16]
1004ce8a:	4b05      	ldr	r3, [pc, #20]	@ (1004cea0 <FLASH_WaitForLastOperation+0x6c>)
1004ce8c:	210c      	movs	r1, #12
1004ce8e:	430a      	orrs	r2, r1
1004ce90:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
1004ce92:	2301      	movs	r3, #1
1004ce94:	e000      	b.n	1004ce98 <FLASH_WaitForLastOperation+0x64>
  }

  return HAL_OK;
1004ce96:	2300      	movs	r3, #0
}
1004ce98:	0018      	movs	r0, r3
1004ce9a:	46bd      	mov	sp, r7
1004ce9c:	b004      	add	sp, #16
1004ce9e:	bd80      	pop	{r7, pc}
1004cea0:	40001000 	.word	0x40001000
1004cea4:	20000efc 	.word	0x20000efc

1004cea8 <FLASH_Program_Word>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
1004cea8:	b580      	push	{r7, lr}
1004ceaa:	b082      	sub	sp, #8
1004ceac:	af00      	add	r7, sp, #0
1004ceae:	6078      	str	r0, [r7, #4]
1004ceb0:	6039      	str	r1, [r7, #0]
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
1004ceb2:	4b0c      	ldr	r3, [pc, #48]	@ (1004cee4 <FLASH_Program_Word+0x3c>)
1004ceb4:	691a      	ldr	r2, [r3, #16]
1004ceb6:	4b0b      	ldr	r3, [pc, #44]	@ (1004cee4 <FLASH_Program_Word+0x3c>)
1004ceb8:	210f      	movs	r1, #15
1004ceba:	430a      	orrs	r2, r1
1004cebc:	611a      	str	r2, [r3, #16]

  /* Load the word address */

  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
1004cebe:	687b      	ldr	r3, [r7, #4]
1004cec0:	4a09      	ldr	r2, [pc, #36]	@ (1004cee8 <FLASH_Program_Word+0x40>)
1004cec2:	4694      	mov	ip, r2
1004cec4:	4463      	add	r3, ip
1004cec6:	089a      	lsrs	r2, r3, #2
1004cec8:	4b06      	ldr	r3, [pc, #24]	@ (1004cee4 <FLASH_Program_Word+0x3c>)
1004ceca:	03d2      	lsls	r2, r2, #15
1004cecc:	0bd2      	lsrs	r2, r2, #15
1004cece:	619a      	str	r2, [r3, #24]

  /* Load the data to program */
  FLASH->DATA0 = Data;
1004ced0:	4b04      	ldr	r3, [pc, #16]	@ (1004cee4 <FLASH_Program_Word+0x3c>)
1004ced2:	683a      	ldr	r2, [r7, #0]
1004ced4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Load the WRITE command */
  FLASH->COMMAND = FLASH_CMD_WRITE;
1004ced6:	4b03      	ldr	r3, [pc, #12]	@ (1004cee4 <FLASH_Program_Word+0x3c>)
1004ced8:	2233      	movs	r2, #51	@ 0x33
1004ceda:	601a      	str	r2, [r3, #0]
}
1004cedc:	46c0      	nop			@ (mov r8, r8)
1004cede:	46bd      	mov	sp, r7
1004cee0:	b002      	add	sp, #8
1004cee2:	bd80      	pop	{r7, pc}
1004cee4:	40001000 	.word	0x40001000
1004cee8:	effc0000 	.word	0xeffc0000

1004ceec <FLASH_Program_Burst>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Burst(uint32_t Address, uint32_t DataAddress)
{
1004ceec:	b580      	push	{r7, lr}
1004ceee:	b084      	sub	sp, #16
1004cef0:	af00      	add	r7, sp, #0
1004cef2:	6078      	str	r0, [r7, #4]
1004cef4:	6039      	str	r1, [r7, #0]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
1004cef6:	683b      	ldr	r3, [r7, #0]
1004cef8:	60fb      	str	r3, [r7, #12]

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
1004cefa:	4b17      	ldr	r3, [pc, #92]	@ (1004cf58 <FLASH_Program_Burst+0x6c>)
1004cefc:	691a      	ldr	r2, [r3, #16]
1004cefe:	4b16      	ldr	r3, [pc, #88]	@ (1004cf58 <FLASH_Program_Burst+0x6c>)
1004cf00:	210f      	movs	r1, #15
1004cf02:	430a      	orrs	r2, r1
1004cf04:	611a      	str	r2, [r3, #16]

  /* Load the word address */
  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
1004cf06:	687b      	ldr	r3, [r7, #4]
1004cf08:	4a14      	ldr	r2, [pc, #80]	@ (1004cf5c <FLASH_Program_Burst+0x70>)
1004cf0a:	4694      	mov	ip, r2
1004cf0c:	4463      	add	r3, ip
1004cf0e:	089a      	lsrs	r2, r3, #2
1004cf10:	4b11      	ldr	r3, [pc, #68]	@ (1004cf58 <FLASH_Program_Burst+0x6c>)
1004cf12:	03d2      	lsls	r2, r2, #15
1004cf14:	0bd2      	lsrs	r2, r2, #15
1004cf16:	619a      	str	r2, [r3, #24]
  FLASH->DATA0 = *src_addr;
1004cf18:	4a0f      	ldr	r2, [pc, #60]	@ (1004cf58 <FLASH_Program_Burst+0x6c>)
1004cf1a:	68fb      	ldr	r3, [r7, #12]
1004cf1c:	681b      	ldr	r3, [r3, #0]
1004cf1e:	6413      	str	r3, [r2, #64]	@ 0x40
  src_addr = src_addr + 1;
1004cf20:	68fb      	ldr	r3, [r7, #12]
1004cf22:	3304      	adds	r3, #4
1004cf24:	60fb      	str	r3, [r7, #12]
  FLASH->DATA1 = *src_addr;
1004cf26:	4a0c      	ldr	r2, [pc, #48]	@ (1004cf58 <FLASH_Program_Burst+0x6c>)
1004cf28:	68fb      	ldr	r3, [r7, #12]
1004cf2a:	681b      	ldr	r3, [r3, #0]
1004cf2c:	6453      	str	r3, [r2, #68]	@ 0x44
  src_addr = src_addr + 1;
1004cf2e:	68fb      	ldr	r3, [r7, #12]
1004cf30:	3304      	adds	r3, #4
1004cf32:	60fb      	str	r3, [r7, #12]
  FLASH->DATA2 = *src_addr;
1004cf34:	4a08      	ldr	r2, [pc, #32]	@ (1004cf58 <FLASH_Program_Burst+0x6c>)
1004cf36:	68fb      	ldr	r3, [r7, #12]
1004cf38:	681b      	ldr	r3, [r3, #0]
1004cf3a:	6493      	str	r3, [r2, #72]	@ 0x48
  src_addr = src_addr + 1;
1004cf3c:	68fb      	ldr	r3, [r7, #12]
1004cf3e:	3304      	adds	r3, #4
1004cf40:	60fb      	str	r3, [r7, #12]
  FLASH->DATA3 = *src_addr;
1004cf42:	4a05      	ldr	r2, [pc, #20]	@ (1004cf58 <FLASH_Program_Burst+0x6c>)
1004cf44:	68fb      	ldr	r3, [r7, #12]
1004cf46:	681b      	ldr	r3, [r3, #0]
1004cf48:	64d3      	str	r3, [r2, #76]	@ 0x4c

  /* Load the BURST WRITE command */
  FLASH->COMMAND = FLASH_CMD_BURSTWRITE;
1004cf4a:	4b03      	ldr	r3, [pc, #12]	@ (1004cf58 <FLASH_Program_Burst+0x6c>)
1004cf4c:	22cc      	movs	r2, #204	@ 0xcc
1004cf4e:	601a      	str	r2, [r3, #0]
}
1004cf50:	46c0      	nop			@ (mov r8, r8)
1004cf52:	46bd      	mov	sp, r7
1004cf54:	b004      	add	sp, #16
1004cf56:	bd80      	pop	{r7, pc}
1004cf58:	40001000 	.word	0x40001000
1004cf5c:	effc0000 	.word	0xeffc0000

1004cf60 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
1004cf60:	b5b0      	push	{r4, r5, r7, lr}
1004cf62:	b084      	sub	sp, #16
1004cf64:	af00      	add	r7, sp, #0
1004cf66:	6078      	str	r0, [r7, #4]
1004cf68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPE_ERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
1004cf6a:	4b27      	ldr	r3, [pc, #156]	@ (1004d008 <HAL_FLASHEx_Erase+0xa8>)
1004cf6c:	781b      	ldrb	r3, [r3, #0]
1004cf6e:	2b01      	cmp	r3, #1
1004cf70:	d101      	bne.n	1004cf76 <HAL_FLASHEx_Erase+0x16>
1004cf72:	2302      	movs	r3, #2
1004cf74:	e043      	b.n	1004cffe <HAL_FLASHEx_Erase+0x9e>
1004cf76:	4b24      	ldr	r3, [pc, #144]	@ (1004d008 <HAL_FLASHEx_Erase+0xa8>)
1004cf78:	2201      	movs	r2, #1
1004cf7a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
1004cf7c:	4b22      	ldr	r3, [pc, #136]	@ (1004d008 <HAL_FLASHEx_Erase+0xa8>)
1004cf7e:	2200      	movs	r2, #0
1004cf80:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
1004cf82:	687b      	ldr	r3, [r7, #4]
1004cf84:	681b      	ldr	r3, [r3, #0]
1004cf86:	2bff      	cmp	r3, #255	@ 0xff
1004cf88:	d10b      	bne.n	1004cfa2 <HAL_FLASHEx_Erase+0x42>
  {
    /* Mass erase to be done */
    FLASH_MassErase();
1004cf8a:	f000 f83f 	bl	1004d00c <FLASH_MassErase>

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1004cf8e:	230f      	movs	r3, #15
1004cf90:	18fc      	adds	r4, r7, r3
1004cf92:	23fa      	movs	r3, #250	@ 0xfa
1004cf94:	009b      	lsls	r3, r3, #2
1004cf96:	0018      	movs	r0, r3
1004cf98:	f7ff ff4c 	bl	1004ce34 <FLASH_WaitForLastOperation>
1004cf9c:	0003      	movs	r3, r0
1004cf9e:	7023      	strb	r3, [r4, #0]
1004cfa0:	e027      	b.n	1004cff2 <HAL_FLASHEx_Erase+0x92>
  }
  else
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
1004cfa2:	683b      	ldr	r3, [r7, #0]
1004cfa4:	2201      	movs	r2, #1
1004cfa6:	4252      	negs	r2, r2
1004cfa8:	601a      	str	r2, [r3, #0]

    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
1004cfaa:	687b      	ldr	r3, [r7, #4]
1004cfac:	685b      	ldr	r3, [r3, #4]
1004cfae:	60bb      	str	r3, [r7, #8]
1004cfb0:	e017      	b.n	1004cfe2 <HAL_FLASHEx_Erase+0x82>
    {
      /* Start erase page */
      FLASH_PageErase(index);
1004cfb2:	68bb      	ldr	r3, [r7, #8]
1004cfb4:	0018      	movs	r0, r3
1004cfb6:	f000 f839 	bl	1004d02c <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1004cfba:	250f      	movs	r5, #15
1004cfbc:	197c      	adds	r4, r7, r5
1004cfbe:	23fa      	movs	r3, #250	@ 0xfa
1004cfc0:	009b      	lsls	r3, r3, #2
1004cfc2:	0018      	movs	r0, r3
1004cfc4:	f7ff ff36 	bl	1004ce34 <FLASH_WaitForLastOperation>
1004cfc8:	0003      	movs	r3, r0
1004cfca:	7023      	strb	r3, [r4, #0]

      if (status != HAL_OK)
1004cfcc:	197b      	adds	r3, r7, r5
1004cfce:	781b      	ldrb	r3, [r3, #0]
1004cfd0:	2b00      	cmp	r3, #0
1004cfd2:	d003      	beq.n	1004cfdc <HAL_FLASHEx_Erase+0x7c>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = index;
1004cfd4:	683b      	ldr	r3, [r7, #0]
1004cfd6:	68ba      	ldr	r2, [r7, #8]
1004cfd8:	601a      	str	r2, [r3, #0]
        break;
1004cfda:	e00a      	b.n	1004cff2 <HAL_FLASHEx_Erase+0x92>
    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
1004cfdc:	68bb      	ldr	r3, [r7, #8]
1004cfde:	3301      	adds	r3, #1
1004cfe0:	60bb      	str	r3, [r7, #8]
1004cfe2:	687b      	ldr	r3, [r7, #4]
1004cfe4:	685a      	ldr	r2, [r3, #4]
1004cfe6:	687b      	ldr	r3, [r7, #4]
1004cfe8:	689b      	ldr	r3, [r3, #8]
1004cfea:	18d3      	adds	r3, r2, r3
1004cfec:	68ba      	ldr	r2, [r7, #8]
1004cfee:	429a      	cmp	r2, r3
1004cff0:	d3df      	bcc.n	1004cfb2 <HAL_FLASHEx_Erase+0x52>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
1004cff2:	4b05      	ldr	r3, [pc, #20]	@ (1004d008 <HAL_FLASHEx_Erase+0xa8>)
1004cff4:	2200      	movs	r2, #0
1004cff6:	701a      	strb	r2, [r3, #0]

  return status;
1004cff8:	230f      	movs	r3, #15
1004cffa:	18fb      	adds	r3, r7, r3
1004cffc:	781b      	ldrb	r3, [r3, #0]
}
1004cffe:	0018      	movs	r0, r3
1004d000:	46bd      	mov	sp, r7
1004d002:	b004      	add	sp, #16
1004d004:	bdb0      	pop	{r4, r5, r7, pc}
1004d006:	46c0      	nop			@ (mov r8, r8)
1004d008:	20000efc 	.word	0x20000efc

1004d00c <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
1004d00c:	b580      	push	{r7, lr}
1004d00e:	af00      	add	r7, sp, #0
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
1004d010:	4b05      	ldr	r3, [pc, #20]	@ (1004d028 <FLASH_MassErase+0x1c>)
1004d012:	691a      	ldr	r2, [r3, #16]
1004d014:	4b04      	ldr	r3, [pc, #16]	@ (1004d028 <FLASH_MassErase+0x1c>)
1004d016:	210f      	movs	r1, #15
1004d018:	430a      	orrs	r2, r1
1004d01a:	611a      	str	r2, [r3, #16]

  /* MASSERASE command */
  FLASH->COMMAND = FLASH_CMD_MASSERASE;
1004d01c:	4b02      	ldr	r3, [pc, #8]	@ (1004d028 <FLASH_MassErase+0x1c>)
1004d01e:	2222      	movs	r2, #34	@ 0x22
1004d020:	601a      	str	r2, [r3, #0]
}
1004d022:	46c0      	nop			@ (mov r8, r8)
1004d024:	46bd      	mov	sp, r7
1004d026:	bd80      	pop	{r7, pc}
1004d028:	40001000 	.word	0x40001000

1004d02c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
1004d02c:	b580      	push	{r7, lr}
1004d02e:	b082      	sub	sp, #8
1004d030:	af00      	add	r7, sp, #0
1004d032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
1004d034:	4b09      	ldr	r3, [pc, #36]	@ (1004d05c <FLASH_PageErase+0x30>)
1004d036:	691a      	ldr	r2, [r3, #16]
1004d038:	4b08      	ldr	r3, [pc, #32]	@ (1004d05c <FLASH_PageErase+0x30>)
1004d03a:	210f      	movs	r1, #15
1004d03c:	430a      	orrs	r2, r1
1004d03e:	611a      	str	r2, [r3, #16]

  FLASH->ADDRESS = (((Page * FLASH_PAGE_SIZE) >> 2) & FLASH_SIZE_MASK);
1004d040:	687b      	ldr	r3, [r7, #4]
1004d042:	02db      	lsls	r3, r3, #11
1004d044:	089a      	lsrs	r2, r3, #2
1004d046:	4b05      	ldr	r3, [pc, #20]	@ (1004d05c <FLASH_PageErase+0x30>)
1004d048:	03d2      	lsls	r2, r2, #15
1004d04a:	0bd2      	lsrs	r2, r2, #15
1004d04c:	619a      	str	r2, [r3, #24]

  /* Write the ERASE command */
  FLASH->COMMAND = FLASH_CMD_ERASE_PAGES;
1004d04e:	4b03      	ldr	r3, [pc, #12]	@ (1004d05c <FLASH_PageErase+0x30>)
1004d050:	2211      	movs	r2, #17
1004d052:	601a      	str	r2, [r3, #0]
}
1004d054:	46c0      	nop			@ (mov r8, r8)
1004d056:	46bd      	mov	sp, r7
1004d058:	b002      	add	sp, #8
1004d05a:	bd80      	pop	{r7, pc}
1004d05c:	40001000 	.word	0x40001000

1004d060 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
1004d060:	b580      	push	{r7, lr}
1004d062:	b086      	sub	sp, #24
1004d064:	af00      	add	r7, sp, #0
1004d066:	6078      	str	r0, [r7, #4]
1004d068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
1004d06a:	2300      	movs	r3, #0
1004d06c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
1004d06e:	e194      	b.n	1004d39a <HAL_GPIO_Init+0x33a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
1004d070:	683b      	ldr	r3, [r7, #0]
1004d072:	681b      	ldr	r3, [r3, #0]
1004d074:	2101      	movs	r1, #1
1004d076:	697a      	ldr	r2, [r7, #20]
1004d078:	4091      	lsls	r1, r2
1004d07a:	000a      	movs	r2, r1
1004d07c:	4013      	ands	r3, r2
1004d07e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
1004d080:	68fb      	ldr	r3, [r7, #12]
1004d082:	2b00      	cmp	r3, #0
1004d084:	d100      	bne.n	1004d088 <HAL_GPIO_Init+0x28>
1004d086:	e185      	b.n	1004d394 <HAL_GPIO_Init+0x334>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
1004d088:	683b      	ldr	r3, [r7, #0]
1004d08a:	685b      	ldr	r3, [r3, #4]
1004d08c:	2203      	movs	r2, #3
1004d08e:	4013      	ands	r3, r2
1004d090:	2b01      	cmp	r3, #1
1004d092:	d005      	beq.n	1004d0a0 <HAL_GPIO_Init+0x40>
1004d094:	683b      	ldr	r3, [r7, #0]
1004d096:	685b      	ldr	r3, [r3, #4]
1004d098:	2203      	movs	r2, #3
1004d09a:	4013      	ands	r3, r2
1004d09c:	2b02      	cmp	r3, #2
1004d09e:	d130      	bne.n	1004d102 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
1004d0a0:	687b      	ldr	r3, [r7, #4]
1004d0a2:	689b      	ldr	r3, [r3, #8]
1004d0a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
1004d0a6:	697b      	ldr	r3, [r7, #20]
1004d0a8:	005b      	lsls	r3, r3, #1
1004d0aa:	2203      	movs	r2, #3
1004d0ac:	409a      	lsls	r2, r3
1004d0ae:	0013      	movs	r3, r2
1004d0b0:	43da      	mvns	r2, r3
1004d0b2:	693b      	ldr	r3, [r7, #16]
1004d0b4:	4013      	ands	r3, r2
1004d0b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
1004d0b8:	683b      	ldr	r3, [r7, #0]
1004d0ba:	68da      	ldr	r2, [r3, #12]
1004d0bc:	697b      	ldr	r3, [r7, #20]
1004d0be:	005b      	lsls	r3, r3, #1
1004d0c0:	409a      	lsls	r2, r3
1004d0c2:	0013      	movs	r3, r2
1004d0c4:	693a      	ldr	r2, [r7, #16]
1004d0c6:	4313      	orrs	r3, r2
1004d0c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
1004d0ca:	687b      	ldr	r3, [r7, #4]
1004d0cc:	693a      	ldr	r2, [r7, #16]
1004d0ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
1004d0d0:	687b      	ldr	r3, [r7, #4]
1004d0d2:	685b      	ldr	r3, [r3, #4]
1004d0d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
1004d0d6:	2201      	movs	r2, #1
1004d0d8:	697b      	ldr	r3, [r7, #20]
1004d0da:	409a      	lsls	r2, r3
1004d0dc:	0013      	movs	r3, r2
1004d0de:	43da      	mvns	r2, r3
1004d0e0:	693b      	ldr	r3, [r7, #16]
1004d0e2:	4013      	ands	r3, r2
1004d0e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
1004d0e6:	683b      	ldr	r3, [r7, #0]
1004d0e8:	685b      	ldr	r3, [r3, #4]
1004d0ea:	091b      	lsrs	r3, r3, #4
1004d0ec:	2201      	movs	r2, #1
1004d0ee:	401a      	ands	r2, r3
1004d0f0:	697b      	ldr	r3, [r7, #20]
1004d0f2:	409a      	lsls	r2, r3
1004d0f4:	0013      	movs	r3, r2
1004d0f6:	693a      	ldr	r2, [r7, #16]
1004d0f8:	4313      	orrs	r3, r2
1004d0fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
1004d0fc:	687b      	ldr	r3, [r7, #4]
1004d0fe:	693a      	ldr	r2, [r7, #16]
1004d100:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
1004d102:	683b      	ldr	r3, [r7, #0]
1004d104:	685b      	ldr	r3, [r3, #4]
1004d106:	2203      	movs	r2, #3
1004d108:	4013      	ands	r3, r2
1004d10a:	2b03      	cmp	r3, #3
1004d10c:	d017      	beq.n	1004d13e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
1004d10e:	687b      	ldr	r3, [r7, #4]
1004d110:	68db      	ldr	r3, [r3, #12]
1004d112:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
1004d114:	697b      	ldr	r3, [r7, #20]
1004d116:	005b      	lsls	r3, r3, #1
1004d118:	2203      	movs	r2, #3
1004d11a:	409a      	lsls	r2, r3
1004d11c:	0013      	movs	r3, r2
1004d11e:	43da      	mvns	r2, r3
1004d120:	693b      	ldr	r3, [r7, #16]
1004d122:	4013      	ands	r3, r2
1004d124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
1004d126:	683b      	ldr	r3, [r7, #0]
1004d128:	689a      	ldr	r2, [r3, #8]
1004d12a:	697b      	ldr	r3, [r7, #20]
1004d12c:	005b      	lsls	r3, r3, #1
1004d12e:	409a      	lsls	r2, r3
1004d130:	0013      	movs	r3, r2
1004d132:	693a      	ldr	r2, [r7, #16]
1004d134:	4313      	orrs	r3, r2
1004d136:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
1004d138:	687b      	ldr	r3, [r7, #4]
1004d13a:	693a      	ldr	r2, [r7, #16]
1004d13c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
1004d13e:	683b      	ldr	r3, [r7, #0]
1004d140:	685b      	ldr	r3, [r3, #4]
1004d142:	2203      	movs	r2, #3
1004d144:	4013      	ands	r3, r2
1004d146:	2b02      	cmp	r3, #2
1004d148:	d123      	bne.n	1004d192 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
1004d14a:	697b      	ldr	r3, [r7, #20]
1004d14c:	08da      	lsrs	r2, r3, #3
1004d14e:	687b      	ldr	r3, [r7, #4]
1004d150:	3208      	adds	r2, #8
1004d152:	0092      	lsls	r2, r2, #2
1004d154:	58d3      	ldr	r3, [r2, r3]
1004d156:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
1004d158:	697b      	ldr	r3, [r7, #20]
1004d15a:	2207      	movs	r2, #7
1004d15c:	4013      	ands	r3, r2
1004d15e:	009b      	lsls	r3, r3, #2
1004d160:	220f      	movs	r2, #15
1004d162:	409a      	lsls	r2, r3
1004d164:	0013      	movs	r3, r2
1004d166:	43da      	mvns	r2, r3
1004d168:	693b      	ldr	r3, [r7, #16]
1004d16a:	4013      	ands	r3, r2
1004d16c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
1004d16e:	683b      	ldr	r3, [r7, #0]
1004d170:	691a      	ldr	r2, [r3, #16]
1004d172:	697b      	ldr	r3, [r7, #20]
1004d174:	2107      	movs	r1, #7
1004d176:	400b      	ands	r3, r1
1004d178:	009b      	lsls	r3, r3, #2
1004d17a:	409a      	lsls	r2, r3
1004d17c:	0013      	movs	r3, r2
1004d17e:	693a      	ldr	r2, [r7, #16]
1004d180:	4313      	orrs	r3, r2
1004d182:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
1004d184:	697b      	ldr	r3, [r7, #20]
1004d186:	08da      	lsrs	r2, r3, #3
1004d188:	687b      	ldr	r3, [r7, #4]
1004d18a:	3208      	adds	r2, #8
1004d18c:	0092      	lsls	r2, r2, #2
1004d18e:	6939      	ldr	r1, [r7, #16]
1004d190:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
1004d192:	687b      	ldr	r3, [r7, #4]
1004d194:	681b      	ldr	r3, [r3, #0]
1004d196:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
1004d198:	697b      	ldr	r3, [r7, #20]
1004d19a:	005b      	lsls	r3, r3, #1
1004d19c:	2203      	movs	r2, #3
1004d19e:	409a      	lsls	r2, r3
1004d1a0:	0013      	movs	r3, r2
1004d1a2:	43da      	mvns	r2, r3
1004d1a4:	693b      	ldr	r3, [r7, #16]
1004d1a6:	4013      	ands	r3, r2
1004d1a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
1004d1aa:	683b      	ldr	r3, [r7, #0]
1004d1ac:	685b      	ldr	r3, [r3, #4]
1004d1ae:	2203      	movs	r2, #3
1004d1b0:	401a      	ands	r2, r3
1004d1b2:	697b      	ldr	r3, [r7, #20]
1004d1b4:	005b      	lsls	r3, r3, #1
1004d1b6:	409a      	lsls	r2, r3
1004d1b8:	0013      	movs	r3, r2
1004d1ba:	693a      	ldr	r2, [r7, #16]
1004d1bc:	4313      	orrs	r3, r2
1004d1be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
1004d1c0:	687b      	ldr	r3, [r7, #4]
1004d1c2:	693a      	ldr	r2, [r7, #16]
1004d1c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
1004d1c6:	683b      	ldr	r3, [r7, #0]
1004d1c8:	685a      	ldr	r2, [r3, #4]
1004d1ca:	23c0      	movs	r3, #192	@ 0xc0
1004d1cc:	029b      	lsls	r3, r3, #10
1004d1ce:	4013      	ands	r3, r2
1004d1d0:	d100      	bne.n	1004d1d4 <HAL_GPIO_Init+0x174>
1004d1d2:	e0df      	b.n	1004d394 <HAL_GPIO_Init+0x334>
      {

        /* Edge/Level line configuration */
        if ((GPIO_Init->Mode & DETECTION_TYPE) != 0x00u)
1004d1d4:	683b      	ldr	r3, [r7, #0]
1004d1d6:	685a      	ldr	r2, [r3, #4]
1004d1d8:	2380      	movs	r3, #128	@ 0x80
1004d1da:	02db      	lsls	r3, r3, #11
1004d1dc:	4013      	ands	r3, r2
1004d1de:	d031      	beq.n	1004d244 <HAL_GPIO_Init+0x1e4>
        {
          temp = SYSCFG->IO_DTR;
1004d1e0:	2380      	movs	r3, #128	@ 0x80
1004d1e2:	05db      	lsls	r3, r3, #23
1004d1e4:	68db      	ldr	r3, [r3, #12]
1004d1e6:	613b      	str	r3, [r7, #16]
          if (GPIOx == GPIOA)
1004d1e8:	687a      	ldr	r2, [r7, #4]
1004d1ea:	2390      	movs	r3, #144	@ 0x90
1004d1ec:	05db      	lsls	r3, r3, #23
1004d1ee:	429a      	cmp	r2, r3
1004d1f0:	d111      	bne.n	1004d216 <HAL_GPIO_Init+0x1b6>
          {
            temp &= ~(1 << position);
1004d1f2:	2201      	movs	r2, #1
1004d1f4:	697b      	ldr	r3, [r7, #20]
1004d1f6:	409a      	lsls	r2, r3
1004d1f8:	0013      	movs	r3, r2
1004d1fa:	43db      	mvns	r3, r3
1004d1fc:	001a      	movs	r2, r3
1004d1fe:	693b      	ldr	r3, [r7, #16]
1004d200:	4013      	ands	r3, r2
1004d202:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
1004d204:	2201      	movs	r2, #1
1004d206:	697b      	ldr	r3, [r7, #20]
1004d208:	409a      	lsls	r2, r3
1004d20a:	0013      	movs	r3, r2
1004d20c:	001a      	movs	r2, r3
1004d20e:	693b      	ldr	r3, [r7, #16]
1004d210:	4313      	orrs	r3, r2
1004d212:	613b      	str	r3, [r7, #16]
1004d214:	e012      	b.n	1004d23c <HAL_GPIO_Init+0x1dc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
1004d216:	2201      	movs	r2, #1
1004d218:	697b      	ldr	r3, [r7, #20]
1004d21a:	409a      	lsls	r2, r3
1004d21c:	0013      	movs	r3, r2
1004d21e:	041b      	lsls	r3, r3, #16
1004d220:	43db      	mvns	r3, r3
1004d222:	001a      	movs	r2, r3
1004d224:	693b      	ldr	r3, [r7, #16]
1004d226:	4013      	ands	r3, r2
1004d228:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
1004d22a:	2201      	movs	r2, #1
1004d22c:	697b      	ldr	r3, [r7, #20]
1004d22e:	409a      	lsls	r2, r3
1004d230:	0013      	movs	r3, r2
1004d232:	041b      	lsls	r3, r3, #16
1004d234:	001a      	movs	r2, r3
1004d236:	693b      	ldr	r3, [r7, #16]
1004d238:	4313      	orrs	r3, r2
1004d23a:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_DTR = temp;
1004d23c:	2380      	movs	r3, #128	@ 0x80
1004d23e:	05db      	lsls	r3, r3, #23
1004d240:	693a      	ldr	r2, [r7, #16]
1004d242:	60da      	str	r2, [r3, #12]
        }

		/* Edge selection configuration */
		if ((GPIO_Init->Mode & EDGE_SELECTION) != 0x00u)
1004d244:	683b      	ldr	r3, [r7, #0]
1004d246:	685a      	ldr	r2, [r3, #4]
1004d248:	2380      	movs	r3, #128	@ 0x80
1004d24a:	035b      	lsls	r3, r3, #13
1004d24c:	4013      	ands	r3, r2
1004d24e:	d031      	beq.n	1004d2b4 <HAL_GPIO_Init+0x254>
        {
          temp = SYSCFG->IO_IBER;
1004d250:	2380      	movs	r3, #128	@ 0x80
1004d252:	05db      	lsls	r3, r3, #23
1004d254:	691b      	ldr	r3, [r3, #16]
1004d256:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
1004d258:	687a      	ldr	r2, [r7, #4]
1004d25a:	2390      	movs	r3, #144	@ 0x90
1004d25c:	05db      	lsls	r3, r3, #23
1004d25e:	429a      	cmp	r2, r3
1004d260:	d111      	bne.n	1004d286 <HAL_GPIO_Init+0x226>
          {
            temp &= ~(1 << position);
1004d262:	2201      	movs	r2, #1
1004d264:	697b      	ldr	r3, [r7, #20]
1004d266:	409a      	lsls	r2, r3
1004d268:	0013      	movs	r3, r2
1004d26a:	43db      	mvns	r3, r3
1004d26c:	001a      	movs	r2, r3
1004d26e:	693b      	ldr	r3, [r7, #16]
1004d270:	4013      	ands	r3, r2
1004d272:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
1004d274:	2201      	movs	r2, #1
1004d276:	697b      	ldr	r3, [r7, #20]
1004d278:	409a      	lsls	r2, r3
1004d27a:	0013      	movs	r3, r2
1004d27c:	001a      	movs	r2, r3
1004d27e:	693b      	ldr	r3, [r7, #16]
1004d280:	4313      	orrs	r3, r2
1004d282:	613b      	str	r3, [r7, #16]
1004d284:	e012      	b.n	1004d2ac <HAL_GPIO_Init+0x24c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
1004d286:	2201      	movs	r2, #1
1004d288:	697b      	ldr	r3, [r7, #20]
1004d28a:	409a      	lsls	r2, r3
1004d28c:	0013      	movs	r3, r2
1004d28e:	041b      	lsls	r3, r3, #16
1004d290:	43db      	mvns	r3, r3
1004d292:	001a      	movs	r2, r3
1004d294:	693b      	ldr	r3, [r7, #16]
1004d296:	4013      	ands	r3, r2
1004d298:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
1004d29a:	2201      	movs	r2, #1
1004d29c:	697b      	ldr	r3, [r7, #20]
1004d29e:	409a      	lsls	r2, r3
1004d2a0:	0013      	movs	r3, r2
1004d2a2:	041b      	lsls	r3, r3, #16
1004d2a4:	001a      	movs	r2, r3
1004d2a6:	693b      	ldr	r3, [r7, #16]
1004d2a8:	4313      	orrs	r3, r2
1004d2aa:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IBER= temp;
1004d2ac:	2380      	movs	r3, #128	@ 0x80
1004d2ae:	05db      	lsls	r3, r3, #23
1004d2b0:	693a      	ldr	r2, [r7, #16]
1004d2b2:	611a      	str	r2, [r3, #16]
        }

        /* Trigger mode configuration */
		if ((GPIO_Init->Mode & TRIGGER_MODE) != 0x00u)
1004d2b4:	683b      	ldr	r3, [r7, #0]
1004d2b6:	685a      	ldr	r2, [r3, #4]
1004d2b8:	2380      	movs	r3, #128	@ 0x80
1004d2ba:	03db      	lsls	r3, r3, #15
1004d2bc:	4013      	ands	r3, r2
1004d2be:	d031      	beq.n	1004d324 <HAL_GPIO_Init+0x2c4>
        {
          temp = SYSCFG->IO_IEVR;
1004d2c0:	2380      	movs	r3, #128	@ 0x80
1004d2c2:	05db      	lsls	r3, r3, #23
1004d2c4:	695b      	ldr	r3, [r3, #20]
1004d2c6:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
1004d2c8:	687a      	ldr	r2, [r7, #4]
1004d2ca:	2390      	movs	r3, #144	@ 0x90
1004d2cc:	05db      	lsls	r3, r3, #23
1004d2ce:	429a      	cmp	r2, r3
1004d2d0:	d111      	bne.n	1004d2f6 <HAL_GPIO_Init+0x296>
          {
            temp &= ~(1 << position);
1004d2d2:	2201      	movs	r2, #1
1004d2d4:	697b      	ldr	r3, [r7, #20]
1004d2d6:	409a      	lsls	r2, r3
1004d2d8:	0013      	movs	r3, r2
1004d2da:	43db      	mvns	r3, r3
1004d2dc:	001a      	movs	r2, r3
1004d2de:	693b      	ldr	r3, [r7, #16]
1004d2e0:	4013      	ands	r3, r2
1004d2e2:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
1004d2e4:	2201      	movs	r2, #1
1004d2e6:	697b      	ldr	r3, [r7, #20]
1004d2e8:	409a      	lsls	r2, r3
1004d2ea:	0013      	movs	r3, r2
1004d2ec:	001a      	movs	r2, r3
1004d2ee:	693b      	ldr	r3, [r7, #16]
1004d2f0:	4313      	orrs	r3, r2
1004d2f2:	613b      	str	r3, [r7, #16]
1004d2f4:	e012      	b.n	1004d31c <HAL_GPIO_Init+0x2bc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
1004d2f6:	2201      	movs	r2, #1
1004d2f8:	697b      	ldr	r3, [r7, #20]
1004d2fa:	409a      	lsls	r2, r3
1004d2fc:	0013      	movs	r3, r2
1004d2fe:	041b      	lsls	r3, r3, #16
1004d300:	43db      	mvns	r3, r3
1004d302:	001a      	movs	r2, r3
1004d304:	693b      	ldr	r3, [r7, #16]
1004d306:	4013      	ands	r3, r2
1004d308:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
1004d30a:	2201      	movs	r2, #1
1004d30c:	697b      	ldr	r3, [r7, #20]
1004d30e:	409a      	lsls	r2, r3
1004d310:	0013      	movs	r3, r2
1004d312:	041b      	lsls	r3, r3, #16
1004d314:	001a      	movs	r2, r3
1004d316:	693b      	ldr	r3, [r7, #16]
1004d318:	4313      	orrs	r3, r2
1004d31a:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IEVR= temp;
1004d31c:	2380      	movs	r3, #128	@ 0x80
1004d31e:	05db      	lsls	r3, r3, #23
1004d320:	693a      	ldr	r2, [r7, #16]
1004d322:	615a      	str	r2, [r3, #20]
        }

        /* Enable the specified EXTI interrupt line */
        if ((GPIO_Init->Mode & EXTI_IT) == EXTI_IT)
1004d324:	683b      	ldr	r3, [r7, #0]
1004d326:	685a      	ldr	r2, [r3, #4]
1004d328:	2380      	movs	r3, #128	@ 0x80
1004d32a:	025b      	lsls	r3, r3, #9
1004d32c:	4013      	ands	r3, r2
1004d32e:	d031      	beq.n	1004d394 <HAL_GPIO_Init+0x334>
        {
          temp = SYSCFG->IO_IER;
1004d330:	2380      	movs	r3, #128	@ 0x80
1004d332:	05db      	lsls	r3, r3, #23
1004d334:	699b      	ldr	r3, [r3, #24]
1004d336:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
1004d338:	687a      	ldr	r2, [r7, #4]
1004d33a:	2390      	movs	r3, #144	@ 0x90
1004d33c:	05db      	lsls	r3, r3, #23
1004d33e:	429a      	cmp	r2, r3
1004d340:	d111      	bne.n	1004d366 <HAL_GPIO_Init+0x306>
          {
            temp &= ~(1 << position);
1004d342:	2201      	movs	r2, #1
1004d344:	697b      	ldr	r3, [r7, #20]
1004d346:	409a      	lsls	r2, r3
1004d348:	0013      	movs	r3, r2
1004d34a:	43db      	mvns	r3, r3
1004d34c:	001a      	movs	r2, r3
1004d34e:	693b      	ldr	r3, [r7, #16]
1004d350:	4013      	ands	r3, r2
1004d352:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
1004d354:	2201      	movs	r2, #1
1004d356:	697b      	ldr	r3, [r7, #20]
1004d358:	409a      	lsls	r2, r3
1004d35a:	0013      	movs	r3, r2
1004d35c:	001a      	movs	r2, r3
1004d35e:	693b      	ldr	r3, [r7, #16]
1004d360:	4313      	orrs	r3, r2
1004d362:	613b      	str	r3, [r7, #16]
1004d364:	e012      	b.n	1004d38c <HAL_GPIO_Init+0x32c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
1004d366:	2201      	movs	r2, #1
1004d368:	697b      	ldr	r3, [r7, #20]
1004d36a:	409a      	lsls	r2, r3
1004d36c:	0013      	movs	r3, r2
1004d36e:	041b      	lsls	r3, r3, #16
1004d370:	43db      	mvns	r3, r3
1004d372:	001a      	movs	r2, r3
1004d374:	693b      	ldr	r3, [r7, #16]
1004d376:	4013      	ands	r3, r2
1004d378:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
1004d37a:	2201      	movs	r2, #1
1004d37c:	697b      	ldr	r3, [r7, #20]
1004d37e:	409a      	lsls	r2, r3
1004d380:	0013      	movs	r3, r2
1004d382:	041b      	lsls	r3, r3, #16
1004d384:	001a      	movs	r2, r3
1004d386:	693b      	ldr	r3, [r7, #16]
1004d388:	4313      	orrs	r3, r2
1004d38a:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IER= temp;
1004d38c:	2380      	movs	r3, #128	@ 0x80
1004d38e:	05db      	lsls	r3, r3, #23
1004d390:	693a      	ldr	r2, [r7, #16]
1004d392:	619a      	str	r2, [r3, #24]
        }
      }
    }

    position++;
1004d394:	697b      	ldr	r3, [r7, #20]
1004d396:	3301      	adds	r3, #1
1004d398:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
1004d39a:	683b      	ldr	r3, [r7, #0]
1004d39c:	681a      	ldr	r2, [r3, #0]
1004d39e:	697b      	ldr	r3, [r7, #20]
1004d3a0:	40da      	lsrs	r2, r3
1004d3a2:	1e13      	subs	r3, r2, #0
1004d3a4:	d000      	beq.n	1004d3a8 <HAL_GPIO_Init+0x348>
1004d3a6:	e663      	b.n	1004d070 <HAL_GPIO_Init+0x10>
  }
}
1004d3a8:	46c0      	nop			@ (mov r8, r8)
1004d3aa:	46c0      	nop			@ (mov r8, r8)
1004d3ac:	46bd      	mov	sp, r7
1004d3ae:	b006      	add	sp, #24
1004d3b0:	bd80      	pop	{r7, pc}

1004d3b2 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
1004d3b2:	b580      	push	{r7, lr}
1004d3b4:	b084      	sub	sp, #16
1004d3b6:	af00      	add	r7, sp, #0
1004d3b8:	6078      	str	r0, [r7, #4]
1004d3ba:	000a      	movs	r2, r1
1004d3bc:	1cbb      	adds	r3, r7, #2
1004d3be:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
1004d3c0:	687b      	ldr	r3, [r7, #4]
1004d3c2:	691b      	ldr	r3, [r3, #16]
1004d3c4:	1cba      	adds	r2, r7, #2
1004d3c6:	8812      	ldrh	r2, [r2, #0]
1004d3c8:	4013      	ands	r3, r2
1004d3ca:	d004      	beq.n	1004d3d6 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
1004d3cc:	230f      	movs	r3, #15
1004d3ce:	18fb      	adds	r3, r7, r3
1004d3d0:	2201      	movs	r2, #1
1004d3d2:	701a      	strb	r2, [r3, #0]
1004d3d4:	e003      	b.n	1004d3de <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
1004d3d6:	230f      	movs	r3, #15
1004d3d8:	18fb      	adds	r3, r7, r3
1004d3da:	2200      	movs	r2, #0
1004d3dc:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
1004d3de:	230f      	movs	r3, #15
1004d3e0:	18fb      	adds	r3, r7, r3
1004d3e2:	781b      	ldrb	r3, [r3, #0]
}
1004d3e4:	0018      	movs	r0, r3
1004d3e6:	46bd      	mov	sp, r7
1004d3e8:	b004      	add	sp, #16
1004d3ea:	bd80      	pop	{r7, pc}

1004d3ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
1004d3ec:	b580      	push	{r7, lr}
1004d3ee:	b082      	sub	sp, #8
1004d3f0:	af00      	add	r7, sp, #0
1004d3f2:	6078      	str	r0, [r7, #4]
1004d3f4:	0008      	movs	r0, r1
1004d3f6:	0011      	movs	r1, r2
1004d3f8:	1cbb      	adds	r3, r7, #2
1004d3fa:	1c02      	adds	r2, r0, #0
1004d3fc:	801a      	strh	r2, [r3, #0]
1004d3fe:	1c7b      	adds	r3, r7, #1
1004d400:	1c0a      	adds	r2, r1, #0
1004d402:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
1004d404:	1c7b      	adds	r3, r7, #1
1004d406:	781b      	ldrb	r3, [r3, #0]
1004d408:	2b00      	cmp	r3, #0
1004d40a:	d004      	beq.n	1004d416 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
1004d40c:	1cbb      	adds	r3, r7, #2
1004d40e:	881a      	ldrh	r2, [r3, #0]
1004d410:	687b      	ldr	r3, [r7, #4]
1004d412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
1004d414:	e003      	b.n	1004d41e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
1004d416:	1cbb      	adds	r3, r7, #2
1004d418:	881a      	ldrh	r2, [r3, #0]
1004d41a:	687b      	ldr	r3, [r7, #4]
1004d41c:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004d41e:	46c0      	nop			@ (mov r8, r8)
1004d420:	46bd      	mov	sp, r7
1004d422:	b002      	add	sp, #8
1004d424:	bd80      	pop	{r7, pc}

1004d426 <HAL_GPIO_EXTI_IRQHandler>:
  * @param GPIOx where x can be (A..B) to select the GPIO peripheral
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
1004d426:	b580      	push	{r7, lr}
1004d428:	b082      	sub	sp, #8
1004d42a:	af00      	add	r7, sp, #0
1004d42c:	6078      	str	r0, [r7, #4]
1004d42e:	000a      	movs	r2, r1
1004d430:	1cbb      	adds	r3, r7, #2
1004d432:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIOx, GPIO_Pin) != 0x00u)
1004d434:	687a      	ldr	r2, [r7, #4]
1004d436:	2390      	movs	r3, #144	@ 0x90
1004d438:	05db      	lsls	r3, r3, #23
1004d43a:	429a      	cmp	r2, r3
1004d43c:	d109      	bne.n	1004d452 <HAL_GPIO_EXTI_IRQHandler+0x2c>
1004d43e:	2380      	movs	r3, #128	@ 0x80
1004d440:	05db      	lsls	r3, r3, #23
1004d442:	69db      	ldr	r3, [r3, #28]
1004d444:	1cba      	adds	r2, r7, #2
1004d446:	8812      	ldrh	r2, [r2, #0]
1004d448:	4013      	ands	r3, r2
1004d44a:	1e5a      	subs	r2, r3, #1
1004d44c:	4193      	sbcs	r3, r2
1004d44e:	b2db      	uxtb	r3, r3
1004d450:	e009      	b.n	1004d466 <HAL_GPIO_EXTI_IRQHandler+0x40>
1004d452:	2380      	movs	r3, #128	@ 0x80
1004d454:	05db      	lsls	r3, r3, #23
1004d456:	69db      	ldr	r3, [r3, #28]
1004d458:	1cba      	adds	r2, r7, #2
1004d45a:	8812      	ldrh	r2, [r2, #0]
1004d45c:	0412      	lsls	r2, r2, #16
1004d45e:	4013      	ands	r3, r2
1004d460:	1e5a      	subs	r2, r3, #1
1004d462:	4193      	sbcs	r3, r2
1004d464:	b2db      	uxtb	r3, r3
1004d466:	2b00      	cmp	r3, #0
1004d468:	d017      	beq.n	1004d49a <HAL_GPIO_EXTI_IRQHandler+0x74>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIOx, GPIO_Pin);
1004d46a:	687a      	ldr	r2, [r7, #4]
1004d46c:	2390      	movs	r3, #144	@ 0x90
1004d46e:	05db      	lsls	r3, r3, #23
1004d470:	429a      	cmp	r2, r3
1004d472:	d105      	bne.n	1004d480 <HAL_GPIO_EXTI_IRQHandler+0x5a>
1004d474:	2380      	movs	r3, #128	@ 0x80
1004d476:	05db      	lsls	r3, r3, #23
1004d478:	1cba      	adds	r2, r7, #2
1004d47a:	8812      	ldrh	r2, [r2, #0]
1004d47c:	61da      	str	r2, [r3, #28]
1004d47e:	e005      	b.n	1004d48c <HAL_GPIO_EXTI_IRQHandler+0x66>
1004d480:	1cbb      	adds	r3, r7, #2
1004d482:	881a      	ldrh	r2, [r3, #0]
1004d484:	2380      	movs	r3, #128	@ 0x80
1004d486:	05db      	lsls	r3, r3, #23
1004d488:	0412      	lsls	r2, r2, #16
1004d48a:	61da      	str	r2, [r3, #28]
    HAL_GPIO_EXTI_Callback(GPIOx, GPIO_Pin);
1004d48c:	1cbb      	adds	r3, r7, #2
1004d48e:	881a      	ldrh	r2, [r3, #0]
1004d490:	687b      	ldr	r3, [r7, #4]
1004d492:	0011      	movs	r1, r2
1004d494:	0018      	movs	r0, r3
1004d496:	f7f5 fcb6 	bl	10042e06 <HAL_GPIO_EXTI_Callback>
  }
}
1004d49a:	46c0      	nop			@ (mov r8, r8)
1004d49c:	46bd      	mov	sp, r7
1004d49e:	b002      	add	sp, #8
1004d4a0:	bd80      	pop	{r7, pc}

1004d4a2 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
1004d4a2:	b580      	push	{r7, lr}
1004d4a4:	b084      	sub	sp, #16
1004d4a6:	af00      	add	r7, sp, #0
1004d4a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
1004d4aa:	230f      	movs	r3, #15
1004d4ac:	18fb      	adds	r3, r7, r3
1004d4ae:	2200      	movs	r2, #0
1004d4b0:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB05)|| defined(STM32WB09)
  uint32_t tickstart;
#endif /* STM32WB05 || STM32WB09 */
  /* Check the PKA handle allocation */
  if (hpka != NULL)
1004d4b2:	687b      	ldr	r3, [r7, #4]
1004d4b4:	2b00      	cmp	r3, #0
1004d4b6:	d045      	beq.n	1004d544 <HAL_PKA_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
1004d4b8:	687b      	ldr	r3, [r7, #4]
1004d4ba:	791b      	ldrb	r3, [r3, #4]
1004d4bc:	b2db      	uxtb	r3, r3
1004d4be:	2b00      	cmp	r3, #0
1004d4c0:	d103      	bne.n	1004d4ca <HAL_PKA_Init+0x28>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
1004d4c2:	687b      	ldr	r3, [r7, #4]
1004d4c4:	0018      	movs	r0, r3
1004d4c6:	f7f5 fee5 	bl	10043294 <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }
#if defined (STM32WB05)|| defined(STM32WB09)
    /* Get current tick */
    tickstart = HAL_GetTick();
1004d4ca:	f7ff fb61 	bl	1004cb90 <HAL_GetTick>
1004d4ce:	0003      	movs	r3, r0
1004d4d0:	60bb      	str	r3, [r7, #8]
#endif /* STM32WB05 || STM32WB09 */
    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
1004d4d2:	687b      	ldr	r3, [r7, #4]
1004d4d4:	2202      	movs	r2, #2
1004d4d6:	711a      	strb	r2, [r3, #4]
    SET_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
    CLEAR_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
#endif /* STM32WB06 || STM32WB07 */
#if defined (STM32WB05)|| defined(STM32WB09)

    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
1004d4d8:	e011      	b.n	1004d4fe <HAL_PKA_Init+0x5c>
    {
      hpka->Instance->CR = PKA_CR_EN;
1004d4da:	687b      	ldr	r3, [r7, #4]
1004d4dc:	681b      	ldr	r3, [r3, #0]
1004d4de:	2201      	movs	r2, #1
1004d4e0:	601a      	str	r2, [r3, #0]

      /* Check the Timeout */
      if ((HAL_GetTick() - tickstart) > PKA_RAM_ERASE_TIMEOUT)
1004d4e2:	f7ff fb55 	bl	1004cb90 <HAL_GetTick>
1004d4e6:	0002      	movs	r2, r0
1004d4e8:	68bb      	ldr	r3, [r7, #8]
1004d4ea:	1ad2      	subs	r2, r2, r3
1004d4ec:	23fa      	movs	r3, #250	@ 0xfa
1004d4ee:	009b      	lsls	r3, r3, #2
1004d4f0:	429a      	cmp	r2, r3
1004d4f2:	d904      	bls.n	1004d4fe <HAL_PKA_Init+0x5c>
      {
        /* Set timeout status */
        err = HAL_TIMEOUT;
1004d4f4:	230f      	movs	r3, #15
1004d4f6:	18fb      	adds	r3, r7, r3
1004d4f8:	2203      	movs	r2, #3
1004d4fa:	701a      	strb	r2, [r3, #0]
        break;
1004d4fc:	e006      	b.n	1004d50c <HAL_PKA_Init+0x6a>
    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
1004d4fe:	687b      	ldr	r3, [r7, #4]
1004d500:	681b      	ldr	r3, [r3, #0]
1004d502:	681b      	ldr	r3, [r3, #0]
1004d504:	2201      	movs	r2, #1
1004d506:	4013      	ands	r3, r2
1004d508:	2b01      	cmp	r3, #1
1004d50a:	d1e6      	bne.n	1004d4da <HAL_PKA_Init+0x38>
      }
    }
    if (err == HAL_OK)
1004d50c:	230f      	movs	r3, #15
1004d50e:	18fb      	adds	r3, r7, r3
1004d510:	781b      	ldrb	r3, [r3, #0]
1004d512:	2b00      	cmp	r3, #0
1004d514:	d10f      	bne.n	1004d536 <HAL_PKA_Init+0x94>
    {
      /* Reset any pending flag */
      SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
1004d516:	687b      	ldr	r3, [r7, #4]
1004d518:	681b      	ldr	r3, [r3, #0]
1004d51a:	689a      	ldr	r2, [r3, #8]
1004d51c:	687b      	ldr	r3, [r7, #4]
1004d51e:	681b      	ldr	r3, [r3, #0]
1004d520:	21d0      	movs	r1, #208	@ 0xd0
1004d522:	0349      	lsls	r1, r1, #13
1004d524:	430a      	orrs	r2, r1
1004d526:	609a      	str	r2, [r3, #8]

      /* Initialize the error code */
      hpka->ErrorCode = HAL_PKA_ERROR_NONE;
1004d528:	687b      	ldr	r3, [r7, #4]
1004d52a:	2200      	movs	r2, #0
1004d52c:	609a      	str	r2, [r3, #8]

      /* Set the state to ready */
      hpka->State = HAL_PKA_STATE_READY;
1004d52e:	687b      	ldr	r3, [r7, #4]
1004d530:	2201      	movs	r2, #1
1004d532:	711a      	strb	r2, [r3, #4]
1004d534:	e00a      	b.n	1004d54c <HAL_PKA_Init+0xaa>
    }
    else
    {
      /* Set the error code to timeout error */
      hpka->ErrorCode = HAL_PKA_ERROR_TIMEOUT;
1004d536:	687b      	ldr	r3, [r7, #4]
1004d538:	2204      	movs	r2, #4
1004d53a:	609a      	str	r2, [r3, #8]

      /* Set the state to error */
      hpka->State = HAL_PKA_STATE_ERROR;
1004d53c:	687b      	ldr	r3, [r7, #4]
1004d53e:	2203      	movs	r2, #3
1004d540:	711a      	strb	r2, [r3, #4]
1004d542:	e003      	b.n	1004d54c <HAL_PKA_Init+0xaa>
#endif /* STM32WB06 || STM32WB07 */

  }
  else
  {
    err = HAL_ERROR;
1004d544:	230f      	movs	r3, #15
1004d546:	18fb      	adds	r3, r7, r3
1004d548:	2201      	movs	r2, #1
1004d54a:	701a      	strb	r2, [r3, #0]
  }

  return err;
1004d54c:	230f      	movs	r3, #15
1004d54e:	18fb      	adds	r3, r7, r3
1004d550:	781b      	ldrb	r3, [r3, #0]
}
1004d552:	0018      	movs	r0, r3
1004d554:	46bd      	mov	sp, r7
1004d556:	b004      	add	sp, #16
1004d558:	bd80      	pop	{r7, pc}
	...

1004d55c <HAL_PKA_IRQHandler>:
  * @brief  This function handles PKA event interrupt request.
  * @param  hpka PKA handle
  * @retval None
  */
void HAL_PKA_IRQHandler(PKA_HandleTypeDef *hpka)
{
1004d55c:	b580      	push	{r7, lr}
1004d55e:	b086      	sub	sp, #24
1004d560:	af00      	add	r7, sp, #0
1004d562:	6078      	str	r0, [r7, #4]
#if defined (STM32WB06) || defined(STM32WB07)
  uint32_t itsource = READ_REG(hpka->Instance->IEN);
  uint32_t flag  =    READ_REG(hpka->Instance->ISR);
#endif /* STM32WB06 || STM32WB07 */
#if defined (STM32WB05)|| defined(STM32WB09)
  uint32_t mode = PKA_GetMode(hpka);
1004d564:	687b      	ldr	r3, [r7, #4]
1004d566:	0018      	movs	r0, r3
1004d568:	f000 f86a 	bl	1004d640 <PKA_GetMode>
1004d56c:	0003      	movs	r3, r0
1004d56e:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hpka->Instance->CR);
1004d570:	687b      	ldr	r3, [r7, #4]
1004d572:	681b      	ldr	r3, [r3, #0]
1004d574:	681b      	ldr	r3, [r3, #0]
1004d576:	613b      	str	r3, [r7, #16]
  uint32_t flag  =   READ_REG(hpka->Instance->SR);
1004d578:	687b      	ldr	r3, [r7, #4]
1004d57a:	681b      	ldr	r3, [r3, #0]
1004d57c:	685b      	ldr	r3, [r3, #4]
1004d57e:	60fb      	str	r3, [r7, #12]
#endif /* STM32WB05 || STM32WB09 */

  /* Address error interrupt occurred */
  if (((itsource & PKA_IT_ADDRERR) == PKA_IT_ADDRERR) && ((flag & PKA_FLAG_ADDRERR) == PKA_FLAG_ADDRERR))
1004d580:	693a      	ldr	r2, [r7, #16]
1004d582:	2380      	movs	r3, #128	@ 0x80
1004d584:	035b      	lsls	r3, r3, #13
1004d586:	4013      	ands	r3, r2
1004d588:	d00f      	beq.n	1004d5aa <HAL_PKA_IRQHandler+0x4e>
1004d58a:	68fa      	ldr	r2, [r7, #12]
1004d58c:	2380      	movs	r3, #128	@ 0x80
1004d58e:	035b      	lsls	r3, r3, #13
1004d590:	4013      	ands	r3, r2
1004d592:	d00a      	beq.n	1004d5aa <HAL_PKA_IRQHandler+0x4e>
  {
    hpka->ErrorCode |= HAL_PKA_ERROR_ADDRERR;
1004d594:	687b      	ldr	r3, [r7, #4]
1004d596:	689b      	ldr	r3, [r3, #8]
1004d598:	2201      	movs	r2, #1
1004d59a:	431a      	orrs	r2, r3
1004d59c:	687b      	ldr	r3, [r7, #4]
1004d59e:	609a      	str	r2, [r3, #8]

    /* Clear ADDRERR flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_ADDRERR);
1004d5a0:	687b      	ldr	r3, [r7, #4]
1004d5a2:	681b      	ldr	r3, [r3, #0]
1004d5a4:	2280      	movs	r2, #128	@ 0x80
1004d5a6:	0352      	lsls	r2, r2, #13
1004d5a8:	609a      	str	r2, [r3, #8]
  }

  /* RAM access error interrupt occurred */
  if (((itsource & PKA_IT_RAMERR) == PKA_IT_RAMERR) && ((flag & PKA_FLAG_RAMERR) == PKA_FLAG_RAMERR))
1004d5aa:	693a      	ldr	r2, [r7, #16]
1004d5ac:	2380      	movs	r3, #128	@ 0x80
1004d5ae:	031b      	lsls	r3, r3, #12
1004d5b0:	4013      	ands	r3, r2
1004d5b2:	d00f      	beq.n	1004d5d4 <HAL_PKA_IRQHandler+0x78>
1004d5b4:	68fa      	ldr	r2, [r7, #12]
1004d5b6:	2380      	movs	r3, #128	@ 0x80
1004d5b8:	031b      	lsls	r3, r3, #12
1004d5ba:	4013      	ands	r3, r2
1004d5bc:	d00a      	beq.n	1004d5d4 <HAL_PKA_IRQHandler+0x78>
  {
    hpka->ErrorCode |= HAL_PKA_ERROR_RAMERR;
1004d5be:	687b      	ldr	r3, [r7, #4]
1004d5c0:	689b      	ldr	r3, [r3, #8]
1004d5c2:	2202      	movs	r2, #2
1004d5c4:	431a      	orrs	r2, r3
1004d5c6:	687b      	ldr	r3, [r7, #4]
1004d5c8:	609a      	str	r2, [r3, #8]

    /* Clear RAMERR flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_RAMERR);
1004d5ca:	687b      	ldr	r3, [r7, #4]
1004d5cc:	681b      	ldr	r3, [r3, #0]
1004d5ce:	2280      	movs	r2, #128	@ 0x80
1004d5d0:	0312      	lsls	r2, r2, #12
1004d5d2:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* STM32WB05 */
#if defined (STM32WB09)
  /* Check the operation success in case of ECDSA signature */
  if (mode == PKA_MODE_ECDSA_SIGNATURE)
1004d5d4:	697b      	ldr	r3, [r7, #20]
1004d5d6:	2b24      	cmp	r3, #36	@ 0x24
1004d5d8:	d10d      	bne.n	1004d5f6 <HAL_PKA_IRQHandler+0x9a>
  {
    /* If error output result is different from 0xD60D, ecdsa sign operation need to be repeated */
    if (hpka->Instance->RAM[PKA_ECDSA_SIGN_OUT_ERROR] != 0xD60DUL)
1004d5da:	687b      	ldr	r3, [r7, #4]
1004d5dc:	681a      	ldr	r2, [r3, #0]
1004d5de:	23f8      	movs	r3, #248	@ 0xf8
1004d5e0:	011b      	lsls	r3, r3, #4
1004d5e2:	58d3      	ldr	r3, [r2, r3]
1004d5e4:	4a15      	ldr	r2, [pc, #84]	@ (1004d63c <HAL_PKA_IRQHandler+0xe0>)
1004d5e6:	4293      	cmp	r3, r2
1004d5e8:	d005      	beq.n	1004d5f6 <HAL_PKA_IRQHandler+0x9a>
    {
      hpka->ErrorCode |= HAL_PKA_ERROR_OPERATION;
1004d5ea:	687b      	ldr	r3, [r7, #4]
1004d5ec:	689b      	ldr	r3, [r3, #8]
1004d5ee:	2208      	movs	r2, #8
1004d5f0:	431a      	orrs	r2, r3
1004d5f2:	687b      	ldr	r3, [r7, #4]
1004d5f4:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* STM32WB09 */

  /* Trigger the error callback if an error is present */
  if (hpka->ErrorCode != HAL_PKA_ERROR_NONE)
1004d5f6:	687b      	ldr	r3, [r7, #4]
1004d5f8:	689b      	ldr	r3, [r3, #8]
1004d5fa:	2b00      	cmp	r3, #0
1004d5fc:	d003      	beq.n	1004d606 <HAL_PKA_IRQHandler+0xaa>
  {
#if (USE_HAL_PKA_REGISTER_CALLBACKS == 1)
    hpka->ErrorCallback(hpka);
#else
    HAL_PKA_ErrorCallback(hpka);
1004d5fe:	687b      	ldr	r3, [r7, #4]
1004d600:	0018      	movs	r0, r3
1004d602:	f7fb f841 	bl	10048688 <HAL_PKA_ErrorCallback>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
  }

  /* End Of Operation interrupt occurred */
  if (((itsource & PKA_IT_PROCEND) == PKA_IT_PROCEND) && ((flag & PKA_FLAG_PROCEND) == PKA_FLAG_PROCEND))
1004d606:	693a      	ldr	r2, [r7, #16]
1004d608:	2380      	movs	r3, #128	@ 0x80
1004d60a:	029b      	lsls	r3, r3, #10
1004d60c:	4013      	ands	r3, r2
1004d60e:	d010      	beq.n	1004d632 <HAL_PKA_IRQHandler+0xd6>
1004d610:	68fa      	ldr	r2, [r7, #12]
1004d612:	2380      	movs	r3, #128	@ 0x80
1004d614:	029b      	lsls	r3, r3, #10
1004d616:	4013      	ands	r3, r2
1004d618:	d00b      	beq.n	1004d632 <HAL_PKA_IRQHandler+0xd6>
  {
    /* Clear PROCEND flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_PROCEND);
1004d61a:	687b      	ldr	r3, [r7, #4]
1004d61c:	681b      	ldr	r3, [r3, #0]
1004d61e:	2280      	movs	r2, #128	@ 0x80
1004d620:	0292      	lsls	r2, r2, #10
1004d622:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
1004d624:	687b      	ldr	r3, [r7, #4]
1004d626:	2201      	movs	r2, #1
1004d628:	711a      	strb	r2, [r3, #4]

#if (USE_HAL_PKA_REGISTER_CALLBACKS == 1)
    hpka->OperationCpltCallback(hpka);
#else
    HAL_PKA_OperationCpltCallback(hpka);
1004d62a:	687b      	ldr	r3, [r7, #4]
1004d62c:	0018      	movs	r0, r3
1004d62e:	f7fb f81f 	bl	10048670 <HAL_PKA_OperationCpltCallback>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
  }
}
1004d632:	46c0      	nop			@ (mov r8, r8)
1004d634:	46bd      	mov	sp, r7
1004d636:	b006      	add	sp, #24
1004d638:	bd80      	pop	{r7, pc}
1004d63a:	46c0      	nop			@ (mov r8, r8)
1004d63c:	0000d60d 	.word	0x0000d60d

1004d640 <PKA_GetMode>:
  * @brief  Get PKA operating mode.
  * @param  hpka PKA handle
  * @retval Return the current mode
  */
uint32_t PKA_GetMode(const PKA_HandleTypeDef *hpka)
{
1004d640:	b580      	push	{r7, lr}
1004d642:	b082      	sub	sp, #8
1004d644:	af00      	add	r7, sp, #0
1004d646:	6078      	str	r0, [r7, #4]
  /* return the shifted PKA_CR_MODE value */
  return (uint32_t)(READ_BIT(hpka->Instance->CR, PKA_CR_MODE) >> PKA_CR_MODE_Pos);
1004d648:	687b      	ldr	r3, [r7, #4]
1004d64a:	681b      	ldr	r3, [r3, #0]
1004d64c:	681b      	ldr	r3, [r3, #0]
1004d64e:	0a1b      	lsrs	r3, r3, #8
1004d650:	223f      	movs	r2, #63	@ 0x3f
1004d652:	4013      	ands	r3, r2
}
1004d654:	0018      	movs	r0, r3
1004d656:	46bd      	mov	sp, r7
1004d658:	b002      	add	sp, #8
1004d65a:	bd80      	pop	{r7, pc}

1004d65c <LL_PWR_EnableGPIORET>:
{
1004d65c:	b580      	push	{r7, lr}
1004d65e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_GPIORET);
1004d660:	4b04      	ldr	r3, [pc, #16]	@ (1004d674 <LL_PWR_EnableGPIORET+0x18>)
1004d662:	685a      	ldr	r2, [r3, #4]
1004d664:	4b03      	ldr	r3, [pc, #12]	@ (1004d674 <LL_PWR_EnableGPIORET+0x18>)
1004d666:	2180      	movs	r1, #128	@ 0x80
1004d668:	0049      	lsls	r1, r1, #1
1004d66a:	430a      	orrs	r2, r1
1004d66c:	605a      	str	r2, [r3, #4]
}
1004d66e:	46c0      	nop			@ (mov r8, r8)
1004d670:	46bd      	mov	sp, r7
1004d672:	bd80      	pop	{r7, pc}
1004d674:	48500000 	.word	0x48500000

1004d678 <LL_PWR_GetWakeupSource>:
{
1004d678:	b580      	push	{r7, lr}
1004d67a:	b082      	sub	sp, #8
1004d67c:	af00      	add	r7, sp, #0
  wakeup_source = READ_REG(PWR->SR1) & 0x0000FFFF;
1004d67e:	4b07      	ldr	r3, [pc, #28]	@ (1004d69c <LL_PWR_GetWakeupSource+0x24>)
1004d680:	691b      	ldr	r3, [r3, #16]
1004d682:	041b      	lsls	r3, r3, #16
1004d684:	0c1b      	lsrs	r3, r3, #16
1004d686:	607b      	str	r3, [r7, #4]
  return (uint32_t)(wakeup_source | (READ_REG(PWR->SR3) << 16));
1004d688:	4b04      	ldr	r3, [pc, #16]	@ (1004d69c <LL_PWR_GetWakeupSource+0x24>)
1004d68a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004d68c:	041a      	lsls	r2, r3, #16
1004d68e:	687b      	ldr	r3, [r7, #4]
1004d690:	4313      	orrs	r3, r2
}
1004d692:	0018      	movs	r0, r3
1004d694:	46bd      	mov	sp, r7
1004d696:	b002      	add	sp, #8
1004d698:	bd80      	pop	{r7, pc}
1004d69a:	46c0      	nop			@ (mov r8, r8)
1004d69c:	48500000 	.word	0x48500000

1004d6a0 <LL_PWR_ClearWakeupSource>:
{
1004d6a0:	b580      	push	{r7, lr}
1004d6a2:	b082      	sub	sp, #8
1004d6a4:	af00      	add	r7, sp, #0
1004d6a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(PWR->SR1, (source & 0x0000FFFF));
1004d6a8:	4b06      	ldr	r3, [pc, #24]	@ (1004d6c4 <LL_PWR_ClearWakeupSource+0x24>)
1004d6aa:	687a      	ldr	r2, [r7, #4]
1004d6ac:	0412      	lsls	r2, r2, #16
1004d6ae:	0c12      	lsrs	r2, r2, #16
1004d6b0:	611a      	str	r2, [r3, #16]
  WRITE_REG(PWR->SR3, (source >> 16));
1004d6b2:	4b04      	ldr	r3, [pc, #16]	@ (1004d6c4 <LL_PWR_ClearWakeupSource+0x24>)
1004d6b4:	687a      	ldr	r2, [r7, #4]
1004d6b6:	0c12      	lsrs	r2, r2, #16
1004d6b8:	639a      	str	r2, [r3, #56]	@ 0x38
}
1004d6ba:	46c0      	nop			@ (mov r8, r8)
1004d6bc:	46bd      	mov	sp, r7
1004d6be:	b002      	add	sp, #8
1004d6c0:	bd80      	pop	{r7, pc}
1004d6c2:	46c0      	nop			@ (mov r8, r8)
1004d6c4:	48500000 	.word	0x48500000

1004d6c8 <LL_RCC_HSI_IsReady>:
{
1004d6c8:	b580      	push	{r7, lr}
1004d6ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
1004d6cc:	4b07      	ldr	r3, [pc, #28]	@ (1004d6ec <LL_RCC_HSI_IsReady+0x24>)
1004d6ce:	681a      	ldr	r2, [r3, #0]
1004d6d0:	2380      	movs	r3, #128	@ 0x80
1004d6d2:	00db      	lsls	r3, r3, #3
1004d6d4:	401a      	ands	r2, r3
1004d6d6:	2380      	movs	r3, #128	@ 0x80
1004d6d8:	00db      	lsls	r3, r3, #3
1004d6da:	429a      	cmp	r2, r3
1004d6dc:	d101      	bne.n	1004d6e2 <LL_RCC_HSI_IsReady+0x1a>
1004d6de:	2301      	movs	r3, #1
1004d6e0:	e000      	b.n	1004d6e4 <LL_RCC_HSI_IsReady+0x1c>
1004d6e2:	2300      	movs	r3, #0
}
1004d6e4:	0018      	movs	r0, r3
1004d6e6:	46bd      	mov	sp, r7
1004d6e8:	bd80      	pop	{r7, pc}
1004d6ea:	46c0      	nop			@ (mov r8, r8)
1004d6ec:	48400000 	.word	0x48400000

1004d6f0 <LL_RCC_DIRECT_HSE_Disable>:
{
1004d6f0:	b580      	push	{r7, lr}
1004d6f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004d6f4:	4b09      	ldr	r3, [pc, #36]	@ (1004d71c <LL_RCC_DIRECT_HSE_Disable+0x2c>)
1004d6f6:	689a      	ldr	r2, [r3, #8]
1004d6f8:	4b08      	ldr	r3, [pc, #32]	@ (1004d71c <LL_RCC_DIRECT_HSE_Disable+0x2c>)
1004d6fa:	2104      	movs	r1, #4
1004d6fc:	438a      	bics	r2, r1
1004d6fe:	609a      	str	r2, [r3, #8]
  while (LL_RCC_HSI_IsReady() == 0);
1004d700:	46c0      	nop			@ (mov r8, r8)
1004d702:	f7ff ffe1 	bl	1004d6c8 <LL_RCC_HSI_IsReady>
1004d706:	1e03      	subs	r3, r0, #0
1004d708:	d0fb      	beq.n	1004d702 <LL_RCC_DIRECT_HSE_Disable+0x12>
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004d70a:	4b04      	ldr	r3, [pc, #16]	@ (1004d71c <LL_RCC_DIRECT_HSE_Disable+0x2c>)
1004d70c:	689a      	ldr	r2, [r3, #8]
1004d70e:	4b03      	ldr	r3, [pc, #12]	@ (1004d71c <LL_RCC_DIRECT_HSE_Disable+0x2c>)
1004d710:	2102      	movs	r1, #2
1004d712:	438a      	bics	r2, r1
1004d714:	609a      	str	r2, [r3, #8]
}
1004d716:	46c0      	nop			@ (mov r8, r8)
1004d718:	46bd      	mov	sp, r7
1004d71a:	bd80      	pop	{r7, pc}
1004d71c:	48400000 	.word	0x48400000

1004d720 <LL_RCC_DIRECT_HSE_IsEnabled>:
{
1004d720:	b580      	push	{r7, lr}
1004d722:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
1004d724:	4b05      	ldr	r3, [pc, #20]	@ (1004d73c <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
1004d726:	689b      	ldr	r3, [r3, #8]
1004d728:	2208      	movs	r2, #8
1004d72a:	4013      	ands	r3, r2
1004d72c:	2b08      	cmp	r3, #8
1004d72e:	d101      	bne.n	1004d734 <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
1004d730:	2301      	movs	r3, #1
1004d732:	e000      	b.n	1004d736 <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
1004d734:	2300      	movs	r3, #0
}
1004d736:	0018      	movs	r0, r3
1004d738:	46bd      	mov	sp, r7
1004d73a:	bd80      	pop	{r7, pc}
1004d73c:	48400000 	.word	0x48400000

1004d740 <LL_RCC_LSE_Disable>:
{
1004d740:	b580      	push	{r7, lr}
1004d742:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEON);
1004d744:	4b04      	ldr	r3, [pc, #16]	@ (1004d758 <LL_RCC_LSE_Disable+0x18>)
1004d746:	681a      	ldr	r2, [r3, #0]
1004d748:	4b03      	ldr	r3, [pc, #12]	@ (1004d758 <LL_RCC_LSE_Disable+0x18>)
1004d74a:	2110      	movs	r1, #16
1004d74c:	438a      	bics	r2, r1
1004d74e:	601a      	str	r2, [r3, #0]
}
1004d750:	46c0      	nop			@ (mov r8, r8)
1004d752:	46bd      	mov	sp, r7
1004d754:	bd80      	pop	{r7, pc}
1004d756:	46c0      	nop			@ (mov r8, r8)
1004d758:	48400000 	.word	0x48400000

1004d75c <LL_RCC_LSE_IsReady>:
{
1004d75c:	b580      	push	{r7, lr}
1004d75e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
1004d760:	4b05      	ldr	r3, [pc, #20]	@ (1004d778 <LL_RCC_LSE_IsReady+0x1c>)
1004d762:	681b      	ldr	r3, [r3, #0]
1004d764:	2220      	movs	r2, #32
1004d766:	4013      	ands	r3, r2
1004d768:	2b20      	cmp	r3, #32
1004d76a:	d101      	bne.n	1004d770 <LL_RCC_LSE_IsReady+0x14>
1004d76c:	2301      	movs	r3, #1
1004d76e:	e000      	b.n	1004d772 <LL_RCC_LSE_IsReady+0x16>
1004d770:	2300      	movs	r3, #0
}
1004d772:	0018      	movs	r0, r3
1004d774:	46bd      	mov	sp, r7
1004d776:	bd80      	pop	{r7, pc}
1004d778:	48400000 	.word	0x48400000

1004d77c <LL_RCC_LSI_Disable>:
{
1004d77c:	b580      	push	{r7, lr}
1004d77e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSION);
1004d780:	4b04      	ldr	r3, [pc, #16]	@ (1004d794 <LL_RCC_LSI_Disable+0x18>)
1004d782:	681a      	ldr	r2, [r3, #0]
1004d784:	4b03      	ldr	r3, [pc, #12]	@ (1004d794 <LL_RCC_LSI_Disable+0x18>)
1004d786:	2104      	movs	r1, #4
1004d788:	438a      	bics	r2, r1
1004d78a:	601a      	str	r2, [r3, #0]
}
1004d78c:	46c0      	nop			@ (mov r8, r8)
1004d78e:	46bd      	mov	sp, r7
1004d790:	bd80      	pop	{r7, pc}
1004d792:	46c0      	nop			@ (mov r8, r8)
1004d794:	48400000 	.word	0x48400000

1004d798 <LL_RCC_LSI_IsReady>:
{
1004d798:	b580      	push	{r7, lr}
1004d79a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
1004d79c:	4b05      	ldr	r3, [pc, #20]	@ (1004d7b4 <LL_RCC_LSI_IsReady+0x1c>)
1004d79e:	681b      	ldr	r3, [r3, #0]
1004d7a0:	2208      	movs	r2, #8
1004d7a2:	4013      	ands	r3, r2
1004d7a4:	2b08      	cmp	r3, #8
1004d7a6:	d101      	bne.n	1004d7ac <LL_RCC_LSI_IsReady+0x14>
1004d7a8:	2301      	movs	r3, #1
1004d7aa:	e000      	b.n	1004d7ae <LL_RCC_LSI_IsReady+0x16>
1004d7ac:	2300      	movs	r3, #0
}
1004d7ae:	0018      	movs	r0, r3
1004d7b0:	46bd      	mov	sp, r7
1004d7b2:	bd80      	pop	{r7, pc}
1004d7b4:	48400000 	.word	0x48400000

1004d7b8 <LL_APB2_GRP1_EnableClock>:
{
1004d7b8:	b580      	push	{r7, lr}
1004d7ba:	b084      	sub	sp, #16
1004d7bc:	af00      	add	r7, sp, #0
1004d7be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
1004d7c0:	4b07      	ldr	r3, [pc, #28]	@ (1004d7e0 <LL_APB2_GRP1_EnableClock+0x28>)
1004d7c2:	6e19      	ldr	r1, [r3, #96]	@ 0x60
1004d7c4:	4b06      	ldr	r3, [pc, #24]	@ (1004d7e0 <LL_APB2_GRP1_EnableClock+0x28>)
1004d7c6:	687a      	ldr	r2, [r7, #4]
1004d7c8:	430a      	orrs	r2, r1
1004d7ca:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
1004d7cc:	4b04      	ldr	r3, [pc, #16]	@ (1004d7e0 <LL_APB2_GRP1_EnableClock+0x28>)
1004d7ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004d7d0:	687a      	ldr	r2, [r7, #4]
1004d7d2:	4013      	ands	r3, r2
1004d7d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004d7d6:	68fb      	ldr	r3, [r7, #12]
}
1004d7d8:	46c0      	nop			@ (mov r8, r8)
1004d7da:	46bd      	mov	sp, r7
1004d7dc:	b004      	add	sp, #16
1004d7de:	bd80      	pop	{r7, pc}
1004d7e0:	48400000 	.word	0x48400000

1004d7e4 <LL_APB2_GRP1_IsEnabledClock>:
{
1004d7e4:	b580      	push	{r7, lr}
1004d7e6:	b082      	sub	sp, #8
1004d7e8:	af00      	add	r7, sp, #0
1004d7ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
1004d7ec:	4b06      	ldr	r3, [pc, #24]	@ (1004d808 <LL_APB2_GRP1_IsEnabledClock+0x24>)
1004d7ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004d7f0:	687a      	ldr	r2, [r7, #4]
1004d7f2:	4013      	ands	r3, r2
1004d7f4:	687a      	ldr	r2, [r7, #4]
1004d7f6:	429a      	cmp	r2, r3
1004d7f8:	d101      	bne.n	1004d7fe <LL_APB2_GRP1_IsEnabledClock+0x1a>
1004d7fa:	2301      	movs	r3, #1
1004d7fc:	e000      	b.n	1004d800 <LL_APB2_GRP1_IsEnabledClock+0x1c>
1004d7fe:	2300      	movs	r3, #0
}
1004d800:	0018      	movs	r0, r3
1004d802:	46bd      	mov	sp, r7
1004d804:	b002      	add	sp, #8
1004d806:	bd80      	pop	{r7, pc}
1004d808:	48400000 	.word	0x48400000

1004d80c <LL_APB2_GRP1_DisableClock>:
{
1004d80c:	b580      	push	{r7, lr}
1004d80e:	b082      	sub	sp, #8
1004d810:	af00      	add	r7, sp, #0
1004d812:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
1004d814:	4b05      	ldr	r3, [pc, #20]	@ (1004d82c <LL_APB2_GRP1_DisableClock+0x20>)
1004d816:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
1004d818:	687b      	ldr	r3, [r7, #4]
1004d81a:	43d9      	mvns	r1, r3
1004d81c:	4b03      	ldr	r3, [pc, #12]	@ (1004d82c <LL_APB2_GRP1_DisableClock+0x20>)
1004d81e:	400a      	ands	r2, r1
1004d820:	661a      	str	r2, [r3, #96]	@ 0x60
}
1004d822:	46c0      	nop			@ (mov r8, r8)
1004d824:	46bd      	mov	sp, r7
1004d826:	b002      	add	sp, #8
1004d828:	bd80      	pop	{r7, pc}
1004d82a:	46c0      	nop			@ (mov r8, r8)
1004d82c:	48400000 	.word	0x48400000

1004d830 <HAL_PWR_EnableWakeUpPin>:
  *        @arg @ref PWR_WUP_FALLEDG
  *
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPin, uint32_t WakeUpPolarity)
{
1004d830:	b580      	push	{r7, lr}
1004d832:	b082      	sub	sp, #8
1004d834:	af00      	add	r7, sp, #0
1004d836:	6078      	str	r0, [r7, #4]
1004d838:	6039      	str	r1, [r7, #0]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPin));
  assert_param(IS_PWR_WAKEUP_PIN_POLARITY(WakeUpPolarity));

  /* Specifies the wake up line polarity for the event detection (rising or falling edge) */
  if (WakeUpPolarity == PWR_WUP_FALLEDG)
1004d83a:	683b      	ldr	r3, [r7, #0]
1004d83c:	2b01      	cmp	r3, #1
1004d83e:	d10f      	bne.n	1004d860 <HAL_PWR_EnableWakeUpPin+0x30>
  {
    SET_BIT(PWR->CR4, (WakeUpPin & 0x0000FFFF));
1004d840:	4b19      	ldr	r3, [pc, #100]	@ (1004d8a8 <HAL_PWR_EnableWakeUpPin+0x78>)
1004d842:	68d9      	ldr	r1, [r3, #12]
1004d844:	687b      	ldr	r3, [r7, #4]
1004d846:	041b      	lsls	r3, r3, #16
1004d848:	0c1a      	lsrs	r2, r3, #16
1004d84a:	4b17      	ldr	r3, [pc, #92]	@ (1004d8a8 <HAL_PWR_EnableWakeUpPin+0x78>)
1004d84c:	430a      	orrs	r2, r1
1004d84e:	60da      	str	r2, [r3, #12]
    SET_BIT(PWR->CR7, (WakeUpPin >> 16));
1004d850:	4b15      	ldr	r3, [pc, #84]	@ (1004d8a8 <HAL_PWR_EnableWakeUpPin+0x78>)
1004d852:	6b59      	ldr	r1, [r3, #52]	@ 0x34
1004d854:	687b      	ldr	r3, [r7, #4]
1004d856:	0c1a      	lsrs	r2, r3, #16
1004d858:	4b13      	ldr	r3, [pc, #76]	@ (1004d8a8 <HAL_PWR_EnableWakeUpPin+0x78>)
1004d85a:	430a      	orrs	r2, r1
1004d85c:	635a      	str	r2, [r3, #52]	@ 0x34
1004d85e:	e010      	b.n	1004d882 <HAL_PWR_EnableWakeUpPin+0x52>
  }
  else
  {
    CLEAR_BIT(PWR->CR4, (WakeUpPin & 0x0000FFFF));
1004d860:	4b11      	ldr	r3, [pc, #68]	@ (1004d8a8 <HAL_PWR_EnableWakeUpPin+0x78>)
1004d862:	68da      	ldr	r2, [r3, #12]
1004d864:	687b      	ldr	r3, [r7, #4]
1004d866:	041b      	lsls	r3, r3, #16
1004d868:	0c1b      	lsrs	r3, r3, #16
1004d86a:	43d9      	mvns	r1, r3
1004d86c:	4b0e      	ldr	r3, [pc, #56]	@ (1004d8a8 <HAL_PWR_EnableWakeUpPin+0x78>)
1004d86e:	400a      	ands	r2, r1
1004d870:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(PWR->CR7, (WakeUpPin >> 16));
1004d872:	4b0d      	ldr	r3, [pc, #52]	@ (1004d8a8 <HAL_PWR_EnableWakeUpPin+0x78>)
1004d874:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1004d876:	687b      	ldr	r3, [r7, #4]
1004d878:	0c1b      	lsrs	r3, r3, #16
1004d87a:	43d9      	mvns	r1, r3
1004d87c:	4b0a      	ldr	r3, [pc, #40]	@ (1004d8a8 <HAL_PWR_EnableWakeUpPin+0x78>)
1004d87e:	400a      	ands	r2, r1
1004d880:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  /* Enable wake-up line */
  SET_BIT(PWR->CR3, (WakeUpPin & 0x0000FFFF));
1004d882:	4b09      	ldr	r3, [pc, #36]	@ (1004d8a8 <HAL_PWR_EnableWakeUpPin+0x78>)
1004d884:	6899      	ldr	r1, [r3, #8]
1004d886:	687b      	ldr	r3, [r7, #4]
1004d888:	041b      	lsls	r3, r3, #16
1004d88a:	0c1a      	lsrs	r2, r3, #16
1004d88c:	4b06      	ldr	r3, [pc, #24]	@ (1004d8a8 <HAL_PWR_EnableWakeUpPin+0x78>)
1004d88e:	430a      	orrs	r2, r1
1004d890:	609a      	str	r2, [r3, #8]
  SET_BIT(PWR->CR6, (WakeUpPin >> 16));
1004d892:	4b05      	ldr	r3, [pc, #20]	@ (1004d8a8 <HAL_PWR_EnableWakeUpPin+0x78>)
1004d894:	6b19      	ldr	r1, [r3, #48]	@ 0x30
1004d896:	687b      	ldr	r3, [r7, #4]
1004d898:	0c1a      	lsrs	r2, r3, #16
1004d89a:	4b03      	ldr	r3, [pc, #12]	@ (1004d8a8 <HAL_PWR_EnableWakeUpPin+0x78>)
1004d89c:	430a      	orrs	r2, r1
1004d89e:	631a      	str	r2, [r3, #48]	@ 0x30

}
1004d8a0:	46c0      	nop			@ (mov r8, r8)
1004d8a2:	46bd      	mov	sp, r7
1004d8a4:	b002      	add	sp, #8
1004d8a6:	bd80      	pop	{r7, pc}
1004d8a8:	48500000 	.word	0x48500000

1004d8ac <HAL_PWR_GetClearWakeupSource>:
  * @brief  Get and Clear Wake-up source.
  * @retval WakeUpPin : This parameter can be a combination of
  *                     @ref PWREx_WakeUp_Pins define group
  */
uint32_t HAL_PWR_GetClearWakeupSource(void)
{
1004d8ac:	b580      	push	{r7, lr}
1004d8ae:	b082      	sub	sp, #8
1004d8b0:	af00      	add	r7, sp, #0
  uint32_t wakeuppin;

  /* Get all wake-up pins */
  wakeuppin = LL_PWR_GetWakeupSource();
1004d8b2:	f7ff fee1 	bl	1004d678 <LL_PWR_GetWakeupSource>
1004d8b6:	0003      	movs	r3, r0
1004d8b8:	607b      	str	r3, [r7, #4]

  /* Clear all the wake-up pin flags */
  LL_PWR_ClearWakeupSource(wakeuppin);
1004d8ba:	687b      	ldr	r3, [r7, #4]
1004d8bc:	0018      	movs	r0, r3
1004d8be:	f7ff feef 	bl	1004d6a0 <LL_PWR_ClearWakeupSource>

  return wakeuppin;
1004d8c2:	687b      	ldr	r3, [r7, #4]
}
1004d8c4:	0018      	movs	r0, r3
1004d8c6:	46bd      	mov	sp, r7
1004d8c8:	b002      	add	sp, #8
1004d8ca:	bd80      	pop	{r7, pc}

1004d8cc <HAL_PWR_EnterSLEEPMode>:
  *         as NVIC and SysTick can run and wake up the CPU when an interrupt
  *         or an event occurs.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode(void)
{
1004d8cc:	b580      	push	{r7, lr}
1004d8ce:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
1004d8d0:	4b04      	ldr	r3, [pc, #16]	@ (1004d8e4 <HAL_PWR_EnterSLEEPMode+0x18>)
1004d8d2:	691a      	ldr	r2, [r3, #16]
1004d8d4:	4b03      	ldr	r3, [pc, #12]	@ (1004d8e4 <HAL_PWR_EnterSLEEPMode+0x18>)
1004d8d6:	2104      	movs	r1, #4
1004d8d8:	438a      	bics	r2, r1
1004d8da:	611a      	str	r2, [r3, #16]

  /* Wait For Interrupt Request */
  __WFI();
1004d8dc:	bf30      	wfi

}
1004d8de:	46c0      	nop			@ (mov r8, r8)
1004d8e0:	46bd      	mov	sp, r7
1004d8e2:	bd80      	pop	{r7, pc}
1004d8e4:	e000ed00 	.word	0xe000ed00

1004d8e8 <HAL_PWR_ConfigDEEPSTOP>:
  * @param  sConfigDEEPSTOP : Pointer to a @ref PWR_DEEPSTOPTypeDef structure that
  *                           contains the DEEPSTOP configuration information.
  * @retval None.
  */
HAL_StatusTypeDef HAL_PWR_ConfigDEEPSTOP(PWR_DEEPSTOPTypeDef *sConfigDEEPSTOP)
{
1004d8e8:	b580      	push	{r7, lr}
1004d8ea:	b084      	sub	sp, #16
1004d8ec:	af00      	add	r7, sp, #0
1004d8ee:	6078      	str	r0, [r7, #4]
  uint8_t radio_disabled = FALSE;
1004d8f0:	230f      	movs	r3, #15
1004d8f2:	18fb      	adds	r3, r7, r3
1004d8f4:	2200      	movs	r2, #0
1004d8f6:	701a      	strb	r2, [r3, #0]

  /* Disable the low speed clock if requested */
  if (sConfigDEEPSTOP->deepStopMode == PWR_DEEPSTOP_WITH_SLOW_CLOCK_OFF)
1004d8f8:	687b      	ldr	r3, [r7, #4]
1004d8fa:	681b      	ldr	r3, [r3, #0]
1004d8fc:	2b00      	cmp	r3, #0
1004d8fe:	d103      	bne.n	1004d908 <HAL_PWR_ConfigDEEPSTOP+0x20>
  {
    LL_RCC_LSE_Disable();
1004d900:	f7ff ff1e 	bl	1004d740 <LL_RCC_LSE_Disable>
    LL_RCC_LSI_Disable();
1004d904:	f7ff ff3a 	bl	1004d77c <LL_RCC_LSI_Disable>
  }

  /* If the radio IP is not used at all by the SoC (or not yet started), the
    following steps need to be done after any reset to allow DEEPSTOP mode */
  if (!LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
1004d908:	2001      	movs	r0, #1
1004d90a:	f7ff ff6b 	bl	1004d7e4 <LL_APB2_GRP1_IsEnabledClock>
1004d90e:	1e03      	subs	r3, r0, #0
1004d910:	d106      	bne.n	1004d920 <HAL_PWR_ConfigDEEPSTOP+0x38>
  {
    radio_disabled = TRUE;
1004d912:	230f      	movs	r3, #15
1004d914:	18fb      	adds	r3, r7, r3
1004d916:	2201      	movs	r2, #1
1004d918:	701a      	strb	r2, [r3, #0]
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_MRBLE);
1004d91a:	2001      	movs	r0, #1
1004d91c:	f7ff ff4c 	bl	1004d7b8 <LL_APB2_GRP1_EnableClock>
  }
  if ((READ_BIT(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN) == 0) &&
1004d920:	4b1a      	ldr	r3, [pc, #104]	@ (1004d98c <HAL_PWR_ConfigDEEPSTOP+0xa4>)
1004d922:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004d924:	2380      	movs	r3, #128	@ 0x80
1004d926:	059b      	lsls	r3, r3, #22
1004d928:	4013      	ands	r3, r2
1004d92a:	d10c      	bne.n	1004d946 <HAL_PWR_ConfigDEEPSTOP+0x5e>
      (READ_BIT(WAKEUP->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN) == 0))
1004d92c:	4b17      	ldr	r3, [pc, #92]	@ (1004d98c <HAL_PWR_ConfigDEEPSTOP+0xa4>)
1004d92e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
1004d930:	2380      	movs	r3, #128	@ 0x80
1004d932:	05db      	lsls	r3, r3, #23
1004d934:	4013      	ands	r3, r2
  if ((READ_BIT(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN) == 0) &&
1004d936:	d106      	bne.n	1004d946 <HAL_PWR_ConfigDEEPSTOP+0x5e>
  {
    SET_BIT(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_FORCE_SLEEPING);
1004d938:	4b14      	ldr	r3, [pc, #80]	@ (1004d98c <HAL_PWR_ConfigDEEPSTOP+0xa4>)
1004d93a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004d93c:	4b13      	ldr	r3, [pc, #76]	@ (1004d98c <HAL_PWR_ConfigDEEPSTOP+0xa4>)
1004d93e:	2180      	movs	r1, #128	@ 0x80
1004d940:	0609      	lsls	r1, r1, #24
1004d942:	430a      	orrs	r2, r1
1004d944:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (radio_disabled)
1004d946:	230f      	movs	r3, #15
1004d948:	18fb      	adds	r3, r7, r3
1004d94a:	781b      	ldrb	r3, [r3, #0]
1004d94c:	2b00      	cmp	r3, #0
1004d94e:	d002      	beq.n	1004d956 <HAL_PWR_ConfigDEEPSTOP+0x6e>
  {
    LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_MRBLE);
1004d950:	2001      	movs	r0, #1
1004d952:	f7ff ff5b 	bl	1004d80c <LL_APB2_GRP1_DisableClock>
  }

#if defined(PWR_CR2_GPIORET)
  /* Enable the GPIO retention in DEEPSTOP configuration */
  LL_PWR_EnableGPIORET();
1004d956:	f7ff fe81 	bl	1004d65c <LL_PWR_EnableGPIORET>
#endif /* PWR_CR2_GPIORET */

  /* Disable DIRECT HSE configuration to allow DEEPSTOP request */
  if (LL_RCC_DIRECT_HSE_IsEnabled())
1004d95a:	f7ff fee1 	bl	1004d720 <LL_RCC_DIRECT_HSE_IsEnabled>
1004d95e:	1e03      	subs	r3, r0, #0
1004d960:	d001      	beq.n	1004d966 <HAL_PWR_ConfigDEEPSTOP+0x7e>
  {
    LL_RCC_DIRECT_HSE_Disable();
1004d962:	f7ff fec5 	bl	1004d6f0 <LL_RCC_DIRECT_HSE_Disable>
  }

  /* Wait until  the low speed clock if OFF */
  if (sConfigDEEPSTOP->deepStopMode == PWR_DEEPSTOP_WITH_SLOW_CLOCK_OFF)
1004d966:	687b      	ldr	r3, [r7, #4]
1004d968:	681b      	ldr	r3, [r3, #0]
1004d96a:	2b00      	cmp	r3, #0
1004d96c:	d108      	bne.n	1004d980 <HAL_PWR_ConfigDEEPSTOP+0x98>
  {
    while (LL_RCC_LSE_IsReady() || LL_RCC_LSI_IsReady()) {}
1004d96e:	46c0      	nop			@ (mov r8, r8)
1004d970:	f7ff fef4 	bl	1004d75c <LL_RCC_LSE_IsReady>
1004d974:	1e03      	subs	r3, r0, #0
1004d976:	d1fb      	bne.n	1004d970 <HAL_PWR_ConfigDEEPSTOP+0x88>
1004d978:	f7ff ff0e 	bl	1004d798 <LL_RCC_LSI_IsReady>
1004d97c:	1e03      	subs	r3, r0, #0
1004d97e:	d1f7      	bne.n	1004d970 <HAL_PWR_ConfigDEEPSTOP+0x88>
  }

  return HAL_OK;
1004d980:	2300      	movs	r3, #0
}
1004d982:	0018      	movs	r0, r3
1004d984:	46bd      	mov	sp, r7
1004d986:	b004      	add	sp, #16
1004d988:	bd80      	pop	{r7, pc}
1004d98a:	46c0      	nop			@ (mov r8, r8)
1004d98c:	60001800 	.word	0x60001800

1004d990 <HAL_PWR_WKUP_IRQHandler>:
  * @brief This function handles the PWR WAKEUP interrupt request.
  * @note   This API should be called under the WKUP_IRQHandler().
  * @retval None.
  */
void HAL_PWR_WKUP_IRQHandler(void)
{
1004d990:	b580      	push	{r7, lr}
1004d992:	b082      	sub	sp, #8
1004d994:	af00      	add	r7, sp, #0
  uint32_t wakeuppin;

  wakeuppin = HAL_PWR_GetClearWakeupSource();
1004d996:	f7ff ff89 	bl	1004d8ac <HAL_PWR_GetClearWakeupSource>
1004d99a:	0003      	movs	r3, r0
1004d99c:	607b      	str	r3, [r7, #4]

  /* Wakeup pin line interrupt detected */
  if (wakeuppin != 0U)
1004d99e:	687b      	ldr	r3, [r7, #4]
1004d9a0:	2b00      	cmp	r3, #0
1004d9a2:	d003      	beq.n	1004d9ac <HAL_PWR_WKUP_IRQHandler+0x1c>
  {
    HAL_PWR_WKUPx_Callback(wakeuppin);
1004d9a4:	687b      	ldr	r3, [r7, #4]
1004d9a6:	0018      	movs	r0, r3
1004d9a8:	f7f5 fa0e 	bl	10042dc8 <HAL_PWR_WKUPx_Callback>
  }
}
1004d9ac:	46c0      	nop			@ (mov r8, r8)
1004d9ae:	46bd      	mov	sp, r7
1004d9b0:	b002      	add	sp, #8
1004d9b2:	bd80      	pop	{r7, pc}

1004d9b4 <HAL_PWREx_EnableGPIOPullUp>:
  *         PWR_GPIO_BIT_0, ..., PWR_GPIO_BIT_15 or the logical OR
  *         of several of them to setseveral bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
1004d9b4:	b580      	push	{r7, lr}
1004d9b6:	b084      	sub	sp, #16
1004d9b8:	af00      	add	r7, sp, #0
1004d9ba:	6078      	str	r0, [r7, #4]
1004d9bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
1004d9be:	230f      	movs	r3, #15
1004d9c0:	18fb      	adds	r3, r7, r3
1004d9c2:	2200      	movs	r2, #0
1004d9c4:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
1004d9c6:	687b      	ldr	r3, [r7, #4]
1004d9c8:	2b00      	cmp	r3, #0
1004d9ca:	d003      	beq.n	1004d9d4 <HAL_PWREx_EnableGPIOPullUp+0x20>
1004d9cc:	687b      	ldr	r3, [r7, #4]
1004d9ce:	2b01      	cmp	r3, #1
1004d9d0:	d00e      	beq.n	1004d9f0 <HAL_PWREx_EnableGPIOPullUp+0x3c>
1004d9d2:	e01b      	b.n	1004da0c <HAL_PWREx_EnableGPIOPullUp+0x58>
  {
    case PWR_GPIO_A:
      SET_BIT(PWR->PUCRA, GPIONumber);
1004d9d4:	4b13      	ldr	r3, [pc, #76]	@ (1004da24 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004d9d6:	6a19      	ldr	r1, [r3, #32]
1004d9d8:	4b12      	ldr	r3, [pc, #72]	@ (1004da24 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004d9da:	683a      	ldr	r2, [r7, #0]
1004d9dc:	430a      	orrs	r2, r1
1004d9de:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(PWR->PDCRA, GPIONumber);
1004d9e0:	4b10      	ldr	r3, [pc, #64]	@ (1004da24 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004d9e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004d9e4:	683b      	ldr	r3, [r7, #0]
1004d9e6:	43d9      	mvns	r1, r3
1004d9e8:	4b0e      	ldr	r3, [pc, #56]	@ (1004da24 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004d9ea:	400a      	ands	r2, r1
1004d9ec:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
1004d9ee:	e012      	b.n	1004da16 <HAL_PWREx_EnableGPIOPullUp+0x62>
    case PWR_GPIO_B:
      SET_BIT(PWR->PUCRB, GPIONumber);
1004d9f0:	4b0c      	ldr	r3, [pc, #48]	@ (1004da24 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004d9f2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
1004d9f4:	4b0b      	ldr	r3, [pc, #44]	@ (1004da24 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004d9f6:	683a      	ldr	r2, [r7, #0]
1004d9f8:	430a      	orrs	r2, r1
1004d9fa:	629a      	str	r2, [r3, #40]	@ 0x28
      CLEAR_BIT(PWR->PDCRB, GPIONumber);
1004d9fc:	4b09      	ldr	r3, [pc, #36]	@ (1004da24 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004d9fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004da00:	683b      	ldr	r3, [r7, #0]
1004da02:	43d9      	mvns	r1, r3
1004da04:	4b07      	ldr	r3, [pc, #28]	@ (1004da24 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004da06:	400a      	ands	r2, r1
1004da08:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
1004da0a:	e004      	b.n	1004da16 <HAL_PWREx_EnableGPIOPullUp+0x62>
    default:
      status = HAL_ERROR;
1004da0c:	230f      	movs	r3, #15
1004da0e:	18fb      	adds	r3, r7, r3
1004da10:	2201      	movs	r2, #1
1004da12:	701a      	strb	r2, [r3, #0]
      break;
1004da14:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
1004da16:	230f      	movs	r3, #15
1004da18:	18fb      	adds	r3, r7, r3
1004da1a:	781b      	ldrb	r3, [r3, #0]
}
1004da1c:	0018      	movs	r0, r3
1004da1e:	46bd      	mov	sp, r7
1004da20:	b004      	add	sp, #16
1004da22:	bd80      	pop	{r7, pc}
1004da24:	48500000 	.word	0x48500000

1004da28 <HAL_PWREx_EnableGPIOPullDown>:
  *         or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
1004da28:	b580      	push	{r7, lr}
1004da2a:	b084      	sub	sp, #16
1004da2c:	af00      	add	r7, sp, #0
1004da2e:	6078      	str	r0, [r7, #4]
1004da30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
1004da32:	230f      	movs	r3, #15
1004da34:	18fb      	adds	r3, r7, r3
1004da36:	2200      	movs	r2, #0
1004da38:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
1004da3a:	687b      	ldr	r3, [r7, #4]
1004da3c:	2b00      	cmp	r3, #0
1004da3e:	d003      	beq.n	1004da48 <HAL_PWREx_EnableGPIOPullDown+0x20>
1004da40:	687b      	ldr	r3, [r7, #4]
1004da42:	2b01      	cmp	r3, #1
1004da44:	d00e      	beq.n	1004da64 <HAL_PWREx_EnableGPIOPullDown+0x3c>
1004da46:	e01b      	b.n	1004da80 <HAL_PWREx_EnableGPIOPullDown+0x58>
  {
    case PWR_GPIO_A:
      SET_BIT(PWR->PDCRA, GPIONumber);
1004da48:	4b13      	ldr	r3, [pc, #76]	@ (1004da98 <HAL_PWREx_EnableGPIOPullDown+0x70>)
1004da4a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
1004da4c:	4b12      	ldr	r3, [pc, #72]	@ (1004da98 <HAL_PWREx_EnableGPIOPullDown+0x70>)
1004da4e:	683a      	ldr	r2, [r7, #0]
1004da50:	430a      	orrs	r2, r1
1004da52:	625a      	str	r2, [r3, #36]	@ 0x24
      CLEAR_BIT(PWR->PUCRA, GPIONumber);
1004da54:	4b10      	ldr	r3, [pc, #64]	@ (1004da98 <HAL_PWREx_EnableGPIOPullDown+0x70>)
1004da56:	6a1a      	ldr	r2, [r3, #32]
1004da58:	683b      	ldr	r3, [r7, #0]
1004da5a:	43d9      	mvns	r1, r3
1004da5c:	4b0e      	ldr	r3, [pc, #56]	@ (1004da98 <HAL_PWREx_EnableGPIOPullDown+0x70>)
1004da5e:	400a      	ands	r2, r1
1004da60:	621a      	str	r2, [r3, #32]
      break;
1004da62:	e012      	b.n	1004da8a <HAL_PWREx_EnableGPIOPullDown+0x62>
    case PWR_GPIO_B:
      SET_BIT(PWR->PDCRB, GPIONumber);
1004da64:	4b0c      	ldr	r3, [pc, #48]	@ (1004da98 <HAL_PWREx_EnableGPIOPullDown+0x70>)
1004da66:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
1004da68:	4b0b      	ldr	r3, [pc, #44]	@ (1004da98 <HAL_PWREx_EnableGPIOPullDown+0x70>)
1004da6a:	683a      	ldr	r2, [r7, #0]
1004da6c:	430a      	orrs	r2, r1
1004da6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      CLEAR_BIT(PWR->PUCRB, GPIONumber);
1004da70:	4b09      	ldr	r3, [pc, #36]	@ (1004da98 <HAL_PWREx_EnableGPIOPullDown+0x70>)
1004da72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004da74:	683b      	ldr	r3, [r7, #0]
1004da76:	43d9      	mvns	r1, r3
1004da78:	4b07      	ldr	r3, [pc, #28]	@ (1004da98 <HAL_PWREx_EnableGPIOPullDown+0x70>)
1004da7a:	400a      	ands	r2, r1
1004da7c:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
1004da7e:	e004      	b.n	1004da8a <HAL_PWREx_EnableGPIOPullDown+0x62>
    default:
      status = HAL_ERROR;
1004da80:	230f      	movs	r3, #15
1004da82:	18fb      	adds	r3, r7, r3
1004da84:	2201      	movs	r2, #1
1004da86:	701a      	strb	r2, [r3, #0]
      break;
1004da88:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
1004da8a:	230f      	movs	r3, #15
1004da8c:	18fb      	adds	r3, r7, r3
1004da8e:	781b      	ldrb	r3, [r3, #0]
}
1004da90:	0018      	movs	r0, r3
1004da92:	46bd      	mov	sp, r7
1004da94:	b004      	add	sp, #16
1004da96:	bd80      	pop	{r7, pc}
1004da98:	48500000 	.word	0x48500000

1004da9c <LL_RADIO_SetRadioConfigurationAddressPointer>:
{
1004da9c:	b580      	push	{r7, lr}
1004da9e:	b082      	sub	sp, #8
1004daa0:	af00      	add	r7, sp, #0
1004daa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD0, GLOBAL_WORD0_RADIOCONFIGPTR, value);
1004daa4:	4b04      	ldr	r3, [pc, #16]	@ (1004dab8 <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
1004daa6:	681b      	ldr	r3, [r3, #0]
1004daa8:	4b03      	ldr	r3, [pc, #12]	@ (1004dab8 <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
1004daaa:	687a      	ldr	r2, [r7, #4]
1004daac:	601a      	str	r2, [r3, #0]
}
1004daae:	46c0      	nop			@ (mov r8, r8)
1004dab0:	46bd      	mov	sp, r7
1004dab2:	b002      	add	sp, #8
1004dab4:	bd80      	pop	{r7, pc}
1004dab6:	46c0      	nop			@ (mov r8, r8)
1004dab8:	200000c0 	.word	0x200000c0

1004dabc <LL_RADIO_SetWakeupInitDelay>:
{
1004dabc:	b580      	push	{r7, lr}
1004dabe:	b082      	sub	sp, #8
1004dac0:	af00      	add	r7, sp, #0
1004dac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_WAKEUPINITDELAY, value);
1004dac4:	4b07      	ldr	r3, [pc, #28]	@ (1004dae4 <LL_RADIO_SetWakeupInitDelay+0x28>)
1004dac6:	685b      	ldr	r3, [r3, #4]
1004dac8:	4a07      	ldr	r2, [pc, #28]	@ (1004dae8 <LL_RADIO_SetWakeupInitDelay+0x2c>)
1004daca:	4013      	ands	r3, r2
1004dacc:	0019      	movs	r1, r3
1004dace:	687b      	ldr	r3, [r7, #4]
1004dad0:	021b      	lsls	r3, r3, #8
1004dad2:	041b      	lsls	r3, r3, #16
1004dad4:	0c1a      	lsrs	r2, r3, #16
1004dad6:	4b03      	ldr	r3, [pc, #12]	@ (1004dae4 <LL_RADIO_SetWakeupInitDelay+0x28>)
1004dad8:	430a      	orrs	r2, r1
1004dada:	605a      	str	r2, [r3, #4]
}
1004dadc:	46c0      	nop			@ (mov r8, r8)
1004dade:	46bd      	mov	sp, r7
1004dae0:	b002      	add	sp, #8
1004dae2:	bd80      	pop	{r7, pc}
1004dae4:	200000c0 	.word	0x200000c0
1004dae8:	ffff00ff 	.word	0xffff00ff

1004daec <LL_RADIO_SetTimer12InitDelayCal>:
{
1004daec:	b580      	push	{r7, lr}
1004daee:	b082      	sub	sp, #8
1004daf0:	af00      	add	r7, sp, #0
1004daf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER12INITDELAYCAL, value);
1004daf4:	4b08      	ldr	r3, [pc, #32]	@ (1004db18 <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
1004daf6:	685b      	ldr	r3, [r3, #4]
1004daf8:	4a08      	ldr	r2, [pc, #32]	@ (1004db1c <LL_RADIO_SetTimer12InitDelayCal+0x30>)
1004dafa:	4013      	ands	r3, r2
1004dafc:	0019      	movs	r1, r3
1004dafe:	687b      	ldr	r3, [r7, #4]
1004db00:	041a      	lsls	r2, r3, #16
1004db02:	23ff      	movs	r3, #255	@ 0xff
1004db04:	041b      	lsls	r3, r3, #16
1004db06:	401a      	ands	r2, r3
1004db08:	4b03      	ldr	r3, [pc, #12]	@ (1004db18 <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
1004db0a:	430a      	orrs	r2, r1
1004db0c:	605a      	str	r2, [r3, #4]
}
1004db0e:	46c0      	nop			@ (mov r8, r8)
1004db10:	46bd      	mov	sp, r7
1004db12:	b002      	add	sp, #8
1004db14:	bd80      	pop	{r7, pc}
1004db16:	46c0      	nop			@ (mov r8, r8)
1004db18:	200000c0 	.word	0x200000c0
1004db1c:	ff00ffff 	.word	0xff00ffff

1004db20 <LL_RADIO_SetTimer12InitDelayNoCal>:
{
1004db20:	b580      	push	{r7, lr}
1004db22:	b082      	sub	sp, #8
1004db24:	af00      	add	r7, sp, #0
1004db26:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER2INITDELAYNOCAL, value);
1004db28:	4b06      	ldr	r3, [pc, #24]	@ (1004db44 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
1004db2a:	685b      	ldr	r3, [r3, #4]
1004db2c:	021b      	lsls	r3, r3, #8
1004db2e:	0a19      	lsrs	r1, r3, #8
1004db30:	687b      	ldr	r3, [r7, #4]
1004db32:	061a      	lsls	r2, r3, #24
1004db34:	4b03      	ldr	r3, [pc, #12]	@ (1004db44 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
1004db36:	430a      	orrs	r2, r1
1004db38:	605a      	str	r2, [r3, #4]
}
1004db3a:	46c0      	nop			@ (mov r8, r8)
1004db3c:	46bd      	mov	sp, r7
1004db3e:	b002      	add	sp, #8
1004db40:	bd80      	pop	{r7, pc}
1004db42:	46c0      	nop			@ (mov r8, r8)
1004db44:	200000c0 	.word	0x200000c0

1004db48 <LL_RADIO_SetTransmitCalDelayChk>:
{
1004db48:	b580      	push	{r7, lr}
1004db4a:	b082      	sub	sp, #8
1004db4c:	af00      	add	r7, sp, #0
1004db4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITCALDELAYCHK, value);
1004db50:	4b07      	ldr	r3, [pc, #28]	@ (1004db70 <LL_RADIO_SetTransmitCalDelayChk+0x28>)
1004db52:	689b      	ldr	r3, [r3, #8]
1004db54:	22ff      	movs	r2, #255	@ 0xff
1004db56:	4393      	bics	r3, r2
1004db58:	0019      	movs	r1, r3
1004db5a:	687b      	ldr	r3, [r7, #4]
1004db5c:	22ff      	movs	r2, #255	@ 0xff
1004db5e:	401a      	ands	r2, r3
1004db60:	4b03      	ldr	r3, [pc, #12]	@ (1004db70 <LL_RADIO_SetTransmitCalDelayChk+0x28>)
1004db62:	430a      	orrs	r2, r1
1004db64:	609a      	str	r2, [r3, #8]
}
1004db66:	46c0      	nop			@ (mov r8, r8)
1004db68:	46bd      	mov	sp, r7
1004db6a:	b002      	add	sp, #8
1004db6c:	bd80      	pop	{r7, pc}
1004db6e:	46c0      	nop			@ (mov r8, r8)
1004db70:	200000c0 	.word	0x200000c0

1004db74 <LL_RADIO_SetTransmitNoCalDelayChk>:
{
1004db74:	b580      	push	{r7, lr}
1004db76:	b082      	sub	sp, #8
1004db78:	af00      	add	r7, sp, #0
1004db7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITNOCALDELAYCHK, value);
1004db7c:	4b07      	ldr	r3, [pc, #28]	@ (1004db9c <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
1004db7e:	689b      	ldr	r3, [r3, #8]
1004db80:	4a07      	ldr	r2, [pc, #28]	@ (1004dba0 <LL_RADIO_SetTransmitNoCalDelayChk+0x2c>)
1004db82:	4013      	ands	r3, r2
1004db84:	0019      	movs	r1, r3
1004db86:	687b      	ldr	r3, [r7, #4]
1004db88:	021b      	lsls	r3, r3, #8
1004db8a:	041b      	lsls	r3, r3, #16
1004db8c:	0c1a      	lsrs	r2, r3, #16
1004db8e:	4b03      	ldr	r3, [pc, #12]	@ (1004db9c <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
1004db90:	430a      	orrs	r2, r1
1004db92:	609a      	str	r2, [r3, #8]
}
1004db94:	46c0      	nop			@ (mov r8, r8)
1004db96:	46bd      	mov	sp, r7
1004db98:	b002      	add	sp, #8
1004db9a:	bd80      	pop	{r7, pc}
1004db9c:	200000c0 	.word	0x200000c0
1004dba0:	ffff00ff 	.word	0xffff00ff

1004dba4 <LL_RADIO_SetReceivedCalDelayChk>:
{
1004dba4:	b580      	push	{r7, lr}
1004dba6:	b082      	sub	sp, #8
1004dba8:	af00      	add	r7, sp, #0
1004dbaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVECALDELAYCHK, value);
1004dbac:	4b08      	ldr	r3, [pc, #32]	@ (1004dbd0 <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
1004dbae:	689b      	ldr	r3, [r3, #8]
1004dbb0:	4a08      	ldr	r2, [pc, #32]	@ (1004dbd4 <LL_RADIO_SetReceivedCalDelayChk+0x30>)
1004dbb2:	4013      	ands	r3, r2
1004dbb4:	0019      	movs	r1, r3
1004dbb6:	687b      	ldr	r3, [r7, #4]
1004dbb8:	041a      	lsls	r2, r3, #16
1004dbba:	23ff      	movs	r3, #255	@ 0xff
1004dbbc:	041b      	lsls	r3, r3, #16
1004dbbe:	401a      	ands	r2, r3
1004dbc0:	4b03      	ldr	r3, [pc, #12]	@ (1004dbd0 <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
1004dbc2:	430a      	orrs	r2, r1
1004dbc4:	609a      	str	r2, [r3, #8]
}
1004dbc6:	46c0      	nop			@ (mov r8, r8)
1004dbc8:	46bd      	mov	sp, r7
1004dbca:	b002      	add	sp, #8
1004dbcc:	bd80      	pop	{r7, pc}
1004dbce:	46c0      	nop			@ (mov r8, r8)
1004dbd0:	200000c0 	.word	0x200000c0
1004dbd4:	ff00ffff 	.word	0xff00ffff

1004dbd8 <LL_RADIO_SetReceivedNoCalDelayChk>:
{
1004dbd8:	b580      	push	{r7, lr}
1004dbda:	b082      	sub	sp, #8
1004dbdc:	af00      	add	r7, sp, #0
1004dbde:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVENOCALDELAYCHK, value);
1004dbe0:	4b06      	ldr	r3, [pc, #24]	@ (1004dbfc <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
1004dbe2:	689b      	ldr	r3, [r3, #8]
1004dbe4:	021b      	lsls	r3, r3, #8
1004dbe6:	0a19      	lsrs	r1, r3, #8
1004dbe8:	687b      	ldr	r3, [r7, #4]
1004dbea:	061a      	lsls	r2, r3, #24
1004dbec:	4b03      	ldr	r3, [pc, #12]	@ (1004dbfc <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
1004dbee:	430a      	orrs	r2, r1
1004dbf0:	609a      	str	r2, [r3, #8]
}
1004dbf2:	46c0      	nop			@ (mov r8, r8)
1004dbf4:	46bd      	mov	sp, r7
1004dbf6:	b002      	add	sp, #8
1004dbf8:	bd80      	pop	{r7, pc}
1004dbfa:	46c0      	nop			@ (mov r8, r8)
1004dbfc:	200000c0 	.word	0x200000c0

1004dc00 <LL_RADIO_SetConfigurationEndDuration>:
{
1004dc00:	b580      	push	{r7, lr}
1004dc02:	b082      	sub	sp, #8
1004dc04:	af00      	add	r7, sp, #0
1004dc06:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_CONFIGENDDURATION, value);
1004dc08:	4b07      	ldr	r3, [pc, #28]	@ (1004dc28 <LL_RADIO_SetConfigurationEndDuration+0x28>)
1004dc0a:	68db      	ldr	r3, [r3, #12]
1004dc0c:	22ff      	movs	r2, #255	@ 0xff
1004dc0e:	4393      	bics	r3, r2
1004dc10:	0019      	movs	r1, r3
1004dc12:	687b      	ldr	r3, [r7, #4]
1004dc14:	22ff      	movs	r2, #255	@ 0xff
1004dc16:	401a      	ands	r2, r3
1004dc18:	4b03      	ldr	r3, [pc, #12]	@ (1004dc28 <LL_RADIO_SetConfigurationEndDuration+0x28>)
1004dc1a:	430a      	orrs	r2, r1
1004dc1c:	60da      	str	r2, [r3, #12]
}
1004dc1e:	46c0      	nop			@ (mov r8, r8)
1004dc20:	46bd      	mov	sp, r7
1004dc22:	b002      	add	sp, #8
1004dc24:	bd80      	pop	{r7, pc}
1004dc26:	46c0      	nop			@ (mov r8, r8)
1004dc28:	200000c0 	.word	0x200000c0

1004dc2c <LL_RADIO_SetTxDataReadyCheck>:
{
1004dc2c:	b580      	push	{r7, lr}
1004dc2e:	b082      	sub	sp, #8
1004dc30:	af00      	add	r7, sp, #0
1004dc32:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDATAREADYCHECK, value);
1004dc34:	4b07      	ldr	r3, [pc, #28]	@ (1004dc54 <LL_RADIO_SetTxDataReadyCheck+0x28>)
1004dc36:	68db      	ldr	r3, [r3, #12]
1004dc38:	4a07      	ldr	r2, [pc, #28]	@ (1004dc58 <LL_RADIO_SetTxDataReadyCheck+0x2c>)
1004dc3a:	4013      	ands	r3, r2
1004dc3c:	0019      	movs	r1, r3
1004dc3e:	687b      	ldr	r3, [r7, #4]
1004dc40:	021b      	lsls	r3, r3, #8
1004dc42:	041b      	lsls	r3, r3, #16
1004dc44:	0c1a      	lsrs	r2, r3, #16
1004dc46:	4b03      	ldr	r3, [pc, #12]	@ (1004dc54 <LL_RADIO_SetTxDataReadyCheck+0x28>)
1004dc48:	430a      	orrs	r2, r1
1004dc4a:	60da      	str	r2, [r3, #12]
}
1004dc4c:	46c0      	nop			@ (mov r8, r8)
1004dc4e:	46bd      	mov	sp, r7
1004dc50:	b002      	add	sp, #8
1004dc52:	bd80      	pop	{r7, pc}
1004dc54:	200000c0 	.word	0x200000c0
1004dc58:	ffff00ff 	.word	0xffff00ff

1004dc5c <LL_RADIO_SetTxDelayStart>:
{
1004dc5c:	b580      	push	{r7, lr}
1004dc5e:	b082      	sub	sp, #8
1004dc60:	af00      	add	r7, sp, #0
1004dc62:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYSTART, value);
1004dc64:	4b08      	ldr	r3, [pc, #32]	@ (1004dc88 <LL_RADIO_SetTxDelayStart+0x2c>)
1004dc66:	68db      	ldr	r3, [r3, #12]
1004dc68:	4a08      	ldr	r2, [pc, #32]	@ (1004dc8c <LL_RADIO_SetTxDelayStart+0x30>)
1004dc6a:	4013      	ands	r3, r2
1004dc6c:	0019      	movs	r1, r3
1004dc6e:	687b      	ldr	r3, [r7, #4]
1004dc70:	041a      	lsls	r2, r3, #16
1004dc72:	23ff      	movs	r3, #255	@ 0xff
1004dc74:	041b      	lsls	r3, r3, #16
1004dc76:	401a      	ands	r2, r3
1004dc78:	4b03      	ldr	r3, [pc, #12]	@ (1004dc88 <LL_RADIO_SetTxDelayStart+0x2c>)
1004dc7a:	430a      	orrs	r2, r1
1004dc7c:	60da      	str	r2, [r3, #12]
}
1004dc7e:	46c0      	nop			@ (mov r8, r8)
1004dc80:	46bd      	mov	sp, r7
1004dc82:	b002      	add	sp, #8
1004dc84:	bd80      	pop	{r7, pc}
1004dc86:	46c0      	nop			@ (mov r8, r8)
1004dc88:	200000c0 	.word	0x200000c0
1004dc8c:	ff00ffff 	.word	0xff00ffff

1004dc90 <LL_RADIO_SetTxDelayEnd>:
{
1004dc90:	b580      	push	{r7, lr}
1004dc92:	b082      	sub	sp, #8
1004dc94:	af00      	add	r7, sp, #0
1004dc96:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYEND, value);
1004dc98:	4b08      	ldr	r3, [pc, #32]	@ (1004dcbc <LL_RADIO_SetTxDelayEnd+0x2c>)
1004dc9a:	68db      	ldr	r3, [r3, #12]
1004dc9c:	4a08      	ldr	r2, [pc, #32]	@ (1004dcc0 <LL_RADIO_SetTxDelayEnd+0x30>)
1004dc9e:	4013      	ands	r3, r2
1004dca0:	0019      	movs	r1, r3
1004dca2:	687b      	ldr	r3, [r7, #4]
1004dca4:	061a      	lsls	r2, r3, #24
1004dca6:	23fc      	movs	r3, #252	@ 0xfc
1004dca8:	059b      	lsls	r3, r3, #22
1004dcaa:	401a      	ands	r2, r3
1004dcac:	4b03      	ldr	r3, [pc, #12]	@ (1004dcbc <LL_RADIO_SetTxDelayEnd+0x2c>)
1004dcae:	430a      	orrs	r2, r1
1004dcb0:	60da      	str	r2, [r3, #12]
}
1004dcb2:	46c0      	nop			@ (mov r8, r8)
1004dcb4:	46bd      	mov	sp, r7
1004dcb6:	b002      	add	sp, #8
1004dcb8:	bd80      	pop	{r7, pc}
1004dcba:	46c0      	nop			@ (mov r8, r8)
1004dcbc:	200000c0 	.word	0x200000c0
1004dcc0:	c0ffffff 	.word	0xc0ffffff

1004dcc4 <LL_RADIO_SetTransmissionReadyTimeout>:
{
1004dcc4:	b580      	push	{r7, lr}
1004dcc6:	b082      	sub	sp, #8
1004dcc8:	af00      	add	r7, sp, #0
1004dcca:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_TXREADYTIMEOUT, value);
1004dccc:	4b07      	ldr	r3, [pc, #28]	@ (1004dcec <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
1004dcce:	691b      	ldr	r3, [r3, #16]
1004dcd0:	22ff      	movs	r2, #255	@ 0xff
1004dcd2:	4393      	bics	r3, r2
1004dcd4:	0019      	movs	r1, r3
1004dcd6:	687b      	ldr	r3, [r7, #4]
1004dcd8:	22ff      	movs	r2, #255	@ 0xff
1004dcda:	401a      	ands	r2, r3
1004dcdc:	4b03      	ldr	r3, [pc, #12]	@ (1004dcec <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
1004dcde:	430a      	orrs	r2, r1
1004dce0:	611a      	str	r2, [r3, #16]
}
1004dce2:	46c0      	nop			@ (mov r8, r8)
1004dce4:	46bd      	mov	sp, r7
1004dce6:	b002      	add	sp, #8
1004dce8:	bd80      	pop	{r7, pc}
1004dcea:	46c0      	nop			@ (mov r8, r8)
1004dcec:	200000c0 	.word	0x200000c0

1004dcf0 <LL_RADIO_ChkFlagAutoclearEnable_Enable>:
{
1004dcf0:	b580      	push	{r7, lr}
1004dcf2:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_CHKFLAGAUTOCLEARENA);
1004dcf4:	4b04      	ldr	r3, [pc, #16]	@ (1004dd08 <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
1004dcf6:	695a      	ldr	r2, [r3, #20]
1004dcf8:	4b03      	ldr	r3, [pc, #12]	@ (1004dd08 <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
1004dcfa:	2104      	movs	r1, #4
1004dcfc:	430a      	orrs	r2, r1
1004dcfe:	615a      	str	r2, [r3, #20]
}
1004dd00:	46c0      	nop			@ (mov r8, r8)
1004dd02:	46bd      	mov	sp, r7
1004dd04:	bd80      	pop	{r7, pc}
1004dd06:	46c0      	nop			@ (mov r8, r8)
1004dd08:	200000c0 	.word	0x200000c0

1004dd0c <LL_RADIO_NoActiveLErrorInterrupt_Enable>:
{
1004dd0c:	b580      	push	{r7, lr}
1004dd0e:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTNOACTIVELERROR);
1004dd10:	4b04      	ldr	r3, [pc, #16]	@ (1004dd24 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
1004dd12:	695a      	ldr	r2, [r3, #20]
1004dd14:	4b03      	ldr	r3, [pc, #12]	@ (1004dd24 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
1004dd16:	2180      	movs	r1, #128	@ 0x80
1004dd18:	0409      	lsls	r1, r1, #16
1004dd1a:	430a      	orrs	r2, r1
1004dd1c:	615a      	str	r2, [r3, #20]
}
1004dd1e:	46c0      	nop			@ (mov r8, r8)
1004dd20:	46bd      	mov	sp, r7
1004dd22:	bd80      	pop	{r7, pc}
1004dd24:	200000c0 	.word	0x200000c0

1004dd28 <LL_RADIO_TxRxSkipInterrupt_Enable>:
{
1004dd28:	b580      	push	{r7, lr}
1004dd2a:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTTXRXSKIP);
1004dd2c:	4b04      	ldr	r3, [pc, #16]	@ (1004dd40 <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
1004dd2e:	695a      	ldr	r2, [r3, #20]
1004dd30:	4b03      	ldr	r3, [pc, #12]	@ (1004dd40 <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
1004dd32:	2180      	movs	r1, #128	@ 0x80
1004dd34:	0589      	lsls	r1, r1, #22
1004dd36:	430a      	orrs	r2, r1
1004dd38:	615a      	str	r2, [r3, #20]
}
1004dd3a:	46c0      	nop			@ (mov r8, r8)
1004dd3c:	46bd      	mov	sp, r7
1004dd3e:	bd80      	pop	{r7, pc}
1004dd40:	200000c0 	.word	0x200000c0

1004dd44 <LL_RADIO_Active2ErrorInterrupt_Enable>:
{
1004dd44:	b580      	push	{r7, lr}
1004dd46:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTACTIVE2ERR);
1004dd48:	4b04      	ldr	r3, [pc, #16]	@ (1004dd5c <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
1004dd4a:	695a      	ldr	r2, [r3, #20]
1004dd4c:	4b03      	ldr	r3, [pc, #12]	@ (1004dd5c <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
1004dd4e:	2180      	movs	r1, #128	@ 0x80
1004dd50:	05c9      	lsls	r1, r1, #23
1004dd52:	430a      	orrs	r2, r1
1004dd54:	615a      	str	r2, [r3, #20]
}
1004dd56:	46c0      	nop			@ (mov r8, r8)
1004dd58:	46bd      	mov	sp, r7
1004dd5a:	bd80      	pop	{r7, pc}
1004dd5c:	200000c0 	.word	0x200000c0

1004dd60 <LL_RADIO_SetDefaultAntennaID>:
{
1004dd60:	b580      	push	{r7, lr}
1004dd62:	b082      	sub	sp, #8
1004dd64:	af00      	add	r7, sp, #0
1004dd66:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD6, GLOBAL_WORD6_DEFAULTANTENNAID, value);
1004dd68:	4b07      	ldr	r3, [pc, #28]	@ (1004dd88 <LL_RADIO_SetDefaultAntennaID+0x28>)
1004dd6a:	699b      	ldr	r3, [r3, #24]
1004dd6c:	227f      	movs	r2, #127	@ 0x7f
1004dd6e:	4393      	bics	r3, r2
1004dd70:	0019      	movs	r1, r3
1004dd72:	687b      	ldr	r3, [r7, #4]
1004dd74:	227f      	movs	r2, #127	@ 0x7f
1004dd76:	401a      	ands	r2, r3
1004dd78:	4b03      	ldr	r3, [pc, #12]	@ (1004dd88 <LL_RADIO_SetDefaultAntennaID+0x28>)
1004dd7a:	430a      	orrs	r2, r1
1004dd7c:	619a      	str	r2, [r3, #24]
}
1004dd7e:	46c0      	nop			@ (mov r8, r8)
1004dd80:	46bd      	mov	sp, r7
1004dd82:	b002      	add	sp, #8
1004dd84:	bd80      	pop	{r7, pc}
1004dd86:	46c0      	nop			@ (mov r8, r8)
1004dd88:	200000c0 	.word	0x200000c0

1004dd8c <LL_RADIO_TIMER_DisableTimer1>:
{
1004dd8c:	b580      	push	{r7, lr}
1004dd8e:	b082      	sub	sp, #8
1004dd90:	af00      	add	r7, sp, #0
1004dd92:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004dd94:	687b      	ldr	r3, [r7, #4]
1004dd96:	68db      	ldr	r3, [r3, #12]
1004dd98:	2203      	movs	r2, #3
1004dd9a:	4393      	bics	r3, r2
1004dd9c:	001a      	movs	r2, r3
1004dd9e:	687b      	ldr	r3, [r7, #4]
1004dda0:	60da      	str	r2, [r3, #12]
}
1004dda2:	46c0      	nop			@ (mov r8, r8)
1004dda4:	46bd      	mov	sp, r7
1004dda6:	b002      	add	sp, #8
1004dda8:	bd80      	pop	{r7, pc}

1004ddaa <LL_RADIO_TIMER_DisableTimer2>:
{
1004ddaa:	b580      	push	{r7, lr}
1004ddac:	b082      	sub	sp, #8
1004ddae:	af00      	add	r7, sp, #0
1004ddb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004ddb2:	687b      	ldr	r3, [r7, #4]
1004ddb4:	68db      	ldr	r3, [r3, #12]
1004ddb6:	2203      	movs	r2, #3
1004ddb8:	4393      	bics	r3, r2
1004ddba:	001a      	movs	r2, r3
1004ddbc:	687b      	ldr	r3, [r7, #4]
1004ddbe:	60da      	str	r2, [r3, #12]
}
1004ddc0:	46c0      	nop			@ (mov r8, r8)
1004ddc2:	46bd      	mov	sp, r7
1004ddc4:	b002      	add	sp, #8
1004ddc6:	bd80      	pop	{r7, pc}

1004ddc8 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
1004ddc8:	b580      	push	{r7, lr}
1004ddca:	b082      	sub	sp, #8
1004ddcc:	af00      	add	r7, sp, #0
1004ddce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
1004ddd0:	687b      	ldr	r3, [r7, #4]
1004ddd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004ddd4:	4a03      	ldr	r2, [pc, #12]	@ (1004dde4 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
1004ddd6:	401a      	ands	r2, r3
1004ddd8:	687b      	ldr	r3, [r7, #4]
1004ddda:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004dddc:	46c0      	nop			@ (mov r8, r8)
1004ddde:	46bd      	mov	sp, r7
1004dde0:	b002      	add	sp, #8
1004dde2:	bd80      	pop	{r7, pc}
1004dde4:	bfffffff 	.word	0xbfffffff

1004dde8 <HAL_RADIO_Init>:
/**
  * @brief  Initializes the radio.
  * @retval None
  */
void HAL_RADIO_Init(RADIO_HandleTypeDef *hradio)
{
1004dde8:	b590      	push	{r4, r7, lr}
1004ddea:	b08d      	sub	sp, #52	@ 0x34
1004ddec:	af00      	add	r7, sp, #0
1004ddee:	6078      	str	r0, [r7, #4]
  uint32_t mr_ble_iptat;
  uint32_t mr_ble_vbg;
  uint32_t mr_ble_rxadc_delay_i;
  uint32_t mr_ble_rxadc_delay_q;
  uint8_t mr_ble_rxadc_delay_flag;
  uint8_t *hot_table_radio_config = (uint8_t *)&hot_table_radio_config_u32[4];
1004ddf0:	4b14      	ldr	r3, [pc, #80]	@ (1004de44 <HAL_RADIO_Init+0x5c>)
1004ddf2:	617b      	str	r3, [r7, #20]
  uint8_t index;

  /* Retrieve Trimming values from engineering flash locations */
  if (*(volatile uint32_t *)VALIDITY_LOCATION == VALIDITY_TAG)
1004ddf4:	4b14      	ldr	r3, [pc, #80]	@ (1004de48 <HAL_RADIO_Init+0x60>)
1004ddf6:	681b      	ldr	r3, [r3, #0]
1004ddf8:	4a14      	ldr	r2, [pc, #80]	@ (1004de4c <HAL_RADIO_Init+0x64>)
1004ddfa:	4293      	cmp	r3, r2
1004ddfc:	d12a      	bne.n	1004de54 <HAL_RADIO_Init+0x6c>
  {
    mr_ble_ibias            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IBIAS_TRIM_Msk) >> MR_BLE_IBIAS_TRIM_Pos;
1004ddfe:	4b14      	ldr	r3, [pc, #80]	@ (1004de50 <HAL_RADIO_Init+0x68>)
1004de00:	681b      	ldr	r3, [r3, #0]
1004de02:	0a1b      	lsrs	r3, r3, #8
1004de04:	220f      	movs	r2, #15
1004de06:	4013      	ands	r3, r2
1004de08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IPTAT_TRIM_Msk) >> MR_BLE_IPTAT_TRIM_Pos;
1004de0a:	4b11      	ldr	r3, [pc, #68]	@ (1004de50 <HAL_RADIO_Init+0x68>)
1004de0c:	681b      	ldr	r3, [r3, #0]
1004de0e:	0b1b      	lsrs	r3, r3, #12
1004de10:	220f      	movs	r2, #15
1004de12:	4013      	ands	r3, r2
1004de14:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg              = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_VBG_TRIM_Msk) >> MR_BLE_VBG_TRIM_Pos;
1004de16:	4b0e      	ldr	r3, [pc, #56]	@ (1004de50 <HAL_RADIO_Init+0x68>)
1004de18:	681b      	ldr	r3, [r3, #0]
1004de1a:	0c1b      	lsrs	r3, r3, #16
1004de1c:	220f      	movs	r2, #15
1004de1e:	4013      	ands	r3, r2
1004de20:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_i    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_I_TRIM_Msk) >> MR_BLE_RXADC_DELAY_I_TRIM_Pos;
1004de22:	4b0b      	ldr	r3, [pc, #44]	@ (1004de50 <HAL_RADIO_Init+0x68>)
1004de24:	681b      	ldr	r3, [r3, #0]
1004de26:	0d1b      	lsrs	r3, r3, #20
1004de28:	2207      	movs	r2, #7
1004de2a:	4013      	ands	r3, r2
1004de2c:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_Q_TRIM_Msk) >> MR_BLE_RXADC_DELAY_Q_TRIM_Pos;
1004de2e:	4b08      	ldr	r3, [pc, #32]	@ (1004de50 <HAL_RADIO_Init+0x68>)
1004de30:	681b      	ldr	r3, [r3, #0]
1004de32:	0e1b      	lsrs	r3, r3, #24
1004de34:	2207      	movs	r2, #7
1004de36:	4013      	ands	r3, r2
1004de38:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
1004de3a:	231b      	movs	r3, #27
1004de3c:	18fb      	adds	r3, r7, r3
1004de3e:	2201      	movs	r2, #1
1004de40:	701a      	strb	r2, [r3, #0]
1004de42:	e018      	b.n	1004de76 <HAL_RADIO_Init+0x8e>
1004de44:	20000f24 	.word	0x20000f24
1004de48:	10001ef8 	.word	0x10001ef8
1004de4c:	fcbceccc 	.word	0xfcbceccc
1004de50:	10001ee8 	.word	0x10001ee8
  }
  else
  {
    mr_ble_ibias = 0x08;
1004de54:	2308      	movs	r3, #8
1004de56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat = 0x07;
1004de58:	2307      	movs	r3, #7
1004de5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg   = 0x08;
1004de5c:	2308      	movs	r3, #8
1004de5e:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_flag = FALSE;
1004de60:	211b      	movs	r1, #27
1004de62:	187b      	adds	r3, r7, r1
1004de64:	2200      	movs	r2, #0
1004de66:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
    mr_ble_rxadc_delay_i    = 3;
1004de68:	2303      	movs	r3, #3
1004de6a:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = 3;
1004de6c:	2303      	movs	r3, #3
1004de6e:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
1004de70:	187b      	adds	r3, r7, r1
1004de72:	2201      	movs	r2, #1
1004de74:	701a      	strb	r2, [r3, #0]
#endif /* STM32WB05 or STM32WB09 */
  }

  BLUEGLOB->BYTE4 = BLUE_IDLE_0;
1004de76:	4bfc      	ldr	r3, [pc, #1008]	@ (1004e268 <HAL_RADIO_Init+0x480>)
1004de78:	2200      	movs	r2, #0
1004de7a:	711a      	strb	r2, [r3, #4]
  if (hradio != NULL)
1004de7c:	687b      	ldr	r3, [r7, #4]
1004de7e:	2b00      	cmp	r3, #0
1004de80:	d003      	beq.n	1004de8a <HAL_RADIO_Init+0xa2>
  {
    HAL_RADIO_MspInit(hradio);
1004de82:	687b      	ldr	r3, [r7, #4]
1004de84:	0018      	movs	r0, r3
1004de86:	f7f5 fa21 	bl	100432cc <HAL_RADIO_MspInit>
  }
  LL_RADIO_TIMER_DisableTimer1(BLUE);
1004de8a:	23c0      	movs	r3, #192	@ 0xc0
1004de8c:	05db      	lsls	r3, r3, #23
1004de8e:	0018      	movs	r0, r3
1004de90:	f7ff ff7c 	bl	1004dd8c <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
1004de94:	23c0      	movs	r3, #192	@ 0xc0
1004de96:	05db      	lsls	r3, r3, #23
1004de98:	0018      	movs	r0, r3
1004de9a:	f7ff ff86 	bl	1004ddaa <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004de9e:	4bf3      	ldr	r3, [pc, #972]	@ (1004e26c <HAL_RADIO_Init+0x484>)
1004dea0:	0018      	movs	r0, r3
1004dea2:	f7ff ff91 	bl	1004ddc8 <LL_RADIO_TIMER_DisableBLEWakeupTimer>

  /* Write Radio Trimming values in the registers: Cbias' VBG, Cbias' IPTAT, Cbias' IBIAS, RxAnaUsr Delay Trim I & Q */
  MODIFY_REG_FIELD(RRM->CBIAS1_ANA_ENG, RRM_CBIAS1_ANA_ENG_RFD_CBIAS_VBG_TRIM, mr_ble_vbg);
1004dea6:	4af2      	ldr	r2, [pc, #968]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004dea8:	239e      	movs	r3, #158	@ 0x9e
1004deaa:	009b      	lsls	r3, r3, #2
1004deac:	58d3      	ldr	r3, [r2, r3]
1004deae:	220f      	movs	r2, #15
1004deb0:	4393      	bics	r3, r2
1004deb2:	001a      	movs	r2, r3
1004deb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004deb6:	210f      	movs	r1, #15
1004deb8:	400b      	ands	r3, r1
1004deba:	49ed      	ldr	r1, [pc, #948]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004debc:	431a      	orrs	r2, r3
1004debe:	239e      	movs	r3, #158	@ 0x9e
1004dec0:	009b      	lsls	r3, r3, #2
1004dec2:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IPTAT_TRIM, mr_ble_iptat);
1004dec4:	4aea      	ldr	r2, [pc, #936]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004dec6:	239d      	movs	r3, #157	@ 0x9d
1004dec8:	009b      	lsls	r3, r3, #2
1004deca:	58d3      	ldr	r3, [r2, r3]
1004decc:	22f0      	movs	r2, #240	@ 0xf0
1004dece:	4393      	bics	r3, r2
1004ded0:	001a      	movs	r2, r3
1004ded2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004ded4:	011b      	lsls	r3, r3, #4
1004ded6:	21ff      	movs	r1, #255	@ 0xff
1004ded8:	400b      	ands	r3, r1
1004deda:	49e5      	ldr	r1, [pc, #916]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004dedc:	431a      	orrs	r2, r3
1004dede:	239d      	movs	r3, #157	@ 0x9d
1004dee0:	009b      	lsls	r3, r3, #2
1004dee2:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IBIAS_TRIM, mr_ble_ibias);
1004dee4:	4ae2      	ldr	r2, [pc, #904]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004dee6:	239d      	movs	r3, #157	@ 0x9d
1004dee8:	009b      	lsls	r3, r3, #2
1004deea:	58d3      	ldr	r3, [r2, r3]
1004deec:	220f      	movs	r2, #15
1004deee:	4393      	bics	r3, r2
1004def0:	001a      	movs	r2, r3
1004def2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004def4:	210f      	movs	r1, #15
1004def6:	400b      	ands	r3, r1
1004def8:	49dd      	ldr	r1, [pc, #884]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004defa:	431a      	orrs	r2, r3
1004defc:	239d      	movs	r3, #157	@ 0x9d
1004defe:	009b      	lsls	r3, r3, #2
1004df00:	50ca      	str	r2, [r1, r3]
  if (mr_ble_rxadc_delay_flag)
1004df02:	231b      	movs	r3, #27
1004df04:	18fb      	adds	r3, r7, r3
1004df06:	781b      	ldrb	r3, [r3, #0]
1004df08:	2b00      	cmp	r3, #0
1004df0a:	d01e      	beq.n	1004df4a <HAL_RADIO_Init+0x162>
  {
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_I, mr_ble_rxadc_delay_i);
1004df0c:	4ad8      	ldr	r2, [pc, #864]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004df0e:	2392      	movs	r3, #146	@ 0x92
1004df10:	009b      	lsls	r3, r3, #2
1004df12:	58d3      	ldr	r3, [r2, r3]
1004df14:	2207      	movs	r2, #7
1004df16:	4393      	bics	r3, r2
1004df18:	001a      	movs	r2, r3
1004df1a:	6a3b      	ldr	r3, [r7, #32]
1004df1c:	2107      	movs	r1, #7
1004df1e:	400b      	ands	r3, r1
1004df20:	49d3      	ldr	r1, [pc, #844]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004df22:	431a      	orrs	r2, r3
1004df24:	2392      	movs	r3, #146	@ 0x92
1004df26:	009b      	lsls	r3, r3, #2
1004df28:	50ca      	str	r2, [r1, r3]
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_Q, mr_ble_rxadc_delay_q);
1004df2a:	4ad1      	ldr	r2, [pc, #836]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004df2c:	2392      	movs	r3, #146	@ 0x92
1004df2e:	009b      	lsls	r3, r3, #2
1004df30:	58d3      	ldr	r3, [r2, r3]
1004df32:	2238      	movs	r2, #56	@ 0x38
1004df34:	4393      	bics	r3, r2
1004df36:	001a      	movs	r2, r3
1004df38:	69fb      	ldr	r3, [r7, #28]
1004df3a:	00db      	lsls	r3, r3, #3
1004df3c:	2138      	movs	r1, #56	@ 0x38
1004df3e:	400b      	ands	r3, r1
1004df40:	49cb      	ldr	r1, [pc, #812]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004df42:	431a      	orrs	r2, r3
1004df44:	2392      	movs	r3, #146	@ 0x92
1004df46:	009b      	lsls	r3, r3, #2
1004df48:	50ca      	str	r2, [r1, r3]
  }

  /* Radio AFC configuration */
  MODIFY_REG(RRM->AFC1_DIG_ENG, RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER | RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE,
1004df4a:	4ac9      	ldr	r2, [pc, #804]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004df4c:	23a4      	movs	r3, #164	@ 0xa4
1004df4e:	005b      	lsls	r3, r3, #1
1004df50:	58d3      	ldr	r3, [r2, r3]
1004df52:	22ff      	movs	r2, #255	@ 0xff
1004df54:	4393      	bics	r3, r2
1004df56:	49c6      	ldr	r1, [pc, #792]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004df58:	2255      	movs	r2, #85	@ 0x55
1004df5a:	431a      	orrs	r2, r3
1004df5c:	23a4      	movs	r3, #164	@ 0xa4
1004df5e:	005b      	lsls	r3, r3, #1
1004df60:	50ca      	str	r2, [r1, r3]
             ((AFC_DELAY_BEFORE << RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Msk) |
             ((AFC_DELAY_AFTER << RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Msk));
  MODIFY_REG(RRM->CR0_DIG_ENG, RRM_CR0_DIG_ENG_CR_GAIN_BEFORE | RRM_CR0_DIG_ENG_CR_GAIN_AFTER,
1004df62:	4ac3      	ldr	r2, [pc, #780]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004df64:	23aa      	movs	r3, #170	@ 0xaa
1004df66:	005b      	lsls	r3, r3, #1
1004df68:	58d3      	ldr	r3, [r2, r3]
1004df6a:	22ff      	movs	r2, #255	@ 0xff
1004df6c:	4393      	bics	r3, r2
1004df6e:	49c0      	ldr	r1, [pc, #768]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004df70:	2266      	movs	r2, #102	@ 0x66
1004df72:	431a      	orrs	r2, r3
1004df74:	23aa      	movs	r3, #170	@ 0xaa
1004df76:	005b      	lsls	r3, r3, #1
1004df78:	50ca      	str	r2, [r1, r3]
             ((CR_GAIN_BEFORE << RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Msk) |
             ((CR_GAIN_AFTER << RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Msk));
  MODIFY_REG(RRM->CR0_LR, RRM_CR0_LR_CR_LR_GAIN_BEFORE | RRM_CR0_LR_CR_LR_GAIN_AFTER,
1004df7a:	4abd      	ldr	r2, [pc, #756]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004df7c:	23b4      	movs	r3, #180	@ 0xb4
1004df7e:	005b      	lsls	r3, r3, #1
1004df80:	58d3      	ldr	r3, [r2, r3]
1004df82:	22ff      	movs	r2, #255	@ 0xff
1004df84:	4393      	bics	r3, r2
1004df86:	49ba      	ldr	r1, [pc, #744]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004df88:	2255      	movs	r2, #85	@ 0x55
1004df8a:	431a      	orrs	r2, r3
1004df8c:	23b4      	movs	r3, #180	@ 0xb4
1004df8e:	005b      	lsls	r3, r3, #1
1004df90:	50ca      	str	r2, [r1, r3]
             ((CR_LR_GAIN_BEFORE << RRM_CR0_LR_CR_LR_GAIN_BEFORE_Pos) & RRM_CR0_LR_CR_LR_GAIN_BEFORE_Msk) |
             ((CR_LR_GAIN_AFTER << RRM_CR0_LR_CR_LR_GAIN_AFTER_Pos) & RRM_CR0_LR_CR_LR_GAIN_AFTER_Msk));

  /* Radio RSSI Threshold configuration */
  MODIFY_REG_FIELD(RRM->LR_RSSI_THR_DIG_ENG, RRM_LR_RSSI_THR_DIG_ENG_LR_RSSI_THR, LR_RSSI_THR);
1004df92:	4ab7      	ldr	r2, [pc, #732]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004df94:	23c4      	movs	r3, #196	@ 0xc4
1004df96:	005b      	lsls	r3, r3, #1
1004df98:	58d3      	ldr	r3, [r2, r3]
1004df9a:	22ff      	movs	r2, #255	@ 0xff
1004df9c:	4393      	bics	r3, r2
1004df9e:	49b4      	ldr	r1, [pc, #720]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004dfa0:	221d      	movs	r2, #29
1004dfa2:	431a      	orrs	r2, r3
1004dfa4:	23c4      	movs	r3, #196	@ 0xc4
1004dfa6:	005b      	lsls	r3, r3, #1
1004dfa8:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_PD_THR_DIG_ENG, RRM_LR_PD_THR_DIG_ENG_LR_PD_THR, LR_PD_THR);
1004dfaa:	4ab1      	ldr	r2, [pc, #708]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004dfac:	23c2      	movs	r3, #194	@ 0xc2
1004dfae:	005b      	lsls	r3, r3, #1
1004dfb0:	58d3      	ldr	r3, [r2, r3]
1004dfb2:	22ff      	movs	r2, #255	@ 0xff
1004dfb4:	4393      	bics	r3, r2
1004dfb6:	49ae      	ldr	r1, [pc, #696]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004dfb8:	2259      	movs	r2, #89	@ 0x59
1004dfba:	431a      	orrs	r2, r3
1004dfbc:	23c2      	movs	r3, #194	@ 0xc2
1004dfbe:	005b      	lsls	r3, r3, #1
1004dfc0:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_AAC_THR_DIG_ENG, RRM_LR_AAC_THR_DIG_ENG_LR_AAC_THR, LR_AAC_THR);
1004dfc2:	4aab      	ldr	r2, [pc, #684]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004dfc4:	23c6      	movs	r3, #198	@ 0xc6
1004dfc6:	005b      	lsls	r3, r3, #1
1004dfc8:	58d3      	ldr	r3, [r2, r3]
1004dfca:	22ff      	movs	r2, #255	@ 0xff
1004dfcc:	4393      	bics	r3, r2
1004dfce:	49a8      	ldr	r1, [pc, #672]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004dfd0:	2232      	movs	r2, #50	@ 0x32
1004dfd2:	431a      	orrs	r2, r3
1004dfd4:	23c6      	movs	r3, #198	@ 0xc6
1004dfd6:	005b      	lsls	r3, r3, #1
1004dfd8:	50ca      	str	r2, [r1, r3]

  /* Enable Viterbi */
  SET_BIT(RRM->VIT_CONF_DIG_ENG, RRM_VIT_CONF_DIG_ENG_VIT_CONF_0);
1004dfda:	4aa5      	ldr	r2, [pc, #660]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004dfdc:	23b6      	movs	r3, #182	@ 0xb6
1004dfde:	005b      	lsls	r3, r3, #1
1004dfe0:	58d3      	ldr	r3, [r2, r3]
1004dfe2:	49a3      	ldr	r1, [pc, #652]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004dfe4:	2201      	movs	r2, #1
1004dfe6:	431a      	orrs	r2, r3
1004dfe8:	23b6      	movs	r3, #182	@ 0xb6
1004dfea:	005b      	lsls	r3, r3, #1
1004dfec:	50ca      	str	r2, [r1, r3]

#if defined(STM32WB05) || defined(STM32WB09)
  MODIFY_REG_FIELD(RRM->ANTSW_DIG0_USR, RRM_ANTSW0_DIG_USR_RX_TIME_TO_SAMPLE, RX_TIME_TO_SAMPLE);
1004dfee:	4aa0      	ldr	r2, [pc, #640]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004dff0:	23d0      	movs	r3, #208	@ 0xd0
1004dff2:	009b      	lsls	r3, r3, #2
1004dff4:	58d3      	ldr	r3, [r2, r3]
1004dff6:	227f      	movs	r2, #127	@ 0x7f
1004dff8:	4393      	bics	r3, r2
1004dffa:	499d      	ldr	r1, [pc, #628]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004dffc:	221f      	movs	r2, #31
1004dffe:	431a      	orrs	r2, r3
1004e000:	23d0      	movs	r3, #208	@ 0xd0
1004e002:	009b      	lsls	r3, r3, #2
1004e004:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->ANTSW_DIG1_USR, RRM_ANTSW1_DIG_USR_RX_TIME_TO_SWITCH, RX_TIME_TO_SWITCH);
1004e006:	4a9a      	ldr	r2, [pc, #616]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004e008:	23d1      	movs	r3, #209	@ 0xd1
1004e00a:	009b      	lsls	r3, r3, #2
1004e00c:	58d3      	ldr	r3, [r2, r3]
1004e00e:	223f      	movs	r2, #63	@ 0x3f
1004e010:	4393      	bics	r3, r2
1004e012:	4997      	ldr	r1, [pc, #604]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004e014:	2209      	movs	r2, #9
1004e016:	431a      	orrs	r2, r3
1004e018:	23d1      	movs	r3, #209	@ 0xd1
1004e01a:	009b      	lsls	r3, r3, #2
1004e01c:	50ca      	str	r2, [r1, r3]
#endif /* STM32WB05 or STM32WB09 */

  /*Set InitDelay*/
  LL_RADIO_SetWakeupInitDelay(INITDELAY_WAKEUP);
1004e01e:	2040      	movs	r0, #64	@ 0x40
1004e020:	f7ff fd4c 	bl	1004dabc <LL_RADIO_SetWakeupInitDelay>
  LL_RADIO_SetTimer12InitDelayCal(INITDELAY_TIMER12_CAL);
1004e024:	203f      	movs	r0, #63	@ 0x3f
1004e026:	f7ff fd61 	bl	1004daec <LL_RADIO_SetTimer12InitDelayCal>
  LL_RADIO_SetTimer12InitDelayNoCal(INITDELAY_TIMER2_NOCAL);
1004e02a:	2009      	movs	r0, #9
1004e02c:	f7ff fd78 	bl	1004db20 <LL_RADIO_SetTimer12InitDelayNoCal>

  /*Set Init_radio_delay*/
  LL_RADIO_SetReceivedCalDelayChk(DELAYCHK_RECEIVE_CAL);
1004e030:	205a      	movs	r0, #90	@ 0x5a
1004e032:	f7ff fdb7 	bl	1004dba4 <LL_RADIO_SetReceivedCalDelayChk>
  LL_RADIO_SetReceivedNoCalDelayChk(DELAYCHK_RECEIVE_NOCAL);
1004e036:	2032      	movs	r0, #50	@ 0x32
1004e038:	f7ff fdce 	bl	1004dbd8 <LL_RADIO_SetReceivedNoCalDelayChk>
  LL_RADIO_SetTransmitCalDelayChk(DELAYCHK_TRANSMIT_CAL);
1004e03c:	205a      	movs	r0, #90	@ 0x5a
1004e03e:	f7ff fd83 	bl	1004db48 <LL_RADIO_SetTransmitCalDelayChk>
  LL_RADIO_SetTransmitNoCalDelayChk(DELAYCHK_TRANSMIT_NOCAL);
1004e042:	2032      	movs	r0, #50	@ 0x32
1004e044:	f7ff fd96 	bl	1004db74 <LL_RADIO_SetTransmitNoCalDelayChk>

  /* Initial and final TX delays: control the on-air start time of the TX packet
  *  and the length of the packet "tail" after last bit is transmitted
  */
  LL_RADIO_SetTxDelayStart(TXDELAY_START);
1004e048:	2010      	movs	r0, #16
1004e04a:	f7ff fe07 	bl	1004dc5c <LL_RADIO_SetTxDelayStart>
  LL_RADIO_SetTxDelayEnd(TXDELAY_END);
1004e04e:	2010      	movs	r0, #16
1004e050:	f7ff fe1e 	bl	1004dc90 <LL_RADIO_SetTxDelayEnd>

  /* Timeout for TX ready signal from the radio FSM after the 2nd init phase
  *  has expired
  */
  LL_RADIO_SetTransmissionReadyTimeout(TXREADY_TIMEOUT);
1004e054:	2004      	movs	r0, #4
1004e056:	f7ff fe35 	bl	1004dcc4 <LL_RADIO_SetTransmissionReadyTimeout>

  /* Timing for the various programming phases of the radio, modem and memory
  *  pointers.
  */
  LL_RADIO_SetConfigurationEndDuration(CONFIG_END_DURATION);
1004e05a:	2014      	movs	r0, #20
1004e05c:	f7ff fdd0 	bl	1004dc00 <LL_RADIO_SetConfigurationEndDuration>
  LL_RADIO_SetTxDataReadyCheck(CHECK_TXDATAREADY);
1004e060:	2005      	movs	r0, #5
1004e062:	f7ff fde3 	bl	1004dc2c <LL_RADIO_SetTxDataReadyCheck>

  LL_RADIO_ChkFlagAutoclearEnable_Enable();
1004e066:	f7ff fe43 	bl	1004dcf0 <LL_RADIO_ChkFlagAutoclearEnable_Enable>
  LL_RADIO_NoActiveLErrorInterrupt_Enable();
1004e06a:	f7ff fe4f 	bl	1004dd0c <LL_RADIO_NoActiveLErrorInterrupt_Enable>
  LL_RADIO_TxRxSkipInterrupt_Enable();
1004e06e:	f7ff fe5b 	bl	1004dd28 <LL_RADIO_TxRxSkipInterrupt_Enable>

#if defined(GLOBAL_WORD6_DEFAULTANTENNAID_Msk)
  LL_RADIO_SetDefaultAntennaID(0);
1004e072:	2000      	movs	r0, #0
1004e074:	f7ff fe74 	bl	1004dd60 <LL_RADIO_SetDefaultAntennaID>
  /* The commands in the hot table start at word 4
  * The words 0 to 2 are used to point to the command list
  * for the various trigger events, word 3 is a null command
  * (see function BLEPLAT_CNTR_SetRadioConfigData)
  */
  index = 0;
1004e078:	2013      	movs	r0, #19
1004e07a:	183b      	adds	r3, r7, r0
1004e07c:	2200      	movs	r2, #0
1004e07e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004e080:	183b      	adds	r3, r7, r0
1004e082:	781b      	ldrb	r3, [r3, #0]
1004e084:	183a      	adds	r2, r7, r0
1004e086:	1c59      	adds	r1, r3, #1
1004e088:	7011      	strb	r1, [r2, #0]
1004e08a:	001a      	movs	r2, r3
1004e08c:	697b      	ldr	r3, [r7, #20]
1004e08e:	189b      	adds	r3, r3, r2
1004e090:	2201      	movs	r2, #1
1004e092:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS1_ANA_ENG;
1004e094:	183b      	adds	r3, r7, r0
1004e096:	781b      	ldrb	r3, [r3, #0]
1004e098:	183a      	adds	r2, r7, r0
1004e09a:	1c59      	adds	r1, r3, #1
1004e09c:	7011      	strb	r1, [r2, #0]
1004e09e:	001a      	movs	r2, r3
1004e0a0:	697b      	ldr	r3, [r7, #20]
1004e0a2:	189b      	adds	r3, r3, r2
1004e0a4:	225e      	movs	r2, #94	@ 0x5e
1004e0a6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS1_ANA_ENG;
1004e0a8:	4a71      	ldr	r2, [pc, #452]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004e0aa:	239e      	movs	r3, #158	@ 0x9e
1004e0ac:	009b      	lsls	r3, r3, #2
1004e0ae:	58d1      	ldr	r1, [r2, r3]
1004e0b0:	183b      	adds	r3, r7, r0
1004e0b2:	781b      	ldrb	r3, [r3, #0]
1004e0b4:	0004      	movs	r4, r0
1004e0b6:	183a      	adds	r2, r7, r0
1004e0b8:	1c58      	adds	r0, r3, #1
1004e0ba:	7010      	strb	r0, [r2, #0]
1004e0bc:	001a      	movs	r2, r3
1004e0be:	697b      	ldr	r3, [r7, #20]
1004e0c0:	189b      	adds	r3, r3, r2
1004e0c2:	b2ca      	uxtb	r2, r1
1004e0c4:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004e0c6:	0020      	movs	r0, r4
1004e0c8:	183b      	adds	r3, r7, r0
1004e0ca:	781b      	ldrb	r3, [r3, #0]
1004e0cc:	183a      	adds	r2, r7, r0
1004e0ce:	1c59      	adds	r1, r3, #1
1004e0d0:	7011      	strb	r1, [r2, #0]
1004e0d2:	001a      	movs	r2, r3
1004e0d4:	697b      	ldr	r3, [r7, #20]
1004e0d6:	189b      	adds	r3, r3, r2
1004e0d8:	2201      	movs	r2, #1
1004e0da:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS0_ANA_ENG;
1004e0dc:	183b      	adds	r3, r7, r0
1004e0de:	781b      	ldrb	r3, [r3, #0]
1004e0e0:	183a      	adds	r2, r7, r0
1004e0e2:	1c59      	adds	r1, r3, #1
1004e0e4:	7011      	strb	r1, [r2, #0]
1004e0e6:	001a      	movs	r2, r3
1004e0e8:	697b      	ldr	r3, [r7, #20]
1004e0ea:	189b      	adds	r3, r3, r2
1004e0ec:	225d      	movs	r2, #93	@ 0x5d
1004e0ee:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS0_ANA_ENG;
1004e0f0:	4a5f      	ldr	r2, [pc, #380]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004e0f2:	239d      	movs	r3, #157	@ 0x9d
1004e0f4:	009b      	lsls	r3, r3, #2
1004e0f6:	58d1      	ldr	r1, [r2, r3]
1004e0f8:	183b      	adds	r3, r7, r0
1004e0fa:	781b      	ldrb	r3, [r3, #0]
1004e0fc:	0004      	movs	r4, r0
1004e0fe:	183a      	adds	r2, r7, r0
1004e100:	1c58      	adds	r0, r3, #1
1004e102:	7010      	strb	r0, [r2, #0]
1004e104:	001a      	movs	r2, r3
1004e106:	697b      	ldr	r3, [r7, #20]
1004e108:	189b      	adds	r3, r3, r2
1004e10a:	b2ca      	uxtb	r2, r1
1004e10c:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
1004e10e:	0020      	movs	r0, r4
1004e110:	183b      	adds	r3, r7, r0
1004e112:	781b      	ldrb	r3, [r3, #0]
1004e114:	183a      	adds	r2, r7, r0
1004e116:	1c59      	adds	r1, r3, #1
1004e118:	7011      	strb	r1, [r2, #0]
1004e11a:	001a      	movs	r2, r3
1004e11c:	697b      	ldr	r3, [r7, #20]
1004e11e:	189b      	adds	r3, r3, r2
1004e120:	2201      	movs	r2, #1
1004e122:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_RXADC_ANA_USR;
1004e124:	183b      	adds	r3, r7, r0
1004e126:	781b      	ldrb	r3, [r3, #0]
1004e128:	183a      	adds	r2, r7, r0
1004e12a:	1c59      	adds	r1, r3, #1
1004e12c:	7011      	strb	r1, [r2, #0]
1004e12e:	001a      	movs	r2, r3
1004e130:	697b      	ldr	r3, [r7, #20]
1004e132:	189b      	adds	r3, r3, r2
1004e134:	2252      	movs	r2, #82	@ 0x52
1004e136:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->RXADC_ANA_USR;
1004e138:	4a4d      	ldr	r2, [pc, #308]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004e13a:	2392      	movs	r3, #146	@ 0x92
1004e13c:	009b      	lsls	r3, r3, #2
1004e13e:	58d1      	ldr	r1, [r2, r3]
1004e140:	183b      	adds	r3, r7, r0
1004e142:	781b      	ldrb	r3, [r3, #0]
1004e144:	0004      	movs	r4, r0
1004e146:	183a      	adds	r2, r7, r0
1004e148:	1c58      	adds	r0, r3, #1
1004e14a:	7010      	strb	r0, [r2, #0]
1004e14c:	001a      	movs	r2, r3
1004e14e:	697b      	ldr	r3, [r7, #20]
1004e150:	189b      	adds	r3, r3, r2
1004e152:	b2ca      	uxtb	r2, r1
1004e154:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
1004e156:	0020      	movs	r0, r4
1004e158:	183b      	adds	r3, r7, r0
1004e15a:	781b      	ldrb	r3, [r3, #0]
1004e15c:	183a      	adds	r2, r7, r0
1004e15e:	1c59      	adds	r1, r3, #1
1004e160:	7011      	strb	r1, [r2, #0]
1004e162:	001a      	movs	r2, r3
1004e164:	697b      	ldr	r3, [r7, #20]
1004e166:	189b      	adds	r3, r3, r2
1004e168:	2201      	movs	r2, #1
1004e16a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_AFC1_DIG_ENG;
1004e16c:	183b      	adds	r3, r7, r0
1004e16e:	781b      	ldrb	r3, [r3, #0]
1004e170:	183a      	adds	r2, r7, r0
1004e172:	1c59      	adds	r1, r3, #1
1004e174:	7011      	strb	r1, [r2, #0]
1004e176:	001a      	movs	r2, r3
1004e178:	697b      	ldr	r3, [r7, #20]
1004e17a:	189b      	adds	r3, r3, r2
1004e17c:	2212      	movs	r2, #18
1004e17e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->AFC1_DIG_ENG;
1004e180:	4a3b      	ldr	r2, [pc, #236]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004e182:	23a4      	movs	r3, #164	@ 0xa4
1004e184:	005b      	lsls	r3, r3, #1
1004e186:	58d1      	ldr	r1, [r2, r3]
1004e188:	183b      	adds	r3, r7, r0
1004e18a:	781b      	ldrb	r3, [r3, #0]
1004e18c:	0004      	movs	r4, r0
1004e18e:	183a      	adds	r2, r7, r0
1004e190:	1c58      	adds	r0, r3, #1
1004e192:	7010      	strb	r0, [r2, #0]
1004e194:	001a      	movs	r2, r3
1004e196:	697b      	ldr	r3, [r7, #20]
1004e198:	189b      	adds	r3, r3, r2
1004e19a:	b2ca      	uxtb	r2, r1
1004e19c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004e19e:	0020      	movs	r0, r4
1004e1a0:	183b      	adds	r3, r7, r0
1004e1a2:	781b      	ldrb	r3, [r3, #0]
1004e1a4:	183a      	adds	r2, r7, r0
1004e1a6:	1c59      	adds	r1, r3, #1
1004e1a8:	7011      	strb	r1, [r2, #0]
1004e1aa:	001a      	movs	r2, r3
1004e1ac:	697b      	ldr	r3, [r7, #20]
1004e1ae:	189b      	adds	r3, r3, r2
1004e1b0:	2201      	movs	r2, #1
1004e1b2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_DIG_ENG;
1004e1b4:	183b      	adds	r3, r7, r0
1004e1b6:	781b      	ldrb	r3, [r3, #0]
1004e1b8:	183a      	adds	r2, r7, r0
1004e1ba:	1c59      	adds	r1, r3, #1
1004e1bc:	7011      	strb	r1, [r2, #0]
1004e1be:	001a      	movs	r2, r3
1004e1c0:	697b      	ldr	r3, [r7, #20]
1004e1c2:	189b      	adds	r3, r3, r2
1004e1c4:	2215      	movs	r2, #21
1004e1c6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_DIG_ENG;
1004e1c8:	4a29      	ldr	r2, [pc, #164]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004e1ca:	23aa      	movs	r3, #170	@ 0xaa
1004e1cc:	005b      	lsls	r3, r3, #1
1004e1ce:	58d1      	ldr	r1, [r2, r3]
1004e1d0:	183b      	adds	r3, r7, r0
1004e1d2:	781b      	ldrb	r3, [r3, #0]
1004e1d4:	0004      	movs	r4, r0
1004e1d6:	183a      	adds	r2, r7, r0
1004e1d8:	1c58      	adds	r0, r3, #1
1004e1da:	7010      	strb	r0, [r2, #0]
1004e1dc:	001a      	movs	r2, r3
1004e1de:	697b      	ldr	r3, [r7, #20]
1004e1e0:	189b      	adds	r3, r3, r2
1004e1e2:	b2ca      	uxtb	r2, r1
1004e1e4:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004e1e6:	0020      	movs	r0, r4
1004e1e8:	183b      	adds	r3, r7, r0
1004e1ea:	781b      	ldrb	r3, [r3, #0]
1004e1ec:	183a      	adds	r2, r7, r0
1004e1ee:	1c59      	adds	r1, r3, #1
1004e1f0:	7011      	strb	r1, [r2, #0]
1004e1f2:	001a      	movs	r2, r3
1004e1f4:	697b      	ldr	r3, [r7, #20]
1004e1f6:	189b      	adds	r3, r3, r2
1004e1f8:	2201      	movs	r2, #1
1004e1fa:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_LR;
1004e1fc:	183b      	adds	r3, r7, r0
1004e1fe:	781b      	ldrb	r3, [r3, #0]
1004e200:	183a      	adds	r2, r7, r0
1004e202:	1c59      	adds	r1, r3, #1
1004e204:	7011      	strb	r1, [r2, #0]
1004e206:	001a      	movs	r2, r3
1004e208:	697b      	ldr	r3, [r7, #20]
1004e20a:	189b      	adds	r3, r3, r2
1004e20c:	221a      	movs	r2, #26
1004e20e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_LR;
1004e210:	4a17      	ldr	r2, [pc, #92]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004e212:	23b4      	movs	r3, #180	@ 0xb4
1004e214:	005b      	lsls	r3, r3, #1
1004e216:	58d1      	ldr	r1, [r2, r3]
1004e218:	183b      	adds	r3, r7, r0
1004e21a:	781b      	ldrb	r3, [r3, #0]
1004e21c:	0004      	movs	r4, r0
1004e21e:	183a      	adds	r2, r7, r0
1004e220:	1c58      	adds	r0, r3, #1
1004e222:	7010      	strb	r0, [r2, #0]
1004e224:	001a      	movs	r2, r3
1004e226:	697b      	ldr	r3, [r7, #20]
1004e228:	189b      	adds	r3, r3, r2
1004e22a:	b2ca      	uxtb	r2, r1
1004e22c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004e22e:	0020      	movs	r0, r4
1004e230:	183b      	adds	r3, r7, r0
1004e232:	781b      	ldrb	r3, [r3, #0]
1004e234:	183a      	adds	r2, r7, r0
1004e236:	1c59      	adds	r1, r3, #1
1004e238:	7011      	strb	r1, [r2, #0]
1004e23a:	001a      	movs	r2, r3
1004e23c:	697b      	ldr	r3, [r7, #20]
1004e23e:	189b      	adds	r3, r3, r2
1004e240:	2201      	movs	r2, #1
1004e242:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_RSSI_THR_DIG_ENG;
1004e244:	183b      	adds	r3, r7, r0
1004e246:	781b      	ldrb	r3, [r3, #0]
1004e248:	183a      	adds	r2, r7, r0
1004e24a:	1c59      	adds	r1, r3, #1
1004e24c:	7011      	strb	r1, [r2, #0]
1004e24e:	001a      	movs	r2, r3
1004e250:	697b      	ldr	r3, [r7, #20]
1004e252:	189b      	adds	r3, r3, r2
1004e254:	2222      	movs	r2, #34	@ 0x22
1004e256:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_RSSI_THR_DIG_ENG;
1004e258:	4a05      	ldr	r2, [pc, #20]	@ (1004e270 <HAL_RADIO_Init+0x488>)
1004e25a:	23c4      	movs	r3, #196	@ 0xc4
1004e25c:	005b      	lsls	r3, r3, #1
1004e25e:	58d1      	ldr	r1, [r2, r3]
1004e260:	183b      	adds	r3, r7, r0
1004e262:	781b      	ldrb	r3, [r3, #0]
1004e264:	0004      	movs	r4, r0
1004e266:	e005      	b.n	1004e274 <HAL_RADIO_Init+0x48c>
1004e268:	200000c0 	.word	0x200000c0
1004e26c:	60001800 	.word	0x60001800
1004e270:	60001400 	.word	0x60001400
1004e274:	183a      	adds	r2, r7, r0
1004e276:	1c58      	adds	r0, r3, #1
1004e278:	7010      	strb	r0, [r2, #0]
1004e27a:	001a      	movs	r2, r3
1004e27c:	697b      	ldr	r3, [r7, #20]
1004e27e:	189b      	adds	r3, r3, r2
1004e280:	b2ca      	uxtb	r2, r1
1004e282:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004e284:	0020      	movs	r0, r4
1004e286:	183b      	adds	r3, r7, r0
1004e288:	781b      	ldrb	r3, [r3, #0]
1004e28a:	183a      	adds	r2, r7, r0
1004e28c:	1c59      	adds	r1, r3, #1
1004e28e:	7011      	strb	r1, [r2, #0]
1004e290:	001a      	movs	r2, r3
1004e292:	697b      	ldr	r3, [r7, #20]
1004e294:	189b      	adds	r3, r3, r2
1004e296:	2201      	movs	r2, #1
1004e298:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_PD_THR_DIG_ENG;
1004e29a:	183b      	adds	r3, r7, r0
1004e29c:	781b      	ldrb	r3, [r3, #0]
1004e29e:	183a      	adds	r2, r7, r0
1004e2a0:	1c59      	adds	r1, r3, #1
1004e2a2:	7011      	strb	r1, [r2, #0]
1004e2a4:	001a      	movs	r2, r3
1004e2a6:	697b      	ldr	r3, [r7, #20]
1004e2a8:	189b      	adds	r3, r3, r2
1004e2aa:	2221      	movs	r2, #33	@ 0x21
1004e2ac:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_PD_THR_DIG_ENG;
1004e2ae:	4a6d      	ldr	r2, [pc, #436]	@ (1004e464 <HAL_RADIO_Init+0x67c>)
1004e2b0:	23c2      	movs	r3, #194	@ 0xc2
1004e2b2:	005b      	lsls	r3, r3, #1
1004e2b4:	58d1      	ldr	r1, [r2, r3]
1004e2b6:	183b      	adds	r3, r7, r0
1004e2b8:	781b      	ldrb	r3, [r3, #0]
1004e2ba:	0004      	movs	r4, r0
1004e2bc:	183a      	adds	r2, r7, r0
1004e2be:	1c58      	adds	r0, r3, #1
1004e2c0:	7010      	strb	r0, [r2, #0]
1004e2c2:	001a      	movs	r2, r3
1004e2c4:	697b      	ldr	r3, [r7, #20]
1004e2c6:	189b      	adds	r3, r3, r2
1004e2c8:	b2ca      	uxtb	r2, r1
1004e2ca:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004e2cc:	0020      	movs	r0, r4
1004e2ce:	183b      	adds	r3, r7, r0
1004e2d0:	781b      	ldrb	r3, [r3, #0]
1004e2d2:	183a      	adds	r2, r7, r0
1004e2d4:	1c59      	adds	r1, r3, #1
1004e2d6:	7011      	strb	r1, [r2, #0]
1004e2d8:	001a      	movs	r2, r3
1004e2da:	697b      	ldr	r3, [r7, #20]
1004e2dc:	189b      	adds	r3, r3, r2
1004e2de:	2201      	movs	r2, #1
1004e2e0:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_AAC_THR_DIG_ENG;
1004e2e2:	183b      	adds	r3, r7, r0
1004e2e4:	781b      	ldrb	r3, [r3, #0]
1004e2e6:	183a      	adds	r2, r7, r0
1004e2e8:	1c59      	adds	r1, r3, #1
1004e2ea:	7011      	strb	r1, [r2, #0]
1004e2ec:	001a      	movs	r2, r3
1004e2ee:	697b      	ldr	r3, [r7, #20]
1004e2f0:	189b      	adds	r3, r3, r2
1004e2f2:	2223      	movs	r2, #35	@ 0x23
1004e2f4:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_AAC_THR_DIG_ENG;
1004e2f6:	4a5b      	ldr	r2, [pc, #364]	@ (1004e464 <HAL_RADIO_Init+0x67c>)
1004e2f8:	23c6      	movs	r3, #198	@ 0xc6
1004e2fa:	005b      	lsls	r3, r3, #1
1004e2fc:	58d1      	ldr	r1, [r2, r3]
1004e2fe:	183b      	adds	r3, r7, r0
1004e300:	781b      	ldrb	r3, [r3, #0]
1004e302:	0004      	movs	r4, r0
1004e304:	183a      	adds	r2, r7, r0
1004e306:	1c58      	adds	r0, r3, #1
1004e308:	7010      	strb	r0, [r2, #0]
1004e30a:	001a      	movs	r2, r3
1004e30c:	697b      	ldr	r3, [r7, #20]
1004e30e:	189b      	adds	r3, r3, r2
1004e310:	b2ca      	uxtb	r2, r1
1004e312:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004e314:	0020      	movs	r0, r4
1004e316:	183b      	adds	r3, r7, r0
1004e318:	781b      	ldrb	r3, [r3, #0]
1004e31a:	183a      	adds	r2, r7, r0
1004e31c:	1c59      	adds	r1, r3, #1
1004e31e:	7011      	strb	r1, [r2, #0]
1004e320:	001a      	movs	r2, r3
1004e322:	697b      	ldr	r3, [r7, #20]
1004e324:	189b      	adds	r3, r3, r2
1004e326:	2201      	movs	r2, #1
1004e328:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_VIT_CONF_DIG_ENG;
1004e32a:	183b      	adds	r3, r7, r0
1004e32c:	781b      	ldrb	r3, [r3, #0]
1004e32e:	183a      	adds	r2, r7, r0
1004e330:	1c59      	adds	r1, r3, #1
1004e332:	7011      	strb	r1, [r2, #0]
1004e334:	001a      	movs	r2, r3
1004e336:	697b      	ldr	r3, [r7, #20]
1004e338:	189b      	adds	r3, r3, r2
1004e33a:	221b      	movs	r2, #27
1004e33c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->VIT_CONF_DIG_ENG;
1004e33e:	4a49      	ldr	r2, [pc, #292]	@ (1004e464 <HAL_RADIO_Init+0x67c>)
1004e340:	23b6      	movs	r3, #182	@ 0xb6
1004e342:	005b      	lsls	r3, r3, #1
1004e344:	58d1      	ldr	r1, [r2, r3]
1004e346:	183b      	adds	r3, r7, r0
1004e348:	781b      	ldrb	r3, [r3, #0]
1004e34a:	0004      	movs	r4, r0
1004e34c:	183a      	adds	r2, r7, r0
1004e34e:	1c58      	adds	r0, r3, #1
1004e350:	7010      	strb	r0, [r2, #0]
1004e352:	001a      	movs	r2, r3
1004e354:	697b      	ldr	r3, [r7, #20]
1004e356:	189b      	adds	r3, r3, r2
1004e358:	b2ca      	uxtb	r2, r1
1004e35a:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
  hot_table_radio_config[index++] = 0x01;
1004e35c:	0020      	movs	r0, r4
1004e35e:	183b      	adds	r3, r7, r0
1004e360:	781b      	ldrb	r3, [r3, #0]
1004e362:	183a      	adds	r2, r7, r0
1004e364:	1c59      	adds	r1, r3, #1
1004e366:	7011      	strb	r1, [r2, #0]
1004e368:	001a      	movs	r2, r3
1004e36a:	697b      	ldr	r3, [r7, #20]
1004e36c:	189b      	adds	r3, r3, r2
1004e36e:	2201      	movs	r2, #1
1004e370:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG0_USR;
1004e372:	183b      	adds	r3, r7, r0
1004e374:	781b      	ldrb	r3, [r3, #0]
1004e376:	183a      	adds	r2, r7, r0
1004e378:	1c59      	adds	r1, r3, #1
1004e37a:	7011      	strb	r1, [r2, #0]
1004e37c:	001a      	movs	r2, r3
1004e37e:	697b      	ldr	r3, [r7, #20]
1004e380:	189b      	adds	r3, r3, r2
1004e382:	2290      	movs	r2, #144	@ 0x90
1004e384:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG0_USR;
1004e386:	4a37      	ldr	r2, [pc, #220]	@ (1004e464 <HAL_RADIO_Init+0x67c>)
1004e388:	23d0      	movs	r3, #208	@ 0xd0
1004e38a:	009b      	lsls	r3, r3, #2
1004e38c:	58d1      	ldr	r1, [r2, r3]
1004e38e:	183b      	adds	r3, r7, r0
1004e390:	781b      	ldrb	r3, [r3, #0]
1004e392:	0004      	movs	r4, r0
1004e394:	183a      	adds	r2, r7, r0
1004e396:	1c58      	adds	r0, r3, #1
1004e398:	7010      	strb	r0, [r2, #0]
1004e39a:	001a      	movs	r2, r3
1004e39c:	697b      	ldr	r3, [r7, #20]
1004e39e:	189b      	adds	r3, r3, r2
1004e3a0:	b2ca      	uxtb	r2, r1
1004e3a2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004e3a4:	0020      	movs	r0, r4
1004e3a6:	183b      	adds	r3, r7, r0
1004e3a8:	781b      	ldrb	r3, [r3, #0]
1004e3aa:	183a      	adds	r2, r7, r0
1004e3ac:	1c59      	adds	r1, r3, #1
1004e3ae:	7011      	strb	r1, [r2, #0]
1004e3b0:	001a      	movs	r2, r3
1004e3b2:	697b      	ldr	r3, [r7, #20]
1004e3b4:	189b      	adds	r3, r3, r2
1004e3b6:	2201      	movs	r2, #1
1004e3b8:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG1_USR;
1004e3ba:	183b      	adds	r3, r7, r0
1004e3bc:	781b      	ldrb	r3, [r3, #0]
1004e3be:	183a      	adds	r2, r7, r0
1004e3c0:	1c59      	adds	r1, r3, #1
1004e3c2:	7011      	strb	r1, [r2, #0]
1004e3c4:	001a      	movs	r2, r3
1004e3c6:	697b      	ldr	r3, [r7, #20]
1004e3c8:	189b      	adds	r3, r3, r2
1004e3ca:	2291      	movs	r2, #145	@ 0x91
1004e3cc:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG1_USR;
1004e3ce:	4a25      	ldr	r2, [pc, #148]	@ (1004e464 <HAL_RADIO_Init+0x67c>)
1004e3d0:	23d1      	movs	r3, #209	@ 0xd1
1004e3d2:	009b      	lsls	r3, r3, #2
1004e3d4:	58d1      	ldr	r1, [r2, r3]
1004e3d6:	183b      	adds	r3, r7, r0
1004e3d8:	781b      	ldrb	r3, [r3, #0]
1004e3da:	0004      	movs	r4, r0
1004e3dc:	183a      	adds	r2, r7, r0
1004e3de:	1c58      	adds	r0, r3, #1
1004e3e0:	7010      	strb	r0, [r2, #0]
1004e3e2:	001a      	movs	r2, r3
1004e3e4:	697b      	ldr	r3, [r7, #20]
1004e3e6:	189b      	adds	r3, r3, r2
1004e3e8:	b2ca      	uxtb	r2, r1
1004e3ea:	701a      	strb	r2, [r3, #0]
#endif
  hot_table_radio_config[index++] = 0x00;
1004e3ec:	193b      	adds	r3, r7, r4
1004e3ee:	781b      	ldrb	r3, [r3, #0]
1004e3f0:	193a      	adds	r2, r7, r4
1004e3f2:	1c59      	adds	r1, r3, #1
1004e3f4:	7011      	strb	r1, [r2, #0]
1004e3f6:	001a      	movs	r2, r3
1004e3f8:	697b      	ldr	r3, [r7, #20]
1004e3fa:	189b      	adds	r3, r3, r2
1004e3fc:	2200      	movs	r2, #0
1004e3fe:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config_u32[0] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 1 executed when Wakeup timer triggers */
1004e400:	4a19      	ldr	r2, [pc, #100]	@ (1004e468 <HAL_RADIO_Init+0x680>)
1004e402:	4b1a      	ldr	r3, [pc, #104]	@ (1004e46c <HAL_RADIO_Init+0x684>)
1004e404:	601a      	str	r2, [r3, #0]
  hot_table_radio_config_u32[1] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 2 executed when Timer1 triggers       */
1004e406:	4a18      	ldr	r2, [pc, #96]	@ (1004e468 <HAL_RADIO_Init+0x680>)
1004e408:	4b18      	ldr	r3, [pc, #96]	@ (1004e46c <HAL_RADIO_Init+0x684>)
1004e40a:	605a      	str	r2, [r3, #4]
  hot_table_radio_config_u32[2] = (uint32_t)(&hot_table_radio_config_u32[3]); /* Point to Port 0 command list 3 executed when Timer2 triggers       */
1004e40c:	4a18      	ldr	r2, [pc, #96]	@ (1004e470 <HAL_RADIO_Init+0x688>)
1004e40e:	4b17      	ldr	r3, [pc, #92]	@ (1004e46c <HAL_RADIO_Init+0x684>)
1004e410:	609a      	str	r2, [r3, #8]
  hot_table_radio_config_u32[3] = 0x00000000;                /* Null command */
1004e412:	4b16      	ldr	r3, [pc, #88]	@ (1004e46c <HAL_RADIO_Init+0x684>)
1004e414:	2200      	movs	r2, #0
1004e416:	60da      	str	r2, [r3, #12]

  LL_RADIO_SetRadioConfigurationAddressPointer(hot_table_radio_config_u32[0]);
1004e418:	4b14      	ldr	r3, [pc, #80]	@ (1004e46c <HAL_RADIO_Init+0x684>)
1004e41a:	681b      	ldr	r3, [r3, #0]
1004e41c:	0018      	movs	r0, r3
1004e41e:	f7ff fb3d 	bl	1004da9c <LL_RADIO_SetRadioConfigurationAddressPointer>
  /* Reload radio config pointer */
  RRM->UDRA_CTRL0 = RRM_UDRA_CTRL0_RELOAD_RDCFGPTR;
1004e422:	4b10      	ldr	r3, [pc, #64]	@ (1004e464 <HAL_RADIO_Init+0x67c>)
1004e424:	2201      	movs	r2, #1
1004e426:	611a      	str	r2, [r3, #16]
  LL_RADIO_Active2ErrorInterrupt_Enable();
1004e428:	f7ff fc8c 	bl	1004dd44 <LL_RADIO_Active2ErrorInterrupt_Enable>
  globalParameters.back2backTime = BACK_TO_BACK_TIME;
  globalParameters.tone_start_stop_flag = 0;
#endif

  /*Clear all interrupts of the BLUE Controller*/
  uint32_t int_val_tmp = BLUE->INTERRUPT1REG;
1004e42c:	23c0      	movs	r3, #192	@ 0xc0
1004e42e:	05db      	lsls	r3, r3, #23
1004e430:	685b      	ldr	r3, [r3, #4]
1004e432:	60fb      	str	r3, [r7, #12]
  BLUE->INTERRUPT1REG = int_val_tmp;
1004e434:	23c0      	movs	r3, #192	@ 0xc0
1004e436:	05db      	lsls	r3, r3, #23
1004e438:	68fa      	ldr	r2, [r7, #12]
1004e43a:	605a      	str	r2, [r3, #4]

  /*BLE wake up IRQ Status clearing and enable*/
  WAKEUP->WAKEUP_BLE_IRQ_STATUS |= 1;
1004e43c:	4b0d      	ldr	r3, [pc, #52]	@ (1004e474 <HAL_RADIO_Init+0x68c>)
1004e43e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004e440:	4b0c      	ldr	r3, [pc, #48]	@ (1004e474 <HAL_RADIO_Init+0x68c>)
1004e442:	2101      	movs	r1, #1
1004e444:	430a      	orrs	r2, r1
1004e446:	645a      	str	r2, [r3, #68]	@ 0x44
  WAKEUP->WAKEUP_BLE_IRQ_ENABLE |= 1;
1004e448:	4b0a      	ldr	r3, [pc, #40]	@ (1004e474 <HAL_RADIO_Init+0x68c>)
1004e44a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
1004e44c:	4b09      	ldr	r3, [pc, #36]	@ (1004e474 <HAL_RADIO_Init+0x68c>)
1004e44e:	2101      	movs	r1, #1
1004e450:	430a      	orrs	r2, r1
1004e452:	641a      	str	r2, [r3, #64]	@ 0x40
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  int_val_tmp = BLUE->INTERRUPT1REG;
1004e454:	23c0      	movs	r3, #192	@ 0xc0
1004e456:	05db      	lsls	r3, r3, #23
1004e458:	685b      	ldr	r3, [r3, #4]
1004e45a:	60fb      	str	r3, [r7, #12]

  return;
1004e45c:	46c0      	nop			@ (mov r8, r8)
}
1004e45e:	46bd      	mov	sp, r7
1004e460:	b00d      	add	sp, #52	@ 0x34
1004e462:	bd90      	pop	{r4, r7, pc}
1004e464:	60001400 	.word	0x60001400
1004e468:	20000f24 	.word	0x20000f24
1004e46c:	20000f14 	.word	0x20000f14
1004e470:	20000f20 	.word	0x20000f20
1004e474:	60001800 	.word	0x60001800

1004e478 <HAL_RADIO_ReadRSSI>:
/**
  * @brief  Read RSSI
  * @retval int8_t: RSSI in dBm
  */
int8_t HAL_RADIO_ReadRSSI(void)
{
1004e478:	b580      	push	{r7, lr}
1004e47a:	b086      	sub	sp, #24
1004e47c:	af00      	add	r7, sp, #0
  int32_t rssi_dbm;
  uint32_t rssi0 = RRM->RSSI0_DIG_OUT;
1004e47e:	4a24      	ldr	r2, [pc, #144]	@ (1004e510 <HAL_RADIO_ReadRSSI+0x98>)
1004e480:	23a9      	movs	r3, #169	@ 0xa9
1004e482:	009b      	lsls	r3, r3, #2
1004e484:	58d3      	ldr	r3, [r2, r3]
1004e486:	60fb      	str	r3, [r7, #12]
  uint32_t rssi1 = RRM->RSSI1_DIG_OUT;
1004e488:	4a21      	ldr	r2, [pc, #132]	@ (1004e510 <HAL_RADIO_ReadRSSI+0x98>)
1004e48a:	23aa      	movs	r3, #170	@ 0xaa
1004e48c:	009b      	lsls	r3, r3, #2
1004e48e:	58d3      	ldr	r3, [r2, r3]
1004e490:	60bb      	str	r3, [r7, #8]

  uint32_t rssi_int16 = ((rssi1 & 0xFF) << 8) | (rssi0 & 0xFF);
1004e492:	68bb      	ldr	r3, [r7, #8]
1004e494:	021b      	lsls	r3, r3, #8
1004e496:	041b      	lsls	r3, r3, #16
1004e498:	0c1a      	lsrs	r2, r3, #16
1004e49a:	68fb      	ldr	r3, [r7, #12]
1004e49c:	21ff      	movs	r1, #255	@ 0xff
1004e49e:	400b      	ands	r3, r1
1004e4a0:	4313      	orrs	r3, r2
1004e4a2:	613b      	str	r3, [r7, #16]
  uint32_t reg_agc = RRM->AGC_DIG_OUT;
1004e4a4:	4a1a      	ldr	r2, [pc, #104]	@ (1004e510 <HAL_RADIO_ReadRSSI+0x98>)
1004e4a6:	23ab      	movs	r3, #171	@ 0xab
1004e4a8:	009b      	lsls	r3, r3, #2
1004e4aa:	58d3      	ldr	r3, [r2, r3]
1004e4ac:	607b      	str	r3, [r7, #4]

  if ((rssi_int16 == 0U) || (reg_agc > 0xbU))
1004e4ae:	693b      	ldr	r3, [r7, #16]
1004e4b0:	2b00      	cmp	r3, #0
1004e4b2:	d002      	beq.n	1004e4ba <HAL_RADIO_ReadRSSI+0x42>
1004e4b4:	687b      	ldr	r3, [r7, #4]
1004e4b6:	2b0b      	cmp	r3, #11
1004e4b8:	d902      	bls.n	1004e4c0 <HAL_RADIO_ReadRSSI+0x48>
  {
    rssi_dbm = 127 ;
1004e4ba:	237f      	movs	r3, #127	@ 0x7f
1004e4bc:	617b      	str	r3, [r7, #20]
1004e4be:	e020      	b.n	1004e502 <HAL_RADIO_ReadRSSI+0x8a>
  }
  else
  {
    rssi_dbm = (int32_t)reg_agc * 6 - RSSI_OFFSET;//127 ;
1004e4c0:	687a      	ldr	r2, [r7, #4]
1004e4c2:	0013      	movs	r3, r2
1004e4c4:	005b      	lsls	r3, r3, #1
1004e4c6:	189b      	adds	r3, r3, r2
1004e4c8:	005b      	lsls	r3, r3, #1
1004e4ca:	3b77      	subs	r3, #119	@ 0x77
1004e4cc:	617b      	str	r3, [r7, #20]
    while (rssi_int16 > 30U)
1004e4ce:	e005      	b.n	1004e4dc <HAL_RADIO_ReadRSSI+0x64>
    {
      rssi_dbm = rssi_dbm + 6 ;
1004e4d0:	697b      	ldr	r3, [r7, #20]
1004e4d2:	3306      	adds	r3, #6
1004e4d4:	617b      	str	r3, [r7, #20]
      rssi_int16 = (rssi_int16 >> 1) ;
1004e4d6:	693b      	ldr	r3, [r7, #16]
1004e4d8:	085b      	lsrs	r3, r3, #1
1004e4da:	613b      	str	r3, [r7, #16]
    while (rssi_int16 > 30U)
1004e4dc:	693b      	ldr	r3, [r7, #16]
1004e4de:	2b1e      	cmp	r3, #30
1004e4e0:	d8f6      	bhi.n	1004e4d0 <HAL_RADIO_ReadRSSI+0x58>
    }
    rssi_dbm = rssi_dbm + (int32_t)(uint32_t)((417U * rssi_int16 + 18080U) >> 10);
1004e4e2:	693a      	ldr	r2, [r7, #16]
1004e4e4:	0013      	movs	r3, r2
1004e4e6:	005b      	lsls	r3, r3, #1
1004e4e8:	189b      	adds	r3, r3, r2
1004e4ea:	009b      	lsls	r3, r3, #2
1004e4ec:	189b      	adds	r3, r3, r2
1004e4ee:	015b      	lsls	r3, r3, #5
1004e4f0:	189b      	adds	r3, r3, r2
1004e4f2:	4a08      	ldr	r2, [pc, #32]	@ (1004e514 <HAL_RADIO_ReadRSSI+0x9c>)
1004e4f4:	4694      	mov	ip, r2
1004e4f6:	4463      	add	r3, ip
1004e4f8:	0a9b      	lsrs	r3, r3, #10
1004e4fa:	001a      	movs	r2, r3
1004e4fc:	697b      	ldr	r3, [r7, #20]
1004e4fe:	189b      	adds	r3, r3, r2
1004e500:	617b      	str	r3, [r7, #20]
  }
  return (int8_t)rssi_dbm;
1004e502:	697b      	ldr	r3, [r7, #20]
1004e504:	b25b      	sxtb	r3, r3
}
1004e506:	0018      	movs	r0, r3
1004e508:	46bd      	mov	sp, r7
1004e50a:	b006      	add	sp, #24
1004e50c:	bd80      	pop	{r7, pc}
1004e50e:	46c0      	nop			@ (mov r8, r8)
1004e510:	60001400 	.word	0x60001400
1004e514:	000046a0 	.word	0x000046a0

1004e518 <HAL_RADIO_TXRX_IRQHandler>:
__weak void HAL_RADIO_TxRxSeqCallback(void)
{
}

void HAL_RADIO_TXRX_IRQHandler(void)
{
1004e518:	b580      	push	{r7, lr}
1004e51a:	b082      	sub	sp, #8
1004e51c:	af00      	add	r7, sp, #0
  uint32_t blue_status = BLUE->STATUSREG;
1004e51e:	23c0      	movs	r3, #192	@ 0xc0
1004e520:	05db      	lsls	r3, r3, #23
1004e522:	69db      	ldr	r3, [r3, #28]
1004e524:	607b      	str	r3, [r7, #4]
  uint32_t blue_interrupt = BLUE->INTERRUPT1REG;
1004e526:	23c0      	movs	r3, #192	@ 0xc0
1004e528:	05db      	lsls	r3, r3, #23
1004e52a:	685b      	ldr	r3, [r3, #4]
1004e52c:	603b      	str	r3, [r7, #0]

  /** clear all pending interrupts */
  BLUE->INTERRUPT1REG = blue_interrupt;
1004e52e:	23c0      	movs	r3, #192	@ 0xc0
1004e530:	05db      	lsls	r3, r3, #23
1004e532:	683a      	ldr	r2, [r7, #0]
1004e534:	605a      	str	r2, [r3, #4]

  HAL_RADIO_TIMER_EndOfRadioActivityIsr();
1004e536:	f000 fdd1 	bl	1004f0dc <HAL_RADIO_TIMER_EndOfRadioActivityIsr>

#if (USE_RADIO_PROPRIETARY_DRIVER == 1)
  HAL_RADIO_ActionPacketIsr(blue_status | blue_interrupt);
#endif

  HAL_RADIO_TxRxCallback(blue_status | blue_interrupt);
1004e53a:	687a      	ldr	r2, [r7, #4]
1004e53c:	683b      	ldr	r3, [r7, #0]
1004e53e:	4313      	orrs	r3, r2
1004e540:	0018      	movs	r0, r3
1004e542:	f7f5 fada 	bl	10043afa <HAL_RADIO_TxRxCallback>

  HAL_RADIO_TIMER_RadioTimerIsr();
1004e546:	f000 fdc3 	bl	1004f0d0 <HAL_RADIO_TIMER_RadioTimerIsr>
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  blue_interrupt = BLUE->INTERRUPT1REG;
1004e54a:	23c0      	movs	r3, #192	@ 0xc0
1004e54c:	05db      	lsls	r3, r3, #23
1004e54e:	685b      	ldr	r3, [r3, #4]
1004e550:	603b      	str	r3, [r7, #0]
}
1004e552:	46c0      	nop			@ (mov r8, r8)
1004e554:	46bd      	mov	sp, r7
1004e556:	b002      	add	sp, #8
1004e558:	bd80      	pop	{r7, pc}

1004e55a <HAL_RADIO_TXRX_SEQ_IRQHandler>:


void HAL_RADIO_TXRX_SEQ_IRQHandler(void)
{
1004e55a:	b580      	push	{r7, lr}
1004e55c:	af00      	add	r7, sp, #0
  HAL_RADIO_TxRxSeqCallback();
1004e55e:	f7fd f851 	bl	1004b604 <HAL_RADIO_TxRxSeqCallback>
}
1004e562:	46c0      	nop			@ (mov r8, r8)
1004e564:	46bd      	mov	sp, r7
1004e566:	bd80      	pop	{r7, pc}

1004e568 <__NVIC_EnableIRQ>:
{
1004e568:	b580      	push	{r7, lr}
1004e56a:	b082      	sub	sp, #8
1004e56c:	af00      	add	r7, sp, #0
1004e56e:	0002      	movs	r2, r0
1004e570:	1dfb      	adds	r3, r7, #7
1004e572:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004e574:	1dfb      	adds	r3, r7, #7
1004e576:	781b      	ldrb	r3, [r3, #0]
1004e578:	2b7f      	cmp	r3, #127	@ 0x7f
1004e57a:	d809      	bhi.n	1004e590 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1004e57c:	1dfb      	adds	r3, r7, #7
1004e57e:	781b      	ldrb	r3, [r3, #0]
1004e580:	001a      	movs	r2, r3
1004e582:	231f      	movs	r3, #31
1004e584:	401a      	ands	r2, r3
1004e586:	4b04      	ldr	r3, [pc, #16]	@ (1004e598 <__NVIC_EnableIRQ+0x30>)
1004e588:	2101      	movs	r1, #1
1004e58a:	4091      	lsls	r1, r2
1004e58c:	000a      	movs	r2, r1
1004e58e:	601a      	str	r2, [r3, #0]
}
1004e590:	46c0      	nop			@ (mov r8, r8)
1004e592:	46bd      	mov	sp, r7
1004e594:	b002      	add	sp, #8
1004e596:	bd80      	pop	{r7, pc}
1004e598:	e000e100 	.word	0xe000e100

1004e59c <LL_RADIO_TIMER_EnableTimer1>:
{
1004e59c:	b580      	push	{r7, lr}
1004e59e:	b082      	sub	sp, #8
1004e5a0:	af00      	add	r7, sp, #0
1004e5a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, LL_RADIO_TIMER_1);
1004e5a4:	687b      	ldr	r3, [r7, #4]
1004e5a6:	68db      	ldr	r3, [r3, #12]
1004e5a8:	2203      	movs	r2, #3
1004e5aa:	4393      	bics	r3, r2
1004e5ac:	2202      	movs	r2, #2
1004e5ae:	431a      	orrs	r2, r3
1004e5b0:	687b      	ldr	r3, [r7, #4]
1004e5b2:	60da      	str	r2, [r3, #12]
}
1004e5b4:	46c0      	nop			@ (mov r8, r8)
1004e5b6:	46bd      	mov	sp, r7
1004e5b8:	b002      	add	sp, #8
1004e5ba:	bd80      	pop	{r7, pc}

1004e5bc <LL_RADIO_TIMER_DisableTimer1>:
{
1004e5bc:	b580      	push	{r7, lr}
1004e5be:	b082      	sub	sp, #8
1004e5c0:	af00      	add	r7, sp, #0
1004e5c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004e5c4:	687b      	ldr	r3, [r7, #4]
1004e5c6:	68db      	ldr	r3, [r3, #12]
1004e5c8:	2203      	movs	r2, #3
1004e5ca:	4393      	bics	r3, r2
1004e5cc:	001a      	movs	r2, r3
1004e5ce:	687b      	ldr	r3, [r7, #4]
1004e5d0:	60da      	str	r2, [r3, #12]
}
1004e5d2:	46c0      	nop			@ (mov r8, r8)
1004e5d4:	46bd      	mov	sp, r7
1004e5d6:	b002      	add	sp, #8
1004e5d8:	bd80      	pop	{r7, pc}

1004e5da <LL_RADIO_TIMER_IsEnabledTimer1>:
{
1004e5da:	b580      	push	{r7, lr}
1004e5dc:	b082      	sub	sp, #8
1004e5de:	af00      	add	r7, sp, #0
1004e5e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION) == (LL_RADIO_TIMER_1)) ? 1UL : 0UL);
1004e5e2:	687b      	ldr	r3, [r7, #4]
1004e5e4:	68db      	ldr	r3, [r3, #12]
1004e5e6:	2203      	movs	r2, #3
1004e5e8:	4013      	ands	r3, r2
1004e5ea:	2b02      	cmp	r3, #2
1004e5ec:	d101      	bne.n	1004e5f2 <LL_RADIO_TIMER_IsEnabledTimer1+0x18>
1004e5ee:	2301      	movs	r3, #1
1004e5f0:	e000      	b.n	1004e5f4 <LL_RADIO_TIMER_IsEnabledTimer1+0x1a>
1004e5f2:	2300      	movs	r3, #0
}
1004e5f4:	0018      	movs	r0, r3
1004e5f6:	46bd      	mov	sp, r7
1004e5f8:	b002      	add	sp, #8
1004e5fa:	bd80      	pop	{r7, pc}

1004e5fc <LL_RADIO_TIMER_DisableTimer2>:
{
1004e5fc:	b580      	push	{r7, lr}
1004e5fe:	b082      	sub	sp, #8
1004e600:	af00      	add	r7, sp, #0
1004e602:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004e604:	687b      	ldr	r3, [r7, #4]
1004e606:	68db      	ldr	r3, [r3, #12]
1004e608:	2203      	movs	r2, #3
1004e60a:	4393      	bics	r3, r2
1004e60c:	001a      	movs	r2, r3
1004e60e:	687b      	ldr	r3, [r7, #4]
1004e610:	60da      	str	r2, [r3, #12]
}
1004e612:	46c0      	nop			@ (mov r8, r8)
1004e614:	46bd      	mov	sp, r7
1004e616:	b002      	add	sp, #8
1004e618:	bd80      	pop	{r7, pc}

1004e61a <LL_RADIO_TIMER_IsEnabledTimer2>:
{
1004e61a:	b580      	push	{r7, lr}
1004e61c:	b082      	sub	sp, #8
1004e61e:	af00      	add	r7, sp, #0
1004e620:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION) == (LL_RADIO_TIMER_2)) ? 1UL : 0UL);
1004e622:	687b      	ldr	r3, [r7, #4]
1004e624:	68db      	ldr	r3, [r3, #12]
1004e626:	2203      	movs	r2, #3
1004e628:	4013      	ands	r3, r2
1004e62a:	2b03      	cmp	r3, #3
1004e62c:	d101      	bne.n	1004e632 <LL_RADIO_TIMER_IsEnabledTimer2+0x18>
1004e62e:	2301      	movs	r3, #1
1004e630:	e000      	b.n	1004e634 <LL_RADIO_TIMER_IsEnabledTimer2+0x1a>
1004e632:	2300      	movs	r3, #0
}
1004e634:	0018      	movs	r0, r3
1004e636:	46bd      	mov	sp, r7
1004e638:	b002      	add	sp, #8
1004e63a:	bd80      	pop	{r7, pc}

1004e63c <LL_RADIO_TIMER_SetTimeout>:
{
1004e63c:	b580      	push	{r7, lr}
1004e63e:	b082      	sub	sp, #8
1004e640:	af00      	add	r7, sp, #0
1004e642:	6078      	str	r0, [r7, #4]
1004e644:	6039      	str	r1, [r7, #0]
  WRITE_REG(BLUEx->TIMEOUTREG, timeout);
1004e646:	687b      	ldr	r3, [r7, #4]
1004e648:	683a      	ldr	r2, [r7, #0]
1004e64a:	611a      	str	r2, [r3, #16]
}
1004e64c:	46c0      	nop			@ (mov r8, r8)
1004e64e:	46bd      	mov	sp, r7
1004e650:	b002      	add	sp, #8
1004e652:	bd80      	pop	{r7, pc}

1004e654 <LL_RADIO_TIMER_GetTimeout>:
{
1004e654:	b580      	push	{r7, lr}
1004e656:	b082      	sub	sp, #8
1004e658:	af00      	add	r7, sp, #0
1004e65a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(BLUEx->TIMEOUTREG));
1004e65c:	687b      	ldr	r3, [r7, #4]
1004e65e:	691b      	ldr	r3, [r3, #16]
}
1004e660:	0018      	movs	r0, r3
1004e662:	46bd      	mov	sp, r7
1004e664:	b002      	add	sp, #8
1004e666:	bd80      	pop	{r7, pc}

1004e668 <LL_RADIO_TIMER_EnableBLEWakeupTimer>:
{
1004e668:	b580      	push	{r7, lr}
1004e66a:	b082      	sub	sp, #8
1004e66c:	af00      	add	r7, sp, #0
1004e66e:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
1004e670:	687b      	ldr	r3, [r7, #4]
1004e672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004e674:	2280      	movs	r2, #128	@ 0x80
1004e676:	05d2      	lsls	r2, r2, #23
1004e678:	431a      	orrs	r2, r3
1004e67a:	687b      	ldr	r3, [r7, #4]
1004e67c:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004e67e:	46c0      	nop			@ (mov r8, r8)
1004e680:	46bd      	mov	sp, r7
1004e682:	b002      	add	sp, #8
1004e684:	bd80      	pop	{r7, pc}
	...

1004e688 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
1004e688:	b580      	push	{r7, lr}
1004e68a:	b082      	sub	sp, #8
1004e68c:	af00      	add	r7, sp, #0
1004e68e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
1004e690:	687b      	ldr	r3, [r7, #4]
1004e692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004e694:	4a03      	ldr	r2, [pc, #12]	@ (1004e6a4 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
1004e696:	401a      	ands	r2, r3
1004e698:	687b      	ldr	r3, [r7, #4]
1004e69a:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004e69c:	46c0      	nop			@ (mov r8, r8)
1004e69e:	46bd      	mov	sp, r7
1004e6a0:	b002      	add	sp, #8
1004e6a2:	bd80      	pop	{r7, pc}
1004e6a4:	bfffffff 	.word	0xbfffffff

1004e6a8 <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer>:
{
1004e6a8:	b580      	push	{r7, lr}
1004e6aa:	b082      	sub	sp, #8
1004e6ac:	af00      	add	r7, sp, #0
1004e6ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN) == (WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN)) ? 1UL : 0UL);
1004e6b0:	687b      	ldr	r3, [r7, #4]
1004e6b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004e6b4:	2380      	movs	r3, #128	@ 0x80
1004e6b6:	05db      	lsls	r3, r3, #23
1004e6b8:	401a      	ands	r2, r3
1004e6ba:	2380      	movs	r3, #128	@ 0x80
1004e6bc:	05db      	lsls	r3, r3, #23
1004e6be:	429a      	cmp	r2, r3
1004e6c0:	d101      	bne.n	1004e6c6 <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer+0x1e>
1004e6c2:	2301      	movs	r3, #1
1004e6c4:	e000      	b.n	1004e6c8 <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer+0x20>
1004e6c6:	2300      	movs	r3, #0
}
1004e6c8:	0018      	movs	r0, r3
1004e6ca:	46bd      	mov	sp, r7
1004e6cc:	b002      	add	sp, #8
1004e6ce:	bd80      	pop	{r7, pc}

1004e6d0 <LL_RADIO_TIMER_EnableCPUWakeupTimer>:
{
1004e6d0:	b580      	push	{r7, lr}
1004e6d2:	b082      	sub	sp, #8
1004e6d4:	af00      	add	r7, sp, #0
1004e6d6:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
1004e6d8:	687b      	ldr	r3, [r7, #4]
1004e6da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1004e6dc:	2280      	movs	r2, #128	@ 0x80
1004e6de:	05d2      	lsls	r2, r2, #23
1004e6e0:	431a      	orrs	r2, r3
1004e6e2:	687b      	ldr	r3, [r7, #4]
1004e6e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
1004e6e6:	46c0      	nop			@ (mov r8, r8)
1004e6e8:	46bd      	mov	sp, r7
1004e6ea:	b002      	add	sp, #8
1004e6ec:	bd80      	pop	{r7, pc}
	...

1004e6f0 <LL_RADIO_TIMER_DisableCPUWakeupTimer>:
{
1004e6f0:	b580      	push	{r7, lr}
1004e6f2:	b082      	sub	sp, #8
1004e6f4:	af00      	add	r7, sp, #0
1004e6f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
1004e6f8:	687b      	ldr	r3, [r7, #4]
1004e6fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1004e6fc:	4a03      	ldr	r2, [pc, #12]	@ (1004e70c <LL_RADIO_TIMER_DisableCPUWakeupTimer+0x1c>)
1004e6fe:	401a      	ands	r2, r3
1004e700:	687b      	ldr	r3, [r7, #4]
1004e702:	631a      	str	r2, [r3, #48]	@ 0x30
}
1004e704:	46c0      	nop			@ (mov r8, r8)
1004e706:	46bd      	mov	sp, r7
1004e708:	b002      	add	sp, #8
1004e70a:	bd80      	pop	{r7, pc}
1004e70c:	bfffffff 	.word	0xbfffffff

1004e710 <LL_RADIO_TIMER_SetWakeupOffset>:
{
1004e710:	b580      	push	{r7, lr}
1004e712:	b082      	sub	sp, #8
1004e714:	af00      	add	r7, sp, #0
1004e716:	6078      	str	r0, [r7, #4]
1004e718:	000a      	movs	r2, r1
1004e71a:	1cfb      	adds	r3, r7, #3
1004e71c:	701a      	strb	r2, [r3, #0]
  WRITE_REG(WAKEUPx->WAKEUP_OFFSET[0], (Time & 0xFF));
1004e71e:	1cfb      	adds	r3, r7, #3
1004e720:	781a      	ldrb	r2, [r3, #0]
1004e722:	687b      	ldr	r3, [r7, #4]
1004e724:	609a      	str	r2, [r3, #8]
}
1004e726:	46c0      	nop			@ (mov r8, r8)
1004e728:	46bd      	mov	sp, r7
1004e72a:	b002      	add	sp, #8
1004e72c:	bd80      	pop	{r7, pc}

1004e72e <LL_RADIO_TIMER_SetBLEWakeupTime>:
{
1004e72e:	b580      	push	{r7, lr}
1004e730:	b082      	sub	sp, #8
1004e732:	af00      	add	r7, sp, #0
1004e734:	6078      	str	r0, [r7, #4]
1004e736:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->BLUE_WAKEUP_TIME, Time);
1004e738:	687b      	ldr	r3, [r7, #4]
1004e73a:	683a      	ldr	r2, [r7, #0]
1004e73c:	625a      	str	r2, [r3, #36]	@ 0x24
}
1004e73e:	46c0      	nop			@ (mov r8, r8)
1004e740:	46bd      	mov	sp, r7
1004e742:	b002      	add	sp, #8
1004e744:	bd80      	pop	{r7, pc}

1004e746 <LL_RADIO_TIMER_GetBLEWakeupTime>:
{
1004e746:	b580      	push	{r7, lr}
1004e748:	b082      	sub	sp, #8
1004e74a:	af00      	add	r7, sp, #0
1004e74c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->BLUE_WAKEUP_TIME));
1004e74e:	687b      	ldr	r3, [r7, #4]
1004e750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
1004e752:	0018      	movs	r0, r3
1004e754:	46bd      	mov	sp, r7
1004e756:	b002      	add	sp, #8
1004e758:	bd80      	pop	{r7, pc}

1004e75a <LL_RADIO_TIMER_SetCPUWakeupTime>:
{
1004e75a:	b580      	push	{r7, lr}
1004e75c:	b082      	sub	sp, #8
1004e75e:	af00      	add	r7, sp, #0
1004e760:	6078      	str	r0, [r7, #4]
1004e762:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->CM0_WAKEUP_TIME, Time);
1004e764:	687b      	ldr	r3, [r7, #4]
1004e766:	683a      	ldr	r2, [r7, #0]
1004e768:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004e76a:	46c0      	nop			@ (mov r8, r8)
1004e76c:	46bd      	mov	sp, r7
1004e76e:	b002      	add	sp, #8
1004e770:	bd80      	pop	{r7, pc}

1004e772 <LL_RADIO_TIMER_GetAbsoluteTime>:
{
1004e772:	b580      	push	{r7, lr}
1004e774:	b082      	sub	sp, #8
1004e776:	af00      	add	r7, sp, #0
1004e778:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
1004e77a:	687b      	ldr	r3, [r7, #4]
1004e77c:	691b      	ldr	r3, [r3, #16]
}
1004e77e:	0018      	movs	r0, r3
1004e780:	46bd      	mov	sp, r7
1004e782:	b002      	add	sp, #8
1004e784:	bd80      	pop	{r7, pc}

1004e786 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>:
  * @rmtoll BLUE_SLEEP_REQUEST_MODE    SLEEP_EN   LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP_TypeDef *WAKEUPx)
{
1004e786:	b580      	push	{r7, lr}
1004e788:	b082      	sub	sp, #8
1004e78a:	af00      	add	r7, sp, #0
1004e78c:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN);
1004e78e:	687b      	ldr	r3, [r7, #4]
1004e790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004e792:	2280      	movs	r2, #128	@ 0x80
1004e794:	0592      	lsls	r2, r2, #22
1004e796:	431a      	orrs	r2, r3
1004e798:	687b      	ldr	r3, [r7, #4]
1004e79a:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004e79c:	46c0      	nop			@ (mov r8, r8)
1004e79e:	46bd      	mov	sp, r7
1004e7a0:	b002      	add	sp, #8
1004e7a2:	bd80      	pop	{r7, pc}

1004e7a4 <LL_RADIO_TIMER_SetSleepRequestMode>:
  * @param  WAKEUPx Radio Timer instance
  * @param  mode Sleep mode value in range 0-7
  * @retval None.
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP_TypeDef *WAKEUPx, uint8_t mode)
{
1004e7a4:	b580      	push	{r7, lr}
1004e7a6:	b082      	sub	sp, #8
1004e7a8:	af00      	add	r7, sp, #0
1004e7aa:	6078      	str	r0, [r7, #4]
1004e7ac:	000a      	movs	r2, r1
1004e7ae:	1cfb      	adds	r3, r7, #3
1004e7b0:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  return;
1004e7b2:	46c0      	nop			@ (mov r8, r8)
#else
  MODIFY_REG_FIELD(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_REQ_MODE, (mode & 0x7));
#endif
}
1004e7b4:	46bd      	mov	sp, r7
1004e7b6:	b002      	add	sp, #8
1004e7b8:	bd80      	pop	{r7, pc}

1004e7ba <LL_RADIO_TIMER_EnableCPUWakeupIT>:
  * @rmtoll WAKEUP_CM0_IRQ_ENABLE    WAKEUP_IT   LL_RADIO_TIMER_EnableCPUWakeupIT
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP_TypeDef *WAKEUPx)
{
1004e7ba:	b580      	push	{r7, lr}
1004e7bc:	b082      	sub	sp, #8
1004e7be:	af00      	add	r7, sp, #0
1004e7c0:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_ENABLE, WAKEUP_WAKEUP_CM0_IRQ_ENABLE_WAKEUP_IT);
1004e7c2:	687b      	ldr	r3, [r7, #4]
1004e7c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004e7c6:	2201      	movs	r2, #1
1004e7c8:	431a      	orrs	r2, r3
1004e7ca:	687b      	ldr	r3, [r7, #4]
1004e7cc:	649a      	str	r2, [r3, #72]	@ 0x48
}
1004e7ce:	46c0      	nop			@ (mov r8, r8)
1004e7d0:	46bd      	mov	sp, r7
1004e7d2:	b002      	add	sp, #8
1004e7d4:	bd80      	pop	{r7, pc}

1004e7d6 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_ClearFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
1004e7d6:	b580      	push	{r7, lr}
1004e7d8:	b082      	sub	sp, #8
1004e7da:	af00      	add	r7, sp, #0
1004e7dc:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT);
1004e7de:	687b      	ldr	r3, [r7, #4]
1004e7e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004e7e2:	2201      	movs	r2, #1
1004e7e4:	431a      	orrs	r2, r3
1004e7e6:	687b      	ldr	r3, [r7, #4]
1004e7e8:	64da      	str	r2, [r3, #76]	@ 0x4c
}
1004e7ea:	46c0      	nop			@ (mov r8, r8)
1004e7ec:	46bd      	mov	sp, r7
1004e7ee:	b002      	add	sp, #8
1004e7f0:	bd80      	pop	{r7, pc}

1004e7f2 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_IsActiveFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
1004e7f2:	b580      	push	{r7, lr}
1004e7f4:	b082      	sub	sp, #8
1004e7f6:	af00      	add	r7, sp, #0
1004e7f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT) == (WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT)) ? 1UL : 0UL);
1004e7fa:	687b      	ldr	r3, [r7, #4]
1004e7fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004e7fe:	2201      	movs	r2, #1
1004e800:	4013      	ands	r3, r2
1004e802:	2b01      	cmp	r3, #1
1004e804:	d101      	bne.n	1004e80a <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x18>
1004e806:	2301      	movs	r3, #1
1004e808:	e000      	b.n	1004e80c <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x1a>
1004e80a:	2300      	movs	r3, #0
}
1004e80c:	0018      	movs	r0, r3
1004e80e:	46bd      	mov	sp, r7
1004e810:	b002      	add	sp, #8
1004e812:	bd80      	pop	{r7, pc}

1004e814 <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>:
  * @param RADIO_CTRLx: Radio Control instance
  * @param  Count Slow clock is measured in a window of SLOW_COUNT+1 slow clock cycles
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL_TypeDef *RADIO_CTRLx, uint32_t Count)
{
1004e814:	b580      	push	{r7, lr}
1004e816:	b082      	sub	sp, #8
1004e818:	af00      	add	r7, sp, #0
1004e81a:	6078      	str	r0, [r7, #4]
1004e81c:	6039      	str	r1, [r7, #0]
  WRITE_REG(RADIO_CTRLx->CLK32COUNT_REG, Count);
1004e81e:	687b      	ldr	r3, [r7, #4]
1004e820:	683a      	ldr	r2, [r7, #0]
1004e822:	605a      	str	r2, [r3, #4]
}
1004e824:	46c0      	nop			@ (mov r8, r8)
1004e826:	46bd      	mov	sp, r7
1004e828:	b002      	add	sp, #8
1004e82a:	bd80      	pop	{r7, pc}

1004e82c <LL_RADIO_TIMER_StartLSICalibration>:
  * @brief  Start the LSI calibration procedure.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004e82c:	b580      	push	{r7, lr}
1004e82e:	b082      	sub	sp, #8
1004e830:	af00      	add	r7, sp, #0
1004e832:	6078      	str	r0, [r7, #4]
  WRITE_REG(RADIO_CTRLx->CLK32PERIOD_REG, 0);
1004e834:	687b      	ldr	r3, [r7, #4]
1004e836:	2200      	movs	r2, #0
1004e838:	609a      	str	r2, [r3, #8]
}
1004e83a:	46c0      	nop			@ (mov r8, r8)
1004e83c:	46bd      	mov	sp, r7
1004e83e:	b002      	add	sp, #8
1004e840:	bd80      	pop	{r7, pc}

1004e842 <LL_RADIO_TIMER_GetLSIPeriod>:
  * @brief  Get the LSI clock Period calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock period calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004e842:	b580      	push	{r7, lr}
1004e844:	b082      	sub	sp, #8
1004e846:	af00      	add	r7, sp, #0
1004e848:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32PERIOD_REG));
1004e84a:	687b      	ldr	r3, [r7, #4]
1004e84c:	689b      	ldr	r3, [r3, #8]
}
1004e84e:	0018      	movs	r0, r3
1004e850:	46bd      	mov	sp, r7
1004e852:	b002      	add	sp, #8
1004e854:	bd80      	pop	{r7, pc}

1004e856 <LL_RADIO_TIMER_GetLSIFrequency>:
  * @brief  Get the LSI clock Frequency calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock frequency calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004e856:	b580      	push	{r7, lr}
1004e858:	b082      	sub	sp, #8
1004e85a:	af00      	add	r7, sp, #0
1004e85c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32FREQUENCY_REG));
1004e85e:	687b      	ldr	r3, [r7, #4]
1004e860:	68db      	ldr	r3, [r3, #12]
}
1004e862:	0018      	movs	r0, r3
1004e864:	46bd      	mov	sp, r7
1004e866:	b002      	add	sp, #8
1004e868:	bd80      	pop	{r7, pc}

1004e86a <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>:
  * @brief  Clear the LSI calibration ended flag.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004e86a:	b580      	push	{r7, lr}
1004e86c:	b082      	sub	sp, #8
1004e86e:	af00      	add	r7, sp, #0
1004e870:	6078      	str	r0, [r7, #4]
  SET_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ);
1004e872:	687b      	ldr	r3, [r7, #4]
1004e874:	691b      	ldr	r3, [r3, #16]
1004e876:	2201      	movs	r2, #1
1004e878:	431a      	orrs	r2, r3
1004e87a:	687b      	ldr	r3, [r7, #4]
1004e87c:	611a      	str	r2, [r3, #16]
}
1004e87e:	46c0      	nop			@ (mov r8, r8)
1004e880:	46bd      	mov	sp, r7
1004e882:	b002      	add	sp, #8
1004e884:	bd80      	pop	{r7, pc}

1004e886 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>:
  * @brief  Check if the LSI calibration ended flag is set or not.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004e886:	b580      	push	{r7, lr}
1004e888:	b082      	sub	sp, #8
1004e88a:	af00      	add	r7, sp, #0
1004e88c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ) == (RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ)) ? 1UL : 0UL);
1004e88e:	687b      	ldr	r3, [r7, #4]
1004e890:	691b      	ldr	r3, [r3, #16]
1004e892:	2201      	movs	r2, #1
1004e894:	4013      	ands	r3, r2
1004e896:	2b01      	cmp	r3, #1
1004e898:	d101      	bne.n	1004e89e <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x18>
1004e89a:	2301      	movs	r3, #1
1004e89c:	e000      	b.n	1004e8a0 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x1a>
1004e89e:	2300      	movs	r3, #0
}
1004e8a0:	0018      	movs	r0, r3
1004e8a2:	46bd      	mov	sp, r7
1004e8a4:	b002      	add	sp, #8
1004e8a6:	bd80      	pop	{r7, pc}

1004e8a8 <HAL_RADIO_TIMER_Init>:
  *         section of the application.
  * @param RADIO_TIMER_InitStruct Radio Timer Initialization parameters
  * @retval None
  */
void HAL_RADIO_TIMER_Init(RADIO_TIMER_InitTypeDef *RADIO_TIMER_InitStruct)
{
1004e8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e8aa:	b083      	sub	sp, #12
1004e8ac:	af00      	add	r7, sp, #0
1004e8ae:	6078      	str	r0, [r7, #4]
  /* Interrupt Configuration */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
1004e8b0:	4b70      	ldr	r3, [pc, #448]	@ (1004ea74 <HAL_RADIO_TIMER_Init+0x1cc>)
1004e8b2:	0018      	movs	r0, r3
1004e8b4:	f7ff ff8f 	bl	1004e7d6 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP);
1004e8b8:	4b6e      	ldr	r3, [pc, #440]	@ (1004ea74 <HAL_RADIO_TIMER_Init+0x1cc>)
1004e8ba:	0018      	movs	r0, r3
1004e8bc:	f7ff ff7d 	bl	1004e7ba <LL_RADIO_TIMER_EnableCPUWakeupIT>
  NVIC_EnableIRQ(RADIO_TIMER_CPU_WKUP_IRQn);
1004e8c0:	2017      	movs	r0, #23
1004e8c2:	f7ff fe51 	bl	1004e568 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_ERROR_IRQn);
1004e8c6:	2014      	movs	r0, #20
1004e8c8:	f7ff fe4e 	bl	1004e568 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_TXRX_WKUP_IRQn);
  RADIO_TIMER_Context.hostMargin = MAX(HOST_MARGIN, RADIO_TIMER_InitStruct->XTAL_StartupTime);
#endif

  /* Calibration Setting */
  RADIO_TIMER_Context.calibrationSettings.periodicCalibration = (RADIO_TIMER_InitStruct->periodicCalibrationInterval != 0);
1004e8cc:	687b      	ldr	r3, [r7, #4]
1004e8ce:	685b      	ldr	r3, [r3, #4]
1004e8d0:	1e5a      	subs	r2, r3, #1
1004e8d2:	4193      	sbcs	r3, r2
1004e8d4:	b2db      	uxtb	r3, r3
1004e8d6:	001a      	movs	r2, r3
1004e8d8:	4b67      	ldr	r3, [pc, #412]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e8da:	701a      	strb	r2, [r3, #0]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration || RADIO_TIMER_InitStruct->enableInitialCalibration)
1004e8dc:	4b66      	ldr	r3, [pc, #408]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e8de:	781b      	ldrb	r3, [r3, #0]
1004e8e0:	2b00      	cmp	r3, #0
1004e8e2:	d103      	bne.n	1004e8ec <HAL_RADIO_TIMER_Init+0x44>
1004e8e4:	687b      	ldr	r3, [r7, #4]
1004e8e6:	789b      	ldrb	r3, [r3, #2]
1004e8e8:	2b00      	cmp	r3, #0
1004e8ea:	d002      	beq.n	1004e8f2 <HAL_RADIO_TIMER_Init+0x4a>
  {
    _calibrationProcedure();
1004e8ec:	f000 fd04 	bl	1004f2f8 <_calibrationProcedure>
1004e8f0:	e010      	b.n	1004e914 <HAL_RADIO_TIMER_Init+0x6c>
  }
  else
  {
    /* Assume fix frequency at 32.768 kHz */
    RADIO_TIMER_Context.calibrationData.last_period1 = 0x00190000;
1004e8f2:	4b61      	ldr	r3, [pc, #388]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e8f4:	22c8      	movs	r2, #200	@ 0xc8
1004e8f6:	0352      	lsls	r2, r2, #13
1004e8f8:	621a      	str	r2, [r3, #32]
    RADIO_TIMER_Context.calibrationData.period1 = 0x00190000 ;
1004e8fa:	4b5f      	ldr	r3, [pc, #380]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e8fc:	22c8      	movs	r2, #200	@ 0xc8
1004e8fe:	0352      	lsls	r2, r2, #13
1004e900:	61da      	str	r2, [r3, #28]
    RADIO_TIMER_Context.calibrationData.freq1 = 0x0028F5C2 ;
1004e902:	4b5d      	ldr	r3, [pc, #372]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e904:	4a5d      	ldr	r2, [pc, #372]	@ (1004ea7c <HAL_RADIO_TIMER_Init+0x1d4>)
1004e906:	619a      	str	r2, [r3, #24]
    RADIO_TIMER_Context.calibrationData.period = 23437;
1004e908:	4b5b      	ldr	r3, [pc, #364]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e90a:	4a5d      	ldr	r2, [pc, #372]	@ (1004ea80 <HAL_RADIO_TIMER_Init+0x1d8>)
1004e90c:	611a      	str	r2, [r3, #16]
    RADIO_TIMER_Context.calibrationData.freq = 23456748;
1004e90e:	4b5a      	ldr	r3, [pc, #360]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e910:	4a5c      	ldr	r2, [pc, #368]	@ (1004ea84 <HAL_RADIO_TIMER_Init+0x1dc>)
1004e912:	615a      	str	r2, [r3, #20]
  }
  if (RADIO_TIMER_InitStruct->periodicCalibrationInterval == 0)
1004e914:	687b      	ldr	r3, [r7, #4]
1004e916:	685b      	ldr	r3, [r3, #4]
1004e918:	2b00      	cmp	r3, #0
1004e91a:	d108      	bne.n	1004e92e <HAL_RADIO_TIMER_Init+0x86>
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = HAL_RADIO_TIMER_MachineTimeToSysTime(0x50000000);
1004e91c:	23a0      	movs	r3, #160	@ 0xa0
1004e91e:	05db      	lsls	r3, r3, #23
1004e920:	0018      	movs	r0, r3
1004e922:	f000 fbe7 	bl	1004f0f4 <HAL_RADIO_TIMER_MachineTimeToSysTime>
1004e926:	0002      	movs	r2, r0
1004e928:	4b53      	ldr	r3, [pc, #332]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e92a:	605a      	str	r2, [r3, #4]
1004e92c:	e01d      	b.n	1004e96a <HAL_RADIO_TIMER_Init+0xc2>
  }
  else
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = (TIMER_SYSTICK_PER_10MS * RADIO_TIMER_InitStruct->periodicCalibrationInterval) / 10;
1004e92e:	687b      	ldr	r3, [r7, #4]
1004e930:	685b      	ldr	r3, [r3, #4]
1004e932:	031b      	lsls	r3, r3, #12
1004e934:	210a      	movs	r1, #10
1004e936:	0018      	movs	r0, r3
1004e938:	f7f2 fc86 	bl	10041248 <__udivsi3>
1004e93c:	0003      	movs	r3, r0
1004e93e:	001a      	movs	r2, r3
1004e940:	4b4d      	ldr	r3, [pc, #308]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e942:	605a      	str	r2, [r3, #4]
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = MIN(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004e944:	4b4c      	ldr	r3, [pc, #304]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e946:	685e      	ldr	r6, [r3, #4]
1004e948:	4b4f      	ldr	r3, [pc, #316]	@ (1004ea88 <HAL_RADIO_TIMER_Init+0x1e0>)
1004e94a:	0018      	movs	r0, r3
1004e94c:	f000 fbd2 	bl	1004f0f4 <HAL_RADIO_TIMER_MachineTimeToSysTime>
1004e950:	0003      	movs	r3, r0
1004e952:	429e      	cmp	r6, r3
1004e954:	d202      	bcs.n	1004e95c <HAL_RADIO_TIMER_Init+0xb4>
1004e956:	4b48      	ldr	r3, [pc, #288]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e958:	685a      	ldr	r2, [r3, #4]
1004e95a:	e004      	b.n	1004e966 <HAL_RADIO_TIMER_Init+0xbe>
1004e95c:	4b4a      	ldr	r3, [pc, #296]	@ (1004ea88 <HAL_RADIO_TIMER_Init+0x1e0>)
1004e95e:	0018      	movs	r0, r3
1004e960:	f000 fbc8 	bl	1004f0f4 <HAL_RADIO_TIMER_MachineTimeToSysTime>
1004e964:	0002      	movs	r2, r0
1004e966:	4b44      	ldr	r3, [pc, #272]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e968:	605a      	str	r2, [r3, #4]
                                                                              HAL_RADIO_TIMER_MachineTimeToSysTime(TIMER_MAX_VALUE - TIMER_WRAPPING_MARGIN));
  }
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
1004e96a:	4b43      	ldr	r3, [pc, #268]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e96c:	2200      	movs	r2, #0
1004e96e:	721a      	strb	r2, [r3, #8]

  /* XTAL startup time configuration */
  RADIO_TIMER_Context.hs_startup_time = RADIO_TIMER_InitStruct->XTAL_StartupTime;
1004e970:	687b      	ldr	r3, [r7, #4]
1004e972:	881b      	ldrh	r3, [r3, #0]
1004e974:	001a      	movs	r2, r3
1004e976:	4b40      	ldr	r3, [pc, #256]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e978:	669a      	str	r2, [r3, #104]	@ 0x68
  _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
1004e97a:	4b3f      	ldr	r3, [pc, #252]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e97c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
1004e97e:	b29a      	uxth	r2, r3
1004e980:	4b3d      	ldr	r3, [pc, #244]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e982:	699b      	ldr	r3, [r3, #24]
1004e984:	0019      	movs	r1, r3
1004e986:	0010      	movs	r0, r2
1004e988:	f000 fe2a 	bl	1004f5e0 <_update_xtal_startup_time>

  /* Init Radio Timer Context */
  RADIO_TIMER_Context.last_setup_time = 0;
1004e98c:	4b3a      	ldr	r3, [pc, #232]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e98e:	2284      	movs	r2, #132	@ 0x84
1004e990:	2100      	movs	r1, #0
1004e992:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.cumulative_time = 0;
1004e994:	4938      	ldr	r1, [pc, #224]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e996:	2200      	movs	r2, #0
1004e998:	2300      	movs	r3, #0
1004e99a:	670a      	str	r2, [r1, #112]	@ 0x70
1004e99c:	674b      	str	r3, [r1, #116]	@ 0x74
  RADIO_TIMER_Context.last_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004e99e:	4b35      	ldr	r3, [pc, #212]	@ (1004ea74 <HAL_RADIO_TIMER_Init+0x1cc>)
1004e9a0:	0018      	movs	r0, r3
1004e9a2:	f7ff fee6 	bl	1004e772 <LL_RADIO_TIMER_GetAbsoluteTime>
1004e9a6:	0002      	movs	r2, r0
1004e9a8:	4b33      	ldr	r3, [pc, #204]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e9aa:	2180      	movs	r1, #128	@ 0x80
1004e9ac:	505a      	str	r2, [r3, r1]
  RADIO_TIMER_Context.last_system_time = 0;
1004e9ae:	4932      	ldr	r1, [pc, #200]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e9b0:	2200      	movs	r2, #0
1004e9b2:	2300      	movs	r3, #0
1004e9b4:	678a      	str	r2, [r1, #120]	@ 0x78
1004e9b6:	67cb      	str	r3, [r1, #124]	@ 0x7c
  RADIO_TIMER_Context.calibrationData.last_calibration_time = 0;
1004e9b8:	492f      	ldr	r1, [pc, #188]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e9ba:	2200      	movs	r2, #0
1004e9bc:	2300      	movs	r3, #0
1004e9be:	628a      	str	r2, [r1, #40]	@ 0x28
1004e9c0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  RADIO_TIMER_Context.calibrationData.calibration_data_available = 0;
1004e9c2:	4b2d      	ldr	r3, [pc, #180]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e9c4:	2234      	movs	r2, #52	@ 0x34
1004e9c6:	2100      	movs	r1, #0
1004e9c8:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004e9ca:	4b2b      	ldr	r3, [pc, #172]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e9cc:	6858      	ldr	r0, [r3, #4]
                                                                     RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
1004e9ce:	4b2a      	ldr	r3, [pc, #168]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e9d0:	699b      	ldr	r3, [r3, #24]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004e9d2:	0019      	movs	r1, r3
1004e9d4:	4b2d      	ldr	r3, [pc, #180]	@ (1004ea8c <HAL_RADIO_TIMER_Init+0x1e4>)
1004e9d6:	001a      	movs	r2, r3
1004e9d8:	f7f2 fb74 	bl	100410c4 <blue_unit_conversion>
1004e9dc:	0002      	movs	r2, r0
1004e9de:	4b26      	ldr	r3, [pc, #152]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e9e0:	631a      	str	r2, [r3, #48]	@ 0x30
  RADIO_TIMER_Context.wakeup_calibration = RADIO_TIMER_Context.calibrationSettings.periodicCalibration;
1004e9e2:	4b25      	ldr	r3, [pc, #148]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e9e4:	7819      	ldrb	r1, [r3, #0]
1004e9e6:	4b24      	ldr	r3, [pc, #144]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e9e8:	2294      	movs	r2, #148	@ 0x94
1004e9ea:	5499      	strb	r1, [r3, r2]

  /* Init the Virtual Timer queue */
  RADIO_TIMER_Context.rootNode = NULL;
1004e9ec:	4b22      	ldr	r3, [pc, #136]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e9ee:	228c      	movs	r2, #140	@ 0x8c
1004e9f0:	2100      	movs	r1, #0
1004e9f2:	5099      	str	r1, [r3, r2]
  RADIO_TIMER_Context.enableTimeBase = TRUE;
1004e9f4:	4b20      	ldr	r3, [pc, #128]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e9f6:	2290      	movs	r2, #144	@ 0x90
1004e9f8:	2101      	movs	r1, #1
1004e9fa:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.stop_notimer_action = FALSE;
1004e9fc:	4b1e      	ldr	r3, [pc, #120]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e9fe:	2293      	movs	r2, #147	@ 0x93
1004ea00:	2100      	movs	r1, #0
1004ea02:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.expired_count = 0;
1004ea04:	4b1c      	ldr	r3, [pc, #112]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004ea06:	2291      	movs	r2, #145	@ 0x91
1004ea08:	2100      	movs	r1, #0
1004ea0a:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.served_count = 0;
1004ea0c:	4b1a      	ldr	r3, [pc, #104]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004ea0e:	2292      	movs	r2, #146	@ 0x92
1004ea10:	2100      	movs	r1, #0
1004ea12:	5499      	strb	r1, [r3, r2]

  /* Init Radio Timer queue */
  RADIO_TIMER_Context.radioTimer.active = FALSE;
1004ea14:	4b18      	ldr	r3, [pc, #96]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004ea16:	2261      	movs	r2, #97	@ 0x61
1004ea18:	2100      	movs	r1, #0
1004ea1a:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004ea1c:	4b16      	ldr	r3, [pc, #88]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004ea1e:	2262      	movs	r2, #98	@ 0x62
1004ea20:	2100      	movs	r1, #0
1004ea22:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004ea24:	4b14      	ldr	r3, [pc, #80]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004ea26:	2263      	movs	r2, #99	@ 0x63
1004ea28:	2100      	movs	r1, #0
1004ea2a:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = 0;
1004ea2c:	4912      	ldr	r1, [pc, #72]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004ea2e:	2200      	movs	r2, #0
1004ea30:	2300      	movs	r3, #0
1004ea32:	658a      	str	r2, [r1, #88]	@ 0x58
1004ea34:	65cb      	str	r3, [r1, #92]	@ 0x5c

  /* Configure the Calibration callback and schedule the next calibration */
  RADIO_TIMER_Context.calibrationTimer.callback = _calibration_callback;
1004ea36:	4b10      	ldr	r3, [pc, #64]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004ea38:	4a15      	ldr	r2, [pc, #84]	@ (1004ea90 <HAL_RADIO_TIMER_Init+0x1e8>)
1004ea3a:	649a      	str	r2, [r3, #72]	@ 0x48
  RADIO_TIMER_Context.calibrationTimer.userData = NULL;
1004ea3c:	4b0e      	ldr	r3, [pc, #56]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004ea3e:	2200      	movs	r2, #0
1004ea40:	655a      	str	r2, [r3, #84]	@ 0x54
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
               HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
1004ea42:	f000 fb6d 	bl	1004f120 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004ea46:	0002      	movs	r2, r0
1004ea48:	000b      	movs	r3, r1
1004ea4a:	490b      	ldr	r1, [pc, #44]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004ea4c:	6849      	ldr	r1, [r1, #4]
1004ea4e:	000c      	movs	r4, r1
1004ea50:	2100      	movs	r1, #0
1004ea52:	000d      	movs	r5, r1
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
1004ea54:	1912      	adds	r2, r2, r4
1004ea56:	416b      	adcs	r3, r5
1004ea58:	490e      	ldr	r1, [pc, #56]	@ (1004ea94 <HAL_RADIO_TIMER_Init+0x1ec>)
1004ea5a:	0008      	movs	r0, r1
1004ea5c:	f000 fe02 	bl	1004f664 <_start_timer>

  /* Tx & Rx delay configuration */
  _configureTxRxDelay(&RADIO_TIMER_Context, TRUE);
1004ea60:	4b05      	ldr	r3, [pc, #20]	@ (1004ea78 <HAL_RADIO_TIMER_Init+0x1d0>)
1004ea62:	2101      	movs	r1, #1
1004ea64:	0018      	movs	r0, r3
1004ea66:	f000 fcf7 	bl	1004f458 <_configureTxRxDelay>
}
1004ea6a:	46c0      	nop			@ (mov r8, r8)
1004ea6c:	46bd      	mov	sp, r7
1004ea6e:	b003      	add	sp, #12
1004ea70:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004ea72:	46c0      	nop			@ (mov r8, r8)
1004ea74:	60001800 	.word	0x60001800
1004ea78:	20000f50 	.word	0x20000f50
1004ea7c:	0028f5c2 	.word	0x0028f5c2
1004ea80:	00005b8d 	.word	0x00005b8d
1004ea84:	0165ebec 	.word	0x0165ebec
1004ea88:	ffffefff 	.word	0xffffefff
1004ea8c:	00000326 	.word	0x00000326
1004ea90:	1004f63d 	.word	0x1004f63d
1004ea94:	20000f90 	.word	0x20000f90

1004ea98 <HAL_RADIO_TIMER_Tick>:
  * Check expired timers and execute user callback.
  * It must be placed inside the infinite loop.
  * @retval None
  */
void HAL_RADIO_TIMER_Tick(void)
{
1004ea98:	b5b0      	push	{r4, r5, r7, lr}
1004ea9a:	b090      	sub	sp, #64	@ 0x40
1004ea9c:	af00      	add	r7, sp, #0
  uint8_t expired = 0;
1004ea9e:	230f      	movs	r3, #15
1004eaa0:	18fb      	adds	r3, r7, r3
1004eaa2:	2200      	movs	r2, #0
1004eaa4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004eaa6:	f3ef 8310 	mrs	r3, PRIMASK
1004eaaa:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
1004eaac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  ATOMIC_SECTION_BEGIN();
1004eaae:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
1004eab0:	b672      	cpsid	i
}
1004eab2:	46c0      	nop			@ (mov r8, r8)
  if (RADIO_TIMER_Context.radioTimer.active)
1004eab4:	4b9c      	ldr	r3, [pc, #624]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004eab6:	2261      	movs	r2, #97	@ 0x61
1004eab8:	5c9b      	ldrb	r3, [r3, r2]
1004eaba:	2b00      	cmp	r3, #0
1004eabc:	d00f      	beq.n	1004eade <HAL_RADIO_TIMER_Tick+0x46>
  {
    if (RADIO_TIMER_Context.radioTimer.expiryTime < HAL_RADIO_TIMER_GetCurrentSysTime())
1004eabe:	4b9a      	ldr	r3, [pc, #616]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004eac0:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
1004eac2:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
1004eac4:	f000 fb2c 	bl	1004f120 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004eac8:	0002      	movs	r2, r0
1004eaca:	000b      	movs	r3, r1
1004eacc:	42ab      	cmp	r3, r5
1004eace:	d802      	bhi.n	1004ead6 <HAL_RADIO_TIMER_Tick+0x3e>
1004ead0:	d105      	bne.n	1004eade <HAL_RADIO_TIMER_Tick+0x46>
1004ead2:	42a2      	cmp	r2, r4
1004ead4:	d903      	bls.n	1004eade <HAL_RADIO_TIMER_Tick+0x46>
    {
      RADIO_TIMER_Context.radioTimer.active = FALSE;
1004ead6:	4b94      	ldr	r3, [pc, #592]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004ead8:	2261      	movs	r2, #97	@ 0x61
1004eada:	2100      	movs	r1, #0
1004eadc:	5499      	strb	r1, [r3, r2]
1004eade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004eae0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004eae2:	6a3b      	ldr	r3, [r7, #32]
1004eae4:	f383 8810 	msr	PRIMASK, r3
}
1004eae8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  ATOMIC_SECTION_END();

  /* Check for expired timers */
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
1004eaea:	e06e      	b.n	1004ebca <HAL_RADIO_TIMER_Tick+0x132>
  {
    VTIMER_HandleType *expiredList, *curr;
    uint8_t to_be_served = DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count);
1004eaec:	4b8e      	ldr	r3, [pc, #568]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004eaee:	2291      	movs	r2, #145	@ 0x91
1004eaf0:	5c99      	ldrb	r1, [r3, r2]
1004eaf2:	4b8d      	ldr	r3, [pc, #564]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004eaf4:	2292      	movs	r2, #146	@ 0x92
1004eaf6:	5c9a      	ldrb	r2, [r3, r2]
1004eaf8:	232b      	movs	r3, #43	@ 0x2b
1004eafa:	2008      	movs	r0, #8
1004eafc:	181b      	adds	r3, r3, r0
1004eafe:	19db      	adds	r3, r3, r7
1004eb00:	1a8a      	subs	r2, r1, r2
1004eb02:	701a      	strb	r2, [r3, #0]

    RADIO_TIMER_Context.rootNode = _check_callbacks(RADIO_TIMER_Context.rootNode, &expiredList);
1004eb04:	4b88      	ldr	r3, [pc, #544]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004eb06:	228c      	movs	r2, #140	@ 0x8c
1004eb08:	589b      	ldr	r3, [r3, r2]
1004eb0a:	183a      	adds	r2, r7, r0
1004eb0c:	0011      	movs	r1, r2
1004eb0e:	0018      	movs	r0, r3
1004eb10:	f000 ff7e 	bl	1004fa10 <_check_callbacks>
1004eb14:	0002      	movs	r2, r0
1004eb16:	4b84      	ldr	r3, [pc, #528]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004eb18:	218c      	movs	r1, #140	@ 0x8c
1004eb1a:	505a      	str	r2, [r3, r1]

    /* Call all the user callbacks */
    curr = expiredList;
1004eb1c:	68bb      	ldr	r3, [r7, #8]
1004eb1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
1004eb20:	e010      	b.n	1004eb44 <HAL_RADIO_TIMER_Tick+0xac>
    {
      /* Save next pointer, in case callback start the timer again */
      VTIMER_HandleType *next = curr->next;
1004eb22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004eb24:	691b      	ldr	r3, [r3, #16]
1004eb26:	62bb      	str	r3, [r7, #40]	@ 0x28
      curr->active = FALSE;
1004eb28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004eb2a:	2200      	movs	r2, #0
1004eb2c:	731a      	strb	r2, [r3, #12]
      if (curr->callback)
1004eb2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004eb30:	689b      	ldr	r3, [r3, #8]
1004eb32:	2b00      	cmp	r3, #0
1004eb34:	d004      	beq.n	1004eb40 <HAL_RADIO_TIMER_Tick+0xa8>
      {
        curr->callback(curr); /* we are sure a callback is set?*/
1004eb36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004eb38:	689b      	ldr	r3, [r3, #8]
1004eb3a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1004eb3c:	0010      	movs	r0, r2
1004eb3e:	4798      	blx	r3
      }
      curr = next;
1004eb40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004eb42:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
1004eb44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004eb46:	2b00      	cmp	r3, #0
1004eb48:	d1eb      	bne.n	1004eb22 <HAL_RADIO_TIMER_Tick+0x8a>
    }

    RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
1004eb4a:	4b77      	ldr	r3, [pc, #476]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004eb4c:	228c      	movs	r2, #140	@ 0x8c
1004eb4e:	589b      	ldr	r3, [r3, r2]
1004eb50:	240f      	movs	r4, #15
1004eb52:	193a      	adds	r2, r7, r4
1004eb54:	0011      	movs	r1, r2
1004eb56:	0018      	movs	r0, r3
1004eb58:	f000 fe4a 	bl	1004f7f0 <_update_user_timeout>
1004eb5c:	0002      	movs	r2, r0
1004eb5e:	4b72      	ldr	r3, [pc, #456]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004eb60:	218c      	movs	r1, #140	@ 0x8c
1004eb62:	505a      	str	r2, [r3, r1]
    if (expired == 1)
1004eb64:	193b      	adds	r3, r7, r4
1004eb66:	781b      	ldrb	r3, [r3, #0]
1004eb68:	2b01      	cmp	r3, #1
1004eb6a:	d121      	bne.n	1004ebb0 <HAL_RADIO_TIMER_Tick+0x118>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004eb6c:	f3ef 8310 	mrs	r3, PRIMASK
1004eb70:	61fb      	str	r3, [r7, #28]
  return(result);
1004eb72:	69fb      	ldr	r3, [r7, #28]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
1004eb74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
1004eb76:	b672      	cpsid	i
}
1004eb78:	46c0      	nop			@ (mov r8, r8)
1004eb7a:	4b6b      	ldr	r3, [pc, #428]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004eb7c:	2291      	movs	r2, #145	@ 0x91
1004eb7e:	5c9b      	ldrb	r3, [r3, r2]
1004eb80:	3301      	adds	r3, #1
1004eb82:	4a69      	ldr	r2, [pc, #420]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004eb84:	2192      	movs	r1, #146	@ 0x92
1004eb86:	5c52      	ldrb	r2, [r2, r1]
1004eb88:	4293      	cmp	r3, r2
1004eb8a:	d103      	bne.n	1004eb94 <HAL_RADIO_TIMER_Tick+0xfc>
1004eb8c:	4b66      	ldr	r3, [pc, #408]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004eb8e:	2291      	movs	r2, #145	@ 0x91
1004eb90:	5c9b      	ldrb	r3, [r3, r2]
1004eb92:	e004      	b.n	1004eb9e <HAL_RADIO_TIMER_Tick+0x106>
1004eb94:	4b64      	ldr	r3, [pc, #400]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004eb96:	2291      	movs	r2, #145	@ 0x91
1004eb98:	5c9b      	ldrb	r3, [r3, r2]
1004eb9a:	3301      	adds	r3, #1
1004eb9c:	b2db      	uxtb	r3, r3
1004eb9e:	4a62      	ldr	r2, [pc, #392]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004eba0:	2191      	movs	r1, #145	@ 0x91
1004eba2:	5453      	strb	r3, [r2, r1]
1004eba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004eba6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004eba8:	69bb      	ldr	r3, [r7, #24]
1004ebaa:	f383 8810 	msr	PRIMASK, r3
}
1004ebae:	46c0      	nop			@ (mov r8, r8)
    }
    RADIO_TIMER_Context.served_count += to_be_served;
1004ebb0:	4b5d      	ldr	r3, [pc, #372]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004ebb2:	2292      	movs	r2, #146	@ 0x92
1004ebb4:	5c9a      	ldrb	r2, [r3, r2]
1004ebb6:	232b      	movs	r3, #43	@ 0x2b
1004ebb8:	2108      	movs	r1, #8
1004ebba:	185b      	adds	r3, r3, r1
1004ebbc:	19db      	adds	r3, r3, r7
1004ebbe:	781b      	ldrb	r3, [r3, #0]
1004ebc0:	18d3      	adds	r3, r2, r3
1004ebc2:	b2d9      	uxtb	r1, r3
1004ebc4:	4b58      	ldr	r3, [pc, #352]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004ebc6:	2292      	movs	r2, #146	@ 0x92
1004ebc8:	5499      	strb	r1, [r3, r2]
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
1004ebca:	4b57      	ldr	r3, [pc, #348]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004ebcc:	2291      	movs	r2, #145	@ 0x91
1004ebce:	5c9a      	ldrb	r2, [r3, r2]
1004ebd0:	4b55      	ldr	r3, [pc, #340]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004ebd2:	2192      	movs	r1, #146	@ 0x92
1004ebd4:	5c5b      	ldrb	r3, [r3, r1]
1004ebd6:	429a      	cmp	r2, r3
1004ebd8:	d30a      	bcc.n	1004ebf0 <HAL_RADIO_TIMER_Tick+0x158>
1004ebda:	4b53      	ldr	r3, [pc, #332]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004ebdc:	2291      	movs	r2, #145	@ 0x91
1004ebde:	5c9a      	ldrb	r2, [r3, r2]
1004ebe0:	4b51      	ldr	r3, [pc, #324]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004ebe2:	2192      	movs	r1, #146	@ 0x92
1004ebe4:	5c5b      	ldrb	r3, [r3, r1]
1004ebe6:	1ad3      	subs	r3, r2, r3
1004ebe8:	1e5a      	subs	r2, r3, #1
1004ebea:	4193      	sbcs	r3, r2
1004ebec:	b2db      	uxtb	r3, r3
1004ebee:	e00c      	b.n	1004ec0a <HAL_RADIO_TIMER_Tick+0x172>
1004ebf0:	4b4d      	ldr	r3, [pc, #308]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004ebf2:	2291      	movs	r2, #145	@ 0x91
1004ebf4:	5c9b      	ldrb	r3, [r3, r2]
1004ebf6:	0019      	movs	r1, r3
1004ebf8:	4b4b      	ldr	r3, [pc, #300]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004ebfa:	2292      	movs	r2, #146	@ 0x92
1004ebfc:	5c9b      	ldrb	r3, [r3, r2]
1004ebfe:	1acb      	subs	r3, r1, r3
1004ec00:	3301      	adds	r3, #1
1004ec02:	33ff      	adds	r3, #255	@ 0xff
1004ec04:	1e5a      	subs	r2, r3, #1
1004ec06:	4193      	sbcs	r3, r2
1004ec08:	b2db      	uxtb	r3, r3
1004ec0a:	2b00      	cmp	r3, #0
1004ec0c:	d000      	beq.n	1004ec10 <HAL_RADIO_TIMER_Tick+0x178>
1004ec0e:	e76d      	b.n	1004eaec <HAL_RADIO_TIMER_Tick+0x54>
  }

  /* Check for periodic calibration */
  if (RADIO_TIMER_Context.calibrationSettings.calibration_in_progress)
1004ec10:	4b45      	ldr	r3, [pc, #276]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004ec12:	7a1b      	ldrb	r3, [r3, #8]
1004ec14:	2b00      	cmp	r3, #0
1004ec16:	d06a      	beq.n	1004ecee <HAL_RADIO_TIMER_Tick+0x256>
  {
    if (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL))
1004ec18:	4b44      	ldr	r3, [pc, #272]	@ (1004ed2c <HAL_RADIO_TIMER_Tick+0x294>)
1004ec1a:	0018      	movs	r0, r3
1004ec1c:	f7ff fe33 	bl	1004e886 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004ec20:	1e03      	subs	r3, r0, #0
1004ec22:	d100      	bne.n	1004ec26 <HAL_RADIO_TIMER_Tick+0x18e>
1004ec24:	e07b      	b.n	1004ed1e <HAL_RADIO_TIMER_Tick+0x286>
    {
      /* Calibration is completed */
      RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
1004ec26:	4b40      	ldr	r3, [pc, #256]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004ec28:	2200      	movs	r2, #0
1004ec2a:	721a      	strb	r2, [r3, #8]
      if ((RADIO_TIMER_Context.wakeup_calibration == FALSE) && RADIO_TIMER_Context.stop_notimer_action)
1004ec2c:	4b3e      	ldr	r3, [pc, #248]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004ec2e:	2294      	movs	r2, #148	@ 0x94
1004ec30:	5c9b      	ldrb	r3, [r3, r2]
1004ec32:	2b00      	cmp	r3, #0
1004ec34:	d109      	bne.n	1004ec4a <HAL_RADIO_TIMER_Tick+0x1b2>
1004ec36:	4b3c      	ldr	r3, [pc, #240]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004ec38:	2293      	movs	r2, #147	@ 0x93
1004ec3a:	5c9b      	ldrb	r3, [r3, r2]
1004ec3c:	2b00      	cmp	r3, #0
1004ec3e:	d004      	beq.n	1004ec4a <HAL_RADIO_TIMER_Tick+0x1b2>
      {
        RADIO_TIMER_Context.stop_notimer_action = FALSE;
1004ec40:	4b39      	ldr	r3, [pc, #228]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004ec42:	2293      	movs	r2, #147	@ 0x93
1004ec44:	2100      	movs	r1, #0
1004ec46:	5499      	strb	r1, [r3, r2]
1004ec48:	e034      	b.n	1004ecb4 <HAL_RADIO_TIMER_Tick+0x21c>
      }
      else
      {
        /* Collect calibration data */
        _updateCalibrationData();
1004ec4a:	f000 ff2b 	bl	1004faa4 <_updateCalibrationData>
        RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
1004ec4e:	4b36      	ldr	r3, [pc, #216]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004ec50:	228c      	movs	r2, #140	@ 0x8c
1004ec52:	589b      	ldr	r3, [r3, r2]
1004ec54:	240f      	movs	r4, #15
1004ec56:	193a      	adds	r2, r7, r4
1004ec58:	0011      	movs	r1, r2
1004ec5a:	0018      	movs	r0, r3
1004ec5c:	f000 fdc8 	bl	1004f7f0 <_update_user_timeout>
1004ec60:	0002      	movs	r2, r0
1004ec62:	4b31      	ldr	r3, [pc, #196]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004ec64:	218c      	movs	r1, #140	@ 0x8c
1004ec66:	505a      	str	r2, [r3, r1]
        if (expired == 1)
1004ec68:	193b      	adds	r3, r7, r4
1004ec6a:	781b      	ldrb	r3, [r3, #0]
1004ec6c:	2b01      	cmp	r3, #1
1004ec6e:	d121      	bne.n	1004ecb4 <HAL_RADIO_TIMER_Tick+0x21c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004ec70:	f3ef 8310 	mrs	r3, PRIMASK
1004ec74:	617b      	str	r3, [r7, #20]
  return(result);
1004ec76:	697b      	ldr	r3, [r7, #20]
        {
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
1004ec78:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
1004ec7a:	b672      	cpsid	i
}
1004ec7c:	46c0      	nop			@ (mov r8, r8)
1004ec7e:	4b2a      	ldr	r3, [pc, #168]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004ec80:	2291      	movs	r2, #145	@ 0x91
1004ec82:	5c9b      	ldrb	r3, [r3, r2]
1004ec84:	3301      	adds	r3, #1
1004ec86:	4a28      	ldr	r2, [pc, #160]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004ec88:	2192      	movs	r1, #146	@ 0x92
1004ec8a:	5c52      	ldrb	r2, [r2, r1]
1004ec8c:	4293      	cmp	r3, r2
1004ec8e:	d103      	bne.n	1004ec98 <HAL_RADIO_TIMER_Tick+0x200>
1004ec90:	4b25      	ldr	r3, [pc, #148]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004ec92:	2291      	movs	r2, #145	@ 0x91
1004ec94:	5c9b      	ldrb	r3, [r3, r2]
1004ec96:	e004      	b.n	1004eca2 <HAL_RADIO_TIMER_Tick+0x20a>
1004ec98:	4b23      	ldr	r3, [pc, #140]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004ec9a:	2291      	movs	r2, #145	@ 0x91
1004ec9c:	5c9b      	ldrb	r3, [r3, r2]
1004ec9e:	3301      	adds	r3, #1
1004eca0:	b2db      	uxtb	r3, r3
1004eca2:	4a21      	ldr	r2, [pc, #132]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004eca4:	2191      	movs	r1, #145	@ 0x91
1004eca6:	5453      	strb	r3, [r2, r1]
1004eca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004ecaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004ecac:	693b      	ldr	r3, [r7, #16]
1004ecae:	f383 8810 	msr	PRIMASK, r3
}
1004ecb2:	46c0      	nop			@ (mov r8, r8)
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
        }
      }
#else
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired);
1004ecb4:	230f      	movs	r3, #15
1004ecb6:	18fa      	adds	r2, r7, r3
1004ecb8:	4b1d      	ldr	r3, [pc, #116]	@ (1004ed30 <HAL_RADIO_TIMER_Tick+0x298>)
1004ecba:	0011      	movs	r1, r2
1004ecbc:	0018      	movs	r0, r3
1004ecbe:	f000 ff85 	bl	1004fbcc <_check_radio_activity>
#endif

      HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004ecc2:	4b1c      	ldr	r3, [pc, #112]	@ (1004ed34 <HAL_RADIO_TIMER_Tick+0x29c>)
1004ecc4:	0018      	movs	r0, r3
1004ecc6:	f000 fa8d 	bl	1004f1e4 <HAL_RADIO_TIMER_StopVirtualTimer>
      /* Schedule next calibration event */
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
                   HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
1004ecca:	f000 fa29 	bl	1004f120 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004ecce:	0002      	movs	r2, r0
1004ecd0:	000b      	movs	r3, r1
1004ecd2:	4915      	ldr	r1, [pc, #84]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004ecd4:	6849      	ldr	r1, [r1, #4]
1004ecd6:	6039      	str	r1, [r7, #0]
1004ecd8:	2100      	movs	r1, #0
1004ecda:	6079      	str	r1, [r7, #4]
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
1004ecdc:	6838      	ldr	r0, [r7, #0]
1004ecde:	6879      	ldr	r1, [r7, #4]
1004ece0:	1812      	adds	r2, r2, r0
1004ece2:	414b      	adcs	r3, r1
1004ece4:	4913      	ldr	r1, [pc, #76]	@ (1004ed34 <HAL_RADIO_TIMER_Tick+0x29c>)
1004ece6:	0008      	movs	r0, r1
1004ece8:	f000 fcbc 	bl	1004f664 <_start_timer>
      {
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
      }
    }
  }
}
1004ecec:	e017      	b.n	1004ed1e <HAL_RADIO_TIMER_Tick+0x286>
    if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004ecee:	4b0e      	ldr	r3, [pc, #56]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004ecf0:	781b      	ldrb	r3, [r3, #0]
1004ecf2:	2b00      	cmp	r3, #0
1004ecf4:	d013      	beq.n	1004ed1e <HAL_RADIO_TIMER_Tick+0x286>
      if (HAL_RADIO_TIMER_GetCurrentSysTime() > (RADIO_TIMER_Context.calibrationData.last_calibration_time +
1004ecf6:	f000 fa13 	bl	1004f120 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004ecfa:	4b0b      	ldr	r3, [pc, #44]	@ (1004ed28 <HAL_RADIO_TIMER_Tick+0x290>)
1004ecfc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004ecfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004ed00:	24fa      	movs	r4, #250	@ 0xfa
1004ed02:	0364      	lsls	r4, r4, #13
1004ed04:	2500      	movs	r5, #0
1004ed06:	1912      	adds	r2, r2, r4
1004ed08:	416b      	adcs	r3, r5
1004ed0a:	4299      	cmp	r1, r3
1004ed0c:	d803      	bhi.n	1004ed16 <HAL_RADIO_TIMER_Tick+0x27e>
1004ed0e:	d106      	bne.n	1004ed1e <HAL_RADIO_TIMER_Tick+0x286>
1004ed10:	4290      	cmp	r0, r2
1004ed12:	d800      	bhi.n	1004ed16 <HAL_RADIO_TIMER_Tick+0x27e>
}
1004ed14:	e003      	b.n	1004ed1e <HAL_RADIO_TIMER_Tick+0x286>
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
1004ed16:	4b07      	ldr	r3, [pc, #28]	@ (1004ed34 <HAL_RADIO_TIMER_Tick+0x29c>)
1004ed18:	0018      	movs	r0, r3
1004ed1a:	f000 fc8f 	bl	1004f63c <_calibration_callback>
}
1004ed1e:	46c0      	nop			@ (mov r8, r8)
1004ed20:	46bd      	mov	sp, r7
1004ed22:	b010      	add	sp, #64	@ 0x40
1004ed24:	bdb0      	pop	{r4, r5, r7, pc}
1004ed26:	46c0      	nop			@ (mov r8, r8)
1004ed28:	20000f50 	.word	0x20000f50
1004ed2c:	60001000 	.word	0x60001000
1004ed30:	20000fa8 	.word	0x20000fa8
1004ed34:	20000f90 	.word	0x20000f90

1004ed38 <HAL_RADIO_TIMER_GetAnchorPoint>:
  * @brief Get the last anchorPoint in system time unit.
  * @param current_system_time: Current System Time
  * @return TimerCapture register in system time unit.
  */
uint64_t HAL_RADIO_TIMER_GetAnchorPoint(uint64_t *current_system_time)
{
1004ed38:	b580      	push	{r7, lr}
1004ed3a:	b082      	sub	sp, #8
1004ed3c:	af00      	add	r7, sp, #0
1004ed3e:	6078      	str	r0, [r7, #4]
  return TIMER_GetPastSysTime(BLUE->TIMERCAPTUREREG, current_system_time);
1004ed40:	23c0      	movs	r3, #192	@ 0xc0
1004ed42:	05db      	lsls	r3, r3, #23
1004ed44:	695b      	ldr	r3, [r3, #20]
1004ed46:	687a      	ldr	r2, [r7, #4]
1004ed48:	0011      	movs	r1, r2
1004ed4a:	0018      	movs	r0, r3
1004ed4c:	f001 f8b0 	bl	1004feb0 <TIMER_GetPastSysTime>
1004ed50:	0002      	movs	r2, r0
1004ed52:	000b      	movs	r3, r1
}
1004ed54:	0010      	movs	r0, r2
1004ed56:	0019      	movs	r1, r3
1004ed58:	46bd      	mov	sp, r7
1004ed5a:	b002      	add	sp, #8
1004ed5c:	bd80      	pop	{r7, pc}
	...

1004ed60 <HAL_RADIO_TIMER_PowerSaveLevelCheck>:
/**
  * @brief  Returns the admitted low power mode according to the next timer activity.
  * @return Low Power mode
  */
PowerSaveLevels HAL_RADIO_TIMER_PowerSaveLevelCheck(void)
{
1004ed60:	b5f0      	push	{r4, r5, r6, r7, lr}
1004ed62:	b08b      	sub	sp, #44	@ 0x2c
1004ed64:	af00      	add	r7, sp, #0
  uint32_t nextRadioActivity;
  uint8_t timerState;
  uint64_t current_time;
  PowerSaveLevels level;

  if (TIMER_SleepCheck() == FALSE)
1004ed66:	f001 f8d3 	bl	1004ff10 <TIMER_SleepCheck>
1004ed6a:	0003      	movs	r3, r0
1004ed6c:	001a      	movs	r2, r3
1004ed6e:	2301      	movs	r3, #1
1004ed70:	4053      	eors	r3, r2
1004ed72:	b2db      	uxtb	r3, r3
1004ed74:	2b00      	cmp	r3, #0
1004ed76:	d001      	beq.n	1004ed7c <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x1c>
  {
    return POWER_SAVE_LEVEL_RUNNING;
1004ed78:	2300      	movs	r3, #0
1004ed7a:	e0b1      	b.n	1004eee0 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x180>
  }

  level = POWER_SAVE_LEVEL_STOP;
1004ed7c:	2317      	movs	r3, #23
1004ed7e:	2210      	movs	r2, #16
1004ed80:	189b      	adds	r3, r3, r2
1004ed82:	19db      	adds	r3, r3, r7
1004ed84:	2203      	movs	r2, #3
1004ed86:	701a      	strb	r2, [r3, #0]

  current_time = HAL_RADIO_TIMER_GetCurrentSysTime();
1004ed88:	f000 f9ca 	bl	1004f120 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004ed8c:	0002      	movs	r2, r0
1004ed8e:	000b      	movs	r3, r1
1004ed90:	61ba      	str	r2, [r7, #24]
1004ed92:	61fb      	str	r3, [r7, #28]
  timerState = TIMER_GetRadioTimerValue(&nextRadioActivity);
1004ed94:	2317      	movs	r3, #23
1004ed96:	18fe      	adds	r6, r7, r3
1004ed98:	2310      	movs	r3, #16
1004ed9a:	18fb      	adds	r3, r7, r3
1004ed9c:	0018      	movs	r0, r3
1004ed9e:	f001 f8d5 	bl	1004ff4c <TIMER_GetRadioTimerValue>
1004eda2:	0003      	movs	r3, r0
1004eda4:	7033      	strb	r3, [r6, #0]

  /*Timer1 and wakeup timer are programmed only through the timer module*/
  if (((RADIO_TIMER_Context.radioTimer.active || RADIO_TIMER_Context.radioTimer.pending)
1004eda6:	4b50      	ldr	r3, [pc, #320]	@ (1004eee8 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004eda8:	2261      	movs	r2, #97	@ 0x61
1004edaa:	5c9b      	ldrb	r3, [r3, r2]
1004edac:	2b00      	cmp	r3, #0
1004edae:	d104      	bne.n	1004edba <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x5a>
1004edb0:	4b4d      	ldr	r3, [pc, #308]	@ (1004eee8 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004edb2:	2262      	movs	r2, #98	@ 0x62
1004edb4:	5c9b      	ldrb	r3, [r3, r2]
1004edb6:	2b00      	cmp	r3, #0
1004edb8:	d004      	beq.n	1004edc4 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x64>
       && !(timerState == RADIO_TIMER1_BUSY)) || RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served)
1004edba:	2317      	movs	r3, #23
1004edbc:	18fb      	adds	r3, r7, r3
1004edbe:	781b      	ldrb	r3, [r3, #0]
1004edc0:	2b01      	cmp	r3, #1
1004edc2:	d104      	bne.n	1004edce <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x6e>
1004edc4:	4b48      	ldr	r3, [pc, #288]	@ (1004eee8 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004edc6:	2263      	movs	r2, #99	@ 0x63
1004edc8:	5c9b      	ldrb	r3, [r3, r2]
1004edca:	2b00      	cmp	r3, #0
1004edcc:	d029      	beq.n	1004ee22 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xc2>
  {
    if (RADIO_TIMER_Context.radioTimer.expiryTime < (current_time + \
1004edce:	4b46      	ldr	r3, [pc, #280]	@ (1004eee8 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004edd0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
1004edd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                                                     RADIO_TIMER_Context.last_setup_time + \
1004edd4:	4944      	ldr	r1, [pc, #272]	@ (1004eee8 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004edd6:	2084      	movs	r0, #132	@ 0x84
1004edd8:	5c09      	ldrb	r1, [r1, r0]
1004edda:	000c      	movs	r4, r1
1004eddc:	2100      	movs	r1, #0
1004edde:	000d      	movs	r5, r1
    if (RADIO_TIMER_Context.radioTimer.expiryTime < (current_time + \
1004ede0:	69b8      	ldr	r0, [r7, #24]
1004ede2:	69f9      	ldr	r1, [r7, #28]
1004ede4:	1824      	adds	r4, r4, r0
1004ede6:	414d      	adcs	r5, r1
1004ede8:	0020      	movs	r0, r4
1004edea:	0029      	movs	r1, r5
                                                     RADIO_TIMER_Context.hs_startup_time + \
1004edec:	4e3e      	ldr	r6, [pc, #248]	@ (1004eee8 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004edee:	6eb6      	ldr	r6, [r6, #104]	@ 0x68
1004edf0:	60be      	str	r6, [r7, #8]
1004edf2:	2600      	movs	r6, #0
1004edf4:	60fe      	str	r6, [r7, #12]
                                                     RADIO_TIMER_Context.last_setup_time + \
1004edf6:	68bc      	ldr	r4, [r7, #8]
1004edf8:	68fd      	ldr	r5, [r7, #12]
1004edfa:	1900      	adds	r0, r0, r4
1004edfc:	4169      	adcs	r1, r5
                                                     RADIO_TIMER_Context.hs_startup_time + \
1004edfe:	2452      	movs	r4, #82	@ 0x52
1004ee00:	2500      	movs	r5, #0
1004ee02:	1900      	adds	r0, r0, r4
1004ee04:	4169      	adcs	r1, r5
    if (RADIO_TIMER_Context.radioTimer.expiryTime < (current_time + \
1004ee06:	4299      	cmp	r1, r3
1004ee08:	d802      	bhi.n	1004ee10 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xb0>
1004ee0a:	d103      	bne.n	1004ee14 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xb4>
1004ee0c:	4290      	cmp	r0, r2
1004ee0e:	d901      	bls.n	1004ee14 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xb4>
                                                     LOW_POWER_THR))
    {
      return POWER_SAVE_LEVEL_CPU_HALT;
1004ee10:	2301      	movs	r3, #1
1004ee12:	e065      	b.n	1004eee0 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x180>
    }

    level = POWER_SAVE_LEVEL_STOP_LS_CLOCK_ON;
1004ee14:	2317      	movs	r3, #23
1004ee16:	2210      	movs	r2, #16
1004ee18:	189b      	adds	r3, r3, r2
1004ee1a:	19db      	adds	r3, r3, r7
1004ee1c:	2202      	movs	r2, #2
1004ee1e:	701a      	strb	r2, [r3, #0]
1004ee20:	e00b      	b.n	1004ee3a <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xda>
  }
  else
  {
    if ((timerState == RADIO_TIMER2_BUSY) || (timerState == RADIO_TIMER1_BUSY))
1004ee22:	2317      	movs	r3, #23
1004ee24:	18fb      	adds	r3, r7, r3
1004ee26:	781b      	ldrb	r3, [r3, #0]
1004ee28:	2b02      	cmp	r3, #2
1004ee2a:	d004      	beq.n	1004ee36 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xd6>
1004ee2c:	2317      	movs	r3, #23
1004ee2e:	18fb      	adds	r3, r7, r3
1004ee30:	781b      	ldrb	r3, [r3, #0]
1004ee32:	2b01      	cmp	r3, #1
1004ee34:	d101      	bne.n	1004ee3a <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xda>
    {
      return POWER_SAVE_LEVEL_CPU_HALT;
1004ee36:	2301      	movs	r3, #1
1004ee38:	e052      	b.n	1004eee0 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x180>
    }
  }

  if (RADIO_TIMER_Context.rootNode != NULL && RADIO_TIMER_Context.rootNode->active)
1004ee3a:	4b2b      	ldr	r3, [pc, #172]	@ (1004eee8 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004ee3c:	228c      	movs	r2, #140	@ 0x8c
1004ee3e:	589b      	ldr	r3, [r3, r2]
1004ee40:	2b00      	cmp	r3, #0
1004ee42:	d048      	beq.n	1004eed6 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x176>
1004ee44:	4b28      	ldr	r3, [pc, #160]	@ (1004eee8 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004ee46:	228c      	movs	r2, #140	@ 0x8c
1004ee48:	589b      	ldr	r3, [r3, r2]
1004ee4a:	7b1b      	ldrb	r3, [r3, #12]
1004ee4c:	2b00      	cmp	r3, #0
1004ee4e:	d042      	beq.n	1004eed6 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x176>
  {
    if (RADIO_TIMER_Context.rootNode->expiryTime < (current_time + LOW_POWER_THR + RADIO_TIMER_Context.hs_startup_time))
1004ee50:	4b25      	ldr	r3, [pc, #148]	@ (1004eee8 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004ee52:	228c      	movs	r2, #140	@ 0x8c
1004ee54:	589b      	ldr	r3, [r3, r2]
1004ee56:	681a      	ldr	r2, [r3, #0]
1004ee58:	685b      	ldr	r3, [r3, #4]
1004ee5a:	4923      	ldr	r1, [pc, #140]	@ (1004eee8 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004ee5c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
1004ee5e:	6039      	str	r1, [r7, #0]
1004ee60:	2100      	movs	r1, #0
1004ee62:	6079      	str	r1, [r7, #4]
1004ee64:	69b8      	ldr	r0, [r7, #24]
1004ee66:	69f9      	ldr	r1, [r7, #28]
1004ee68:	683c      	ldr	r4, [r7, #0]
1004ee6a:	687d      	ldr	r5, [r7, #4]
1004ee6c:	1824      	adds	r4, r4, r0
1004ee6e:	414d      	adcs	r5, r1
1004ee70:	0020      	movs	r0, r4
1004ee72:	0029      	movs	r1, r5
1004ee74:	2452      	movs	r4, #82	@ 0x52
1004ee76:	2500      	movs	r5, #0
1004ee78:	1900      	adds	r0, r0, r4
1004ee7a:	4169      	adcs	r1, r5
1004ee7c:	4299      	cmp	r1, r3
1004ee7e:	d802      	bhi.n	1004ee86 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x126>
1004ee80:	d103      	bne.n	1004ee8a <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x12a>
1004ee82:	4290      	cmp	r0, r2
1004ee84:	d901      	bls.n	1004ee8a <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x12a>
    {
      return POWER_SAVE_LEVEL_CPU_HALT;
1004ee86:	2301      	movs	r3, #1
1004ee88:	e02a      	b.n	1004eee0 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x180>
    }

    if (level == POWER_SAVE_LEVEL_STOP)
1004ee8a:	2317      	movs	r3, #23
1004ee8c:	2210      	movs	r2, #16
1004ee8e:	189b      	adds	r3, r3, r2
1004ee90:	19db      	adds	r3, r3, r7
1004ee92:	781b      	ldrb	r3, [r3, #0]
1004ee94:	2b03      	cmp	r3, #3
1004ee96:	d118      	bne.n	1004eeca <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x16a>
    {
      if ((RADIO_TIMER_Context.rootNode->next == NULL)
1004ee98:	4b13      	ldr	r3, [pc, #76]	@ (1004eee8 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004ee9a:	228c      	movs	r2, #140	@ 0x8c
1004ee9c:	589b      	ldr	r3, [r3, r2]
1004ee9e:	691b      	ldr	r3, [r3, #16]
1004eea0:	2b00      	cmp	r3, #0
1004eea2:	d112      	bne.n	1004eeca <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x16a>
          && (RADIO_TIMER_Context.rootNode == &RADIO_TIMER_Context.calibrationTimer))
1004eea4:	4b10      	ldr	r3, [pc, #64]	@ (1004eee8 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004eea6:	228c      	movs	r2, #140	@ 0x8c
1004eea8:	589a      	ldr	r2, [r3, r2]
1004eeaa:	4b10      	ldr	r3, [pc, #64]	@ (1004eeec <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x18c>)
1004eeac:	429a      	cmp	r2, r3
1004eeae:	d10c      	bne.n	1004eeca <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x16a>
      {
        RADIO_TIMER_Context.stop_notimer_action = TRUE;
1004eeb0:	4b0d      	ldr	r3, [pc, #52]	@ (1004eee8 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004eeb2:	2293      	movs	r2, #147	@ 0x93
1004eeb4:	2101      	movs	r1, #1
1004eeb6:	5499      	strb	r1, [r3, r2]
        _virtualTimeBaseEnable(DISABLE);
1004eeb8:	2000      	movs	r0, #0
1004eeba:	f000 fd51 	bl	1004f960 <_virtualTimeBaseEnable>
        LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP);
1004eebe:	4b0c      	ldr	r3, [pc, #48]	@ (1004eef0 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x190>)
1004eec0:	0018      	movs	r0, r3
1004eec2:	f7ff fc15 	bl	1004e6f0 <LL_RADIO_TIMER_DisableCPUWakeupTimer>
        return POWER_SAVE_LEVEL_STOP;
1004eec6:	2303      	movs	r3, #3
1004eec8:	e00a      	b.n	1004eee0 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x180>
      }
    }
    level = POWER_SAVE_LEVEL_STOP_LS_CLOCK_ON;
1004eeca:	2317      	movs	r3, #23
1004eecc:	2210      	movs	r2, #16
1004eece:	189b      	adds	r3, r3, r2
1004eed0:	19db      	adds	r3, r3, r7
1004eed2:	2202      	movs	r2, #2
1004eed4:	701a      	strb	r2, [r3, #0]
  }

  return level;
1004eed6:	2317      	movs	r3, #23
1004eed8:	2210      	movs	r2, #16
1004eeda:	189b      	adds	r3, r3, r2
1004eedc:	19db      	adds	r3, r3, r7
1004eede:	781b      	ldrb	r3, [r3, #0]
}
1004eee0:	0018      	movs	r0, r3
1004eee2:	46bd      	mov	sp, r7
1004eee4:	b00b      	add	sp, #44	@ 0x2c
1004eee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004eee8:	20000f50 	.word	0x20000f50
1004eeec:	20000f90 	.word	0x20000f90
1004eef0:	60001800 	.word	0x60001800

1004eef4 <HAL_RADIO_TIMER_SetRadioTimerValue>:
  * @param  cal_req: Specify if PLL calibration is requested (1) or not (0).
  * @retval 0 if radio activity has been scheduled successfully.
  * @retval 1 if radio activity has been rejected (it is too close or in the past).
  */
uint32_t HAL_RADIO_TIMER_SetRadioTimerValue(uint32_t time, uint8_t event_type, uint8_t cal_req)
{
1004eef4:	b5f0      	push	{r4, r5, r6, r7, lr}
1004eef6:	b085      	sub	sp, #20
1004eef8:	af00      	add	r7, sp, #0
1004eefa:	6078      	str	r0, [r7, #4]
1004eefc:	0008      	movs	r0, r1
1004eefe:	0011      	movs	r1, r2
1004ef00:	1cfb      	adds	r3, r7, #3
1004ef02:	1c02      	adds	r2, r0, #0
1004ef04:	701a      	strb	r2, [r3, #0]
1004ef06:	1cbb      	adds	r3, r7, #2
1004ef08:	1c0a      	adds	r2, r1, #0
1004ef0a:	701a      	strb	r2, [r3, #0]
  uint8_t retVal = 0;
1004ef0c:	260f      	movs	r6, #15
1004ef0e:	19bb      	adds	r3, r7, r6
1004ef10:	2200      	movs	r2, #0
1004ef12:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB06) || defined (STM32WB07)
  uint64_t current_time;
#endif

  RADIO_TIMER_Context.radioTimer.event_type = event_type;
1004ef14:	1cfb      	adds	r3, r7, #3
1004ef16:	781b      	ldrb	r3, [r3, #0]
1004ef18:	1e5a      	subs	r2, r3, #1
1004ef1a:	4193      	sbcs	r3, r2
1004ef1c:	b2d9      	uxtb	r1, r3
1004ef1e:	4b1b      	ldr	r3, [pc, #108]	@ (1004ef8c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004ef20:	2264      	movs	r2, #100	@ 0x64
1004ef22:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.cal_req = cal_req;
1004ef24:	1cbb      	adds	r3, r7, #2
1004ef26:	781b      	ldrb	r3, [r3, #0]
1004ef28:	1e5a      	subs	r2, r3, #1
1004ef2a:	4193      	sbcs	r3, r2
1004ef2c:	b2d9      	uxtb	r1, r3
1004ef2e:	4b17      	ldr	r3, [pc, #92]	@ (1004ef8c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004ef30:	2260      	movs	r2, #96	@ 0x60
1004ef32:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = RADIO_TIMER_Context.calibrationData.last_calibration_time + (uint32_t)(time - (uint32_t)RADIO_TIMER_Context.calibrationData.last_calibration_time);
1004ef34:	4b15      	ldr	r3, [pc, #84]	@ (1004ef8c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004ef36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004ef38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004ef3a:	4914      	ldr	r1, [pc, #80]	@ (1004ef8c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004ef3c:	6a88      	ldr	r0, [r1, #40]	@ 0x28
1004ef3e:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
1004ef40:	6879      	ldr	r1, [r7, #4]
1004ef42:	1a09      	subs	r1, r1, r0
1004ef44:	000c      	movs	r4, r1
1004ef46:	2100      	movs	r1, #0
1004ef48:	000d      	movs	r5, r1
1004ef4a:	1912      	adds	r2, r2, r4
1004ef4c:	416b      	adcs	r3, r5
1004ef4e:	490f      	ldr	r1, [pc, #60]	@ (1004ef8c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004ef50:	658a      	str	r2, [r1, #88]	@ 0x58
1004ef52:	65cb      	str	r3, [r1, #92]	@ 0x5c
  RADIO_TIMER_Context.radioTimer.active = FALSE;
1004ef54:	4b0d      	ldr	r3, [pc, #52]	@ (1004ef8c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004ef56:	2261      	movs	r2, #97	@ 0x61
1004ef58:	2100      	movs	r1, #0
1004ef5a:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004ef5c:	4b0b      	ldr	r3, [pc, #44]	@ (1004ef8c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004ef5e:	2263      	movs	r2, #99	@ 0x63
1004ef60:	2100      	movs	r1, #0
1004ef62:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = TRUE;
1004ef64:	4b09      	ldr	r3, [pc, #36]	@ (1004ef8c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004ef66:	2262      	movs	r2, #98	@ 0x62
1004ef68:	2101      	movs	r1, #1
1004ef6a:	5499      	strb	r1, [r3, r2]
      This call is not needed if radio errors are not enabled by the BLE stack. */
      _set_controller_as_host();
    }
  }
#else
  _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
1004ef6c:	19ba      	adds	r2, r7, r6
1004ef6e:	4b08      	ldr	r3, [pc, #32]	@ (1004ef90 <HAL_RADIO_TIMER_SetRadioTimerValue+0x9c>)
1004ef70:	0011      	movs	r1, r2
1004ef72:	0018      	movs	r0, r3
1004ef74:	f000 fe2a 	bl	1004fbcc <_check_radio_activity>
#endif

  _virtualTimeBaseEnable(ENABLE);
1004ef78:	2001      	movs	r0, #1
1004ef7a:	f000 fcf1 	bl	1004f960 <_virtualTimeBaseEnable>

  return retVal;
1004ef7e:	19bb      	adds	r3, r7, r6
1004ef80:	781b      	ldrb	r3, [r3, #0]
}
1004ef82:	0018      	movs	r0, r3
1004ef84:	46bd      	mov	sp, r7
1004ef86:	b005      	add	sp, #20
1004ef88:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004ef8a:	46c0      	nop			@ (mov r8, r8)
1004ef8c:	20000f50 	.word	0x20000f50
1004ef90:	20000fa8 	.word	0x20000fa8

1004ef94 <HAL_RADIO_TIMER_ClearRadioTimerValue>:
  * @retval 0 if the radio activity has been cleared successfully.
  * @retval 1 if it is too late to clear the last radio activity.
  * @retval 2 if it might not be possible to clear the last radio activity.
  */
uint32_t HAL_RADIO_TIMER_ClearRadioTimerValue(void)
{
1004ef94:	b5b0      	push	{r4, r5, r7, lr}
1004ef96:	b088      	sub	sp, #32
1004ef98:	af00      	add	r7, sp, #0
  int64_t time_diff;
  uint8_t retVal;

  /* Disable Radio Timer1/2 and BLE Wakeup Timer */
  LL_RADIO_TIMER_DisableTimer1(BLUE);
1004ef9a:	23c0      	movs	r3, #192	@ 0xc0
1004ef9c:	05db      	lsls	r3, r3, #23
1004ef9e:	0018      	movs	r0, r3
1004efa0:	f7ff fb0c 	bl	1004e5bc <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
1004efa4:	23c0      	movs	r3, #192	@ 0xc0
1004efa6:	05db      	lsls	r3, r3, #23
1004efa8:	0018      	movs	r0, r3
1004efaa:	f7ff fb27 	bl	1004e5fc <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004efae:	4b31      	ldr	r3, [pc, #196]	@ (1004f074 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe0>)
1004efb0:	0018      	movs	r0, r3
1004efb2:	f7ff fb69 	bl	1004e688 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
  RADIO_TIMER_Context.radioTimer.active = FALSE;
1004efb6:	4b30      	ldr	r3, [pc, #192]	@ (1004f078 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004efb8:	2261      	movs	r2, #97	@ 0x61
1004efba:	2100      	movs	r1, #0
1004efbc:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004efbe:	4b2e      	ldr	r3, [pc, #184]	@ (1004f078 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004efc0:	2262      	movs	r2, #98	@ 0x62
1004efc2:	2100      	movs	r1, #0
1004efc4:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004efc6:	4b2c      	ldr	r3, [pc, #176]	@ (1004f078 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004efc8:	2263      	movs	r2, #99	@ 0x63
1004efca:	2100      	movs	r1, #0
1004efcc:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004efce:	f3ef 8310 	mrs	r3, PRIMASK
1004efd2:	60bb      	str	r3, [r7, #8]
  return(result);
1004efd4:	68bb      	ldr	r3, [r7, #8]

  /*The rfSetup is different if Timer1 or Wakeup timer is programmed*/
  ATOMIC_SECTION_BEGIN();
1004efd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
1004efd8:	b672      	cpsid	i
}
1004efda:	46c0      	nop			@ (mov r8, r8)
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
1004efdc:	4b26      	ldr	r3, [pc, #152]	@ (1004f078 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004efde:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
1004efe0:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
              - HAL_RADIO_TIMER_GetCurrentSysTime() \
1004efe2:	f000 f89d 	bl	1004f120 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004efe6:	0002      	movs	r2, r0
1004efe8:	000b      	movs	r3, r1
1004efea:	1aa4      	subs	r4, r4, r2
1004efec:	419d      	sbcs	r5, r3
1004efee:	0022      	movs	r2, r4
1004eff0:	002b      	movs	r3, r5
              - RADIO_TIMER_Context.last_setup_time;
1004eff2:	4921      	ldr	r1, [pc, #132]	@ (1004f078 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004eff4:	2084      	movs	r0, #132	@ 0x84
1004eff6:	5c09      	ldrb	r1, [r1, r0]
1004eff8:	6039      	str	r1, [r7, #0]
1004effa:	2100      	movs	r1, #0
1004effc:	6079      	str	r1, [r7, #4]
1004effe:	6838      	ldr	r0, [r7, #0]
1004f000:	6879      	ldr	r1, [r7, #4]
1004f002:	1a12      	subs	r2, r2, r0
1004f004:	418b      	sbcs	r3, r1
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
1004f006:	613a      	str	r2, [r7, #16]
1004f008:	617b      	str	r3, [r7, #20]
1004f00a:	69bb      	ldr	r3, [r7, #24]
1004f00c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004f00e:	68fb      	ldr	r3, [r7, #12]
1004f010:	f383 8810 	msr	PRIMASK, r3
}
1004f014:	46c0      	nop			@ (mov r8, r8)
  {
    _check_host_activity();
  }
#endif

  if (time_diff <= 0)
1004f016:	697b      	ldr	r3, [r7, #20]
1004f018:	2b00      	cmp	r3, #0
1004f01a:	dc0c      	bgt.n	1004f036 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
1004f01c:	697b      	ldr	r3, [r7, #20]
1004f01e:	2b00      	cmp	r3, #0
1004f020:	d102      	bne.n	1004f028 <HAL_RADIO_TIMER_ClearRadioTimerValue+0x94>
1004f022:	693b      	ldr	r3, [r7, #16]
1004f024:	2b00      	cmp	r3, #0
1004f026:	d106      	bne.n	1004f036 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
  {
    retVal = HAL_RADIO_TIMER_LATE;
1004f028:	2317      	movs	r3, #23
1004f02a:	2208      	movs	r2, #8
1004f02c:	189b      	adds	r3, r3, r2
1004f02e:	19db      	adds	r3, r3, r7
1004f030:	2201      	movs	r2, #1
1004f032:	701a      	strb	r2, [r3, #0]
1004f034:	e015      	b.n	1004f062 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else if (time_diff < CLEAR_MIN_THR)
1004f036:	697b      	ldr	r3, [r7, #20]
1004f038:	2b00      	cmp	r3, #0
1004f03a:	dc0c      	bgt.n	1004f056 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
1004f03c:	697b      	ldr	r3, [r7, #20]
1004f03e:	2b00      	cmp	r3, #0
1004f040:	d102      	bne.n	1004f048 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xb4>
1004f042:	693b      	ldr	r3, [r7, #16]
1004f044:	2b0e      	cmp	r3, #14
1004f046:	d806      	bhi.n	1004f056 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
  {
    retVal = HAL_RADIO_TIMER_CRITICAL;
1004f048:	2317      	movs	r3, #23
1004f04a:	2208      	movs	r2, #8
1004f04c:	189b      	adds	r3, r3, r2
1004f04e:	19db      	adds	r3, r3, r7
1004f050:	2202      	movs	r2, #2
1004f052:	701a      	strb	r2, [r3, #0]
1004f054:	e005      	b.n	1004f062 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else
  {
    retVal = HAL_RADIO_TIMER_SUCCESS;
1004f056:	2317      	movs	r3, #23
1004f058:	2208      	movs	r2, #8
1004f05a:	189b      	adds	r3, r3, r2
1004f05c:	19db      	adds	r3, r3, r7
1004f05e:	2200      	movs	r2, #0
1004f060:	701a      	strb	r2, [r3, #0]
  }

  return retVal;
1004f062:	2317      	movs	r3, #23
1004f064:	2208      	movs	r2, #8
1004f066:	189b      	adds	r3, r3, r2
1004f068:	19db      	adds	r3, r3, r7
1004f06a:	781b      	ldrb	r3, [r3, #0]
}
1004f06c:	0018      	movs	r0, r3
1004f06e:	46bd      	mov	sp, r7
1004f070:	b008      	add	sp, #32
1004f072:	bdb0      	pop	{r4, r5, r7, pc}
1004f074:	60001800 	.word	0x60001800
1004f078:	20000f50 	.word	0x20000f50

1004f07c <HAL_RADIO_TIMER_SetRadioCloseTimeout>:
  *        The current time is sampled and increased by two.
  *        It means that the timer is going to trigger in a timer interval that goes
  *        from one to two machine time units.
  */
void HAL_RADIO_TIMER_SetRadioCloseTimeout(void)
{
1004f07c:	b580      	push	{r7, lr}
1004f07e:	b084      	sub	sp, #16
1004f080:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004f082:	f3ef 8310 	mrs	r3, PRIMASK
1004f086:	603b      	str	r3, [r7, #0]
  return(result);
1004f088:	683b      	ldr	r3, [r7, #0]
  uint32_t current_time;

  ATOMIC_SECTION_BEGIN();
1004f08a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
1004f08c:	b672      	cpsid	i
}
1004f08e:	46c0      	nop			@ (mov r8, r8)
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004f090:	4b0e      	ldr	r3, [pc, #56]	@ (1004f0cc <HAL_RADIO_TIMER_SetRadioCloseTimeout+0x50>)
1004f092:	0018      	movs	r0, r3
1004f094:	f7ff fb6d 	bl	1004e772 <LL_RADIO_TIMER_GetAbsoluteTime>
1004f098:	0003      	movs	r3, r0
1004f09a:	60bb      	str	r3, [r7, #8]
  LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + 2) & TIMER_MAX_VALUE));
1004f09c:	68bb      	ldr	r3, [r7, #8]
1004f09e:	1c9a      	adds	r2, r3, #2
1004f0a0:	23c0      	movs	r3, #192	@ 0xc0
1004f0a2:	05db      	lsls	r3, r3, #23
1004f0a4:	0011      	movs	r1, r2
1004f0a6:	0018      	movs	r0, r3
1004f0a8:	f7ff fac8 	bl	1004e63c <LL_RADIO_TIMER_SetTimeout>
  LL_RADIO_TIMER_EnableTimer1(BLUE);
1004f0ac:	23c0      	movs	r3, #192	@ 0xc0
1004f0ae:	05db      	lsls	r3, r3, #23
1004f0b0:	0018      	movs	r0, r3
1004f0b2:	f7ff fa73 	bl	1004e59c <LL_RADIO_TIMER_EnableTimer1>
1004f0b6:	68fb      	ldr	r3, [r7, #12]
1004f0b8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004f0ba:	687b      	ldr	r3, [r7, #4]
1004f0bc:	f383 8810 	msr	PRIMASK, r3
}
1004f0c0:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();
}
1004f0c2:	46c0      	nop			@ (mov r8, r8)
1004f0c4:	46bd      	mov	sp, r7
1004f0c6:	b004      	add	sp, #16
1004f0c8:	bd80      	pop	{r7, pc}
1004f0ca:	46c0      	nop			@ (mov r8, r8)
1004f0cc:	60001800 	.word	0x60001800

1004f0d0 <HAL_RADIO_TIMER_RadioTimerIsr>:
/**
  * @brief  Radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_RadioTimerIsr(void)
{
1004f0d0:	b580      	push	{r7, lr}
1004f0d2:	af00      	add	r7, sp, #0
  if (!(LL_RADIO_TIMER_IsEnabledTimer1(BLUE) || LL_RADIO_TIMER_IsEnabledTimer2(BLUE)))
  {
    _check_host_activity();
  }
#endif
}
1004f0d4:	46c0      	nop			@ (mov r8, r8)
1004f0d6:	46bd      	mov	sp, r7
1004f0d8:	bd80      	pop	{r7, pc}
	...

1004f0dc <HAL_RADIO_TIMER_EndOfRadioActivityIsr>:
/**
  * @brief  Timer State machine semaphore to signal the radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_EndOfRadioActivityIsr(void)
{
1004f0dc:	b580      	push	{r7, lr}
1004f0de:	af00      	add	r7, sp, #0
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004f0e0:	4b03      	ldr	r3, [pc, #12]	@ (1004f0f0 <HAL_RADIO_TIMER_EndOfRadioActivityIsr+0x14>)
1004f0e2:	2263      	movs	r2, #99	@ 0x63
1004f0e4:	2100      	movs	r1, #0
1004f0e6:	5499      	strb	r1, [r3, r2]
}
1004f0e8:	46c0      	nop			@ (mov r8, r8)
1004f0ea:	46bd      	mov	sp, r7
1004f0ec:	bd80      	pop	{r7, pc}
1004f0ee:	46c0      	nop			@ (mov r8, r8)
1004f0f0:	20000f50 	.word	0x20000f50

1004f0f4 <HAL_RADIO_TIMER_MachineTimeToSysTime>:
  *          storing the system time. It should be called only in
  *          user context and not in interrupt context.
  * @return  STU value
  */
uint32_t HAL_RADIO_TIMER_MachineTimeToSysTime(uint32_t time)
{
1004f0f4:	b580      	push	{r7, lr}
1004f0f6:	b082      	sub	sp, #8
1004f0f8:	af00      	add	r7, sp, #0
1004f0fa:	6078      	str	r0, [r7, #4]
  return blue_unit_conversion(time, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
1004f0fc:	4b06      	ldr	r3, [pc, #24]	@ (1004f118 <HAL_RADIO_TIMER_MachineTimeToSysTime+0x24>)
1004f0fe:	69db      	ldr	r3, [r3, #28]
1004f100:	0019      	movs	r1, r3
1004f102:	4a06      	ldr	r2, [pc, #24]	@ (1004f11c <HAL_RADIO_TIMER_MachineTimeToSysTime+0x28>)
1004f104:	687b      	ldr	r3, [r7, #4]
1004f106:	0018      	movs	r0, r3
1004f108:	f7f1 ffdc 	bl	100410c4 <blue_unit_conversion>
1004f10c:	0003      	movs	r3, r0
}
1004f10e:	0018      	movs	r0, r3
1004f110:	46bd      	mov	sp, r7
1004f112:	b002      	add	sp, #8
1004f114:	bd80      	pop	{r7, pc}
1004f116:	46c0      	nop			@ (mov r8, r8)
1004f118:	20000f50 	.word	0x20000f50
1004f11c:	00000635 	.word	0x00000635

1004f120 <HAL_RADIO_TIMER_GetCurrentSysTime>:
  *         The returned value can be used as absolute time parameter where needed in the other
  *         HAL_RADIO_TIMER* APIs
  * @return absolute current time expressed in system time units.
  */
uint64_t HAL_RADIO_TIMER_GetCurrentSysTime(void)
{
1004f120:	b580      	push	{r7, lr}
1004f122:	b082      	sub	sp, #8
1004f124:	af00      	add	r7, sp, #0
  uint32_t current_machine_time;
  return _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
1004f126:	1d3a      	adds	r2, r7, #4
1004f128:	4b05      	ldr	r3, [pc, #20]	@ (1004f140 <HAL_RADIO_TIMER_GetCurrentSysTime+0x20>)
1004f12a:	0011      	movs	r1, r2
1004f12c:	0018      	movs	r0, r3
1004f12e:	f000 faf7 	bl	1004f720 <_get_system_time_and_machine>
1004f132:	0002      	movs	r2, r0
1004f134:	000b      	movs	r3, r1
}
1004f136:	0010      	movs	r0, r2
1004f138:	0019      	movs	r1, r3
1004f13a:	46bd      	mov	sp, r7
1004f13c:	b002      	add	sp, #8
1004f13e:	bd80      	pop	{r7, pc}
1004f140:	20000f50 	.word	0x20000f50

1004f144 <HAL_RADIO_TIMER_StartVirtualTimer>:
  * @param  msRelTimeout: The relative time, from current time, expressed in ms
  * @retval 0 if the timerHandle is valid.
  * @retval 1 if the timerHandle is not valid. It is already started.
  */
uint32_t HAL_RADIO_TIMER_StartVirtualTimer(VTIMER_HandleType *timerHandle, uint32_t msRelTimeout)
{
1004f144:	b5b0      	push	{r4, r5, r7, lr}
1004f146:	b088      	sub	sp, #32
1004f148:	af00      	add	r7, sp, #0
1004f14a:	60f8      	str	r0, [r7, #12]
1004f14c:	60b9      	str	r1, [r7, #8]
  uint64_t temp = msRelTimeout;
1004f14e:	68bb      	ldr	r3, [r7, #8]
1004f150:	61bb      	str	r3, [r7, #24]
1004f152:	2300      	movs	r3, #0
1004f154:	61fb      	str	r3, [r7, #28]
  uint8_t retVal;
  retVal = _start_timer(timerHandle, HAL_RADIO_TIMER_GetCurrentSysTime() + (temp * TIMER_SYSTICK_PER_10MS) / 10);
1004f156:	f7ff ffe3 	bl	1004f120 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004f15a:	6038      	str	r0, [r7, #0]
1004f15c:	6079      	str	r1, [r7, #4]
1004f15e:	69bb      	ldr	r3, [r7, #24]
1004f160:	0d1b      	lsrs	r3, r3, #20
1004f162:	69fa      	ldr	r2, [r7, #28]
1004f164:	0315      	lsls	r5, r2, #12
1004f166:	431d      	orrs	r5, r3
1004f168:	69bb      	ldr	r3, [r7, #24]
1004f16a:	031c      	lsls	r4, r3, #12
1004f16c:	220a      	movs	r2, #10
1004f16e:	2300      	movs	r3, #0
1004f170:	0020      	movs	r0, r4
1004f172:	0029      	movs	r1, r5
1004f174:	f7f2 f95c 	bl	10041430 <__aeabi_uldivmod>
1004f178:	0002      	movs	r2, r0
1004f17a:	000b      	movs	r3, r1
1004f17c:	6838      	ldr	r0, [r7, #0]
1004f17e:	6879      	ldr	r1, [r7, #4]
1004f180:	1880      	adds	r0, r0, r2
1004f182:	4159      	adcs	r1, r3
1004f184:	0002      	movs	r2, r0
1004f186:	000b      	movs	r3, r1
1004f188:	68f9      	ldr	r1, [r7, #12]
1004f18a:	0008      	movs	r0, r1
1004f18c:	f000 fa6a 	bl	1004f664 <_start_timer>
1004f190:	0002      	movs	r2, r0
1004f192:	240f      	movs	r4, #15
1004f194:	2508      	movs	r5, #8
1004f196:	1963      	adds	r3, r4, r5
1004f198:	19db      	adds	r3, r3, r7
1004f19a:	701a      	strb	r2, [r3, #0]
  _virtualTimeBaseEnable(ENABLE);
1004f19c:	2001      	movs	r0, #1
1004f19e:	f000 fbdf 	bl	1004f960 <_virtualTimeBaseEnable>

  return retVal;
1004f1a2:	1963      	adds	r3, r4, r5
1004f1a4:	19db      	adds	r3, r3, r7
1004f1a6:	781b      	ldrb	r3, [r3, #0]
}
1004f1a8:	0018      	movs	r0, r3
1004f1aa:	46bd      	mov	sp, r7
1004f1ac:	b008      	add	sp, #32
1004f1ae:	bdb0      	pop	{r4, r5, r7, pc}

1004f1b0 <HAL_RADIO_TIMER_StartVirtualTimerSysTime>:
  * @param time: Absolute time expressed in STU.
  * @retval 0 if the timerHandle is valid.
  * @retval 1 if the timerHandle is not valid. It is already started.
  */
uint32_t HAL_RADIO_TIMER_StartVirtualTimerSysTime(VTIMER_HandleType *timerHandle, uint64_t time)
{
1004f1b0:	b590      	push	{r4, r7, lr}
1004f1b2:	b087      	sub	sp, #28
1004f1b4:	af00      	add	r7, sp, #0
1004f1b6:	60f8      	str	r0, [r7, #12]
1004f1b8:	603a      	str	r2, [r7, #0]
1004f1ba:	607b      	str	r3, [r7, #4]
  uint8_t retVal;
  retVal = _start_timer(timerHandle, time);
1004f1bc:	683a      	ldr	r2, [r7, #0]
1004f1be:	687b      	ldr	r3, [r7, #4]
1004f1c0:	68f9      	ldr	r1, [r7, #12]
1004f1c2:	0008      	movs	r0, r1
1004f1c4:	f000 fa4e 	bl	1004f664 <_start_timer>
1004f1c8:	0002      	movs	r2, r0
1004f1ca:	2417      	movs	r4, #23
1004f1cc:	193b      	adds	r3, r7, r4
1004f1ce:	701a      	strb	r2, [r3, #0]
  _virtualTimeBaseEnable(ENABLE);
1004f1d0:	2001      	movs	r0, #1
1004f1d2:	f000 fbc5 	bl	1004f960 <_virtualTimeBaseEnable>

  return retVal;
1004f1d6:	193b      	adds	r3, r7, r4
1004f1d8:	781b      	ldrb	r3, [r3, #0]
}
1004f1da:	0018      	movs	r0, r3
1004f1dc:	46bd      	mov	sp, r7
1004f1de:	b007      	add	sp, #28
1004f1e0:	bd90      	pop	{r4, r7, pc}
	...

1004f1e4 <HAL_RADIO_TIMER_StopVirtualTimer>:
  * @brief  Stops the one-shot virtual timer specified if found
  * @param  timerHandle: The virtual timer
  * @retval None
  */
void HAL_RADIO_TIMER_StopVirtualTimer(VTIMER_HandleType *timerHandle)
{
1004f1e4:	b590      	push	{r4, r7, lr}
1004f1e6:	b089      	sub	sp, #36	@ 0x24
1004f1e8:	af00      	add	r7, sp, #0
1004f1ea:	6078      	str	r0, [r7, #4]
  VTIMER_HandleType *rootNode = _remove_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle);
1004f1ec:	4b28      	ldr	r3, [pc, #160]	@ (1004f290 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004f1ee:	228c      	movs	r2, #140	@ 0x8c
1004f1f0:	589b      	ldr	r3, [r3, r2]
1004f1f2:	687a      	ldr	r2, [r7, #4]
1004f1f4:	0011      	movs	r1, r2
1004f1f6:	0018      	movs	r0, r3
1004f1f8:	f000 fbde 	bl	1004f9b8 <_remove_timer_in_queue>
1004f1fc:	0003      	movs	r3, r0
1004f1fe:	61fb      	str	r3, [r7, #28]
  uint8_t expired = 0;
1004f200:	210f      	movs	r1, #15
1004f202:	187b      	adds	r3, r7, r1
1004f204:	2200      	movs	r2, #0
1004f206:	701a      	strb	r2, [r3, #0]
  timerHandle->active = FALSE;
1004f208:	687b      	ldr	r3, [r7, #4]
1004f20a:	2200      	movs	r2, #0
1004f20c:	731a      	strb	r2, [r3, #12]
  if (RADIO_TIMER_Context.rootNode != rootNode)
1004f20e:	4b20      	ldr	r3, [pc, #128]	@ (1004f290 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004f210:	228c      	movs	r2, #140	@ 0x8c
1004f212:	589b      	ldr	r3, [r3, r2]
1004f214:	69fa      	ldr	r2, [r7, #28]
1004f216:	429a      	cmp	r2, r3
1004f218:	d031      	beq.n	1004f27e <HAL_RADIO_TIMER_StopVirtualTimer+0x9a>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(rootNode, &expired);
1004f21a:	000c      	movs	r4, r1
1004f21c:	187a      	adds	r2, r7, r1
1004f21e:	69fb      	ldr	r3, [r7, #28]
1004f220:	0011      	movs	r1, r2
1004f222:	0018      	movs	r0, r3
1004f224:	f000 fae4 	bl	1004f7f0 <_update_user_timeout>
1004f228:	0002      	movs	r2, r0
1004f22a:	4b19      	ldr	r3, [pc, #100]	@ (1004f290 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004f22c:	218c      	movs	r1, #140	@ 0x8c
1004f22e:	505a      	str	r2, [r3, r1]
    if (expired)
1004f230:	193b      	adds	r3, r7, r4
1004f232:	781b      	ldrb	r3, [r3, #0]
1004f234:	2b00      	cmp	r3, #0
1004f236:	d026      	beq.n	1004f286 <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004f238:	f3ef 8310 	mrs	r3, PRIMASK
1004f23c:	617b      	str	r3, [r7, #20]
  return(result);
1004f23e:	697b      	ldr	r3, [r7, #20]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
1004f240:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
1004f242:	b672      	cpsid	i
}
1004f244:	46c0      	nop			@ (mov r8, r8)
1004f246:	4b12      	ldr	r3, [pc, #72]	@ (1004f290 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004f248:	2291      	movs	r2, #145	@ 0x91
1004f24a:	5c9b      	ldrb	r3, [r3, r2]
1004f24c:	3301      	adds	r3, #1
1004f24e:	4a10      	ldr	r2, [pc, #64]	@ (1004f290 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004f250:	2192      	movs	r1, #146	@ 0x92
1004f252:	5c52      	ldrb	r2, [r2, r1]
1004f254:	4293      	cmp	r3, r2
1004f256:	d103      	bne.n	1004f260 <HAL_RADIO_TIMER_StopVirtualTimer+0x7c>
1004f258:	4b0d      	ldr	r3, [pc, #52]	@ (1004f290 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004f25a:	2291      	movs	r2, #145	@ 0x91
1004f25c:	5c9b      	ldrb	r3, [r3, r2]
1004f25e:	e004      	b.n	1004f26a <HAL_RADIO_TIMER_StopVirtualTimer+0x86>
1004f260:	4b0b      	ldr	r3, [pc, #44]	@ (1004f290 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004f262:	2291      	movs	r2, #145	@ 0x91
1004f264:	5c9b      	ldrb	r3, [r3, r2]
1004f266:	3301      	adds	r3, #1
1004f268:	b2db      	uxtb	r3, r3
1004f26a:	4a09      	ldr	r2, [pc, #36]	@ (1004f290 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004f26c:	2191      	movs	r1, #145	@ 0x91
1004f26e:	5453      	strb	r3, [r2, r1]
1004f270:	69bb      	ldr	r3, [r7, #24]
1004f272:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004f274:	693b      	ldr	r3, [r7, #16]
1004f276:	f383 8810 	msr	PRIMASK, r3
}
1004f27a:	46c0      	nop			@ (mov r8, r8)
  }
  else
  {
    RADIO_TIMER_Context.rootNode = rootNode;
  }
}
1004f27c:	e003      	b.n	1004f286 <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
    RADIO_TIMER_Context.rootNode = rootNode;
1004f27e:	4b04      	ldr	r3, [pc, #16]	@ (1004f290 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004f280:	218c      	movs	r1, #140	@ 0x8c
1004f282:	69fa      	ldr	r2, [r7, #28]
1004f284:	505a      	str	r2, [r3, r1]
}
1004f286:	46c0      	nop			@ (mov r8, r8)
1004f288:	46bd      	mov	sp, r7
1004f28a:	b009      	add	sp, #36	@ 0x24
1004f28c:	bd90      	pop	{r4, r7, pc}
1004f28e:	46c0      	nop			@ (mov r8, r8)
1004f290:	20000f50 	.word	0x20000f50

1004f294 <HAL_RADIO_TIMER_TimeoutCallback>:
/**
  * @brief  Virtual timer Timeout Callback. It signals that a host timeout occurred.
  * @retval None
  */
void HAL_RADIO_TIMER_TimeoutCallback(void)
{
1004f294:	b580      	push	{r7, lr}
1004f296:	b082      	sub	sp, #8
1004f298:	af00      	add	r7, sp, #0
  volatile uint32_t status = 0;
1004f29a:	2300      	movs	r3, #0
1004f29c:	607b      	str	r3, [r7, #4]
  UNUSED(status);
1004f29e:	687b      	ldr	r3, [r7, #4]
#if defined (STM32WB06) || defined (STM32WB07)
  RADIO_TIMER_Context.hostIsRadioPending = 0;
#endif

  /* Disable host timer */
  LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP);
1004f2a0:	4b13      	ldr	r3, [pc, #76]	@ (1004f2f0 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
1004f2a2:	0018      	movs	r0, r3
1004f2a4:	f7ff fa24 	bl	1004e6f0 <LL_RADIO_TIMER_DisableCPUWakeupTimer>
  INCREMENT_EXPIRE_COUNT_ISR;
1004f2a8:	4b12      	ldr	r3, [pc, #72]	@ (1004f2f4 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004f2aa:	2291      	movs	r2, #145	@ 0x91
1004f2ac:	5c9b      	ldrb	r3, [r3, r2]
1004f2ae:	3301      	adds	r3, #1
1004f2b0:	4a10      	ldr	r2, [pc, #64]	@ (1004f2f4 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004f2b2:	2192      	movs	r1, #146	@ 0x92
1004f2b4:	5c52      	ldrb	r2, [r2, r1]
1004f2b6:	4293      	cmp	r3, r2
1004f2b8:	d103      	bne.n	1004f2c2 <HAL_RADIO_TIMER_TimeoutCallback+0x2e>
1004f2ba:	4b0e      	ldr	r3, [pc, #56]	@ (1004f2f4 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004f2bc:	2291      	movs	r2, #145	@ 0x91
1004f2be:	5c9b      	ldrb	r3, [r3, r2]
1004f2c0:	e004      	b.n	1004f2cc <HAL_RADIO_TIMER_TimeoutCallback+0x38>
1004f2c2:	4b0c      	ldr	r3, [pc, #48]	@ (1004f2f4 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004f2c4:	2291      	movs	r2, #145	@ 0x91
1004f2c6:	5c9b      	ldrb	r3, [r3, r2]
1004f2c8:	3301      	adds	r3, #1
1004f2ca:	b2db      	uxtb	r3, r3
1004f2cc:	4a09      	ldr	r2, [pc, #36]	@ (1004f2f4 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004f2ce:	2191      	movs	r1, #145	@ 0x91
1004f2d0:	5453      	strb	r3, [r2, r1]
  /* Clear the interrupt */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
1004f2d2:	4b07      	ldr	r3, [pc, #28]	@ (1004f2f0 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
1004f2d4:	0018      	movs	r0, r3
1004f2d6:	f7ff fa7e 	bl	1004e7d6 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  status = LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP);
1004f2da:	4b05      	ldr	r3, [pc, #20]	@ (1004f2f0 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
1004f2dc:	0018      	movs	r0, r3
1004f2de:	f7ff fa88 	bl	1004e7f2 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>
1004f2e2:	0003      	movs	r3, r0
1004f2e4:	607b      	str	r3, [r7, #4]
}
1004f2e6:	46c0      	nop			@ (mov r8, r8)
1004f2e8:	46bd      	mov	sp, r7
1004f2ea:	b002      	add	sp, #8
1004f2ec:	bd80      	pop	{r7, pc}
1004f2ee:	46c0      	nop			@ (mov r8, r8)
1004f2f0:	60001800 	.word	0x60001800
1004f2f4:	20000f50 	.word	0x20000f50

1004f2f8 <_calibrationProcedure>:
/** @defgroup RADIO_TIMER_Private_Functions  RADIO TIMER Private Functions
  * @{
  */

static void _calibrationProcedure(void)
{
1004f2f8:	b580      	push	{r7, lr}
1004f2fa:	af00      	add	r7, sp, #0
  /* Make sure any pending calibration is over */
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
1004f2fc:	46c0      	nop			@ (mov r8, r8)
1004f2fe:	4b0b      	ldr	r3, [pc, #44]	@ (1004f32c <_calibrationProcedure+0x34>)
1004f300:	0018      	movs	r0, r3
1004f302:	f7ff fac0 	bl	1004e886 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004f306:	1e03      	subs	r3, r0, #0
1004f308:	d0f9      	beq.n	1004f2fe <_calibrationProcedure+0x6>

  /* Set SLOW_COUNT to 23, that is calibrate over 24 clock periods, this number
  cannot be changed without changing all the integer maths function in the
  file  */
  LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL, 23);
1004f30a:	4b08      	ldr	r3, [pc, #32]	@ (1004f32c <_calibrationProcedure+0x34>)
1004f30c:	2117      	movs	r1, #23
1004f30e:	0018      	movs	r0, r3
1004f310:	f7ff fa80 	bl	1004e814 <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>

  /* Start a calibration and take the correct freq */
  _timer_calibrate(&RADIO_TIMER_Context.calibrationData);
1004f314:	4b06      	ldr	r3, [pc, #24]	@ (1004f330 <_calibrationProcedure+0x38>)
1004f316:	0018      	movs	r0, r3
1004f318:	f000 f81e 	bl	1004f358 <_timer_calibrate>
  /* For first time set last to current */
  RADIO_TIMER_Context.calibrationData.last_period1 = RADIO_TIMER_Context.calibrationData.period1;
1004f31c:	4b05      	ldr	r3, [pc, #20]	@ (1004f334 <_calibrationProcedure+0x3c>)
1004f31e:	69da      	ldr	r2, [r3, #28]
1004f320:	4b04      	ldr	r3, [pc, #16]	@ (1004f334 <_calibrationProcedure+0x3c>)
1004f322:	621a      	str	r2, [r3, #32]

}
1004f324:	46c0      	nop			@ (mov r8, r8)
1004f326:	46bd      	mov	sp, r7
1004f328:	bd80      	pop	{r7, pc}
1004f32a:	46c0      	nop			@ (mov r8, r8)
1004f32c:	60001000 	.word	0x60001000
1004f330:	20000f60 	.word	0x20000f60
1004f334:	20000f50 	.word	0x20000f50

1004f338 <_timer_start_calibration>:

static void _timer_start_calibration(void)
{
1004f338:	b580      	push	{r7, lr}
1004f33a:	af00      	add	r7, sp, #0
  /* Clear any pending interrupt */
  LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL);
1004f33c:	4b05      	ldr	r3, [pc, #20]	@ (1004f354 <_timer_start_calibration+0x1c>)
1004f33e:	0018      	movs	r0, r3
1004f340:	f7ff fa93 	bl	1004e86a <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>
  /* Start calibration */
  LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL);
1004f344:	4b03      	ldr	r3, [pc, #12]	@ (1004f354 <_timer_start_calibration+0x1c>)
1004f346:	0018      	movs	r0, r3
1004f348:	f7ff fa70 	bl	1004e82c <LL_RADIO_TIMER_StartLSICalibration>
}
1004f34c:	46c0      	nop			@ (mov r8, r8)
1004f34e:	46bd      	mov	sp, r7
1004f350:	bd80      	pop	{r7, pc}
1004f352:	46c0      	nop			@ (mov r8, r8)
1004f354:	60001000 	.word	0x60001000

1004f358 <_timer_calibrate>:

static void _timer_calibrate(CalibrationDataTypeDef *calibrationData)
{
1004f358:	b580      	push	{r7, lr}
1004f35a:	b082      	sub	sp, #8
1004f35c:	af00      	add	r7, sp, #0
1004f35e:	6078      	str	r0, [r7, #4]
  _timer_start_calibration();
1004f360:	f7ff ffea 	bl	1004f338 <_timer_start_calibration>
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
1004f364:	46c0      	nop			@ (mov r8, r8)
1004f366:	4b07      	ldr	r3, [pc, #28]	@ (1004f384 <_timer_calibrate+0x2c>)
1004f368:	0018      	movs	r0, r3
1004f36a:	f7ff fa8c 	bl	1004e886 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004f36e:	1e03      	subs	r3, r0, #0
1004f370:	d0f9      	beq.n	1004f366 <_timer_calibrate+0xe>
  _get_calibration_data(calibrationData);
1004f372:	687b      	ldr	r3, [r7, #4]
1004f374:	0018      	movs	r0, r3
1004f376:	f000 f807 	bl	1004f388 <_get_calibration_data>
}
1004f37a:	46c0      	nop			@ (mov r8, r8)
1004f37c:	46bd      	mov	sp, r7
1004f37e:	b002      	add	sp, #8
1004f380:	bd80      	pop	{r7, pc}
1004f382:	46c0      	nop			@ (mov r8, r8)
1004f384:	60001000 	.word	0x60001000

1004f388 <_get_calibration_data>:

static void _get_calibration_data(CalibrationDataTypeDef *calibrationData)
{
1004f388:	b580      	push	{r7, lr}
1004f38a:	b08a      	sub	sp, #40	@ 0x28
1004f38c:	af00      	add	r7, sp, #0
1004f38e:	6078      	str	r0, [r7, #4]
  int32_t b2;
  int32_t mult;
  int32_t a1;
  int32_t a2;

  period =  LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
1004f390:	4b2e      	ldr	r3, [pc, #184]	@ (1004f44c <_get_calibration_data+0xc4>)
1004f392:	0018      	movs	r0, r3
1004f394:	f7ff fa55 	bl	1004e842 <LL_RADIO_TIMER_GetLSIPeriod>
1004f398:	0003      	movs	r3, r0
1004f39a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
1004f39c:	e005      	b.n	1004f3aa <_get_calibration_data+0x22>
  {
    period = LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
1004f39e:	4b2b      	ldr	r3, [pc, #172]	@ (1004f44c <_get_calibration_data+0xc4>)
1004f3a0:	0018      	movs	r0, r3
1004f3a2:	f7ff fa4e 	bl	1004e842 <LL_RADIO_TIMER_GetLSIPeriod>
1004f3a6:	0003      	movs	r3, r0
1004f3a8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
1004f3aa:	4b28      	ldr	r3, [pc, #160]	@ (1004f44c <_get_calibration_data+0xc4>)
1004f3ac:	0018      	movs	r0, r3
1004f3ae:	f7ff fa48 	bl	1004e842 <LL_RADIO_TIMER_GetLSIPeriod>
1004f3b2:	0002      	movs	r2, r0
1004f3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004f3b6:	429a      	cmp	r2, r3
1004f3b8:	d1f1      	bne.n	1004f39e <_get_calibration_data+0x16>
1004f3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004f3bc:	2b00      	cmp	r3, #0
1004f3be:	d0ee      	beq.n	1004f39e <_get_calibration_data+0x16>
  }

  mul1 = 0x8BCF6 ;
1004f3c0:	4b23      	ldr	r3, [pc, #140]	@ (1004f450 <_get_calibration_data+0xc8>)
1004f3c2:	61fb      	str	r3, [r7, #28]
  b1 = period >> 8 ;
1004f3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004f3c6:	121b      	asrs	r3, r3, #8
1004f3c8:	61bb      	str	r3, [r7, #24]
  b2 = period & 0xff ;
1004f3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004f3cc:	22ff      	movs	r2, #255	@ 0xff
1004f3ce:	4013      	ands	r3, r2
1004f3d0:	617b      	str	r3, [r7, #20]
  calibrationData->period1 = ((mul1 * b1) + ((b2 * mul1) >> 8) + 16) >> 5;
1004f3d2:	69fb      	ldr	r3, [r7, #28]
1004f3d4:	69ba      	ldr	r2, [r7, #24]
1004f3d6:	435a      	muls	r2, r3
1004f3d8:	697b      	ldr	r3, [r7, #20]
1004f3da:	69f9      	ldr	r1, [r7, #28]
1004f3dc:	434b      	muls	r3, r1
1004f3de:	121b      	asrs	r3, r3, #8
1004f3e0:	18d3      	adds	r3, r2, r3
1004f3e2:	3310      	adds	r3, #16
1004f3e4:	115a      	asrs	r2, r3, #5
1004f3e6:	687b      	ldr	r3, [r7, #4]
1004f3e8:	60da      	str	r2, [r3, #12]
  calibrationData->period = period;
1004f3ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1004f3ec:	687b      	ldr	r3, [r7, #4]
1004f3ee:	601a      	str	r2, [r3, #0]

  mult = 0x753 ;
1004f3f0:	4b18      	ldr	r3, [pc, #96]	@ (1004f454 <_get_calibration_data+0xcc>)
1004f3f2:	613b      	str	r3, [r7, #16]
  freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
1004f3f4:	4b15      	ldr	r3, [pc, #84]	@ (1004f44c <_get_calibration_data+0xc4>)
1004f3f6:	0018      	movs	r0, r3
1004f3f8:	f7ff fa2d 	bl	1004e856 <LL_RADIO_TIMER_GetLSIFrequency>
1004f3fc:	0003      	movs	r3, r0
1004f3fe:	623b      	str	r3, [r7, #32]

  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
1004f400:	e005      	b.n	1004f40e <_get_calibration_data+0x86>
  {
    freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
1004f402:	4b12      	ldr	r3, [pc, #72]	@ (1004f44c <_get_calibration_data+0xc4>)
1004f404:	0018      	movs	r0, r3
1004f406:	f7ff fa26 	bl	1004e856 <LL_RADIO_TIMER_GetLSIFrequency>
1004f40a:	0003      	movs	r3, r0
1004f40c:	623b      	str	r3, [r7, #32]
  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
1004f40e:	4b0f      	ldr	r3, [pc, #60]	@ (1004f44c <_get_calibration_data+0xc4>)
1004f410:	0018      	movs	r0, r3
1004f412:	f7ff fa20 	bl	1004e856 <LL_RADIO_TIMER_GetLSIFrequency>
1004f416:	0002      	movs	r2, r0
1004f418:	6a3b      	ldr	r3, [r7, #32]
1004f41a:	429a      	cmp	r2, r3
1004f41c:	d1f1      	bne.n	1004f402 <_get_calibration_data+0x7a>
1004f41e:	6a3b      	ldr	r3, [r7, #32]
1004f420:	2b00      	cmp	r3, #0
1004f422:	d0ee      	beq.n	1004f402 <_get_calibration_data+0x7a>
  }
  a1 = freq >> 6 ;
1004f424:	6a3b      	ldr	r3, [r7, #32]
1004f426:	119b      	asrs	r3, r3, #6
1004f428:	60fb      	str	r3, [r7, #12]
  a2 = a1 * mult ;
1004f42a:	68fb      	ldr	r3, [r7, #12]
1004f42c:	693a      	ldr	r2, [r7, #16]
1004f42e:	4353      	muls	r3, r2
1004f430:	60bb      	str	r3, [r7, #8]
  calibrationData->freq1 = (a2 + 128) >> 8 ;
1004f432:	68bb      	ldr	r3, [r7, #8]
1004f434:	3380      	adds	r3, #128	@ 0x80
1004f436:	121a      	asrs	r2, r3, #8
1004f438:	687b      	ldr	r3, [r7, #4]
1004f43a:	609a      	str	r2, [r3, #8]
  calibrationData->freq = freq;
1004f43c:	6a3a      	ldr	r2, [r7, #32]
1004f43e:	687b      	ldr	r3, [r7, #4]
1004f440:	605a      	str	r2, [r3, #4]
}
1004f442:	46c0      	nop			@ (mov r8, r8)
1004f444:	46bd      	mov	sp, r7
1004f446:	b00a      	add	sp, #40	@ 0x28
1004f448:	bd80      	pop	{r7, pc}
1004f44a:	46c0      	nop			@ (mov r8, r8)
1004f44c:	60001000 	.word	0x60001000
1004f450:	0008bcf6 	.word	0x0008bcf6
1004f454:	00000753 	.word	0x00000753

1004f458 <_configureTxRxDelay>:

static void _configureTxRxDelay(RADIO_TIMER_ContextTypeDef *context, uint8_t calculate_st)
{
1004f458:	b590      	push	{r4, r7, lr}
1004f45a:	b085      	sub	sp, #20
1004f45c:	af00      	add	r7, sp, #0
1004f45e:	6078      	str	r0, [r7, #4]
1004f460:	000a      	movs	r2, r1
1004f462:	1cfb      	adds	r3, r7, #3
1004f464:	701a      	strb	r2, [r3, #0]
  uint8_t tx_delay_start;

  tx_delay_start = (BLUEGLOB->TXDELAYSTART * 125 / 1000) + 1;
1004f466:	4b38      	ldr	r3, [pc, #224]	@ (1004f548 <_configureTxRxDelay+0xf0>)
1004f468:	7b9b      	ldrb	r3, [r3, #14]
1004f46a:	b2db      	uxtb	r3, r3
1004f46c:	2b00      	cmp	r3, #0
1004f46e:	da00      	bge.n	1004f472 <_configureTxRxDelay+0x1a>
1004f470:	3307      	adds	r3, #7
1004f472:	10db      	asrs	r3, r3, #3
1004f474:	b2da      	uxtb	r2, r3
1004f476:	240f      	movs	r4, #15
1004f478:	193b      	adds	r3, r7, r4
1004f47a:	3201      	adds	r2, #1
1004f47c:	701a      	strb	r2, [r3, #0]

  BLUEGLOB->WAKEUPINITDELAY =  blue_unit_conversion(WAKEUP_INIT_DELAY, context->calibrationData.freq1, MULT64_THR_FREQ);
1004f47e:	687b      	ldr	r3, [r7, #4]
1004f480:	699b      	ldr	r3, [r3, #24]
1004f482:	0019      	movs	r1, r3
1004f484:	4b31      	ldr	r3, [pc, #196]	@ (1004f54c <_configureTxRxDelay+0xf4>)
1004f486:	001a      	movs	r2, r3
1004f488:	201b      	movs	r0, #27
1004f48a:	f7f1 fe1b 	bl	100410c4 <blue_unit_conversion>
1004f48e:	0002      	movs	r2, r0
1004f490:	4b2d      	ldr	r3, [pc, #180]	@ (1004f548 <_configureTxRxDelay+0xf0>)
1004f492:	b2d2      	uxtb	r2, r2
1004f494:	715a      	strb	r2, [r3, #5]
  context->TxRxDelay.tim12_delay_mt = _us_to_machinetime(BLUEGLOB->TIMER12INITDELAYCAL);
1004f496:	4b2c      	ldr	r3, [pc, #176]	@ (1004f548 <_configureTxRxDelay+0xf0>)
1004f498:	799b      	ldrb	r3, [r3, #6]
1004f49a:	b2db      	uxtb	r3, r3
1004f49c:	0018      	movs	r0, r3
1004f49e:	f000 f86d 	bl	1004f57c <_us_to_machinetime>
1004f4a2:	0003      	movs	r3, r0
1004f4a4:	b2d9      	uxtb	r1, r3
1004f4a6:	687b      	ldr	r3, [r7, #4]
1004f4a8:	223d      	movs	r2, #61	@ 0x3d
1004f4aa:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start);
1004f4ac:	4b26      	ldr	r3, [pc, #152]	@ (1004f548 <_configureTxRxDelay+0xf0>)
1004f4ae:	7a1b      	ldrb	r3, [r3, #8]
1004f4b0:	b2db      	uxtb	r3, r3
1004f4b2:	001a      	movs	r2, r3
1004f4b4:	193b      	adds	r3, r7, r4
1004f4b6:	781b      	ldrb	r3, [r3, #0]
1004f4b8:	18d3      	adds	r3, r2, r3
1004f4ba:	0018      	movs	r0, r3
1004f4bc:	f000 f85e 	bl	1004f57c <_us_to_machinetime>
1004f4c0:	0003      	movs	r3, r0
1004f4c2:	b2d9      	uxtb	r1, r3
1004f4c4:	687b      	ldr	r3, [r7, #4]
1004f4c6:	2238      	movs	r2, #56	@ 0x38
1004f4c8:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_no_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITNOCALDELAYCHK + tx_delay_start);
1004f4ca:	4b1f      	ldr	r3, [pc, #124]	@ (1004f548 <_configureTxRxDelay+0xf0>)
1004f4cc:	7a5b      	ldrb	r3, [r3, #9]
1004f4ce:	b2db      	uxtb	r3, r3
1004f4d0:	001a      	movs	r2, r3
1004f4d2:	193b      	adds	r3, r7, r4
1004f4d4:	781b      	ldrb	r3, [r3, #0]
1004f4d6:	18d3      	adds	r3, r2, r3
1004f4d8:	0018      	movs	r0, r3
1004f4da:	f000 f84f 	bl	1004f57c <_us_to_machinetime>
1004f4de:	0003      	movs	r3, r0
1004f4e0:	b2d9      	uxtb	r1, r3
1004f4e2:	687b      	ldr	r3, [r7, #4]
1004f4e4:	2239      	movs	r2, #57	@ 0x39
1004f4e6:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVECALDELAYCHK);
1004f4e8:	4b17      	ldr	r3, [pc, #92]	@ (1004f548 <_configureTxRxDelay+0xf0>)
1004f4ea:	7a9b      	ldrb	r3, [r3, #10]
1004f4ec:	b2db      	uxtb	r3, r3
1004f4ee:	0018      	movs	r0, r3
1004f4f0:	f000 f844 	bl	1004f57c <_us_to_machinetime>
1004f4f4:	0003      	movs	r3, r0
1004f4f6:	b2d9      	uxtb	r1, r3
1004f4f8:	687b      	ldr	r3, [r7, #4]
1004f4fa:	223a      	movs	r2, #58	@ 0x3a
1004f4fc:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_no_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVENOCALDELAYCHK);
1004f4fe:	4b12      	ldr	r3, [pc, #72]	@ (1004f548 <_configureTxRxDelay+0xf0>)
1004f500:	7adb      	ldrb	r3, [r3, #11]
1004f502:	b2db      	uxtb	r3, r3
1004f504:	0018      	movs	r0, r3
1004f506:	f000 f839 	bl	1004f57c <_us_to_machinetime>
1004f50a:	0003      	movs	r3, r0
1004f50c:	b2d9      	uxtb	r1, r3
1004f50e:	687b      	ldr	r3, [r7, #4]
1004f510:	223b      	movs	r2, #59	@ 0x3b
1004f512:	5499      	strb	r1, [r3, r2]

  if (calculate_st)
1004f514:	1cfb      	adds	r3, r7, #3
1004f516:	781b      	ldrb	r3, [r3, #0]
1004f518:	2b00      	cmp	r3, #0
1004f51a:	d010      	beq.n	1004f53e <_configureTxRxDelay+0xe6>
  {
    context->TxRxDelay.tx_cal_delay_st    = _us_to_systime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start) + WAKEUP_INIT_DELAY;
1004f51c:	4b0a      	ldr	r3, [pc, #40]	@ (1004f548 <_configureTxRxDelay+0xf0>)
1004f51e:	7a1b      	ldrb	r3, [r3, #8]
1004f520:	b2db      	uxtb	r3, r3
1004f522:	001a      	movs	r2, r3
1004f524:	193b      	adds	r3, r7, r4
1004f526:	781b      	ldrb	r3, [r3, #0]
1004f528:	18d3      	adds	r3, r2, r3
1004f52a:	0018      	movs	r0, r3
1004f52c:	f000 f810 	bl	1004f550 <_us_to_systime>
1004f530:	0003      	movs	r3, r0
1004f532:	b2db      	uxtb	r3, r3
1004f534:	331b      	adds	r3, #27
1004f536:	b2d9      	uxtb	r1, r3
1004f538:	687b      	ldr	r3, [r7, #4]
1004f53a:	223c      	movs	r2, #60	@ 0x3c
1004f53c:	5499      	strb	r1, [r3, r2]
  }

}
1004f53e:	46c0      	nop			@ (mov r8, r8)
1004f540:	46bd      	mov	sp, r7
1004f542:	b005      	add	sp, #20
1004f544:	bd90      	pop	{r4, r7, pc}
1004f546:	46c0      	nop			@ (mov r8, r8)
1004f548:	200000c0 	.word	0x200000c0
1004f54c:	00000326 	.word	0x00000326

1004f550 <_us_to_systime>:

static uint32_t _us_to_systime(uint32_t time)
{
1004f550:	b580      	push	{r7, lr}
1004f552:	b084      	sub	sp, #16
1004f554:	af00      	add	r7, sp, #0
1004f556:	6078      	str	r0, [r7, #4]
  uint32_t t1, t2;
  t1 = time * 0x68;
1004f558:	687b      	ldr	r3, [r7, #4]
1004f55a:	2268      	movs	r2, #104	@ 0x68
1004f55c:	4353      	muls	r3, r2
1004f55e:	60fb      	str	r3, [r7, #12]
  t2 = time * 0xDB;
1004f560:	687b      	ldr	r3, [r7, #4]
1004f562:	22db      	movs	r2, #219	@ 0xdb
1004f564:	4353      	muls	r3, r2
1004f566:	60bb      	str	r3, [r7, #8]
  return (t1 >> 8) + (t2 >> 16);
1004f568:	68fb      	ldr	r3, [r7, #12]
1004f56a:	0a1a      	lsrs	r2, r3, #8
1004f56c:	68bb      	ldr	r3, [r7, #8]
1004f56e:	0c1b      	lsrs	r3, r3, #16
1004f570:	18d3      	adds	r3, r2, r3
}
1004f572:	0018      	movs	r0, r3
1004f574:	46bd      	mov	sp, r7
1004f576:	b004      	add	sp, #16
1004f578:	bd80      	pop	{r7, pc}
	...

1004f57c <_us_to_machinetime>:

static uint32_t _us_to_machinetime(uint32_t time)
{
1004f57c:	b5b0      	push	{r4, r5, r7, lr}
1004f57e:	b088      	sub	sp, #32
1004f580:	af00      	add	r7, sp, #0
1004f582:	60f8      	str	r0, [r7, #12]
  uint64_t tmp = (uint64_t)RADIO_TIMER_Context.calibrationData.freq * (uint64_t)time * (uint64_t)3U;
1004f584:	4915      	ldr	r1, [pc, #84]	@ (1004f5dc <_us_to_machinetime+0x60>)
1004f586:	6949      	ldr	r1, [r1, #20]
1004f588:	6039      	str	r1, [r7, #0]
1004f58a:	2100      	movs	r1, #0
1004f58c:	6079      	str	r1, [r7, #4]
1004f58e:	68f9      	ldr	r1, [r7, #12]
1004f590:	000a      	movs	r2, r1
1004f592:	2100      	movs	r1, #0
1004f594:	000b      	movs	r3, r1
1004f596:	6838      	ldr	r0, [r7, #0]
1004f598:	6879      	ldr	r1, [r7, #4]
1004f59a:	f7f1 ff69 	bl	10041470 <__aeabi_lmul>
1004f59e:	0002      	movs	r2, r0
1004f5a0:	000b      	movs	r3, r1
1004f5a2:	0010      	movs	r0, r2
1004f5a4:	0019      	movs	r1, r3
1004f5a6:	0002      	movs	r2, r0
1004f5a8:	000b      	movs	r3, r1
1004f5aa:	1892      	adds	r2, r2, r2
1004f5ac:	415b      	adcs	r3, r3
1004f5ae:	1812      	adds	r2, r2, r0
1004f5b0:	414b      	adcs	r3, r1
1004f5b2:	61ba      	str	r2, [r7, #24]
1004f5b4:	61fb      	str	r3, [r7, #28]
  uint32_t time_mt = ((tmp + (1 << 26)) >> 27) & TIMER_MAX_VALUE;
1004f5b6:	69ba      	ldr	r2, [r7, #24]
1004f5b8:	69fb      	ldr	r3, [r7, #28]
1004f5ba:	2080      	movs	r0, #128	@ 0x80
1004f5bc:	04c0      	lsls	r0, r0, #19
1004f5be:	2100      	movs	r1, #0
1004f5c0:	1812      	adds	r2, r2, r0
1004f5c2:	414b      	adcs	r3, r1
1004f5c4:	0159      	lsls	r1, r3, #5
1004f5c6:	0ed4      	lsrs	r4, r2, #27
1004f5c8:	430c      	orrs	r4, r1
1004f5ca:	0edd      	lsrs	r5, r3, #27
1004f5cc:	0023      	movs	r3, r4
1004f5ce:	617b      	str	r3, [r7, #20]

  return time_mt;
1004f5d0:	697b      	ldr	r3, [r7, #20]
}
1004f5d2:	0018      	movs	r0, r3
1004f5d4:	46bd      	mov	sp, r7
1004f5d6:	b008      	add	sp, #32
1004f5d8:	bdb0      	pop	{r4, r5, r7, pc}
1004f5da:	46c0      	nop			@ (mov r8, r8)
1004f5dc:	20000f50 	.word	0x20000f50

1004f5e0 <_update_xtal_startup_time>:

static void _update_xtal_startup_time(uint16_t hs_startup_time, int32_t freq1)
{
1004f5e0:	b580      	push	{r7, lr}
1004f5e2:	b084      	sub	sp, #16
1004f5e4:	af00      	add	r7, sp, #0
1004f5e6:	0002      	movs	r2, r0
1004f5e8:	6039      	str	r1, [r7, #0]
1004f5ea:	1dbb      	adds	r3, r7, #6
1004f5ec:	801a      	strh	r2, [r3, #0]
  int32_t time1;

  time1 = blue_unit_conversion(hs_startup_time, freq1, MULT64_THR_FREQ);
1004f5ee:	1dbb      	adds	r3, r7, #6
1004f5f0:	881b      	ldrh	r3, [r3, #0]
1004f5f2:	6839      	ldr	r1, [r7, #0]
1004f5f4:	4a0e      	ldr	r2, [pc, #56]	@ (1004f630 <_update_xtal_startup_time+0x50>)
1004f5f6:	0018      	movs	r0, r3
1004f5f8:	f7f1 fd64 	bl	100410c4 <blue_unit_conversion>
1004f5fc:	0003      	movs	r3, r0
1004f5fe:	60fb      	str	r3, [r7, #12]
  if (time1 >= 4096)
1004f600:	68fa      	ldr	r2, [r7, #12]
1004f602:	2380      	movs	r3, #128	@ 0x80
1004f604:	015b      	lsls	r3, r3, #5
1004f606:	429a      	cmp	r2, r3
1004f608:	db01      	blt.n	1004f60e <_update_xtal_startup_time+0x2e>
  {
    time1 = 4095;
1004f60a:	4b0a      	ldr	r3, [pc, #40]	@ (1004f634 <_update_xtal_startup_time+0x54>)
1004f60c:	60fb      	str	r3, [r7, #12]
  }
  if (time1 < 16)
1004f60e:	68fb      	ldr	r3, [r7, #12]
1004f610:	2b0f      	cmp	r3, #15
1004f612:	dc01      	bgt.n	1004f618 <_update_xtal_startup_time+0x38>
  {
    time1 = 16;
1004f614:	2310      	movs	r3, #16
1004f616:	60fb      	str	r3, [r7, #12]
  }
  LL_RADIO_TIMER_SetWakeupOffset(WAKEUP, (time1 >> 4));
1004f618:	68fb      	ldr	r3, [r7, #12]
1004f61a:	111b      	asrs	r3, r3, #4
1004f61c:	b2db      	uxtb	r3, r3
1004f61e:	4a06      	ldr	r2, [pc, #24]	@ (1004f638 <_update_xtal_startup_time+0x58>)
1004f620:	0019      	movs	r1, r3
1004f622:	0010      	movs	r0, r2
1004f624:	f7ff f874 	bl	1004e710 <LL_RADIO_TIMER_SetWakeupOffset>
}
1004f628:	46c0      	nop			@ (mov r8, r8)
1004f62a:	46bd      	mov	sp, r7
1004f62c:	b004      	add	sp, #16
1004f62e:	bd80      	pop	{r7, pc}
1004f630:	00000326 	.word	0x00000326
1004f634:	00000fff 	.word	0x00000fff
1004f638:	60001800 	.word	0x60001800

1004f63c <_calibration_callback>:

static void _calibration_callback(void *handle)
{
1004f63c:	b580      	push	{r7, lr}
1004f63e:	b082      	sub	sp, #8
1004f640:	af00      	add	r7, sp, #0
1004f642:	6078      	str	r0, [r7, #4]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004f644:	4b06      	ldr	r3, [pc, #24]	@ (1004f660 <_calibration_callback+0x24>)
1004f646:	781b      	ldrb	r3, [r3, #0]
1004f648:	2b00      	cmp	r3, #0
1004f64a:	d001      	beq.n	1004f650 <_calibration_callback+0x14>
  {
    _timer_start_calibration();
1004f64c:	f7ff fe74 	bl	1004f338 <_timer_start_calibration>
  }
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = TRUE;
1004f650:	4b03      	ldr	r3, [pc, #12]	@ (1004f660 <_calibration_callback+0x24>)
1004f652:	2201      	movs	r2, #1
1004f654:	721a      	strb	r2, [r3, #8]
}
1004f656:	46c0      	nop			@ (mov r8, r8)
1004f658:	46bd      	mov	sp, r7
1004f65a:	b002      	add	sp, #8
1004f65c:	bd80      	pop	{r7, pc}
1004f65e:	46c0      	nop			@ (mov r8, r8)
1004f660:	20000f50 	.word	0x20000f50

1004f664 <_start_timer>:

static int32_t _start_timer(VTIMER_HandleType *timerHandle, uint64_t time)
{
1004f664:	b590      	push	{r4, r7, lr}
1004f666:	b089      	sub	sp, #36	@ 0x24
1004f668:	af00      	add	r7, sp, #0
1004f66a:	60f8      	str	r0, [r7, #12]
1004f66c:	603a      	str	r2, [r7, #0]
1004f66e:	607b      	str	r3, [r7, #4]
  uint8_t expired = 0;
1004f670:	2313      	movs	r3, #19
1004f672:	18fb      	adds	r3, r7, r3
1004f674:	2200      	movs	r2, #0
1004f676:	701a      	strb	r2, [r3, #0]

  /* The timer is already started*/
  if (timerHandle->active)
1004f678:	68fb      	ldr	r3, [r7, #12]
1004f67a:	7b1b      	ldrb	r3, [r3, #12]
1004f67c:	2b00      	cmp	r3, #0
1004f67e:	d001      	beq.n	1004f684 <_start_timer+0x20>
  {
    return 1;
1004f680:	2301      	movs	r3, #1
1004f682:	e047      	b.n	1004f714 <_start_timer+0xb0>
  }
  timerHandle->expiryTime = time;
1004f684:	68f9      	ldr	r1, [r7, #12]
1004f686:	683a      	ldr	r2, [r7, #0]
1004f688:	687b      	ldr	r3, [r7, #4]
1004f68a:	600a      	str	r2, [r1, #0]
1004f68c:	604b      	str	r3, [r1, #4]
  timerHandle->active = TRUE;
1004f68e:	68fb      	ldr	r3, [r7, #12]
1004f690:	2201      	movs	r2, #1
1004f692:	731a      	strb	r2, [r3, #12]
  if (_insert_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle) == timerHandle)
1004f694:	4b21      	ldr	r3, [pc, #132]	@ (1004f71c <_start_timer+0xb8>)
1004f696:	228c      	movs	r2, #140	@ 0x8c
1004f698:	589b      	ldr	r3, [r3, r2]
1004f69a:	68fa      	ldr	r2, [r7, #12]
1004f69c:	0011      	movs	r1, r2
1004f69e:	0018      	movs	r0, r3
1004f6a0:	f000 f92e 	bl	1004f900 <_insert_timer_in_queue>
1004f6a4:	0002      	movs	r2, r0
1004f6a6:	68fb      	ldr	r3, [r7, #12]
1004f6a8:	4293      	cmp	r3, r2
1004f6aa:	d130      	bne.n	1004f70e <_start_timer+0xaa>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(timerHandle, &expired);
1004f6ac:	2413      	movs	r4, #19
1004f6ae:	193a      	adds	r2, r7, r4
1004f6b0:	68fb      	ldr	r3, [r7, #12]
1004f6b2:	0011      	movs	r1, r2
1004f6b4:	0018      	movs	r0, r3
1004f6b6:	f000 f89b 	bl	1004f7f0 <_update_user_timeout>
1004f6ba:	0002      	movs	r2, r0
1004f6bc:	4b17      	ldr	r3, [pc, #92]	@ (1004f71c <_start_timer+0xb8>)
1004f6be:	218c      	movs	r1, #140	@ 0x8c
1004f6c0:	505a      	str	r2, [r3, r1]
    if (expired)
1004f6c2:	193b      	adds	r3, r7, r4
1004f6c4:	781b      	ldrb	r3, [r3, #0]
1004f6c6:	2b00      	cmp	r3, #0
1004f6c8:	d021      	beq.n	1004f70e <_start_timer+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004f6ca:	f3ef 8310 	mrs	r3, PRIMASK
1004f6ce:	61bb      	str	r3, [r7, #24]
  return(result);
1004f6d0:	69bb      	ldr	r3, [r7, #24]
    {
      /* A new root timer is already expired, mimic timer expire that is normally signaled
       through the interrupt handler that increase the number of expired timers*/
      INCREMENT_EXPIRE_COUNT;
1004f6d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004f6d4:	b672      	cpsid	i
}
1004f6d6:	46c0      	nop			@ (mov r8, r8)
1004f6d8:	4b10      	ldr	r3, [pc, #64]	@ (1004f71c <_start_timer+0xb8>)
1004f6da:	2291      	movs	r2, #145	@ 0x91
1004f6dc:	5c9b      	ldrb	r3, [r3, r2]
1004f6de:	3301      	adds	r3, #1
1004f6e0:	4a0e      	ldr	r2, [pc, #56]	@ (1004f71c <_start_timer+0xb8>)
1004f6e2:	2192      	movs	r1, #146	@ 0x92
1004f6e4:	5c52      	ldrb	r2, [r2, r1]
1004f6e6:	4293      	cmp	r3, r2
1004f6e8:	d103      	bne.n	1004f6f2 <_start_timer+0x8e>
1004f6ea:	4b0c      	ldr	r3, [pc, #48]	@ (1004f71c <_start_timer+0xb8>)
1004f6ec:	2291      	movs	r2, #145	@ 0x91
1004f6ee:	5c9b      	ldrb	r3, [r3, r2]
1004f6f0:	e004      	b.n	1004f6fc <_start_timer+0x98>
1004f6f2:	4b0a      	ldr	r3, [pc, #40]	@ (1004f71c <_start_timer+0xb8>)
1004f6f4:	2291      	movs	r2, #145	@ 0x91
1004f6f6:	5c9b      	ldrb	r3, [r3, r2]
1004f6f8:	3301      	adds	r3, #1
1004f6fa:	b2db      	uxtb	r3, r3
1004f6fc:	4a07      	ldr	r2, [pc, #28]	@ (1004f71c <_start_timer+0xb8>)
1004f6fe:	2191      	movs	r1, #145	@ 0x91
1004f700:	5453      	strb	r3, [r2, r1]
1004f702:	69fb      	ldr	r3, [r7, #28]
1004f704:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004f706:	697b      	ldr	r3, [r7, #20]
1004f708:	f383 8810 	msr	PRIMASK, r3
}
1004f70c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return expired;
1004f70e:	2313      	movs	r3, #19
1004f710:	18fb      	adds	r3, r7, r3
1004f712:	781b      	ldrb	r3, [r3, #0]
}
1004f714:	0018      	movs	r0, r3
1004f716:	46bd      	mov	sp, r7
1004f718:	b009      	add	sp, #36	@ 0x24
1004f71a:	bd90      	pop	{r4, r7, pc}
1004f71c:	20000f50 	.word	0x20000f50

1004f720 <_get_system_time_and_machine>:

static uint64_t _get_system_time_and_machine(RADIO_TIMER_ContextTypeDef *context, uint32_t *current_machine_time)
{
1004f720:	b5b0      	push	{r4, r5, r7, lr}
1004f722:	b08a      	sub	sp, #40	@ 0x28
1004f724:	af00      	add	r7, sp, #0
1004f726:	60f8      	str	r0, [r7, #12]
1004f728:	60b9      	str	r1, [r7, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004f72a:	f3ef 8310 	mrs	r3, PRIMASK
1004f72e:	617b      	str	r3, [r7, #20]
  return(result);
1004f730:	697b      	ldr	r3, [r7, #20]
  uint32_t difftime;
  uint64_t new_time;

  ATOMIC_SECTION_BEGIN();
1004f732:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004f734:	b672      	cpsid	i
}
1004f736:	46c0      	nop			@ (mov r8, r8)
  new_time = context->cumulative_time;
1004f738:	68fb      	ldr	r3, [r7, #12]
1004f73a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004f73c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004f73e:	623a      	str	r2, [r7, #32]
1004f740:	627b      	str	r3, [r7, #36]	@ 0x24
  *current_machine_time =  LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004f742:	4b29      	ldr	r3, [pc, #164]	@ (1004f7e8 <_get_system_time_and_machine+0xc8>)
1004f744:	0018      	movs	r0, r3
1004f746:	f7ff f814 	bl	1004e772 <LL_RADIO_TIMER_GetAbsoluteTime>
1004f74a:	0002      	movs	r2, r0
1004f74c:	68bb      	ldr	r3, [r7, #8]
1004f74e:	601a      	str	r2, [r3, #0]
  difftime = TIME_ABSDIFF(*current_machine_time, context->last_machine_time);
1004f750:	68bb      	ldr	r3, [r7, #8]
1004f752:	681a      	ldr	r2, [r3, #0]
1004f754:	68fb      	ldr	r3, [r7, #12]
1004f756:	2180      	movs	r1, #128	@ 0x80
1004f758:	585b      	ldr	r3, [r3, r1]
1004f75a:	1ad3      	subs	r3, r2, r3
1004f75c:	61bb      	str	r3, [r7, #24]
  new_time += blue_unit_conversion(difftime, context->calibrationData.period1, MULT64_THR_PERIOD);
1004f75e:	68fb      	ldr	r3, [r7, #12]
1004f760:	69db      	ldr	r3, [r3, #28]
1004f762:	0019      	movs	r1, r3
1004f764:	4a21      	ldr	r2, [pc, #132]	@ (1004f7ec <_get_system_time_and_machine+0xcc>)
1004f766:	69bb      	ldr	r3, [r7, #24]
1004f768:	0018      	movs	r0, r3
1004f76a:	f7f1 fcab 	bl	100410c4 <blue_unit_conversion>
1004f76e:	0003      	movs	r3, r0
1004f770:	603b      	str	r3, [r7, #0]
1004f772:	2300      	movs	r3, #0
1004f774:	607b      	str	r3, [r7, #4]
1004f776:	6a3a      	ldr	r2, [r7, #32]
1004f778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004f77a:	6838      	ldr	r0, [r7, #0]
1004f77c:	6879      	ldr	r1, [r7, #4]
1004f77e:	1812      	adds	r2, r2, r0
1004f780:	414b      	adcs	r3, r1
1004f782:	623a      	str	r2, [r7, #32]
1004f784:	627b      	str	r3, [r7, #36]	@ 0x24
  if (new_time < context->last_system_time)
1004f786:	68fb      	ldr	r3, [r7, #12]
1004f788:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
1004f78a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
1004f78c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004f78e:	4299      	cmp	r1, r3
1004f790:	d305      	bcc.n	1004f79e <_get_system_time_and_machine+0x7e>
1004f792:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004f794:	4299      	cmp	r1, r3
1004f796:	d115      	bne.n	1004f7c4 <_get_system_time_and_machine+0xa4>
1004f798:	6a39      	ldr	r1, [r7, #32]
1004f79a:	4291      	cmp	r1, r2
1004f79c:	d212      	bcs.n	1004f7c4 <_get_system_time_and_machine+0xa4>
  {
    new_time += blue_unit_conversion(TIMER_MAX_VALUE, context->calibrationData.period1, MULT64_THR_PERIOD);
1004f79e:	68fb      	ldr	r3, [r7, #12]
1004f7a0:	69db      	ldr	r3, [r3, #28]
1004f7a2:	0019      	movs	r1, r3
1004f7a4:	4a11      	ldr	r2, [pc, #68]	@ (1004f7ec <_get_system_time_and_machine+0xcc>)
1004f7a6:	2301      	movs	r3, #1
1004f7a8:	425b      	negs	r3, r3
1004f7aa:	0018      	movs	r0, r3
1004f7ac:	f7f1 fc8a 	bl	100410c4 <blue_unit_conversion>
1004f7b0:	0003      	movs	r3, r0
1004f7b2:	001c      	movs	r4, r3
1004f7b4:	2300      	movs	r3, #0
1004f7b6:	001d      	movs	r5, r3
1004f7b8:	6a3a      	ldr	r2, [r7, #32]
1004f7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004f7bc:	1912      	adds	r2, r2, r4
1004f7be:	416b      	adcs	r3, r5
1004f7c0:	623a      	str	r2, [r7, #32]
1004f7c2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  context->last_system_time = new_time;
1004f7c4:	68f9      	ldr	r1, [r7, #12]
1004f7c6:	6a3a      	ldr	r2, [r7, #32]
1004f7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004f7ca:	678a      	str	r2, [r1, #120]	@ 0x78
1004f7cc:	67cb      	str	r3, [r1, #124]	@ 0x7c
1004f7ce:	69fb      	ldr	r3, [r7, #28]
1004f7d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004f7d2:	693b      	ldr	r3, [r7, #16]
1004f7d4:	f383 8810 	msr	PRIMASK, r3
}
1004f7d8:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();

  return new_time;
1004f7da:	6a3a      	ldr	r2, [r7, #32]
1004f7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
1004f7de:	0010      	movs	r0, r2
1004f7e0:	0019      	movs	r1, r3
1004f7e2:	46bd      	mov	sp, r7
1004f7e4:	b00a      	add	sp, #40	@ 0x28
1004f7e6:	bdb0      	pop	{r4, r5, r7, pc}
1004f7e8:	60001800 	.word	0x60001800
1004f7ec:	00000635 	.word	0x00000635

1004f7f0 <_update_user_timeout>:

/* Set timeout and skip non active timers */
static VTIMER_HandleType *_update_user_timeout(VTIMER_HandleType *rootNode, uint8_t *expired)
{
1004f7f0:	b5b0      	push	{r4, r5, r7, lr}
1004f7f2:	b08a      	sub	sp, #40	@ 0x28
1004f7f4:	af00      	add	r7, sp, #0
1004f7f6:	6078      	str	r0, [r7, #4]
1004f7f8:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *curr = rootNode;
1004f7fa:	687b      	ldr	r3, [r7, #4]
1004f7fc:	627b      	str	r3, [r7, #36]	@ 0x24
  VTIMER_HandleType *rootOrig = rootNode;
1004f7fe:	687b      	ldr	r3, [r7, #4]
1004f800:	623b      	str	r3, [r7, #32]
  int64_t delay;
  *expired = 0;
1004f802:	683b      	ldr	r3, [r7, #0]
1004f804:	2200      	movs	r2, #0
1004f806:	701a      	strb	r2, [r3, #0]
  while (curr != NULL)
1004f808:	e033      	b.n	1004f872 <_update_user_timeout+0x82>
  {
    if (curr->active)
1004f80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004f80c:	7b1b      	ldrb	r3, [r3, #12]
1004f80e:	2b00      	cmp	r3, #0
1004f810:	d02c      	beq.n	1004f86c <_update_user_timeout+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004f812:	f3ef 8310 	mrs	r3, PRIMASK
1004f816:	60fb      	str	r3, [r7, #12]
  return(result);
1004f818:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_SECTION_BEGIN();
1004f81a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004f81c:	b672      	cpsid	i
}
1004f81e:	46c0      	nop			@ (mov r8, r8)
#if defined (STM32WB06) || defined (STM32WB07)
      uint8_t dummy;
      bool share = FALSE;
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &dummy);
#endif
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
1004f820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004f822:	681c      	ldr	r4, [r3, #0]
1004f824:	685d      	ldr	r5, [r3, #4]
1004f826:	f7ff fc7b 	bl	1004f120 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004f82a:	0002      	movs	r2, r0
1004f82c:	000b      	movs	r3, r1
1004f82e:	1aa4      	subs	r4, r4, r2
1004f830:	419d      	sbcs	r5, r3
1004f832:	0022      	movs	r2, r4
1004f834:	002b      	movs	r3, r5
1004f836:	613a      	str	r2, [r7, #16]
1004f838:	617b      	str	r3, [r7, #20]
      if (delay > 0)
1004f83a:	697b      	ldr	r3, [r7, #20]
1004f83c:	2b00      	cmp	r3, #0
1004f83e:	dc05      	bgt.n	1004f84c <_update_user_timeout+0x5c>
1004f840:	697b      	ldr	r3, [r7, #20]
1004f842:	2b00      	cmp	r3, #0
1004f844:	d108      	bne.n	1004f858 <_update_user_timeout+0x68>
1004f846:	693b      	ldr	r3, [r7, #16]
1004f848:	2b00      	cmp	r3, #0
1004f84a:	d005      	beq.n	1004f858 <_update_user_timeout+0x68>
        {
          RADIO_TIMER_Context.radioTimer.pending |= RADIO_TIMER_Context.radioTimer.active;
          RADIO_TIMER_Context.radioTimer.active = FALSE;
        }
#else
        VTIMER_SetWakeupTime(delay, TRUE);
1004f84c:	693b      	ldr	r3, [r7, #16]
1004f84e:	2101      	movs	r1, #1
1004f850:	0018      	movs	r0, r3
1004f852:	f000 f81d 	bl	1004f890 <VTIMER_SetWakeupTime>
1004f856:	e002      	b.n	1004f85e <_update_user_timeout+0x6e>
#endif
      }
      else
      {
        *expired = 1;
1004f858:	683b      	ldr	r3, [r7, #0]
1004f85a:	2201      	movs	r2, #1
1004f85c:	701a      	strb	r2, [r3, #0]
1004f85e:	69fb      	ldr	r3, [r7, #28]
1004f860:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004f862:	68bb      	ldr	r3, [r7, #8]
1004f864:	f383 8810 	msr	PRIMASK, r3
}
1004f868:	46c0      	nop			@ (mov r8, r8)
      }
      ATOMIC_SECTION_END();
      break;
1004f86a:	e005      	b.n	1004f878 <_update_user_timeout+0x88>
    }
    curr = curr->next;
1004f86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004f86e:	691b      	ldr	r3, [r3, #16]
1004f870:	627b      	str	r3, [r7, #36]	@ 0x24
  while (curr != NULL)
1004f872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004f874:	2b00      	cmp	r3, #0
1004f876:	d1c8      	bne.n	1004f80a <_update_user_timeout+0x1a>
  }
  if (*expired)
1004f878:	683b      	ldr	r3, [r7, #0]
1004f87a:	781b      	ldrb	r3, [r3, #0]
1004f87c:	2b00      	cmp	r3, #0
1004f87e:	d001      	beq.n	1004f884 <_update_user_timeout+0x94>
  {
    return rootOrig;
1004f880:	6a3b      	ldr	r3, [r7, #32]
1004f882:	e000      	b.n	1004f886 <_update_user_timeout+0x96>
  }

  return curr;
1004f884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
1004f886:	0018      	movs	r0, r3
1004f888:	46bd      	mov	sp, r7
1004f88a:	b00a      	add	sp, #40	@ 0x28
1004f88c:	bdb0      	pop	{r4, r5, r7, pc}
	...

1004f890 <VTIMER_SetWakeupTime>:

#if defined (STM32WB05) || defined (STM32WB09)
static uint32_t VTIMER_SetWakeupTime(uint32_t delay, bool allow_sleep)
{
1004f890:	b580      	push	{r7, lr}
1004f892:	b084      	sub	sp, #16
1004f894:	af00      	add	r7, sp, #0
1004f896:	6078      	str	r0, [r7, #4]
1004f898:	000a      	movs	r2, r1
1004f89a:	1cfb      	adds	r3, r7, #3
1004f89c:	701a      	strb	r2, [r3, #0]
  uint32_t current_time;
  delay = blue_unit_conversion(delay, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ) ;
1004f89e:	4b15      	ldr	r3, [pc, #84]	@ (1004f8f4 <VTIMER_SetWakeupTime+0x64>)
1004f8a0:	699b      	ldr	r3, [r3, #24]
1004f8a2:	0019      	movs	r1, r3
1004f8a4:	4a14      	ldr	r2, [pc, #80]	@ (1004f8f8 <VTIMER_SetWakeupTime+0x68>)
1004f8a6:	687b      	ldr	r3, [r7, #4]
1004f8a8:	0018      	movs	r0, r3
1004f8aa:	f7f1 fc0b 	bl	100410c4 <blue_unit_conversion>
1004f8ae:	0003      	movs	r3, r0
1004f8b0:	607b      	str	r3, [r7, #4]
  /* If the delay is too small round to minimum 2 tick */
  delay = MAX(32, delay);
1004f8b2:	687b      	ldr	r3, [r7, #4]
1004f8b4:	2b20      	cmp	r3, #32
1004f8b6:	d200      	bcs.n	1004f8ba <VTIMER_SetWakeupTime+0x2a>
1004f8b8:	2320      	movs	r3, #32
1004f8ba:	607b      	str	r3, [r7, #4]
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004f8bc:	4b0f      	ldr	r3, [pc, #60]	@ (1004f8fc <VTIMER_SetWakeupTime+0x6c>)
1004f8be:	0018      	movs	r0, r3
1004f8c0:	f7fe ff57 	bl	1004e772 <LL_RADIO_TIMER_GetAbsoluteTime>
1004f8c4:	0003      	movs	r3, r0
1004f8c6:	60fb      	str	r3, [r7, #12]
  /* 4 least significant bits are not taken into account. Then let's round the value */
  LL_RADIO_TIMER_SetCPUWakeupTime(WAKEUP, ((current_time + (delay + 8)) & TIMER_MAX_VALUE));
1004f8c8:	687a      	ldr	r2, [r7, #4]
1004f8ca:	68fb      	ldr	r3, [r7, #12]
1004f8cc:	18d3      	adds	r3, r2, r3
1004f8ce:	3308      	adds	r3, #8
1004f8d0:	4a0a      	ldr	r2, [pc, #40]	@ (1004f8fc <VTIMER_SetWakeupTime+0x6c>)
1004f8d2:	0019      	movs	r1, r3
1004f8d4:	0010      	movs	r0, r2
1004f8d6:	f7fe ff40 	bl	1004e75a <LL_RADIO_TIMER_SetCPUWakeupTime>
  LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
1004f8da:	4b08      	ldr	r3, [pc, #32]	@ (1004f8fc <VTIMER_SetWakeupTime+0x6c>)
1004f8dc:	0018      	movs	r0, r3
1004f8de:	f7fe ff52 	bl	1004e786 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
  LL_RADIO_TIMER_EnableCPUWakeupTimer(WAKEUP);
1004f8e2:	4b06      	ldr	r3, [pc, #24]	@ (1004f8fc <VTIMER_SetWakeupTime+0x6c>)
1004f8e4:	0018      	movs	r0, r3
1004f8e6:	f7fe fef3 	bl	1004e6d0 <LL_RADIO_TIMER_EnableCPUWakeupTimer>

  return current_time;
1004f8ea:	68fb      	ldr	r3, [r7, #12]
}
1004f8ec:	0018      	movs	r0, r3
1004f8ee:	46bd      	mov	sp, r7
1004f8f0:	b004      	add	sp, #16
1004f8f2:	bd80      	pop	{r7, pc}
1004f8f4:	20000f50 	.word	0x20000f50
1004f8f8:	00000326 	.word	0x00000326
1004f8fc:	60001800 	.word	0x60001800

1004f900 <_insert_timer_in_queue>:
#endif

static VTIMER_HandleType *_insert_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
1004f900:	b580      	push	{r7, lr}
1004f902:	b086      	sub	sp, #24
1004f904:	af00      	add	r7, sp, #0
1004f906:	6078      	str	r0, [r7, #4]
1004f908:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
1004f90a:	687b      	ldr	r3, [r7, #4]
1004f90c:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
1004f90e:	2300      	movs	r3, #0
1004f910:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
1004f912:	687b      	ldr	r3, [r7, #4]
1004f914:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
1004f916:	e004      	b.n	1004f922 <_insert_timer_in_queue+0x22>
  {
    prev = current;
1004f918:	697b      	ldr	r3, [r7, #20]
1004f91a:	613b      	str	r3, [r7, #16]
    current = current->next;
1004f91c:	697b      	ldr	r3, [r7, #20]
1004f91e:	691b      	ldr	r3, [r3, #16]
1004f920:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
1004f922:	697b      	ldr	r3, [r7, #20]
1004f924:	2b00      	cmp	r3, #0
1004f926:	d00a      	beq.n	1004f93e <_insert_timer_in_queue+0x3e>
1004f928:	697b      	ldr	r3, [r7, #20]
1004f92a:	681a      	ldr	r2, [r3, #0]
1004f92c:	685b      	ldr	r3, [r3, #4]
1004f92e:	6839      	ldr	r1, [r7, #0]
1004f930:	6808      	ldr	r0, [r1, #0]
1004f932:	6849      	ldr	r1, [r1, #4]
1004f934:	4299      	cmp	r1, r3
1004f936:	d8ef      	bhi.n	1004f918 <_insert_timer_in_queue+0x18>
1004f938:	d101      	bne.n	1004f93e <_insert_timer_in_queue+0x3e>
1004f93a:	4290      	cmp	r0, r2
1004f93c:	d8ec      	bhi.n	1004f918 <_insert_timer_in_queue+0x18>
  }

  handle->next = current;
1004f93e:	683b      	ldr	r3, [r7, #0]
1004f940:	697a      	ldr	r2, [r7, #20]
1004f942:	611a      	str	r2, [r3, #16]

  if (prev == NULL)
1004f944:	693b      	ldr	r3, [r7, #16]
1004f946:	2b00      	cmp	r3, #0
1004f948:	d102      	bne.n	1004f950 <_insert_timer_in_queue+0x50>
  {
    /* We are the new root */
    returnValue = handle;
1004f94a:	683b      	ldr	r3, [r7, #0]
1004f94c:	60fb      	str	r3, [r7, #12]
1004f94e:	e002      	b.n	1004f956 <_insert_timer_in_queue+0x56>
  }
  else
  {
    prev->next = handle;
1004f950:	693b      	ldr	r3, [r7, #16]
1004f952:	683a      	ldr	r2, [r7, #0]
1004f954:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
1004f956:	68fb      	ldr	r3, [r7, #12]
}
1004f958:	0018      	movs	r0, r3
1004f95a:	46bd      	mov	sp, r7
1004f95c:	b006      	add	sp, #24
1004f95e:	bd80      	pop	{r7, pc}

1004f960 <_virtualTimeBaseEnable>:

static void _virtualTimeBaseEnable(FunctionalState state)
{
1004f960:	b580      	push	{r7, lr}
1004f962:	b082      	sub	sp, #8
1004f964:	af00      	add	r7, sp, #0
1004f966:	0002      	movs	r2, r0
1004f968:	1dfb      	adds	r3, r7, #7
1004f96a:	701a      	strb	r2, [r3, #0]
  if (state != DISABLE)
1004f96c:	1dfb      	adds	r3, r7, #7
1004f96e:	781b      	ldrb	r3, [r3, #0]
1004f970:	2b00      	cmp	r3, #0
1004f972:	d010      	beq.n	1004f996 <_virtualTimeBaseEnable+0x36>
  {
    if (RADIO_TIMER_Context.enableTimeBase == FALSE)
1004f974:	4b0e      	ldr	r3, [pc, #56]	@ (1004f9b0 <_virtualTimeBaseEnable+0x50>)
1004f976:	2290      	movs	r2, #144	@ 0x90
1004f978:	5c9b      	ldrb	r3, [r3, r2]
1004f97a:	2201      	movs	r2, #1
1004f97c:	4053      	eors	r3, r2
1004f97e:	b2db      	uxtb	r3, r3
1004f980:	2b00      	cmp	r3, #0
1004f982:	d010      	beq.n	1004f9a6 <_virtualTimeBaseEnable+0x46>
    {
      _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
1004f984:	4b0b      	ldr	r3, [pc, #44]	@ (1004f9b4 <_virtualTimeBaseEnable+0x54>)
1004f986:	0018      	movs	r0, r3
1004f988:	f7ff fe58 	bl	1004f63c <_calibration_callback>
      RADIO_TIMER_Context.enableTimeBase = TRUE;
1004f98c:	4b08      	ldr	r3, [pc, #32]	@ (1004f9b0 <_virtualTimeBaseEnable+0x50>)
1004f98e:	2290      	movs	r2, #144	@ 0x90
1004f990:	2101      	movs	r1, #1
1004f992:	5499      	strb	r1, [r3, r2]
  else
  {
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
    RADIO_TIMER_Context.enableTimeBase = FALSE;
  }
}
1004f994:	e007      	b.n	1004f9a6 <_virtualTimeBaseEnable+0x46>
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004f996:	4b07      	ldr	r3, [pc, #28]	@ (1004f9b4 <_virtualTimeBaseEnable+0x54>)
1004f998:	0018      	movs	r0, r3
1004f99a:	f7ff fc23 	bl	1004f1e4 <HAL_RADIO_TIMER_StopVirtualTimer>
    RADIO_TIMER_Context.enableTimeBase = FALSE;
1004f99e:	4b04      	ldr	r3, [pc, #16]	@ (1004f9b0 <_virtualTimeBaseEnable+0x50>)
1004f9a0:	2290      	movs	r2, #144	@ 0x90
1004f9a2:	2100      	movs	r1, #0
1004f9a4:	5499      	strb	r1, [r3, r2]
}
1004f9a6:	46c0      	nop			@ (mov r8, r8)
1004f9a8:	46bd      	mov	sp, r7
1004f9aa:	b002      	add	sp, #8
1004f9ac:	bd80      	pop	{r7, pc}
1004f9ae:	46c0      	nop			@ (mov r8, r8)
1004f9b0:	20000f50 	.word	0x20000f50
1004f9b4:	20000f90 	.word	0x20000f90

1004f9b8 <_remove_timer_in_queue>:

static VTIMER_HandleType *_remove_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
1004f9b8:	b580      	push	{r7, lr}
1004f9ba:	b086      	sub	sp, #24
1004f9bc:	af00      	add	r7, sp, #0
1004f9be:	6078      	str	r0, [r7, #4]
1004f9c0:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
1004f9c2:	687b      	ldr	r3, [r7, #4]
1004f9c4:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
1004f9c6:	2300      	movs	r3, #0
1004f9c8:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
1004f9ca:	687b      	ldr	r3, [r7, #4]
1004f9cc:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current != handle))
1004f9ce:	e004      	b.n	1004f9da <_remove_timer_in_queue+0x22>
  {
    prev = current;
1004f9d0:	697b      	ldr	r3, [r7, #20]
1004f9d2:	613b      	str	r3, [r7, #16]
    current = current->next;
1004f9d4:	697b      	ldr	r3, [r7, #20]
1004f9d6:	691b      	ldr	r3, [r3, #16]
1004f9d8:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current != handle))
1004f9da:	697b      	ldr	r3, [r7, #20]
1004f9dc:	2b00      	cmp	r3, #0
1004f9de:	d003      	beq.n	1004f9e8 <_remove_timer_in_queue+0x30>
1004f9e0:	697a      	ldr	r2, [r7, #20]
1004f9e2:	683b      	ldr	r3, [r7, #0]
1004f9e4:	429a      	cmp	r2, r3
1004f9e6:	d1f3      	bne.n	1004f9d0 <_remove_timer_in_queue+0x18>
  }

  if (current == NULL)
1004f9e8:	697b      	ldr	r3, [r7, #20]
1004f9ea:	2b00      	cmp	r3, #0
1004f9ec:	d00b      	beq.n	1004fa06 <_remove_timer_in_queue+0x4e>
  {
    /* Not found */
  }
  else if (current == rootNode)
1004f9ee:	697a      	ldr	r2, [r7, #20]
1004f9f0:	687b      	ldr	r3, [r7, #4]
1004f9f2:	429a      	cmp	r2, r3
1004f9f4:	d103      	bne.n	1004f9fe <_remove_timer_in_queue+0x46>
  {
    /* New root node */
    returnValue = current->next;
1004f9f6:	697b      	ldr	r3, [r7, #20]
1004f9f8:	691b      	ldr	r3, [r3, #16]
1004f9fa:	60fb      	str	r3, [r7, #12]
1004f9fc:	e003      	b.n	1004fa06 <_remove_timer_in_queue+0x4e>
  }
  else
  {
    prev->next = current->next;
1004f9fe:	697b      	ldr	r3, [r7, #20]
1004fa00:	691a      	ldr	r2, [r3, #16]
1004fa02:	693b      	ldr	r3, [r7, #16]
1004fa04:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
1004fa06:	68fb      	ldr	r3, [r7, #12]
}
1004fa08:	0018      	movs	r0, r3
1004fa0a:	46bd      	mov	sp, r7
1004fa0c:	b006      	add	sp, #24
1004fa0e:	bd80      	pop	{r7, pc}

1004fa10 <_check_callbacks>:

/* Check the number of expired timer from rootNode (ordered list of timers) and return the list of expired timers */
static VTIMER_HandleType *_check_callbacks(VTIMER_HandleType *rootNode, VTIMER_HandleType **expiredList)
{
1004fa10:	b5b0      	push	{r4, r5, r7, lr}
1004fa12:	b088      	sub	sp, #32
1004fa14:	af00      	add	r7, sp, #0
1004fa16:	6078      	str	r0, [r7, #4]
1004fa18:	6039      	str	r1, [r7, #0]

  VTIMER_HandleType *curr = rootNode;
1004fa1a:	687b      	ldr	r3, [r7, #4]
1004fa1c:	61fb      	str	r3, [r7, #28]
  VTIMER_HandleType *prev = NULL;
1004fa1e:	2300      	movs	r3, #0
1004fa20:	61bb      	str	r3, [r7, #24]
  VTIMER_HandleType *returnValue = rootNode;
1004fa22:	687b      	ldr	r3, [r7, #4]
1004fa24:	617b      	str	r3, [r7, #20]
  *expiredList = rootNode;
1004fa26:	683b      	ldr	r3, [r7, #0]
1004fa28:	687a      	ldr	r2, [r7, #4]
1004fa2a:	601a      	str	r2, [r3, #0]

  int64_t delay;
  uint32_t expiredCount = 0;
1004fa2c:	2300      	movs	r3, #0
1004fa2e:	613b      	str	r3, [r7, #16]

  while (curr != NULL)
1004fa30:	e021      	b.n	1004fa76 <_check_callbacks+0x66>
  {

    if (curr->active)
1004fa32:	69fb      	ldr	r3, [r7, #28]
1004fa34:	7b1b      	ldrb	r3, [r3, #12]
1004fa36:	2b00      	cmp	r3, #0
1004fa38:	d015      	beq.n	1004fa66 <_check_callbacks+0x56>
    {
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
1004fa3a:	69fb      	ldr	r3, [r7, #28]
1004fa3c:	681c      	ldr	r4, [r3, #0]
1004fa3e:	685d      	ldr	r5, [r3, #4]
1004fa40:	f7ff fb6e 	bl	1004f120 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004fa44:	0002      	movs	r2, r0
1004fa46:	000b      	movs	r3, r1
1004fa48:	1aa4      	subs	r4, r4, r2
1004fa4a:	419d      	sbcs	r5, r3
1004fa4c:	0022      	movs	r2, r4
1004fa4e:	002b      	movs	r3, r5
1004fa50:	60ba      	str	r2, [r7, #8]
1004fa52:	60fb      	str	r3, [r7, #12]

      if (delay > 5)   /*TBR*/
1004fa54:	68fb      	ldr	r3, [r7, #12]
1004fa56:	2b00      	cmp	r3, #0
1004fa58:	dc11      	bgt.n	1004fa7e <_check_callbacks+0x6e>
1004fa5a:	68fb      	ldr	r3, [r7, #12]
1004fa5c:	2b00      	cmp	r3, #0
1004fa5e:	d102      	bne.n	1004fa66 <_check_callbacks+0x56>
1004fa60:	68bb      	ldr	r3, [r7, #8]
1004fa62:	2b05      	cmp	r3, #5
1004fa64:	d80b      	bhi.n	1004fa7e <_check_callbacks+0x6e>
        /* End of expired timers list*/
        break;
      }
    }

    prev = curr;
1004fa66:	69fb      	ldr	r3, [r7, #28]
1004fa68:	61bb      	str	r3, [r7, #24]
    curr = curr->next;
1004fa6a:	69fb      	ldr	r3, [r7, #28]
1004fa6c:	691b      	ldr	r3, [r3, #16]
1004fa6e:	61fb      	str	r3, [r7, #28]
    expiredCount++;
1004fa70:	693b      	ldr	r3, [r7, #16]
1004fa72:	3301      	adds	r3, #1
1004fa74:	613b      	str	r3, [r7, #16]
  while (curr != NULL)
1004fa76:	69fb      	ldr	r3, [r7, #28]
1004fa78:	2b00      	cmp	r3, #0
1004fa7a:	d1da      	bne.n	1004fa32 <_check_callbacks+0x22>
1004fa7c:	e000      	b.n	1004fa80 <_check_callbacks+0x70>
        break;
1004fa7e:	46c0      	nop			@ (mov r8, r8)
  }

  if (expiredCount)
1004fa80:	693b      	ldr	r3, [r7, #16]
1004fa82:	2b00      	cmp	r3, #0
1004fa84:	d005      	beq.n	1004fa92 <_check_callbacks+0x82>
  {
    /* Some timers expired */
    prev->next = NULL;
1004fa86:	69bb      	ldr	r3, [r7, #24]
1004fa88:	2200      	movs	r2, #0
1004fa8a:	611a      	str	r2, [r3, #16]
    returnValue = curr;
1004fa8c:	69fb      	ldr	r3, [r7, #28]
1004fa8e:	617b      	str	r3, [r7, #20]
1004fa90:	e002      	b.n	1004fa98 <_check_callbacks+0x88>
  }
  else
  {
    /* No timer expired */
    *expiredList = NULL;
1004fa92:	683b      	ldr	r3, [r7, #0]
1004fa94:	2200      	movs	r2, #0
1004fa96:	601a      	str	r2, [r3, #0]
  }

  return returnValue;
1004fa98:	697b      	ldr	r3, [r7, #20]
}
1004fa9a:	0018      	movs	r0, r3
1004fa9c:	46bd      	mov	sp, r7
1004fa9e:	b008      	add	sp, #32
1004faa0:	bdb0      	pop	{r4, r5, r7, pc}
	...

1004faa4 <_updateCalibrationData>:

static void _updateCalibrationData(void)
{
1004faa4:	b580      	push	{r7, lr}
1004faa6:	b084      	sub	sp, #16
1004faa8:	af00      	add	r7, sp, #0
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004faaa:	4b17      	ldr	r3, [pc, #92]	@ (1004fb08 <_updateCalibrationData+0x64>)
1004faac:	781b      	ldrb	r3, [r3, #0]
1004faae:	2b00      	cmp	r3, #0
1004fab0:	d015      	beq.n	1004fade <_updateCalibrationData+0x3a>
  {
    _get_calibration_data(&RADIO_TIMER_Context.calibrationData);
1004fab2:	4b16      	ldr	r3, [pc, #88]	@ (1004fb0c <_updateCalibrationData+0x68>)
1004fab4:	0018      	movs	r0, r3
1004fab6:	f7ff fc67 	bl	1004f388 <_get_calibration_data>
    _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
1004faba:	4b13      	ldr	r3, [pc, #76]	@ (1004fb08 <_updateCalibrationData+0x64>)
1004fabc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
1004fabe:	b29a      	uxth	r2, r3
1004fac0:	4b11      	ldr	r3, [pc, #68]	@ (1004fb08 <_updateCalibrationData+0x64>)
1004fac2:	699b      	ldr	r3, [r3, #24]
1004fac4:	0019      	movs	r1, r3
1004fac6:	0010      	movs	r0, r2
1004fac8:	f7ff fd8a 	bl	1004f5e0 <_update_xtal_startup_time>
    _configureTxRxDelay(&RADIO_TIMER_Context, FALSE);
1004facc:	4b0e      	ldr	r3, [pc, #56]	@ (1004fb08 <_updateCalibrationData+0x64>)
1004face:	2100      	movs	r1, #0
1004fad0:	0018      	movs	r0, r3
1004fad2:	f7ff fcc1 	bl	1004f458 <_configureTxRxDelay>
    RADIO_TIMER_Context.calibrationData.calibration_data_available = 1;
1004fad6:	4b0c      	ldr	r3, [pc, #48]	@ (1004fb08 <_updateCalibrationData+0x64>)
1004fad8:	2234      	movs	r2, #52	@ 0x34
1004fada:	2101      	movs	r1, #1
1004fadc:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004fade:	f3ef 8310 	mrs	r3, PRIMASK
1004fae2:	607b      	str	r3, [r7, #4]
  return(result);
1004fae4:	687b      	ldr	r3, [r7, #4]
  }
  ATOMIC_SECTION_BEGIN();
1004fae6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
1004fae8:	b672      	cpsid	i
}
1004faea:	46c0      	nop			@ (mov r8, r8)
  _update_system_time(&RADIO_TIMER_Context);
1004faec:	4b06      	ldr	r3, [pc, #24]	@ (1004fb08 <_updateCalibrationData+0x64>)
1004faee:	0018      	movs	r0, r3
1004faf0:	f000 f80e 	bl	1004fb10 <_update_system_time>
1004faf4:	68fb      	ldr	r3, [r7, #12]
1004faf6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004faf8:	68bb      	ldr	r3, [r7, #8]
1004fafa:	f383 8810 	msr	PRIMASK, r3
}
1004fafe:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();
}
1004fb00:	46c0      	nop			@ (mov r8, r8)
1004fb02:	46bd      	mov	sp, r7
1004fb04:	b004      	add	sp, #16
1004fb06:	bd80      	pop	{r7, pc}
1004fb08:	20000f50 	.word	0x20000f50
1004fb0c:	20000f60 	.word	0x20000f60

1004fb10 <_update_system_time>:

/* This function update the system time after a calibration.
 * If the user calls too often this function, you could have rounding issues in the integer maths.
 */
static void _update_system_time(RADIO_TIMER_ContextTypeDef *context)
{
1004fb10:	b5b0      	push	{r4, r5, r7, lr}
1004fb12:	b088      	sub	sp, #32
1004fb14:	af00      	add	r7, sp, #0
1004fb16:	6178      	str	r0, [r7, #20]
  uint32_t current_machine_time;
  uint32_t period;

  current_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004fb18:	4b2a      	ldr	r3, [pc, #168]	@ (1004fbc4 <_update_system_time+0xb4>)
1004fb1a:	0018      	movs	r0, r3
1004fb1c:	f7fe fe29 	bl	1004e772 <LL_RADIO_TIMER_GetAbsoluteTime>
1004fb20:	0003      	movs	r3, r0
1004fb22:	61fb      	str	r3, [r7, #28]
  period = context->calibrationData.last_period1;
1004fb24:	697b      	ldr	r3, [r7, #20]
1004fb26:	6a1b      	ldr	r3, [r3, #32]
1004fb28:	61bb      	str	r3, [r7, #24]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
1004fb2a:	697b      	ldr	r3, [r7, #20]
1004fb2c:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
1004fb2e:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                             blue_unit_conversion(TIME_ABSDIFF(current_machine_time,
1004fb30:	697b      	ldr	r3, [r7, #20]
1004fb32:	2280      	movs	r2, #128	@ 0x80
1004fb34:	589b      	ldr	r3, [r3, r2]
1004fb36:	69fa      	ldr	r2, [r7, #28]
1004fb38:	1ad3      	subs	r3, r2, r3
1004fb3a:	4a23      	ldr	r2, [pc, #140]	@ (1004fbc8 <_update_system_time+0xb8>)
1004fb3c:	69b9      	ldr	r1, [r7, #24]
1004fb3e:	0018      	movs	r0, r3
1004fb40:	f7f1 fac0 	bl	100410c4 <blue_unit_conversion>
1004fb44:	0003      	movs	r3, r0
1004fb46:	60bb      	str	r3, [r7, #8]
1004fb48:	2300      	movs	r3, #0
1004fb4a:	60fb      	str	r3, [r7, #12]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
1004fb4c:	68ba      	ldr	r2, [r7, #8]
1004fb4e:	68fb      	ldr	r3, [r7, #12]
1004fb50:	1912      	adds	r2, r2, r4
1004fb52:	416b      	adcs	r3, r5
1004fb54:	6979      	ldr	r1, [r7, #20]
1004fb56:	670a      	str	r2, [r1, #112]	@ 0x70
1004fb58:	674b      	str	r3, [r1, #116]	@ 0x74
                                                               context->last_machine_time),
                                                  period, MULT64_THR_PERIOD);

  if ((context->calibrationSettings.periodicCalibration == 0)
1004fb5a:	697b      	ldr	r3, [r7, #20]
1004fb5c:	781b      	ldrb	r3, [r3, #0]
1004fb5e:	2b00      	cmp	r3, #0
1004fb60:	d11d      	bne.n	1004fb9e <_update_system_time+0x8e>
      && (TIME_ABSDIFF(current_machine_time,
1004fb62:	697b      	ldr	r3, [r7, #20]
1004fb64:	2280      	movs	r2, #128	@ 0x80
1004fb66:	589b      	ldr	r3, [r3, r2]
1004fb68:	69fa      	ldr	r2, [r7, #28]
1004fb6a:	1ad2      	subs	r2, r2, r3
                       context->last_machine_time) < context->calibrationData.calibration_machine_interval))
1004fb6c:	697b      	ldr	r3, [r7, #20]
1004fb6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      && (TIME_ABSDIFF(current_machine_time,
1004fb70:	429a      	cmp	r2, r3
1004fb72:	d214      	bcs.n	1004fb9e <_update_system_time+0x8e>
  {
    context->cumulative_time += blue_unit_conversion(TIMER_MAX_VALUE, period, MULT64_THR_PERIOD);
1004fb74:	4a14      	ldr	r2, [pc, #80]	@ (1004fbc8 <_update_system_time+0xb8>)
1004fb76:	69b9      	ldr	r1, [r7, #24]
1004fb78:	2301      	movs	r3, #1
1004fb7a:	425b      	negs	r3, r3
1004fb7c:	0018      	movs	r0, r3
1004fb7e:	f7f1 faa1 	bl	100410c4 <blue_unit_conversion>
1004fb82:	0001      	movs	r1, r0
1004fb84:	697b      	ldr	r3, [r7, #20]
1004fb86:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004fb88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004fb8a:	6039      	str	r1, [r7, #0]
1004fb8c:	2100      	movs	r1, #0
1004fb8e:	6079      	str	r1, [r7, #4]
1004fb90:	6838      	ldr	r0, [r7, #0]
1004fb92:	6879      	ldr	r1, [r7, #4]
1004fb94:	1812      	adds	r2, r2, r0
1004fb96:	414b      	adcs	r3, r1
1004fb98:	6979      	ldr	r1, [r7, #20]
1004fb9a:	670a      	str	r2, [r1, #112]	@ 0x70
1004fb9c:	674b      	str	r3, [r1, #116]	@ 0x74
  }
  context->last_machine_time = current_machine_time;
1004fb9e:	697b      	ldr	r3, [r7, #20]
1004fba0:	2180      	movs	r1, #128	@ 0x80
1004fba2:	69fa      	ldr	r2, [r7, #28]
1004fba4:	505a      	str	r2, [r3, r1]
  context->calibrationData.last_calibration_time = context->cumulative_time;
1004fba6:	697b      	ldr	r3, [r7, #20]
1004fba8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004fbaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004fbac:	6979      	ldr	r1, [r7, #20]
1004fbae:	628a      	str	r2, [r1, #40]	@ 0x28
1004fbb0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  context->calibrationData.last_period1 = context->calibrationData.period1;
1004fbb2:	697b      	ldr	r3, [r7, #20]
1004fbb4:	69da      	ldr	r2, [r3, #28]
1004fbb6:	697b      	ldr	r3, [r7, #20]
1004fbb8:	621a      	str	r2, [r3, #32]
}
1004fbba:	46c0      	nop			@ (mov r8, r8)
1004fbbc:	46bd      	mov	sp, r7
1004fbbe:	b008      	add	sp, #32
1004fbc0:	bdb0      	pop	{r4, r5, r7, pc}
1004fbc2:	46c0      	nop			@ (mov r8, r8)
1004fbc4:	60001800 	.word	0x60001800
1004fbc8:	00000635 	.word	0x00000635

1004fbcc <_check_radio_activity>:
   3) The radio event is after the next calibration event. Then the timer will be programmed with the latest values.
   The check on the next calibration event is made even though the calibration is disabled (max cal. interval)
   in order to avoid counter wrapping with timeouts far in the future.
*/
static void _check_radio_activity(RADIO_TIMER_RadioHandleTypeDef *timerHandle, uint8_t *expired)
{
1004fbcc:	b5b0      	push	{r4, r5, r7, lr}
1004fbce:	b08a      	sub	sp, #40	@ 0x28
1004fbd0:	af00      	add	r7, sp, #0
1004fbd2:	6078      	str	r0, [r7, #4]
1004fbd4:	6039      	str	r1, [r7, #0]
  uint64_t nextCalibrationEvent, currentTime;
  *expired = 0;
1004fbd6:	683b      	ldr	r3, [r7, #0]
1004fbd8:	2200      	movs	r2, #0
1004fbda:	701a      	strb	r2, [r3, #0]
  if (timerHandle->pending)
1004fbdc:	687b      	ldr	r3, [r7, #4]
1004fbde:	7a9b      	ldrb	r3, [r3, #10]
1004fbe0:	2b00      	cmp	r3, #0
1004fbe2:	d100      	bne.n	1004fbe6 <_check_radio_activity+0x1a>
1004fbe4:	e070      	b.n	1004fcc8 <_check_radio_activity+0xfc>
  {
    
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
1004fbe6:	4b3a      	ldr	r3, [pc, #232]	@ (1004fcd0 <_check_radio_activity+0x104>)
1004fbe8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004fbea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval;
1004fbec:	4938      	ldr	r1, [pc, #224]	@ (1004fcd0 <_check_radio_activity+0x104>)
1004fbee:	6849      	ldr	r1, [r1, #4]
1004fbf0:	000c      	movs	r4, r1
1004fbf2:	2100      	movs	r1, #0
1004fbf4:	000d      	movs	r5, r1
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
1004fbf6:	1912      	adds	r2, r2, r4
1004fbf8:	416b      	adcs	r3, r5
1004fbfa:	623a      	str	r2, [r7, #32]
1004fbfc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004fbfe:	f3ef 8310 	mrs	r3, PRIMASK
1004fc02:	60fb      	str	r3, [r7, #12]
  return(result);
1004fc04:	68fb      	ldr	r3, [r7, #12]

    ATOMIC_SECTION_BEGIN();
1004fc06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004fc08:	b672      	cpsid	i
}
1004fc0a:	46c0      	nop			@ (mov r8, r8)
    currentTime = HAL_RADIO_TIMER_GetCurrentSysTime();
1004fc0c:	f7ff fa88 	bl	1004f120 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004fc10:	0002      	movs	r2, r0
1004fc12:	000b      	movs	r3, r1
1004fc14:	613a      	str	r2, [r7, #16]
1004fc16:	617b      	str	r3, [r7, #20]
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
1004fc18:	687b      	ldr	r3, [r7, #4]
1004fc1a:	681a      	ldr	r2, [r3, #0]
1004fc1c:	685b      	ldr	r3, [r3, #4]
1004fc1e:	6a38      	ldr	r0, [r7, #32]
1004fc20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004fc22:	24c8      	movs	r4, #200	@ 0xc8
1004fc24:	02a4      	lsls	r4, r4, #10
1004fc26:	2500      	movs	r5, #0
1004fc28:	1900      	adds	r0, r0, r4
1004fc2a:	4169      	adcs	r1, r5
1004fc2c:	4299      	cmp	r1, r3
1004fc2e:	d812      	bhi.n	1004fc56 <_check_radio_activity+0x8a>
1004fc30:	d101      	bne.n	1004fc36 <_check_radio_activity+0x6a>
1004fc32:	4290      	cmp	r0, r2
1004fc34:	d80f      	bhi.n	1004fc56 <_check_radio_activity+0x8a>
        (currentTime > (nextCalibrationEvent + CALIB_SAFE_THR)))
1004fc36:	6a3a      	ldr	r2, [r7, #32]
1004fc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004fc3a:	20b9      	movs	r0, #185	@ 0xb9
1004fc3c:	0040      	lsls	r0, r0, #1
1004fc3e:	2100      	movs	r1, #0
1004fc40:	1812      	adds	r2, r2, r0
1004fc42:	414b      	adcs	r3, r1
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
1004fc44:	6979      	ldr	r1, [r7, #20]
1004fc46:	4299      	cmp	r1, r3
1004fc48:	d805      	bhi.n	1004fc56 <_check_radio_activity+0x8a>
1004fc4a:	6979      	ldr	r1, [r7, #20]
1004fc4c:	4299      	cmp	r1, r3
1004fc4e:	d135      	bne.n	1004fcbc <_check_radio_activity+0xf0>
1004fc50:	6939      	ldr	r1, [r7, #16]
1004fc52:	4291      	cmp	r1, r2
1004fc54:	d932      	bls.n	1004fcbc <_check_radio_activity+0xf0>
    {
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
1004fc56:	687b      	ldr	r3, [r7, #4]
1004fc58:	681a      	ldr	r2, [r3, #0]
1004fc5a:	685b      	ldr	r3, [r3, #4]
1004fc5c:	204c      	movs	r0, #76	@ 0x4c
1004fc5e:	4240      	negs	r0, r0
1004fc60:	17c1      	asrs	r1, r0, #31
1004fc62:	1880      	adds	r0, r0, r2
1004fc64:	4159      	adcs	r1, r3
1004fc66:	693a      	ldr	r2, [r7, #16]
1004fc68:	697b      	ldr	r3, [r7, #20]
1004fc6a:	240a      	movs	r4, #10
1004fc6c:	2500      	movs	r5, #0
1004fc6e:	1912      	adds	r2, r2, r4
1004fc70:	416b      	adcs	r3, r5
1004fc72:	4299      	cmp	r1, r3
1004fc74:	d802      	bhi.n	1004fc7c <_check_radio_activity+0xb0>
1004fc76:	d11a      	bne.n	1004fcae <_check_radio_activity+0xe2>
1004fc78:	4290      	cmp	r0, r2
1004fc7a:	d918      	bls.n	1004fcae <_check_radio_activity+0xe2>
      {
        *expired = TIMER_SetRadioTimerValue(timerHandle->expiryTime, timerHandle->event_type, timerHandle->cal_req);
1004fc7c:	687b      	ldr	r3, [r7, #4]
1004fc7e:	681a      	ldr	r2, [r3, #0]
1004fc80:	685b      	ldr	r3, [r3, #4]
1004fc82:	0010      	movs	r0, r2
1004fc84:	687b      	ldr	r3, [r7, #4]
1004fc86:	7b19      	ldrb	r1, [r3, #12]
1004fc88:	687b      	ldr	r3, [r7, #4]
1004fc8a:	7a1b      	ldrb	r3, [r3, #8]
1004fc8c:	001a      	movs	r2, r3
1004fc8e:	f000 f821 	bl	1004fcd4 <TIMER_SetRadioTimerValue>
1004fc92:	0003      	movs	r3, r0
1004fc94:	001a      	movs	r2, r3
1004fc96:	683b      	ldr	r3, [r7, #0]
1004fc98:	701a      	strb	r2, [r3, #0]
        timerHandle->pending = FALSE; /* timer has been served. No more pending */
1004fc9a:	687b      	ldr	r3, [r7, #4]
1004fc9c:	2200      	movs	r2, #0
1004fc9e:	729a      	strb	r2, [r3, #10]
        timerHandle->active = TRUE; /* timer has been programmed and it becomes ACTIVE */
1004fca0:	687b      	ldr	r3, [r7, #4]
1004fca2:	2201      	movs	r2, #1
1004fca4:	725a      	strb	r2, [r3, #9]
        timerHandle->intTxRx_to_be_served = TRUE;
1004fca6:	687b      	ldr	r3, [r7, #4]
1004fca8:	2201      	movs	r2, #1
1004fcaa:	72da      	strb	r2, [r3, #11]
1004fcac:	e006      	b.n	1004fcbc <_check_radio_activity+0xf0>
      }
      else
      {
        
        RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004fcae:	4b08      	ldr	r3, [pc, #32]	@ (1004fcd0 <_check_radio_activity+0x104>)
1004fcb0:	2262      	movs	r2, #98	@ 0x62
1004fcb2:	2100      	movs	r1, #0
1004fcb4:	5499      	strb	r1, [r3, r2]
        *expired = 1;
1004fcb6:	683b      	ldr	r3, [r7, #0]
1004fcb8:	2201      	movs	r2, #1
1004fcba:	701a      	strb	r2, [r3, #0]
1004fcbc:	69fb      	ldr	r3, [r7, #28]
1004fcbe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004fcc0:	68bb      	ldr	r3, [r7, #8]
1004fcc2:	f383 8810 	msr	PRIMASK, r3
}
1004fcc6:	46c0      	nop			@ (mov r8, r8)
#endif
    }
    ATOMIC_SECTION_END();
    
  }
}
1004fcc8:	46c0      	nop			@ (mov r8, r8)
1004fcca:	46bd      	mov	sp, r7
1004fccc:	b00a      	add	sp, #40	@ 0x28
1004fcce:	bdb0      	pop	{r4, r5, r7, pc}
1004fcd0:	20000f50 	.word	0x20000f50

1004fcd4 <TIMER_SetRadioTimerValue>:
  * @warning The API must be called with interrupts disabled to avoid programming the timer with a value in the past
  * @retval  0 if a correct timeout has been programmed in the timeout register
  * @retval  1 if a correct timeout cannot be programmed
  */
static uint8_t TIMER_SetRadioTimerValue(uint32_t timeout, bool event_type, bool cal_req)
{
1004fcd4:	b580      	push	{r7, lr}
1004fcd6:	b08a      	sub	sp, #40	@ 0x28
1004fcd8:	af00      	add	r7, sp, #0
1004fcda:	6078      	str	r0, [r7, #4]
1004fcdc:	0008      	movs	r0, r1
1004fcde:	0011      	movs	r1, r2
1004fce0:	1cfb      	adds	r3, r7, #3
1004fce2:	1c02      	adds	r2, r0, #0
1004fce4:	701a      	strb	r2, [r3, #0]
1004fce6:	1cbb      	adds	r3, r7, #2
1004fce8:	1c0a      	adds	r2, r1, #0
1004fcea:	701a      	strb	r2, [r3, #0]
  uint32_t current_time, delay, radio_init_delay, device_delay, rel_timeout, rel_timeout_mt;
  uint8_t ret_val;

  /*choose the 2nd init duration. Check the event_type and cal. request*/
  if (event_type == TX)
1004fcec:	1cfb      	adds	r3, r7, #3
1004fcee:	781b      	ldrb	r3, [r3, #0]
1004fcf0:	2b00      	cmp	r3, #0
1004fcf2:	d015      	beq.n	1004fd20 <TIMER_SetRadioTimerValue+0x4c>
  {
    if (cal_req)
1004fcf4:	1cbb      	adds	r3, r7, #2
1004fcf6:	781b      	ldrb	r3, [r3, #0]
1004fcf8:	2b00      	cmp	r3, #0
1004fcfa:	d008      	beq.n	1004fd0e <TIMER_SetRadioTimerValue+0x3a>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay;
1004fcfc:	4b67      	ldr	r3, [pc, #412]	@ (1004fe9c <TIMER_SetRadioTimerValue+0x1c8>)
1004fcfe:	2238      	movs	r2, #56	@ 0x38
1004fd00:	5c9b      	ldrb	r3, [r3, r2]
1004fd02:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004fd04:	4b65      	ldr	r3, [pc, #404]	@ (1004fe9c <TIMER_SetRadioTimerValue+0x1c8>)
1004fd06:	223c      	movs	r2, #60	@ 0x3c
1004fd08:	5c9b      	ldrb	r3, [r3, r2]
1004fd0a:	61fb      	str	r3, [r7, #28]
1004fd0c:	e01d      	b.n	1004fd4a <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_no_cal_delay;
1004fd0e:	4b63      	ldr	r3, [pc, #396]	@ (1004fe9c <TIMER_SetRadioTimerValue+0x1c8>)
1004fd10:	2239      	movs	r2, #57	@ 0x39
1004fd12:	5c9b      	ldrb	r3, [r3, r2]
1004fd14:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004fd16:	4b61      	ldr	r3, [pc, #388]	@ (1004fe9c <TIMER_SetRadioTimerValue+0x1c8>)
1004fd18:	223c      	movs	r2, #60	@ 0x3c
1004fd1a:	5c9b      	ldrb	r3, [r3, r2]
1004fd1c:	61fb      	str	r3, [r7, #28]
1004fd1e:	e014      	b.n	1004fd4a <TIMER_SetRadioTimerValue+0x76>
    }
  }
  else
  {
    if (cal_req)
1004fd20:	1cbb      	adds	r3, r7, #2
1004fd22:	781b      	ldrb	r3, [r3, #0]
1004fd24:	2b00      	cmp	r3, #0
1004fd26:	d008      	beq.n	1004fd3a <TIMER_SetRadioTimerValue+0x66>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_cal_delay;
1004fd28:	4b5c      	ldr	r3, [pc, #368]	@ (1004fe9c <TIMER_SetRadioTimerValue+0x1c8>)
1004fd2a:	223a      	movs	r2, #58	@ 0x3a
1004fd2c:	5c9b      	ldrb	r3, [r3, r2]
1004fd2e:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004fd30:	4b5a      	ldr	r3, [pc, #360]	@ (1004fe9c <TIMER_SetRadioTimerValue+0x1c8>)
1004fd32:	223c      	movs	r2, #60	@ 0x3c
1004fd34:	5c9b      	ldrb	r3, [r3, r2]
1004fd36:	61fb      	str	r3, [r7, #28]
1004fd38:	e007      	b.n	1004fd4a <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_no_cal_delay;
1004fd3a:	4b58      	ldr	r3, [pc, #352]	@ (1004fe9c <TIMER_SetRadioTimerValue+0x1c8>)
1004fd3c:	223b      	movs	r2, #59	@ 0x3b
1004fd3e:	5c9b      	ldrb	r3, [r3, r2]
1004fd40:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004fd42:	4b56      	ldr	r3, [pc, #344]	@ (1004fe9c <TIMER_SetRadioTimerValue+0x1c8>)
1004fd44:	223c      	movs	r2, #60	@ 0x3c
1004fd46:	5c9b      	ldrb	r3, [r3, r2]
1004fd48:	61fb      	str	r3, [r7, #28]
    }
  }

  /* At this point, it is care of the upper layers to guarantee that the timeout represents an absolute time in the future */
  rel_timeout = timeout - (uint32_t)_get_system_time_and_machine(&RADIO_TIMER_Context, &current_time);
1004fd4a:	230c      	movs	r3, #12
1004fd4c:	18fa      	adds	r2, r7, r3
1004fd4e:	4b53      	ldr	r3, [pc, #332]	@ (1004fe9c <TIMER_SetRadioTimerValue+0x1c8>)
1004fd50:	0011      	movs	r1, r2
1004fd52:	0018      	movs	r0, r3
1004fd54:	f7ff fce4 	bl	1004f720 <_get_system_time_and_machine>
1004fd58:	0002      	movs	r2, r0
1004fd5a:	000b      	movs	r3, r1
1004fd5c:	687b      	ldr	r3, [r7, #4]
1004fd5e:	1a9b      	subs	r3, r3, r2
1004fd60:	617b      	str	r3, [r7, #20]

  rel_timeout_mt =  blue_unit_conversion(rel_timeout, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
1004fd62:	4b4e      	ldr	r3, [pc, #312]	@ (1004fe9c <TIMER_SetRadioTimerValue+0x1c8>)
1004fd64:	699b      	ldr	r3, [r3, #24]
1004fd66:	0019      	movs	r1, r3
1004fd68:	4a4d      	ldr	r2, [pc, #308]	@ (1004fea0 <TIMER_SetRadioTimerValue+0x1cc>)
1004fd6a:	697b      	ldr	r3, [r7, #20]
1004fd6c:	0018      	movs	r0, r3
1004fd6e:	f7f1 f9a9 	bl	100410c4 <blue_unit_conversion>
1004fd72:	0003      	movs	r3, r0
1004fd74:	613b      	str	r3, [r7, #16]

  /*Check if the timeout is beyond the wakeup time offset. Then program either the WakeUp timer or the Timer1*/
  if (rel_timeout > (device_delay + RADIO_TIMER_Context.hs_startup_time + MARGIN_EXT))
1004fd76:	4b49      	ldr	r3, [pc, #292]	@ (1004fe9c <TIMER_SetRadioTimerValue+0x1c8>)
1004fd78:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
1004fd7a:	69fb      	ldr	r3, [r7, #28]
1004fd7c:	18d3      	adds	r3, r2, r3
1004fd7e:	33c8      	adds	r3, #200	@ 0xc8
1004fd80:	697a      	ldr	r2, [r7, #20]
1004fd82:	429a      	cmp	r2, r3
1004fd84:	d92f      	bls.n	1004fde6 <TIMER_SetRadioTimerValue+0x112>
  {
    /*The timeout is after the wakeup_time_offset, So it is ok to program the wakeup timer*/
    delay = rel_timeout_mt - BLUEGLOB->WAKEUPINITDELAY - radio_init_delay;
1004fd86:	4b47      	ldr	r3, [pc, #284]	@ (1004fea4 <TIMER_SetRadioTimerValue+0x1d0>)
1004fd88:	795b      	ldrb	r3, [r3, #5]
1004fd8a:	b2db      	uxtb	r3, r3
1004fd8c:	001a      	movs	r2, r3
1004fd8e:	693b      	ldr	r3, [r7, #16]
1004fd90:	1a9a      	subs	r2, r3, r2
1004fd92:	6a3b      	ldr	r3, [r7, #32]
1004fd94:	1ad3      	subs	r3, r2, r3
1004fd96:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP, ((current_time + delay) & TIMER_MAX_VALUE));
1004fd98:	68fa      	ldr	r2, [r7, #12]
1004fd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004fd9c:	18d3      	adds	r3, r2, r3
1004fd9e:	4a42      	ldr	r2, [pc, #264]	@ (1004fea8 <TIMER_SetRadioTimerValue+0x1d4>)
1004fda0:	0019      	movs	r1, r3
1004fda2:	0010      	movs	r0, r2
1004fda4:	f7fe fcc3 	bl	1004e72e <LL_RADIO_TIMER_SetBLEWakeupTime>
    LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP, 0);
1004fda8:	4b3f      	ldr	r3, [pc, #252]	@ (1004fea8 <TIMER_SetRadioTimerValue+0x1d4>)
1004fdaa:	2100      	movs	r1, #0
1004fdac:	0018      	movs	r0, r3
1004fdae:	f7fe fcf9 	bl	1004e7a4 <LL_RADIO_TIMER_SetSleepRequestMode>
    LL_RADIO_TIMER_DisableTimer1(BLUE);
1004fdb2:	23c0      	movs	r3, #192	@ 0xc0
1004fdb4:	05db      	lsls	r3, r3, #23
1004fdb6:	0018      	movs	r0, r3
1004fdb8:	f7fe fc00 	bl	1004e5bc <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
1004fdbc:	23c0      	movs	r3, #192	@ 0xc0
1004fdbe:	05db      	lsls	r3, r3, #23
1004fdc0:	0018      	movs	r0, r3
1004fdc2:	f7fe fc1b 	bl	1004e5fc <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_EnableBLEWakeupTimer(WAKEUP);
1004fdc6:	4b38      	ldr	r3, [pc, #224]	@ (1004fea8 <TIMER_SetRadioTimerValue+0x1d4>)
1004fdc8:	0018      	movs	r0, r3
1004fdca:	f7fe fc4d 	bl	1004e668 <LL_RADIO_TIMER_EnableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
1004fdce:	4b36      	ldr	r3, [pc, #216]	@ (1004fea8 <TIMER_SetRadioTimerValue+0x1d4>)
1004fdd0:	0018      	movs	r0, r3
1004fdd2:	f7fe fcd8 	bl	1004e786 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
    radio_init_delay += BLUEGLOB->WAKEUPINITDELAY;
1004fdd6:	4b33      	ldr	r3, [pc, #204]	@ (1004fea4 <TIMER_SetRadioTimerValue+0x1d0>)
1004fdd8:	795b      	ldrb	r3, [r3, #5]
1004fdda:	b2db      	uxtb	r3, r3
1004fddc:	001a      	movs	r2, r3
1004fdde:	6a3b      	ldr	r3, [r7, #32]
1004fde0:	189b      	adds	r3, r3, r2
1004fde2:	623b      	str	r3, [r7, #32]
1004fde4:	e021      	b.n	1004fe2a <TIMER_SetRadioTimerValue+0x156>
  }
  else
  {
    delay = rel_timeout_mt - RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt - radio_init_delay;
1004fde6:	4b2d      	ldr	r3, [pc, #180]	@ (1004fe9c <TIMER_SetRadioTimerValue+0x1c8>)
1004fde8:	223d      	movs	r2, #61	@ 0x3d
1004fdea:	5c9b      	ldrb	r3, [r3, r2]
1004fdec:	001a      	movs	r2, r3
1004fdee:	693b      	ldr	r3, [r7, #16]
1004fdf0:	1a9a      	subs	r2, r3, r2
1004fdf2:	6a3b      	ldr	r3, [r7, #32]
1004fdf4:	1ad3      	subs	r3, r2, r3
1004fdf6:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + delay) & TIMER_MAX_VALUE));
1004fdf8:	68fa      	ldr	r2, [r7, #12]
1004fdfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004fdfc:	18d2      	adds	r2, r2, r3
1004fdfe:	23c0      	movs	r3, #192	@ 0xc0
1004fe00:	05db      	lsls	r3, r3, #23
1004fe02:	0011      	movs	r1, r2
1004fe04:	0018      	movs	r0, r3
1004fe06:	f7fe fc19 	bl	1004e63c <LL_RADIO_TIMER_SetTimeout>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004fe0a:	4b27      	ldr	r3, [pc, #156]	@ (1004fea8 <TIMER_SetRadioTimerValue+0x1d4>)
1004fe0c:	0018      	movs	r0, r3
1004fe0e:	f7fe fc3b 	bl	1004e688 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableTimer1(BLUE);
1004fe12:	23c0      	movs	r3, #192	@ 0xc0
1004fe14:	05db      	lsls	r3, r3, #23
1004fe16:	0018      	movs	r0, r3
1004fe18:	f7fe fbc0 	bl	1004e59c <LL_RADIO_TIMER_EnableTimer1>
    radio_init_delay += RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt;
1004fe1c:	4b1f      	ldr	r3, [pc, #124]	@ (1004fe9c <TIMER_SetRadioTimerValue+0x1c8>)
1004fe1e:	223d      	movs	r2, #61	@ 0x3d
1004fe20:	5c9b      	ldrb	r3, [r3, r2]
1004fe22:	001a      	movs	r2, r3
1004fe24:	6a3b      	ldr	r3, [r7, #32]
1004fe26:	189b      	adds	r3, r3, r2
1004fe28:	623b      	str	r3, [r7, #32]
  }

  RADIO_TIMER_Context.last_anchor_mt = (current_time + rel_timeout_mt) & TIMER_MAX_VALUE;
1004fe2a:	68fa      	ldr	r2, [r7, #12]
1004fe2c:	693b      	ldr	r3, [r7, #16]
1004fe2e:	18d2      	adds	r2, r2, r3
1004fe30:	4b1a      	ldr	r3, [pc, #104]	@ (1004fe9c <TIMER_SetRadioTimerValue+0x1c8>)
1004fe32:	2188      	movs	r1, #136	@ 0x88
1004fe34:	505a      	str	r2, [r3, r1]
  BLUEGLOB->BYTE22 = 0xF0;
  BLUEGLOB->BYTE23 = 0xFF;
#endif

  /* Basic low level check with an extra margin of machine units */
  if ((delay + radio_init_delay) < (radio_init_delay + 5))
1004fe36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1004fe38:	6a3b      	ldr	r3, [r7, #32]
1004fe3a:	18d2      	adds	r2, r2, r3
1004fe3c:	6a3b      	ldr	r3, [r7, #32]
1004fe3e:	3305      	adds	r3, #5
1004fe40:	429a      	cmp	r2, r3
1004fe42:	d212      	bcs.n	1004fe6a <TIMER_SetRadioTimerValue+0x196>
  {
    LL_RADIO_TIMER_DisableTimer1(BLUE);
1004fe44:	23c0      	movs	r3, #192	@ 0xc0
1004fe46:	05db      	lsls	r3, r3, #23
1004fe48:	0018      	movs	r0, r3
1004fe4a:	f7fe fbb7 	bl	1004e5bc <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
1004fe4e:	23c0      	movs	r3, #192	@ 0xc0
1004fe50:	05db      	lsls	r3, r3, #23
1004fe52:	0018      	movs	r0, r3
1004fe54:	f7fe fbd2 	bl	1004e5fc <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004fe58:	4b13      	ldr	r3, [pc, #76]	@ (1004fea8 <TIMER_SetRadioTimerValue+0x1d4>)
1004fe5a:	0018      	movs	r0, r3
1004fe5c:	f7fe fc14 	bl	1004e688 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    ret_val =  1;
1004fe60:	231b      	movs	r3, #27
1004fe62:	18fb      	adds	r3, r7, r3
1004fe64:	2201      	movs	r2, #1
1004fe66:	701a      	strb	r2, [r3, #0]
1004fe68:	e010      	b.n	1004fe8c <TIMER_SetRadioTimerValue+0x1b8>
  }
  else
  {
    RADIO_TIMER_Context.last_setup_time = blue_unit_conversion(radio_init_delay, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
1004fe6a:	4b0c      	ldr	r3, [pc, #48]	@ (1004fe9c <TIMER_SetRadioTimerValue+0x1c8>)
1004fe6c:	69db      	ldr	r3, [r3, #28]
1004fe6e:	0019      	movs	r1, r3
1004fe70:	4a0e      	ldr	r2, [pc, #56]	@ (1004feac <TIMER_SetRadioTimerValue+0x1d8>)
1004fe72:	6a3b      	ldr	r3, [r7, #32]
1004fe74:	0018      	movs	r0, r3
1004fe76:	f7f1 f925 	bl	100410c4 <blue_unit_conversion>
1004fe7a:	0003      	movs	r3, r0
1004fe7c:	b2d9      	uxtb	r1, r3
1004fe7e:	4b07      	ldr	r3, [pc, #28]	@ (1004fe9c <TIMER_SetRadioTimerValue+0x1c8>)
1004fe80:	2284      	movs	r2, #132	@ 0x84
1004fe82:	5499      	strb	r1, [r3, r2]
    ret_val = 0;
1004fe84:	231b      	movs	r3, #27
1004fe86:	18fb      	adds	r3, r7, r3
1004fe88:	2200      	movs	r2, #0
1004fe8a:	701a      	strb	r2, [r3, #0]
  }

  return ret_val;
1004fe8c:	231b      	movs	r3, #27
1004fe8e:	18fb      	adds	r3, r7, r3
1004fe90:	781b      	ldrb	r3, [r3, #0]
}
1004fe92:	0018      	movs	r0, r3
1004fe94:	46bd      	mov	sp, r7
1004fe96:	b00a      	add	sp, #40	@ 0x28
1004fe98:	bd80      	pop	{r7, pc}
1004fe9a:	46c0      	nop			@ (mov r8, r8)
1004fe9c:	20000f50 	.word	0x20000f50
1004fea0:	00000326 	.word	0x00000326
1004fea4:	200000c0 	.word	0x200000c0
1004fea8:	60001800 	.word	0x60001800
1004feac:	00000635 	.word	0x00000635

1004feb0 <TIMER_GetPastSysTime>:
  * @param   current_system_time: Current System time
  * @warning User should guarantee that call to this function are performed in a non-interruptible context.
  * @return  STU value
  */
static uint64_t TIMER_GetPastSysTime(uint32_t time, uint64_t *current_system_time)
{
1004feb0:	b5b0      	push	{r4, r5, r7, lr}
1004feb2:	b084      	sub	sp, #16
1004feb4:	af00      	add	r7, sp, #0
1004feb6:	6078      	str	r0, [r7, #4]
1004feb8:	6039      	str	r1, [r7, #0]
  uint32_t delta_systime, current_machine_time;

  *current_system_time = _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
1004feba:	2308      	movs	r3, #8
1004febc:	18fa      	adds	r2, r7, r3
1004febe:	4b12      	ldr	r3, [pc, #72]	@ (1004ff08 <TIMER_GetPastSysTime+0x58>)
1004fec0:	0011      	movs	r1, r2
1004fec2:	0018      	movs	r0, r3
1004fec4:	f7ff fc2c 	bl	1004f720 <_get_system_time_and_machine>
1004fec8:	0002      	movs	r2, r0
1004feca:	000b      	movs	r3, r1
1004fecc:	6839      	ldr	r1, [r7, #0]
1004fece:	600a      	str	r2, [r1, #0]
1004fed0:	604b      	str	r3, [r1, #4]
  delta_systime = blue_unit_conversion(TIME_DIFF(current_machine_time, time), RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
1004fed2:	68ba      	ldr	r2, [r7, #8]
1004fed4:	687b      	ldr	r3, [r7, #4]
1004fed6:	1ad0      	subs	r0, r2, r3
1004fed8:	4b0b      	ldr	r3, [pc, #44]	@ (1004ff08 <TIMER_GetPastSysTime+0x58>)
1004feda:	69db      	ldr	r3, [r3, #28]
1004fedc:	0019      	movs	r1, r3
1004fede:	4b0b      	ldr	r3, [pc, #44]	@ (1004ff0c <TIMER_GetPastSysTime+0x5c>)
1004fee0:	001a      	movs	r2, r3
1004fee2:	f7f1 f8ef 	bl	100410c4 <blue_unit_conversion>
1004fee6:	0003      	movs	r3, r0
1004fee8:	60fb      	str	r3, [r7, #12]

  return (*current_system_time - delta_systime);
1004feea:	683b      	ldr	r3, [r7, #0]
1004feec:	681a      	ldr	r2, [r3, #0]
1004feee:	685b      	ldr	r3, [r3, #4]
1004fef0:	68f9      	ldr	r1, [r7, #12]
1004fef2:	000c      	movs	r4, r1
1004fef4:	2100      	movs	r1, #0
1004fef6:	000d      	movs	r5, r1
1004fef8:	1b12      	subs	r2, r2, r4
1004fefa:	41ab      	sbcs	r3, r5
}
1004fefc:	0010      	movs	r0, r2
1004fefe:	0019      	movs	r1, r3
1004ff00:	46bd      	mov	sp, r7
1004ff02:	b004      	add	sp, #16
1004ff04:	bdb0      	pop	{r4, r5, r7, pc}
1004ff06:	46c0      	nop			@ (mov r8, r8)
1004ff08:	20000f50 	.word	0x20000f50
1004ff0c:	00000635 	.word	0x00000635

1004ff10 <TIMER_SleepCheck>:
  * @brief  Return the consensus of the Virtual timer management to go in sleep.
  * @retval TRUE if all vtimers have been served and the calibration procedure has already finished.
  * @retval FALSE if the vtimer Tick is still busy.
  */
static bool TIMER_SleepCheck(void)
{
1004ff10:	b580      	push	{r7, lr}
1004ff12:	af00      	add	r7, sp, #0
  return ((RADIO_TIMER_Context.expired_count == RADIO_TIMER_Context.served_count) && (RADIO_TIMER_Context.calibrationSettings.calibration_in_progress == FALSE));
1004ff14:	4b0c      	ldr	r3, [pc, #48]	@ (1004ff48 <TIMER_SleepCheck+0x38>)
1004ff16:	2291      	movs	r2, #145	@ 0x91
1004ff18:	5c9a      	ldrb	r2, [r3, r2]
1004ff1a:	4b0b      	ldr	r3, [pc, #44]	@ (1004ff48 <TIMER_SleepCheck+0x38>)
1004ff1c:	2192      	movs	r1, #146	@ 0x92
1004ff1e:	5c5b      	ldrb	r3, [r3, r1]
1004ff20:	429a      	cmp	r2, r3
1004ff22:	d108      	bne.n	1004ff36 <TIMER_SleepCheck+0x26>
1004ff24:	4b08      	ldr	r3, [pc, #32]	@ (1004ff48 <TIMER_SleepCheck+0x38>)
1004ff26:	7a1b      	ldrb	r3, [r3, #8]
1004ff28:	2201      	movs	r2, #1
1004ff2a:	4053      	eors	r3, r2
1004ff2c:	b2db      	uxtb	r3, r3
1004ff2e:	2b00      	cmp	r3, #0
1004ff30:	d001      	beq.n	1004ff36 <TIMER_SleepCheck+0x26>
1004ff32:	2301      	movs	r3, #1
1004ff34:	e000      	b.n	1004ff38 <TIMER_SleepCheck+0x28>
1004ff36:	2300      	movs	r3, #0
1004ff38:	1c1a      	adds	r2, r3, #0
1004ff3a:	2301      	movs	r3, #1
1004ff3c:	4013      	ands	r3, r2
1004ff3e:	b2db      	uxtb	r3, r3
}
1004ff40:	0018      	movs	r0, r3
1004ff42:	46bd      	mov	sp, r7
1004ff44:	bd80      	pop	{r7, pc}
1004ff46:	46c0      	nop			@ (mov r8, r8)
1004ff48:	20000f50 	.word	0x20000f50

1004ff4c <TIMER_GetRadioTimerValue>:
  * @retval 1 if Timer1 has been programmed.
  * @retval 2 if Timer2 has been programmed.
  * @retval 3 if Wakeup Timer has been programmed.
  */
static uint8_t TIMER_GetRadioTimerValue(uint32_t *time)
{
1004ff4c:	b580      	push	{r7, lr}
1004ff4e:	b082      	sub	sp, #8
1004ff50:	af00      	add	r7, sp, #0
1004ff52:	6078      	str	r0, [r7, #4]
  if (LL_RADIO_TIMER_IsEnabledBLEWakeupTimer(WAKEUP))
1004ff54:	4b1a      	ldr	r3, [pc, #104]	@ (1004ffc0 <TIMER_GetRadioTimerValue+0x74>)
1004ff56:	0018      	movs	r0, r3
1004ff58:	f7fe fba6 	bl	1004e6a8 <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer>
1004ff5c:	1e03      	subs	r3, r0, #0
1004ff5e:	d008      	beq.n	1004ff72 <TIMER_GetRadioTimerValue+0x26>
  {
    *time = LL_RADIO_TIMER_GetBLEWakeupTime(WAKEUP);
1004ff60:	4b17      	ldr	r3, [pc, #92]	@ (1004ffc0 <TIMER_GetRadioTimerValue+0x74>)
1004ff62:	0018      	movs	r0, r3
1004ff64:	f7fe fbef 	bl	1004e746 <LL_RADIO_TIMER_GetBLEWakeupTime>
1004ff68:	0002      	movs	r2, r0
1004ff6a:	687b      	ldr	r3, [r7, #4]
1004ff6c:	601a      	str	r2, [r3, #0]
    return WAKEUP_RADIO_TIMER_BUSY;
1004ff6e:	2303      	movs	r3, #3
1004ff70:	e022      	b.n	1004ffb8 <TIMER_GetRadioTimerValue+0x6c>
  }
  else if (LL_RADIO_TIMER_IsEnabledTimer1(BLUE))
1004ff72:	23c0      	movs	r3, #192	@ 0xc0
1004ff74:	05db      	lsls	r3, r3, #23
1004ff76:	0018      	movs	r0, r3
1004ff78:	f7fe fb2f 	bl	1004e5da <LL_RADIO_TIMER_IsEnabledTimer1>
1004ff7c:	1e03      	subs	r3, r0, #0
1004ff7e:	d009      	beq.n	1004ff94 <TIMER_GetRadioTimerValue+0x48>
  {
    *time = LL_RADIO_TIMER_GetTimeout(BLUE);
1004ff80:	23c0      	movs	r3, #192	@ 0xc0
1004ff82:	05db      	lsls	r3, r3, #23
1004ff84:	0018      	movs	r0, r3
1004ff86:	f7fe fb65 	bl	1004e654 <LL_RADIO_TIMER_GetTimeout>
1004ff8a:	0002      	movs	r2, r0
1004ff8c:	687b      	ldr	r3, [r7, #4]
1004ff8e:	601a      	str	r2, [r3, #0]
    return RADIO_TIMER1_BUSY;
1004ff90:	2301      	movs	r3, #1
1004ff92:	e011      	b.n	1004ffb8 <TIMER_GetRadioTimerValue+0x6c>
  }
  else if (LL_RADIO_TIMER_IsEnabledTimer2(BLUE))
1004ff94:	23c0      	movs	r3, #192	@ 0xc0
1004ff96:	05db      	lsls	r3, r3, #23
1004ff98:	0018      	movs	r0, r3
1004ff9a:	f7fe fb3e 	bl	1004e61a <LL_RADIO_TIMER_IsEnabledTimer2>
1004ff9e:	1e03      	subs	r3, r0, #0
1004ffa0:	d009      	beq.n	1004ffb6 <TIMER_GetRadioTimerValue+0x6a>
  {
    *time = LL_RADIO_TIMER_GetTimeout(BLUE);
1004ffa2:	23c0      	movs	r3, #192	@ 0xc0
1004ffa4:	05db      	lsls	r3, r3, #23
1004ffa6:	0018      	movs	r0, r3
1004ffa8:	f7fe fb54 	bl	1004e654 <LL_RADIO_TIMER_GetTimeout>
1004ffac:	0002      	movs	r2, r0
1004ffae:	687b      	ldr	r3, [r7, #4]
1004ffb0:	601a      	str	r2, [r3, #0]
    return RADIO_TIMER2_BUSY;
1004ffb2:	2302      	movs	r3, #2
1004ffb4:	e000      	b.n	1004ffb8 <TIMER_GetRadioTimerValue+0x6c>
  }
  else
  {
    return 0;
1004ffb6:	2300      	movs	r3, #0
  }
}
1004ffb8:	0018      	movs	r0, r3
1004ffba:	46bd      	mov	sp, r7
1004ffbc:	b002      	add	sp, #8
1004ffbe:	bd80      	pop	{r7, pc}
1004ffc0:	60001800 	.word	0x60001800

1004ffc4 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>:
__weak void HAL_RADIO_TIMER_TxRxWakeUpCallback(void)
{
}

void HAL_RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
1004ffc4:	b580      	push	{r7, lr}
1004ffc6:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_TimeoutCallback();
1004ffc8:	f7ff f964 	bl	1004f294 <HAL_RADIO_TIMER_TimeoutCallback>

  HAL_RADIO_TIMER_CpuWakeUpCallback();
1004ffcc:	f7f3 fd8e 	bl	10043aec <HAL_RADIO_TIMER_CpuWakeUpCallback>
}
1004ffd0:	46c0      	nop			@ (mov r8, r8)
1004ffd2:	46bd      	mov	sp, r7
1004ffd4:	bd80      	pop	{r7, pc}

1004ffd6 <HAL_RADIO_TIMER_ERROR_IRQHandler>:
  HAL_RADIO_TIMER_WakeUpCallback();
#endif
}

void HAL_RADIO_TIMER_ERROR_IRQHandler(void)
{
1004ffd6:	b580      	push	{r7, lr}
1004ffd8:	b082      	sub	sp, #8
1004ffda:	af00      	add	r7, sp, #0
  volatile uint32_t debug_cmd = 0;
1004ffdc:	2300      	movs	r3, #0
1004ffde:	607b      	str	r3, [r7, #4]
  UNUSED(debug_cmd);
1004ffe0:	687b      	ldr	r3, [r7, #4]
  BLUE->DEBUGCMDREG |= 1;
1004ffe2:	23c0      	movs	r3, #192	@ 0xc0
1004ffe4:	05db      	lsls	r3, r3, #23
1004ffe6:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
1004ffe8:	23c0      	movs	r3, #192	@ 0xc0
1004ffea:	05db      	lsls	r3, r3, #23
1004ffec:	2101      	movs	r1, #1
1004ffee:	430a      	orrs	r2, r1
1004fff0:	675a      	str	r2, [r3, #116]	@ 0x74
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  debug_cmd = BLUE->DEBUGCMDREG;
1004fff2:	23c0      	movs	r3, #192	@ 0xc0
1004fff4:	05db      	lsls	r3, r3, #23
1004fff6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004fff8:	607b      	str	r3, [r7, #4]
}
1004fffa:	46c0      	nop			@ (mov r8, r8)
1004fffc:	46bd      	mov	sp, r7
1004fffe:	b002      	add	sp, #8
10050000:	bd80      	pop	{r7, pc}
	...

10050004 <LL_PWR_SetNoPullB>:
{
10050004:	b580      	push	{r7, lr}
10050006:	b082      	sub	sp, #8
10050008:	af00      	add	r7, sp, #0
1005000a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
1005000c:	4b08      	ldr	r3, [pc, #32]	@ (10050030 <LL_PWR_SetNoPullB+0x2c>)
1005000e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10050010:	687b      	ldr	r3, [r7, #4]
10050012:	43d9      	mvns	r1, r3
10050014:	4b06      	ldr	r3, [pc, #24]	@ (10050030 <LL_PWR_SetNoPullB+0x2c>)
10050016:	400a      	ands	r2, r1
10050018:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
1005001a:	4b05      	ldr	r3, [pc, #20]	@ (10050030 <LL_PWR_SetNoPullB+0x2c>)
1005001c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1005001e:	687b      	ldr	r3, [r7, #4]
10050020:	43d9      	mvns	r1, r3
10050022:	4b03      	ldr	r3, [pc, #12]	@ (10050030 <LL_PWR_SetNoPullB+0x2c>)
10050024:	400a      	ands	r2, r1
10050026:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10050028:	46c0      	nop			@ (mov r8, r8)
1005002a:	46bd      	mov	sp, r7
1005002c:	b002      	add	sp, #8
1005002e:	bd80      	pop	{r7, pc}
10050030:	48500000 	.word	0x48500000

10050034 <LL_RCC_HSE_Enable>:
{
10050034:	b580      	push	{r7, lr}
10050036:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
10050038:	4b04      	ldr	r3, [pc, #16]	@ (1005004c <LL_RCC_HSE_Enable+0x18>)
1005003a:	681a      	ldr	r2, [r3, #0]
1005003c:	4b03      	ldr	r3, [pc, #12]	@ (1005004c <LL_RCC_HSE_Enable+0x18>)
1005003e:	2180      	movs	r1, #128	@ 0x80
10050040:	0249      	lsls	r1, r1, #9
10050042:	430a      	orrs	r2, r1
10050044:	601a      	str	r2, [r3, #0]
}
10050046:	46c0      	nop			@ (mov r8, r8)
10050048:	46bd      	mov	sp, r7
1005004a:	bd80      	pop	{r7, pc}
1005004c:	48400000 	.word	0x48400000

10050050 <LL_RCC_HSE_Disable>:
{
10050050:	b580      	push	{r7, lr}
10050052:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
10050054:	4b04      	ldr	r3, [pc, #16]	@ (10050068 <LL_RCC_HSE_Disable+0x18>)
10050056:	681a      	ldr	r2, [r3, #0]
10050058:	4b03      	ldr	r3, [pc, #12]	@ (10050068 <LL_RCC_HSE_Disable+0x18>)
1005005a:	4904      	ldr	r1, [pc, #16]	@ (1005006c <LL_RCC_HSE_Disable+0x1c>)
1005005c:	400a      	ands	r2, r1
1005005e:	601a      	str	r2, [r3, #0]
}
10050060:	46c0      	nop			@ (mov r8, r8)
10050062:	46bd      	mov	sp, r7
10050064:	bd80      	pop	{r7, pc}
10050066:	46c0      	nop			@ (mov r8, r8)
10050068:	48400000 	.word	0x48400000
1005006c:	fffeffff 	.word	0xfffeffff

10050070 <LL_RCC_HSE_IsReady>:
{
10050070:	b580      	push	{r7, lr}
10050072:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10050074:	4b07      	ldr	r3, [pc, #28]	@ (10050094 <LL_RCC_HSE_IsReady+0x24>)
10050076:	681a      	ldr	r2, [r3, #0]
10050078:	2380      	movs	r3, #128	@ 0x80
1005007a:	029b      	lsls	r3, r3, #10
1005007c:	401a      	ands	r2, r3
1005007e:	2380      	movs	r3, #128	@ 0x80
10050080:	029b      	lsls	r3, r3, #10
10050082:	429a      	cmp	r2, r3
10050084:	d101      	bne.n	1005008a <LL_RCC_HSE_IsReady+0x1a>
10050086:	2301      	movs	r3, #1
10050088:	e000      	b.n	1005008c <LL_RCC_HSE_IsReady+0x1c>
1005008a:	2300      	movs	r3, #0
}
1005008c:	0018      	movs	r0, r3
1005008e:	46bd      	mov	sp, r7
10050090:	bd80      	pop	{r7, pc}
10050092:	46c0      	nop			@ (mov r8, r8)
10050094:	48400000 	.word	0x48400000

10050098 <LL_RCC_HSE_SetCapacitorTuning>:
{
10050098:	b580      	push	{r7, lr}
1005009a:	b082      	sub	sp, #8
1005009c:	af00      	add	r7, sp, #0
1005009e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNE, Value << RCC_RFSWHSECR_SWXOTUNE_Pos);
100500a0:	4a0b      	ldr	r2, [pc, #44]	@ (100500d0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
100500a2:	2398      	movs	r3, #152	@ 0x98
100500a4:	58d3      	ldr	r3, [r2, r3]
100500a6:	4a0b      	ldr	r2, [pc, #44]	@ (100500d4 <LL_RCC_HSE_SetCapacitorTuning+0x3c>)
100500a8:	401a      	ands	r2, r3
100500aa:	687b      	ldr	r3, [r7, #4]
100500ac:	021b      	lsls	r3, r3, #8
100500ae:	4908      	ldr	r1, [pc, #32]	@ (100500d0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
100500b0:	4313      	orrs	r3, r2
100500b2:	2298      	movs	r2, #152	@ 0x98
100500b4:	508b      	str	r3, [r1, r2]
  SET_BIT(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNEEN);
100500b6:	4a06      	ldr	r2, [pc, #24]	@ (100500d0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
100500b8:	2398      	movs	r3, #152	@ 0x98
100500ba:	58d3      	ldr	r3, [r2, r3]
100500bc:	4904      	ldr	r1, [pc, #16]	@ (100500d0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
100500be:	2280      	movs	r2, #128	@ 0x80
100500c0:	4313      	orrs	r3, r2
100500c2:	2298      	movs	r2, #152	@ 0x98
100500c4:	508b      	str	r3, [r1, r2]
}
100500c6:	46c0      	nop			@ (mov r8, r8)
100500c8:	46bd      	mov	sp, r7
100500ca:	b002      	add	sp, #8
100500cc:	bd80      	pop	{r7, pc}
100500ce:	46c0      	nop			@ (mov r8, r8)
100500d0:	48400000 	.word	0x48400000
100500d4:	ffffc0ff 	.word	0xffffc0ff

100500d8 <LL_RCC_HSE_SetCurrentControl>:
{
100500d8:	b580      	push	{r7, lr}
100500da:	b082      	sub	sp, #8
100500dc:	af00      	add	r7, sp, #0
100500de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_GMC, CurrentMax);
100500e0:	4a07      	ldr	r2, [pc, #28]	@ (10050100 <LL_RCC_HSE_SetCurrentControl+0x28>)
100500e2:	2398      	movs	r3, #152	@ 0x98
100500e4:	58d3      	ldr	r3, [r2, r3]
100500e6:	2270      	movs	r2, #112	@ 0x70
100500e8:	4393      	bics	r3, r2
100500ea:	001a      	movs	r2, r3
100500ec:	4904      	ldr	r1, [pc, #16]	@ (10050100 <LL_RCC_HSE_SetCurrentControl+0x28>)
100500ee:	687b      	ldr	r3, [r7, #4]
100500f0:	4313      	orrs	r3, r2
100500f2:	2298      	movs	r2, #152	@ 0x98
100500f4:	508b      	str	r3, [r1, r2]
}
100500f6:	46c0      	nop			@ (mov r8, r8)
100500f8:	46bd      	mov	sp, r7
100500fa:	b002      	add	sp, #8
100500fc:	bd80      	pop	{r7, pc}
100500fe:	46c0      	nop			@ (mov r8, r8)
10050100:	48400000 	.word	0x48400000

10050104 <LL_RCC_HSI_Enable>:
{
10050104:	b580      	push	{r7, lr}
10050106:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10050108:	4b07      	ldr	r3, [pc, #28]	@ (10050128 <LL_RCC_HSI_Enable+0x24>)
1005010a:	689a      	ldr	r2, [r3, #8]
1005010c:	4b06      	ldr	r3, [pc, #24]	@ (10050128 <LL_RCC_HSI_Enable+0x24>)
1005010e:	2104      	movs	r1, #4
10050110:	438a      	bics	r2, r1
10050112:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10050114:	4b04      	ldr	r3, [pc, #16]	@ (10050128 <LL_RCC_HSI_Enable+0x24>)
10050116:	689a      	ldr	r2, [r3, #8]
10050118:	4b03      	ldr	r3, [pc, #12]	@ (10050128 <LL_RCC_HSI_Enable+0x24>)
1005011a:	2102      	movs	r1, #2
1005011c:	438a      	bics	r2, r1
1005011e:	609a      	str	r2, [r3, #8]
}
10050120:	46c0      	nop			@ (mov r8, r8)
10050122:	46bd      	mov	sp, r7
10050124:	bd80      	pop	{r7, pc}
10050126:	46c0      	nop			@ (mov r8, r8)
10050128:	48400000 	.word	0x48400000

1005012c <LL_RCC_HSI_Disable>:
{
1005012c:	b580      	push	{r7, lr}
1005012e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10050130:	4b07      	ldr	r3, [pc, #28]	@ (10050150 <LL_RCC_HSI_Disable+0x24>)
10050132:	689a      	ldr	r2, [r3, #8]
10050134:	4b06      	ldr	r3, [pc, #24]	@ (10050150 <LL_RCC_HSI_Disable+0x24>)
10050136:	2102      	movs	r1, #2
10050138:	430a      	orrs	r2, r1
1005013a:	609a      	str	r2, [r3, #8]
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1005013c:	4b04      	ldr	r3, [pc, #16]	@ (10050150 <LL_RCC_HSI_Disable+0x24>)
1005013e:	689a      	ldr	r2, [r3, #8]
10050140:	4b03      	ldr	r3, [pc, #12]	@ (10050150 <LL_RCC_HSI_Disable+0x24>)
10050142:	2104      	movs	r1, #4
10050144:	430a      	orrs	r2, r1
10050146:	609a      	str	r2, [r3, #8]
}
10050148:	46c0      	nop			@ (mov r8, r8)
1005014a:	46bd      	mov	sp, r7
1005014c:	bd80      	pop	{r7, pc}
1005014e:	46c0      	nop			@ (mov r8, r8)
10050150:	48400000 	.word	0x48400000

10050154 <LL_RCC_HSI_IsReady>:
{
10050154:	b580      	push	{r7, lr}
10050156:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
10050158:	4b07      	ldr	r3, [pc, #28]	@ (10050178 <LL_RCC_HSI_IsReady+0x24>)
1005015a:	681a      	ldr	r2, [r3, #0]
1005015c:	2380      	movs	r3, #128	@ 0x80
1005015e:	00db      	lsls	r3, r3, #3
10050160:	401a      	ands	r2, r3
10050162:	2380      	movs	r3, #128	@ 0x80
10050164:	00db      	lsls	r3, r3, #3
10050166:	429a      	cmp	r2, r3
10050168:	d101      	bne.n	1005016e <LL_RCC_HSI_IsReady+0x1a>
1005016a:	2301      	movs	r3, #1
1005016c:	e000      	b.n	10050170 <LL_RCC_HSI_IsReady+0x1c>
1005016e:	2300      	movs	r3, #0
}
10050170:	0018      	movs	r0, r3
10050172:	46bd      	mov	sp, r7
10050174:	bd80      	pop	{r7, pc}
10050176:	46c0      	nop			@ (mov r8, r8)
10050178:	48400000 	.word	0x48400000

1005017c <LL_RCC_DIRECT_HSE_Enable>:
{
1005017c:	b580      	push	{r7, lr}
1005017e:	b082      	sub	sp, #8
10050180:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
10050182:	46c0      	nop			@ (mov r8, r8)
10050184:	4b0f      	ldr	r3, [pc, #60]	@ (100501c4 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10050186:	681a      	ldr	r2, [r3, #0]
10050188:	2380      	movs	r3, #128	@ 0x80
1005018a:	029b      	lsls	r3, r3, #10
1005018c:	4013      	ands	r3, r2
1005018e:	d0f9      	beq.n	10050184 <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10050190:	4b0c      	ldr	r3, [pc, #48]	@ (100501c4 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10050192:	689a      	ldr	r2, [r3, #8]
10050194:	4b0b      	ldr	r3, [pc, #44]	@ (100501c4 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10050196:	2102      	movs	r1, #2
10050198:	430a      	orrs	r2, r1
1005019a:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
1005019c:	2300      	movs	r3, #0
1005019e:	607b      	str	r3, [r7, #4]
100501a0:	e003      	b.n	100501aa <LL_RCC_DIRECT_HSE_Enable+0x2e>
    __asm("NOP");
100501a2:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
100501a4:	687b      	ldr	r3, [r7, #4]
100501a6:	3301      	adds	r3, #1
100501a8:	607b      	str	r3, [r7, #4]
100501aa:	687b      	ldr	r3, [r7, #4]
100501ac:	2b05      	cmp	r3, #5
100501ae:	ddf8      	ble.n	100501a2 <LL_RCC_DIRECT_HSE_Enable+0x26>
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
100501b0:	4b04      	ldr	r3, [pc, #16]	@ (100501c4 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100501b2:	689a      	ldr	r2, [r3, #8]
100501b4:	4b03      	ldr	r3, [pc, #12]	@ (100501c4 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100501b6:	2104      	movs	r1, #4
100501b8:	430a      	orrs	r2, r1
100501ba:	609a      	str	r2, [r3, #8]
}
100501bc:	46c0      	nop			@ (mov r8, r8)
100501be:	46bd      	mov	sp, r7
100501c0:	b002      	add	sp, #8
100501c2:	bd80      	pop	{r7, pc}
100501c4:	48400000 	.word	0x48400000

100501c8 <LL_RCC_LSCO_SetSource>:
{
100501c8:	b580      	push	{r7, lr}
100501ca:	b082      	sub	sp, #8
100501cc:	af00      	add	r7, sp, #0
100501ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
100501d0:	4b06      	ldr	r3, [pc, #24]	@ (100501ec <LL_RCC_LSCO_SetSource+0x24>)
100501d2:	689b      	ldr	r3, [r3, #8]
100501d4:	4a06      	ldr	r2, [pc, #24]	@ (100501f0 <LL_RCC_LSCO_SetSource+0x28>)
100501d6:	4013      	ands	r3, r2
100501d8:	0019      	movs	r1, r3
100501da:	4b04      	ldr	r3, [pc, #16]	@ (100501ec <LL_RCC_LSCO_SetSource+0x24>)
100501dc:	687a      	ldr	r2, [r7, #4]
100501de:	430a      	orrs	r2, r1
100501e0:	609a      	str	r2, [r3, #8]
}
100501e2:	46c0      	nop			@ (mov r8, r8)
100501e4:	46bd      	mov	sp, r7
100501e6:	b002      	add	sp, #8
100501e8:	bd80      	pop	{r7, pc}
100501ea:	46c0      	nop			@ (mov r8, r8)
100501ec:	48400000 	.word	0x48400000
100501f0:	fffe7fff 	.word	0xfffe7fff

100501f4 <LL_RCC_LSE_Enable>:
{
100501f4:	b580      	push	{r7, lr}
100501f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEON);
100501f8:	4b04      	ldr	r3, [pc, #16]	@ (1005020c <LL_RCC_LSE_Enable+0x18>)
100501fa:	681a      	ldr	r2, [r3, #0]
100501fc:	4b03      	ldr	r3, [pc, #12]	@ (1005020c <LL_RCC_LSE_Enable+0x18>)
100501fe:	2110      	movs	r1, #16
10050200:	430a      	orrs	r2, r1
10050202:	601a      	str	r2, [r3, #0]
}
10050204:	46c0      	nop			@ (mov r8, r8)
10050206:	46bd      	mov	sp, r7
10050208:	bd80      	pop	{r7, pc}
1005020a:	46c0      	nop			@ (mov r8, r8)
1005020c:	48400000 	.word	0x48400000

10050210 <LL_RCC_LSE_Disable>:
{
10050210:	b580      	push	{r7, lr}
10050212:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEON);
10050214:	4b04      	ldr	r3, [pc, #16]	@ (10050228 <LL_RCC_LSE_Disable+0x18>)
10050216:	681a      	ldr	r2, [r3, #0]
10050218:	4b03      	ldr	r3, [pc, #12]	@ (10050228 <LL_RCC_LSE_Disable+0x18>)
1005021a:	2110      	movs	r1, #16
1005021c:	438a      	bics	r2, r1
1005021e:	601a      	str	r2, [r3, #0]
}
10050220:	46c0      	nop			@ (mov r8, r8)
10050222:	46bd      	mov	sp, r7
10050224:	bd80      	pop	{r7, pc}
10050226:	46c0      	nop			@ (mov r8, r8)
10050228:	48400000 	.word	0x48400000

1005022c <LL_RCC_LSE_IsReady>:
{
1005022c:	b580      	push	{r7, lr}
1005022e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
10050230:	4b05      	ldr	r3, [pc, #20]	@ (10050248 <LL_RCC_LSE_IsReady+0x1c>)
10050232:	681b      	ldr	r3, [r3, #0]
10050234:	2220      	movs	r2, #32
10050236:	4013      	ands	r3, r2
10050238:	2b20      	cmp	r3, #32
1005023a:	d101      	bne.n	10050240 <LL_RCC_LSE_IsReady+0x14>
1005023c:	2301      	movs	r3, #1
1005023e:	e000      	b.n	10050242 <LL_RCC_LSE_IsReady+0x16>
10050240:	2300      	movs	r3, #0
}
10050242:	0018      	movs	r0, r3
10050244:	46bd      	mov	sp, r7
10050246:	bd80      	pop	{r7, pc}
10050248:	48400000 	.word	0x48400000

1005024c <LL_RCC_LSE_EnableBypass>:
{
1005024c:	b580      	push	{r7, lr}
1005024e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEBYP);
10050250:	4b04      	ldr	r3, [pc, #16]	@ (10050264 <LL_RCC_LSE_EnableBypass+0x18>)
10050252:	681a      	ldr	r2, [r3, #0]
10050254:	4b03      	ldr	r3, [pc, #12]	@ (10050264 <LL_RCC_LSE_EnableBypass+0x18>)
10050256:	2140      	movs	r1, #64	@ 0x40
10050258:	430a      	orrs	r2, r1
1005025a:	601a      	str	r2, [r3, #0]
}
1005025c:	46c0      	nop			@ (mov r8, r8)
1005025e:	46bd      	mov	sp, r7
10050260:	bd80      	pop	{r7, pc}
10050262:	46c0      	nop			@ (mov r8, r8)
10050264:	48400000 	.word	0x48400000

10050268 <LL_RCC_LSE_DisableBypass>:
{
10050268:	b580      	push	{r7, lr}
1005026a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEBYP);
1005026c:	4b04      	ldr	r3, [pc, #16]	@ (10050280 <LL_RCC_LSE_DisableBypass+0x18>)
1005026e:	681a      	ldr	r2, [r3, #0]
10050270:	4b03      	ldr	r3, [pc, #12]	@ (10050280 <LL_RCC_LSE_DisableBypass+0x18>)
10050272:	2140      	movs	r1, #64	@ 0x40
10050274:	438a      	bics	r2, r1
10050276:	601a      	str	r2, [r3, #0]
}
10050278:	46c0      	nop			@ (mov r8, r8)
1005027a:	46bd      	mov	sp, r7
1005027c:	bd80      	pop	{r7, pc}
1005027e:	46c0      	nop			@ (mov r8, r8)
10050280:	48400000 	.word	0x48400000

10050284 <LL_RCC_LSE_IsBypassEnabled>:
{
10050284:	b580      	push	{r7, lr}
10050286:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSEBYP) == (RCC_CR_LSEBYP)) ? 1UL : 0UL);
10050288:	4b05      	ldr	r3, [pc, #20]	@ (100502a0 <LL_RCC_LSE_IsBypassEnabled+0x1c>)
1005028a:	681b      	ldr	r3, [r3, #0]
1005028c:	2240      	movs	r2, #64	@ 0x40
1005028e:	4013      	ands	r3, r2
10050290:	2b40      	cmp	r3, #64	@ 0x40
10050292:	d101      	bne.n	10050298 <LL_RCC_LSE_IsBypassEnabled+0x14>
10050294:	2301      	movs	r3, #1
10050296:	e000      	b.n	1005029a <LL_RCC_LSE_IsBypassEnabled+0x16>
10050298:	2300      	movs	r3, #0
}
1005029a:	0018      	movs	r0, r3
1005029c:	46bd      	mov	sp, r7
1005029e:	bd80      	pop	{r7, pc}
100502a0:	48400000 	.word	0x48400000

100502a4 <LL_RCC_LSE_SetDriveCapability>:
{
100502a4:	b580      	push	{r7, lr}
100502a6:	b082      	sub	sp, #8
100502a8:	af00      	add	r7, sp, #0
100502aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSEDRV, LSEDrive);
100502ac:	4b06      	ldr	r3, [pc, #24]	@ (100502c8 <LL_RCC_LSE_SetDriveCapability+0x24>)
100502ae:	68db      	ldr	r3, [r3, #12]
100502b0:	2260      	movs	r2, #96	@ 0x60
100502b2:	4393      	bics	r3, r2
100502b4:	0019      	movs	r1, r3
100502b6:	4b04      	ldr	r3, [pc, #16]	@ (100502c8 <LL_RCC_LSE_SetDriveCapability+0x24>)
100502b8:	687a      	ldr	r2, [r7, #4]
100502ba:	430a      	orrs	r2, r1
100502bc:	60da      	str	r2, [r3, #12]
}
100502be:	46c0      	nop			@ (mov r8, r8)
100502c0:	46bd      	mov	sp, r7
100502c2:	b002      	add	sp, #8
100502c4:	bd80      	pop	{r7, pc}
100502c6:	46c0      	nop			@ (mov r8, r8)
100502c8:	48400000 	.word	0x48400000

100502cc <LL_RCC_LSI_Enable>:
{
100502cc:	b580      	push	{r7, lr}
100502ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSION);
100502d0:	4b04      	ldr	r3, [pc, #16]	@ (100502e4 <LL_RCC_LSI_Enable+0x18>)
100502d2:	681a      	ldr	r2, [r3, #0]
100502d4:	4b03      	ldr	r3, [pc, #12]	@ (100502e4 <LL_RCC_LSI_Enable+0x18>)
100502d6:	2104      	movs	r1, #4
100502d8:	430a      	orrs	r2, r1
100502da:	601a      	str	r2, [r3, #0]
}
100502dc:	46c0      	nop			@ (mov r8, r8)
100502de:	46bd      	mov	sp, r7
100502e0:	bd80      	pop	{r7, pc}
100502e2:	46c0      	nop			@ (mov r8, r8)
100502e4:	48400000 	.word	0x48400000

100502e8 <LL_RCC_LSI_Disable>:
{
100502e8:	b580      	push	{r7, lr}
100502ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSION);
100502ec:	4b04      	ldr	r3, [pc, #16]	@ (10050300 <LL_RCC_LSI_Disable+0x18>)
100502ee:	681a      	ldr	r2, [r3, #0]
100502f0:	4b03      	ldr	r3, [pc, #12]	@ (10050300 <LL_RCC_LSI_Disable+0x18>)
100502f2:	2104      	movs	r1, #4
100502f4:	438a      	bics	r2, r1
100502f6:	601a      	str	r2, [r3, #0]
}
100502f8:	46c0      	nop			@ (mov r8, r8)
100502fa:	46bd      	mov	sp, r7
100502fc:	bd80      	pop	{r7, pc}
100502fe:	46c0      	nop			@ (mov r8, r8)
10050300:	48400000 	.word	0x48400000

10050304 <LL_RCC_LSI_IsReady>:
{
10050304:	b580      	push	{r7, lr}
10050306:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
10050308:	4b05      	ldr	r3, [pc, #20]	@ (10050320 <LL_RCC_LSI_IsReady+0x1c>)
1005030a:	681b      	ldr	r3, [r3, #0]
1005030c:	2208      	movs	r2, #8
1005030e:	4013      	ands	r3, r2
10050310:	2b08      	cmp	r3, #8
10050312:	d101      	bne.n	10050318 <LL_RCC_LSI_IsReady+0x14>
10050314:	2301      	movs	r3, #1
10050316:	e000      	b.n	1005031a <LL_RCC_LSI_IsReady+0x16>
10050318:	2300      	movs	r3, #0
}
1005031a:	0018      	movs	r0, r3
1005031c:	46bd      	mov	sp, r7
1005031e:	bd80      	pop	{r7, pc}
10050320:	48400000 	.word	0x48400000

10050324 <LL_RCC_RC64MPLL_Enable>:
{
10050324:	b580      	push	{r7, lr}
10050326:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIPLLON);
10050328:	4b04      	ldr	r3, [pc, #16]	@ (1005033c <LL_RCC_RC64MPLL_Enable+0x18>)
1005032a:	681a      	ldr	r2, [r3, #0]
1005032c:	4b03      	ldr	r3, [pc, #12]	@ (1005033c <LL_RCC_RC64MPLL_Enable+0x18>)
1005032e:	2180      	movs	r1, #128	@ 0x80
10050330:	0189      	lsls	r1, r1, #6
10050332:	430a      	orrs	r2, r1
10050334:	601a      	str	r2, [r3, #0]
}
10050336:	46c0      	nop			@ (mov r8, r8)
10050338:	46bd      	mov	sp, r7
1005033a:	bd80      	pop	{r7, pc}
1005033c:	48400000 	.word	0x48400000

10050340 <LL_RCC_RC64MPLL_Disable>:
{
10050340:	b580      	push	{r7, lr}
10050342:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
10050344:	4b04      	ldr	r3, [pc, #16]	@ (10050358 <LL_RCC_RC64MPLL_Disable+0x18>)
10050346:	681a      	ldr	r2, [r3, #0]
10050348:	4b03      	ldr	r3, [pc, #12]	@ (10050358 <LL_RCC_RC64MPLL_Disable+0x18>)
1005034a:	4904      	ldr	r1, [pc, #16]	@ (1005035c <LL_RCC_RC64MPLL_Disable+0x1c>)
1005034c:	400a      	ands	r2, r1
1005034e:	601a      	str	r2, [r3, #0]
}
10050350:	46c0      	nop			@ (mov r8, r8)
10050352:	46bd      	mov	sp, r7
10050354:	bd80      	pop	{r7, pc}
10050356:	46c0      	nop			@ (mov r8, r8)
10050358:	48400000 	.word	0x48400000
1005035c:	ffffdfff 	.word	0xffffdfff

10050360 <LL_RCC_RC64MPLL_IsReady>:
{
10050360:	b580      	push	{r7, lr}
10050362:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
10050364:	4b07      	ldr	r3, [pc, #28]	@ (10050384 <LL_RCC_RC64MPLL_IsReady+0x24>)
10050366:	681a      	ldr	r2, [r3, #0]
10050368:	2380      	movs	r3, #128	@ 0x80
1005036a:	01db      	lsls	r3, r3, #7
1005036c:	401a      	ands	r2, r3
1005036e:	2380      	movs	r3, #128	@ 0x80
10050370:	01db      	lsls	r3, r3, #7
10050372:	429a      	cmp	r2, r3
10050374:	d101      	bne.n	1005037a <LL_RCC_RC64MPLL_IsReady+0x1a>
10050376:	2301      	movs	r3, #1
10050378:	e000      	b.n	1005037c <LL_RCC_RC64MPLL_IsReady+0x1c>
1005037a:	2300      	movs	r3, #0
}
1005037c:	0018      	movs	r0, r3
1005037e:	46bd      	mov	sp, r7
10050380:	bd80      	pop	{r7, pc}
10050382:	46c0      	nop			@ (mov r8, r8)
10050384:	48400000 	.word	0x48400000

10050388 <LL_RCC_SetRC64MPLLPrescaler>:
{
10050388:	b580      	push	{r7, lr}
1005038a:	b082      	sub	sp, #8
1005038c:	af00      	add	r7, sp, #0
1005038e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
10050390:	4b06      	ldr	r3, [pc, #24]	@ (100503ac <LL_RCC_SetRC64MPLLPrescaler+0x24>)
10050392:	689b      	ldr	r3, [r3, #8]
10050394:	22e0      	movs	r2, #224	@ 0xe0
10050396:	4393      	bics	r3, r2
10050398:	0019      	movs	r1, r3
1005039a:	4b04      	ldr	r3, [pc, #16]	@ (100503ac <LL_RCC_SetRC64MPLLPrescaler+0x24>)
1005039c:	687a      	ldr	r2, [r7, #4]
1005039e:	430a      	orrs	r2, r1
100503a0:	609a      	str	r2, [r3, #8]
}
100503a2:	46c0      	nop			@ (mov r8, r8)
100503a4:	46bd      	mov	sp, r7
100503a6:	b002      	add	sp, #8
100503a8:	bd80      	pop	{r7, pc}
100503aa:	46c0      	nop			@ (mov r8, r8)
100503ac:	48400000 	.word	0x48400000

100503b0 <HAL_RCC_OscConfig>:
  * @param  RCC_OscInitStruct  pointer to a @ref RCC_OscInitTypeDef structure that
  *         contains the configuration information for the RCC Oscillators.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
100503b0:	b580      	push	{r7, lr}
100503b2:	b084      	sub	sp, #16
100503b4:	af00      	add	r7, sp, #0
100503b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
100503b8:	687b      	ldr	r3, [r7, #4]
100503ba:	2b00      	cmp	r3, #0
100503bc:	d101      	bne.n	100503c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
100503be:	2301      	movs	r3, #1
100503c0:	e13c      	b.n	1005063c <HAL_RCC_OscConfig+0x28c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSI Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
100503c2:	687b      	ldr	r3, [r7, #4]
100503c4:	681b      	ldr	r3, [r3, #0]
100503c6:	2210      	movs	r2, #16
100503c8:	4013      	ands	r3, r2
100503ca:	d033      	beq.n	10050434 <HAL_RCC_OscConfig+0x84>
  {
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
100503cc:	687b      	ldr	r3, [r7, #4]
100503ce:	689b      	ldr	r3, [r3, #8]
100503d0:	2b00      	cmp	r3, #0
100503d2:	d102      	bne.n	100503da <HAL_RCC_OscConfig+0x2a>
100503d4:	f7ff fe96 	bl	10050104 <LL_RCC_HSI_Enable>
100503d8:	e001      	b.n	100503de <HAL_RCC_OscConfig+0x2e>
100503da:	f7ff fea7 	bl	1005012c <LL_RCC_HSI_Disable>

    if(RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
100503de:	687b      	ldr	r3, [r7, #4]
100503e0:	689b      	ldr	r3, [r3, #8]
100503e2:	2b04      	cmp	r3, #4
100503e4:	d113      	bne.n	1005040e <HAL_RCC_OscConfig+0x5e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100503e6:	f7fc fbd3 	bl	1004cb90 <HAL_GetTick>
100503ea:	0003      	movs	r3, r0
100503ec:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is disabled */
      while (LL_RCC_HSI_IsReady() == 1U)
100503ee:	e008      	b.n	10050402 <HAL_RCC_OscConfig+0x52>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100503f0:	f7fc fbce 	bl	1004cb90 <HAL_GetTick>
100503f4:	0002      	movs	r2, r0
100503f6:	68fb      	ldr	r3, [r7, #12]
100503f8:	1ad3      	subs	r3, r2, r3
100503fa:	2b64      	cmp	r3, #100	@ 0x64
100503fc:	d901      	bls.n	10050402 <HAL_RCC_OscConfig+0x52>
        {
          return HAL_TIMEOUT;
100503fe:	2303      	movs	r3, #3
10050400:	e11c      	b.n	1005063c <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() == 1U)
10050402:	f7ff fea7 	bl	10050154 <LL_RCC_HSI_IsReady>
10050406:	0003      	movs	r3, r0
10050408:	2b01      	cmp	r3, #1
1005040a:	d0f1      	beq.n	100503f0 <HAL_RCC_OscConfig+0x40>
1005040c:	e012      	b.n	10050434 <HAL_RCC_OscConfig+0x84>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1005040e:	f7fc fbbf 	bl	1004cb90 <HAL_GetTick>
10050412:	0003      	movs	r3, r0
10050414:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is enabled */
      while (LL_RCC_HSI_IsReady() != 1U)
10050416:	e008      	b.n	1005042a <HAL_RCC_OscConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10050418:	f7fc fbba 	bl	1004cb90 <HAL_GetTick>
1005041c:	0002      	movs	r2, r0
1005041e:	68fb      	ldr	r3, [r7, #12]
10050420:	1ad3      	subs	r3, r2, r3
10050422:	2b64      	cmp	r3, #100	@ 0x64
10050424:	d901      	bls.n	1005042a <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
10050426:	2303      	movs	r3, #3
10050428:	e108      	b.n	1005063c <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() != 1U)
1005042a:	f7ff fe93 	bl	10050154 <LL_RCC_HSI_IsReady>
1005042e:	0003      	movs	r3, r0
10050430:	2b01      	cmp	r3, #1
10050432:	d1f1      	bne.n	10050418 <HAL_RCC_OscConfig+0x68>
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10050434:	687b      	ldr	r3, [r7, #4]
10050436:	681b      	ldr	r3, [r3, #0]
10050438:	2201      	movs	r2, #1
1005043a:	4013      	ands	r3, r2
1005043c:	d039      	beq.n	100504b2 <HAL_RCC_OscConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* Set HSE Capacitor Tuning */
    LL_RCC_HSE_SetCapacitorTuning(CFG_HW_RCC_HSE_CAPACITOR_TUNE);
1005043e:	2020      	movs	r0, #32
10050440:	f7ff fe2a 	bl	10050098 <LL_RCC_HSE_SetCapacitorTuning>

    /* Set HSE Current Control */
    LL_RCC_HSE_SetCurrentControl(LL_RCC_HSE_CURRENTMAX_3);
10050444:	2030      	movs	r0, #48	@ 0x30
10050446:	f7ff fe47 	bl	100500d8 <LL_RCC_HSE_SetCurrentControl>

    /* Set the new HSE configuration ---------------------------------------*/
    __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
1005044a:	687b      	ldr	r3, [r7, #4]
1005044c:	685a      	ldr	r2, [r3, #4]
1005044e:	2380      	movs	r3, #128	@ 0x80
10050450:	025b      	lsls	r3, r3, #9
10050452:	429a      	cmp	r2, r3
10050454:	d102      	bne.n	1005045c <HAL_RCC_OscConfig+0xac>
10050456:	f7ff fded 	bl	10050034 <LL_RCC_HSE_Enable>
1005045a:	e001      	b.n	10050460 <HAL_RCC_OscConfig+0xb0>
1005045c:	f7ff fdf8 	bl	10050050 <LL_RCC_HSE_Disable>

    /* Check the HSE State */
    if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
10050460:	687b      	ldr	r3, [r7, #4]
10050462:	685b      	ldr	r3, [r3, #4]
10050464:	2b00      	cmp	r3, #0
10050466:	d012      	beq.n	1005048e <HAL_RCC_OscConfig+0xde>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10050468:	f7fc fb92 	bl	1004cb90 <HAL_GetTick>
1005046c:	0003      	movs	r3, r0
1005046e:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is ready */
      while (LL_RCC_HSE_IsReady() == 0U)
10050470:	e008      	b.n	10050484 <HAL_RCC_OscConfig+0xd4>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10050472:	f7fc fb8d 	bl	1004cb90 <HAL_GetTick>
10050476:	0002      	movs	r2, r0
10050478:	68fb      	ldr	r3, [r7, #12]
1005047a:	1ad3      	subs	r3, r2, r3
1005047c:	2b64      	cmp	r3, #100	@ 0x64
1005047e:	d901      	bls.n	10050484 <HAL_RCC_OscConfig+0xd4>
        {
          return HAL_TIMEOUT;
10050480:	2303      	movs	r3, #3
10050482:	e0db      	b.n	1005063c <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() == 0U)
10050484:	f7ff fdf4 	bl	10050070 <LL_RCC_HSE_IsReady>
10050488:	1e03      	subs	r3, r0, #0
1005048a:	d0f2      	beq.n	10050472 <HAL_RCC_OscConfig+0xc2>
1005048c:	e011      	b.n	100504b2 <HAL_RCC_OscConfig+0x102>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1005048e:	f7fc fb7f 	bl	1004cb90 <HAL_GetTick>
10050492:	0003      	movs	r3, r0
10050494:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is disabled */
      while (LL_RCC_HSE_IsReady() != 0U)
10050496:	e008      	b.n	100504aa <HAL_RCC_OscConfig+0xfa>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10050498:	f7fc fb7a 	bl	1004cb90 <HAL_GetTick>
1005049c:	0002      	movs	r2, r0
1005049e:	68fb      	ldr	r3, [r7, #12]
100504a0:	1ad3      	subs	r3, r2, r3
100504a2:	2b64      	cmp	r3, #100	@ 0x64
100504a4:	d901      	bls.n	100504aa <HAL_RCC_OscConfig+0xfa>
        {
          return HAL_TIMEOUT;
100504a6:	2303      	movs	r3, #3
100504a8:	e0c8      	b.n	1005063c <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() != 0U)
100504aa:	f7ff fde1 	bl	10050070 <LL_RCC_HSE_IsReady>
100504ae:	1e03      	subs	r3, r0, #0
100504b0:	d1f2      	bne.n	10050498 <HAL_RCC_OscConfig+0xe8>
      }
    }
  }

  /*--------------------------------- LSI Configuration -----------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
100504b2:	687b      	ldr	r3, [r7, #4]
100504b4:	681b      	ldr	r3, [r3, #0]
100504b6:	2204      	movs	r2, #4
100504b8:	4013      	ands	r3, r2
100504ba:	d03a      	beq.n	10050532 <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
100504bc:	687b      	ldr	r3, [r7, #4]
100504be:	691b      	ldr	r3, [r3, #16]
100504c0:	2b00      	cmp	r3, #0
100504c2:	d022      	beq.n	1005050a <HAL_RCC_OscConfig+0x15a>
    {
      /* Disable the LSI */
      __HAL_RCC_LSI_DISABLE();
100504c4:	f7ff ff10 	bl	100502e8 <LL_RCC_LSI_Disable>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U);
100504c8:	46c0      	nop			@ (mov r8, r8)
100504ca:	f7ff ff1b 	bl	10050304 <LL_RCC_LSI_IsReady>
100504ce:	1e03      	subs	r3, r0, #0
100504d0:	d1fb      	bne.n	100504ca <HAL_RCC_OscConfig+0x11a>

      /* Disable the LSE */
      __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
100504d2:	f7ff fe9d 	bl	10050210 <LL_RCC_LSE_Disable>

      /* Configure the Low Speed Clock to LSI */
      LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSI);
100504d6:	2380      	movs	r3, #128	@ 0x80
100504d8:	025b      	lsls	r3, r3, #9
100504da:	0018      	movs	r0, r3
100504dc:	f7ff fe74 	bl	100501c8 <LL_RCC_LSCO_SetSource>

      /*  Enable the Internal Low Speed oscillator (LSI)  */
      __HAL_RCC_LSI_ENABLE();
100504e0:	f7ff fef4 	bl	100502cc <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100504e4:	f7fc fb54 	bl	1004cb90 <HAL_GetTick>
100504e8:	0003      	movs	r3, r0
100504ea:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
100504ec:	e008      	b.n	10050500 <HAL_RCC_OscConfig+0x150>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
100504ee:	f7fc fb4f 	bl	1004cb90 <HAL_GetTick>
100504f2:	0002      	movs	r2, r0
100504f4:	68fb      	ldr	r3, [r7, #12]
100504f6:	1ad3      	subs	r3, r2, r3
100504f8:	2b02      	cmp	r3, #2
100504fa:	d901      	bls.n	10050500 <HAL_RCC_OscConfig+0x150>
        {
          return HAL_TIMEOUT;
100504fc:	2303      	movs	r3, #3
100504fe:	e09d      	b.n	1005063c <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
10050500:	f7ff ff00 	bl	10050304 <LL_RCC_LSI_IsReady>
10050504:	1e03      	subs	r3, r0, #0
10050506:	d0f2      	beq.n	100504ee <HAL_RCC_OscConfig+0x13e>
10050508:	e013      	b.n	10050532 <HAL_RCC_OscConfig+0x182>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
1005050a:	f7ff feed 	bl	100502e8 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1005050e:	f7fc fb3f 	bl	1004cb90 <HAL_GetTick>
10050512:	0003      	movs	r3, r0
10050514:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
10050516:	e008      	b.n	1005052a <HAL_RCC_OscConfig+0x17a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10050518:	f7fc fb3a 	bl	1004cb90 <HAL_GetTick>
1005051c:	0002      	movs	r2, r0
1005051e:	68fb      	ldr	r3, [r7, #12]
10050520:	1ad3      	subs	r3, r2, r3
10050522:	2b02      	cmp	r3, #2
10050524:	d901      	bls.n	1005052a <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
10050526:	2303      	movs	r3, #3
10050528:	e088      	b.n	1005063c <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
1005052a:	f7ff feeb 	bl	10050304 <LL_RCC_LSI_IsReady>
1005052e:	1e03      	subs	r3, r0, #0
10050530:	d1f2      	bne.n	10050518 <HAL_RCC_OscConfig+0x168>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10050532:	687b      	ldr	r3, [r7, #4]
10050534:	681b      	ldr	r3, [r3, #0]
10050536:	2202      	movs	r2, #2
10050538:	4013      	ands	r3, r2
1005053a:	d047      	beq.n	100505cc <HAL_RCC_OscConfig+0x21c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Disable LSI */
    __HAL_RCC_LSI_DISABLE();
1005053c:	f7ff fed4 	bl	100502e8 <LL_RCC_LSI_Disable>

    /* Disable LSE */
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
10050540:	f7ff fe66 	bl	10050210 <LL_RCC_LSE_Disable>
    while (__HAL_RCC_GET_LSE_READYFLAG() != 0);
10050544:	46c0      	nop			@ (mov r8, r8)
10050546:	f7ff fe71 	bl	1005022c <LL_RCC_LSE_IsReady>
1005054a:	1e03      	subs	r3, r0, #0
1005054c:	d1fb      	bne.n	10050546 <HAL_RCC_OscConfig+0x196>

    /* Configure the PB12 and PB13 in NO PULL mode */
    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_12 |
1005054e:	23c0      	movs	r3, #192	@ 0xc0
10050550:	019b      	lsls	r3, r3, #6
10050552:	0018      	movs	r0, r3
10050554:	f7ff fd56 	bl	10050004 <LL_PWR_SetNoPullB>
                      LL_PWR_GPIO_BIT_13);

    /* Configure the Low Speed Clock to LSE */
    LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSE);
10050558:	2380      	movs	r3, #128	@ 0x80
1005055a:	021b      	lsls	r3, r3, #8
1005055c:	0018      	movs	r0, r3
1005055e:	f7ff fe33 	bl	100501c8 <LL_RCC_LSCO_SetSource>

    /* Set LSE oscillator drive capability */
    __HAL_RCC_LSEDRIVE_CONFIG(LSE_DRIVE_LEVEL);
10050562:	2020      	movs	r0, #32
10050564:	f7ff fe9e 	bl	100502a4 <LL_RCC_LSE_SetDriveCapability>


    /* Set the new LSE state */
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
10050568:	687b      	ldr	r3, [r7, #4]
1005056a:	68db      	ldr	r3, [r3, #12]
1005056c:	2b10      	cmp	r3, #16
1005056e:	d102      	bne.n	10050576 <HAL_RCC_OscConfig+0x1c6>
10050570:	f7ff fe40 	bl	100501f4 <LL_RCC_LSE_Enable>
10050574:	e001      	b.n	1005057a <HAL_RCC_OscConfig+0x1ca>
10050576:	f7ff fe4b 	bl	10050210 <LL_RCC_LSE_Disable>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
1005057a:	687b      	ldr	r3, [r7, #4]
1005057c:	68db      	ldr	r3, [r3, #12]
1005057e:	2b00      	cmp	r3, #0
10050580:	d012      	beq.n	100505a8 <HAL_RCC_OscConfig+0x1f8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10050582:	f7fc fb05 	bl	1004cb90 <HAL_GetTick>
10050586:	0003      	movs	r3, r0
10050588:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
1005058a:	e008      	b.n	1005059e <HAL_RCC_OscConfig+0x1ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1005058c:	f7fc fb00 	bl	1004cb90 <HAL_GetTick>
10050590:	0002      	movs	r2, r0
10050592:	68fb      	ldr	r3, [r7, #12]
10050594:	1ad3      	subs	r3, r2, r3
10050596:	2b64      	cmp	r3, #100	@ 0x64
10050598:	d901      	bls.n	1005059e <HAL_RCC_OscConfig+0x1ee>
        {
          return HAL_TIMEOUT;
1005059a:	2303      	movs	r3, #3
1005059c:	e04e      	b.n	1005063c <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
1005059e:	f7ff fe45 	bl	1005022c <LL_RCC_LSE_IsReady>
100505a2:	1e03      	subs	r3, r0, #0
100505a4:	d0f2      	beq.n	1005058c <HAL_RCC_OscConfig+0x1dc>
100505a6:	e011      	b.n	100505cc <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100505a8:	f7fc faf2 	bl	1004cb90 <HAL_GetTick>
100505ac:	0003      	movs	r3, r0
100505ae:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
100505b0:	e008      	b.n	100505c4 <HAL_RCC_OscConfig+0x214>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
100505b2:	f7fc faed 	bl	1004cb90 <HAL_GetTick>
100505b6:	0002      	movs	r2, r0
100505b8:	68fb      	ldr	r3, [r7, #12]
100505ba:	1ad3      	subs	r3, r2, r3
100505bc:	2b64      	cmp	r3, #100	@ 0x64
100505be:	d901      	bls.n	100505c4 <HAL_RCC_OscConfig+0x214>
        {
          return HAL_TIMEOUT;
100505c0:	2303      	movs	r3, #3
100505c2:	e03b      	b.n	1005063c <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
100505c4:	f7ff fe32 	bl	1005022c <LL_RCC_LSE_IsReady>
100505c8:	1e03      	subs	r3, r0, #0
100505ca:	d1f2      	bne.n	100505b2 <HAL_RCC_OscConfig+0x202>
      }
    }
  }

  /*------------------------------ LSE Bypass Configuration ------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE_BYPASS) == RCC_OSCILLATORTYPE_LSE_BYPASS)
100505cc:	687b      	ldr	r3, [r7, #4]
100505ce:	681b      	ldr	r3, [r3, #0]
100505d0:	2208      	movs	r2, #8
100505d2:	4013      	ands	r3, r2
100505d4:	d031      	beq.n	1005063a <HAL_RCC_OscConfig+0x28a>

    /* Check the parameters */
    assert_param(IS_RCC_LSE_BYPASS(RCC_OscInitStruct->LSEBYPASSState));

    /* Set the new LSE Bypass configuration -----------------------------------------*/
    __HAL_RCC_LSE_BYPASS_CONFIG(RCC_OscInitStruct->LSEBYPASSState);
100505d6:	687b      	ldr	r3, [r7, #4]
100505d8:	695b      	ldr	r3, [r3, #20]
100505da:	2b40      	cmp	r3, #64	@ 0x40
100505dc:	d102      	bne.n	100505e4 <HAL_RCC_OscConfig+0x234>
100505de:	f7ff fe35 	bl	1005024c <LL_RCC_LSE_EnableBypass>
100505e2:	e001      	b.n	100505e8 <HAL_RCC_OscConfig+0x238>
100505e4:	f7ff fe40 	bl	10050268 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE Bypass State */
    if (RCC_OscInitStruct->LSEBYPASSState != RCC_LSE_OFF)
100505e8:	687b      	ldr	r3, [r7, #4]
100505ea:	695b      	ldr	r3, [r3, #20]
100505ec:	2b00      	cmp	r3, #0
100505ee:	d012      	beq.n	10050616 <HAL_RCC_OscConfig+0x266>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100505f0:	f7fc face 	bl	1004cb90 <HAL_GetTick>
100505f4:	0003      	movs	r3, r0
100505f6:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
100505f8:	e008      	b.n	1005060c <HAL_RCC_OscConfig+0x25c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
100505fa:	f7fc fac9 	bl	1004cb90 <HAL_GetTick>
100505fe:	0002      	movs	r2, r0
10050600:	68fb      	ldr	r3, [r7, #12]
10050602:	1ad3      	subs	r3, r2, r3
10050604:	2b64      	cmp	r3, #100	@ 0x64
10050606:	d901      	bls.n	1005060c <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
10050608:	2303      	movs	r3, #3
1005060a:	e017      	b.n	1005063c <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
1005060c:	f7ff fe3a 	bl	10050284 <LL_RCC_LSE_IsBypassEnabled>
10050610:	1e03      	subs	r3, r0, #0
10050612:	d0f2      	beq.n	100505fa <HAL_RCC_OscConfig+0x24a>
10050614:	e011      	b.n	1005063a <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10050616:	f7fc fabb 	bl	1004cb90 <HAL_GetTick>
1005061a:	0003      	movs	r3, r0
1005061c:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
1005061e:	e008      	b.n	10050632 <HAL_RCC_OscConfig+0x282>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10050620:	f7fc fab6 	bl	1004cb90 <HAL_GetTick>
10050624:	0002      	movs	r2, r0
10050626:	68fb      	ldr	r3, [r7, #12]
10050628:	1ad3      	subs	r3, r2, r3
1005062a:	2b64      	cmp	r3, #100	@ 0x64
1005062c:	d901      	bls.n	10050632 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
1005062e:	2303      	movs	r3, #3
10050630:	e004      	b.n	1005063c <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
10050632:	f7ff fe27 	bl	10050284 <LL_RCC_LSE_IsBypassEnabled>
10050636:	1e03      	subs	r3, r0, #0
10050638:	d1f2      	bne.n	10050620 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }

  return HAL_OK;
1005063a:	2300      	movs	r3, #0
}
1005063c:	0018      	movs	r0, r3
1005063e:	46bd      	mov	sp, r7
10050640:	b004      	add	sp, #16
10050642:	bd80      	pop	{r7, pc}

10050644 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
10050644:	b580      	push	{r7, lr}
10050646:	b084      	sub	sp, #16
10050648:	af00      	add	r7, sp, #0
1005064a:	6078      	str	r0, [r7, #4]
1005064c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
1005064e:	687b      	ldr	r3, [r7, #4]
10050650:	2b00      	cmp	r3, #0
10050652:	d101      	bne.n	10050658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
10050654:	2301      	movs	r3, #1
10050656:	e098      	b.n	1005078a <HAL_RCC_ClockConfig+0x146>

  /* Check the parameters */
  assert_param(IS_FLASH_WAIT_STATES(FLatency));

  /* Set FALSH_WAIT_STATES_1 */
  __HAL_FLASH_SET_WAIT_STATES(FLatency);
10050658:	4b4e      	ldr	r3, [pc, #312]	@ (10050794 <HAL_RCC_ClockConfig+0x150>)
1005065a:	685b      	ldr	r3, [r3, #4]
1005065c:	2230      	movs	r2, #48	@ 0x30
1005065e:	4393      	bics	r3, r2
10050660:	0019      	movs	r1, r3
10050662:	4b4c      	ldr	r3, [pc, #304]	@ (10050794 <HAL_RCC_ClockConfig+0x150>)
10050664:	683a      	ldr	r2, [r7, #0]
10050666:	430a      	orrs	r2, r1
10050668:	605a      	str	r2, [r3, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
  assert_param(IS_RCC_SYSCLK_DIVIDER(RCC_ClkInitStruct->SYSCLKDivider));

  /* HSI is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
1005066a:	687b      	ldr	r3, [r7, #4]
1005066c:	681b      	ldr	r3, [r3, #0]
1005066e:	2b02      	cmp	r3, #2
10050670:	d10e      	bne.n	10050690 <HAL_RCC_ClockConfig+0x4c>
  {
    LL_RCC_HSI_Enable();
10050672:	f7ff fd47 	bl	10050104 <LL_RCC_HSI_Enable>
    
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
10050676:	f7ff fd6d 	bl	10050154 <LL_RCC_HSI_IsReady>
1005067a:	1e03      	subs	r3, r0, #0
1005067c:	d101      	bne.n	10050682 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
1005067e:	2301      	movs	r3, #1
10050680:	e083      	b.n	1005078a <HAL_RCC_ClockConfig+0x146>
    }

    /* Disable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_DISABLE();
10050682:	f7ff fe5d 	bl	10050340 <LL_RCC_RC64MPLL_Disable>
    
    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10050686:	687b      	ldr	r3, [r7, #4]
10050688:	685b      	ldr	r3, [r3, #4]
1005068a:	0018      	movs	r0, r3
1005068c:	f7ff fe7c 	bl	10050388 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* RC64MPLL is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_RC64MPLL)
10050690:	687b      	ldr	r3, [r7, #4]
10050692:	681b      	ldr	r3, [r3, #0]
10050694:	2b00      	cmp	r3, #0
10050696:	d124      	bne.n	100506e2 <HAL_RCC_ClockConfig+0x9e>
  {
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
10050698:	f7ff fd5c 	bl	10050154 <LL_RCC_HSI_IsReady>
1005069c:	1e03      	subs	r3, r0, #0
1005069e:	d101      	bne.n	100506a4 <HAL_RCC_ClockConfig+0x60>
    {
      return HAL_ERROR;
100506a0:	2301      	movs	r3, #1
100506a2:	e072      	b.n	1005078a <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
100506a4:	f7ff fce4 	bl	10050070 <LL_RCC_HSE_IsReady>
100506a8:	1e03      	subs	r3, r0, #0
100506aa:	d101      	bne.n	100506b0 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
100506ac:	2301      	movs	r3, #1
100506ae:	e06c      	b.n	1005078a <HAL_RCC_ClockConfig+0x146>
    }

    /* Enable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_ENABLE();
100506b0:	f7ff fe38 	bl	10050324 <LL_RCC_RC64MPLL_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100506b4:	f7fc fa6c 	bl	1004cb90 <HAL_GetTick>
100506b8:	0003      	movs	r3, r0
100506ba:	60fb      	str	r3, [r7, #12]

    /* Wait till RC64MPLL is ready */
    while (LL_RCC_RC64MPLL_IsReady() == 0)
100506bc:	e008      	b.n	100506d0 <HAL_RCC_ClockConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100506be:	f7fc fa67 	bl	1004cb90 <HAL_GetTick>
100506c2:	0002      	movs	r2, r0
100506c4:	68fb      	ldr	r3, [r7, #12]
100506c6:	1ad3      	subs	r3, r2, r3
100506c8:	2b02      	cmp	r3, #2
100506ca:	d901      	bls.n	100506d0 <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_TIMEOUT;
100506cc:	2303      	movs	r3, #3
100506ce:	e05c      	b.n	1005078a <HAL_RCC_ClockConfig+0x146>
    while (LL_RCC_RC64MPLL_IsReady() == 0)
100506d0:	f7ff fe46 	bl	10050360 <LL_RCC_RC64MPLL_IsReady>
100506d4:	1e03      	subs	r3, r0, #0
100506d6:	d0f2      	beq.n	100506be <HAL_RCC_ClockConfig+0x7a>
      }
    }

    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
100506d8:	687b      	ldr	r3, [r7, #4]
100506da:	685b      	ldr	r3, [r3, #4]
100506dc:	0018      	movs	r0, r3
100506de:	f7ff fe53 	bl	10050388 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* DIRECT_HSE is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_DIRECT_HSE)
100506e2:	687b      	ldr	r3, [r7, #4]
100506e4:	681b      	ldr	r3, [r3, #0]
100506e6:	2b01      	cmp	r3, #1
100506e8:	d117      	bne.n	1005071a <HAL_RCC_ClockConfig+0xd6>
  {
    /* Enable the DIRECT_HSE configuration */
    LL_RCC_DIRECT_HSE_Enable();
100506ea:	f7ff fd47 	bl	1005017c <LL_RCC_DIRECT_HSE_Enable>

    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() != 0U)
100506ee:	f7ff fd31 	bl	10050154 <LL_RCC_HSI_IsReady>
100506f2:	1e03      	subs	r3, r0, #0
100506f4:	d001      	beq.n	100506fa <HAL_RCC_ClockConfig+0xb6>
    {
      return HAL_ERROR;
100506f6:	2301      	movs	r3, #1
100506f8:	e047      	b.n	1005078a <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
100506fa:	f7ff fcb9 	bl	10050070 <LL_RCC_HSE_IsReady>
100506fe:	1e03      	subs	r3, r0, #0
10050700:	d101      	bne.n	10050706 <HAL_RCC_ClockConfig+0xc2>
    {
      return HAL_ERROR;
10050702:	2301      	movs	r3, #1
10050704:	e041      	b.n	1005078a <HAL_RCC_ClockConfig+0x146>
    }

    /* Configure the DIRECT_HSE multiplication factor */
    __HAL_RCC_DIRECT_HSE_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10050706:	4b24      	ldr	r3, [pc, #144]	@ (10050798 <HAL_RCC_ClockConfig+0x154>)
10050708:	689b      	ldr	r3, [r3, #8]
1005070a:	22e0      	movs	r2, #224	@ 0xe0
1005070c:	4393      	bics	r3, r2
1005070e:	0019      	movs	r1, r3
10050710:	687b      	ldr	r3, [r7, #4]
10050712:	685a      	ldr	r2, [r3, #4]
10050714:	4b20      	ldr	r3, [pc, #128]	@ (10050798 <HAL_RCC_ClockConfig+0x154>)
10050716:	430a      	orrs	r2, r1
10050718:	609a      	str	r2, [r3, #8]
  /*----------------------- FLASH Latency Configuration ------------------------*/
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the FLASH clock */

  /* Setup flash wait states because according the system clock frequency */
  if (FLatency != __HAL_FLASH_GET_WAIT_STATES())
1005071a:	4b1e      	ldr	r3, [pc, #120]	@ (10050794 <HAL_RCC_ClockConfig+0x150>)
1005071c:	685b      	ldr	r3, [r3, #4]
1005071e:	2230      	movs	r2, #48	@ 0x30
10050720:	4013      	ands	r3, r2
10050722:	683a      	ldr	r2, [r7, #0]
10050724:	429a      	cmp	r2, r3
10050726:	d01d      	beq.n	10050764 <HAL_RCC_ClockConfig+0x120>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_CONFIG register */
    __HAL_FLASH_SET_WAIT_STATES(FLatency);
10050728:	4b1a      	ldr	r3, [pc, #104]	@ (10050794 <HAL_RCC_ClockConfig+0x150>)
1005072a:	685b      	ldr	r3, [r3, #4]
1005072c:	2230      	movs	r2, #48	@ 0x30
1005072e:	4393      	bics	r3, r2
10050730:	0019      	movs	r1, r3
10050732:	4b18      	ldr	r3, [pc, #96]	@ (10050794 <HAL_RCC_ClockConfig+0x150>)
10050734:	683a      	ldr	r2, [r7, #0]
10050736:	430a      	orrs	r2, r1
10050738:	605a      	str	r2, [r3, #4]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1005073a:	f7fc fa29 	bl	1004cb90 <HAL_GetTick>
1005073e:	0003      	movs	r3, r0
10050740:	60fb      	str	r3, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_CONFIG register */
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
10050742:	e008      	b.n	10050756 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
10050744:	f7fc fa24 	bl	1004cb90 <HAL_GetTick>
10050748:	0002      	movs	r2, r0
1005074a:	68fb      	ldr	r3, [r7, #12]
1005074c:	1ad3      	subs	r3, r2, r3
1005074e:	2b02      	cmp	r3, #2
10050750:	d901      	bls.n	10050756 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
10050752:	2303      	movs	r3, #3
10050754:	e019      	b.n	1005078a <HAL_RCC_ClockConfig+0x146>
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
10050756:	4b0f      	ldr	r3, [pc, #60]	@ (10050794 <HAL_RCC_ClockConfig+0x150>)
10050758:	685b      	ldr	r3, [r3, #4]
1005075a:	2230      	movs	r2, #48	@ 0x30
1005075c:	4013      	ands	r3, r2
1005075e:	683a      	ldr	r2, [r7, #0]
10050760:	429a      	cmp	r2, r3
10050762:	d1ef      	bne.n	10050744 <HAL_RCC_ClockConfig+0x100>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  for (volatile int i = 0; i < 6; i++)
10050764:	2300      	movs	r3, #0
10050766:	60bb      	str	r3, [r7, #8]
10050768:	e003      	b.n	10050772 <HAL_RCC_ClockConfig+0x12e>
  {
    __asm("NOP");
1005076a:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
1005076c:	68bb      	ldr	r3, [r7, #8]
1005076e:	3301      	adds	r3, #1
10050770:	60bb      	str	r3, [r7, #8]
10050772:	68bb      	ldr	r3, [r7, #8]
10050774:	2b05      	cmp	r3, #5
10050776:	ddf8      	ble.n	1005076a <HAL_RCC_ClockConfig+0x126>
  }
  SystemCoreClockUpdate();
10050778:	f7fc f966 	bl	1004ca48 <SystemCoreClockUpdate>

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
1005077c:	f7fc fa12 	bl	1004cba4 <HAL_GetTickPrio>
10050780:	0003      	movs	r3, r0
10050782:	0018      	movs	r0, r3
10050784:	f7fc f9aa 	bl	1004cadc <HAL_InitTick>
10050788:	0003      	movs	r3, r0
}
1005078a:	0018      	movs	r0, r3
1005078c:	46bd      	mov	sp, r7
1005078e:	b004      	add	sp, #16
10050790:	bd80      	pop	{r7, pc}
10050792:	46c0      	nop			@ (mov r8, r8)
10050794:	40001000 	.word	0x40001000
10050798:	48400000 	.word	0x48400000

1005079c <HAL_RCC_GetSysClockFreq>:
  *         content of the SystemCoreClock CMSIS variable
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
1005079c:	b580      	push	{r7, lr}
1005079e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
100507a0:	4b02      	ldr	r3, [pc, #8]	@ (100507ac <HAL_RCC_GetSysClockFreq+0x10>)
100507a2:	681b      	ldr	r3, [r3, #0]
}
100507a4:	0018      	movs	r0, r3
100507a6:	46bd      	mov	sp, r7
100507a8:	bd80      	pop	{r7, pc}
100507aa:	46c0      	nop			@ (mov r8, r8)
100507ac:	200014c8 	.word	0x200014c8

100507b0 <LL_RCC_HSE_IsReady>:
{
100507b0:	b580      	push	{r7, lr}
100507b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
100507b4:	4b07      	ldr	r3, [pc, #28]	@ (100507d4 <LL_RCC_HSE_IsReady+0x24>)
100507b6:	681a      	ldr	r2, [r3, #0]
100507b8:	2380      	movs	r3, #128	@ 0x80
100507ba:	029b      	lsls	r3, r3, #10
100507bc:	401a      	ands	r2, r3
100507be:	2380      	movs	r3, #128	@ 0x80
100507c0:	029b      	lsls	r3, r3, #10
100507c2:	429a      	cmp	r2, r3
100507c4:	d101      	bne.n	100507ca <LL_RCC_HSE_IsReady+0x1a>
100507c6:	2301      	movs	r3, #1
100507c8:	e000      	b.n	100507cc <LL_RCC_HSE_IsReady+0x1c>
100507ca:	2300      	movs	r3, #0
}
100507cc:	0018      	movs	r0, r3
100507ce:	46bd      	mov	sp, r7
100507d0:	bd80      	pop	{r7, pc}
100507d2:	46c0      	nop			@ (mov r8, r8)
100507d4:	48400000 	.word	0x48400000

100507d8 <LL_RCC_DIRECT_HSE_IsEnabled>:
{
100507d8:	b580      	push	{r7, lr}
100507da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
100507dc:	4b05      	ldr	r3, [pc, #20]	@ (100507f4 <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
100507de:	689b      	ldr	r3, [r3, #8]
100507e0:	2208      	movs	r2, #8
100507e2:	4013      	ands	r3, r2
100507e4:	2b08      	cmp	r3, #8
100507e6:	d101      	bne.n	100507ec <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
100507e8:	2301      	movs	r3, #1
100507ea:	e000      	b.n	100507ee <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
100507ec:	2300      	movs	r3, #0
}
100507ee:	0018      	movs	r0, r3
100507f0:	46bd      	mov	sp, r7
100507f2:	bd80      	pop	{r7, pc}
100507f4:	48400000 	.word	0x48400000

100507f8 <LL_RCC_LSCO_SetSource>:
{
100507f8:	b580      	push	{r7, lr}
100507fa:	b082      	sub	sp, #8
100507fc:	af00      	add	r7, sp, #0
100507fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
10050800:	4b06      	ldr	r3, [pc, #24]	@ (1005081c <LL_RCC_LSCO_SetSource+0x24>)
10050802:	689b      	ldr	r3, [r3, #8]
10050804:	4a06      	ldr	r2, [pc, #24]	@ (10050820 <LL_RCC_LSCO_SetSource+0x28>)
10050806:	4013      	ands	r3, r2
10050808:	0019      	movs	r1, r3
1005080a:	4b04      	ldr	r3, [pc, #16]	@ (1005081c <LL_RCC_LSCO_SetSource+0x24>)
1005080c:	687a      	ldr	r2, [r7, #4]
1005080e:	430a      	orrs	r2, r1
10050810:	609a      	str	r2, [r3, #8]
}
10050812:	46c0      	nop			@ (mov r8, r8)
10050814:	46bd      	mov	sp, r7
10050816:	b002      	add	sp, #8
10050818:	bd80      	pop	{r7, pc}
1005081a:	46c0      	nop			@ (mov r8, r8)
1005081c:	48400000 	.word	0x48400000
10050820:	fffe7fff 	.word	0xfffe7fff

10050824 <LL_RCC_LSCO_GetSource>:
{
10050824:	b580      	push	{r7, lr}
10050826:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_CLKSLOWSEL));
10050828:	4b03      	ldr	r3, [pc, #12]	@ (10050838 <LL_RCC_LSCO_GetSource+0x14>)
1005082a:	689a      	ldr	r2, [r3, #8]
1005082c:	23c0      	movs	r3, #192	@ 0xc0
1005082e:	025b      	lsls	r3, r3, #9
10050830:	4013      	ands	r3, r2
}
10050832:	0018      	movs	r0, r3
10050834:	46bd      	mov	sp, r7
10050836:	bd80      	pop	{r7, pc}
10050838:	48400000 	.word	0x48400000

1005083c <LL_RCC_SetRFClock>:
{
1005083c:	b580      	push	{r7, lr}
1005083e:	b082      	sub	sp, #8
10050840:	af00      	add	r7, sp, #0
10050842:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV, Source);
10050844:	4b06      	ldr	r3, [pc, #24]	@ (10050860 <LL_RCC_SetRFClock+0x24>)
10050846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10050848:	2204      	movs	r2, #4
1005084a:	4393      	bics	r3, r2
1005084c:	0019      	movs	r1, r3
1005084e:	4b04      	ldr	r3, [pc, #16]	@ (10050860 <LL_RCC_SetRFClock+0x24>)
10050850:	687a      	ldr	r2, [r7, #4]
10050852:	430a      	orrs	r2, r1
10050854:	661a      	str	r2, [r3, #96]	@ 0x60
}
10050856:	46c0      	nop			@ (mov r8, r8)
10050858:	46bd      	mov	sp, r7
1005085a:	b002      	add	sp, #8
1005085c:	bd80      	pop	{r7, pc}
1005085e:	46c0      	nop			@ (mov r8, r8)
10050860:	48400000 	.word	0x48400000

10050864 <LL_RCC_GetRFClock>:
{
10050864:	b580      	push	{r7, lr}
10050866:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV));
10050868:	4b03      	ldr	r3, [pc, #12]	@ (10050878 <LL_RCC_GetRFClock+0x14>)
1005086a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1005086c:	2204      	movs	r2, #4
1005086e:	4013      	ands	r3, r2
}
10050870:	0018      	movs	r0, r3
10050872:	46bd      	mov	sp, r7
10050874:	bd80      	pop	{r7, pc}
10050876:	46c0      	nop			@ (mov r8, r8)
10050878:	48400000 	.word	0x48400000

1005087c <LL_RCC_SetSMPSPrescaler>:
{
1005087c:	b580      	push	{r7, lr}
1005087e:	b082      	sub	sp, #8
10050880:	af00      	add	r7, sp, #0
10050882:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SMPSDIV, Prescaler);
10050884:	4b06      	ldr	r3, [pc, #24]	@ (100508a0 <LL_RCC_SetSMPSPrescaler+0x24>)
10050886:	689b      	ldr	r3, [r3, #8]
10050888:	4a06      	ldr	r2, [pc, #24]	@ (100508a4 <LL_RCC_SetSMPSPrescaler+0x28>)
1005088a:	4013      	ands	r3, r2
1005088c:	0019      	movs	r1, r3
1005088e:	4b04      	ldr	r3, [pc, #16]	@ (100508a0 <LL_RCC_SetSMPSPrescaler+0x24>)
10050890:	687a      	ldr	r2, [r7, #4]
10050892:	430a      	orrs	r2, r1
10050894:	609a      	str	r2, [r3, #8]
}
10050896:	46c0      	nop			@ (mov r8, r8)
10050898:	46bd      	mov	sp, r7
1005089a:	b002      	add	sp, #8
1005089c:	bd80      	pop	{r7, pc}
1005089e:	46c0      	nop			@ (mov r8, r8)
100508a0:	48400000 	.word	0x48400000
100508a4:	ffffefff 	.word	0xffffefff

100508a8 <LL_RCC_GetSMPSPrescaler>:
{
100508a8:	b580      	push	{r7, lr}
100508aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SMPSDIV));
100508ac:	4b03      	ldr	r3, [pc, #12]	@ (100508bc <LL_RCC_GetSMPSPrescaler+0x14>)
100508ae:	689a      	ldr	r2, [r3, #8]
100508b0:	2380      	movs	r3, #128	@ 0x80
100508b2:	015b      	lsls	r3, r3, #5
100508b4:	4013      	ands	r3, r2
}
100508b6:	0018      	movs	r0, r3
100508b8:	46bd      	mov	sp, r7
100508ba:	bd80      	pop	{r7, pc}
100508bc:	48400000 	.word	0x48400000

100508c0 <LL_RCC_SetLPUARTClockSource>:
{
100508c0:	b580      	push	{r7, lr}
100508c2:	b082      	sub	sp, #8
100508c4:	af00      	add	r7, sp, #0
100508c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_LPUCLKSEL, Source);
100508c8:	4b06      	ldr	r3, [pc, #24]	@ (100508e4 <LL_RCC_SetLPUARTClockSource+0x24>)
100508ca:	689b      	ldr	r3, [r3, #8]
100508cc:	4a06      	ldr	r2, [pc, #24]	@ (100508e8 <LL_RCC_SetLPUARTClockSource+0x28>)
100508ce:	4013      	ands	r3, r2
100508d0:	0019      	movs	r1, r3
100508d2:	4b04      	ldr	r3, [pc, #16]	@ (100508e4 <LL_RCC_SetLPUARTClockSource+0x24>)
100508d4:	687a      	ldr	r2, [r7, #4]
100508d6:	430a      	orrs	r2, r1
100508d8:	609a      	str	r2, [r3, #8]
}
100508da:	46c0      	nop			@ (mov r8, r8)
100508dc:	46bd      	mov	sp, r7
100508de:	b002      	add	sp, #8
100508e0:	bd80      	pop	{r7, pc}
100508e2:	46c0      	nop			@ (mov r8, r8)
100508e4:	48400000 	.word	0x48400000
100508e8:	ffffdfff 	.word	0xffffdfff

100508ec <LL_RCC_GetLPUARTClockSource>:
{
100508ec:	b580      	push	{r7, lr}
100508ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_LPUCLKSEL));
100508f0:	4b03      	ldr	r3, [pc, #12]	@ (10050900 <LL_RCC_GetLPUARTClockSource+0x14>)
100508f2:	689a      	ldr	r2, [r3, #8]
100508f4:	2380      	movs	r3, #128	@ 0x80
100508f6:	019b      	lsls	r3, r3, #6
100508f8:	4013      	ands	r3, r2
}
100508fa:	0018      	movs	r0, r3
100508fc:	46bd      	mov	sp, r7
100508fe:	bd80      	pop	{r7, pc}
10050900:	48400000 	.word	0x48400000

10050904 <LL_RCC_SetSPI3I2SClockSource>:
{
10050904:	b580      	push	{r7, lr}
10050906:	b082      	sub	sp, #8
10050908:	af00      	add	r7, sp, #0
1005090a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL, Source);
1005090c:	4b06      	ldr	r3, [pc, #24]	@ (10050928 <LL_RCC_SetSPI3I2SClockSource+0x24>)
1005090e:	689b      	ldr	r3, [r3, #8]
10050910:	4a06      	ldr	r2, [pc, #24]	@ (1005092c <LL_RCC_SetSPI3I2SClockSource+0x28>)
10050912:	4013      	ands	r3, r2
10050914:	0019      	movs	r1, r3
10050916:	4b04      	ldr	r3, [pc, #16]	@ (10050928 <LL_RCC_SetSPI3I2SClockSource+0x24>)
10050918:	687a      	ldr	r2, [r7, #4]
1005091a:	430a      	orrs	r2, r1
1005091c:	609a      	str	r2, [r3, #8]
}
1005091e:	46c0      	nop			@ (mov r8, r8)
10050920:	46bd      	mov	sp, r7
10050922:	b002      	add	sp, #8
10050924:	bd80      	pop	{r7, pc}
10050926:	46c0      	nop			@ (mov r8, r8)
10050928:	48400000 	.word	0x48400000
1005092c:	ff3fffff 	.word	0xff3fffff

10050930 <LL_RCC_GetSPI3I2SClockSource>:
{
10050930:	b580      	push	{r7, lr}
10050932:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL));
10050934:	4b03      	ldr	r3, [pc, #12]	@ (10050944 <LL_RCC_GetSPI3I2SClockSource+0x14>)
10050936:	689a      	ldr	r2, [r3, #8]
10050938:	23c0      	movs	r3, #192	@ 0xc0
1005093a:	041b      	lsls	r3, r3, #16
1005093c:	4013      	ands	r3, r2
}
1005093e:	0018      	movs	r0, r3
10050940:	46bd      	mov	sp, r7
10050942:	bd80      	pop	{r7, pc}
10050944:	48400000 	.word	0x48400000

10050948 <LL_RCC_RC64MPLL_IsReady>:
{
10050948:	b580      	push	{r7, lr}
1005094a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
1005094c:	4b07      	ldr	r3, [pc, #28]	@ (1005096c <LL_RCC_RC64MPLL_IsReady+0x24>)
1005094e:	681a      	ldr	r2, [r3, #0]
10050950:	2380      	movs	r3, #128	@ 0x80
10050952:	01db      	lsls	r3, r3, #7
10050954:	401a      	ands	r2, r3
10050956:	2380      	movs	r3, #128	@ 0x80
10050958:	01db      	lsls	r3, r3, #7
1005095a:	429a      	cmp	r2, r3
1005095c:	d101      	bne.n	10050962 <LL_RCC_RC64MPLL_IsReady+0x1a>
1005095e:	2301      	movs	r3, #1
10050960:	e000      	b.n	10050964 <LL_RCC_RC64MPLL_IsReady+0x1c>
10050962:	2300      	movs	r3, #0
}
10050964:	0018      	movs	r0, r3
10050966:	46bd      	mov	sp, r7
10050968:	bd80      	pop	{r7, pc}
1005096a:	46c0      	nop			@ (mov r8, r8)
1005096c:	48400000 	.word	0x48400000

10050970 <HAL_RCCEx_PeriphCLKConfig>:
  *  @note   (*) Peripherals are not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
10050970:	b580      	push	{r7, lr}
10050972:	b082      	sub	sp, #8
10050974:	af00      	add	r7, sp, #0
10050976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RF_BLE clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RF) == RCC_PERIPHCLK_RF))
10050978:	687b      	ldr	r3, [r7, #4]
1005097a:	681b      	ldr	r3, [r3, #0]
1005097c:	2201      	movs	r2, #1
1005097e:	4013      	ands	r3, r2
10050980:	d004      	beq.n	1005098c <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    assert_param(IS_RCC_RF_BLE_CLOCK_SOURCE(PeriphClkInit->RFClockSelection));
    __HAL_RCC_RF_CLK_SET_CONFIG(PeriphClkInit->RFClockSelection);
10050982:	687b      	ldr	r3, [r7, #4]
10050984:	691b      	ldr	r3, [r3, #16]
10050986:	0018      	movs	r0, r3
10050988:	f7ff ff58 	bl	1005083c <LL_RCC_SetRFClock>
  }

  /*-------------------------- SMPS clock configuration -------------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS))
1005098c:	687b      	ldr	r3, [r7, #4]
1005098e:	681b      	ldr	r3, [r3, #0]
10050990:	2202      	movs	r2, #2
10050992:	4013      	ands	r3, r2
10050994:	d004      	beq.n	100509a0 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    assert_param(IS_RCC_SMPS_CLOCK_PRESC(PeriphClkInit->SmpsDivSelection));
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
10050996:	687b      	ldr	r3, [r7, #4]
10050998:	695b      	ldr	r3, [r3, #20]
1005099a:	0018      	movs	r0, r3
1005099c:	f7ff ff6e 	bl	1005087c <LL_RCC_SetSMPSPrescaler>
    __HAL_RCC_SPI2I2S_CLK_CONFIG(PeriphClkInit->SPI2I2SClockSelection);
  }
#endif
#if defined(SPI3)
  /*-------------------------- SPI3_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3_I2S) == RCC_PERIPHCLK_SPI3_I2S))
100509a0:	687b      	ldr	r3, [r7, #4]
100509a2:	681b      	ldr	r3, [r3, #0]
100509a4:	2208      	movs	r2, #8
100509a6:	4013      	ands	r3, r2
100509a8:	d004      	beq.n	100509b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    assert_param(IS_RCC_SPI3I2S_CLOCK_SOURCE(PeriphClkInit->SPI3I2SClockSelection));
    __HAL_RCC_SPI3I2S_CLK_CONFIG(PeriphClkInit->SPI3I2SClockSelection);
100509aa:	687b      	ldr	r3, [r7, #4]
100509ac:	685b      	ldr	r3, [r3, #4]
100509ae:	0018      	movs	r0, r3
100509b0:	f7ff ffa8 	bl	10050904 <LL_RCC_SetSPI3I2SClockSource>
  }
#endif

#if defined(RCC_CFGR_LPUCLKSEL)
  /*-------------------------- LPUART1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1))
100509b4:	687b      	ldr	r3, [r7, #4]
100509b6:	681b      	ldr	r3, [r3, #0]
100509b8:	2210      	movs	r2, #16
100509ba:	4013      	ands	r3, r2
100509bc:	d004      	beq.n	100509c8 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    assert_param(IS_RCC_LPUART1_CLOCK_SOURCE(PeriphClkInit->LPUART1ClockSelection));
    __HAL_RCC_LPUART1_CLK_CONFIG(PeriphClkInit->LPUART1ClockSelection);
100509be:	687b      	ldr	r3, [r7, #4]
100509c0:	68db      	ldr	r3, [r3, #12]
100509c2:	0018      	movs	r0, r3
100509c4:	f7ff ff7c 	bl	100508c0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* RCC_CFGR_LPUCLKSEL */

  /*-------------------------- RTC WDG BLEWKUP clock source configuration ---------------------*/
  if ((((PeriphClkInit->RTCWDGBLEWKUPClockSelection) & RCC_PERIPHCLK_RTC_WDG_BLEWKUP) == RCC_PERIPHCLK_RTC_WDG_BLEWKUP))
100509c8:	687b      	ldr	r3, [r7, #4]
100509ca:	689b      	ldr	r3, [r3, #8]
100509cc:	2220      	movs	r2, #32
100509ce:	4013      	ands	r3, r2
100509d0:	d004      	beq.n	100509dc <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    assert_param(IS_RCC_RTC_WDG_BLEWKUP_CLOCK_SOURCE(PeriphClkInit->RTCWDGBLEWKUPClockSelection));
    __HAL_RCC_RTC_WDG_BLEWKUP_CLK_CONFIG(PeriphClkInit->RTCWDGBLEWKUPClockSelection);
100509d2:	687b      	ldr	r3, [r7, #4]
100509d4:	689b      	ldr	r3, [r3, #8]
100509d6:	0018      	movs	r0, r3
100509d8:	f7ff ff0e 	bl	100507f8 <LL_RCC_LSCO_SetSource>
  }

  return HAL_OK;
100509dc:	2300      	movs	r3, #0
}
100509de:	0018      	movs	r0, r3
100509e0:	46bd      	mov	sp, r7
100509e2:	b002      	add	sp, #8
100509e4:	bd80      	pop	{r7, pc}
	...

100509e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RTC_WDG_BLEWKUP   RTC, WDG and BLEWKUP peripheral clock
  * @retval Frequency in Hz
  * @note   (*) Peripherals are not available on all devices
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
100509e8:	b580      	push	{r7, lr}
100509ea:	b084      	sub	sp, #16
100509ec:	af00      	add	r7, sp, #0
100509ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  /* No if clausule is covered */
  frequency = 0;
100509f0:	2300      	movs	r3, #0
100509f2:	60fb      	str	r3, [r7, #12]

  switch (PeriphClk)
100509f4:	687b      	ldr	r3, [r7, #4]
100509f6:	2b20      	cmp	r3, #32
100509f8:	d900      	bls.n	100509fc <HAL_RCCEx_GetPeriphCLKFreq+0x14>
100509fa:	e07b      	b.n	10050af4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
100509fc:	687b      	ldr	r3, [r7, #4]
100509fe:	009a      	lsls	r2, r3, #2
10050a00:	4b40      	ldr	r3, [pc, #256]	@ (10050b04 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>)
10050a02:	18d3      	adds	r3, r2, r3
10050a04:	681b      	ldr	r3, [r3, #0]
10050a06:	469f      	mov	pc, r3
  {
    case RCC_PERIPHCLK_RF :
      switch (__HAL_RCC_RF_CLK_GET_CONFIG())
10050a08:	f7ff ff2c 	bl	10050864 <LL_RCC_GetRFClock>
10050a0c:	1e03      	subs	r3, r0, #0
10050a0e:	d002      	beq.n	10050a16 <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
10050a10:	2b04      	cmp	r3, #4
10050a12:	d003      	beq.n	10050a1c <HAL_RCCEx_GetPeriphCLKFreq+0x34>
        case RCC_RF_CLK_16M:
          frequency = HSE_VALUE / 2;
          break;
      }

      break;
10050a14:	e071      	b.n	10050afa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE;
10050a16:	4b3c      	ldr	r3, [pc, #240]	@ (10050b08 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
10050a18:	60fb      	str	r3, [r7, #12]
          break;
10050a1a:	e002      	b.n	10050a22 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          frequency = HSE_VALUE / 2;
10050a1c:	4b3b      	ldr	r3, [pc, #236]	@ (10050b0c <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
10050a1e:	60fb      	str	r3, [r7, #12]
          break;
10050a20:	46c0      	nop			@ (mov r8, r8)
      break;
10050a22:	e06a      	b.n	10050afa <HAL_RCCEx_GetPeriphCLKFreq+0x112>

    case RCC_PERIPHCLK_SMPS :
      switch (__HAL_RCC_GET_SMPS_DIV())
10050a24:	f7ff ff40 	bl	100508a8 <LL_RCC_GetSMPSPrescaler>
10050a28:	1e03      	subs	r3, r0, #0
10050a2a:	d004      	beq.n	10050a36 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
10050a2c:	2280      	movs	r2, #128	@ 0x80
10050a2e:	0152      	lsls	r2, r2, #5
10050a30:	4293      	cmp	r3, r2
10050a32:	d003      	beq.n	10050a3c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          break;
        case RCC_SMPSCLK_DIV4:
          frequency = HSE_VALUE / 8;
          break;
      }
      break;
10050a34:	e061      	b.n	10050afa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE / 4;
10050a36:	4b36      	ldr	r3, [pc, #216]	@ (10050b10 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
10050a38:	60fb      	str	r3, [r7, #12]
          break;
10050a3a:	e002      	b.n	10050a42 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = HSE_VALUE / 8;
10050a3c:	4b35      	ldr	r3, [pc, #212]	@ (10050b14 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
10050a3e:	60fb      	str	r3, [r7, #12]
          break;
10050a40:	46c0      	nop			@ (mov r8, r8)
      break;
10050a42:	e05a      	b.n	10050afa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      }
      break;
#endif

    case RCC_PERIPHCLK_SPI3_I2S :
      if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_DIRECT_HSE)
10050a44:	f7ff fec8 	bl	100507d8 <LL_RCC_DIRECT_HSE_IsEnabled>
10050a48:	1e03      	subs	r3, r0, #0
10050a4a:	d005      	beq.n	10050a58 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
      {
        if (__HAL_RCC_GET_HSE_READYFLAG() == 0)
10050a4c:	f7ff feb0 	bl	100507b0 <LL_RCC_HSE_IsReady>
10050a50:	1e03      	subs	r3, r0, #0
10050a52:	d107      	bne.n	10050a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
10050a54:	2300      	movs	r3, #0
10050a56:	e051      	b.n	10050afc <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      else
      {
        if (__HAL_RCC_RC64MPLL_READYFLAG() == 0)
10050a58:	f7ff ff76 	bl	10050948 <LL_RCC_RC64MPLL_IsReady>
10050a5c:	1e03      	subs	r3, r0, #0
10050a5e:	d101      	bne.n	10050a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
10050a60:	2300      	movs	r3, #0
10050a62:	e04b      	b.n	10050afc <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      spiFreqValue = __HAL_RCC_GET_SPI3I2S_CLK_CONFIG();
10050a64:	f7ff ff64 	bl	10050930 <LL_RCC_GetSPI3I2SClockSource>
10050a68:	0003      	movs	r3, r0
10050a6a:	60bb      	str	r3, [r7, #8]
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_16M)
10050a6c:	68bb      	ldr	r3, [r7, #8]
10050a6e:	2b00      	cmp	r3, #0
10050a70:	d101      	bne.n	10050a76 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
      {
        frequency = HSE_VALUE / 2;
10050a72:	4b26      	ldr	r3, [pc, #152]	@ (10050b0c <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
10050a74:	60fb      	str	r3, [r7, #12]
      }

      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_32M)
10050a76:	68ba      	ldr	r2, [r7, #8]
10050a78:	2380      	movs	r3, #128	@ 0x80
10050a7a:	03db      	lsls	r3, r3, #15
10050a7c:	429a      	cmp	r2, r3
10050a7e:	d101      	bne.n	10050a84 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      {
        frequency = HSE_VALUE;
10050a80:	4b21      	ldr	r3, [pc, #132]	@ (10050b08 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
10050a82:	60fb      	str	r3, [r7, #12]
      }
#if defined(RCC_SPI3I2S_CLKSOURCE_64M)
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_64M)
10050a84:	68ba      	ldr	r2, [r7, #8]
10050a86:	2380      	movs	r3, #128	@ 0x80
10050a88:	041b      	lsls	r3, r3, #16
10050a8a:	429a      	cmp	r2, r3
10050a8c:	d134      	bne.n	10050af8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
      {
        frequency = HSE_VALUE * 2;
10050a8e:	4b22      	ldr	r3, [pc, #136]	@ (10050b18 <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
10050a90:	60fb      	str	r3, [r7, #12]
      }
#endif
      break;
10050a92:	e031      	b.n	10050af8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>

#if defined(RCC_CFGR_LPUCLKSEL)
    case RCC_PERIPHCLK_LPUART1 :
      switch (__HAL_RCC_GET_LPUART1_CLK_CONFIG())
10050a94:	f7ff ff2a 	bl	100508ec <LL_RCC_GetLPUARTClockSource>
10050a98:	0002      	movs	r2, r0
10050a9a:	2380      	movs	r3, #128	@ 0x80
10050a9c:	019b      	lsls	r3, r3, #6
10050a9e:	429a      	cmp	r2, r3
10050aa0:	d103      	bne.n	10050aaa <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      {
        case RCC_LPUART1_CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10050aa2:	2380      	movs	r3, #128	@ 0x80
10050aa4:	021b      	lsls	r3, r3, #8
10050aa6:	60fb      	str	r3, [r7, #12]
          break;
10050aa8:	e002      	b.n	10050ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
        case RCC_LPUART1_CLKSOURCE_16M:
        default:
          frequency = HSE_VALUE / 2;
10050aaa:	4b18      	ldr	r3, [pc, #96]	@ (10050b0c <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
10050aac:	60fb      	str	r3, [r7, #12]
          break;
10050aae:	46c0      	nop			@ (mov r8, r8)
      }
      break;
10050ab0:	e023      	b.n	10050afa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
#endif /* RCC_CFGR_LPUCLKSEL */

    case RCC_PERIPHCLK_RTC_WDG_BLEWKUP :
      switch (LL_RCC_LSCO_GetSource())
10050ab2:	f7ff feb7 	bl	10050824 <LL_RCC_LSCO_GetSource>
10050ab6:	0003      	movs	r3, r0
10050ab8:	22c0      	movs	r2, #192	@ 0xc0
10050aba:	0252      	lsls	r2, r2, #9
10050abc:	4293      	cmp	r3, r2
10050abe:	d014      	beq.n	10050aea <HAL_RCCEx_GetPeriphCLKFreq+0x102>
10050ac0:	22c0      	movs	r2, #192	@ 0xc0
10050ac2:	0252      	lsls	r2, r2, #9
10050ac4:	4293      	cmp	r3, r2
10050ac6:	d813      	bhi.n	10050af0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
10050ac8:	2280      	movs	r2, #128	@ 0x80
10050aca:	0212      	lsls	r2, r2, #8
10050acc:	4293      	cmp	r3, r2
10050ace:	d004      	beq.n	10050ada <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
10050ad0:	2280      	movs	r2, #128	@ 0x80
10050ad2:	0252      	lsls	r2, r2, #9
10050ad4:	4293      	cmp	r3, r2
10050ad6:	d004      	beq.n	10050ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
          break;
        case LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048:
          frequency = HSE_VALUE >> 10;
          break;
        default :
          break;
10050ad8:	e00a      	b.n	10050af0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          frequency = LSE_VALUE;
10050ada:	2380      	movs	r3, #128	@ 0x80
10050adc:	021b      	lsls	r3, r3, #8
10050ade:	60fb      	str	r3, [r7, #12]
          break;
10050ae0:	e007      	b.n	10050af2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = LSI_VALUE;
10050ae2:	23fa      	movs	r3, #250	@ 0xfa
10050ae4:	01db      	lsls	r3, r3, #7
10050ae6:	60fb      	str	r3, [r7, #12]
          break;
10050ae8:	e003      	b.n	10050af2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = HSE_VALUE >> 10;
10050aea:	4b0c      	ldr	r3, [pc, #48]	@ (10050b1c <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
10050aec:	60fb      	str	r3, [r7, #12]
          break;
10050aee:	e000      	b.n	10050af2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          break;
10050af0:	46c0      	nop			@ (mov r8, r8)
      }
      break;
10050af2:	e002      	b.n	10050afa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
    default :
      break;
10050af4:	46c0      	nop			@ (mov r8, r8)
10050af6:	e000      	b.n	10050afa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      break;
10050af8:	46c0      	nop			@ (mov r8, r8)
  }

  return (frequency);
10050afa:	68fb      	ldr	r3, [r7, #12]
}
10050afc:	0018      	movs	r0, r3
10050afe:	46bd      	mov	sp, r7
10050b00:	b004      	add	sp, #16
10050b02:	bd80      	pop	{r7, pc}
10050b04:	10069e58 	.word	0x10069e58
10050b08:	01e84800 	.word	0x01e84800
10050b0c:	00f42400 	.word	0x00f42400
10050b10:	007a1200 	.word	0x007a1200
10050b14:	003d0900 	.word	0x003d0900
10050b18:	03d09000 	.word	0x03d09000
10050b1c:	00007a12 	.word	0x00007a12

10050b20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
10050b20:	b580      	push	{r7, lr}
10050b22:	b082      	sub	sp, #8
10050b24:	af00      	add	r7, sp, #0
10050b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
10050b28:	687b      	ldr	r3, [r7, #4]
10050b2a:	2b00      	cmp	r3, #0
10050b2c:	d101      	bne.n	10050b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
10050b2e:	2301      	movs	r3, #1
10050b30:	e046      	b.n	10050bc0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
10050b32:	687b      	ldr	r3, [r7, #4]
10050b34:	2288      	movs	r2, #136	@ 0x88
10050b36:	589b      	ldr	r3, [r3, r2]
10050b38:	2b00      	cmp	r3, #0
10050b3a:	d107      	bne.n	10050b4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
10050b3c:	687b      	ldr	r3, [r7, #4]
10050b3e:	2284      	movs	r2, #132	@ 0x84
10050b40:	2100      	movs	r1, #0
10050b42:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
10050b44:	687b      	ldr	r3, [r7, #4]
10050b46:	0018      	movs	r0, r3
10050b48:	f7f2 fc04 	bl	10043354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
10050b4c:	687b      	ldr	r3, [r7, #4]
10050b4e:	2288      	movs	r2, #136	@ 0x88
10050b50:	2124      	movs	r1, #36	@ 0x24
10050b52:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
10050b54:	687b      	ldr	r3, [r7, #4]
10050b56:	681b      	ldr	r3, [r3, #0]
10050b58:	681a      	ldr	r2, [r3, #0]
10050b5a:	687b      	ldr	r3, [r7, #4]
10050b5c:	681b      	ldr	r3, [r3, #0]
10050b5e:	2101      	movs	r1, #1
10050b60:	438a      	bics	r2, r1
10050b62:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
10050b64:	687b      	ldr	r3, [r7, #4]
10050b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10050b68:	2b00      	cmp	r3, #0
10050b6a:	d003      	beq.n	10050b74 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
10050b6c:	687b      	ldr	r3, [r7, #4]
10050b6e:	0018      	movs	r0, r3
10050b70:	f000 fa38 	bl	10050fe4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
10050b74:	687b      	ldr	r3, [r7, #4]
10050b76:	0018      	movs	r0, r3
10050b78:	f000 f8cc 	bl	10050d14 <UART_SetConfig>
10050b7c:	0003      	movs	r3, r0
10050b7e:	2b01      	cmp	r3, #1
10050b80:	d101      	bne.n	10050b86 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
10050b82:	2301      	movs	r3, #1
10050b84:	e01c      	b.n	10050bc0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
10050b86:	687b      	ldr	r3, [r7, #4]
10050b88:	681b      	ldr	r3, [r3, #0]
10050b8a:	685a      	ldr	r2, [r3, #4]
10050b8c:	687b      	ldr	r3, [r7, #4]
10050b8e:	681b      	ldr	r3, [r3, #0]
10050b90:	490d      	ldr	r1, [pc, #52]	@ (10050bc8 <HAL_UART_Init+0xa8>)
10050b92:	400a      	ands	r2, r1
10050b94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
10050b96:	687b      	ldr	r3, [r7, #4]
10050b98:	681b      	ldr	r3, [r3, #0]
10050b9a:	689a      	ldr	r2, [r3, #8]
10050b9c:	687b      	ldr	r3, [r7, #4]
10050b9e:	681b      	ldr	r3, [r3, #0]
10050ba0:	212a      	movs	r1, #42	@ 0x2a
10050ba2:	438a      	bics	r2, r1
10050ba4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
10050ba6:	687b      	ldr	r3, [r7, #4]
10050ba8:	681b      	ldr	r3, [r3, #0]
10050baa:	681a      	ldr	r2, [r3, #0]
10050bac:	687b      	ldr	r3, [r7, #4]
10050bae:	681b      	ldr	r3, [r3, #0]
10050bb0:	2101      	movs	r1, #1
10050bb2:	430a      	orrs	r2, r1
10050bb4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
10050bb6:	687b      	ldr	r3, [r7, #4]
10050bb8:	0018      	movs	r0, r3
10050bba:	f000 fac7 	bl	1005114c <UART_CheckIdleState>
10050bbe:	0003      	movs	r3, r0
}
10050bc0:	0018      	movs	r0, r3
10050bc2:	46bd      	mov	sp, r7
10050bc4:	b002      	add	sp, #8
10050bc6:	bd80      	pop	{r7, pc}
10050bc8:	ffffb7ff 	.word	0xffffb7ff

10050bcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
10050bcc:	b580      	push	{r7, lr}
10050bce:	b08a      	sub	sp, #40	@ 0x28
10050bd0:	af02      	add	r7, sp, #8
10050bd2:	60f8      	str	r0, [r7, #12]
10050bd4:	60b9      	str	r1, [r7, #8]
10050bd6:	603b      	str	r3, [r7, #0]
10050bd8:	1dbb      	adds	r3, r7, #6
10050bda:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
10050bdc:	68fb      	ldr	r3, [r7, #12]
10050bde:	2288      	movs	r2, #136	@ 0x88
10050be0:	589b      	ldr	r3, [r3, r2]
10050be2:	2b20      	cmp	r3, #32
10050be4:	d000      	beq.n	10050be8 <HAL_UART_Transmit+0x1c>
10050be6:	e090      	b.n	10050d0a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
10050be8:	68bb      	ldr	r3, [r7, #8]
10050bea:	2b00      	cmp	r3, #0
10050bec:	d003      	beq.n	10050bf6 <HAL_UART_Transmit+0x2a>
10050bee:	1dbb      	adds	r3, r7, #6
10050bf0:	881b      	ldrh	r3, [r3, #0]
10050bf2:	2b00      	cmp	r3, #0
10050bf4:	d101      	bne.n	10050bfa <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
10050bf6:	2301      	movs	r3, #1
10050bf8:	e088      	b.n	10050d0c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
10050bfa:	68fb      	ldr	r3, [r7, #12]
10050bfc:	689a      	ldr	r2, [r3, #8]
10050bfe:	2380      	movs	r3, #128	@ 0x80
10050c00:	015b      	lsls	r3, r3, #5
10050c02:	429a      	cmp	r2, r3
10050c04:	d109      	bne.n	10050c1a <HAL_UART_Transmit+0x4e>
10050c06:	68fb      	ldr	r3, [r7, #12]
10050c08:	691b      	ldr	r3, [r3, #16]
10050c0a:	2b00      	cmp	r3, #0
10050c0c:	d105      	bne.n	10050c1a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
10050c0e:	68bb      	ldr	r3, [r7, #8]
10050c10:	2201      	movs	r2, #1
10050c12:	4013      	ands	r3, r2
10050c14:	d001      	beq.n	10050c1a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
10050c16:	2301      	movs	r3, #1
10050c18:	e078      	b.n	10050d0c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
10050c1a:	68fb      	ldr	r3, [r7, #12]
10050c1c:	2290      	movs	r2, #144	@ 0x90
10050c1e:	2100      	movs	r1, #0
10050c20:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
10050c22:	68fb      	ldr	r3, [r7, #12]
10050c24:	2288      	movs	r2, #136	@ 0x88
10050c26:	2121      	movs	r1, #33	@ 0x21
10050c28:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
10050c2a:	f7fb ffb1 	bl	1004cb90 <HAL_GetTick>
10050c2e:	0003      	movs	r3, r0
10050c30:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
10050c32:	68fb      	ldr	r3, [r7, #12]
10050c34:	1dba      	adds	r2, r7, #6
10050c36:	2154      	movs	r1, #84	@ 0x54
10050c38:	8812      	ldrh	r2, [r2, #0]
10050c3a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
10050c3c:	68fb      	ldr	r3, [r7, #12]
10050c3e:	1dba      	adds	r2, r7, #6
10050c40:	2156      	movs	r1, #86	@ 0x56
10050c42:	8812      	ldrh	r2, [r2, #0]
10050c44:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
10050c46:	68fb      	ldr	r3, [r7, #12]
10050c48:	689a      	ldr	r2, [r3, #8]
10050c4a:	2380      	movs	r3, #128	@ 0x80
10050c4c:	015b      	lsls	r3, r3, #5
10050c4e:	429a      	cmp	r2, r3
10050c50:	d108      	bne.n	10050c64 <HAL_UART_Transmit+0x98>
10050c52:	68fb      	ldr	r3, [r7, #12]
10050c54:	691b      	ldr	r3, [r3, #16]
10050c56:	2b00      	cmp	r3, #0
10050c58:	d104      	bne.n	10050c64 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
10050c5a:	2300      	movs	r3, #0
10050c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
10050c5e:	68bb      	ldr	r3, [r7, #8]
10050c60:	61bb      	str	r3, [r7, #24]
10050c62:	e003      	b.n	10050c6c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
10050c64:	68bb      	ldr	r3, [r7, #8]
10050c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
10050c68:	2300      	movs	r3, #0
10050c6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
10050c6c:	e030      	b.n	10050cd0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
10050c6e:	697a      	ldr	r2, [r7, #20]
10050c70:	68f8      	ldr	r0, [r7, #12]
10050c72:	683b      	ldr	r3, [r7, #0]
10050c74:	9300      	str	r3, [sp, #0]
10050c76:	0013      	movs	r3, r2
10050c78:	2200      	movs	r2, #0
10050c7a:	2180      	movs	r1, #128	@ 0x80
10050c7c:	f000 fb10 	bl	100512a0 <UART_WaitOnFlagUntilTimeout>
10050c80:	1e03      	subs	r3, r0, #0
10050c82:	d005      	beq.n	10050c90 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
10050c84:	68fb      	ldr	r3, [r7, #12]
10050c86:	2288      	movs	r2, #136	@ 0x88
10050c88:	2120      	movs	r1, #32
10050c8a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
10050c8c:	2303      	movs	r3, #3
10050c8e:	e03d      	b.n	10050d0c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
10050c90:	69fb      	ldr	r3, [r7, #28]
10050c92:	2b00      	cmp	r3, #0
10050c94:	d10b      	bne.n	10050cae <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
10050c96:	69bb      	ldr	r3, [r7, #24]
10050c98:	881b      	ldrh	r3, [r3, #0]
10050c9a:	001a      	movs	r2, r3
10050c9c:	68fb      	ldr	r3, [r7, #12]
10050c9e:	681b      	ldr	r3, [r3, #0]
10050ca0:	05d2      	lsls	r2, r2, #23
10050ca2:	0dd2      	lsrs	r2, r2, #23
10050ca4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
10050ca6:	69bb      	ldr	r3, [r7, #24]
10050ca8:	3302      	adds	r3, #2
10050caa:	61bb      	str	r3, [r7, #24]
10050cac:	e007      	b.n	10050cbe <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
10050cae:	69fb      	ldr	r3, [r7, #28]
10050cb0:	781a      	ldrb	r2, [r3, #0]
10050cb2:	68fb      	ldr	r3, [r7, #12]
10050cb4:	681b      	ldr	r3, [r3, #0]
10050cb6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
10050cb8:	69fb      	ldr	r3, [r7, #28]
10050cba:	3301      	adds	r3, #1
10050cbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
10050cbe:	68fb      	ldr	r3, [r7, #12]
10050cc0:	2256      	movs	r2, #86	@ 0x56
10050cc2:	5a9b      	ldrh	r3, [r3, r2]
10050cc4:	b29b      	uxth	r3, r3
10050cc6:	3b01      	subs	r3, #1
10050cc8:	b299      	uxth	r1, r3
10050cca:	68fb      	ldr	r3, [r7, #12]
10050ccc:	2256      	movs	r2, #86	@ 0x56
10050cce:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
10050cd0:	68fb      	ldr	r3, [r7, #12]
10050cd2:	2256      	movs	r2, #86	@ 0x56
10050cd4:	5a9b      	ldrh	r3, [r3, r2]
10050cd6:	b29b      	uxth	r3, r3
10050cd8:	2b00      	cmp	r3, #0
10050cda:	d1c8      	bne.n	10050c6e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
10050cdc:	697a      	ldr	r2, [r7, #20]
10050cde:	68f8      	ldr	r0, [r7, #12]
10050ce0:	683b      	ldr	r3, [r7, #0]
10050ce2:	9300      	str	r3, [sp, #0]
10050ce4:	0013      	movs	r3, r2
10050ce6:	2200      	movs	r2, #0
10050ce8:	2140      	movs	r1, #64	@ 0x40
10050cea:	f000 fad9 	bl	100512a0 <UART_WaitOnFlagUntilTimeout>
10050cee:	1e03      	subs	r3, r0, #0
10050cf0:	d005      	beq.n	10050cfe <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
10050cf2:	68fb      	ldr	r3, [r7, #12]
10050cf4:	2288      	movs	r2, #136	@ 0x88
10050cf6:	2120      	movs	r1, #32
10050cf8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
10050cfa:	2303      	movs	r3, #3
10050cfc:	e006      	b.n	10050d0c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
10050cfe:	68fb      	ldr	r3, [r7, #12]
10050d00:	2288      	movs	r2, #136	@ 0x88
10050d02:	2120      	movs	r1, #32
10050d04:	5099      	str	r1, [r3, r2]

    return HAL_OK;
10050d06:	2300      	movs	r3, #0
10050d08:	e000      	b.n	10050d0c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
10050d0a:	2302      	movs	r3, #2
  }
}
10050d0c:	0018      	movs	r0, r3
10050d0e:	46bd      	mov	sp, r7
10050d10:	b008      	add	sp, #32
10050d12:	bd80      	pop	{r7, pc}

10050d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
10050d14:	b5b0      	push	{r4, r5, r7, lr}
10050d16:	b090      	sub	sp, #64	@ 0x40
10050d18:	af00      	add	r7, sp, #0
10050d1a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
10050d1c:	231b      	movs	r3, #27
10050d1e:	2220      	movs	r2, #32
10050d20:	189b      	adds	r3, r3, r2
10050d22:	19db      	adds	r3, r3, r7
10050d24:	2200      	movs	r2, #0
10050d26:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
10050d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050d2a:	689a      	ldr	r2, [r3, #8]
10050d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050d2e:	691b      	ldr	r3, [r3, #16]
10050d30:	431a      	orrs	r2, r3
10050d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050d34:	695b      	ldr	r3, [r3, #20]
10050d36:	431a      	orrs	r2, r3
10050d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050d3a:	69db      	ldr	r3, [r3, #28]
10050d3c:	4313      	orrs	r3, r2
10050d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
10050d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050d42:	681b      	ldr	r3, [r3, #0]
10050d44:	681b      	ldr	r3, [r3, #0]
10050d46:	4aa1      	ldr	r2, [pc, #644]	@ (10050fcc <UART_SetConfig+0x2b8>)
10050d48:	4013      	ands	r3, r2
10050d4a:	0019      	movs	r1, r3
10050d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050d4e:	681a      	ldr	r2, [r3, #0]
10050d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10050d52:	430b      	orrs	r3, r1
10050d54:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
10050d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050d58:	681b      	ldr	r3, [r3, #0]
10050d5a:	685b      	ldr	r3, [r3, #4]
10050d5c:	4a9c      	ldr	r2, [pc, #624]	@ (10050fd0 <UART_SetConfig+0x2bc>)
10050d5e:	4013      	ands	r3, r2
10050d60:	0018      	movs	r0, r3
10050d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050d64:	68d9      	ldr	r1, [r3, #12]
10050d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050d68:	681a      	ldr	r2, [r3, #0]
10050d6a:	0003      	movs	r3, r0
10050d6c:	430b      	orrs	r3, r1
10050d6e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
10050d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050d72:	699b      	ldr	r3, [r3, #24]
10050d74:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
10050d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050d78:	681b      	ldr	r3, [r3, #0]
10050d7a:	4a96      	ldr	r2, [pc, #600]	@ (10050fd4 <UART_SetConfig+0x2c0>)
10050d7c:	4293      	cmp	r3, r2
10050d7e:	d004      	beq.n	10050d8a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
10050d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050d82:	6a1b      	ldr	r3, [r3, #32]
10050d84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10050d86:	4313      	orrs	r3, r2
10050d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
10050d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050d8c:	681b      	ldr	r3, [r3, #0]
10050d8e:	689b      	ldr	r3, [r3, #8]
10050d90:	4a91      	ldr	r2, [pc, #580]	@ (10050fd8 <UART_SetConfig+0x2c4>)
10050d92:	4013      	ands	r3, r2
10050d94:	0019      	movs	r1, r3
10050d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050d98:	681a      	ldr	r2, [r3, #0]
10050d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10050d9c:	430b      	orrs	r3, r1
10050d9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
10050da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050da2:	681b      	ldr	r3, [r3, #0]
10050da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10050da6:	220f      	movs	r2, #15
10050da8:	4393      	bics	r3, r2
10050daa:	0018      	movs	r0, r3
10050dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050dae:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10050db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050db2:	681a      	ldr	r2, [r3, #0]
10050db4:	0003      	movs	r3, r0
10050db6:	430b      	orrs	r3, r1
10050db8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
10050dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050dbc:	681b      	ldr	r3, [r3, #0]
10050dbe:	4a85      	ldr	r2, [pc, #532]	@ (10050fd4 <UART_SetConfig+0x2c0>)
10050dc0:	4293      	cmp	r3, r2
10050dc2:	d16d      	bne.n	10050ea0 <UART_SetConfig+0x18c>
  {
    /* Retrieve frequency clock */
#if defined(RCC_CFGR_LPUCLKSEL)
    pclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_LPUART1);
10050dc4:	2010      	movs	r0, #16
10050dc6:	f7ff fe0f 	bl	100509e8 <HAL_RCCEx_GetPeriphCLKFreq>
10050dca:	0003      	movs	r3, r0
10050dcc:	637b      	str	r3, [r7, #52]	@ 0x34
#else
    pclk = UART_PERIPHCLK;
#endif /* RCC_CFGR_LPUCLKSEL */

    /* If proper clock source reported */
    if (pclk != 0U)
10050dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10050dd0:	2b00      	cmp	r3, #0
10050dd2:	d100      	bne.n	10050dd6 <UART_SetConfig+0xc2>
10050dd4:	e0e3      	b.n	10050f9e <UART_SetConfig+0x28a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
10050dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050dd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10050dda:	4b80      	ldr	r3, [pc, #512]	@ (10050fdc <UART_SetConfig+0x2c8>)
10050ddc:	0052      	lsls	r2, r2, #1
10050dde:	5ad3      	ldrh	r3, [r2, r3]
10050de0:	0019      	movs	r1, r3
10050de2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10050de4:	f7f0 fa30 	bl	10041248 <__udivsi3>
10050de8:	0003      	movs	r3, r0
10050dea:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10050dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050dee:	685a      	ldr	r2, [r3, #4]
10050df0:	0013      	movs	r3, r2
10050df2:	005b      	lsls	r3, r3, #1
10050df4:	189b      	adds	r3, r3, r2
10050df6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10050df8:	429a      	cmp	r2, r3
10050dfa:	d305      	bcc.n	10050e08 <UART_SetConfig+0xf4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
10050dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050dfe:	685b      	ldr	r3, [r3, #4]
10050e00:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10050e02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10050e04:	429a      	cmp	r2, r3
10050e06:	d906      	bls.n	10050e16 <UART_SetConfig+0x102>
      {
        ret = HAL_ERROR;
10050e08:	231b      	movs	r3, #27
10050e0a:	2220      	movs	r2, #32
10050e0c:	189b      	adds	r3, r3, r2
10050e0e:	19db      	adds	r3, r3, r7
10050e10:	2201      	movs	r2, #1
10050e12:	701a      	strb	r2, [r3, #0]
10050e14:	e0c3      	b.n	10050f9e <UART_SetConfig+0x28a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10050e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10050e18:	61bb      	str	r3, [r7, #24]
10050e1a:	2300      	movs	r3, #0
10050e1c:	61fb      	str	r3, [r7, #28]
10050e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050e20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10050e22:	4b6e      	ldr	r3, [pc, #440]	@ (10050fdc <UART_SetConfig+0x2c8>)
10050e24:	0052      	lsls	r2, r2, #1
10050e26:	5ad3      	ldrh	r3, [r2, r3]
10050e28:	613b      	str	r3, [r7, #16]
10050e2a:	2300      	movs	r3, #0
10050e2c:	617b      	str	r3, [r7, #20]
10050e2e:	693a      	ldr	r2, [r7, #16]
10050e30:	697b      	ldr	r3, [r7, #20]
10050e32:	69b8      	ldr	r0, [r7, #24]
10050e34:	69f9      	ldr	r1, [r7, #28]
10050e36:	f7f0 fafb 	bl	10041430 <__aeabi_uldivmod>
10050e3a:	0002      	movs	r2, r0
10050e3c:	000b      	movs	r3, r1
10050e3e:	0e11      	lsrs	r1, r2, #24
10050e40:	021d      	lsls	r5, r3, #8
10050e42:	430d      	orrs	r5, r1
10050e44:	0214      	lsls	r4, r2, #8
10050e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050e48:	685b      	ldr	r3, [r3, #4]
10050e4a:	085b      	lsrs	r3, r3, #1
10050e4c:	60bb      	str	r3, [r7, #8]
10050e4e:	2300      	movs	r3, #0
10050e50:	60fb      	str	r3, [r7, #12]
10050e52:	68b8      	ldr	r0, [r7, #8]
10050e54:	68f9      	ldr	r1, [r7, #12]
10050e56:	1900      	adds	r0, r0, r4
10050e58:	4169      	adcs	r1, r5
10050e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050e5c:	685b      	ldr	r3, [r3, #4]
10050e5e:	603b      	str	r3, [r7, #0]
10050e60:	2300      	movs	r3, #0
10050e62:	607b      	str	r3, [r7, #4]
10050e64:	683a      	ldr	r2, [r7, #0]
10050e66:	687b      	ldr	r3, [r7, #4]
10050e68:	f7f0 fae2 	bl	10041430 <__aeabi_uldivmod>
10050e6c:	0002      	movs	r2, r0
10050e6e:	000b      	movs	r3, r1
10050e70:	0013      	movs	r3, r2
10050e72:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
10050e74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10050e76:	23c0      	movs	r3, #192	@ 0xc0
10050e78:	009b      	lsls	r3, r3, #2
10050e7a:	429a      	cmp	r2, r3
10050e7c:	d309      	bcc.n	10050e92 <UART_SetConfig+0x17e>
10050e7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10050e80:	2380      	movs	r3, #128	@ 0x80
10050e82:	035b      	lsls	r3, r3, #13
10050e84:	429a      	cmp	r2, r3
10050e86:	d204      	bcs.n	10050e92 <UART_SetConfig+0x17e>
        {
          huart->Instance->BRR = usartdiv;
10050e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050e8a:	681b      	ldr	r3, [r3, #0]
10050e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10050e8e:	60da      	str	r2, [r3, #12]
10050e90:	e085      	b.n	10050f9e <UART_SetConfig+0x28a>
        }
        else
        {
          ret = HAL_ERROR;
10050e92:	231b      	movs	r3, #27
10050e94:	2220      	movs	r2, #32
10050e96:	189b      	adds	r3, r3, r2
10050e98:	19db      	adds	r3, r3, r7
10050e9a:	2201      	movs	r2, #1
10050e9c:	701a      	strb	r2, [r3, #0]
10050e9e:	e07e      	b.n	10050f9e <UART_SetConfig+0x28a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
10050ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050ea2:	69da      	ldr	r2, [r3, #28]
10050ea4:	2380      	movs	r3, #128	@ 0x80
10050ea6:	021b      	lsls	r3, r3, #8
10050ea8:	429a      	cmp	r2, r3
10050eaa:	d148      	bne.n	10050f3e <UART_SetConfig+0x22a>
  {
    pclk = UART_PERIPHCLK;
10050eac:	4b4c      	ldr	r3, [pc, #304]	@ (10050fe0 <UART_SetConfig+0x2cc>)
10050eae:	637b      	str	r3, [r7, #52]	@ 0x34

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
10050eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10050eb2:	2b00      	cmp	r3, #0
10050eb4:	d100      	bne.n	10050eb8 <UART_SetConfig+0x1a4>
10050eb6:	e072      	b.n	10050f9e <UART_SetConfig+0x28a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10050eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050eba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10050ebc:	4b47      	ldr	r3, [pc, #284]	@ (10050fdc <UART_SetConfig+0x2c8>)
10050ebe:	0052      	lsls	r2, r2, #1
10050ec0:	5ad3      	ldrh	r3, [r2, r3]
10050ec2:	0019      	movs	r1, r3
10050ec4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10050ec6:	f7f0 f9bf 	bl	10041248 <__udivsi3>
10050eca:	0003      	movs	r3, r0
10050ecc:	005a      	lsls	r2, r3, #1
10050ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050ed0:	685b      	ldr	r3, [r3, #4]
10050ed2:	085b      	lsrs	r3, r3, #1
10050ed4:	18d2      	adds	r2, r2, r3
10050ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050ed8:	685b      	ldr	r3, [r3, #4]
10050eda:	0019      	movs	r1, r3
10050edc:	0010      	movs	r0, r2
10050ede:	f7f0 f9b3 	bl	10041248 <__udivsi3>
10050ee2:	0003      	movs	r3, r0
10050ee4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10050ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10050ee8:	2b0f      	cmp	r3, #15
10050eea:	d921      	bls.n	10050f30 <UART_SetConfig+0x21c>
10050eec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10050eee:	2380      	movs	r3, #128	@ 0x80
10050ef0:	025b      	lsls	r3, r3, #9
10050ef2:	429a      	cmp	r2, r3
10050ef4:	d21c      	bcs.n	10050f30 <UART_SetConfig+0x21c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
10050ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10050ef8:	b29a      	uxth	r2, r3
10050efa:	200e      	movs	r0, #14
10050efc:	2420      	movs	r4, #32
10050efe:	1903      	adds	r3, r0, r4
10050f00:	19db      	adds	r3, r3, r7
10050f02:	210f      	movs	r1, #15
10050f04:	438a      	bics	r2, r1
10050f06:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
10050f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10050f0a:	085b      	lsrs	r3, r3, #1
10050f0c:	b29b      	uxth	r3, r3
10050f0e:	2207      	movs	r2, #7
10050f10:	4013      	ands	r3, r2
10050f12:	b299      	uxth	r1, r3
10050f14:	1903      	adds	r3, r0, r4
10050f16:	19db      	adds	r3, r3, r7
10050f18:	1902      	adds	r2, r0, r4
10050f1a:	19d2      	adds	r2, r2, r7
10050f1c:	8812      	ldrh	r2, [r2, #0]
10050f1e:	430a      	orrs	r2, r1
10050f20:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
10050f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050f24:	681b      	ldr	r3, [r3, #0]
10050f26:	1902      	adds	r2, r0, r4
10050f28:	19d2      	adds	r2, r2, r7
10050f2a:	8812      	ldrh	r2, [r2, #0]
10050f2c:	60da      	str	r2, [r3, #12]
10050f2e:	e036      	b.n	10050f9e <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
10050f30:	231b      	movs	r3, #27
10050f32:	2220      	movs	r2, #32
10050f34:	189b      	adds	r3, r3, r2
10050f36:	19db      	adds	r3, r3, r7
10050f38:	2201      	movs	r2, #1
10050f3a:	701a      	strb	r2, [r3, #0]
10050f3c:	e02f      	b.n	10050f9e <UART_SetConfig+0x28a>
      }
    }
  }
  else
  {
    pclk = UART_PERIPHCLK;
10050f3e:	4b28      	ldr	r3, [pc, #160]	@ (10050fe0 <UART_SetConfig+0x2cc>)
10050f40:	637b      	str	r3, [r7, #52]	@ 0x34

    if (pclk != 0U)
10050f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10050f44:	2b00      	cmp	r3, #0
10050f46:	d02a      	beq.n	10050f9e <UART_SetConfig+0x28a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10050f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050f4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10050f4c:	4b23      	ldr	r3, [pc, #140]	@ (10050fdc <UART_SetConfig+0x2c8>)
10050f4e:	0052      	lsls	r2, r2, #1
10050f50:	5ad3      	ldrh	r3, [r2, r3]
10050f52:	0019      	movs	r1, r3
10050f54:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10050f56:	f7f0 f977 	bl	10041248 <__udivsi3>
10050f5a:	0003      	movs	r3, r0
10050f5c:	001a      	movs	r2, r3
10050f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050f60:	685b      	ldr	r3, [r3, #4]
10050f62:	085b      	lsrs	r3, r3, #1
10050f64:	18d2      	adds	r2, r2, r3
10050f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050f68:	685b      	ldr	r3, [r3, #4]
10050f6a:	0019      	movs	r1, r3
10050f6c:	0010      	movs	r0, r2
10050f6e:	f7f0 f96b 	bl	10041248 <__udivsi3>
10050f72:	0003      	movs	r3, r0
10050f74:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10050f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10050f78:	2b0f      	cmp	r3, #15
10050f7a:	d90a      	bls.n	10050f92 <UART_SetConfig+0x27e>
10050f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10050f7e:	2380      	movs	r3, #128	@ 0x80
10050f80:	025b      	lsls	r3, r3, #9
10050f82:	429a      	cmp	r2, r3
10050f84:	d205      	bcs.n	10050f92 <UART_SetConfig+0x27e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
10050f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10050f88:	b29a      	uxth	r2, r3
10050f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050f8c:	681b      	ldr	r3, [r3, #0]
10050f8e:	60da      	str	r2, [r3, #12]
10050f90:	e005      	b.n	10050f9e <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
10050f92:	231b      	movs	r3, #27
10050f94:	2220      	movs	r2, #32
10050f96:	189b      	adds	r3, r3, r2
10050f98:	19db      	adds	r3, r3, r7
10050f9a:	2201      	movs	r2, #1
10050f9c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
10050f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050fa0:	226a      	movs	r2, #106	@ 0x6a
10050fa2:	2101      	movs	r1, #1
10050fa4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
10050fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050fa8:	2268      	movs	r2, #104	@ 0x68
10050faa:	2101      	movs	r1, #1
10050fac:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
10050fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050fb0:	2200      	movs	r2, #0
10050fb2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
10050fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050fb6:	2200      	movs	r2, #0
10050fb8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
10050fba:	231b      	movs	r3, #27
10050fbc:	2220      	movs	r2, #32
10050fbe:	189b      	adds	r3, r3, r2
10050fc0:	19db      	adds	r3, r3, r7
10050fc2:	781b      	ldrb	r3, [r3, #0]
}
10050fc4:	0018      	movs	r0, r3
10050fc6:	46bd      	mov	sp, r7
10050fc8:	b010      	add	sp, #64	@ 0x40
10050fca:	bdb0      	pop	{r4, r5, r7, pc}
10050fcc:	cfff69f3 	.word	0xcfff69f3
10050fd0:	ffffcfff 	.word	0xffffcfff
10050fd4:	41005000 	.word	0x41005000
10050fd8:	11fff4ff 	.word	0x11fff4ff
10050fdc:	10069edc 	.word	0x10069edc
10050fe0:	00f42400 	.word	0x00f42400

10050fe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
10050fe4:	b580      	push	{r7, lr}
10050fe6:	b082      	sub	sp, #8
10050fe8:	af00      	add	r7, sp, #0
10050fea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
10050fec:	687b      	ldr	r3, [r7, #4]
10050fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10050ff0:	2208      	movs	r2, #8
10050ff2:	4013      	ands	r3, r2
10050ff4:	d00b      	beq.n	1005100e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
10050ff6:	687b      	ldr	r3, [r7, #4]
10050ff8:	681b      	ldr	r3, [r3, #0]
10050ffa:	685b      	ldr	r3, [r3, #4]
10050ffc:	4a4a      	ldr	r2, [pc, #296]	@ (10051128 <UART_AdvFeatureConfig+0x144>)
10050ffe:	4013      	ands	r3, r2
10051000:	0019      	movs	r1, r3
10051002:	687b      	ldr	r3, [r7, #4]
10051004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10051006:	687b      	ldr	r3, [r7, #4]
10051008:	681b      	ldr	r3, [r3, #0]
1005100a:	430a      	orrs	r2, r1
1005100c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
1005100e:	687b      	ldr	r3, [r7, #4]
10051010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10051012:	2201      	movs	r2, #1
10051014:	4013      	ands	r3, r2
10051016:	d00b      	beq.n	10051030 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
10051018:	687b      	ldr	r3, [r7, #4]
1005101a:	681b      	ldr	r3, [r3, #0]
1005101c:	685b      	ldr	r3, [r3, #4]
1005101e:	4a43      	ldr	r2, [pc, #268]	@ (1005112c <UART_AdvFeatureConfig+0x148>)
10051020:	4013      	ands	r3, r2
10051022:	0019      	movs	r1, r3
10051024:	687b      	ldr	r3, [r7, #4]
10051026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10051028:	687b      	ldr	r3, [r7, #4]
1005102a:	681b      	ldr	r3, [r3, #0]
1005102c:	430a      	orrs	r2, r1
1005102e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
10051030:	687b      	ldr	r3, [r7, #4]
10051032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10051034:	2202      	movs	r2, #2
10051036:	4013      	ands	r3, r2
10051038:	d00b      	beq.n	10051052 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
1005103a:	687b      	ldr	r3, [r7, #4]
1005103c:	681b      	ldr	r3, [r3, #0]
1005103e:	685b      	ldr	r3, [r3, #4]
10051040:	4a3b      	ldr	r2, [pc, #236]	@ (10051130 <UART_AdvFeatureConfig+0x14c>)
10051042:	4013      	ands	r3, r2
10051044:	0019      	movs	r1, r3
10051046:	687b      	ldr	r3, [r7, #4]
10051048:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
1005104a:	687b      	ldr	r3, [r7, #4]
1005104c:	681b      	ldr	r3, [r3, #0]
1005104e:	430a      	orrs	r2, r1
10051050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
10051052:	687b      	ldr	r3, [r7, #4]
10051054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10051056:	2204      	movs	r2, #4
10051058:	4013      	ands	r3, r2
1005105a:	d00b      	beq.n	10051074 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
1005105c:	687b      	ldr	r3, [r7, #4]
1005105e:	681b      	ldr	r3, [r3, #0]
10051060:	685b      	ldr	r3, [r3, #4]
10051062:	4a34      	ldr	r2, [pc, #208]	@ (10051134 <UART_AdvFeatureConfig+0x150>)
10051064:	4013      	ands	r3, r2
10051066:	0019      	movs	r1, r3
10051068:	687b      	ldr	r3, [r7, #4]
1005106a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1005106c:	687b      	ldr	r3, [r7, #4]
1005106e:	681b      	ldr	r3, [r3, #0]
10051070:	430a      	orrs	r2, r1
10051072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
10051074:	687b      	ldr	r3, [r7, #4]
10051076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10051078:	2210      	movs	r2, #16
1005107a:	4013      	ands	r3, r2
1005107c:	d00b      	beq.n	10051096 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
1005107e:	687b      	ldr	r3, [r7, #4]
10051080:	681b      	ldr	r3, [r3, #0]
10051082:	689b      	ldr	r3, [r3, #8]
10051084:	4a2c      	ldr	r2, [pc, #176]	@ (10051138 <UART_AdvFeatureConfig+0x154>)
10051086:	4013      	ands	r3, r2
10051088:	0019      	movs	r1, r3
1005108a:	687b      	ldr	r3, [r7, #4]
1005108c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
1005108e:	687b      	ldr	r3, [r7, #4]
10051090:	681b      	ldr	r3, [r3, #0]
10051092:	430a      	orrs	r2, r1
10051094:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
10051096:	687b      	ldr	r3, [r7, #4]
10051098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1005109a:	2220      	movs	r2, #32
1005109c:	4013      	ands	r3, r2
1005109e:	d00b      	beq.n	100510b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
100510a0:	687b      	ldr	r3, [r7, #4]
100510a2:	681b      	ldr	r3, [r3, #0]
100510a4:	689b      	ldr	r3, [r3, #8]
100510a6:	4a25      	ldr	r2, [pc, #148]	@ (1005113c <UART_AdvFeatureConfig+0x158>)
100510a8:	4013      	ands	r3, r2
100510aa:	0019      	movs	r1, r3
100510ac:	687b      	ldr	r3, [r7, #4]
100510ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
100510b0:	687b      	ldr	r3, [r7, #4]
100510b2:	681b      	ldr	r3, [r3, #0]
100510b4:	430a      	orrs	r2, r1
100510b6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
100510b8:	687b      	ldr	r3, [r7, #4]
100510ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100510bc:	2240      	movs	r2, #64	@ 0x40
100510be:	4013      	ands	r3, r2
100510c0:	d01d      	beq.n	100510fe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
100510c2:	687b      	ldr	r3, [r7, #4]
100510c4:	681b      	ldr	r3, [r3, #0]
100510c6:	685b      	ldr	r3, [r3, #4]
100510c8:	4a1d      	ldr	r2, [pc, #116]	@ (10051140 <UART_AdvFeatureConfig+0x15c>)
100510ca:	4013      	ands	r3, r2
100510cc:	0019      	movs	r1, r3
100510ce:	687b      	ldr	r3, [r7, #4]
100510d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100510d2:	687b      	ldr	r3, [r7, #4]
100510d4:	681b      	ldr	r3, [r3, #0]
100510d6:	430a      	orrs	r2, r1
100510d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
100510da:	687b      	ldr	r3, [r7, #4]
100510dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100510de:	2380      	movs	r3, #128	@ 0x80
100510e0:	035b      	lsls	r3, r3, #13
100510e2:	429a      	cmp	r2, r3
100510e4:	d10b      	bne.n	100510fe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
100510e6:	687b      	ldr	r3, [r7, #4]
100510e8:	681b      	ldr	r3, [r3, #0]
100510ea:	685b      	ldr	r3, [r3, #4]
100510ec:	4a15      	ldr	r2, [pc, #84]	@ (10051144 <UART_AdvFeatureConfig+0x160>)
100510ee:	4013      	ands	r3, r2
100510f0:	0019      	movs	r1, r3
100510f2:	687b      	ldr	r3, [r7, #4]
100510f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
100510f6:	687b      	ldr	r3, [r7, #4]
100510f8:	681b      	ldr	r3, [r3, #0]
100510fa:	430a      	orrs	r2, r1
100510fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
100510fe:	687b      	ldr	r3, [r7, #4]
10051100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10051102:	2280      	movs	r2, #128	@ 0x80
10051104:	4013      	ands	r3, r2
10051106:	d00b      	beq.n	10051120 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
10051108:	687b      	ldr	r3, [r7, #4]
1005110a:	681b      	ldr	r3, [r3, #0]
1005110c:	685b      	ldr	r3, [r3, #4]
1005110e:	4a0e      	ldr	r2, [pc, #56]	@ (10051148 <UART_AdvFeatureConfig+0x164>)
10051110:	4013      	ands	r3, r2
10051112:	0019      	movs	r1, r3
10051114:	687b      	ldr	r3, [r7, #4]
10051116:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
10051118:	687b      	ldr	r3, [r7, #4]
1005111a:	681b      	ldr	r3, [r3, #0]
1005111c:	430a      	orrs	r2, r1
1005111e:	605a      	str	r2, [r3, #4]
  }
}
10051120:	46c0      	nop			@ (mov r8, r8)
10051122:	46bd      	mov	sp, r7
10051124:	b002      	add	sp, #8
10051126:	bd80      	pop	{r7, pc}
10051128:	ffff7fff 	.word	0xffff7fff
1005112c:	fffdffff 	.word	0xfffdffff
10051130:	fffeffff 	.word	0xfffeffff
10051134:	fffbffff 	.word	0xfffbffff
10051138:	ffffefff 	.word	0xffffefff
1005113c:	ffffdfff 	.word	0xffffdfff
10051140:	ffefffff 	.word	0xffefffff
10051144:	ff9fffff 	.word	0xff9fffff
10051148:	fff7ffff 	.word	0xfff7ffff

1005114c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
1005114c:	b580      	push	{r7, lr}
1005114e:	b092      	sub	sp, #72	@ 0x48
10051150:	af02      	add	r7, sp, #8
10051152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
10051154:	687b      	ldr	r3, [r7, #4]
10051156:	2290      	movs	r2, #144	@ 0x90
10051158:	2100      	movs	r1, #0
1005115a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
1005115c:	f7fb fd18 	bl	1004cb90 <HAL_GetTick>
10051160:	0003      	movs	r3, r0
10051162:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
10051164:	687b      	ldr	r3, [r7, #4]
10051166:	681b      	ldr	r3, [r3, #0]
10051168:	681b      	ldr	r3, [r3, #0]
1005116a:	2208      	movs	r2, #8
1005116c:	4013      	ands	r3, r2
1005116e:	2b08      	cmp	r3, #8
10051170:	d12d      	bne.n	100511ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10051172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10051174:	2280      	movs	r2, #128	@ 0x80
10051176:	0391      	lsls	r1, r2, #14
10051178:	6878      	ldr	r0, [r7, #4]
1005117a:	4a47      	ldr	r2, [pc, #284]	@ (10051298 <UART_CheckIdleState+0x14c>)
1005117c:	9200      	str	r2, [sp, #0]
1005117e:	2200      	movs	r2, #0
10051180:	f000 f88e 	bl	100512a0 <UART_WaitOnFlagUntilTimeout>
10051184:	1e03      	subs	r3, r0, #0
10051186:	d022      	beq.n	100511ce <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10051188:	f3ef 8310 	mrs	r3, PRIMASK
1005118c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
1005118e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
10051190:	63bb      	str	r3, [r7, #56]	@ 0x38
10051192:	2301      	movs	r3, #1
10051194:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10051196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10051198:	f383 8810 	msr	PRIMASK, r3
}
1005119c:	46c0      	nop			@ (mov r8, r8)
1005119e:	687b      	ldr	r3, [r7, #4]
100511a0:	681b      	ldr	r3, [r3, #0]
100511a2:	681a      	ldr	r2, [r3, #0]
100511a4:	687b      	ldr	r3, [r7, #4]
100511a6:	681b      	ldr	r3, [r3, #0]
100511a8:	2180      	movs	r1, #128	@ 0x80
100511aa:	438a      	bics	r2, r1
100511ac:	601a      	str	r2, [r3, #0]
100511ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100511b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100511b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100511b4:	f383 8810 	msr	PRIMASK, r3
}
100511b8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
100511ba:	687b      	ldr	r3, [r7, #4]
100511bc:	2288      	movs	r2, #136	@ 0x88
100511be:	2120      	movs	r1, #32
100511c0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
100511c2:	687b      	ldr	r3, [r7, #4]
100511c4:	2284      	movs	r2, #132	@ 0x84
100511c6:	2100      	movs	r1, #0
100511c8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
100511ca:	2303      	movs	r3, #3
100511cc:	e060      	b.n	10051290 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
100511ce:	687b      	ldr	r3, [r7, #4]
100511d0:	681b      	ldr	r3, [r3, #0]
100511d2:	681b      	ldr	r3, [r3, #0]
100511d4:	2204      	movs	r2, #4
100511d6:	4013      	ands	r3, r2
100511d8:	2b04      	cmp	r3, #4
100511da:	d146      	bne.n	1005126a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
100511dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100511de:	2280      	movs	r2, #128	@ 0x80
100511e0:	03d1      	lsls	r1, r2, #15
100511e2:	6878      	ldr	r0, [r7, #4]
100511e4:	4a2c      	ldr	r2, [pc, #176]	@ (10051298 <UART_CheckIdleState+0x14c>)
100511e6:	9200      	str	r2, [sp, #0]
100511e8:	2200      	movs	r2, #0
100511ea:	f000 f859 	bl	100512a0 <UART_WaitOnFlagUntilTimeout>
100511ee:	1e03      	subs	r3, r0, #0
100511f0:	d03b      	beq.n	1005126a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100511f2:	f3ef 8310 	mrs	r3, PRIMASK
100511f6:	60fb      	str	r3, [r7, #12]
  return(result);
100511f8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
100511fa:	637b      	str	r3, [r7, #52]	@ 0x34
100511fc:	2301      	movs	r3, #1
100511fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10051200:	693b      	ldr	r3, [r7, #16]
10051202:	f383 8810 	msr	PRIMASK, r3
}
10051206:	46c0      	nop			@ (mov r8, r8)
10051208:	687b      	ldr	r3, [r7, #4]
1005120a:	681b      	ldr	r3, [r3, #0]
1005120c:	681a      	ldr	r2, [r3, #0]
1005120e:	687b      	ldr	r3, [r7, #4]
10051210:	681b      	ldr	r3, [r3, #0]
10051212:	4922      	ldr	r1, [pc, #136]	@ (1005129c <UART_CheckIdleState+0x150>)
10051214:	400a      	ands	r2, r1
10051216:	601a      	str	r2, [r3, #0]
10051218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1005121a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1005121c:	697b      	ldr	r3, [r7, #20]
1005121e:	f383 8810 	msr	PRIMASK, r3
}
10051222:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10051224:	f3ef 8310 	mrs	r3, PRIMASK
10051228:	61bb      	str	r3, [r7, #24]
  return(result);
1005122a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1005122c:	633b      	str	r3, [r7, #48]	@ 0x30
1005122e:	2301      	movs	r3, #1
10051230:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10051232:	69fb      	ldr	r3, [r7, #28]
10051234:	f383 8810 	msr	PRIMASK, r3
}
10051238:	46c0      	nop			@ (mov r8, r8)
1005123a:	687b      	ldr	r3, [r7, #4]
1005123c:	681b      	ldr	r3, [r3, #0]
1005123e:	689a      	ldr	r2, [r3, #8]
10051240:	687b      	ldr	r3, [r7, #4]
10051242:	681b      	ldr	r3, [r3, #0]
10051244:	2101      	movs	r1, #1
10051246:	438a      	bics	r2, r1
10051248:	609a      	str	r2, [r3, #8]
1005124a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1005124c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1005124e:	6a3b      	ldr	r3, [r7, #32]
10051250:	f383 8810 	msr	PRIMASK, r3
}
10051254:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
10051256:	687b      	ldr	r3, [r7, #4]
10051258:	228c      	movs	r2, #140	@ 0x8c
1005125a:	2120      	movs	r1, #32
1005125c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
1005125e:	687b      	ldr	r3, [r7, #4]
10051260:	2284      	movs	r2, #132	@ 0x84
10051262:	2100      	movs	r1, #0
10051264:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
10051266:	2303      	movs	r3, #3
10051268:	e012      	b.n	10051290 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
1005126a:	687b      	ldr	r3, [r7, #4]
1005126c:	2288      	movs	r2, #136	@ 0x88
1005126e:	2120      	movs	r1, #32
10051270:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
10051272:	687b      	ldr	r3, [r7, #4]
10051274:	228c      	movs	r2, #140	@ 0x8c
10051276:	2120      	movs	r1, #32
10051278:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1005127a:	687b      	ldr	r3, [r7, #4]
1005127c:	2200      	movs	r2, #0
1005127e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
10051280:	687b      	ldr	r3, [r7, #4]
10051282:	2200      	movs	r2, #0
10051284:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
10051286:	687b      	ldr	r3, [r7, #4]
10051288:	2284      	movs	r2, #132	@ 0x84
1005128a:	2100      	movs	r1, #0
1005128c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1005128e:	2300      	movs	r3, #0
}
10051290:	0018      	movs	r0, r3
10051292:	46bd      	mov	sp, r7
10051294:	b010      	add	sp, #64	@ 0x40
10051296:	bd80      	pop	{r7, pc}
10051298:	01ffffff 	.word	0x01ffffff
1005129c:	fffffedf 	.word	0xfffffedf

100512a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
100512a0:	b580      	push	{r7, lr}
100512a2:	b084      	sub	sp, #16
100512a4:	af00      	add	r7, sp, #0
100512a6:	60f8      	str	r0, [r7, #12]
100512a8:	60b9      	str	r1, [r7, #8]
100512aa:	603b      	str	r3, [r7, #0]
100512ac:	1dfb      	adds	r3, r7, #7
100512ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
100512b0:	e051      	b.n	10051356 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
100512b2:	69bb      	ldr	r3, [r7, #24]
100512b4:	3301      	adds	r3, #1
100512b6:	d04e      	beq.n	10051356 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
100512b8:	f7fb fc6a 	bl	1004cb90 <HAL_GetTick>
100512bc:	0002      	movs	r2, r0
100512be:	683b      	ldr	r3, [r7, #0]
100512c0:	1ad3      	subs	r3, r2, r3
100512c2:	69ba      	ldr	r2, [r7, #24]
100512c4:	429a      	cmp	r2, r3
100512c6:	d302      	bcc.n	100512ce <UART_WaitOnFlagUntilTimeout+0x2e>
100512c8:	69bb      	ldr	r3, [r7, #24]
100512ca:	2b00      	cmp	r3, #0
100512cc:	d101      	bne.n	100512d2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
100512ce:	2303      	movs	r3, #3
100512d0:	e051      	b.n	10051376 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
100512d2:	68fb      	ldr	r3, [r7, #12]
100512d4:	681b      	ldr	r3, [r3, #0]
100512d6:	681b      	ldr	r3, [r3, #0]
100512d8:	2204      	movs	r2, #4
100512da:	4013      	ands	r3, r2
100512dc:	d03b      	beq.n	10051356 <UART_WaitOnFlagUntilTimeout+0xb6>
100512de:	68bb      	ldr	r3, [r7, #8]
100512e0:	2b80      	cmp	r3, #128	@ 0x80
100512e2:	d038      	beq.n	10051356 <UART_WaitOnFlagUntilTimeout+0xb6>
100512e4:	68bb      	ldr	r3, [r7, #8]
100512e6:	2b40      	cmp	r3, #64	@ 0x40
100512e8:	d035      	beq.n	10051356 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
100512ea:	68fb      	ldr	r3, [r7, #12]
100512ec:	681b      	ldr	r3, [r3, #0]
100512ee:	69db      	ldr	r3, [r3, #28]
100512f0:	2208      	movs	r2, #8
100512f2:	4013      	ands	r3, r2
100512f4:	2b08      	cmp	r3, #8
100512f6:	d111      	bne.n	1005131c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
100512f8:	68fb      	ldr	r3, [r7, #12]
100512fa:	681b      	ldr	r3, [r3, #0]
100512fc:	2208      	movs	r2, #8
100512fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
10051300:	68fb      	ldr	r3, [r7, #12]
10051302:	0018      	movs	r0, r3
10051304:	f000 f83c 	bl	10051380 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
10051308:	68fb      	ldr	r3, [r7, #12]
1005130a:	2290      	movs	r2, #144	@ 0x90
1005130c:	2108      	movs	r1, #8
1005130e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
10051310:	68fb      	ldr	r3, [r7, #12]
10051312:	2284      	movs	r2, #132	@ 0x84
10051314:	2100      	movs	r1, #0
10051316:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
10051318:	2301      	movs	r3, #1
1005131a:	e02c      	b.n	10051376 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
1005131c:	68fb      	ldr	r3, [r7, #12]
1005131e:	681b      	ldr	r3, [r3, #0]
10051320:	69da      	ldr	r2, [r3, #28]
10051322:	2380      	movs	r3, #128	@ 0x80
10051324:	011b      	lsls	r3, r3, #4
10051326:	401a      	ands	r2, r3
10051328:	2380      	movs	r3, #128	@ 0x80
1005132a:	011b      	lsls	r3, r3, #4
1005132c:	429a      	cmp	r2, r3
1005132e:	d112      	bne.n	10051356 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
10051330:	68fb      	ldr	r3, [r7, #12]
10051332:	681b      	ldr	r3, [r3, #0]
10051334:	2280      	movs	r2, #128	@ 0x80
10051336:	0112      	lsls	r2, r2, #4
10051338:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
1005133a:	68fb      	ldr	r3, [r7, #12]
1005133c:	0018      	movs	r0, r3
1005133e:	f000 f81f 	bl	10051380 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
10051342:	68fb      	ldr	r3, [r7, #12]
10051344:	2290      	movs	r2, #144	@ 0x90
10051346:	2120      	movs	r1, #32
10051348:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1005134a:	68fb      	ldr	r3, [r7, #12]
1005134c:	2284      	movs	r2, #132	@ 0x84
1005134e:	2100      	movs	r1, #0
10051350:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
10051352:	2303      	movs	r3, #3
10051354:	e00f      	b.n	10051376 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10051356:	68fb      	ldr	r3, [r7, #12]
10051358:	681b      	ldr	r3, [r3, #0]
1005135a:	69db      	ldr	r3, [r3, #28]
1005135c:	68ba      	ldr	r2, [r7, #8]
1005135e:	4013      	ands	r3, r2
10051360:	68ba      	ldr	r2, [r7, #8]
10051362:	1ad3      	subs	r3, r2, r3
10051364:	425a      	negs	r2, r3
10051366:	4153      	adcs	r3, r2
10051368:	b2db      	uxtb	r3, r3
1005136a:	001a      	movs	r2, r3
1005136c:	1dfb      	adds	r3, r7, #7
1005136e:	781b      	ldrb	r3, [r3, #0]
10051370:	429a      	cmp	r2, r3
10051372:	d09e      	beq.n	100512b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
10051374:	2300      	movs	r3, #0
}
10051376:	0018      	movs	r0, r3
10051378:	46bd      	mov	sp, r7
1005137a:	b004      	add	sp, #16
1005137c:	bd80      	pop	{r7, pc}
	...

10051380 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
10051380:	b580      	push	{r7, lr}
10051382:	b08e      	sub	sp, #56	@ 0x38
10051384:	af00      	add	r7, sp, #0
10051386:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10051388:	f3ef 8310 	mrs	r3, PRIMASK
1005138c:	617b      	str	r3, [r7, #20]
  return(result);
1005138e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
10051390:	637b      	str	r3, [r7, #52]	@ 0x34
10051392:	2301      	movs	r3, #1
10051394:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10051396:	69bb      	ldr	r3, [r7, #24]
10051398:	f383 8810 	msr	PRIMASK, r3
}
1005139c:	46c0      	nop			@ (mov r8, r8)
1005139e:	687b      	ldr	r3, [r7, #4]
100513a0:	681b      	ldr	r3, [r3, #0]
100513a2:	681a      	ldr	r2, [r3, #0]
100513a4:	687b      	ldr	r3, [r7, #4]
100513a6:	681b      	ldr	r3, [r3, #0]
100513a8:	4926      	ldr	r1, [pc, #152]	@ (10051444 <UART_EndRxTransfer+0xc4>)
100513aa:	400a      	ands	r2, r1
100513ac:	601a      	str	r2, [r3, #0]
100513ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100513b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100513b2:	69fb      	ldr	r3, [r7, #28]
100513b4:	f383 8810 	msr	PRIMASK, r3
}
100513b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100513ba:	f3ef 8310 	mrs	r3, PRIMASK
100513be:	623b      	str	r3, [r7, #32]
  return(result);
100513c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
100513c2:	633b      	str	r3, [r7, #48]	@ 0x30
100513c4:	2301      	movs	r3, #1
100513c6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100513c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100513ca:	f383 8810 	msr	PRIMASK, r3
}
100513ce:	46c0      	nop			@ (mov r8, r8)
100513d0:	687b      	ldr	r3, [r7, #4]
100513d2:	681b      	ldr	r3, [r3, #0]
100513d4:	689a      	ldr	r2, [r3, #8]
100513d6:	687b      	ldr	r3, [r7, #4]
100513d8:	681b      	ldr	r3, [r3, #0]
100513da:	491b      	ldr	r1, [pc, #108]	@ (10051448 <UART_EndRxTransfer+0xc8>)
100513dc:	400a      	ands	r2, r1
100513de:	609a      	str	r2, [r3, #8]
100513e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100513e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100513e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100513e6:	f383 8810 	msr	PRIMASK, r3
}
100513ea:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
100513ec:	687b      	ldr	r3, [r7, #4]
100513ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
100513f0:	2b01      	cmp	r3, #1
100513f2:	d118      	bne.n	10051426 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100513f4:	f3ef 8310 	mrs	r3, PRIMASK
100513f8:	60bb      	str	r3, [r7, #8]
  return(result);
100513fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
100513fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
100513fe:	2301      	movs	r3, #1
10051400:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10051402:	68fb      	ldr	r3, [r7, #12]
10051404:	f383 8810 	msr	PRIMASK, r3
}
10051408:	46c0      	nop			@ (mov r8, r8)
1005140a:	687b      	ldr	r3, [r7, #4]
1005140c:	681b      	ldr	r3, [r3, #0]
1005140e:	681a      	ldr	r2, [r3, #0]
10051410:	687b      	ldr	r3, [r7, #4]
10051412:	681b      	ldr	r3, [r3, #0]
10051414:	2110      	movs	r1, #16
10051416:	438a      	bics	r2, r1
10051418:	601a      	str	r2, [r3, #0]
1005141a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1005141c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1005141e:	693b      	ldr	r3, [r7, #16]
10051420:	f383 8810 	msr	PRIMASK, r3
}
10051424:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
10051426:	687b      	ldr	r3, [r7, #4]
10051428:	228c      	movs	r2, #140	@ 0x8c
1005142a:	2120      	movs	r1, #32
1005142c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1005142e:	687b      	ldr	r3, [r7, #4]
10051430:	2200      	movs	r2, #0
10051432:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
10051434:	687b      	ldr	r3, [r7, #4]
10051436:	2200      	movs	r2, #0
10051438:	675a      	str	r2, [r3, #116]	@ 0x74
}
1005143a:	46c0      	nop			@ (mov r8, r8)
1005143c:	46bd      	mov	sp, r7
1005143e:	b00e      	add	sp, #56	@ 0x38
10051440:	bd80      	pop	{r7, pc}
10051442:	46c0      	nop			@ (mov r8, r8)
10051444:	fffffedf 	.word	0xfffffedf
10051448:	effffffe 	.word	0xeffffffe

1005144c <BLEEVT_RegisterGattEvtHandler>:

  return;
}

int BLEEVT_RegisterGattEvtHandler(BLEEVT_GattEvtHandlerFunc_t EvtHandlerFunc)
{
1005144c:	b580      	push	{r7, lr}
1005144e:	b082      	sub	sp, #8
10051450:	af00      	add	r7, sp, #0
10051452:	6078      	str	r0, [r7, #4]
  if(BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers == BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS)
10051454:	4b0c      	ldr	r3, [pc, #48]	@ (10051488 <BLEEVT_RegisterGattEvtHandler+0x3c>)
10051456:	7a1b      	ldrb	r3, [r3, #8]
10051458:	2b02      	cmp	r3, #2
1005145a:	d102      	bne.n	10051462 <BLEEVT_RegisterGattEvtHandler+0x16>
  {
    return -1;
1005145c:	2301      	movs	r3, #1
1005145e:	425b      	negs	r3, r3
10051460:	e00d      	b.n	1005147e <BLEEVT_RegisterGattEvtHandler+0x32>
  }
#if (BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS > 0)
  BLEEVT_GattEvtHandler.BLEEVT_SvcHandlerTab[BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers] = EvtHandlerFunc;
10051462:	4b09      	ldr	r3, [pc, #36]	@ (10051488 <BLEEVT_RegisterGattEvtHandler+0x3c>)
10051464:	7a1b      	ldrb	r3, [r3, #8]
10051466:	001a      	movs	r2, r3
10051468:	4b07      	ldr	r3, [pc, #28]	@ (10051488 <BLEEVT_RegisterGattEvtHandler+0x3c>)
1005146a:	0092      	lsls	r2, r2, #2
1005146c:	6879      	ldr	r1, [r7, #4]
1005146e:	50d1      	str	r1, [r2, r3]
  BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers++;
10051470:	4b05      	ldr	r3, [pc, #20]	@ (10051488 <BLEEVT_RegisterGattEvtHandler+0x3c>)
10051472:	7a1b      	ldrb	r3, [r3, #8]
10051474:	3301      	adds	r3, #1
10051476:	b2da      	uxtb	r2, r3
10051478:	4b03      	ldr	r3, [pc, #12]	@ (10051488 <BLEEVT_RegisterGattEvtHandler+0x3c>)
1005147a:	721a      	strb	r2, [r3, #8]
#else
  (void)(EvtHandlerFunc);
#endif

  return 0;
1005147c:	2300      	movs	r3, #0
}
1005147e:	0018      	movs	r0, r3
10051480:	46bd      	mov	sp, r7
10051482:	b002      	add	sp, #8
10051484:	bd80      	pop	{r7, pc}
10051486:	46c0      	nop			@ (mov r8, r8)
10051488:	20000fe8 	.word	0x20000fe8

1005148c <BLE_STACK_Event>:

  return 0;
}

void BLE_STACK_Event(hci_pckt *hci_pckt, uint16_t length)
{
1005148c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005148e:	b089      	sub	sp, #36	@ 0x24
10051490:	af00      	add	r7, sp, #0
10051492:	6078      	str	r0, [r7, #4]
10051494:	000a      	movs	r2, r1
10051496:	1cbb      	adds	r3, r7, #2
10051498:	801a      	strh	r2, [r3, #0]
  BLEEVT_EvtAckStatus_t event_notification_status = BLEEVT_NoAck;
1005149a:	231f      	movs	r3, #31
1005149c:	18fb      	adds	r3, r7, r3
1005149e:	2200      	movs	r2, #0
100514a0:	701a      	strb	r2, [r3, #0]
  
  if(hci_pckt->type == HCI_EVENT_PKT_TYPE || hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE)
100514a2:	687b      	ldr	r3, [r7, #4]
100514a4:	781b      	ldrb	r3, [r3, #0]
100514a6:	2b04      	cmp	r3, #4
100514a8:	d003      	beq.n	100514b2 <BLE_STACK_Event+0x26>
100514aa:	687b      	ldr	r3, [r7, #4]
100514ac:	781b      	ldrb	r3, [r3, #0]
100514ae:	2b82      	cmp	r3, #130	@ 0x82
100514b0:	d148      	bne.n	10051544 <BLE_STACK_Event+0xb8>
  {
    void *data;
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
100514b2:	687b      	ldr	r3, [r7, #4]
100514b4:	3301      	adds	r3, #1
100514b6:	613b      	str	r3, [r7, #16]
    
    if(hci_pckt->type == HCI_EVENT_PKT_TYPE){
100514b8:	687b      	ldr	r3, [r7, #4]
100514ba:	781b      	ldrb	r3, [r3, #0]
100514bc:	2b04      	cmp	r3, #4
100514be:	d103      	bne.n	100514c8 <BLE_STACK_Event+0x3c>
      data = event_pckt->data;
100514c0:	693b      	ldr	r3, [r7, #16]
100514c2:	3302      	adds	r3, #2
100514c4:	61bb      	str	r3, [r7, #24]
100514c6:	e005      	b.n	100514d4 <BLE_STACK_Event+0x48>
    }
    else { /* hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE */
      hci_event_ext_pckt *event_pckt = (hci_event_ext_pckt*)hci_pckt->data;
100514c8:	687b      	ldr	r3, [r7, #4]
100514ca:	3301      	adds	r3, #1
100514cc:	60fb      	str	r3, [r7, #12]
      data = event_pckt->data;
100514ce:	68fb      	ldr	r3, [r7, #12]
100514d0:	3303      	adds	r3, #3
100514d2:	61bb      	str	r3, [r7, #24]
    }
    
    if(event_pckt->evt == HCI_VENDOR_EVT_CODE) /* evt fields is at same offset in hci_event_pckt and hci_event_ext_pckt */
100514d4:	693b      	ldr	r3, [r7, #16]
100514d6:	781b      	ldrb	r3, [r3, #0]
100514d8:	2bff      	cmp	r3, #255	@ 0xff
100514da:	d133      	bne.n	10051544 <BLE_STACK_Event+0xb8>
    {
      aci_blecore_event * blecore_evt = (aci_blecore_event*) data;
100514dc:	69bb      	ldr	r3, [r7, #24]
100514de:	60bb      	str	r3, [r7, #8]
      
      if((blecore_evt->ecode & BLEEVT_EGID_EVT_MASK) == BLEEVT_GATT_EVT_TYPE)
100514e0:	68bb      	ldr	r3, [r7, #8]
100514e2:	781a      	ldrb	r2, [r3, #0]
100514e4:	785b      	ldrb	r3, [r3, #1]
100514e6:	021b      	lsls	r3, r3, #8
100514e8:	4313      	orrs	r3, r2
100514ea:	b29b      	uxth	r3, r3
100514ec:	001a      	movs	r2, r3
100514ee:	23fc      	movs	r3, #252	@ 0xfc
100514f0:	021b      	lsls	r3, r3, #8
100514f2:	401a      	ands	r2, r3
100514f4:	23c0      	movs	r3, #192	@ 0xc0
100514f6:	011b      	lsls	r3, r3, #4
100514f8:	429a      	cmp	r2, r3
100514fa:	d123      	bne.n	10051544 <BLE_STACK_Event+0xb8>
      {
        /* GATT events */
        
#if (BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS > 0)
        /* For GATT event handler */
        for (uint8_t index = 0; index < BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers; index++)
100514fc:	2317      	movs	r3, #23
100514fe:	18fb      	adds	r3, r7, r3
10051500:	2200      	movs	r2, #0
10051502:	701a      	strb	r2, [r3, #0]
10051504:	e015      	b.n	10051532 <BLE_STACK_Event+0xa6>
        {
          event_notification_status = BLEEVT_GattEvtHandler.BLEEVT_SvcHandlerTab[index](blecore_evt);
10051506:	2517      	movs	r5, #23
10051508:	197b      	adds	r3, r7, r5
1005150a:	781a      	ldrb	r2, [r3, #0]
1005150c:	4b14      	ldr	r3, [pc, #80]	@ (10051560 <BLE_STACK_Event+0xd4>)
1005150e:	0092      	lsls	r2, r2, #2
10051510:	58d3      	ldr	r3, [r2, r3]
10051512:	261f      	movs	r6, #31
10051514:	19bc      	adds	r4, r7, r6
10051516:	68ba      	ldr	r2, [r7, #8]
10051518:	0010      	movs	r0, r2
1005151a:	4798      	blx	r3
1005151c:	0003      	movs	r3, r0
1005151e:	7023      	strb	r3, [r4, #0]
          /**
          * When a GATT event has been acknowledged by application, do not call other registered handler.
          * a GATT event may be relevant for only one Service
          */
          if (event_notification_status == BLEEVT_Ack)
10051520:	19bb      	adds	r3, r7, r6
10051522:	781b      	ldrb	r3, [r3, #0]
10051524:	2b01      	cmp	r3, #1
10051526:	d00c      	beq.n	10051542 <BLE_STACK_Event+0xb6>
        for (uint8_t index = 0; index < BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers; index++)
10051528:	197b      	adds	r3, r7, r5
1005152a:	781a      	ldrb	r2, [r3, #0]
1005152c:	197b      	adds	r3, r7, r5
1005152e:	3201      	adds	r2, #1
10051530:	701a      	strb	r2, [r3, #0]
10051532:	4b0b      	ldr	r3, [pc, #44]	@ (10051560 <BLE_STACK_Event+0xd4>)
10051534:	7a1b      	ldrb	r3, [r3, #8]
10051536:	2217      	movs	r2, #23
10051538:	18ba      	adds	r2, r7, r2
1005153a:	7812      	ldrb	r2, [r2, #0]
1005153c:	429a      	cmp	r2, r3
1005153e:	d3e2      	bcc.n	10051506 <BLE_STACK_Event+0x7a>
10051540:	e000      	b.n	10051544 <BLE_STACK_Event+0xb8>
          {
            /**
            *  The event has been managed. The Event processing should be stopped
            */
            break;
10051542:	46c0      	nop			@ (mov r8, r8)
  
  /**
   * When no registered handlers has acknowledged the event, it is reported to the application.
   */
  
  if(event_notification_status == BLEEVT_NoAck)
10051544:	231f      	movs	r3, #31
10051546:	18fb      	adds	r3, r7, r3
10051548:	781b      	ldrb	r3, [r3, #0]
1005154a:	2b00      	cmp	r3, #0
1005154c:	d103      	bne.n	10051556 <BLE_STACK_Event+0xca>
  {
    BLEEVT_App_Notification(hci_pckt);
1005154e:	687b      	ldr	r3, [r7, #4]
10051550:	0018      	movs	r0, r3
10051552:	f7f2 fb69 	bl	10043c28 <BLEEVT_App_Notification>
  }
}
10051556:	46c0      	nop			@ (mov r8, r8)
10051558:	46bd      	mov	sp, r7
1005155a:	b009      	add	sp, #36	@ 0x24
1005155c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005155e:	46c0      	nop			@ (mov r8, r8)
10051560:	20000fe8 	.word	0x20000fe8

10051564 <GAP_name_disc_proc_connected_check_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAP_name_disc_proc_connected_check_ucfg(uint16_t task_idx)
{
10051564:	b580      	push	{r7, lr}
10051566:	b082      	sub	sp, #8
10051568:	af00      	add	r7, sp, #0
1005156a:	0002      	movs	r2, r0
1005156c:	1dbb      	adds	r3, r7, #6
1005156e:	801a      	strh	r2, [r3, #0]
    GAP_name_disc_proc_connected_check(task_idx);
10051570:	1dbb      	adds	r3, r7, #6
10051572:	881b      	ldrh	r3, [r3, #0]
10051574:	0018      	movs	r0, r3
10051576:	f002 fa77 	bl	10053a68 <GAP_name_disc_proc_connected_check>
}
1005157a:	46c0      	nop			@ (mov r8, r8)
1005157c:	46bd      	mov	sp, r7
1005157e:	b002      	add	sp, #8
10051580:	bd80      	pop	{r7, pc}

10051582 <GAP_LimDiscTimeoutcb_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAP_LimDiscTimeoutcb_ucfg(uint8_t timer_id)
{
10051582:	b580      	push	{r7, lr}
10051584:	b082      	sub	sp, #8
10051586:	af00      	add	r7, sp, #0
10051588:	0002      	movs	r2, r0
1005158a:	1dfb      	adds	r3, r7, #7
1005158c:	701a      	strb	r2, [r3, #0]
    GAP_LimDiscTimeoutcb(timer_id);
1005158e:	1dfb      	adds	r3, r7, #7
10051590:	781b      	ldrb	r3, [r3, #0]
10051592:	0018      	movs	r0, r3
10051594:	f002 fcae 	bl	10053ef4 <GAP_LimDiscTimeoutcb>
}
10051598:	46c0      	nop			@ (mov r8, r8)
1005159a:	46bd      	mov	sp, r7
1005159c:	b002      	add	sp, #8
1005159e:	bd80      	pop	{r7, pc}

100515a0 <hci_acl_data_tx_cmpl_event_int_cb_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_acl_data_tx_cmpl_event_int_cb_ucfg(void* header_p,
                                                  uint8_t* buff_p)
{
100515a0:	b580      	push	{r7, lr}
100515a2:	b082      	sub	sp, #8
100515a4:	af00      	add	r7, sp, #0
100515a6:	6078      	str	r0, [r7, #4]
100515a8:	6039      	str	r1, [r7, #0]
    return hci_acl_data_tx_cmpl_event_int_cb(header_p,
100515aa:	683a      	ldr	r2, [r7, #0]
100515ac:	687b      	ldr	r3, [r7, #4]
100515ae:	0011      	movs	r1, r2
100515b0:	0018      	movs	r0, r3
100515b2:	f001 fa75 	bl	10052aa0 <hci_acl_data_tx_cmpl_event_int_cb>
100515b6:	0003      	movs	r3, r0
                                             buff_p);
}
100515b8:	0018      	movs	r0, r3
100515ba:	46bd      	mov	sp, r7
100515bc:	b002      	add	sp, #8
100515be:	bd80      	pop	{r7, pc}

100515c0 <hci_acl_data_ind_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_acl_data_ind_event_int_cb_ucfg(void* header_p,
                                              uint8_t* buff_p)
{
100515c0:	b580      	push	{r7, lr}
100515c2:	b082      	sub	sp, #8
100515c4:	af00      	add	r7, sp, #0
100515c6:	6078      	str	r0, [r7, #4]
100515c8:	6039      	str	r1, [r7, #0]
    return hci_acl_data_ind_event_int_cb(header_p,
100515ca:	683a      	ldr	r2, [r7, #0]
100515cc:	687b      	ldr	r3, [r7, #4]
100515ce:	0011      	movs	r1, r2
100515d0:	0018      	movs	r0, r3
100515d2:	f001 fa8f 	bl	10052af4 <hci_acl_data_ind_event_int_cb>
100515d6:	0003      	movs	r3, r0
                                         buff_p);
}
100515d8:	0018      	movs	r0, r3
100515da:	46bd      	mov	sp, r7
100515dc:	b002      	add	sp, #8
100515de:	bd80      	pop	{r7, pc}

100515e0 <Controller_Process_Q_ucfg>:
#endif /* ((CONTROLLER_CHAN_CLASS_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
void Controller_Process_Q_ucfg(uint16_t task_idx)
{
100515e0:	b580      	push	{r7, lr}
100515e2:	b082      	sub	sp, #8
100515e4:	af00      	add	r7, sp, #0
100515e6:	0002      	movs	r2, r0
100515e8:	1dbb      	adds	r3, r7, #6
100515ea:	801a      	strh	r2, [r3, #0]
    Controller_Process_Q(task_idx);
100515ec:	1dbb      	adds	r3, r7, #6
100515ee:	881b      	ldrh	r3, [r3, #0]
100515f0:	0018      	movs	r0, r3
100515f2:	f005 fe6b 	bl	100572cc <Controller_Process_Q>
}
100515f6:	46c0      	nop			@ (mov r8, r8)
100515f8:	46bd      	mov	sp, r7
100515fa:	b002      	add	sp, #8
100515fc:	bd80      	pop	{r7, pc}

100515fe <LLC_offline_control_procedures_processing_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void LLC_offline_control_procedures_processing_ucfg(uint16_t task_idx)
{
100515fe:	b580      	push	{r7, lr}
10051600:	b082      	sub	sp, #8
10051602:	af00      	add	r7, sp, #0
10051604:	0002      	movs	r2, r0
10051606:	1dbb      	adds	r3, r7, #6
10051608:	801a      	strh	r2, [r3, #0]
    LLC_offline_control_procedures_processing(task_idx);
1005160a:	1dbb      	adds	r3, r7, #6
1005160c:	881b      	ldrh	r3, [r3, #0]
1005160e:	0018      	movs	r0, r3
10051610:	f005 feac 	bl	1005736c <LLC_offline_control_procedures_processing>
}
10051614:	46c0      	nop			@ (mov r8, r8)
10051616:	46bd      	mov	sp, r7
10051618:	b002      	add	sp, #8
1005161a:	bd80      	pop	{r7, pc}

1005161c <data_length_extension_csr_ucfg>:
}
#endif /* (CONTROLLER_PRIVACY_ENABLED == 1) */

#if (CONTROLLER_DATA_LENGTH_EXTENSION_ENABLED == 1)
uint32_t data_length_extension_csr_ucfg(void)
{
1005161c:	b580      	push	{r7, lr}
1005161e:	af00      	add	r7, sp, #0
    return data_length_extension_csr();
10051620:	f006 f853 	bl	100576ca <data_length_extension_csr>
10051624:	0003      	movs	r3, r0
}
10051626:	0018      	movs	r0, r3
10051628:	46bd      	mov	sp, r7
1005162a:	bd80      	pop	{r7, pc}

1005162c <phy_upd_csr_ucfg>:
#endif /* ((CONTROLLER_POWER_CONTROL_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1)
uint32_t phy_upd_csr_ucfg(void)
{
1005162c:	b580      	push	{r7, lr}
1005162e:	af00      	add	r7, sp, #0
    return phy_upd_csr();
10051630:	f006 f867 	bl	10057702 <phy_upd_csr>
10051634:	0003      	movs	r3, r0
}
10051636:	0018      	movs	r0, r3
10051638:	46bd      	mov	sp, r7
1005163a:	bd80      	pop	{r7, pc}

1005163c <conn_supp_csr_ucfg>:
}
#endif /* (CONTROLLER_SCAN_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
uint32_t conn_supp_csr_ucfg(void)
{
1005163c:	b580      	push	{r7, lr}
1005163e:	af00      	add	r7, sp, #0
    return conn_supp_csr();
10051640:	f006 f863 	bl	1005770a <conn_supp_csr>
10051644:	0003      	movs	r3, r0
}
10051646:	0018      	movs	r0, r3
10051648:	46bd      	mov	sp, r7
1005164a:	bd80      	pop	{r7, pc}

1005164c <ACL_pkt_init_ucfg>:
}
#endif /* (CONTROLLER_CTE_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus ACL_pkt_init_ucfg(void)
{
1005164c:	b580      	push	{r7, lr}
1005164e:	af00      	add	r7, sp, #0
    return ACL_pkt_init();
10051650:	f001 fa72 	bl	10052b38 <ACL_pkt_init>
10051654:	0003      	movs	r3, r0
}
10051656:	0018      	movs	r0, r3
10051658:	46bd      	mov	sp, r7
1005165a:	bd80      	pop	{r7, pc}

1005165c <hci_disconnection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_disconnection_complete_event_int_cb_ucfg(void* header_p,
                                                        uint8_t* buff_p)
{
1005165c:	b580      	push	{r7, lr}
1005165e:	b082      	sub	sp, #8
10051660:	af00      	add	r7, sp, #0
10051662:	6078      	str	r0, [r7, #4]
10051664:	6039      	str	r1, [r7, #0]
    return hci_disconnection_complete_event_int_cb(header_p,
10051666:	683a      	ldr	r2, [r7, #0]
10051668:	687b      	ldr	r3, [r7, #4]
1005166a:	0011      	movs	r1, r2
1005166c:	0018      	movs	r0, r3
1005166e:	f001 fe23 	bl	100532b8 <hci_disconnection_complete_event_int_cb>
10051672:	0003      	movs	r3, r0
                                                   buff_p);
}
10051674:	0018      	movs	r0, r3
10051676:	46bd      	mov	sp, r7
10051678:	b002      	add	sp, #8
1005167a:	bd80      	pop	{r7, pc}

1005167c <hci_encryption_change_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_encryption_change_event_int_cb_ucfg(void* header_p,
                                                   uint8_t* buff_p)
{
1005167c:	b580      	push	{r7, lr}
1005167e:	b082      	sub	sp, #8
10051680:	af00      	add	r7, sp, #0
10051682:	6078      	str	r0, [r7, #4]
10051684:	6039      	str	r1, [r7, #0]
    return hci_encryption_change_event_int_cb(header_p,
10051686:	683a      	ldr	r2, [r7, #0]
10051688:	687b      	ldr	r3, [r7, #4]
1005168a:	0011      	movs	r1, r2
1005168c:	0018      	movs	r0, r3
1005168e:	f001 fe43 	bl	10053318 <hci_encryption_change_event_int_cb>
10051692:	0003      	movs	r3, r0
                                              buff_p);
}
10051694:	0018      	movs	r0, r3
10051696:	46bd      	mov	sp, r7
10051698:	b002      	add	sp, #8
1005169a:	bd80      	pop	{r7, pc}

1005169c <hci_encryption_key_refresh_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_encryption_key_refresh_complete_event_int_cb_ucfg(void* header_p,
                                                                 uint8_t* buff_p)
{
1005169c:	b580      	push	{r7, lr}
1005169e:	b082      	sub	sp, #8
100516a0:	af00      	add	r7, sp, #0
100516a2:	6078      	str	r0, [r7, #4]
100516a4:	6039      	str	r1, [r7, #0]
    return hci_encryption_key_refresh_complete_event_int_cb(header_p,
100516a6:	683a      	ldr	r2, [r7, #0]
100516a8:	687b      	ldr	r3, [r7, #4]
100516aa:	0011      	movs	r1, r2
100516ac:	0018      	movs	r0, r3
100516ae:	f001 fe4f 	bl	10053350 <hci_encryption_key_refresh_complete_event_int_cb>
100516b2:	0003      	movs	r3, r0
                                                            buff_p);
}
100516b4:	0018      	movs	r0, r3
100516b6:	46bd      	mov	sp, r7
100516b8:	b002      	add	sp, #8
100516ba:	bd80      	pop	{r7, pc}

100516bc <hci_le_connection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_connection_complete_event_int_cb_ucfg(void* header_p,
                                                        uint8_t* buff_p)
{
100516bc:	b580      	push	{r7, lr}
100516be:	b082      	sub	sp, #8
100516c0:	af00      	add	r7, sp, #0
100516c2:	6078      	str	r0, [r7, #4]
100516c4:	6039      	str	r1, [r7, #0]
    return hci_le_connection_complete_event_int_cb(header_p,
100516c6:	683a      	ldr	r2, [r7, #0]
100516c8:	687b      	ldr	r3, [r7, #4]
100516ca:	0011      	movs	r1, r2
100516cc:	0018      	movs	r0, r3
100516ce:	f001 fe5b 	bl	10053388 <hci_le_connection_complete_event_int_cb>
100516d2:	0003      	movs	r3, r0
                                                   buff_p);
}
100516d4:	0018      	movs	r0, r3
100516d6:	46bd      	mov	sp, r7
100516d8:	b002      	add	sp, #8
100516da:	bd80      	pop	{r7, pc}

100516dc <hci_le_enhanced_connection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_enhanced_connection_complete_event_int_cb_ucfg(void* header_p,
                                                                 uint8_t* buff_p)
{
100516dc:	b580      	push	{r7, lr}
100516de:	b082      	sub	sp, #8
100516e0:	af00      	add	r7, sp, #0
100516e2:	6078      	str	r0, [r7, #4]
100516e4:	6039      	str	r1, [r7, #0]
    return hci_le_enhanced_connection_complete_event_int_cb(header_p,
100516e6:	683a      	ldr	r2, [r7, #0]
100516e8:	687b      	ldr	r3, [r7, #4]
100516ea:	0011      	movs	r1, r2
100516ec:	0018      	movs	r0, r3
100516ee:	f001 fe8b 	bl	10053408 <hci_le_enhanced_connection_complete_event_int_cb>
100516f2:	0003      	movs	r3, r0
                                                            buff_p);
}
100516f4:	0018      	movs	r0, r3
100516f6:	46bd      	mov	sp, r7
100516f8:	b002      	add	sp, #8
100516fa:	bd80      	pop	{r7, pc}

100516fc <hci_le_long_term_key_request_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_long_term_key_request_event_int_cb_ucfg(void* header_p,
                                                          uint8_t* buff_p)
{
100516fc:	b580      	push	{r7, lr}
100516fe:	b082      	sub	sp, #8
10051700:	af00      	add	r7, sp, #0
10051702:	6078      	str	r0, [r7, #4]
10051704:	6039      	str	r1, [r7, #0]
    return hci_le_long_term_key_request_event_int_cb(header_p,
10051706:	683a      	ldr	r2, [r7, #0]
10051708:	687b      	ldr	r3, [r7, #4]
1005170a:	0011      	movs	r1, r2
1005170c:	0018      	movs	r0, r3
1005170e:	f001 fec1 	bl	10053494 <hci_le_long_term_key_request_event_int_cb>
10051712:	0003      	movs	r3, r0
                                                     buff_p);
}
10051714:	0018      	movs	r0, r3
10051716:	46bd      	mov	sp, r7
10051718:	b002      	add	sp, #8
1005171a:	bd80      	pop	{r7, pc}

1005171c <hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg(void* header_p,
                                                                        uint8_t* buff_p)
{
1005171c:	b580      	push	{r7, lr}
1005171e:	b082      	sub	sp, #8
10051720:	af00      	add	r7, sp, #0
10051722:	6078      	str	r0, [r7, #4]
10051724:	6039      	str	r1, [r7, #0]
    return hci_le_read_local_p256_public_key_complete_event_int_cb(header_p,
10051726:	683a      	ldr	r2, [r7, #0]
10051728:	687b      	ldr	r3, [r7, #4]
1005172a:	0011      	movs	r1, r2
1005172c:	0018      	movs	r0, r3
1005172e:	f001 fee1 	bl	100534f4 <hci_le_read_local_p256_public_key_complete_event_int_cb>
10051732:	0003      	movs	r3, r0
                                                                   buff_p);
}
10051734:	0018      	movs	r0, r3
10051736:	46bd      	mov	sp, r7
10051738:	b002      	add	sp, #8
1005173a:	bd80      	pop	{r7, pc}

1005173c <hci_le_generate_dhkey_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_generate_dhkey_complete_event_int_cb_ucfg(void* header_p,
                                                            uint8_t* buff_p)
{
1005173c:	b580      	push	{r7, lr}
1005173e:	b082      	sub	sp, #8
10051740:	af00      	add	r7, sp, #0
10051742:	6078      	str	r0, [r7, #4]
10051744:	6039      	str	r1, [r7, #0]
    return hci_le_generate_dhkey_complete_event_int_cb(header_p,
10051746:	683a      	ldr	r2, [r7, #0]
10051748:	687b      	ldr	r3, [r7, #4]
1005174a:	0011      	movs	r1, r2
1005174c:	0018      	movs	r0, r3
1005174e:	f001 feef 	bl	10053530 <hci_le_generate_dhkey_complete_event_int_cb>
10051752:	0003      	movs	r3, r0
                                                       buff_p);
}
10051754:	0018      	movs	r0, r3
10051756:	46bd      	mov	sp, r7
10051758:	b002      	add	sp, #8
1005175a:	bd80      	pop	{r7, pc}

1005175c <MBM_init_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1) ||\
    (CONTROLLER_ISO_ENABLED == 1)
tBleStatus MBM_init_ucfg(void)
{
1005175c:	b580      	push	{r7, lr}
1005175e:	af00      	add	r7, sp, #0
    return MBM_init();
10051760:	f00d fd36 	bl	1005f1d0 <MBM_init>
10051764:	0003      	movs	r3, r0
}
10051766:	0018      	movs	r0, r3
10051768:	46bd      	mov	sp, r7
1005176a:	bd80      	pop	{r7, pc}

1005176c <secure_connections_csr_ucfg>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
uint32_t secure_connections_csr_ucfg(void)
{
1005176c:	b580      	push	{r7, lr}
1005176e:	af00      	add	r7, sp, #0
    return secure_connections_csr();
10051770:	f010 fc58 	bl	10062024 <secure_connections_csr>
10051774:	0003      	movs	r3, r0
}
10051776:	0018      	movs	r0, r3
10051778:	46bd      	mov	sp, r7
1005177a:	bd80      	pop	{r7, pc}

1005177c <smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg>:
#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
void smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg(uint8_t status,
                                                                      uint8_t local_p256_public_key[64])
{
1005177c:	b580      	push	{r7, lr}
1005177e:	b082      	sub	sp, #8
10051780:	af00      	add	r7, sp, #0
10051782:	0002      	movs	r2, r0
10051784:	6039      	str	r1, [r7, #0]
10051786:	1dfb      	adds	r3, r7, #7
10051788:	701a      	strb	r2, [r3, #0]
    smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl(status,
1005178a:	683a      	ldr	r2, [r7, #0]
1005178c:	1dfb      	adds	r3, r7, #7
1005178e:	781b      	ldrb	r3, [r3, #0]
10051790:	0011      	movs	r1, r2
10051792:	0018      	movs	r0, r3
10051794:	f010 fbee 	bl	10061f74 <smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl>
                                                                local_p256_public_key);
}
10051798:	46c0      	nop			@ (mov r8, r8)
1005179a:	46bd      	mov	sp, r7
1005179c:	b002      	add	sp, #8
1005179e:	bd80      	pop	{r7, pc}

100517a0 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg>:
#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
void smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg(uint8_t status,
                                                          uint8_t dhkey[32])
{
100517a0:	b580      	push	{r7, lr}
100517a2:	b082      	sub	sp, #8
100517a4:	af00      	add	r7, sp, #0
100517a6:	0002      	movs	r2, r0
100517a8:	6039      	str	r1, [r7, #0]
100517aa:	1dfb      	adds	r3, r7, #7
100517ac:	701a      	strb	r2, [r3, #0]
    smp_sap_hci_le_generate_dhkey_complete_evt_hndl(status,
100517ae:	683a      	ldr	r2, [r7, #0]
100517b0:	1dfb      	adds	r3, r7, #7
100517b2:	781b      	ldrb	r3, [r3, #0]
100517b4:	0011      	movs	r1, r2
100517b6:	0018      	movs	r0, r3
100517b8:	f010 fbf4 	bl	10061fa4 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl>
                                                    dhkey);
}
100517bc:	46c0      	nop			@ (mov r8, r8)
100517be:	46bd      	mov	sp, r7
100517c0:	b002      	add	sp, #8
100517c2:	bd80      	pop	{r7, pc}

100517c4 <L2C_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus L2C_init_ucfg(uint8_t cos_enabled)
{
100517c4:	b580      	push	{r7, lr}
100517c6:	b082      	sub	sp, #8
100517c8:	af00      	add	r7, sp, #0
100517ca:	0002      	movs	r2, r0
100517cc:	1dfb      	adds	r3, r7, #7
100517ce:	701a      	strb	r2, [r3, #0]
    return L2C_init(cos_enabled);
100517d0:	1dfb      	adds	r3, r7, #7
100517d2:	781b      	ldrb	r3, [r3, #0]
100517d4:	0018      	movs	r0, r3
100517d6:	f006 f979 	bl	10057acc <L2C_init>
100517da:	0003      	movs	r3, r0
}
100517dc:	0018      	movs	r0, r3
100517de:	46bd      	mov	sp, r7
100517e0:	b002      	add	sp, #8
100517e2:	bd80      	pop	{r7, pc}

100517e4 <llc_conn_peripheral_roll_back_params_tsk_ucfg>:
}
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void llc_conn_peripheral_roll_back_params_tsk_ucfg(uint16_t task_idx)
{
100517e4:	b580      	push	{r7, lr}
100517e6:	b082      	sub	sp, #8
100517e8:	af00      	add	r7, sp, #0
100517ea:	0002      	movs	r2, r0
100517ec:	1dbb      	adds	r3, r7, #6
100517ee:	801a      	strh	r2, [r3, #0]
    llc_conn_peripheral_roll_back_params_tsk(task_idx);
100517f0:	1dbb      	adds	r3, r7, #6
100517f2:	881b      	ldrh	r3, [r3, #0]
100517f4:	0018      	movs	r0, r3
100517f6:	f007 ff9d 	bl	10059734 <llc_conn_peripheral_roll_back_params_tsk>
}
100517fa:	46c0      	nop			@ (mov r8, r8)
100517fc:	46bd      	mov	sp, r7
100517fe:	b002      	add	sp, #8
10051800:	bd80      	pop	{r7, pc}

10051802 <LL_cpe_init_length_update_ucfg>:
#endif /* (CONTROLLER_ISO_ENABLED == 1) */

#if (CONTROLLER_DATA_LENGTH_EXTENSION_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_cpe_init_length_update_ucfg(void)
{
10051802:	b580      	push	{r7, lr}
10051804:	af00      	add	r7, sp, #0
    LL_cpe_init_length_update();
10051806:	f008 ff35 	bl	1005a674 <LL_cpe_init_length_update>
}
1005180a:	46c0      	nop			@ (mov r8, r8)
1005180c:	46bd      	mov	sp, r7
1005180e:	bd80      	pop	{r7, pc}

10051810 <LL_cpe_init_phy_update_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_cpe_init_phy_update_ucfg(void)
{
10051810:	b580      	push	{r7, lr}
10051812:	af00      	add	r7, sp, #0
    LL_cpe_init_phy_update();
10051814:	f008 ff36 	bl	1005a684 <LL_cpe_init_phy_update>
}
10051818:	46c0      	nop			@ (mov r8, r8)
1005181a:	46bd      	mov	sp, r7
1005181c:	bd80      	pop	{r7, pc}

1005181e <LL_cpe_init_conn_update_ucfg>:
#endif /* ((CONTROLLER_POWER_CONTROL_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
void LL_cpe_init_conn_update_ucfg(void)
{
1005181e:	b580      	push	{r7, lr}
10051820:	af00      	add	r7, sp, #0
    LL_cpe_init_conn_update();
10051822:	f008 ff37 	bl	1005a694 <LL_cpe_init_conn_update>
}
10051826:	46c0      	nop			@ (mov r8, r8)
10051828:	46bd      	mov	sp, r7
1005182a:	bd80      	pop	{r7, pc}

1005182c <LL_cpe_init_chmap_update_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void LL_cpe_init_chmap_update_ucfg(void)
{
1005182c:	b580      	push	{r7, lr}
1005182e:	af00      	add	r7, sp, #0
    LL_cpe_init_chmap_update();
10051830:	f008 ff38 	bl	1005a6a4 <LL_cpe_init_chmap_update>
}
10051834:	46c0      	nop			@ (mov r8, r8)
10051836:	46bd      	mov	sp, r7
10051838:	bd80      	pop	{r7, pc}

1005183a <LL_cpe_init_ucfg>:
          (CONNECTION_ENABLED == 1) &&\
          (CONTROLLER_ISO_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
void LL_cpe_init_ucfg(void)
{
1005183a:	b580      	push	{r7, lr}
1005183c:	af00      	add	r7, sp, #0
    LL_cpe_init();
1005183e:	f008 ff6f 	bl	1005a720 <LL_cpe_init>
}
10051842:	46c0      	nop			@ (mov r8, r8)
10051844:	46bd      	mov	sp, r7
10051846:	bd80      	pop	{r7, pc}

10051848 <LL_conn_upd_max_tx_time_coded_ucfg>:
          (CONTROLLER_ISO_ENABLED == 1)) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_conn_upd_max_tx_time_coded_ucfg(void* params)
{
10051848:	b580      	push	{r7, lr}
1005184a:	b082      	sub	sp, #8
1005184c:	af00      	add	r7, sp, #0
1005184e:	6078      	str	r0, [r7, #4]
    LL_conn_upd_max_tx_time_coded(params);
10051850:	687b      	ldr	r3, [r7, #4]
10051852:	0018      	movs	r0, r3
10051854:	f009 fb8c 	bl	1005af70 <LL_conn_upd_max_tx_time_coded>
}
10051858:	46c0      	nop			@ (mov r8, r8)
1005185a:	46bd      	mov	sp, r7
1005185c:	b002      	add	sp, #8
1005185e:	bd80      	pop	{r7, pc}

10051860 <LL_conn_upd_data_length_change_event_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_conn_upd_data_length_change_event_ucfg(void* params)
{
10051860:	b580      	push	{r7, lr}
10051862:	b082      	sub	sp, #8
10051864:	af00      	add	r7, sp, #0
10051866:	6078      	str	r0, [r7, #4]
    LL_conn_upd_data_length_change_event(params);
10051868:	687b      	ldr	r3, [r7, #4]
1005186a:	0018      	movs	r0, r3
1005186c:	f009 fc04 	bl	1005b078 <LL_conn_upd_data_length_change_event>
}
10051870:	46c0      	nop			@ (mov r8, r8)
10051872:	46bd      	mov	sp, r7
10051874:	b002      	add	sp, #8
10051876:	bd80      	pop	{r7, pc}

10051878 <LLC_authenticated_payload_timeout_processing_ucfg>:
}
#endif /* (CONTROLLER_CTE_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void LLC_authenticated_payload_timeout_processing_ucfg(uint16_t task_idx)
{
10051878:	b580      	push	{r7, lr}
1005187a:	b082      	sub	sp, #8
1005187c:	af00      	add	r7, sp, #0
1005187e:	0002      	movs	r2, r0
10051880:	1dbb      	adds	r3, r7, #6
10051882:	801a      	strh	r2, [r3, #0]
    LLC_authenticated_payload_timeout_processing(task_idx);
10051884:	1dbb      	adds	r3, r7, #6
10051886:	881b      	ldrh	r3, [r3, #0]
10051888:	0018      	movs	r0, r3
1005188a:	f00a fcf9 	bl	1005c280 <LLC_authenticated_payload_timeout_processing>
}
1005188e:	46c0      	nop			@ (mov r8, r8)
10051890:	46bd      	mov	sp, r7
10051892:	b002      	add	sp, #8
10051894:	bd80      	pop	{r7, pc}

10051896 <LL_phy_upd_compute_data_PDU_length_params_ucfg>:

#if (CONTROLLER_DATA_LENGTH_EXTENSION_ENABLED == 1) &&\
    (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_phy_upd_compute_data_PDU_length_params_ucfg(void* params)
{
10051896:	b580      	push	{r7, lr}
10051898:	b082      	sub	sp, #8
1005189a:	af00      	add	r7, sp, #0
1005189c:	6078      	str	r0, [r7, #4]
    LL_phy_upd_compute_data_PDU_length_params(params);
1005189e:	687b      	ldr	r3, [r7, #4]
100518a0:	0018      	movs	r0, r3
100518a2:	f00a fff1 	bl	1005c888 <LL_phy_upd_compute_data_PDU_length_params>
}
100518a6:	46c0      	nop			@ (mov r8, r8)
100518a8:	46bd      	mov	sp, r7
100518aa:	b002      	add	sp, #8
100518ac:	bd80      	pop	{r7, pc}

100518ae <LL_phy_upd_pending_ucfg>:
          (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1)
uint8_t LL_phy_upd_pending_ucfg(uint8_t conn_idx)
{
100518ae:	b580      	push	{r7, lr}
100518b0:	b082      	sub	sp, #8
100518b2:	af00      	add	r7, sp, #0
100518b4:	0002      	movs	r2, r0
100518b6:	1dfb      	adds	r3, r7, #7
100518b8:	701a      	strb	r2, [r3, #0]
    return LL_phy_upd_pending(conn_idx);
100518ba:	1dfb      	adds	r3, r7, #7
100518bc:	781b      	ldrb	r3, [r3, #0]
100518be:	0018      	movs	r0, r3
100518c0:	f00b f82c 	bl	1005c91c <LL_phy_upd_pending>
100518c4:	0003      	movs	r3, r0
}
100518c6:	0018      	movs	r0, r3
100518c8:	46bd      	mov	sp, r7
100518ca:	b002      	add	sp, #8
100518cc:	bd80      	pop	{r7, pc}

100518ce <LL_phy_update_init_ucfg>:
#endif /* (CONTROLLER_2M_CODED_PHY_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
tBleStatus LL_phy_update_init_ucfg(void)
{
100518ce:	b580      	push	{r7, lr}
100518d0:	af00      	add	r7, sp, #0
    return LL_phy_update_init();
100518d2:	f00a ff9f 	bl	1005c814 <LL_phy_update_init>
100518d6:	0003      	movs	r3, r0
}
100518d8:	0018      	movs	r0, r3
100518da:	46bd      	mov	sp, r7
100518dc:	bd80      	pop	{r7, pc}

100518de <LL_phy_update_init_per_st_data_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
tBleStatus LL_phy_update_init_per_st_data_ucfg(uint8_t conn_idx)
{
100518de:	b580      	push	{r7, lr}
100518e0:	b082      	sub	sp, #8
100518e2:	af00      	add	r7, sp, #0
100518e4:	0002      	movs	r2, r0
100518e6:	1dfb      	adds	r3, r7, #7
100518e8:	701a      	strb	r2, [r3, #0]
    return LL_phy_update_init_per_st_data(conn_idx);
100518ea:	1dfb      	adds	r3, r7, #7
100518ec:	781b      	ldrb	r3, [r3, #0]
100518ee:	0018      	movs	r0, r3
100518f0:	f00a ff9a 	bl	1005c828 <LL_phy_update_init_per_st_data>
100518f4:	0003      	movs	r3, r0
}
100518f6:	0018      	movs	r0, r3
100518f8:	46bd      	mov	sp, r7
100518fa:	b002      	add	sp, #8
100518fc:	bd80      	pop	{r7, pc}

100518fe <LL_phy_upd_evt_pending_check_isr_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_phy_upd_evt_pending_check_isr_ucfg(uint8_t conn_idx)
{
100518fe:	b580      	push	{r7, lr}
10051900:	b082      	sub	sp, #8
10051902:	af00      	add	r7, sp, #0
10051904:	0002      	movs	r2, r0
10051906:	1dfb      	adds	r3, r7, #7
10051908:	701a      	strb	r2, [r3, #0]
    LL_phy_upd_evt_pending_check_isr(conn_idx);
1005190a:	1dfb      	adds	r3, r7, #7
1005190c:	781b      	ldrb	r3, [r3, #0]
1005190e:	0018      	movs	r0, r3
10051910:	f00b fbb4 	bl	1005d07c <LL_phy_upd_evt_pending_check_isr>
}
10051914:	46c0      	nop			@ (mov r8, r8)
10051916:	46bd      	mov	sp, r7
10051918:	b002      	add	sp, #8
1005191a:	bd80      	pop	{r7, pc}

1005191c <ADV_ISR_connect_request_received_ucfg>:

#if (CONNECTION_ENABLED == 1)
void ADV_ISR_connect_request_received_ucfg(void* pointer,
                                           uint8_t* packet,
                                           void* PeerIDAddress_p)
{
1005191c:	b580      	push	{r7, lr}
1005191e:	b084      	sub	sp, #16
10051920:	af00      	add	r7, sp, #0
10051922:	60f8      	str	r0, [r7, #12]
10051924:	60b9      	str	r1, [r7, #8]
10051926:	607a      	str	r2, [r7, #4]
    ADV_ISR_connect_request_received(pointer,
10051928:	687a      	ldr	r2, [r7, #4]
1005192a:	68b9      	ldr	r1, [r7, #8]
1005192c:	68fb      	ldr	r3, [r7, #12]
1005192e:	0018      	movs	r0, r3
10051930:	f00c fc68 	bl	1005e204 <ADV_ISR_connect_request_received>
                                     packet,
                                     PeerIDAddress_p);
}
10051934:	46c0      	nop			@ (mov r8, r8)
10051936:	46bd      	mov	sp, r7
10051938:	b004      	add	sp, #16
1005193a:	bd80      	pop	{r7, pc}

1005193c <EADV_start_request_radio_tasks_ucfg>:
}
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
uint8_t EADV_start_request_radio_tasks_ucfg(void* pointer)
{
1005193c:	b580      	push	{r7, lr}
1005193e:	b082      	sub	sp, #8
10051940:	af00      	add	r7, sp, #0
10051942:	6078      	str	r0, [r7, #4]
    return EADV_start_request_radio_tasks(pointer);
10051944:	687b      	ldr	r3, [r7, #4]
10051946:	0018      	movs	r0, r3
10051948:	f00c fde4 	bl	1005e514 <EADV_start_request_radio_tasks>
1005194c:	0003      	movs	r3, r0
}
1005194e:	0018      	movs	r0, r3
10051950:	46bd      	mov	sp, r7
10051952:	b002      	add	sp, #8
10051954:	bd80      	pop	{r7, pc}

10051956 <Data_Len_Update_Offline_Processing_ucfg>:

#if (CONTROLLER_DATA_LENGTH_EXTENSION_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
uint8_t Data_Len_Update_Offline_Processing_ucfg(void* params,
                                             uint32_t ctrl_flds)
{
10051956:	b580      	push	{r7, lr}
10051958:	b082      	sub	sp, #8
1005195a:	af00      	add	r7, sp, #0
1005195c:	6078      	str	r0, [r7, #4]
1005195e:	6039      	str	r1, [r7, #0]
    return Data_Len_Update_Offline_Processing(params,
10051960:	683a      	ldr	r2, [r7, #0]
10051962:	687b      	ldr	r3, [r7, #4]
10051964:	0011      	movs	r1, r2
10051966:	0018      	movs	r0, r3
10051968:	f00a fb74 	bl	1005c054 <Data_Len_Update_Offline_Processing>
1005196c:	0003      	movs	r3, r0
                                              ctrl_flds);
}
1005196e:	0018      	movs	r0, r3
10051970:	46bd      	mov	sp, r7
10051972:	b002      	add	sp, #8
10051974:	bd80      	pop	{r7, pc}

10051976 <LL_init_ucfg>:
                  uint8_t PerAdvScanWr,
                  uint8_t Cte,
                  uint8_t Pcl,
                  uint8_t Cns,
                  uint8_t Chc)
{
10051976:	b5b0      	push	{r4, r5, r7, lr}
10051978:	b08a      	sub	sp, #40	@ 0x28
1005197a:	af08      	add	r7, sp, #32
1005197c:	0005      	movs	r5, r0
1005197e:	000c      	movs	r4, r1
10051980:	0010      	movs	r0, r2
10051982:	0019      	movs	r1, r3
10051984:	1dfb      	adds	r3, r7, #7
10051986:	1c2a      	adds	r2, r5, #0
10051988:	701a      	strb	r2, [r3, #0]
1005198a:	1dbb      	adds	r3, r7, #6
1005198c:	1c22      	adds	r2, r4, #0
1005198e:	701a      	strb	r2, [r3, #0]
10051990:	1d7b      	adds	r3, r7, #5
10051992:	1c02      	adds	r2, r0, #0
10051994:	701a      	strb	r2, [r3, #0]
10051996:	1d3b      	adds	r3, r7, #4
10051998:	1c0a      	adds	r2, r1, #0
1005199a:	701a      	strb	r2, [r3, #0]
    LL_init(dataLenExt,
1005199c:	1d3b      	adds	r3, r7, #4
1005199e:	781c      	ldrb	r4, [r3, #0]
100519a0:	1d7b      	adds	r3, r7, #5
100519a2:	781a      	ldrb	r2, [r3, #0]
100519a4:	1dbb      	adds	r3, r7, #6
100519a6:	7819      	ldrb	r1, [r3, #0]
100519a8:	1dfb      	adds	r3, r7, #7
100519aa:	7818      	ldrb	r0, [r3, #0]
100519ac:	2330      	movs	r3, #48	@ 0x30
100519ae:	18fb      	adds	r3, r7, r3
100519b0:	781b      	ldrb	r3, [r3, #0]
100519b2:	9306      	str	r3, [sp, #24]
100519b4:	232c      	movs	r3, #44	@ 0x2c
100519b6:	18fb      	adds	r3, r7, r3
100519b8:	781b      	ldrb	r3, [r3, #0]
100519ba:	9305      	str	r3, [sp, #20]
100519bc:	2328      	movs	r3, #40	@ 0x28
100519be:	18fb      	adds	r3, r7, r3
100519c0:	781b      	ldrb	r3, [r3, #0]
100519c2:	9304      	str	r3, [sp, #16]
100519c4:	2324      	movs	r3, #36	@ 0x24
100519c6:	18fb      	adds	r3, r7, r3
100519c8:	781b      	ldrb	r3, [r3, #0]
100519ca:	9303      	str	r3, [sp, #12]
100519cc:	2320      	movs	r3, #32
100519ce:	18fb      	adds	r3, r7, r3
100519d0:	781b      	ldrb	r3, [r3, #0]
100519d2:	9302      	str	r3, [sp, #8]
100519d4:	231c      	movs	r3, #28
100519d6:	18fb      	adds	r3, r7, r3
100519d8:	781b      	ldrb	r3, [r3, #0]
100519da:	9301      	str	r3, [sp, #4]
100519dc:	2318      	movs	r3, #24
100519de:	18fb      	adds	r3, r7, r3
100519e0:	781b      	ldrb	r3, [r3, #0]
100519e2:	9300      	str	r3, [sp, #0]
100519e4:	0023      	movs	r3, r4
100519e6:	f00d f843 	bl	1005ea70 <LL_init>
            PerAdvScanWr,
            Cte,
            Pcl,
            Cns,
            Chc);
}
100519ea:	46c0      	nop			@ (mov r8, r8)
100519ec:	46bd      	mov	sp, r7
100519ee:	b002      	add	sp, #8
100519f0:	bdb0      	pop	{r4, r5, r7, pc}

100519f2 <smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
void smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg(void* params)
{
100519f2:	b580      	push	{r7, lr}
100519f4:	b082      	sub	sp, #8
100519f6:	af00      	add	r7, sp, #0
100519f8:	6078      	str	r0, [r7, #4]
    smp_pp2_per_auth_stage1_start_excerpt_scp(params);
100519fa:	687b      	ldr	r3, [r7, #4]
100519fc:	0018      	movs	r0, r3
100519fe:	f00e feff 	bl	10060800 <smp_pp2_per_auth_stage1_start_excerpt_scp>
}
10051a02:	46c0      	nop			@ (mov r8, r8)
10051a04:	46bd      	mov	sp, r7
10051a06:	b002      	add	sp, #8
10051a08:	bd80      	pop	{r7, pc}

10051a0a <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
void smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg(void* params)
{
10051a0a:	b580      	push	{r7, lr}
10051a0c:	b082      	sub	sp, #8
10051a0e:	af00      	add	r7, sp, #0
10051a10:	6078      	str	r0, [r7, #4]
    smp_pp2_per_rx_process_pairing_confirm_excerpt_scp(params);
10051a12:	687b      	ldr	r3, [r7, #4]
10051a14:	0018      	movs	r0, r3
10051a16:	f00e ff4b 	bl	100608b0 <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp>
}
10051a1a:	46c0      	nop			@ (mov r8, r8)
10051a1c:	46bd      	mov	sp, r7
10051a1e:	b002      	add	sp, #8
10051a20:	bd80      	pop	{r7, pc}

10051a22 <smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
void smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg(void* params)
{
10051a22:	b580      	push	{r7, lr}
10051a24:	b082      	sub	sp, #8
10051a26:	af00      	add	r7, sp, #0
10051a28:	6078      	str	r0, [r7, #4]
    smp_pp2_per_rx_process_pairing_random_excerpt_scp(params);
10051a2a:	687b      	ldr	r3, [r7, #4]
10051a2c:	0018      	movs	r0, r3
10051a2e:	f00e ff5f 	bl	100608f0 <smp_pp2_per_rx_process_pairing_random_excerpt_scp>
}
10051a32:	46c0      	nop			@ (mov r8, r8)
10051a34:	46bd      	mov	sp, r7
10051a36:	b002      	add	sp, #8
10051a38:	bd80      	pop	{r7, pc}

10051a3a <smp_scp_init_ucfg>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
void smp_scp_init_ucfg(uint8_t use_debug_key)
{
10051a3a:	b580      	push	{r7, lr}
10051a3c:	b082      	sub	sp, #8
10051a3e:	af00      	add	r7, sp, #0
10051a40:	0002      	movs	r2, r0
10051a42:	1dfb      	adds	r3, r7, #7
10051a44:	701a      	strb	r2, [r3, #0]
    smp_scp_init(use_debug_key);
10051a46:	1dfb      	adds	r3, r7, #7
10051a48:	781b      	ldrb	r3, [r3, #0]
10051a4a:	0018      	movs	r0, r3
10051a4c:	f00f f96c 	bl	10060d28 <smp_scp_init>
}
10051a50:	46c0      	nop			@ (mov r8, r8)
10051a52:	46bd      	mov	sp, r7
10051a54:	b002      	add	sp, #8
10051a56:	bd80      	pop	{r7, pc}

10051a58 <smp_scp_continue_on_exclusive_sc_pairing_ucfg>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
tBleStatus smp_scp_continue_on_exclusive_sc_pairing_ucfg(void* params)
{
10051a58:	b580      	push	{r7, lr}
10051a5a:	b082      	sub	sp, #8
10051a5c:	af00      	add	r7, sp, #0
10051a5e:	6078      	str	r0, [r7, #4]
    return smp_scp_continue_on_exclusive_sc_pairing(params);
10051a60:	687b      	ldr	r3, [r7, #4]
10051a62:	0018      	movs	r0, r3
10051a64:	f00f f9a0 	bl	10060da8 <smp_scp_continue_on_exclusive_sc_pairing>
10051a68:	0003      	movs	r3, r0
}
10051a6a:	0018      	movs	r0, r3
10051a6c:	46bd      	mov	sp, r7
10051a6e:	b002      	add	sp, #8
10051a70:	bd80      	pop	{r7, pc}

10051a72 <smp_scp_public_key_prepare_and_exchange_ucfg>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
tBleStatus smp_scp_public_key_prepare_and_exchange_ucfg(void* params)
{
10051a72:	b580      	push	{r7, lr}
10051a74:	b082      	sub	sp, #8
10051a76:	af00      	add	r7, sp, #0
10051a78:	6078      	str	r0, [r7, #4]
    return smp_scp_public_key_prepare_and_exchange(params);
10051a7a:	687b      	ldr	r3, [r7, #4]
10051a7c:	0018      	movs	r0, r3
10051a7e:	f00f fa75 	bl	10060f6c <smp_scp_public_key_prepare_and_exchange>
10051a82:	0003      	movs	r3, r0
}
10051a84:	0018      	movs	r0, r3
10051a86:	46bd      	mov	sp, r7
10051a88:	b002      	add	sp, #8
10051a8a:	bd80      	pop	{r7, pc}

10051a8c <smp_scp_stats_update_on_pairing_complete_ucfg>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
void smp_scp_stats_update_on_pairing_complete_ucfg(void* params)
{
10051a8c:	b580      	push	{r7, lr}
10051a8e:	b082      	sub	sp, #8
10051a90:	af00      	add	r7, sp, #0
10051a92:	6078      	str	r0, [r7, #4]
    smp_scp_stats_update_on_pairing_complete(params);
10051a94:	687b      	ldr	r3, [r7, #4]
10051a96:	0018      	movs	r0, r3
10051a98:	f00f fc7e 	bl	10061398 <smp_scp_stats_update_on_pairing_complete>
}
10051a9c:	46c0      	nop			@ (mov r8, r8)
10051a9e:	46bd      	mov	sp, r7
10051aa0:	b002      	add	sp, #8
10051aa2:	bd80      	pop	{r7, pc}

10051aa4 <smp_fsm_process_actions_wrt_state_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_fsm_process_actions_wrt_state_tsk_ucfg(uint16_t task_idx)
{
10051aa4:	b580      	push	{r7, lr}
10051aa6:	b082      	sub	sp, #8
10051aa8:	af00      	add	r7, sp, #0
10051aaa:	0002      	movs	r2, r0
10051aac:	1dbb      	adds	r3, r7, #6
10051aae:	801a      	strh	r2, [r3, #0]
    smp_fsm_process_actions_wrt_state_tsk(task_idx);
10051ab0:	1dbb      	adds	r3, r7, #6
10051ab2:	881b      	ldrh	r3, [r3, #0]
10051ab4:	0018      	movs	r0, r3
10051ab6:	f00f fca9 	bl	1006140c <smp_fsm_process_actions_wrt_state_tsk>
}
10051aba:	46c0      	nop			@ (mov r8, r8)
10051abc:	46bd      	mov	sp, r7
10051abe:	b002      	add	sp, #8
10051ac0:	bd80      	pop	{r7, pc}

10051ac2 <smp_fsm_execute_actions_scp_phase2as2_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1))
void smp_fsm_execute_actions_scp_phase2as2_ucfg(void* params)
{
10051ac2:	b580      	push	{r7, lr}
10051ac4:	b082      	sub	sp, #8
10051ac6:	af00      	add	r7, sp, #0
10051ac8:	6078      	str	r0, [r7, #4]
    smp_fsm_execute_actions_scp_phase2as2(params);
10051aca:	687b      	ldr	r3, [r7, #4]
10051acc:	0018      	movs	r0, r3
10051ace:	f00f fd7f 	bl	100615d0 <smp_fsm_execute_actions_scp_phase2as2>
}
10051ad2:	46c0      	nop			@ (mov r8, r8)
10051ad4:	46bd      	mov	sp, r7
10051ad6:	b002      	add	sp, #8
10051ad8:	bd80      	pop	{r7, pc}

10051ada <smp_pka_process_ecc_computation_tsk_ucfg>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
void smp_pka_process_ecc_computation_tsk_ucfg(uint16_t task_idx)
{
10051ada:	b580      	push	{r7, lr}
10051adc:	b082      	sub	sp, #8
10051ade:	af00      	add	r7, sp, #0
10051ae0:	0002      	movs	r2, r0
10051ae2:	1dbb      	adds	r3, r7, #6
10051ae4:	801a      	strh	r2, [r3, #0]
    smp_pka_process_ecc_computation_tsk(task_idx);
10051ae6:	1dbb      	adds	r3, r7, #6
10051ae8:	881b      	ldrh	r3, [r3, #0]
10051aea:	0018      	movs	r0, r3
10051aec:	f00f fd89 	bl	10061602 <smp_pka_process_ecc_computation_tsk>
}
10051af0:	46c0      	nop			@ (mov r8, r8)
10051af2:	46bd      	mov	sp, r7
10051af4:	b002      	add	sp, #8
10051af6:	bd80      	pop	{r7, pc}

10051af8 <smp_rxp_process_rxed_packets_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_rxp_process_rxed_packets_tsk_ucfg(uint16_t task_idx)
{
10051af8:	b580      	push	{r7, lr}
10051afa:	b082      	sub	sp, #8
10051afc:	af00      	add	r7, sp, #0
10051afe:	0002      	movs	r2, r0
10051b00:	1dbb      	adds	r3, r7, #6
10051b02:	801a      	strh	r2, [r3, #0]
    smp_rxp_process_rxed_packets_tsk(task_idx);
10051b04:	1dbb      	adds	r3, r7, #6
10051b06:	881b      	ldrh	r3, [r3, #0]
10051b08:	0018      	movs	r0, r3
10051b0a:	f00f fd7f 	bl	1006160c <smp_rxp_process_rxed_packets_tsk>
}
10051b0e:	46c0      	nop			@ (mov r8, r8)
10051b10:	46bd      	mov	sp, r7
10051b12:	b002      	add	sp, #8
10051b14:	bd80      	pop	{r7, pc}

10051b16 <smp_rxp_process_exception_cases_excerpt_scp_ucfg>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
tBleStatus smp_rxp_process_exception_cases_excerpt_scp_ucfg(void* params)
{
10051b16:	b580      	push	{r7, lr}
10051b18:	b082      	sub	sp, #8
10051b1a:	af00      	add	r7, sp, #0
10051b1c:	6078      	str	r0, [r7, #4]
    return smp_rxp_process_exception_cases_excerpt_scp(params);
10051b1e:	687b      	ldr	r3, [r7, #4]
10051b20:	0018      	movs	r0, r3
10051b22:	f00f fe65 	bl	100617f0 <smp_rxp_process_exception_cases_excerpt_scp>
10051b26:	0003      	movs	r3, r0
}
10051b28:	0018      	movs	r0, r3
10051b2a:	46bd      	mov	sp, r7
10051b2c:	b002      	add	sp, #8
10051b2e:	bd80      	pop	{r7, pc}

10051b30 <smp_rxp_process_wrt_current_fsm_excerpt_scp_ucfg>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
tBleStatus smp_rxp_process_wrt_current_fsm_excerpt_scp_ucfg(void* params)
{
10051b30:	b580      	push	{r7, lr}
10051b32:	b082      	sub	sp, #8
10051b34:	af00      	add	r7, sp, #0
10051b36:	6078      	str	r0, [r7, #4]
    return smp_rxp_process_wrt_current_fsm_excerpt_scp(params);
10051b38:	687b      	ldr	r3, [r7, #4]
10051b3a:	0018      	movs	r0, r3
10051b3c:	f00f fe2c 	bl	10061798 <smp_rxp_process_wrt_current_fsm_excerpt_scp>
10051b40:	0003      	movs	r3, r0
}
10051b42:	0018      	movs	r0, r3
10051b44:	46bd      	mov	sp, r7
10051b46:	b002      	add	sp, #8
10051b48:	bd80      	pop	{r7, pc}

10051b4a <smp_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_init_ucfg(void)
{
10051b4a:	b580      	push	{r7, lr}
10051b4c:	af00      	add	r7, sp, #0
    smp_init();
10051b4e:	f00f ff3b 	bl	100619c8 <smp_init>
}
10051b52:	46c0      	nop			@ (mov r8, r8)
10051b54:	46bd      	mov	sp, r7
10051b56:	bd80      	pop	{r7, pc}

10051b58 <GAT_att_cmn_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_init_ucfg(void)
{
10051b58:	b580      	push	{r7, lr}
10051b5a:	af00      	add	r7, sp, #0
    GAT_att_cmn_init();
10051b5c:	f002 fd68 	bl	10054630 <GAT_att_cmn_init>
}
10051b60:	46c0      	nop			@ (mov r8, r8)
10051b62:	46bd      	mov	sp, r7
10051b64:	bd80      	pop	{r7, pc}

10051b66 <GAT_att_cmn_timer_expire_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_timer_expire_tsk_ucfg(uint16_t task_idx)
{
10051b66:	b580      	push	{r7, lr}
10051b68:	b082      	sub	sp, #8
10051b6a:	af00      	add	r7, sp, #0
10051b6c:	0002      	movs	r2, r0
10051b6e:	1dbb      	adds	r3, r7, #6
10051b70:	801a      	strh	r2, [r3, #0]
    GAT_att_cmn_timer_expire_tsk(task_idx);
10051b72:	1dbb      	adds	r3, r7, #6
10051b74:	881b      	ldrh	r3, [r3, #0]
10051b76:	0018      	movs	r0, r3
10051b78:	f002 fdc6 	bl	10054708 <GAT_att_cmn_timer_expire_tsk>
}
10051b7c:	46c0      	nop			@ (mov r8, r8)
10051b7e:	46bd      	mov	sp, r7
10051b80:	b002      	add	sp, #8
10051b82:	bd80      	pop	{r7, pc}

10051b84 <GAT_att_cmn_tx_pool_evt_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_tx_pool_evt_tsk_ucfg(uint16_t task_idx)
{
10051b84:	b580      	push	{r7, lr}
10051b86:	b082      	sub	sp, #8
10051b88:	af00      	add	r7, sp, #0
10051b8a:	0002      	movs	r2, r0
10051b8c:	1dbb      	adds	r3, r7, #6
10051b8e:	801a      	strh	r2, [r3, #0]
    GAT_att_cmn_tx_pool_evt_tsk(task_idx);
10051b90:	1dbb      	adds	r3, r7, #6
10051b92:	881b      	ldrh	r3, [r3, #0]
10051b94:	0018      	movs	r0, r3
10051b96:	f002 fe2b 	bl	100547f0 <GAT_att_cmn_tx_pool_evt_tsk>
}
10051b9a:	46c0      	nop			@ (mov r8, r8)
10051b9c:	46bd      	mov	sp, r7
10051b9e:	b002      	add	sp, #8
10051ba0:	bd80      	pop	{r7, pc}

10051ba2 <GAT_att_srv_process_rx_pckt_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_srv_process_rx_pckt_tsk_ucfg(uint16_t task_idx)
{
10051ba2:	b580      	push	{r7, lr}
10051ba4:	b082      	sub	sp, #8
10051ba6:	af00      	add	r7, sp, #0
10051ba8:	0002      	movs	r2, r0
10051baa:	1dbb      	adds	r3, r7, #6
10051bac:	801a      	strh	r2, [r3, #0]
    GAT_att_srv_process_rx_pckt_tsk(task_idx);
10051bae:	1dbb      	adds	r3, r7, #6
10051bb0:	881b      	ldrh	r3, [r3, #0]
10051bb2:	0018      	movs	r0, r3
10051bb4:	f003 f956 	bl	10054e64 <GAT_att_srv_process_rx_pckt_tsk>
}
10051bb8:	46c0      	nop			@ (mov r8, r8)
10051bba:	46bd      	mov	sp, r7
10051bbc:	b002      	add	sp, #8
10051bbe:	bd80      	pop	{r7, pc}

10051bc0 <GAT_srv_db_hash_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_srv_db_hash_tsk_ucfg(uint16_t task_idx)
{
10051bc0:	b580      	push	{r7, lr}
10051bc2:	b082      	sub	sp, #8
10051bc4:	af00      	add	r7, sp, #0
10051bc6:	0002      	movs	r2, r0
10051bc8:	1dbb      	adds	r3, r7, #6
10051bca:	801a      	strh	r2, [r3, #0]
    GAT_srv_db_hash_tsk(task_idx);
10051bcc:	1dbb      	adds	r3, r7, #6
10051bce:	881b      	ldrh	r3, [r3, #0]
10051bd0:	0018      	movs	r0, r3
10051bd2:	f004 fa49 	bl	10056068 <GAT_srv_db_hash_tsk>
}
10051bd6:	46c0      	nop			@ (mov r8, r8)
10051bd8:	46bd      	mov	sp, r7
10051bda:	b002      	add	sp, #8
10051bdc:	bd80      	pop	{r7, pc}

10051bde <GAT_srv_send_srv_change_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_srv_send_srv_change_tsk_ucfg(uint16_t task_idx)
{
10051bde:	b580      	push	{r7, lr}
10051be0:	b082      	sub	sp, #8
10051be2:	af00      	add	r7, sp, #0
10051be4:	0002      	movs	r2, r0
10051be6:	1dbb      	adds	r3, r7, #6
10051be8:	801a      	strh	r2, [r3, #0]
    GAT_srv_send_srv_change_tsk(task_idx);
10051bea:	1dbb      	adds	r3, r7, #6
10051bec:	881b      	ldrh	r3, [r3, #0]
10051bee:	0018      	movs	r0, r3
10051bf0:	f004 faf4 	bl	100561dc <GAT_srv_send_srv_change_tsk>
}
10051bf4:	46c0      	nop			@ (mov r8, r8)
10051bf6:	46bd      	mov	sp, r7
10051bf8:	b002      	add	sp, #8
10051bfa:	bd80      	pop	{r7, pc}

10051bfc <aci_gap_terminate>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_terminate(uint16_t Connection_Handle,
                             uint8_t Reason)
{
10051bfc:	b580      	push	{r7, lr}
10051bfe:	b082      	sub	sp, #8
10051c00:	af00      	add	r7, sp, #0
10051c02:	0002      	movs	r2, r0
10051c04:	1dbb      	adds	r3, r7, #6
10051c06:	801a      	strh	r2, [r3, #0]
10051c08:	1d7b      	adds	r3, r7, #5
10051c0a:	1c0a      	adds	r2, r1, #0
10051c0c:	701a      	strb	r2, [r3, #0]
    return aci_gap_terminate_api(Connection_Handle,
10051c0e:	1d7b      	adds	r3, r7, #5
10051c10:	781a      	ldrb	r2, [r3, #0]
10051c12:	1dbb      	adds	r3, r7, #6
10051c14:	881b      	ldrh	r3, [r3, #0]
10051c16:	0011      	movs	r1, r2
10051c18:	0018      	movs	r0, r3
10051c1a:	f000 fc85 	bl	10052528 <aci_gap_terminate_api>
10051c1e:	0003      	movs	r3, r0
                                 Reason);
}
10051c20:	0018      	movs	r0, r3
10051c22:	46bd      	mov	sp, r7
10051c24:	b002      	add	sp, #8
10051c26:	bd80      	pop	{r7, pc}

10051c28 <aci_gap_set_io_capability>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
10051c28:	b580      	push	{r7, lr}
10051c2a:	b082      	sub	sp, #8
10051c2c:	af00      	add	r7, sp, #0
10051c2e:	0002      	movs	r2, r0
10051c30:	1dfb      	adds	r3, r7, #7
10051c32:	701a      	strb	r2, [r3, #0]
    return aci_gap_set_io_capability_api(IO_Capability);
10051c34:	1dfb      	adds	r3, r7, #7
10051c36:	781b      	ldrb	r3, [r3, #0]
10051c38:	0018      	movs	r0, r3
10051c3a:	f000 fd00 	bl	1005263e <aci_gap_set_io_capability_api>
10051c3e:	0003      	movs	r3, r0
}
10051c40:	0018      	movs	r0, r3
10051c42:	46bd      	mov	sp, r7
10051c44:	b002      	add	sp, #8
10051c46:	bd80      	pop	{r7, pc}

10051c48 <aci_gap_set_security_requirements>:
                                             uint8_t SC_Support,
                                             uint8_t KeyPress_Notification_Support,
                                             uint8_t Min_Encryption_Key_Size,
                                             uint8_t Max_Encryption_Key_Size,
                                             uint8_t Pairing_Response)
{
10051c48:	b5b0      	push	{r4, r5, r7, lr}
10051c4a:	b086      	sub	sp, #24
10051c4c:	af04      	add	r7, sp, #16
10051c4e:	0005      	movs	r5, r0
10051c50:	000c      	movs	r4, r1
10051c52:	0010      	movs	r0, r2
10051c54:	0019      	movs	r1, r3
10051c56:	1dfb      	adds	r3, r7, #7
10051c58:	1c2a      	adds	r2, r5, #0
10051c5a:	701a      	strb	r2, [r3, #0]
10051c5c:	1dbb      	adds	r3, r7, #6
10051c5e:	1c22      	adds	r2, r4, #0
10051c60:	701a      	strb	r2, [r3, #0]
10051c62:	1d7b      	adds	r3, r7, #5
10051c64:	1c02      	adds	r2, r0, #0
10051c66:	701a      	strb	r2, [r3, #0]
10051c68:	1d3b      	adds	r3, r7, #4
10051c6a:	1c0a      	adds	r2, r1, #0
10051c6c:	701a      	strb	r2, [r3, #0]
    return aci_gap_set_security_requirements_api(Bonding_Mode,
10051c6e:	1d3b      	adds	r3, r7, #4
10051c70:	781c      	ldrb	r4, [r3, #0]
10051c72:	1d7b      	adds	r3, r7, #5
10051c74:	781a      	ldrb	r2, [r3, #0]
10051c76:	1dbb      	adds	r3, r7, #6
10051c78:	7819      	ldrb	r1, [r3, #0]
10051c7a:	1dfb      	adds	r3, r7, #7
10051c7c:	7818      	ldrb	r0, [r3, #0]
10051c7e:	2320      	movs	r3, #32
10051c80:	18fb      	adds	r3, r7, r3
10051c82:	781b      	ldrb	r3, [r3, #0]
10051c84:	9302      	str	r3, [sp, #8]
10051c86:	231c      	movs	r3, #28
10051c88:	18fb      	adds	r3, r7, r3
10051c8a:	781b      	ldrb	r3, [r3, #0]
10051c8c:	9301      	str	r3, [sp, #4]
10051c8e:	2318      	movs	r3, #24
10051c90:	18fb      	adds	r3, r7, r3
10051c92:	781b      	ldrb	r3, [r3, #0]
10051c94:	9300      	str	r3, [sp, #0]
10051c96:	0023      	movs	r3, r4
10051c98:	f000 fcda 	bl	10052650 <aci_gap_set_security_requirements_api>
10051c9c:	0003      	movs	r3, r0
                                                 SC_Support,
                                                 KeyPress_Notification_Support,
                                                 Min_Encryption_Key_Size,
                                                 Max_Encryption_Key_Size,
                                                 Pairing_Response);
}
10051c9e:	0018      	movs	r0, r3
10051ca0:	46bd      	mov	sp, r7
10051ca2:	b002      	add	sp, #8
10051ca4:	bdb0      	pop	{r4, r5, r7, pc}

10051ca6 <aci_gap_passkey_resp>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_passkey_resp(uint16_t Connection_Handle,
                                uint32_t Passkey)
{
10051ca6:	b580      	push	{r7, lr}
10051ca8:	b082      	sub	sp, #8
10051caa:	af00      	add	r7, sp, #0
10051cac:	0002      	movs	r2, r0
10051cae:	6039      	str	r1, [r7, #0]
10051cb0:	1dbb      	adds	r3, r7, #6
10051cb2:	801a      	strh	r2, [r3, #0]
    return aci_gap_passkey_resp_api(Connection_Handle,
10051cb4:	683a      	ldr	r2, [r7, #0]
10051cb6:	1dbb      	adds	r3, r7, #6
10051cb8:	881b      	ldrh	r3, [r3, #0]
10051cba:	0011      	movs	r1, r2
10051cbc:	0018      	movs	r0, r3
10051cbe:	f000 fd0b 	bl	100526d8 <aci_gap_passkey_resp_api>
10051cc2:	0003      	movs	r3, r0
                                    Passkey);
}
10051cc4:	0018      	movs	r0, r3
10051cc6:	46bd      	mov	sp, r7
10051cc8:	b002      	add	sp, #8
10051cca:	bd80      	pop	{r7, pc}

10051ccc <aci_gap_numeric_comparison_value_confirm_yesno>:
#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
tBleStatus aci_gap_numeric_comparison_value_confirm_yesno(uint16_t Connection_Handle,
                                                          uint8_t Confirm_Yes_No)
{
10051ccc:	b580      	push	{r7, lr}
10051cce:	b082      	sub	sp, #8
10051cd0:	af00      	add	r7, sp, #0
10051cd2:	0002      	movs	r2, r0
10051cd4:	1dbb      	adds	r3, r7, #6
10051cd6:	801a      	strh	r2, [r3, #0]
10051cd8:	1d7b      	adds	r3, r7, #5
10051cda:	1c0a      	adds	r2, r1, #0
10051cdc:	701a      	strb	r2, [r3, #0]
    return aci_gap_numeric_comparison_value_confirm_yesno_api(Connection_Handle,
10051cde:	1d7b      	adds	r3, r7, #5
10051ce0:	781a      	ldrb	r2, [r3, #0]
10051ce2:	1dbb      	adds	r3, r7, #6
10051ce4:	881b      	ldrh	r3, [r3, #0]
10051ce6:	0011      	movs	r1, r2
10051ce8:	0018      	movs	r0, r3
10051cea:	f000 fd01 	bl	100526f0 <aci_gap_numeric_comparison_value_confirm_yesno_api>
10051cee:	0003      	movs	r3, r0
                                                              Confirm_Yes_No);
}
10051cf0:	0018      	movs	r0, r3
10051cf2:	46bd      	mov	sp, r7
10051cf4:	b002      	add	sp, #8
10051cf6:	bd80      	pop	{r7, pc}

10051cf8 <aci_gap_clear_security_db>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_clear_security_db(void)
{
10051cf8:	b580      	push	{r7, lr}
10051cfa:	af00      	add	r7, sp, #0
    return aci_gap_clear_security_db_api();
10051cfc:	f000 fd00 	bl	10052700 <aci_gap_clear_security_db_api>
10051d00:	0003      	movs	r3, r0
}
10051d02:	0018      	movs	r0, r3
10051d04:	46bd      	mov	sp, r7
10051d06:	bd80      	pop	{r7, pc}

10051d08 <aci_gatt_srv_add_service>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gatt_srv_add_service(ble_gatt_srv_def_t* Serv_p)
{
10051d08:	b580      	push	{r7, lr}
10051d0a:	b082      	sub	sp, #8
10051d0c:	af00      	add	r7, sp, #0
10051d0e:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_add_service_api(Serv_p);
10051d10:	687b      	ldr	r3, [r7, #4]
10051d12:	0018      	movs	r0, r3
10051d14:	f000 fcf9 	bl	1005270a <aci_gatt_srv_add_service_api>
10051d18:	0003      	movs	r3, r0
}
10051d1a:	0018      	movs	r0, r3
10051d1c:	46bd      	mov	sp, r7
10051d1e:	b002      	add	sp, #8
10051d20:	bd80      	pop	{r7, pc}

10051d22 <aci_gatt_srv_get_service_handle>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
uint16_t aci_gatt_srv_get_service_handle(ble_gatt_srv_def_t* Serv_p)
{
10051d22:	b580      	push	{r7, lr}
10051d24:	b082      	sub	sp, #8
10051d26:	af00      	add	r7, sp, #0
10051d28:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_get_service_handle_api(Serv_p);
10051d2a:	687b      	ldr	r3, [r7, #4]
10051d2c:	0018      	movs	r0, r3
10051d2e:	f000 fcf0 	bl	10052712 <aci_gatt_srv_get_service_handle_api>
10051d32:	0003      	movs	r3, r0
}
10051d34:	0018      	movs	r0, r3
10051d36:	46bd      	mov	sp, r7
10051d38:	b002      	add	sp, #8
10051d3a:	bd80      	pop	{r7, pc}

10051d3c <aci_gatt_srv_add_char>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gatt_srv_add_char(ble_gatt_chr_def_t* Char_p,
                                 uint16_t Serv_Attr_H)
{
10051d3c:	b580      	push	{r7, lr}
10051d3e:	b082      	sub	sp, #8
10051d40:	af00      	add	r7, sp, #0
10051d42:	6078      	str	r0, [r7, #4]
10051d44:	000a      	movs	r2, r1
10051d46:	1cbb      	adds	r3, r7, #2
10051d48:	801a      	strh	r2, [r3, #0]
    return aci_gatt_srv_add_char_api(Char_p,
10051d4a:	1cbb      	adds	r3, r7, #2
10051d4c:	881a      	ldrh	r2, [r3, #0]
10051d4e:	687b      	ldr	r3, [r7, #4]
10051d50:	0011      	movs	r1, r2
10051d52:	0018      	movs	r0, r3
10051d54:	f000 fce1 	bl	1005271a <aci_gatt_srv_add_char_api>
10051d58:	0003      	movs	r3, r0
                                     Serv_Attr_H);
}
10051d5a:	0018      	movs	r0, r3
10051d5c:	46bd      	mov	sp, r7
10051d5e:	b002      	add	sp, #8
10051d60:	bd80      	pop	{r7, pc}

10051d62 <aci_gatt_srv_get_char_decl_handle>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
uint16_t aci_gatt_srv_get_char_decl_handle(ble_gatt_chr_def_t* Char_p)
{
10051d62:	b580      	push	{r7, lr}
10051d64:	b082      	sub	sp, #8
10051d66:	af00      	add	r7, sp, #0
10051d68:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_get_char_decl_handle_api(Char_p);
10051d6a:	687b      	ldr	r3, [r7, #4]
10051d6c:	0018      	movs	r0, r3
10051d6e:	f000 fcd8 	bl	10052722 <aci_gatt_srv_get_char_decl_handle_api>
10051d72:	0003      	movs	r3, r0
}
10051d74:	0018      	movs	r0, r3
10051d76:	46bd      	mov	sp, r7
10051d78:	b002      	add	sp, #8
10051d7a:	bd80      	pop	{r7, pc}

10051d7c <aci_gatt_srv_notify>:
                               uint16_t CID,
                               uint16_t Attr_Handle,
                               uint8_t Flags,
                               uint16_t Val_Length,
                               uint8_t* Val_p)
{
10051d7c:	b5b0      	push	{r4, r5, r7, lr}
10051d7e:	b084      	sub	sp, #16
10051d80:	af02      	add	r7, sp, #8
10051d82:	0005      	movs	r5, r0
10051d84:	000c      	movs	r4, r1
10051d86:	0010      	movs	r0, r2
10051d88:	0019      	movs	r1, r3
10051d8a:	1dbb      	adds	r3, r7, #6
10051d8c:	1c2a      	adds	r2, r5, #0
10051d8e:	801a      	strh	r2, [r3, #0]
10051d90:	1d3b      	adds	r3, r7, #4
10051d92:	1c22      	adds	r2, r4, #0
10051d94:	801a      	strh	r2, [r3, #0]
10051d96:	1cbb      	adds	r3, r7, #2
10051d98:	1c02      	adds	r2, r0, #0
10051d9a:	801a      	strh	r2, [r3, #0]
10051d9c:	1c7b      	adds	r3, r7, #1
10051d9e:	1c0a      	adds	r2, r1, #0
10051da0:	701a      	strb	r2, [r3, #0]
    return aci_gatt_srv_notify_api(Connection_Handle,
10051da2:	1c7b      	adds	r3, r7, #1
10051da4:	781c      	ldrb	r4, [r3, #0]
10051da6:	1cbb      	adds	r3, r7, #2
10051da8:	881a      	ldrh	r2, [r3, #0]
10051daa:	1d3b      	adds	r3, r7, #4
10051dac:	8819      	ldrh	r1, [r3, #0]
10051dae:	1dbb      	adds	r3, r7, #6
10051db0:	8818      	ldrh	r0, [r3, #0]
10051db2:	69fb      	ldr	r3, [r7, #28]
10051db4:	9301      	str	r3, [sp, #4]
10051db6:	2318      	movs	r3, #24
10051db8:	18fb      	adds	r3, r7, r3
10051dba:	881b      	ldrh	r3, [r3, #0]
10051dbc:	9300      	str	r3, [sp, #0]
10051dbe:	0023      	movs	r3, r4
10051dc0:	f000 fcb3 	bl	1005272a <aci_gatt_srv_notify_api>
10051dc4:	0003      	movs	r3, r0
                                   CID,
                                   Attr_Handle,
                                   Flags,
                                   Val_Length,
                                   Val_p);
}
10051dc6:	0018      	movs	r0, r3
10051dc8:	46bd      	mov	sp, r7
10051dca:	b002      	add	sp, #8
10051dcc:	bdb0      	pop	{r4, r5, r7, pc}

10051dce <aci_gatt_srv_resp>:
                             uint16_t CID,
                             uint16_t Attr_Handle,
                             uint8_t Error_Code,
                             uint16_t Data_Len,
                             uint8_t* Data_p)
{
10051dce:	b5b0      	push	{r4, r5, r7, lr}
10051dd0:	b084      	sub	sp, #16
10051dd2:	af02      	add	r7, sp, #8
10051dd4:	0005      	movs	r5, r0
10051dd6:	000c      	movs	r4, r1
10051dd8:	0010      	movs	r0, r2
10051dda:	0019      	movs	r1, r3
10051ddc:	1dbb      	adds	r3, r7, #6
10051dde:	1c2a      	adds	r2, r5, #0
10051de0:	801a      	strh	r2, [r3, #0]
10051de2:	1d3b      	adds	r3, r7, #4
10051de4:	1c22      	adds	r2, r4, #0
10051de6:	801a      	strh	r2, [r3, #0]
10051de8:	1cbb      	adds	r3, r7, #2
10051dea:	1c02      	adds	r2, r0, #0
10051dec:	801a      	strh	r2, [r3, #0]
10051dee:	1c7b      	adds	r3, r7, #1
10051df0:	1c0a      	adds	r2, r1, #0
10051df2:	701a      	strb	r2, [r3, #0]
    return aci_gatt_srv_resp_api(Connection_Handle,
10051df4:	1c7b      	adds	r3, r7, #1
10051df6:	781c      	ldrb	r4, [r3, #0]
10051df8:	1cbb      	adds	r3, r7, #2
10051dfa:	881a      	ldrh	r2, [r3, #0]
10051dfc:	1d3b      	adds	r3, r7, #4
10051dfe:	8819      	ldrh	r1, [r3, #0]
10051e00:	1dbb      	adds	r3, r7, #6
10051e02:	8818      	ldrh	r0, [r3, #0]
10051e04:	69fb      	ldr	r3, [r7, #28]
10051e06:	9301      	str	r3, [sp, #4]
10051e08:	2318      	movs	r3, #24
10051e0a:	18fb      	adds	r3, r7, r3
10051e0c:	881b      	ldrh	r3, [r3, #0]
10051e0e:	9300      	str	r3, [sp, #0]
10051e10:	0023      	movs	r3, r4
10051e12:	f000 fc99 	bl	10052748 <aci_gatt_srv_resp_api>
10051e16:	0003      	movs	r3, r0
                                 CID,
                                 Attr_Handle,
                                 Error_Code,
                                 Data_Len,
                                 Data_p);
}
10051e18:	0018      	movs	r0, r3
10051e1a:	46bd      	mov	sp, r7
10051e1c:	b002      	add	sp, #8
10051e1e:	bdb0      	pop	{r4, r5, r7, pc}

10051e20 <aci_gatt_clt_exchange_config>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gatt_clt_exchange_config(uint16_t Connection_Handle)
{
10051e20:	b580      	push	{r7, lr}
10051e22:	b082      	sub	sp, #8
10051e24:	af00      	add	r7, sp, #0
10051e26:	0002      	movs	r2, r0
10051e28:	1dbb      	adds	r3, r7, #6
10051e2a:	801a      	strh	r2, [r3, #0]
    return aci_gatt_clt_exchange_config_api(Connection_Handle);
10051e2c:	1dbb      	adds	r3, r7, #6
10051e2e:	881b      	ldrh	r3, [r3, #0]
10051e30:	0018      	movs	r0, r3
10051e32:	f000 fc92 	bl	1005275a <aci_gatt_clt_exchange_config_api>
10051e36:	0003      	movs	r3, r0
}
10051e38:	0018      	movs	r0, r3
10051e3a:	46bd      	mov	sp, r7
10051e3c:	b002      	add	sp, #8
10051e3e:	bd80      	pop	{r7, pc}

10051e40 <aci_gatt_clt_confirm_indication>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gatt_clt_confirm_indication(uint16_t Connection_Handle,
                                           uint16_t CID)
{
10051e40:	b580      	push	{r7, lr}
10051e42:	b082      	sub	sp, #8
10051e44:	af00      	add	r7, sp, #0
10051e46:	0002      	movs	r2, r0
10051e48:	1dbb      	adds	r3, r7, #6
10051e4a:	801a      	strh	r2, [r3, #0]
10051e4c:	1d3b      	adds	r3, r7, #4
10051e4e:	1c0a      	adds	r2, r1, #0
10051e50:	801a      	strh	r2, [r3, #0]
    return aci_gatt_clt_confirm_indication_api(Connection_Handle,
10051e52:	1d3b      	adds	r3, r7, #4
10051e54:	881a      	ldrh	r2, [r3, #0]
10051e56:	1dbb      	adds	r3, r7, #6
10051e58:	881b      	ldrh	r3, [r3, #0]
10051e5a:	0011      	movs	r1, r2
10051e5c:	0018      	movs	r0, r3
10051e5e:	f000 fc80 	bl	10052762 <aci_gatt_clt_confirm_indication_api>
10051e62:	0003      	movs	r3, r0
                                               CID);
}
10051e64:	0018      	movs	r0, r3
10051e66:	46bd      	mov	sp, r7
10051e68:	b002      	add	sp, #8
10051e6a:	bd80      	pop	{r7, pc}

10051e6c <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req(uint16_t Connection_Handle,
                                                     uint16_t Connection_Interval_Min,
                                                     uint16_t Connection_Interval_Max,
                                                     uint16_t Peripheral_Latency,
                                                     uint16_t Timeout_Multiplier)
{
10051e6c:	b5b0      	push	{r4, r5, r7, lr}
10051e6e:	b084      	sub	sp, #16
10051e70:	af02      	add	r7, sp, #8
10051e72:	0005      	movs	r5, r0
10051e74:	000c      	movs	r4, r1
10051e76:	0010      	movs	r0, r2
10051e78:	0019      	movs	r1, r3
10051e7a:	1dbb      	adds	r3, r7, #6
10051e7c:	1c2a      	adds	r2, r5, #0
10051e7e:	801a      	strh	r2, [r3, #0]
10051e80:	1d3b      	adds	r3, r7, #4
10051e82:	1c22      	adds	r2, r4, #0
10051e84:	801a      	strh	r2, [r3, #0]
10051e86:	1cbb      	adds	r3, r7, #2
10051e88:	1c02      	adds	r2, r0, #0
10051e8a:	801a      	strh	r2, [r3, #0]
10051e8c:	003b      	movs	r3, r7
10051e8e:	1c0a      	adds	r2, r1, #0
10051e90:	801a      	strh	r2, [r3, #0]
    return aci_l2cap_connection_parameter_update_req_api(Connection_Handle,
10051e92:	003b      	movs	r3, r7
10051e94:	881c      	ldrh	r4, [r3, #0]
10051e96:	1cbb      	adds	r3, r7, #2
10051e98:	881a      	ldrh	r2, [r3, #0]
10051e9a:	1d3b      	adds	r3, r7, #4
10051e9c:	8819      	ldrh	r1, [r3, #0]
10051e9e:	1dbb      	adds	r3, r7, #6
10051ea0:	8818      	ldrh	r0, [r3, #0]
10051ea2:	2318      	movs	r3, #24
10051ea4:	18fb      	adds	r3, r7, r3
10051ea6:	881b      	ldrh	r3, [r3, #0]
10051ea8:	9300      	str	r3, [sp, #0]
10051eaa:	0023      	movs	r3, r4
10051eac:	f000 fd7c 	bl	100529a8 <aci_l2cap_connection_parameter_update_req_api>
10051eb0:	0003      	movs	r3, r0
                                                         Connection_Interval_Min,
                                                         Connection_Interval_Max,
                                                         Peripheral_Latency,
                                                         Timeout_Multiplier);
}
10051eb2:	0018      	movs	r0, r3
10051eb4:	46bd      	mov	sp, r7
10051eb6:	b002      	add	sp, #8
10051eb8:	bdb0      	pop	{r4, r5, r7, pc}

10051eba <hci_le_read_phy>:
#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
tBleStatus hci_le_read_phy(uint16_t Connection_Handle,
                           uint8_t* TX_PHY,
                           uint8_t* RX_PHY)
{
10051eba:	b590      	push	{r4, r7, lr}
10051ebc:	b085      	sub	sp, #20
10051ebe:	af00      	add	r7, sp, #0
10051ec0:	60b9      	str	r1, [r7, #8]
10051ec2:	607a      	str	r2, [r7, #4]
10051ec4:	240e      	movs	r4, #14
10051ec6:	193b      	adds	r3, r7, r4
10051ec8:	1c02      	adds	r2, r0, #0
10051eca:	801a      	strh	r2, [r3, #0]
    return hci_le_read_phy_api(Connection_Handle,
10051ecc:	687a      	ldr	r2, [r7, #4]
10051ece:	68b9      	ldr	r1, [r7, #8]
10051ed0:	193b      	adds	r3, r7, r4
10051ed2:	881b      	ldrh	r3, [r3, #0]
10051ed4:	0018      	movs	r0, r3
10051ed6:	f005 fbfc 	bl	100576d2 <hci_le_read_phy_api>
10051eda:	0003      	movs	r3, r0
                               TX_PHY,
                               RX_PHY);
}
10051edc:	0018      	movs	r0, r3
10051ede:	46bd      	mov	sp, r7
10051ee0:	b005      	add	sp, #20
10051ee2:	bd90      	pop	{r4, r7, pc}

10051ee4 <hci_le_set_default_phy>:

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1)
tBleStatus hci_le_set_default_phy(uint8_t ALL_PHYS,
                                  uint8_t TX_PHYS,
                                  uint8_t RX_PHYS)
{
10051ee4:	b590      	push	{r4, r7, lr}
10051ee6:	b083      	sub	sp, #12
10051ee8:	af00      	add	r7, sp, #0
10051eea:	0004      	movs	r4, r0
10051eec:	0008      	movs	r0, r1
10051eee:	0011      	movs	r1, r2
10051ef0:	1dfb      	adds	r3, r7, #7
10051ef2:	1c22      	adds	r2, r4, #0
10051ef4:	701a      	strb	r2, [r3, #0]
10051ef6:	1dbb      	adds	r3, r7, #6
10051ef8:	1c02      	adds	r2, r0, #0
10051efa:	701a      	strb	r2, [r3, #0]
10051efc:	1d7b      	adds	r3, r7, #5
10051efe:	1c0a      	adds	r2, r1, #0
10051f00:	701a      	strb	r2, [r3, #0]
    return hci_le_set_default_phy_api(ALL_PHYS,
10051f02:	1d7b      	adds	r3, r7, #5
10051f04:	781a      	ldrb	r2, [r3, #0]
10051f06:	1dbb      	adds	r3, r7, #6
10051f08:	7819      	ldrb	r1, [r3, #0]
10051f0a:	1dfb      	adds	r3, r7, #7
10051f0c:	781b      	ldrb	r3, [r3, #0]
10051f0e:	0018      	movs	r0, r3
10051f10:	f005 fbe8 	bl	100576e4 <hci_le_set_default_phy_api>
10051f14:	0003      	movs	r3, r0
                                      TX_PHYS,
                                      RX_PHYS);
}
10051f16:	0018      	movs	r0, r3
10051f18:	46bd      	mov	sp, r7
10051f1a:	b003      	add	sp, #12
10051f1c:	bd90      	pop	{r4, r7, pc}

10051f1e <hci_le_set_phy>:
tBleStatus hci_le_set_phy(uint16_t Connection_Handle,
                          uint8_t ALL_PHYS,
                          uint8_t TX_PHYS,
                          uint8_t RX_PHYS,
                          uint16_t PHY_options)
{
10051f1e:	b5b0      	push	{r4, r5, r7, lr}
10051f20:	b084      	sub	sp, #16
10051f22:	af02      	add	r7, sp, #8
10051f24:	0005      	movs	r5, r0
10051f26:	000c      	movs	r4, r1
10051f28:	0010      	movs	r0, r2
10051f2a:	0019      	movs	r1, r3
10051f2c:	1dbb      	adds	r3, r7, #6
10051f2e:	1c2a      	adds	r2, r5, #0
10051f30:	801a      	strh	r2, [r3, #0]
10051f32:	1d7b      	adds	r3, r7, #5
10051f34:	1c22      	adds	r2, r4, #0
10051f36:	701a      	strb	r2, [r3, #0]
10051f38:	1d3b      	adds	r3, r7, #4
10051f3a:	1c02      	adds	r2, r0, #0
10051f3c:	701a      	strb	r2, [r3, #0]
10051f3e:	1cfb      	adds	r3, r7, #3
10051f40:	1c0a      	adds	r2, r1, #0
10051f42:	701a      	strb	r2, [r3, #0]
    return hci_le_set_phy_api(Connection_Handle,
10051f44:	1cfb      	adds	r3, r7, #3
10051f46:	781c      	ldrb	r4, [r3, #0]
10051f48:	1d3b      	adds	r3, r7, #4
10051f4a:	781a      	ldrb	r2, [r3, #0]
10051f4c:	1d7b      	adds	r3, r7, #5
10051f4e:	7819      	ldrb	r1, [r3, #0]
10051f50:	1dbb      	adds	r3, r7, #6
10051f52:	8818      	ldrh	r0, [r3, #0]
10051f54:	2318      	movs	r3, #24
10051f56:	18fb      	adds	r3, r7, r3
10051f58:	881b      	ldrh	r3, [r3, #0]
10051f5a:	9300      	str	r3, [sp, #0]
10051f5c:	0023      	movs	r3, r4
10051f5e:	f005 fbc5 	bl	100576ec <hci_le_set_phy_api>
10051f62:	0003      	movs	r3, r0
                              ALL_PHYS,
                              TX_PHYS,
                              RX_PHYS,
                              PHY_options);
}
10051f64:	0018      	movs	r0, r3
10051f66:	46bd      	mov	sp, r7
10051f68:	b002      	add	sp, #8
10051f6a:	bdb0      	pop	{r4, r5, r7, pc}

10051f6c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
10051f6c:	b580      	push	{r7, lr}
10051f6e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
10051f70:	4b04      	ldr	r3, [pc, #16]	@ (10051f84 <UTIL_LPM_Init+0x18>)
10051f72:	2200      	movs	r2, #0
10051f74:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
10051f76:	4b04      	ldr	r3, [pc, #16]	@ (10051f88 <UTIL_LPM_Init+0x1c>)
10051f78:	2200      	movs	r2, #0
10051f7a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
10051f7c:	46c0      	nop			@ (mov r8, r8)
10051f7e:	46bd      	mov	sp, r7
10051f80:	bd80      	pop	{r7, pc}
10051f82:	46c0      	nop			@ (mov r8, r8)
10051f84:	20000ff4 	.word	0x20000ff4
10051f88:	20000ff8 	.word	0x20000ff8

10051f8c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
10051f8c:	b580      	push	{r7, lr}
10051f8e:	b086      	sub	sp, #24
10051f90:	af00      	add	r7, sp, #0
10051f92:	6078      	str	r0, [r7, #4]
10051f94:	000a      	movs	r2, r1
10051f96:	1cfb      	adds	r3, r7, #3
10051f98:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10051f9a:	f3ef 8310 	mrs	r3, PRIMASK
10051f9e:	613b      	str	r3, [r7, #16]
  return(result);
10051fa0:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
10051fa2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
10051fa4:	b672      	cpsid	i
}
10051fa6:	46c0      	nop			@ (mov r8, r8)
  
  switch( state )
10051fa8:	1cfb      	adds	r3, r7, #3
10051faa:	781b      	ldrb	r3, [r3, #0]
10051fac:	2b00      	cmp	r3, #0
10051fae:	d008      	beq.n	10051fc2 <UTIL_LPM_SetStopMode+0x36>
10051fb0:	2b01      	cmp	r3, #1
10051fb2:	d10e      	bne.n	10051fd2 <UTIL_LPM_SetStopMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
10051fb4:	4b0c      	ldr	r3, [pc, #48]	@ (10051fe8 <UTIL_LPM_SetStopMode+0x5c>)
10051fb6:	681a      	ldr	r2, [r3, #0]
10051fb8:	687b      	ldr	r3, [r7, #4]
10051fba:	431a      	orrs	r2, r3
10051fbc:	4b0a      	ldr	r3, [pc, #40]	@ (10051fe8 <UTIL_LPM_SetStopMode+0x5c>)
10051fbe:	601a      	str	r2, [r3, #0]
      break;
10051fc0:	e008      	b.n	10051fd4 <UTIL_LPM_SetStopMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
10051fc2:	687b      	ldr	r3, [r7, #4]
10051fc4:	43da      	mvns	r2, r3
10051fc6:	4b08      	ldr	r3, [pc, #32]	@ (10051fe8 <UTIL_LPM_SetStopMode+0x5c>)
10051fc8:	681b      	ldr	r3, [r3, #0]
10051fca:	401a      	ands	r2, r3
10051fcc:	4b06      	ldr	r3, [pc, #24]	@ (10051fe8 <UTIL_LPM_SetStopMode+0x5c>)
10051fce:	601a      	str	r2, [r3, #0]
      break;
10051fd0:	e000      	b.n	10051fd4 <UTIL_LPM_SetStopMode+0x48>
    }
  default :
    {
      break;
10051fd2:	46c0      	nop			@ (mov r8, r8)
10051fd4:	697b      	ldr	r3, [r7, #20]
10051fd6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10051fd8:	68fb      	ldr	r3, [r7, #12]
10051fda:	f383 8810 	msr	PRIMASK, r3
}
10051fde:	46c0      	nop			@ (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
10051fe0:	46c0      	nop			@ (mov r8, r8)
10051fe2:	46bd      	mov	sp, r7
10051fe4:	b006      	add	sp, #24
10051fe6:	bd80      	pop	{r7, pc}
10051fe8:	20000ff4 	.word	0x20000ff4

10051fec <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
10051fec:	b580      	push	{r7, lr}
10051fee:	b086      	sub	sp, #24
10051ff0:	af00      	add	r7, sp, #0
10051ff2:	6078      	str	r0, [r7, #4]
10051ff4:	000a      	movs	r2, r1
10051ff6:	1cfb      	adds	r3, r7, #3
10051ff8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10051ffa:	f3ef 8310 	mrs	r3, PRIMASK
10051ffe:	613b      	str	r3, [r7, #16]
  return(result);
10052000:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
10052002:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
10052004:	b672      	cpsid	i
}
10052006:	46c0      	nop			@ (mov r8, r8)
  
  switch(state)
10052008:	1cfb      	adds	r3, r7, #3
1005200a:	781b      	ldrb	r3, [r3, #0]
1005200c:	2b00      	cmp	r3, #0
1005200e:	d008      	beq.n	10052022 <UTIL_LPM_SetOffMode+0x36>
10052010:	2b01      	cmp	r3, #1
10052012:	d10e      	bne.n	10052032 <UTIL_LPM_SetOffMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
10052014:	4b0c      	ldr	r3, [pc, #48]	@ (10052048 <UTIL_LPM_SetOffMode+0x5c>)
10052016:	681a      	ldr	r2, [r3, #0]
10052018:	687b      	ldr	r3, [r7, #4]
1005201a:	431a      	orrs	r2, r3
1005201c:	4b0a      	ldr	r3, [pc, #40]	@ (10052048 <UTIL_LPM_SetOffMode+0x5c>)
1005201e:	601a      	str	r2, [r3, #0]
      break;
10052020:	e008      	b.n	10052034 <UTIL_LPM_SetOffMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
10052022:	687b      	ldr	r3, [r7, #4]
10052024:	43da      	mvns	r2, r3
10052026:	4b08      	ldr	r3, [pc, #32]	@ (10052048 <UTIL_LPM_SetOffMode+0x5c>)
10052028:	681b      	ldr	r3, [r3, #0]
1005202a:	401a      	ands	r2, r3
1005202c:	4b06      	ldr	r3, [pc, #24]	@ (10052048 <UTIL_LPM_SetOffMode+0x5c>)
1005202e:	601a      	str	r2, [r3, #0]
      break;
10052030:	e000      	b.n	10052034 <UTIL_LPM_SetOffMode+0x48>
    }
  default :
    {
      break;
10052032:	46c0      	nop			@ (mov r8, r8)
10052034:	697b      	ldr	r3, [r7, #20]
10052036:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10052038:	68fb      	ldr	r3, [r7, #12]
1005203a:	f383 8810 	msr	PRIMASK, r3
}
1005203e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
10052040:	46c0      	nop			@ (mov r8, r8)
10052042:	46bd      	mov	sp, r7
10052044:	b006      	add	sp, #24
10052046:	bd80      	pop	{r7, pc}
10052048:	20000ff8 	.word	0x20000ff8

1005204c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
1005204c:	b580      	push	{r7, lr}
1005204e:	b084      	sub	sp, #16
10052050:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10052052:	f3ef 8310 	mrs	r3, PRIMASK
10052056:	60bb      	str	r3, [r7, #8]
  return(result);
10052058:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
1005205a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
1005205c:	b672      	cpsid	i
}
1005205e:	46c0      	nop			@ (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
10052060:	4b12      	ldr	r3, [pc, #72]	@ (100520ac <UTIL_LPM_EnterLowPower+0x60>)
10052062:	681b      	ldr	r3, [r3, #0]
10052064:	2b00      	cmp	r3, #0
10052066:	d006      	beq.n	10052076 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
10052068:	4b11      	ldr	r3, [pc, #68]	@ (100520b0 <UTIL_LPM_EnterLowPower+0x64>)
1005206a:	681b      	ldr	r3, [r3, #0]
1005206c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
1005206e:	4b10      	ldr	r3, [pc, #64]	@ (100520b0 <UTIL_LPM_EnterLowPower+0x64>)
10052070:	685b      	ldr	r3, [r3, #4]
10052072:	4798      	blx	r3
10052074:	e010      	b.n	10052098 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
10052076:	4b0f      	ldr	r3, [pc, #60]	@ (100520b4 <UTIL_LPM_EnterLowPower+0x68>)
10052078:	681b      	ldr	r3, [r3, #0]
1005207a:	2b00      	cmp	r3, #0
1005207c:	d006      	beq.n	1005208c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
1005207e:	4b0c      	ldr	r3, [pc, #48]	@ (100520b0 <UTIL_LPM_EnterLowPower+0x64>)
10052080:	689b      	ldr	r3, [r3, #8]
10052082:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
10052084:	4b0a      	ldr	r3, [pc, #40]	@ (100520b0 <UTIL_LPM_EnterLowPower+0x64>)
10052086:	68db      	ldr	r3, [r3, #12]
10052088:	4798      	blx	r3
1005208a:	e005      	b.n	10052098 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
1005208c:	4b08      	ldr	r3, [pc, #32]	@ (100520b0 <UTIL_LPM_EnterLowPower+0x64>)
1005208e:	691b      	ldr	r3, [r3, #16]
10052090:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
10052092:	4b07      	ldr	r3, [pc, #28]	@ (100520b0 <UTIL_LPM_EnterLowPower+0x64>)
10052094:	695b      	ldr	r3, [r3, #20]
10052096:	4798      	blx	r3
10052098:	68fb      	ldr	r3, [r7, #12]
1005209a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1005209c:	687b      	ldr	r3, [r7, #4]
1005209e:	f383 8810 	msr	PRIMASK, r3
}
100520a2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
100520a4:	46c0      	nop			@ (mov r8, r8)
100520a6:	46bd      	mov	sp, r7
100520a8:	b004      	add	sp, #16
100520aa:	bd80      	pop	{r7, pc}
100520ac:	20000ff4 	.word	0x20000ff4
100520b0:	10069cf4 	.word	0x10069cf4
100520b4:	20000ff8 	.word	0x20000ff8

100520b8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
100520b8:	b580      	push	{r7, lr}
100520ba:	b090      	sub	sp, #64	@ 0x40
100520bc:	af00      	add	r7, sp, #0
100520be:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
100520c0:	4b75      	ldr	r3, [pc, #468]	@ (10052298 <UTIL_SEQ_Run+0x1e0>)
100520c2:	681b      	ldr	r3, [r3, #0]
100520c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
100520c6:	4b74      	ldr	r3, [pc, #464]	@ (10052298 <UTIL_SEQ_Run+0x1e0>)
100520c8:	681b      	ldr	r3, [r3, #0]
100520ca:	687a      	ldr	r2, [r7, #4]
100520cc:	401a      	ands	r2, r3
100520ce:	4b72      	ldr	r3, [pc, #456]	@ (10052298 <UTIL_SEQ_Run+0x1e0>)
100520d0:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
100520d2:	4b72      	ldr	r3, [pc, #456]	@ (1005229c <UTIL_SEQ_Run+0x1e4>)
100520d4:	681b      	ldr	r3, [r3, #0]
100520d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
100520d8:	4b71      	ldr	r3, [pc, #452]	@ (100522a0 <UTIL_SEQ_Run+0x1e8>)
100520da:	681b      	ldr	r3, [r3, #0]
100520dc:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
100520de:	4b71      	ldr	r3, [pc, #452]	@ (100522a4 <UTIL_SEQ_Run+0x1ec>)
100520e0:	681b      	ldr	r3, [r3, #0]
100520e2:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
100520e4:	4b70      	ldr	r3, [pc, #448]	@ (100522a8 <UTIL_SEQ_Run+0x1f0>)
100520e6:	681b      	ldr	r3, [r3, #0]
100520e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
100520ea:	e090      	b.n	1005220e <UTIL_SEQ_Run+0x156>
  {
    counter = 0U;
100520ec:	2300      	movs	r3, #0
100520ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
100520f0:	e002      	b.n	100520f8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
100520f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100520f4:	3301      	adds	r3, #1
100520f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
100520f8:	4b6c      	ldr	r3, [pc, #432]	@ (100522ac <UTIL_SEQ_Run+0x1f4>)
100520fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
100520fc:	00d2      	lsls	r2, r2, #3
100520fe:	58d3      	ldr	r3, [r2, r3]
10052100:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10052102:	401a      	ands	r2, r3
10052104:	4b64      	ldr	r3, [pc, #400]	@ (10052298 <UTIL_SEQ_Run+0x1e0>)
10052106:	681b      	ldr	r3, [r3, #0]
10052108:	4013      	ands	r3, r2
1005210a:	d0f2      	beq.n	100520f2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
1005210c:	4b67      	ldr	r3, [pc, #412]	@ (100522ac <UTIL_SEQ_Run+0x1f4>)
1005210e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10052110:	00d2      	lsls	r2, r2, #3
10052112:	58d3      	ldr	r3, [r2, r3]
10052114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10052116:	401a      	ands	r2, r3
10052118:	4b5f      	ldr	r3, [pc, #380]	@ (10052298 <UTIL_SEQ_Run+0x1e0>)
1005211a:	681b      	ldr	r3, [r3, #0]
1005211c:	4013      	ands	r3, r2
1005211e:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
10052120:	4a62      	ldr	r2, [pc, #392]	@ (100522ac <UTIL_SEQ_Run+0x1f4>)
10052122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10052124:	00db      	lsls	r3, r3, #3
10052126:	18d3      	adds	r3, r2, r3
10052128:	3304      	adds	r3, #4
1005212a:	681b      	ldr	r3, [r3, #0]
1005212c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1005212e:	4013      	ands	r3, r2
10052130:	d107      	bne.n	10052142 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
10052132:	4a5e      	ldr	r2, [pc, #376]	@ (100522ac <UTIL_SEQ_Run+0x1f4>)
10052134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10052136:	00db      	lsls	r3, r3, #3
10052138:	18d3      	adds	r3, r2, r3
1005213a:	3304      	adds	r3, #4
1005213c:	2201      	movs	r2, #1
1005213e:	4252      	negs	r2, r2
10052140:	601a      	str	r2, [r3, #0]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
10052142:	4a5a      	ldr	r2, [pc, #360]	@ (100522ac <UTIL_SEQ_Run+0x1f4>)
10052144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10052146:	00db      	lsls	r3, r3, #3
10052148:	18d3      	adds	r3, r2, r3
1005214a:	3304      	adds	r3, #4
1005214c:	681b      	ldr	r3, [r3, #0]
1005214e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10052150:	4013      	ands	r3, r2
10052152:	0018      	movs	r0, r3
10052154:	f000 f99a 	bl	1005248c <SEQ_BitPosition>
10052158:	0003      	movs	r3, r0
1005215a:	001a      	movs	r2, r3
1005215c:	4b54      	ldr	r3, [pc, #336]	@ (100522b0 <UTIL_SEQ_Run+0x1f8>)
1005215e:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
10052160:	4a52      	ldr	r2, [pc, #328]	@ (100522ac <UTIL_SEQ_Run+0x1f4>)
10052162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10052164:	00db      	lsls	r3, r3, #3
10052166:	18d3      	adds	r3, r2, r3
10052168:	3304      	adds	r3, #4
1005216a:	681a      	ldr	r2, [r3, #0]
1005216c:	4b50      	ldr	r3, [pc, #320]	@ (100522b0 <UTIL_SEQ_Run+0x1f8>)
1005216e:	681b      	ldr	r3, [r3, #0]
10052170:	2101      	movs	r1, #1
10052172:	4099      	lsls	r1, r3
10052174:	000b      	movs	r3, r1
10052176:	43db      	mvns	r3, r3
10052178:	401a      	ands	r2, r3
1005217a:	494c      	ldr	r1, [pc, #304]	@ (100522ac <UTIL_SEQ_Run+0x1f4>)
1005217c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1005217e:	00db      	lsls	r3, r3, #3
10052180:	18cb      	adds	r3, r1, r3
10052182:	3304      	adds	r3, #4
10052184:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10052186:	f3ef 8310 	mrs	r3, PRIMASK
1005218a:	61bb      	str	r3, [r7, #24]
  return(result);
1005218c:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
1005218e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
10052190:	b672      	cpsid	i
}
10052192:	46c0      	nop			@ (mov r8, r8)
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
10052194:	4b46      	ldr	r3, [pc, #280]	@ (100522b0 <UTIL_SEQ_Run+0x1f8>)
10052196:	681b      	ldr	r3, [r3, #0]
10052198:	2201      	movs	r2, #1
1005219a:	409a      	lsls	r2, r3
1005219c:	0013      	movs	r3, r2
1005219e:	43da      	mvns	r2, r3
100521a0:	4b3e      	ldr	r3, [pc, #248]	@ (1005229c <UTIL_SEQ_Run+0x1e4>)
100521a2:	681b      	ldr	r3, [r3, #0]
100521a4:	401a      	ands	r2, r3
100521a6:	4b3d      	ldr	r3, [pc, #244]	@ (1005229c <UTIL_SEQ_Run+0x1e4>)
100521a8:	601a      	str	r2, [r3, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
100521aa:	2302      	movs	r3, #2
100521ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
100521ae:	e013      	b.n	100521d8 <UTIL_SEQ_Run+0x120>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
100521b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100521b2:	1e5a      	subs	r2, r3, #1
100521b4:	4b3d      	ldr	r3, [pc, #244]	@ (100522ac <UTIL_SEQ_Run+0x1f4>)
100521b6:	00d2      	lsls	r2, r2, #3
100521b8:	58d1      	ldr	r1, [r2, r3]
100521ba:	4b3d      	ldr	r3, [pc, #244]	@ (100522b0 <UTIL_SEQ_Run+0x1f8>)
100521bc:	681b      	ldr	r3, [r3, #0]
100521be:	2201      	movs	r2, #1
100521c0:	409a      	lsls	r2, r3
100521c2:	0013      	movs	r3, r2
100521c4:	43db      	mvns	r3, r3
100521c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
100521c8:	3a01      	subs	r2, #1
100521ca:	4019      	ands	r1, r3
100521cc:	4b37      	ldr	r3, [pc, #220]	@ (100522ac <UTIL_SEQ_Run+0x1f4>)
100521ce:	00d2      	lsls	r2, r2, #3
100521d0:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
100521d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100521d4:	3b01      	subs	r3, #1
100521d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
100521d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100521da:	2b00      	cmp	r3, #0
100521dc:	d1e8      	bne.n	100521b0 <UTIL_SEQ_Run+0xf8>
100521de:	6a3b      	ldr	r3, [r7, #32]
100521e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100521e2:	697b      	ldr	r3, [r7, #20]
100521e4:	f383 8810 	msr	PRIMASK, r3
}
100521e8:	46c0      	nop			@ (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
100521ea:	4b31      	ldr	r3, [pc, #196]	@ (100522b0 <UTIL_SEQ_Run+0x1f8>)
100521ec:	681a      	ldr	r2, [r3, #0]
100521ee:	4b31      	ldr	r3, [pc, #196]	@ (100522b4 <UTIL_SEQ_Run+0x1fc>)
100521f0:	0092      	lsls	r2, r2, #2
100521f2:	58d3      	ldr	r3, [r2, r3]
100521f4:	4798      	blx	r3

    local_taskset = TaskSet;
100521f6:	4b29      	ldr	r3, [pc, #164]	@ (1005229c <UTIL_SEQ_Run+0x1e4>)
100521f8:	681b      	ldr	r3, [r3, #0]
100521fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
100521fc:	4b28      	ldr	r3, [pc, #160]	@ (100522a0 <UTIL_SEQ_Run+0x1e8>)
100521fe:	681b      	ldr	r3, [r3, #0]
10052200:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
10052202:	4b28      	ldr	r3, [pc, #160]	@ (100522a4 <UTIL_SEQ_Run+0x1ec>)
10052204:	681b      	ldr	r3, [r3, #0]
10052206:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
10052208:	4b27      	ldr	r3, [pc, #156]	@ (100522a8 <UTIL_SEQ_Run+0x1f0>)
1005220a:	681b      	ldr	r3, [r3, #0]
1005220c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
1005220e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10052210:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10052212:	401a      	ands	r2, r3
10052214:	4b20      	ldr	r3, [pc, #128]	@ (10052298 <UTIL_SEQ_Run+0x1e0>)
10052216:	681b      	ldr	r3, [r3, #0]
10052218:	4013      	ands	r3, r2
1005221a:	d004      	beq.n	10052226 <UTIL_SEQ_Run+0x16e>
1005221c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1005221e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10052220:	4013      	ands	r3, r2
10052222:	d100      	bne.n	10052226 <UTIL_SEQ_Run+0x16e>
10052224:	e762      	b.n	100520ec <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
10052226:	4b22      	ldr	r3, [pc, #136]	@ (100522b0 <UTIL_SEQ_Run+0x1f8>)
10052228:	2201      	movs	r2, #1
1005222a:	4252      	negs	r2, r2
1005222c:	601a      	str	r2, [r3, #0]
  /* if a waited event is present, ignore the IDLE sequence */
  if ((local_evtset & EvtWaited)== 0U)
1005222e:	4b1e      	ldr	r3, [pc, #120]	@ (100522a8 <UTIL_SEQ_Run+0x1f0>)
10052230:	681b      	ldr	r3, [r3, #0]
10052232:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10052234:	4013      	ands	r3, r2
10052236:	d127      	bne.n	10052288 <UTIL_SEQ_Run+0x1d0>
  {
    UTIL_SEQ_PreIdle( );
10052238:	f7f0 fd1c 	bl	10042c74 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1005223c:	f3ef 8310 	mrs	r3, PRIMASK
10052240:	613b      	str	r3, [r7, #16]
  return(result);
10052242:	693b      	ldr	r3, [r7, #16]

    UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
10052244:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10052246:	b672      	cpsid	i
}
10052248:	46c0      	nop			@ (mov r8, r8)
    local_taskset = TaskSet;
1005224a:	4b14      	ldr	r3, [pc, #80]	@ (1005229c <UTIL_SEQ_Run+0x1e4>)
1005224c:	681b      	ldr	r3, [r3, #0]
1005224e:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
10052250:	4b13      	ldr	r3, [pc, #76]	@ (100522a0 <UTIL_SEQ_Run+0x1e8>)
10052252:	681b      	ldr	r3, [r3, #0]
10052254:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
10052256:	4b13      	ldr	r3, [pc, #76]	@ (100522a4 <UTIL_SEQ_Run+0x1ec>)
10052258:	681b      	ldr	r3, [r3, #0]
1005225a:	633b      	str	r3, [r7, #48]	@ 0x30
    if ((local_taskset & local_taskmask & SuperMask) == 0U)
1005225c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1005225e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10052260:	401a      	ands	r2, r3
10052262:	4b0d      	ldr	r3, [pc, #52]	@ (10052298 <UTIL_SEQ_Run+0x1e0>)
10052264:	681b      	ldr	r3, [r3, #0]
10052266:	4013      	ands	r3, r2
10052268:	d106      	bne.n	10052278 <UTIL_SEQ_Run+0x1c0>
    {
      if ((local_evtset & EvtWaited)== 0U)
1005226a:	4b0f      	ldr	r3, [pc, #60]	@ (100522a8 <UTIL_SEQ_Run+0x1f0>)
1005226c:	681b      	ldr	r3, [r3, #0]
1005226e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10052270:	4013      	ands	r3, r2
10052272:	d101      	bne.n	10052278 <UTIL_SEQ_Run+0x1c0>
      {
        UTIL_SEQ_Idle( );
10052274:	f7f0 fd03 	bl	10042c7e <UTIL_SEQ_Idle>
10052278:	69fb      	ldr	r3, [r7, #28]
1005227a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1005227c:	68fb      	ldr	r3, [r7, #12]
1005227e:	f383 8810 	msr	PRIMASK, r3
}
10052282:	46c0      	nop			@ (mov r8, r8)
      }
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

    UTIL_SEQ_PostIdle( );
10052284:	f000 f8fc 	bl	10052480 <UTIL_SEQ_PostIdle>
  }

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
10052288:	4b03      	ldr	r3, [pc, #12]	@ (10052298 <UTIL_SEQ_Run+0x1e0>)
1005228a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1005228c:	601a      	str	r2, [r3, #0]

  return;
1005228e:	46c0      	nop			@ (mov r8, r8)
}
10052290:	46bd      	mov	sp, r7
10052292:	b010      	add	sp, #64	@ 0x40
10052294:	bd80      	pop	{r7, pc}
10052296:	46c0      	nop			@ (mov r8, r8)
10052298:	200014d8 	.word	0x200014d8
1005229c:	20000ffc 	.word	0x20000ffc
100522a0:	20001000 	.word	0x20001000
100522a4:	200014d4 	.word	0x200014d4
100522a8:	20001004 	.word	0x20001004
100522ac:	2000108c 	.word	0x2000108c
100522b0:	20001008 	.word	0x20001008
100522b4:	2000100c 	.word	0x2000100c

100522b8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
100522b8:	b580      	push	{r7, lr}
100522ba:	b088      	sub	sp, #32
100522bc:	af00      	add	r7, sp, #0
100522be:	60f8      	str	r0, [r7, #12]
100522c0:	60b9      	str	r1, [r7, #8]
100522c2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100522c4:	f3ef 8310 	mrs	r3, PRIMASK
100522c8:	617b      	str	r3, [r7, #20]
  return(result);
100522ca:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
100522cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
100522ce:	b672      	cpsid	i
}
100522d0:	46c0      	nop			@ (mov r8, r8)

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
100522d2:	68fb      	ldr	r3, [r7, #12]
100522d4:	0018      	movs	r0, r3
100522d6:	f000 f8d9 	bl	1005248c <SEQ_BitPosition>
100522da:	0003      	movs	r3, r0
100522dc:	001a      	movs	r2, r3
100522de:	4b07      	ldr	r3, [pc, #28]	@ (100522fc <UTIL_SEQ_RegTask+0x44>)
100522e0:	0092      	lsls	r2, r2, #2
100522e2:	6879      	ldr	r1, [r7, #4]
100522e4:	50d1      	str	r1, [r2, r3]
100522e6:	69fb      	ldr	r3, [r7, #28]
100522e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100522ea:	69bb      	ldr	r3, [r7, #24]
100522ec:	f383 8810 	msr	PRIMASK, r3
}
100522f0:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
100522f2:	46c0      	nop			@ (mov r8, r8)
}
100522f4:	46bd      	mov	sp, r7
100522f6:	b008      	add	sp, #32
100522f8:	bd80      	pop	{r7, pc}
100522fa:	46c0      	nop			@ (mov r8, r8)
100522fc:	2000100c 	.word	0x2000100c

10052300 <UTIL_SEQ_SetTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
10052300:	b580      	push	{r7, lr}
10052302:	b086      	sub	sp, #24
10052304:	af00      	add	r7, sp, #0
10052306:	6078      	str	r0, [r7, #4]
10052308:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1005230a:	f3ef 8310 	mrs	r3, PRIMASK
1005230e:	60fb      	str	r3, [r7, #12]
  return(result);
10052310:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
10052312:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
10052314:	b672      	cpsid	i
}
10052316:	46c0      	nop			@ (mov r8, r8)

  TaskSet |= TaskId_bm;
10052318:	4b0d      	ldr	r3, [pc, #52]	@ (10052350 <UTIL_SEQ_SetTask+0x50>)
1005231a:	681a      	ldr	r2, [r3, #0]
1005231c:	687b      	ldr	r3, [r7, #4]
1005231e:	431a      	orrs	r2, r3
10052320:	4b0b      	ldr	r3, [pc, #44]	@ (10052350 <UTIL_SEQ_SetTask+0x50>)
10052322:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
10052324:	4b0b      	ldr	r3, [pc, #44]	@ (10052354 <UTIL_SEQ_SetTask+0x54>)
10052326:	683a      	ldr	r2, [r7, #0]
10052328:	00d2      	lsls	r2, r2, #3
1005232a:	58d2      	ldr	r2, [r2, r3]
1005232c:	687b      	ldr	r3, [r7, #4]
1005232e:	431a      	orrs	r2, r3
10052330:	0011      	movs	r1, r2
10052332:	4b08      	ldr	r3, [pc, #32]	@ (10052354 <UTIL_SEQ_SetTask+0x54>)
10052334:	683a      	ldr	r2, [r7, #0]
10052336:	00d2      	lsls	r2, r2, #3
10052338:	50d1      	str	r1, [r2, r3]
1005233a:	697b      	ldr	r3, [r7, #20]
1005233c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1005233e:	693b      	ldr	r3, [r7, #16]
10052340:	f383 8810 	msr	PRIMASK, r3
}
10052344:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
10052346:	46c0      	nop			@ (mov r8, r8)
}
10052348:	46bd      	mov	sp, r7
1005234a:	b006      	add	sp, #24
1005234c:	bd80      	pop	{r7, pc}
1005234e:	46c0      	nop			@ (mov r8, r8)
10052350:	20000ffc 	.word	0x20000ffc
10052354:	2000108c 	.word	0x2000108c

10052358 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
10052358:	b580      	push	{r7, lr}
1005235a:	b086      	sub	sp, #24
1005235c:	af00      	add	r7, sp, #0
1005235e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10052360:	f3ef 8310 	mrs	r3, PRIMASK
10052364:	60fb      	str	r3, [r7, #12]
  return(result);
10052366:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
10052368:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
1005236a:	b672      	cpsid	i
}
1005236c:	46c0      	nop			@ (mov r8, r8)

  EvtSet |= EvtId_bm;
1005236e:	4b08      	ldr	r3, [pc, #32]	@ (10052390 <UTIL_SEQ_SetEvt+0x38>)
10052370:	681a      	ldr	r2, [r3, #0]
10052372:	687b      	ldr	r3, [r7, #4]
10052374:	431a      	orrs	r2, r3
10052376:	4b06      	ldr	r3, [pc, #24]	@ (10052390 <UTIL_SEQ_SetEvt+0x38>)
10052378:	601a      	str	r2, [r3, #0]
1005237a:	697b      	ldr	r3, [r7, #20]
1005237c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1005237e:	693b      	ldr	r3, [r7, #16]
10052380:	f383 8810 	msr	PRIMASK, r3
}
10052384:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
10052386:	46c0      	nop			@ (mov r8, r8)
}
10052388:	46bd      	mov	sp, r7
1005238a:	b006      	add	sp, #24
1005238c:	bd80      	pop	{r7, pc}
1005238e:	46c0      	nop			@ (mov r8, r8)
10052390:	20001000 	.word	0x20001000

10052394 <UTIL_SEQ_ClrEvt>:

void UTIL_SEQ_ClrEvt( UTIL_SEQ_bm_t EvtId_bm )
{
10052394:	b580      	push	{r7, lr}
10052396:	b086      	sub	sp, #24
10052398:	af00      	add	r7, sp, #0
1005239a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1005239c:	f3ef 8310 	mrs	r3, PRIMASK
100523a0:	60fb      	str	r3, [r7, #12]
  return(result);
100523a2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
100523a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
100523a6:	b672      	cpsid	i
}
100523a8:	46c0      	nop			@ (mov r8, r8)

  EvtSet &= (~EvtId_bm);
100523aa:	687b      	ldr	r3, [r7, #4]
100523ac:	43da      	mvns	r2, r3
100523ae:	4b07      	ldr	r3, [pc, #28]	@ (100523cc <UTIL_SEQ_ClrEvt+0x38>)
100523b0:	681b      	ldr	r3, [r3, #0]
100523b2:	401a      	ands	r2, r3
100523b4:	4b05      	ldr	r3, [pc, #20]	@ (100523cc <UTIL_SEQ_ClrEvt+0x38>)
100523b6:	601a      	str	r2, [r3, #0]
100523b8:	697b      	ldr	r3, [r7, #20]
100523ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100523bc:	693b      	ldr	r3, [r7, #16]
100523be:	f383 8810 	msr	PRIMASK, r3
}
100523c2:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
100523c4:	46c0      	nop			@ (mov r8, r8)
}
100523c6:	46bd      	mov	sp, r7
100523c8:	b006      	add	sp, #24
100523ca:	bd80      	pop	{r7, pc}
100523cc:	20001000 	.word	0x20001000

100523d0 <UTIL_SEQ_WaitEvt>:

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
100523d0:	b580      	push	{r7, lr}
100523d2:	b088      	sub	sp, #32
100523d4:	af00      	add	r7, sp, #0
100523d6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
100523d8:	4b1f      	ldr	r3, [pc, #124]	@ (10052458 <UTIL_SEQ_WaitEvt+0x88>)
100523da:	681b      	ldr	r3, [r3, #0]
100523dc:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
100523de:	4b1e      	ldr	r3, [pc, #120]	@ (10052458 <UTIL_SEQ_WaitEvt+0x88>)
100523e0:	681b      	ldr	r3, [r3, #0]
100523e2:	3301      	adds	r3, #1
100523e4:	d102      	bne.n	100523ec <UTIL_SEQ_WaitEvt+0x1c>
  {
    wait_task_idx = 0u;
100523e6:	2300      	movs	r3, #0
100523e8:	61fb      	str	r3, [r7, #28]
100523ea:	e005      	b.n	100523f8 <UTIL_SEQ_WaitEvt+0x28>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
100523ec:	4b1a      	ldr	r3, [pc, #104]	@ (10052458 <UTIL_SEQ_WaitEvt+0x88>)
100523ee:	681b      	ldr	r3, [r3, #0]
100523f0:	2201      	movs	r2, #1
100523f2:	409a      	lsls	r2, r3
100523f4:	0013      	movs	r3, r2
100523f6:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
100523f8:	4b18      	ldr	r3, [pc, #96]	@ (1005245c <UTIL_SEQ_WaitEvt+0x8c>)
100523fa:	681b      	ldr	r3, [r3, #0]
100523fc:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
100523fe:	4b17      	ldr	r3, [pc, #92]	@ (1005245c <UTIL_SEQ_WaitEvt+0x8c>)
10052400:	687a      	ldr	r2, [r7, #4]
10052402:	601a      	str	r2, [r3, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
10052404:	e005      	b.n	10052412 <UTIL_SEQ_WaitEvt+0x42>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
10052406:	687a      	ldr	r2, [r7, #4]
10052408:	69fb      	ldr	r3, [r7, #28]
1005240a:	0011      	movs	r1, r2
1005240c:	0018      	movs	r0, r3
1005240e:	f000 f829 	bl	10052464 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
10052412:	4b13      	ldr	r3, [pc, #76]	@ (10052460 <UTIL_SEQ_WaitEvt+0x90>)
10052414:	681b      	ldr	r3, [r3, #0]
10052416:	687a      	ldr	r2, [r7, #4]
10052418:	4013      	ands	r3, r2
1005241a:	d0f4      	beq.n	10052406 <UTIL_SEQ_WaitEvt+0x36>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
1005241c:	4b0e      	ldr	r3, [pc, #56]	@ (10052458 <UTIL_SEQ_WaitEvt+0x88>)
1005241e:	69ba      	ldr	r2, [r7, #24]
10052420:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10052422:	f3ef 8310 	mrs	r3, PRIMASK
10052426:	60bb      	str	r3, [r7, #8]
  return(result);
10052428:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
1005242a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
1005242c:	b672      	cpsid	i
}
1005242e:	46c0      	nop			@ (mov r8, r8)

  EvtSet &= (~EvtId_bm);
10052430:	687b      	ldr	r3, [r7, #4]
10052432:	43da      	mvns	r2, r3
10052434:	4b0a      	ldr	r3, [pc, #40]	@ (10052460 <UTIL_SEQ_WaitEvt+0x90>)
10052436:	681b      	ldr	r3, [r3, #0]
10052438:	401a      	ands	r2, r3
1005243a:	4b09      	ldr	r3, [pc, #36]	@ (10052460 <UTIL_SEQ_WaitEvt+0x90>)
1005243c:	601a      	str	r2, [r3, #0]
1005243e:	693b      	ldr	r3, [r7, #16]
10052440:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10052442:	68fb      	ldr	r3, [r7, #12]
10052444:	f383 8810 	msr	PRIMASK, r3
}
10052448:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
1005244a:	4b04      	ldr	r3, [pc, #16]	@ (1005245c <UTIL_SEQ_WaitEvt+0x8c>)
1005244c:	697a      	ldr	r2, [r7, #20]
1005244e:	601a      	str	r2, [r3, #0]
  return;
10052450:	46c0      	nop			@ (mov r8, r8)
}
10052452:	46bd      	mov	sp, r7
10052454:	b008      	add	sp, #32
10052456:	bd80      	pop	{r7, pc}
10052458:	20001008 	.word	0x20001008
1005245c:	20001004 	.word	0x20001004
10052460:	20001000 	.word	0x20001000

10052464 <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
10052464:	b580      	push	{r7, lr}
10052466:	b082      	sub	sp, #8
10052468:	af00      	add	r7, sp, #0
1005246a:	6078      	str	r0, [r7, #4]
1005246c:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
1005246e:	687b      	ldr	r3, [r7, #4]
10052470:	43db      	mvns	r3, r3
10052472:	0018      	movs	r0, r3
10052474:	f7ff fe20 	bl	100520b8 <UTIL_SEQ_Run>
  return;
10052478:	46c0      	nop			@ (mov r8, r8)
}
1005247a:	46bd      	mov	sp, r7
1005247c:	b002      	add	sp, #8
1005247e:	bd80      	pop	{r7, pc}

10052480 <UTIL_SEQ_PostIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PostIdle( void )
{
10052480:	b580      	push	{r7, lr}
10052482:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
10052484:	46c0      	nop			@ (mov r8, r8)
}
10052486:	46bd      	mov	sp, r7
10052488:	bd80      	pop	{r7, pc}
	...

1005248c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
1005248c:	b580      	push	{r7, lr}
1005248e:	b084      	sub	sp, #16
10052490:	af00      	add	r7, sp, #0
10052492:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
10052494:	210f      	movs	r1, #15
10052496:	187b      	adds	r3, r7, r1
10052498:	2200      	movs	r2, #0
1005249a:	701a      	strb	r2, [r3, #0]
uint32_t lvalue = Value;
1005249c:	687b      	ldr	r3, [r7, #4]
1005249e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
100524a0:	68ba      	ldr	r2, [r7, #8]
100524a2:	2380      	movs	r3, #128	@ 0x80
100524a4:	025b      	lsls	r3, r3, #9
100524a6:	429a      	cmp	r2, r3
100524a8:	d205      	bcs.n	100524b6 <SEQ_BitPosition+0x2a>
100524aa:	187b      	adds	r3, r7, r1
100524ac:	2210      	movs	r2, #16
100524ae:	701a      	strb	r2, [r3, #0]
100524b0:	68bb      	ldr	r3, [r7, #8]
100524b2:	041b      	lsls	r3, r3, #16
100524b4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
100524b6:	68ba      	ldr	r2, [r7, #8]
100524b8:	2380      	movs	r3, #128	@ 0x80
100524ba:	045b      	lsls	r3, r3, #17
100524bc:	429a      	cmp	r2, r3
100524be:	d208      	bcs.n	100524d2 <SEQ_BitPosition+0x46>
100524c0:	220f      	movs	r2, #15
100524c2:	18bb      	adds	r3, r7, r2
100524c4:	18ba      	adds	r2, r7, r2
100524c6:	7812      	ldrb	r2, [r2, #0]
100524c8:	3208      	adds	r2, #8
100524ca:	701a      	strb	r2, [r3, #0]
100524cc:	68bb      	ldr	r3, [r7, #8]
100524ce:	021b      	lsls	r3, r3, #8
100524d0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
100524d2:	68ba      	ldr	r2, [r7, #8]
100524d4:	2380      	movs	r3, #128	@ 0x80
100524d6:	055b      	lsls	r3, r3, #21
100524d8:	429a      	cmp	r2, r3
100524da:	d208      	bcs.n	100524ee <SEQ_BitPosition+0x62>
100524dc:	220f      	movs	r2, #15
100524de:	18bb      	adds	r3, r7, r2
100524e0:	18ba      	adds	r2, r7, r2
100524e2:	7812      	ldrb	r2, [r2, #0]
100524e4:	3204      	adds	r2, #4
100524e6:	701a      	strb	r2, [r3, #0]
100524e8:	68bb      	ldr	r3, [r7, #8]
100524ea:	011b      	lsls	r3, r3, #4
100524ec:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
100524ee:	68bb      	ldr	r3, [r7, #8]
100524f0:	0f1b      	lsrs	r3, r3, #28
100524f2:	4a08      	ldr	r2, [pc, #32]	@ (10052514 <SEQ_BitPosition+0x88>)
100524f4:	5cd1      	ldrb	r1, [r2, r3]
100524f6:	200f      	movs	r0, #15
100524f8:	183b      	adds	r3, r7, r0
100524fa:	183a      	adds	r2, r7, r0
100524fc:	7812      	ldrb	r2, [r2, #0]
100524fe:	188a      	adds	r2, r1, r2
10052500:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
10052502:	183b      	adds	r3, r7, r0
10052504:	781b      	ldrb	r3, [r3, #0]
10052506:	221f      	movs	r2, #31
10052508:	1ad3      	subs	r3, r2, r3
1005250a:	b2db      	uxtb	r3, r3
}
1005250c:	0018      	movs	r0, r3
1005250e:	46bd      	mov	sp, r7
10052510:	b004      	add	sp, #16
10052512:	bd80      	pop	{r7, pc}
10052514:	10069ef4 	.word	0x10069ef4

10052518 <aci_gap_init>:
10052518:	b580      	push	{r7, lr}
1005251a:	2802      	cmp	r0, #2
1005251c:	d901      	bls.n	10052522 <aci_gap_init+0xa>
1005251e:	2012      	movs	r0, #18
10052520:	bd80      	pop	{r7, pc}
10052522:	f001 fbfb 	bl	10053d1c <GAP_Init>
10052526:	bd80      	pop	{r7, pc}

10052528 <aci_gap_terminate_api>:
10052528:	b580      	push	{r7, lr}
1005252a:	f001 fdc1 	bl	100540b0 <GAP_Terminate_Link>
1005252e:	bd80      	pop	{r7, pc}

10052530 <_aci_gap_lists_check>:
10052530:	b5b0      	push	{r4, r5, r7, lr}
10052532:	4604      	mov	r4, r0
10052534:	7800      	ldrb	r0, [r0, #0]
10052536:	2800      	cmp	r0, #0
10052538:	d001      	beq.n	1005253e <_aci_gap_lists_check+0xe>
1005253a:	2804      	cmp	r0, #4
1005253c:	d301      	bcc.n	10052542 <_aci_gap_lists_check+0x12>
1005253e:	2012      	movs	r0, #18
10052540:	e000      	b.n	10052544 <_aci_gap_lists_check+0x14>
10052542:	2000      	movs	r0, #0
10052544:	2512      	movs	r5, #18
10052546:	2a00      	cmp	r2, #0
10052548:	462a      	mov	r2, r5
1005254a:	d000      	beq.n	1005254e <_aci_gap_lists_check+0x1e>
1005254c:	4602      	mov	r2, r0
1005254e:	2901      	cmp	r1, #1
10052550:	d800      	bhi.n	10052554 <_aci_gap_lists_check+0x24>
10052552:	4615      	mov	r5, r2
10052554:	2d00      	cmp	r5, #0
10052556:	d107      	bne.n	10052568 <_aci_gap_lists_check+0x38>
10052558:	f007 fab2 	bl	10059ac0 <llc_priv_controller_privacy_csr_ucfg_weak>
1005255c:	2800      	cmp	r0, #0
1005255e:	d103      	bne.n	10052568 <_aci_gap_lists_check+0x38>
10052560:	7820      	ldrb	r0, [r4, #0]
10052562:	21fd      	movs	r1, #253	@ 0xfd
10052564:	4001      	ands	r1, r0
10052566:	7021      	strb	r1, [r4, #0]
10052568:	4628      	mov	r0, r5
1005256a:	bdb0      	pop	{r4, r5, r7, pc}

1005256c <aci_gap_configure_filter_accept_and_resolving_list>:
1005256c:	b5e0      	push	{r5, r6, r7, lr}
1005256e:	a901      	add	r1, sp, #4
10052570:	7008      	strb	r0, [r1, #0]
10052572:	2201      	movs	r2, #1
10052574:	4608      	mov	r0, r1
10052576:	4611      	mov	r1, r2
10052578:	f7ff ffda 	bl	10052530 <_aci_gap_lists_check>
1005257c:	2800      	cmp	r0, #0
1005257e:	d000      	beq.n	10052582 <aci_gap_configure_filter_accept_and_resolving_list+0x16>
10052580:	bd8c      	pop	{r2, r3, r7, pc}
10052582:	a801      	add	r0, sp, #4
10052584:	7800      	ldrb	r0, [r0, #0]
10052586:	f001 fda9 	bl	100540dc <GAP_configure_filter_accept_and_resolving_list>
1005258a:	bd8c      	pop	{r2, r3, r7, pc}

1005258c <GAP_set_advertising_configuration_ucfg_weak>:
1005258c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1005258e:	461c      	mov	r4, r3
10052590:	4608      	mov	r0, r1
10052592:	990a      	ldr	r1, [sp, #40]	@ 0x28
10052594:	9103      	str	r1, [sp, #12]
10052596:	9909      	ldr	r1, [sp, #36]	@ 0x24
10052598:	9102      	str	r1, [sp, #8]
1005259a:	9908      	ldr	r1, [sp, #32]
1005259c:	9101      	str	r1, [sp, #4]
1005259e:	9907      	ldr	r1, [sp, #28]
100525a0:	9100      	str	r1, [sp, #0]
100525a2:	9b06      	ldr	r3, [sp, #24]
100525a4:	4611      	mov	r1, r2
100525a6:	4622      	mov	r2, r4
100525a8:	f001 fe78 	bl	1005429c <GAP_set_legacy_advertising_configuration>
100525ac:	b004      	add	sp, #16
100525ae:	bd10      	pop	{r4, pc}

100525b0 <GAP_set_advertising_data_ucfg_weak>:
100525b0:	b580      	push	{r7, lr}
100525b2:	4619      	mov	r1, r3
100525b4:	4610      	mov	r0, r2
100525b6:	f001 ffcb 	bl	10054550 <GAP_set_legacy_advertising_data>
100525ba:	bd80      	pop	{r7, pc}

100525bc <GAP_set_advertising_enable_ucfg_weak>:
100525bc:	b580      	push	{r7, lr}
100525be:	f001 fec1 	bl	10054344 <GAP_set_legacy_advertising_enable>
100525c2:	bd80      	pop	{r7, pc}

100525c4 <aci_gap_set_advertising_configuration>:
100525c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100525c6:	b093      	sub	sp, #76	@ 0x4c
100525c8:	461f      	mov	r7, r3
100525ca:	4615      	mov	r5, r2
100525cc:	460e      	mov	r6, r1
100525ce:	9012      	str	r0, [sp, #72]	@ 0x48
100525d0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
100525d2:	4608      	mov	r0, r1
100525d4:	4611      	mov	r1, r2
100525d6:	4622      	mov	r2, r4
100525d8:	f001 fe32 	bl	10054240 <GAP_check_discoverability_mode>
100525dc:	2800      	cmp	r0, #0
100525de:	d124      	bne.n	1005262a <aci_gap_set_advertising_configuration+0x66>
100525e0:	9822      	ldr	r0, [sp, #136]	@ 0x88
100525e2:	900d      	str	r0, [sp, #52]	@ 0x34
100525e4:	ab1f      	add	r3, sp, #124	@ 0x7c
100525e6:	cb0d      	ldmia	r3, {r0, r2, r3}
100525e8:	9011      	str	r0, [sp, #68]	@ 0x44
100525ea:	981e      	ldr	r0, [sp, #120]	@ 0x78
100525ec:	900f      	str	r0, [sp, #60]	@ 0x3c
100525ee:	981d      	ldr	r0, [sp, #116]	@ 0x74
100525f0:	900e      	str	r0, [sp, #56]	@ 0x38
100525f2:	981b      	ldr	r0, [sp, #108]	@ 0x6c
100525f4:	900c      	str	r0, [sp, #48]	@ 0x30
100525f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
100525f8:	9819      	ldr	r0, [sp, #100]	@ 0x64
100525fa:	9710      	str	r7, [sp, #64]	@ 0x40
100525fc:	9f18      	ldr	r7, [sp, #96]	@ 0x60
100525fe:	9208      	str	r2, [sp, #32]
10052600:	9309      	str	r3, [sp, #36]	@ 0x24
10052602:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10052604:	920a      	str	r2, [sp, #40]	@ 0x28
10052606:	9700      	str	r7, [sp, #0]
10052608:	9001      	str	r0, [sp, #4]
1005260a:	9102      	str	r1, [sp, #8]
1005260c:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005260e:	9003      	str	r0, [sp, #12]
10052610:	9404      	str	r4, [sp, #16]
10052612:	980e      	ldr	r0, [sp, #56]	@ 0x38
10052614:	9005      	str	r0, [sp, #20]
10052616:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10052618:	9006      	str	r0, [sp, #24]
1005261a:	9811      	ldr	r0, [sp, #68]	@ 0x44
1005261c:	9007      	str	r0, [sp, #28]
1005261e:	9812      	ldr	r0, [sp, #72]	@ 0x48
10052620:	4631      	mov	r1, r6
10052622:	462a      	mov	r2, r5
10052624:	9b10      	ldr	r3, [sp, #64]	@ 0x40
10052626:	f7ff ffb1 	bl	1005258c <GAP_set_advertising_configuration_ucfg_weak>
1005262a:	b013      	add	sp, #76	@ 0x4c
1005262c:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005262e <aci_gap_set_advertising_data>:
1005262e:	b580      	push	{r7, lr}
10052630:	f7ff ffbe 	bl	100525b0 <GAP_set_advertising_data_ucfg_weak>
10052634:	bd80      	pop	{r7, pc}

10052636 <aci_gap_set_advertising_enable>:
10052636:	b580      	push	{r7, lr}
10052638:	f7ff ffc0 	bl	100525bc <GAP_set_advertising_enable_ucfg_weak>
1005263c:	bd80      	pop	{r7, pc}

1005263e <aci_gap_set_io_capability_api>:
1005263e:	b580      	push	{r7, lr}
10052640:	2804      	cmp	r0, #4
10052642:	d901      	bls.n	10052648 <aci_gap_set_io_capability_api+0xa>
10052644:	2012      	movs	r0, #18
10052646:	bd80      	pop	{r7, pc}
10052648:	f00f fa0e 	bl	10061a68 <smp_sap_aci_set_io_capabilities>
1005264c:	bd80      	pop	{r7, pc}
	...

10052650 <aci_gap_set_security_requirements_api>:
10052650:	b5f0      	push	{r4, r5, r6, r7, lr}
10052652:	b089      	sub	sp, #36	@ 0x24
10052654:	4605      	mov	r5, r0
10052656:	4608      	mov	r0, r1
10052658:	4328      	orrs	r0, r5
1005265a:	2412      	movs	r4, #18
1005265c:	2801      	cmp	r0, #1
1005265e:	d836      	bhi.n	100526ce <aci_gap_set_security_requirements_api+0x7e>
10052660:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
10052662:	2f07      	cmp	r7, #7
10052664:	d333      	bcc.n	100526ce <aci_gap_set_security_requirements_api+0x7e>
10052666:	2f10      	cmp	r7, #16
10052668:	d831      	bhi.n	100526ce <aci_gap_set_security_requirements_api+0x7e>
1005266a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
1005266c:	2810      	cmp	r0, #16
1005266e:	d82e      	bhi.n	100526ce <aci_gap_set_security_requirements_api+0x7e>
10052670:	42b8      	cmp	r0, r7
10052672:	d32c      	bcc.n	100526ce <aci_gap_set_security_requirements_api+0x7e>
10052674:	460e      	mov	r6, r1
10052676:	9910      	ldr	r1, [sp, #64]	@ 0x40
10052678:	2902      	cmp	r1, #2
1005267a:	d828      	bhi.n	100526ce <aci_gap_set_security_requirements_api+0x7e>
1005267c:	9101      	str	r1, [sp, #4]
1005267e:	9002      	str	r0, [sp, #8]
10052680:	9303      	str	r3, [sp, #12]
10052682:	9204      	str	r2, [sp, #16]
10052684:	f7ff f872 	bl	1005176c <secure_connections_csr_ucfg>
10052688:	2801      	cmp	r0, #1
1005268a:	d106      	bne.n	1005269a <aci_gap_set_security_requirements_api+0x4a>
1005268c:	9904      	ldr	r1, [sp, #16]
1005268e:	2902      	cmp	r1, #2
10052690:	d81d      	bhi.n	100526ce <aci_gap_set_security_requirements_api+0x7e>
10052692:	9a03      	ldr	r2, [sp, #12]
10052694:	2a01      	cmp	r2, #1
10052696:	d907      	bls.n	100526a8 <aci_gap_set_security_requirements_api+0x58>
10052698:	e019      	b.n	100526ce <aci_gap_set_security_requirements_api+0x7e>
1005269a:	9a03      	ldr	r2, [sp, #12]
1005269c:	4610      	mov	r0, r2
1005269e:	9904      	ldr	r1, [sp, #16]
100526a0:	4308      	orrs	r0, r1
100526a2:	d001      	beq.n	100526a8 <aci_gap_set_security_requirements_api+0x58>
100526a4:	2411      	movs	r4, #17
100526a6:	e012      	b.n	100526ce <aci_gap_set_security_requirements_api+0x7e>
100526a8:	ac05      	add	r4, sp, #20
100526aa:	9801      	ldr	r0, [sp, #4]
100526ac:	7320      	strb	r0, [r4, #12]
100526ae:	4809      	ldr	r0, [pc, #36]	@ (100526d4 <__arm_cp.1_0>)
100526b0:	80e0      	strh	r0, [r4, #6]
100526b2:	9802      	ldr	r0, [sp, #8]
100526b4:	7160      	strb	r0, [r4, #5]
100526b6:	7127      	strb	r7, [r4, #4]
100526b8:	70e2      	strb	r2, [r4, #3]
100526ba:	70a1      	strb	r1, [r4, #2]
100526bc:	7066      	strb	r6, [r4, #1]
100526be:	7025      	strb	r5, [r4, #0]
100526c0:	f001 fcd6 	bl	10054070 <GAP_get_identity_address_type>
100526c4:	7360      	strb	r0, [r4, #13]
100526c6:	4620      	mov	r0, r4
100526c8:	f00f fa04 	bl	10061ad4 <smp_sap_aci_set_authentication_req>
100526cc:	4604      	mov	r4, r0
100526ce:	4620      	mov	r0, r4
100526d0:	b009      	add	sp, #36	@ 0x24
100526d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

100526d4 <__arm_cp.1_0>:
100526d4:	00000707 	.word	0x00000707

100526d8 <aci_gap_passkey_resp_api>:
100526d8:	b580      	push	{r7, lr}
100526da:	4a04      	ldr	r2, [pc, #16]	@ (100526ec <__arm_cp.4_0>)
100526dc:	4291      	cmp	r1, r2
100526de:	d901      	bls.n	100526e4 <aci_gap_passkey_resp_api+0xc>
100526e0:	2012      	movs	r0, #18
100526e2:	bd80      	pop	{r7, pc}
100526e4:	f00f fa20 	bl	10061b28 <smp_sap_aci_passkey_response>
100526e8:	bd80      	pop	{r7, pc}
100526ea:	46c0      	nop			@ (mov r8, r8)

100526ec <__arm_cp.4_0>:
100526ec:	000f423f 	.word	0x000f423f

100526f0 <aci_gap_numeric_comparison_value_confirm_yesno_api>:
100526f0:	b580      	push	{r7, lr}
100526f2:	2901      	cmp	r1, #1
100526f4:	d802      	bhi.n	100526fc <aci_gap_numeric_comparison_value_confirm_yesno_api+0xc>
100526f6:	f00f fa35 	bl	10061b64 <smp_sap_aci_scp_numeric_comparison_response>
100526fa:	bd80      	pop	{r7, pc}
100526fc:	2012      	movs	r0, #18
100526fe:	bd80      	pop	{r7, pc}

10052700 <aci_gap_clear_security_db_api>:
10052700:	b580      	push	{r7, lr}
10052702:	f00d faa1 	bl	1005fc48 <sdb_sap_clear_all_records>
10052706:	2000      	movs	r0, #0
10052708:	bd80      	pop	{r7, pc}

1005270a <aci_gatt_srv_add_service_api>:
1005270a:	b580      	push	{r7, lr}
1005270c:	f004 fa16 	bl	10056b3c <GAT_srv_add_service>
10052710:	bd80      	pop	{r7, pc}

10052712 <aci_gatt_srv_get_service_handle_api>:
10052712:	b580      	push	{r7, lr}
10052714:	f004 fcd8 	bl	100570c8 <GAT_srv_get_service_handle>
10052718:	bd80      	pop	{r7, pc}

1005271a <aci_gatt_srv_add_char_api>:
1005271a:	b580      	push	{r7, lr}
1005271c:	f004 fabe 	bl	10056c9c <GAT_srv_add_characteristic>
10052720:	bd80      	pop	{r7, pc}

10052722 <aci_gatt_srv_get_char_decl_handle_api>:
10052722:	b580      	push	{r7, lr}
10052724:	f004 fcda 	bl	100570dc <GAT_srv_get_char_decl_handle>
10052728:	bd80      	pop	{r7, pc}

1005272a <aci_gatt_srv_notify_api>:
1005272a:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1005272c:	461c      	mov	r4, r3
1005272e:	ab02      	add	r3, sp, #8
10052730:	9d08      	ldr	r5, [sp, #32]
10052732:	805d      	strh	r5, [r3, #2]
10052734:	801a      	strh	r2, [r3, #0]
10052736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10052738:	9203      	str	r2, [sp, #12]
1005273a:	9300      	str	r3, [sp, #0]
1005273c:	2301      	movs	r3, #1
1005273e:	4622      	mov	r2, r4
10052740:	f004 fc32 	bl	10056fa8 <GAT_srv_notify>
10052744:	b004      	add	sp, #16
10052746:	bdb0      	pop	{r4, r5, r7, pc}

10052748 <aci_gatt_srv_resp_api>:
10052748:	b51c      	push	{r2, r3, r4, lr}
1005274a:	9c05      	ldr	r4, [sp, #20]
1005274c:	9401      	str	r4, [sp, #4]
1005274e:	9c04      	ldr	r4, [sp, #16]
10052750:	9400      	str	r4, [sp, #0]
10052752:	f004 fcb1 	bl	100570b8 <GAT_srv_resp>
10052756:	2000      	movs	r0, #0
10052758:	bd1c      	pop	{r2, r3, r4, pc}

1005275a <aci_gatt_clt_exchange_config_api>:
1005275a:	b580      	push	{r7, lr}
1005275c:	f003 fabf 	bl	10055cde <GAT_clt_exchange_mtu>
10052760:	bd80      	pop	{r7, pc}

10052762 <aci_gatt_clt_confirm_indication_api>:
10052762:	b580      	push	{r7, lr}
10052764:	f003 fac8 	bl	10055cf8 <GAT_clt_confirm_indication>
10052768:	bd80      	pop	{r7, pc}

1005276a <configBitmapGet>:
1005276a:	2000      	movs	r0, #0
1005276c:	4770      	bx	lr
	...

10052770 <HAL_Read_ConfigData>:
10052770:	b5f0      	push	{r4, r5, r6, r7, lr}
10052772:	b08b      	sub	sp, #44	@ 0x2c
10052774:	4615      	mov	r5, r2
10052776:	460c      	mov	r4, r1
10052778:	493a      	ldr	r1, [pc, #232]	@ (10052864 <__arm_cp.5_0>)
1005277a:	680b      	ldr	r3, [r1, #0]
1005277c:	4606      	mov	r6, r0
1005277e:	3e28      	subs	r6, #40	@ 0x28
10052780:	2206      	movs	r2, #6
10052782:	2112      	movs	r1, #18
10052784:	2e0b      	cmp	r6, #11
10052786:	d910      	bls.n	100527aa <HAL_Read_ConfigData+0x3a>
10052788:	2800      	cmp	r0, #0
1005278a:	d01c      	beq.n	100527c6 <HAL_Read_ConfigData+0x56>
1005278c:	28ff      	cmp	r0, #255	@ 0xff
1005278e:	d035      	beq.n	100527fc <HAL_Read_ConfigData+0x8c>
10052790:	2808      	cmp	r0, #8
10052792:	d017      	beq.n	100527c4 <HAL_Read_ConfigData+0x54>
10052794:	2818      	cmp	r0, #24
10052796:	d015      	beq.n	100527c4 <HAL_Read_ConfigData+0x54>
10052798:	2880      	cmp	r0, #128	@ 0x80
1005279a:	d03c      	beq.n	10052816 <HAL_Read_ConfigData+0xa6>
1005279c:	2881      	cmp	r0, #129	@ 0x81
1005279e:	d047      	beq.n	10052830 <HAL_Read_ConfigData+0xc0>
100527a0:	28fe      	cmp	r0, #254	@ 0xfe
100527a2:	d04b      	beq.n	1005283c <HAL_Read_ConfigData+0xcc>
100527a4:	2806      	cmp	r0, #6
100527a6:	d00b      	beq.n	100527c0 <HAL_Read_ConfigData+0x50>
100527a8:	e013      	b.n	100527d2 <HAL_Read_ConfigData+0x62>
100527aa:	46c0      	nop			@ (mov r8, r8)
100527ac:	447e      	add	r6, pc
100527ae:	7936      	ldrb	r6, [r6, #4]
100527b0:	0076      	lsls	r6, r6, #1
100527b2:	44b7      	add	pc, r6
100527b4:	0e050e05 	.word	0x0e050e05
100527b8:	0e080e11 	.word	0x0e080e11
100527bc:	180e0e0e 	.word	0x180e0e0e
100527c0:	2202      	movs	r2, #2
100527c2:	e000      	b.n	100527c6 <HAL_Read_ConfigData+0x56>
100527c4:	2210      	movs	r2, #16
100527c6:	7022      	strb	r2, [r4, #0]
100527c8:	1819      	adds	r1, r3, r0
100527ca:	4628      	mov	r0, r5
100527cc:	f7f3 fc42 	bl	10046054 <BLEPLAT_MemCpy>
100527d0:	2100      	movs	r1, #0
100527d2:	4608      	mov	r0, r1
100527d4:	b00b      	add	sp, #44	@ 0x2c
100527d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100527d8:	2001      	movs	r0, #1
100527da:	7020      	strb	r0, [r4, #0]
100527dc:	212c      	movs	r1, #44	@ 0x2c
100527de:	5c59      	ldrb	r1, [r3, r1]
100527e0:	4001      	ands	r1, r0
100527e2:	7029      	strb	r1, [r5, #0]
100527e4:	e7f4      	b.n	100527d0 <HAL_Read_ConfigData+0x60>
100527e6:	f001 fd23 	bl	10054230 <GAP_is_rpa_change_at_timeout_enabled>
100527ea:	a901      	add	r1, sp, #4
100527ec:	7008      	strb	r0, [r1, #0]
100527ee:	2601      	movs	r6, #1
100527f0:	4628      	mov	r0, r5
100527f2:	4632      	mov	r2, r6
100527f4:	f7f3 fc2e 	bl	10046054 <BLEPLAT_MemCpy>
100527f8:	7026      	strb	r6, [r4, #0]
100527fa:	e7e9      	b.n	100527d0 <HAL_Read_ConfigData+0x60>
100527fc:	a801      	add	r0, sp, #4
100527fe:	f7ff ffb4 	bl	1005276a <configBitmapGet>
10052802:	2800      	cmp	r0, #0
10052804:	d026      	beq.n	10052854 <HAL_Read_ConfigData+0xe4>
10052806:	a901      	add	r1, sp, #4
10052808:	2604      	movs	r6, #4
1005280a:	4628      	mov	r0, r5
1005280c:	4632      	mov	r2, r6
1005280e:	f7f3 fc21 	bl	10046054 <BLEPLAT_MemCpy>
10052812:	2100      	movs	r1, #0
10052814:	e020      	b.n	10052858 <HAL_Read_ConfigData+0xe8>
10052816:	2006      	movs	r0, #6
10052818:	7020      	strb	r0, [r4, #0]
1005281a:	a801      	add	r0, sp, #4
1005281c:	f00f fdea 	bl	100623f4 <nvm_dev_id_data_get_record>
10052820:	2800      	cmp	r0, #0
10052822:	d01b      	beq.n	1005285c <HAL_Read_ConfigData+0xec>
10052824:	7822      	ldrb	r2, [r4, #0]
10052826:	21ff      	movs	r1, #255	@ 0xff
10052828:	4628      	mov	r0, r5
1005282a:	f7f3 fc23 	bl	10046074 <BLEPLAT_MemSet>
1005282e:	e7cf      	b.n	100527d0 <HAL_Read_ConfigData+0x60>
10052830:	2206      	movs	r2, #6
10052832:	7022      	strb	r2, [r4, #0]
10052834:	480c      	ldr	r0, [pc, #48]	@ (10052868 <__arm_cp.5_1>)
10052836:	6801      	ldr	r1, [r0, #0]
10052838:	3166      	adds	r1, #102	@ 0x66
1005283a:	e7c6      	b.n	100527ca <HAL_Read_ConfigData+0x5a>
1005283c:	ae01      	add	r6, sp, #4
1005283e:	4630      	mov	r0, r6
10052840:	f000 fb74 	bl	10052f2c <log_verbosity_get_ucfg_weak>
10052844:	2705      	movs	r7, #5
10052846:	4628      	mov	r0, r5
10052848:	4631      	mov	r1, r6
1005284a:	463a      	mov	r2, r7
1005284c:	f7f3 fc02 	bl	10046054 <BLEPLAT_MemCpy>
10052850:	7027      	strb	r7, [r4, #0]
10052852:	e7bd      	b.n	100527d0 <HAL_Read_ConfigData+0x60>
10052854:	2112      	movs	r1, #18
10052856:	2600      	movs	r6, #0
10052858:	7026      	strb	r6, [r4, #0]
1005285a:	e7ba      	b.n	100527d2 <HAL_Read_ConfigData+0x62>
1005285c:	7822      	ldrb	r2, [r4, #0]
1005285e:	a901      	add	r1, sp, #4
10052860:	3120      	adds	r1, #32
10052862:	e7b2      	b.n	100527ca <HAL_Read_ConfigData+0x5a>

10052864 <__arm_cp.5_0>:
10052864:	200010a0 	.word	0x200010a0

10052868 <__arm_cp.5_1>:
10052868:	200010a8 	.word	0x200010a8

1005286c <aci_hal_read_config_data>:
1005286c:	b580      	push	{r7, lr}
1005286e:	f7ff ff7f 	bl	10052770 <HAL_Read_ConfigData>
10052872:	bd80      	pop	{r7, pc}

10052874 <aci_hal_set_tx_power_level>:
10052874:	b580      	push	{r7, lr}
10052876:	f000 f801 	bl	1005287c <HAL_Set_TX_Power_Level>
1005287a:	bd80      	pop	{r7, pc}

1005287c <HAL_Set_TX_Power_Level>:
1005287c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005287e:	460e      	mov	r6, r1
10052880:	4605      	mov	r5, r0
10052882:	2412      	movs	r4, #18
10052884:	f7f3 fcab 	bl	100461de <BLEPLAT_GetMaxPALevel>
10052888:	42b0      	cmp	r0, r6
1005288a:	d317      	bcc.n	100528bc <HAL_Set_TX_Power_Level+0x40>
1005288c:	2d01      	cmp	r5, #1
1005288e:	d815      	bhi.n	100528bc <HAL_Set_TX_Power_Level+0x40>
10052890:	480b      	ldr	r0, [pc, #44]	@ (100528c0 <__arm_cp.11_0>)
10052892:	6800      	ldr	r0, [r0, #0]
10052894:	7a81      	ldrb	r1, [r0, #10]
10052896:	9100      	str	r1, [sp, #0]
10052898:	7285      	strb	r5, [r0, #10]
1005289a:	7a47      	ldrb	r7, [r0, #9]
1005289c:	7246      	strb	r6, [r0, #9]
1005289e:	4628      	mov	r0, r5
100528a0:	f7f3 fcad 	bl	100461fe <BLEPLAT_SetHighPower>
100528a4:	2400      	movs	r4, #0
100528a6:	42b7      	cmp	r7, r6
100528a8:	d102      	bne.n	100528b0 <HAL_Set_TX_Power_Level+0x34>
100528aa:	9800      	ldr	r0, [sp, #0]
100528ac:	42a8      	cmp	r0, r5
100528ae:	d005      	beq.n	100528bc <HAL_Set_TX_Power_Level+0x40>
100528b0:	20ff      	movs	r0, #255	@ 0xff
100528b2:	227f      	movs	r2, #127	@ 0x7f
100528b4:	2101      	movs	r1, #1
100528b6:	460b      	mov	r3, r1
100528b8:	f009 fe6a 	bl	1005c590 <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>
100528bc:	4620      	mov	r0, r4
100528be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100528c0 <__arm_cp.11_0>:
100528c0:	200010f4 	.word	0x200010f4

100528c4 <ble_HAL_Init>:
100528c4:	b580      	push	{r7, lr}
100528c6:	4804      	ldr	r0, [pc, #16]	@ (100528d8 <__arm_cp.17_0>)
100528c8:	6800      	ldr	r0, [r0, #0]
100528ca:	3060      	adds	r0, #96	@ 0x60
100528cc:	2100      	movs	r1, #0
100528ce:	2204      	movs	r2, #4
100528d0:	f7f3 fbd0 	bl	10046074 <BLEPLAT_MemSet>
100528d4:	bd80      	pop	{r7, pc}
100528d6:	46c0      	nop			@ (mov r8, r8)

100528d8 <__arm_cp.17_0>:
100528d8:	200010f4 	.word	0x200010f4

100528dc <hal_read_radio_activity_state>:
100528dc:	b570      	push	{r4, r5, r6, lr}
100528de:	4603      	mov	r3, r0
100528e0:	480a      	ldr	r0, [pc, #40]	@ (1005290c <__arm_cp.18_0>)
100528e2:	6804      	ldr	r4, [r0, #0]
100528e4:	f3ef 8010 	mrs	r0, PRIMASK
100528e8:	b672      	cpsid	i
100528ea:	7d20      	ldrb	r0, [r4, #20]
100528ec:	2500      	movs	r5, #0
100528ee:	7525      	strb	r5, [r4, #20]
100528f0:	7c25      	ldrb	r5, [r4, #16]
100528f2:	260f      	movs	r6, #15
100528f4:	402e      	ands	r6, r5
100528f6:	701e      	strb	r6, [r3, #0]
100528f8:	7c23      	ldrb	r3, [r4, #16]
100528fa:	091b      	lsrs	r3, r3, #4
100528fc:	700b      	strb	r3, [r1, #0]
100528fe:	68e1      	ldr	r1, [r4, #12]
10052900:	6011      	str	r1, [r2, #0]
10052902:	1e41      	subs	r1, r0, #1
10052904:	4188      	sbcs	r0, r1
10052906:	b662      	cpsie	i
10052908:	bd70      	pop	{r4, r5, r6, pc}
1005290a:	46c0      	nop			@ (mov r8, r8)

1005290c <__arm_cp.18_0>:
1005290c:	200010f4 	.word	0x200010f4

10052910 <BLE_STACK_ReadNextRadioActivity>:
10052910:	4903      	ldr	r1, [pc, #12]	@ (10052920 <__arm_cp.19_0>)
10052912:	6809      	ldr	r1, [r1, #0]
10052914:	68ca      	ldr	r2, [r1, #12]
10052916:	6002      	str	r2, [r0, #0]
10052918:	7c08      	ldrb	r0, [r1, #16]
1005291a:	0900      	lsrs	r0, r0, #4
1005291c:	4770      	bx	lr
1005291e:	46c0      	nop			@ (mov r8, r8)

10052920 <__arm_cp.19_0>:
10052920:	200010f4 	.word	0x200010f4

10052924 <hal_radio_activity_state_init>:
10052924:	4803      	ldr	r0, [pc, #12]	@ (10052934 <__arm_cp.20_0>)
10052926:	6800      	ldr	r0, [r0, #0]
10052928:	2100      	movs	r1, #0
1005292a:	7501      	strb	r1, [r0, #20]
1005292c:	8241      	strh	r1, [r0, #18]
1005292e:	7401      	strb	r1, [r0, #16]
10052930:	4770      	bx	lr
10052932:	46c0      	nop			@ (mov r8, r8)

10052934 <__arm_cp.20_0>:
10052934:	200010f4 	.word	0x200010f4

10052938 <aci_hal_set_radio_activity_mask>:
10052938:	4902      	ldr	r1, [pc, #8]	@ (10052944 <__arm_cp.21_0>)
1005293a:	6809      	ldr	r1, [r1, #0]
1005293c:	8248      	strh	r0, [r1, #18]
1005293e:	2000      	movs	r0, #0
10052940:	4770      	bx	lr
10052942:	46c0      	nop			@ (mov r8, r8)

10052944 <__arm_cp.21_0>:
10052944:	200010f4 	.word	0x200010f4

10052948 <hal_radio_activity_state_cb_check>:
10052948:	b510      	push	{r4, lr}
1005294a:	b086      	sub	sp, #24
1005294c:	4815      	ldr	r0, [pc, #84]	@ (100529a4 <__arm_cp.22_0>)
1005294e:	6804      	ldr	r4, [r0, #0]
10052950:	a802      	add	r0, sp, #8
10052952:	a901      	add	r1, sp, #4
10052954:	466a      	mov	r2, sp
10052956:	f7ff ffc1 	bl	100528dc <hal_read_radio_activity_state>
1005295a:	2800      	cmp	r0, #0
1005295c:	d01f      	beq.n	1005299e <hal_radio_activity_state_cb_check+0x56>
1005295e:	a802      	add	r0, sp, #8
10052960:	7801      	ldrb	r1, [r0, #0]
10052962:	8a60      	ldrh	r0, [r4, #18]
10052964:	40c8      	lsrs	r0, r1
10052966:	07c0      	lsls	r0, r0, #31
10052968:	d019      	beq.n	1005299e <hal_radio_activity_state_cb_check+0x56>
1005296a:	9a01      	ldr	r2, [sp, #4]
1005296c:	9b00      	ldr	r3, [sp, #0]
1005296e:	a803      	add	r0, sp, #12
10052970:	2408      	movs	r4, #8
10052972:	7084      	strb	r4, [r0, #2]
10052974:	0e1c      	lsrs	r4, r3, #24
10052976:	72c4      	strb	r4, [r0, #11]
10052978:	0c1c      	lsrs	r4, r3, #16
1005297a:	7284      	strb	r4, [r0, #10]
1005297c:	0a1c      	lsrs	r4, r3, #8
1005297e:	7244      	strb	r4, [r0, #9]
10052980:	7203      	strb	r3, [r0, #8]
10052982:	71c2      	strb	r2, [r0, #7]
10052984:	7181      	strb	r1, [r0, #6]
10052986:	21ff      	movs	r1, #255	@ 0xff
10052988:	7041      	strb	r1, [r0, #1]
1005298a:	2182      	movs	r1, #130	@ 0x82
1005298c:	7001      	strb	r1, [r0, #0]
1005298e:	2100      	movs	r1, #0
10052990:	7141      	strb	r1, [r0, #5]
10052992:	2204      	movs	r2, #4
10052994:	7102      	strb	r2, [r0, #4]
10052996:	70c1      	strb	r1, [r0, #3]
10052998:	210c      	movs	r1, #12
1005299a:	f7fe fd77 	bl	1005148c <BLE_STACK_Event>
1005299e:	b006      	add	sp, #24
100529a0:	bd10      	pop	{r4, pc}
100529a2:	46c0      	nop			@ (mov r8, r8)

100529a4 <__arm_cp.22_0>:
100529a4:	200010f4 	.word	0x200010f4

100529a8 <aci_l2cap_connection_parameter_update_req_api>:
100529a8:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
100529aa:	ac01      	add	r4, sp, #4
100529ac:	9d08      	ldr	r5, [sp, #32]
100529ae:	8125      	strh	r5, [r4, #8]
100529b0:	80e3      	strh	r3, [r4, #6]
100529b2:	80a2      	strh	r2, [r4, #4]
100529b4:	8061      	strh	r1, [r4, #2]
100529b6:	8020      	strh	r0, [r4, #0]
100529b8:	4620      	mov	r0, r4
100529ba:	f004 feab 	bl	10057714 <L2C_build_connect_update_request>
100529be:	b004      	add	sp, #16
100529c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

100529c4 <Acl_Init>:
100529c4:	4803      	ldr	r0, [pc, #12]	@ (100529d4 <__arm_cp.0_0>)
100529c6:	6800      	ldr	r0, [r0, #0]
100529c8:	2188      	movs	r1, #136	@ 0x88
100529ca:	4a03      	ldr	r2, [pc, #12]	@ (100529d8 <__arm_cp.0_1>)
100529cc:	5042      	str	r2, [r0, r1]
100529ce:	2000      	movs	r0, #0
100529d0:	4770      	bx	lr
100529d2:	46c0      	nop			@ (mov r8, r8)

100529d4 <__arm_cp.0_0>:
100529d4:	200010f4 	.word	0x200010f4

100529d8 <__arm_cp.0_1>:
100529d8:	03030000 	.word	0x03030000

100529dc <isr_Acl_Data_Indication_Queue_Full>:
100529dc:	4805      	ldr	r0, [pc, #20]	@ (100529f4 <__arm_cp.1_0>)
100529de:	6800      	ldr	r0, [r0, #0]
100529e0:	2188      	movs	r1, #136	@ 0x88
100529e2:	5c41      	ldrb	r1, [r0, r1]
100529e4:	3088      	adds	r0, #136	@ 0x88
100529e6:	7880      	ldrb	r0, [r0, #2]
100529e8:	4281      	cmp	r1, r0
100529ea:	d801      	bhi.n	100529f0 <isr_Acl_Data_Indication_Queue_Full+0x14>
100529ec:	2000      	movs	r0, #0
100529ee:	4770      	bx	lr
100529f0:	2001      	movs	r0, #1
100529f2:	4770      	bx	lr

100529f4 <__arm_cp.1_0>:
100529f4:	200010f4 	.word	0x200010f4

100529f8 <isr_Acl_Data_TX_Cmpl_Queue_Full>:
100529f8:	4805      	ldr	r0, [pc, #20]	@ (10052a10 <__arm_cp.2_0>)
100529fa:	6800      	ldr	r0, [r0, #0]
100529fc:	2189      	movs	r1, #137	@ 0x89
100529fe:	5c41      	ldrb	r1, [r0, r1]
10052a00:	3089      	adds	r0, #137	@ 0x89
10052a02:	7880      	ldrb	r0, [r0, #2]
10052a04:	4281      	cmp	r1, r0
10052a06:	d801      	bhi.n	10052a0c <isr_Acl_Data_TX_Cmpl_Queue_Full+0x14>
10052a08:	2000      	movs	r0, #0
10052a0a:	4770      	bx	lr
10052a0c:	2001      	movs	r0, #1
10052a0e:	4770      	bx	lr

10052a10 <__arm_cp.2_0>:
10052a10:	200010f4 	.word	0x200010f4

10052a14 <Acl_Rcv_Pkt_Handler>:
10052a14:	b510      	push	{r4, lr}
10052a16:	4604      	mov	r4, r0
10052a18:	480a      	ldr	r0, [pc, #40]	@ (10052a44 <__arm_cp.5_0>)
10052a1a:	6800      	ldr	r0, [r0, #0]
10052a1c:	6900      	ldr	r0, [r0, #16]
10052a1e:	2190      	movs	r1, #144	@ 0x90
10052a20:	2201      	movs	r2, #1
10052a22:	4613      	mov	r3, r2
10052a24:	f000 fa88 	bl	10052f38 <aci_event_fifo_push_header>
10052a28:	2800      	cmp	r0, #0
10052a2a:	d004      	beq.n	10052a36 <Acl_Rcv_Pkt_Handler+0x22>
10052a2c:	4601      	mov	r1, r0
10052a2e:	6044      	str	r4, [r0, #4]
10052a30:	2090      	movs	r0, #144	@ 0x90
10052a32:	f000 fb1e 	bl	10053072 <aci_event_fifo_push>
10052a36:	4804      	ldr	r0, [pc, #16]	@ (10052a48 <__arm_cp.5_1>)
10052a38:	6800      	ldr	r0, [r0, #0]
10052a3a:	2188      	movs	r1, #136	@ 0x88
10052a3c:	5c42      	ldrb	r2, [r0, r1]
10052a3e:	1c52      	adds	r2, r2, #1
10052a40:	5442      	strb	r2, [r0, r1]
10052a42:	bd10      	pop	{r4, pc}

10052a44 <__arm_cp.5_0>:
10052a44:	200010a4 	.word	0x200010a4

10052a48 <__arm_cp.5_1>:
10052a48:	200010f4 	.word	0x200010f4

10052a4c <Acl_Tx_Cmpl_Pkt_Handler>:
10052a4c:	b510      	push	{r4, lr}
10052a4e:	4604      	mov	r4, r0
10052a50:	7a00      	ldrb	r0, [r0, #8]
10052a52:	21f7      	movs	r1, #247	@ 0xf7
10052a54:	4001      	ands	r1, r0
10052a56:	7221      	strb	r1, [r4, #8]
10052a58:	480a      	ldr	r0, [pc, #40]	@ (10052a84 <__arm_cp.6_0>)
10052a5a:	6800      	ldr	r0, [r0, #0]
10052a5c:	6900      	ldr	r0, [r0, #16]
10052a5e:	2190      	movs	r1, #144	@ 0x90
10052a60:	2200      	movs	r2, #0
10052a62:	2301      	movs	r3, #1
10052a64:	f000 fa68 	bl	10052f38 <aci_event_fifo_push_header>
10052a68:	2800      	cmp	r0, #0
10052a6a:	d004      	beq.n	10052a76 <Acl_Tx_Cmpl_Pkt_Handler+0x2a>
10052a6c:	4601      	mov	r1, r0
10052a6e:	6044      	str	r4, [r0, #4]
10052a70:	2090      	movs	r0, #144	@ 0x90
10052a72:	f000 fafe 	bl	10053072 <aci_event_fifo_push>
10052a76:	4804      	ldr	r0, [pc, #16]	@ (10052a88 <__arm_cp.6_1>)
10052a78:	6800      	ldr	r0, [r0, #0]
10052a7a:	2189      	movs	r1, #137	@ 0x89
10052a7c:	5c42      	ldrb	r2, [r0, r1]
10052a7e:	1c52      	adds	r2, r2, #1
10052a80:	5442      	strb	r2, [r0, r1]
10052a82:	bd10      	pop	{r4, pc}

10052a84 <__arm_cp.6_0>:
10052a84:	200010a4 	.word	0x200010a4

10052a88 <__arm_cp.6_1>:
10052a88:	200010f4 	.word	0x200010f4

10052a8c <Acl_Transmit_Data>:
10052a8c:	b510      	push	{r4, lr}
10052a8e:	2400      	movs	r4, #0
10052a90:	61c4      	str	r4, [r0, #28]
10052a92:	f006 fd39 	bl	10059508 <llc_conn_send_acl_data>
10052a96:	2884      	cmp	r0, #132	@ 0x84
10052a98:	d000      	beq.n	10052a9c <Acl_Transmit_Data+0x10>
10052a9a:	2481      	movs	r4, #129	@ 0x81
10052a9c:	4620      	mov	r0, r4
10052a9e:	bd10      	pop	{r4, pc}

10052aa0 <hci_acl_data_tx_cmpl_event_int_cb>:
10052aa0:	b5b0      	push	{r4, r5, r7, lr}
10052aa2:	6809      	ldr	r1, [r1, #0]
10052aa4:	2483      	movs	r4, #131	@ 0x83
10052aa6:	2200      	movs	r2, #0
10052aa8:	2900      	cmp	r1, #0
10052aaa:	d012      	beq.n	10052ad2 <hci_acl_data_tx_cmpl_event_int_cb+0x32>
10052aac:	69cd      	ldr	r5, [r1, #28]
10052aae:	2400      	movs	r4, #0
10052ab0:	61cc      	str	r4, [r1, #28]
10052ab2:	7a08      	ldrb	r0, [r1, #8]
10052ab4:	06c0      	lsls	r0, r0, #27
10052ab6:	d403      	bmi.n	10052ac0 <hci_acl_data_tx_cmpl_event_int_cb+0x20>
10052ab8:	2000      	movs	r0, #0
10052aba:	f005 f927 	bl	10057d0c <L2C_mux_acl_packet>
10052abe:	e002      	b.n	10052ac6 <hci_acl_data_tx_cmpl_event_int_cb+0x26>
10052ac0:	4608      	mov	r0, r1
10052ac2:	f004 fb49 	bl	10057158 <hci_tx_acl_data_done>
10052ac6:	2201      	movs	r2, #1
10052ac8:	2800      	cmp	r0, #0
10052aca:	4629      	mov	r1, r5
10052acc:	d0ec      	beq.n	10052aa8 <hci_acl_data_tx_cmpl_event_int_cb+0x8>
10052ace:	2483      	movs	r4, #131	@ 0x83
10052ad0:	e00c      	b.n	10052aec <hci_acl_data_tx_cmpl_event_int_cb+0x4c>
10052ad2:	07d0      	lsls	r0, r2, #31
10052ad4:	d00a      	beq.n	10052aec <hci_acl_data_tx_cmpl_event_int_cb+0x4c>
10052ad6:	f3ef 8010 	mrs	r0, PRIMASK
10052ada:	b672      	cpsid	i
10052adc:	4804      	ldr	r0, [pc, #16]	@ (10052af0 <__arm_cp.9_0>)
10052ade:	6800      	ldr	r0, [r0, #0]
10052ae0:	2189      	movs	r1, #137	@ 0x89
10052ae2:	5c42      	ldrb	r2, [r0, r1]
10052ae4:	1e52      	subs	r2, r2, #1
10052ae6:	5442      	strb	r2, [r0, r1]
10052ae8:	b662      	cpsie	i
10052aea:	2400      	movs	r4, #0
10052aec:	b2e0      	uxtb	r0, r4
10052aee:	bdb0      	pop	{r4, r5, r7, pc}

10052af0 <__arm_cp.9_0>:
10052af0:	200010f4 	.word	0x200010f4

10052af4 <hci_acl_data_ind_event_int_cb>:
10052af4:	b580      	push	{r7, lr}
10052af6:	480e      	ldr	r0, [pc, #56]	@ (10052b30 <__arm_cp.11_0>)
10052af8:	6800      	ldr	r0, [r0, #0]
10052afa:	222c      	movs	r2, #44	@ 0x2c
10052afc:	5c80      	ldrb	r0, [r0, r2]
10052afe:	07c0      	lsls	r0, r0, #31
10052b00:	6808      	ldr	r0, [r1, #0]
10052b02:	d102      	bne.n	10052b0a <hci_acl_data_ind_event_int_cb+0x16>
10052b04:	f005 f874 	bl	10057bf0 <L2C_receive_data>
10052b08:	e001      	b.n	10052b0e <hci_acl_data_ind_event_int_cb+0x1a>
10052b0a:	f004 faf1 	bl	100570f0 <hci_rx_acl_data>
10052b0e:	2800      	cmp	r0, #0
10052b10:	d001      	beq.n	10052b16 <hci_acl_data_ind_event_int_cb+0x22>
10052b12:	2083      	movs	r0, #131	@ 0x83
10052b14:	bd80      	pop	{r7, pc}
10052b16:	f3ef 8010 	mrs	r0, PRIMASK
10052b1a:	b672      	cpsid	i
10052b1c:	4805      	ldr	r0, [pc, #20]	@ (10052b34 <__arm_cp.11_1>)
10052b1e:	6800      	ldr	r0, [r0, #0]
10052b20:	2188      	movs	r1, #136	@ 0x88
10052b22:	5c42      	ldrb	r2, [r0, r1]
10052b24:	1e52      	subs	r2, r2, #1
10052b26:	5442      	strb	r2, [r0, r1]
10052b28:	b662      	cpsie	i
10052b2a:	2000      	movs	r0, #0
10052b2c:	bd80      	pop	{r7, pc}
10052b2e:	46c0      	nop			@ (mov r8, r8)

10052b30 <__arm_cp.11_0>:
10052b30:	200010a0 	.word	0x200010a0

10052b34 <__arm_cp.11_1>:
10052b34:	200010f4 	.word	0x200010f4

10052b38 <ACL_pkt_init>:
10052b38:	b570      	push	{r4, r5, r6, lr}
10052b3a:	4c0b      	ldr	r4, [pc, #44]	@ (10052b68 <__arm_cp.1_0>)
10052b3c:	2501      	movs	r5, #1
10052b3e:	2204      	movs	r2, #4
10052b40:	4620      	mov	r0, r4
10052b42:	4629      	mov	r1, r5
10052b44:	f00c fca0 	bl	1005f488 <csmem_mem_assign>
10052b48:	4e08      	ldr	r6, [pc, #32]	@ (10052b6c <__arm_cp.1_1>)
10052b4a:	6030      	str	r0, [r6, #0]
10052b4c:	2206      	movs	r2, #6
10052b4e:	4620      	mov	r0, r4
10052b50:	4629      	mov	r1, r5
10052b52:	f00c fc99 	bl	1005f488 <csmem_mem_assign>
10052b56:	6831      	ldr	r1, [r6, #0]
10052b58:	6008      	str	r0, [r1, #0]
10052b5a:	6830      	ldr	r0, [r6, #0]
10052b5c:	6801      	ldr	r1, [r0, #0]
10052b5e:	2000      	movs	r0, #0
10052b60:	8088      	strh	r0, [r1, #4]
10052b62:	8048      	strh	r0, [r1, #2]
10052b64:	7008      	strb	r0, [r1, #0]
10052b66:	bd70      	pop	{r4, r5, r6, pc}

10052b68 <__arm_cp.1_0>:
10052b68:	20001104 	.word	0x20001104

10052b6c <__arm_cp.1_1>:
10052b6c:	2000109c 	.word	0x2000109c

10052b70 <ACL_pkt_get>:
10052b70:	b5b0      	push	{r4, r5, r7, lr}
10052b72:	460d      	mov	r5, r1
10052b74:	4604      	mov	r4, r0
10052b76:	1e41      	subs	r1, r0, #1
10052b78:	4188      	sbcs	r0, r1
10052b7a:	1e51      	subs	r1, r2, #1
10052b7c:	221f      	movs	r2, #31
10052b7e:	430a      	orrs	r2, r1
10052b80:	3221      	adds	r2, #33	@ 0x21
10052b82:	b291      	uxth	r1, r2
10052b84:	f00c fb5e 	bl	1005f244 <MBM_get>
10052b88:	2800      	cmp	r0, #0
10052b8a:	d006      	beq.n	10052b9a <ACL_pkt_get+0x2a>
10052b8c:	8085      	strh	r5, [r0, #4]
10052b8e:	6801      	ldr	r1, [r0, #0]
10052b90:	6081      	str	r1, [r0, #8]
10052b92:	2c00      	cmp	r4, #0
10052b94:	d103      	bne.n	10052b9e <ACL_pkt_get+0x2e>
10052b96:	2140      	movs	r1, #64	@ 0x40
10052b98:	e003      	b.n	10052ba2 <ACL_pkt_get+0x32>
10052b9a:	2000      	movs	r0, #0
10052b9c:	bdb0      	pop	{r4, r5, r7, pc}
10052b9e:	217f      	movs	r1, #127	@ 0x7f
10052ba0:	43c9      	mvns	r1, r1
10052ba2:	7301      	strb	r1, [r0, #12]
10052ba4:	1d00      	adds	r0, r0, #4
10052ba6:	bdb0      	pop	{r4, r5, r7, pc}

10052ba8 <ACL_pkt_get_available_mem_buffers>:
10052ba8:	b580      	push	{r7, lr}
10052baa:	1e41      	subs	r1, r0, #1
10052bac:	4188      	sbcs	r0, r1
10052bae:	f00c fbb1 	bl	1005f314 <MBM_get_available_mem_buffers>
10052bb2:	bd80      	pop	{r7, pc}

10052bb4 <ACL_pkt_release>:
10052bb4:	b580      	push	{r7, lr}
10052bb6:	7a01      	ldrb	r1, [r0, #8]
10052bb8:	098a      	lsrs	r2, r1, #6
10052bba:	2101      	movs	r1, #1
10052bbc:	4391      	bics	r1, r2
10052bbe:	1f00      	subs	r0, r0, #4
10052bc0:	f00c fb7a 	bl	1005f2b8 <MBM_release>
10052bc4:	bd80      	pop	{r7, pc}

10052bc6 <ACL_pkt_resize>:
10052bc6:	b580      	push	{r7, lr}
10052bc8:	460a      	mov	r2, r1
10052bca:	7a01      	ldrb	r1, [r0, #8]
10052bcc:	098b      	lsrs	r3, r1, #6
10052bce:	2101      	movs	r1, #1
10052bd0:	4399      	bics	r1, r3
10052bd2:	6840      	ldr	r0, [r0, #4]
10052bd4:	f00c fbb2 	bl	1005f33c <MBM_resize>
10052bd8:	bd80      	pop	{r7, pc}

10052bda <ACL_pkt_cmp>:
10052bda:	b510      	push	{r4, lr}
10052bdc:	4614      	mov	r4, r2
10052bde:	460a      	mov	r2, r1
10052be0:	6840      	ldr	r0, [r0, #4]
10052be2:	4619      	mov	r1, r3
10052be4:	4623      	mov	r3, r4
10052be6:	f00c fd83 	bl	1005f6f0 <Mem_Buff_cmp>
10052bea:	bd10      	pop	{r4, pc}

10052bec <ACL_pkt_read>:
10052bec:	b510      	push	{r4, lr}
10052bee:	4614      	mov	r4, r2
10052bf0:	460a      	mov	r2, r1
10052bf2:	6840      	ldr	r0, [r0, #4]
10052bf4:	4619      	mov	r1, r3
10052bf6:	4623      	mov	r3, r4
10052bf8:	f00c fd41 	bl	1005f67e <Mem_Buff_read>
10052bfc:	bd10      	pop	{r4, pc}

10052bfe <ACL_pkt_read_16b>:
10052bfe:	b5e0      	push	{r5, r6, r7, lr}
10052c00:	2202      	movs	r2, #2
10052c02:	ab01      	add	r3, sp, #4
10052c04:	f7ff fff2 	bl	10052bec <ACL_pkt_read>
10052c08:	2800      	cmp	r0, #0
10052c0a:	d001      	beq.n	10052c10 <ACL_pkt_read_16b+0x12>
10052c0c:	2000      	movs	r0, #0
10052c0e:	e004      	b.n	10052c1a <ACL_pkt_read_16b+0x1c>
10052c10:	a801      	add	r0, sp, #4
10052c12:	7801      	ldrb	r1, [r0, #0]
10052c14:	7840      	ldrb	r0, [r0, #1]
10052c16:	0200      	lsls	r0, r0, #8
10052c18:	1840      	adds	r0, r0, r1
10052c1a:	b280      	uxth	r0, r0
10052c1c:	bd8c      	pop	{r2, r3, r7, pc}

10052c1e <ACL_pkt_write_16b>:
10052c1e:	b5e0      	push	{r5, r6, r7, lr}
10052c20:	ab01      	add	r3, sp, #4
10052c22:	701a      	strb	r2, [r3, #0]
10052c24:	0a12      	lsrs	r2, r2, #8
10052c26:	705a      	strb	r2, [r3, #1]
10052c28:	2202      	movs	r2, #2
10052c2a:	f000 f801 	bl	10052c30 <ACL_pkt_write>
10052c2e:	bd8c      	pop	{r2, r3, r7, pc}

10052c30 <ACL_pkt_write>:
10052c30:	b510      	push	{r4, lr}
10052c32:	4614      	mov	r4, r2
10052c34:	460a      	mov	r2, r1
10052c36:	6840      	ldr	r0, [r0, #4]
10052c38:	4619      	mov	r1, r3
10052c3a:	4623      	mov	r3, r4
10052c3c:	f00c fce5 	bl	1005f60a <Mem_Buff_write>
10052c40:	bd10      	pop	{r4, pc}

10052c42 <ACL_pkt_extract_pdu>:
10052c42:	1f01      	subs	r1, r0, #4
10052c44:	2200      	movs	r2, #0
10052c46:	600a      	str	r2, [r1, #0]
10052c48:	6840      	ldr	r0, [r0, #4]
10052c4a:	4770      	bx	lr

10052c4c <ACL_pkt_connection>:
10052c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10052c4e:	480f      	ldr	r0, [pc, #60]	@ (10052c8c <__arm_cp.14_0>)
10052c50:	6800      	ldr	r0, [r0, #0]
10052c52:	6805      	ldr	r5, [r0, #0]
10052c54:	7828      	ldrb	r0, [r5, #0]
10052c56:	1c41      	adds	r1, r0, #1
10052c58:	7029      	strb	r1, [r5, #0]
10052c5a:	4f0d      	ldr	r7, [pc, #52]	@ (10052c90 <__arm_cp.14_1>)
10052c5c:	8a39      	ldrh	r1, [r7, #16]
10052c5e:	3125      	adds	r1, #37	@ 0x25
10052c60:	094e      	lsrs	r6, r1, #5
10052c62:	1c74      	adds	r4, r6, #1
10052c64:	2800      	cmp	r0, #0
10052c66:	d109      	bne.n	10052c7c <ACL_pkt_connection+0x30>
10052c68:	2000      	movs	r0, #0
10052c6a:	4621      	mov	r1, r4
10052c6c:	f00c fba2 	bl	1005f3b4 <MBM_reserve>
10052c70:	8a38      	ldrh	r0, [r7, #16]
10052c72:	3025      	adds	r0, #37	@ 0x25
10052c74:	0940      	lsrs	r0, r0, #5
10052c76:	1c40      	adds	r0, r0, #1
10052c78:	8068      	strh	r0, [r5, #2]
10052c7a:	1cb4      	adds	r4, r6, #2
10052c7c:	2001      	movs	r0, #1
10052c7e:	4621      	mov	r1, r4
10052c80:	f00c fb98 	bl	1005f3b4 <MBM_reserve>
10052c84:	88a8      	ldrh	r0, [r5, #4]
10052c86:	1900      	adds	r0, r0, r4
10052c88:	80a8      	strh	r0, [r5, #4]
10052c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10052c8c <__arm_cp.14_0>:
10052c8c:	2000109c 	.word	0x2000109c

10052c90 <__arm_cp.14_1>:
10052c90:	20001108 	.word	0x20001108

10052c94 <ACL_pkt_disconnection>:
10052c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10052c96:	480e      	ldr	r0, [pc, #56]	@ (10052cd0 <__arm_cp.15_0>)
10052c98:	6800      	ldr	r0, [r0, #0]
10052c9a:	6806      	ldr	r6, [r0, #0]
10052c9c:	7830      	ldrb	r0, [r6, #0]
10052c9e:	1e40      	subs	r0, r0, #1
10052ca0:	7030      	strb	r0, [r6, #0]
10052ca2:	490c      	ldr	r1, [pc, #48]	@ (10052cd4 <__arm_cp.15_1>)
10052ca4:	8a09      	ldrh	r1, [r1, #16]
10052ca6:	3125      	adds	r1, #37	@ 0x25
10052ca8:	094f      	lsrs	r7, r1, #5
10052caa:	1c7c      	adds	r4, r7, #1
10052cac:	0600      	lsls	r0, r0, #24
10052cae:	d106      	bne.n	10052cbe <ACL_pkt_disconnection+0x2a>
10052cb0:	2500      	movs	r5, #0
10052cb2:	4628      	mov	r0, r5
10052cb4:	4621      	mov	r1, r4
10052cb6:	f00c fbd1 	bl	1005f45c <MBM_unreserve>
10052cba:	8075      	strh	r5, [r6, #2]
10052cbc:	1cbc      	adds	r4, r7, #2
10052cbe:	2001      	movs	r0, #1
10052cc0:	4621      	mov	r1, r4
10052cc2:	f00c fbcb 	bl	1005f45c <MBM_unreserve>
10052cc6:	88b0      	ldrh	r0, [r6, #4]
10052cc8:	1b00      	subs	r0, r0, r4
10052cca:	80b0      	strh	r0, [r6, #4]
10052ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10052cce:	46c0      	nop			@ (mov r8, r8)

10052cd0 <__arm_cp.15_0>:
10052cd0:	2000109c 	.word	0x2000109c

10052cd4 <__arm_cp.15_1>:
10052cd4:	20001108 	.word	0x20001108

10052cd8 <BLE_STACK_Tick>:
10052cd8:	b580      	push	{r7, lr}
10052cda:	f00f fbaf 	bl	1006243c <tsk_scheduler>
10052cde:	bd80      	pop	{r7, pc}

10052ce0 <BlueNRG_Stack_Initialize_Layers>:
10052ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
10052ce2:	b08f      	sub	sp, #60	@ 0x3c
10052ce4:	9309      	str	r3, [sp, #36]	@ 0x24
10052ce6:	920b      	str	r2, [sp, #44]	@ 0x2c
10052ce8:	910a      	str	r1, [sp, #40]	@ 0x28
10052cea:	9008      	str	r0, [sp, #32]
10052cec:	f00c fbc6 	bl	1005f47c <csmem_init>
10052cf0:	2401      	movs	r4, #1
10052cf2:	2138      	movs	r1, #56	@ 0x38
10052cf4:	4620      	mov	r0, r4
10052cf6:	f00c fbd9 	bl	1005f4ac <csmem_mem_0_assign>
10052cfa:	4933      	ldr	r1, [pc, #204]	@ (10052dc8 <__arm_cp.1_0>)
10052cfc:	7ac9      	ldrb	r1, [r1, #11]
10052cfe:	2234      	movs	r2, #52	@ 0x34
10052d00:	5481      	strb	r1, [r0, r2]
10052d02:	4e32      	ldr	r6, [pc, #200]	@ (10052dcc <__arm_cp.1_1>)
10052d04:	6030      	str	r0, [r6, #0]
10052d06:	2700      	movs	r7, #0
10052d08:	7007      	strb	r7, [r0, #0]
10052d0a:	6830      	ldr	r0, [r6, #0]
10052d0c:	7047      	strb	r7, [r0, #1]
10052d0e:	6830      	ldr	r0, [r6, #0]
10052d10:	7087      	strb	r7, [r0, #2]
10052d12:	6830      	ldr	r0, [r6, #0]
10052d14:	21e1      	movs	r1, #225	@ 0xe1
10052d16:	70c1      	strb	r1, [r0, #3]
10052d18:	2005      	movs	r0, #5
10052d1a:	01c0      	lsls	r0, r0, #7
10052d1c:	6831      	ldr	r1, [r6, #0]
10052d1e:	8088      	strh	r0, [r1, #4]
10052d20:	2030      	movs	r0, #48	@ 0x30
10052d22:	8508      	strh	r0, [r1, #40]	@ 0x28
10052d24:	ad0e      	add	r5, sp, #56	@ 0x38
10052d26:	a90d      	add	r1, sp, #52	@ 0x34
10052d28:	aa0c      	add	r2, sp, #48	@ 0x30
10052d2a:	4628      	mov	r0, r5
10052d2c:	f7f3 f9c3 	bl	100460b6 <BLEPLAT_GetPartInfo>
10052d30:	980c      	ldr	r0, [sp, #48]	@ 0x30
10052d32:	0200      	lsls	r0, r0, #8
10052d34:	7829      	ldrb	r1, [r5, #0]
10052d36:	0109      	lsls	r1, r1, #4
10052d38:	4301      	orrs	r1, r0
10052d3a:	980d      	ldr	r0, [sp, #52]	@ 0x34
10052d3c:	0300      	lsls	r0, r0, #12
10052d3e:	4308      	orrs	r0, r1
10052d40:	1d00      	adds	r0, r0, #4
10052d42:	6831      	ldr	r1, [r6, #0]
10052d44:	8548      	strh	r0, [r1, #42]	@ 0x2a
10052d46:	2118      	movs	r1, #24
10052d48:	4620      	mov	r0, r4
10052d4a:	f00c fbaf 	bl	1005f4ac <csmem_mem_0_assign>
10052d4e:	4920      	ldr	r1, [pc, #128]	@ (10052dd0 <__arm_cp.1_2>)
10052d50:	6008      	str	r0, [r1, #0]
10052d52:	7507      	strb	r7, [r0, #20]
10052d54:	f00f fb68 	bl	10062428 <tsk_init>
10052d58:	981c      	ldr	r0, [sp, #112]	@ 0x70
10052d5a:	9006      	str	r0, [sp, #24]
10052d5c:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
10052d5e:	9405      	str	r4, [sp, #20]
10052d60:	981a      	ldr	r0, [sp, #104]	@ 0x68
10052d62:	9004      	str	r0, [sp, #16]
10052d64:	9819      	ldr	r0, [sp, #100]	@ 0x64
10052d66:	9003      	str	r0, [sp, #12]
10052d68:	9818      	ldr	r0, [sp, #96]	@ 0x60
10052d6a:	9002      	str	r0, [sp, #8]
10052d6c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
10052d6e:	9001      	str	r0, [sp, #4]
10052d70:	9d15      	ldr	r5, [sp, #84]	@ 0x54
10052d72:	9500      	str	r5, [sp, #0]
10052d74:	9808      	ldr	r0, [sp, #32]
10052d76:	990a      	ldr	r1, [sp, #40]	@ 0x28
10052d78:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
10052d7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10052d7c:	f7fe fdfb 	bl	10051976 <LL_init_ucfg>
10052d80:	f7fe fcec 	bl	1005175c <MBM_init_ucfg>
10052d84:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
10052d86:	2c01      	cmp	r4, #1
10052d88:	d101      	bne.n	10052d8e <BlueNRG_Stack_Initialize_Layers+0xae>
10052d8a:	f7fe fc5f 	bl	1005164c <ACL_pkt_init_ucfg>
10052d8e:	f000 f999 	bl	100530c4 <Events_Process_init>
10052d92:	2f01      	cmp	r7, #1
10052d94:	d101      	bne.n	10052d9a <BlueNRG_Stack_Initialize_Layers+0xba>
10052d96:	f000 f8ca 	bl	10052f2e <log_init_ucfg_weak>
10052d9a:	6830      	ldr	r0, [r6, #0]
10052d9c:	212c      	movs	r1, #44	@ 0x2c
10052d9e:	5c40      	ldrb	r0, [r0, r1]
10052da0:	07c0      	lsls	r0, r0, #31
10052da2:	d10e      	bne.n	10052dc2 <BlueNRG_Stack_Initialize_Layers+0xe2>
10052da4:	2c01      	cmp	r4, #1
10052da6:	d106      	bne.n	10052db6 <BlueNRG_Stack_Initialize_Layers+0xd6>
10052da8:	9816      	ldr	r0, [sp, #88]	@ 0x58
10052daa:	f7fe fd0b 	bl	100517c4 <L2C_init_ucfg>
10052dae:	f7fe fecc 	bl	10051b4a <smp_init_ucfg>
10052db2:	f7fe fed1 	bl	10051b58 <GAT_att_cmn_init_ucfg>
10052db6:	980a      	ldr	r0, [sp, #40]	@ 0x28
10052db8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10052dba:	462a      	mov	r2, r5
10052dbc:	4623      	mov	r3, r4
10052dbe:	f000 ff11 	bl	10053be4 <GAP_init_context>
10052dc2:	b00f      	add	sp, #60	@ 0x3c
10052dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10052dc6:	46c0      	nop			@ (mov r8, r8)

10052dc8 <__arm_cp.1_0>:
10052dc8:	20001108 	.word	0x20001108

10052dcc <__arm_cp.1_1>:
10052dcc:	200010a0 	.word	0x200010a0

10052dd0 <__arm_cp.1_2>:
10052dd0:	20001148 	.word	0x20001148

10052dd4 <_BlueNRG_Stack_Initialization>:
10052dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
10052dd6:	b095      	sub	sp, #84	@ 0x54
10052dd8:	2001      	movs	r0, #1
10052dda:	0481      	lsls	r1, r0, #18
10052ddc:	9114      	str	r1, [sp, #80]	@ 0x50
10052dde:	482e      	ldr	r0, [pc, #184]	@ (10052e98 <__arm_cp.2_0>)
10052de0:	6001      	str	r1, [r0, #0]
10052de2:	f3bf 8f4f 	dsb	sy
10052de6:	f3bf 8f6f 	isb	sy
10052dea:	f7f4 fa1b 	bl	10047224 <BLEPLAT_CNTR_GlobDisableBlue>
10052dee:	f7f3 fa5e 	bl	100462ae <BLEPLAT_ClearRadioTimerValue>
10052df2:	2000      	movs	r0, #0
10052df4:	9012      	str	r0, [sp, #72]	@ 0x48
10052df6:	43c0      	mvns	r0, r0
10052df8:	f7f4 fa00 	bl	100471fc <BLEPLAT_CNTR_ClearInterrupt>
10052dfc:	f7fe fc0e 	bl	1005161c <data_length_extension_csr_ucfg>
10052e00:	9013      	str	r0, [sp, #76]	@ 0x4c
10052e02:	f7fe fc13 	bl	1005162c <phy_upd_csr_ucfg>
10052e06:	9011      	str	r0, [sp, #68]	@ 0x44
10052e08:	f00b fbc5 	bl	1005e596 <ext_adv_scan_enabled_ucfg_weak>
10052e0c:	9010      	str	r0, [sp, #64]	@ 0x40
10052e0e:	f006 fe57 	bl	10059ac0 <llc_priv_controller_privacy_csr_ucfg_weak>
10052e12:	900f      	str	r0, [sp, #60]	@ 0x3c
10052e14:	f7fe fcaa 	bl	1005176c <secure_connections_csr_ucfg>
10052e18:	f004 fc75 	bl	10057706 <scan_csr_ucfg_weak>
10052e1c:	900e      	str	r0, [sp, #56]	@ 0x38
10052e1e:	f004 fe39 	bl	10057a94 <l2c_cos_csr_ucfg_weak>
10052e22:	900d      	str	r0, [sp, #52]	@ 0x34
10052e24:	f006 fe44 	bl	10059ab0 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10052e28:	900c      	str	r0, [sp, #48]	@ 0x30
10052e2a:	f006 fe43 	bl	10059ab4 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
10052e2e:	900b      	str	r0, [sp, #44]	@ 0x2c
10052e30:	f004 fb06 	bl	10057440 <cte_csr_ucfg_weak>
10052e34:	4604      	mov	r4, r0
10052e36:	f004 fc4a 	bl	100576ce <pcl_csr_ucfg_weak>
10052e3a:	4605      	mov	r5, r0
10052e3c:	f7fe fbfe 	bl	1005163c <conn_supp_csr_ucfg>
10052e40:	4606      	mov	r6, r0
10052e42:	f004 fa08 	bl	10057256 <chc_csr_ucfg_weak>
10052e46:	4607      	mov	r7, r0
10052e48:	f000 f874 	bl	10052f34 <log_csr_ucfg_weak>
10052e4c:	b2c0      	uxtb	r0, r0
10052e4e:	b2f9      	uxtb	r1, r7
10052e50:	9108      	str	r1, [sp, #32]
10052e52:	9009      	str	r0, [sp, #36]	@ 0x24
10052e54:	b2f0      	uxtb	r0, r6
10052e56:	b2e9      	uxtb	r1, r5
10052e58:	b2e2      	uxtb	r2, r4
10052e5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10052e5c:	b2db      	uxtb	r3, r3
10052e5e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
10052e60:	b2e4      	uxtb	r4, r4
10052e62:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
10052e64:	b2ed      	uxtb	r5, r5
10052e66:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
10052e68:	b2f6      	uxtb	r6, r6
10052e6a:	9f12      	ldr	r7, [sp, #72]	@ 0x48
10052e6c:	9700      	str	r7, [sp, #0]
10052e6e:	9601      	str	r6, [sp, #4]
10052e70:	9502      	str	r5, [sp, #8]
10052e72:	9403      	str	r4, [sp, #12]
10052e74:	9304      	str	r3, [sp, #16]
10052e76:	9205      	str	r2, [sp, #20]
10052e78:	9106      	str	r1, [sp, #24]
10052e7a:	9007      	str	r0, [sp, #28]
10052e7c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
10052e7e:	b2c0      	uxtb	r0, r0
10052e80:	9911      	ldr	r1, [sp, #68]	@ 0x44
10052e82:	b2c9      	uxtb	r1, r1
10052e84:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
10052e86:	b2d3      	uxtb	r3, r2
10052e88:	9a10      	ldr	r2, [sp, #64]	@ 0x40
10052e8a:	f7ff ff29 	bl	10052ce0 <BlueNRG_Stack_Initialize_Layers>
10052e8e:	4803      	ldr	r0, [pc, #12]	@ (10052e9c <__arm_cp.2_1>)
10052e90:	9914      	ldr	r1, [sp, #80]	@ 0x50
10052e92:	6001      	str	r1, [r0, #0]
10052e94:	b015      	add	sp, #84	@ 0x54
10052e96:	bdf0      	pop	{r4, r5, r6, r7, pc}

10052e98 <__arm_cp.2_0>:
10052e98:	e000e180 	.word	0xe000e180

10052e9c <__arm_cp.2_1>:
10052e9c:	e000e100 	.word	0xe000e100

10052ea0 <BLE_STACK_Init>:
10052ea0:	b5b0      	push	{r4, r5, r7, lr}
10052ea2:	4605      	mov	r5, r0
10052ea4:	7ac0      	ldrb	r0, [r0, #11]
10052ea6:	2412      	movs	r4, #18
10052ea8:	2880      	cmp	r0, #128	@ 0x80
10052eaa:	d829      	bhi.n	10052f00 <BLE_STACK_Init+0x60>
10052eac:	8c29      	ldrh	r1, [r5, #32]
10052eae:	2917      	cmp	r1, #23
10052eb0:	d326      	bcc.n	10052f00 <BLE_STACK_Init+0x60>
10052eb2:	4814      	ldr	r0, [pc, #80]	@ (10052f04 <__arm_cp.3_0>)
10052eb4:	1d82      	adds	r2, r0, #6
10052eb6:	4291      	cmp	r1, r2
10052eb8:	d822      	bhi.n	10052f00 <BLE_STACK_Init+0x60>
10052eba:	8a29      	ldrh	r1, [r5, #16]
10052ebc:	2917      	cmp	r1, #23
10052ebe:	d31f      	bcc.n	10052f00 <BLE_STACK_Init+0x60>
10052ec0:	4281      	cmp	r1, r0
10052ec2:	d81d      	bhi.n	10052f00 <BLE_STACK_Init+0x60>
10052ec4:	7ea8      	ldrb	r0, [r5, #26]
10052ec6:	2800      	cmp	r0, #0
10052ec8:	d01a      	beq.n	10052f00 <BLE_STACK_Init+0x60>
10052eca:	f006 fdf3 	bl	10059ab4 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
10052ece:	2800      	cmp	r0, #0
10052ed0:	d008      	beq.n	10052ee4 <BLE_STACK_Init+0x44>
10052ed2:	7ee8      	ldrb	r0, [r5, #27]
10052ed4:	2800      	cmp	r0, #0
10052ed6:	d013      	beq.n	10052f00 <BLE_STACK_Init+0x60>
10052ed8:	2880      	cmp	r0, #128	@ 0x80
10052eda:	d811      	bhi.n	10052f00 <BLE_STACK_Init+0x60>
10052edc:	7f28      	ldrb	r0, [r5, #28]
10052ede:	1e40      	subs	r0, r0, #1
10052ee0:	280e      	cmp	r0, #14
10052ee2:	d80d      	bhi.n	10052f00 <BLE_STACK_Init+0x60>
10052ee4:	4808      	ldr	r0, [pc, #32]	@ (10052f08 <__arm_cp.3_1>)
10052ee6:	2234      	movs	r2, #52	@ 0x34
10052ee8:	4629      	mov	r1, r5
10052eea:	f7f3 f8b3 	bl	10046054 <BLEPLAT_MemCpy>
10052eee:	f00c fc77 	bl	1005f7e0 <BlueNRG_Stack_Initialize_RAM_check>
10052ef2:	2800      	cmp	r0, #0
10052ef4:	d403      	bmi.n	10052efe <BLE_STACK_Init+0x5e>
10052ef6:	f7ff ff6d 	bl	10052dd4 <_BlueNRG_Stack_Initialization>
10052efa:	2400      	movs	r4, #0
10052efc:	e000      	b.n	10052f00 <BLE_STACK_Init+0x60>
10052efe:	2487      	movs	r4, #135	@ 0x87
10052f00:	4620      	mov	r0, r4
10052f02:	bdb0      	pop	{r4, r5, r7, pc}

10052f04 <__arm_cp.3_0>:
10052f04:	000003fa 	.word	0x000003fa

10052f08 <__arm_cp.3_1>:
10052f08:	20001108 	.word	0x20001108

10052f0c <BLE_STACK_SleepCheck>:
10052f0c:	b580      	push	{r7, lr}
10052f0e:	f00f fac9 	bl	100624a4 <tsk_no_idle_check>
10052f12:	2800      	cmp	r0, #0
10052f14:	d104      	bne.n	10052f20 <BLE_STACK_SleepCheck+0x14>
10052f16:	4804      	ldr	r0, [pc, #16]	@ (10052f28 <__arm_cp.4_0>)
10052f18:	6800      	ldr	r0, [r0, #0]
10052f1a:	7ac0      	ldrb	r0, [r0, #11]
10052f1c:	2800      	cmp	r0, #0
10052f1e:	d001      	beq.n	10052f24 <BLE_STACK_SleepCheck+0x18>
10052f20:	2000      	movs	r0, #0
10052f22:	bd80      	pop	{r7, pc}
10052f24:	2003      	movs	r0, #3
10052f26:	bd80      	pop	{r7, pc}

10052f28 <__arm_cp.4_0>:
10052f28:	200010f4 	.word	0x200010f4

10052f2c <log_verbosity_get_ucfg_weak>:
10052f2c:	4770      	bx	lr

10052f2e <log_init_ucfg_weak>:
10052f2e:	4770      	bx	lr

10052f30 <log_notify_stu_ucfg_weak>:
10052f30:	4770      	bx	lr

10052f32 <log_notify_us_flush_ucfg_weak>:
10052f32:	4770      	bx	lr

10052f34 <log_csr_ucfg_weak>:
10052f34:	2000      	movs	r0, #0
10052f36:	4770      	bx	lr

10052f38 <aci_event_fifo_push_header>:
10052f38:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10052f3a:	4615      	mov	r5, r2
10052f3c:	460c      	mov	r4, r1
10052f3e:	4606      	mov	r6, r0
10052f40:	0608      	lsls	r0, r1, #24
10052f42:	d414      	bmi.n	10052f6e <aci_event_fifo_push_header+0x36>
10052f44:	aa02      	add	r2, sp, #8
10052f46:	af01      	add	r7, sp, #4
10052f48:	4630      	mov	r0, r6
10052f4a:	4619      	mov	r1, r3
10052f4c:	463b      	mov	r3, r7
10052f4e:	f000 f853 	bl	10052ff8 <fifoBuf_getFreeHeader>
10052f52:	2800      	cmp	r0, #0
10052f54:	d021      	beq.n	10052f9a <aci_event_fifo_push_header+0x62>
10052f56:	0660      	lsls	r0, r4, #25
10052f58:	d438      	bmi.n	10052fcc <aci_event_fifo_push_header+0x94>
10052f5a:	9802      	ldr	r0, [sp, #8]
10052f5c:	7881      	ldrb	r1, [r0, #2]
10052f5e:	22fc      	movs	r2, #252	@ 0xfc
10052f60:	400a      	ands	r2, r1
10052f62:	7082      	strb	r2, [r0, #2]
10052f64:	9901      	ldr	r1, [sp, #4]
10052f66:	8001      	strh	r1, [r0, #0]
10052f68:	8071      	strh	r1, [r6, #2]
10052f6a:	2701      	movs	r7, #1
10052f6c:	e02f      	b.n	10052fce <aci_event_fifo_push_header+0x96>
10052f6e:	f3ef 8010 	mrs	r0, PRIMASK
10052f72:	b672      	cpsid	i
10052f74:	aa02      	add	r2, sp, #8
10052f76:	af01      	add	r7, sp, #4
10052f78:	4630      	mov	r0, r6
10052f7a:	4619      	mov	r1, r3
10052f7c:	463b      	mov	r3, r7
10052f7e:	f000 f83b 	bl	10052ff8 <fifoBuf_getFreeHeader>
10052f82:	2800      	cmp	r0, #0
10052f84:	d00b      	beq.n	10052f9e <aci_event_fifo_push_header+0x66>
10052f86:	9902      	ldr	r1, [sp, #8]
10052f88:	788a      	ldrb	r2, [r1, #2]
10052f8a:	23fc      	movs	r3, #252	@ 0xfc
10052f8c:	4013      	ands	r3, r2
10052f8e:	708b      	strb	r3, [r1, #2]
10052f90:	9a01      	ldr	r2, [sp, #4]
10052f92:	800a      	strh	r2, [r1, #0]
10052f94:	8072      	strh	r2, [r6, #2]
10052f96:	2701      	movs	r7, #1
10052f98:	e002      	b.n	10052fa0 <aci_event_fifo_push_header+0x68>
10052f9a:	2700      	movs	r7, #0
10052f9c:	e003      	b.n	10052fa6 <aci_event_fifo_push_header+0x6e>
10052f9e:	2700      	movs	r7, #0
10052fa0:	b662      	cpsie	i
10052fa2:	2800      	cmp	r0, #0
10052fa4:	d113      	bne.n	10052fce <aci_event_fifo_push_header+0x96>
10052fa6:	f3ef 8010 	mrs	r0, PRIMASK
10052faa:	b672      	cpsid	i
10052fac:	06a0      	lsls	r0, r4, #26
10052fae:	d40a      	bmi.n	10052fc6 <aci_event_fifo_push_header+0x8e>
10052fb0:	4810      	ldr	r0, [pc, #64]	@ (10052ff4 <__arm_cp.0_0>)
10052fb2:	6800      	ldr	r0, [r0, #0]
10052fb4:	6801      	ldr	r1, [r0, #0]
10052fb6:	2208      	movs	r2, #8
10052fb8:	430a      	orrs	r2, r1
10052fba:	6002      	str	r2, [r0, #0]
10052fbc:	2000      	movs	r0, #0
10052fbe:	f00f fa7b 	bl	100624b8 <tsk_notify_idx>
10052fc2:	f7f0 fdaa 	bl	10043b1a <BLE_STACK_ProcessRequest>
10052fc6:	b662      	cpsie	i
10052fc8:	2600      	movs	r6, #0
10052fca:	e00a      	b.n	10052fe2 <aci_event_fifo_push_header+0xaa>
10052fcc:	2700      	movs	r7, #0
10052fce:	9e02      	ldr	r6, [sp, #8]
10052fd0:	70f5      	strb	r5, [r6, #3]
10052fd2:	00a0      	lsls	r0, r4, #2
10052fd4:	2160      	movs	r1, #96	@ 0x60
10052fd6:	4001      	ands	r1, r0
10052fd8:	78b0      	ldrb	r0, [r6, #2]
10052fda:	2203      	movs	r2, #3
10052fdc:	4002      	ands	r2, r0
10052fde:	1850      	adds	r0, r2, r1
10052fe0:	70b0      	strb	r0, [r6, #2]
10052fe2:	2f00      	cmp	r7, #0
10052fe4:	d004      	beq.n	10052ff0 <aci_event_fifo_push_header+0xb8>
10052fe6:	2000      	movs	r0, #0
10052fe8:	f00f fa66 	bl	100624b8 <tsk_notify_idx>
10052fec:	f7f0 fd95 	bl	10043b1a <BLE_STACK_ProcessRequest>
10052ff0:	4630      	mov	r0, r6
10052ff2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10052ff4 <__arm_cp.0_0>:
10052ff4:	200010a4 	.word	0x200010a4

10052ff8 <fifoBuf_getFreeHeader>:
10052ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10052ffa:	9200      	str	r2, [sp, #0]
10052ffc:	8845      	ldrh	r5, [r0, #2]
10052ffe:	08ac      	lsrs	r4, r5, #2
10053000:	801c      	strh	r4, [r3, #0]
10053002:	1c49      	adds	r1, r1, #1
10053004:	b28a      	uxth	r2, r1
10053006:	18a6      	adds	r6, r4, r2
10053008:	8887      	ldrh	r7, [r0, #4]
1005300a:	42be      	cmp	r6, r7
1005300c:	d900      	bls.n	10053010 <fifoBuf_getFreeHeader+0x18>
1005300e:	1b09      	subs	r1, r1, r4
10053010:	190a      	adds	r2, r1, r4
10053012:	0092      	lsls	r2, r2, #2
10053014:	42be      	cmp	r6, r7
10053016:	d900      	bls.n	1005301a <fifoBuf_getFreeHeader+0x22>
10053018:	1c6d      	adds	r5, r5, #1
1005301a:	2603      	movs	r6, #3
1005301c:	4035      	ands	r5, r6
1005301e:	1952      	adds	r2, r2, r5
10053020:	801a      	strh	r2, [r3, #0]
10053022:	00a3      	lsls	r3, r4, #2
10053024:	181b      	adds	r3, r3, r0
10053026:	3308      	adds	r3, #8
10053028:	9c00      	ldr	r4, [sp, #0]
1005302a:	6023      	str	r3, [r4, #0]
1005302c:	b292      	uxth	r2, r2
1005302e:	8805      	ldrh	r5, [r0, #0]
10053030:	1b52      	subs	r2, r2, r5
10053032:	4617      	mov	r7, r2
10053034:	4037      	ands	r7, r6
10053036:	8884      	ldrh	r4, [r0, #4]
10053038:	4367      	muls	r7, r4
1005303a:	4035      	ands	r5, r6
1005303c:	1952      	adds	r2, r2, r5
1005303e:	0892      	lsrs	r2, r2, #2
10053040:	19d2      	adds	r2, r2, r7
10053042:	b295      	uxth	r5, r2
10053044:	88c6      	ldrh	r6, [r0, #6]
10053046:	42b5      	cmp	r5, r6
10053048:	d900      	bls.n	1005304c <fifoBuf_getFreeHeader+0x54>
1005304a:	80c2      	strh	r2, [r0, #6]
1005304c:	42a5      	cmp	r5, r4
1005304e:	d80a      	bhi.n	10053066 <fifoBuf_getFreeHeader+0x6e>
10053050:	b209      	sxth	r1, r1
10053052:	2900      	cmp	r1, #0
10053054:	d507      	bpl.n	10053066 <fifoBuf_getFreeHeader+0x6e>
10053056:	7899      	ldrb	r1, [r3, #2]
10053058:	22fc      	movs	r2, #252	@ 0xfc
1005305a:	400a      	ands	r2, r1
1005305c:	1c51      	adds	r1, r2, #1
1005305e:	7099      	strb	r1, [r3, #2]
10053060:	3008      	adds	r0, #8
10053062:	9900      	ldr	r1, [sp, #0]
10053064:	6008      	str	r0, [r1, #0]
10053066:	42a5      	cmp	r5, r4
10053068:	d901      	bls.n	1005306e <fifoBuf_getFreeHeader+0x76>
1005306a:	2000      	movs	r0, #0
1005306c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005306e:	2001      	movs	r0, #1
10053070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10053072 <aci_event_fifo_push>:
10053072:	b580      	push	{r7, lr}
10053074:	0640      	lsls	r0, r0, #25
10053076:	d405      	bmi.n	10053084 <aci_event_fifo_push+0x12>
10053078:	7888      	ldrb	r0, [r1, #2]
1005307a:	22fc      	movs	r2, #252	@ 0xfc
1005307c:	4002      	ands	r2, r0
1005307e:	1c90      	adds	r0, r2, #2
10053080:	7088      	strb	r0, [r1, #2]
10053082:	bd80      	pop	{r7, pc}
10053084:	4608      	mov	r0, r1
10053086:	f000 f801 	bl	1005308c <event_notify_cb>
1005308a:	bd80      	pop	{r7, pc}

1005308c <event_notify_cb>:
1005308c:	b580      	push	{r7, lr}
1005308e:	1d01      	adds	r1, r0, #4
10053090:	78c2      	ldrb	r2, [r0, #3]
10053092:	2a14      	cmp	r2, #20
10053094:	d804      	bhi.n	100530a0 <event_notify_cb+0x14>
10053096:	6842      	ldr	r2, [r0, #4]
10053098:	7880      	ldrb	r0, [r0, #2]
1005309a:	0880      	lsrs	r0, r0, #2
1005309c:	4790      	blx	r2
1005309e:	bd80      	pop	{r7, pc}
100530a0:	2a3d      	cmp	r2, #61	@ 0x3d
100530a2:	d803      	bhi.n	100530ac <event_notify_cb+0x20>
100530a4:	2000      	movs	r0, #0
100530a6:	f000 f8e9 	bl	1005327c <hci_event_notify_cb>
100530aa:	bd80      	pop	{r7, pc}
100530ac:	2a3f      	cmp	r2, #63	@ 0x3f
100530ae:	d803      	bhi.n	100530b8 <event_notify_cb+0x2c>
100530b0:	2000      	movs	r0, #0
100530b2:	f000 f8f5 	bl	100532a0 <hci_rx_data_notify_cb>
100530b6:	bd80      	pop	{r7, pc}
100530b8:	2a60      	cmp	r2, #96	@ 0x60
100530ba:	d802      	bhi.n	100530c2 <event_notify_cb+0x36>
100530bc:	2000      	movs	r0, #0
100530be:	f000 f8e4 	bl	1005328a <hci_aci_event_notify_cb>
100530c2:	bd80      	pop	{r7, pc}

100530c4 <Events_Process_init>:
100530c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100530c6:	2001      	movs	r0, #1
100530c8:	211c      	movs	r1, #28
100530ca:	4a29      	ldr	r2, [pc, #164]	@ (10053170 <__arm_cp.7_0>)
100530cc:	4790      	blx	r2
100530ce:	4f29      	ldr	r7, [pc, #164]	@ (10053174 <__arm_cp.7_1>)
100530d0:	6038      	str	r0, [r7, #0]
100530d2:	4d29      	ldr	r5, [pc, #164]	@ (10053178 <__arm_cp.7_2>)
100530d4:	8da8      	ldrh	r0, [r5, #44]	@ 0x2c
100530d6:	1e40      	subs	r0, r0, #1
100530d8:	2603      	movs	r6, #3
100530da:	4330      	orrs	r0, r6
100530dc:	1c40      	adds	r0, r0, #1
100530de:	0880      	lsrs	r0, r0, #2
100530e0:	1cc0      	adds	r0, r0, #3
100530e2:	2404      	movs	r4, #4
100530e4:	4621      	mov	r1, r4
100530e6:	4a22      	ldr	r2, [pc, #136]	@ (10053170 <__arm_cp.7_0>)
100530e8:	4790      	blx	r2
100530ea:	6839      	ldr	r1, [r7, #0]
100530ec:	6048      	str	r0, [r1, #4]
100530ee:	8de8      	ldrh	r0, [r5, #46]	@ 0x2e
100530f0:	1e40      	subs	r0, r0, #1
100530f2:	4330      	orrs	r0, r6
100530f4:	1c40      	adds	r0, r0, #1
100530f6:	0880      	lsrs	r0, r0, #2
100530f8:	1cc0      	adds	r0, r0, #3
100530fa:	4621      	mov	r1, r4
100530fc:	4d1c      	ldr	r5, [pc, #112]	@ (10053170 <__arm_cp.7_0>)
100530fe:	47a8      	blx	r5
10053100:	462a      	mov	r2, r5
10053102:	6839      	ldr	r1, [r7, #0]
10053104:	6088      	str	r0, [r1, #8]
10053106:	4d1c      	ldr	r5, [pc, #112]	@ (10053178 <__arm_cp.7_2>)
10053108:	8e28      	ldrh	r0, [r5, #48]	@ 0x30
1005310a:	1e40      	subs	r0, r0, #1
1005310c:	4330      	orrs	r0, r6
1005310e:	1c40      	adds	r0, r0, #1
10053110:	0880      	lsrs	r0, r0, #2
10053112:	1cc0      	adds	r0, r0, #3
10053114:	4621      	mov	r1, r4
10053116:	4790      	blx	r2
10053118:	6839      	ldr	r1, [r7, #0]
1005311a:	60c8      	str	r0, [r1, #12]
1005311c:	f7ff fc02 	bl	10052924 <hal_radio_activity_state_init>
10053120:	6838      	ldr	r0, [r7, #0]
10053122:	6842      	ldr	r2, [r0, #4]
10053124:	2100      	movs	r1, #0
10053126:	8011      	strh	r1, [r2, #0]
10053128:	8051      	strh	r1, [r2, #2]
1005312a:	6883      	ldr	r3, [r0, #8]
1005312c:	8019      	strh	r1, [r3, #0]
1005312e:	80d1      	strh	r1, [r2, #6]
10053130:	8daf      	ldrh	r7, [r5, #44]	@ 0x2c
10053132:	1e7f      	subs	r7, r7, #1
10053134:	4337      	orrs	r7, r6
10053136:	1c7f      	adds	r7, r7, #1
10053138:	08bf      	lsrs	r7, r7, #2
1005313a:	8097      	strh	r7, [r2, #4]
1005313c:	8059      	strh	r1, [r3, #2]
1005313e:	80d9      	strh	r1, [r3, #6]
10053140:	8def      	ldrh	r7, [r5, #46]	@ 0x2e
10053142:	1e7f      	subs	r7, r7, #1
10053144:	4337      	orrs	r7, r6
10053146:	1c7f      	adds	r7, r7, #1
10053148:	08bf      	lsrs	r7, r7, #2
1005314a:	809f      	strh	r7, [r3, #4]
1005314c:	68c7      	ldr	r7, [r0, #12]
1005314e:	8039      	strh	r1, [r7, #0]
10053150:	6102      	str	r2, [r0, #16]
10053152:	6143      	str	r3, [r0, #20]
10053154:	80f9      	strh	r1, [r7, #6]
10053156:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
10053158:	1e52      	subs	r2, r2, #1
1005315a:	4332      	orrs	r2, r6
1005315c:	1c52      	adds	r2, r2, #1
1005315e:	0892      	lsrs	r2, r2, #2
10053160:	80ba      	strh	r2, [r7, #4]
10053162:	8079      	strh	r1, [r7, #2]
10053164:	6187      	str	r7, [r0, #24]
10053166:	4622      	mov	r2, r4
10053168:	f7f2 ff84 	bl	10046074 <BLEPLAT_MemSet>
1005316c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005316e:	46c0      	nop			@ (mov r8, r8)

10053170 <__arm_cp.7_0>:
10053170:	1005f4ad 	.word	0x1005f4ad

10053174 <__arm_cp.7_1>:
10053174:	200010a4 	.word	0x200010a4

10053178 <__arm_cp.7_2>:
10053178:	20001108 	.word	0x20001108

1005317c <Events_Process_Q>:
1005317c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005317e:	4d3d      	ldr	r5, [pc, #244]	@ (10053274 <__arm_cp.8_0>)
10053180:	6828      	ldr	r0, [r5, #0]
10053182:	3010      	adds	r0, #16
10053184:	2100      	movs	r1, #0
10053186:	2906      	cmp	r1, #6
10053188:	d005      	beq.n	10053196 <Events_Process_Q+0x1a>
1005318a:	c804      	ldmia	r0!, {r2}
1005318c:	8852      	ldrh	r2, [r2, #2]
1005318e:	ab01      	add	r3, sp, #4
10053190:	525a      	strh	r2, [r3, r1]
10053192:	1c89      	adds	r1, r1, #2
10053194:	e7f7      	b.n	10053186 <Events_Process_Q+0xa>
10053196:	f3ef 8010 	mrs	r0, PRIMASK
1005319a:	b672      	cpsid	i
1005319c:	6828      	ldr	r0, [r5, #0]
1005319e:	6804      	ldr	r4, [r0, #0]
100531a0:	2700      	movs	r7, #0
100531a2:	6007      	str	r7, [r0, #0]
100531a4:	b662      	cpsie	i
100531a6:	07e0      	lsls	r0, r4, #31
100531a8:	d002      	beq.n	100531b0 <Events_Process_Q+0x34>
100531aa:	2000      	movs	r0, #0
100531ac:	f000 fc4a 	bl	10053a44 <hci_hardware_error_event_cb>
100531b0:	07a0      	lsls	r0, r4, #30
100531b2:	d502      	bpl.n	100531ba <Events_Process_Q+0x3e>
100531b4:	2001      	movs	r0, #1
100531b6:	f000 fc45 	bl	10053a44 <hci_hardware_error_event_cb>
100531ba:	0760      	lsls	r0, r4, #29
100531bc:	d502      	bpl.n	100531c4 <Events_Process_Q+0x48>
100531be:	2002      	movs	r0, #2
100531c0:	f000 fc40 	bl	10053a44 <hci_hardware_error_event_cb>
100531c4:	0720      	lsls	r0, r4, #28
100531c6:	d502      	bpl.n	100531ce <Events_Process_Q+0x52>
100531c8:	2003      	movs	r0, #3
100531ca:	f000 fc3b 	bl	10053a44 <hci_hardware_error_event_cb>
100531ce:	06e0      	lsls	r0, r4, #27
100531d0:	d54a      	bpl.n	10053268 <Events_Process_Q+0xec>
100531d2:	2004      	movs	r0, #4
100531d4:	f000 fc36 	bl	10053a44 <hci_hardware_error_event_cb>
100531d8:	e046      	b.n	10053268 <Events_Process_Q+0xec>
100531da:	0078      	lsls	r0, r7, #1
100531dc:	a901      	add	r1, sp, #4
100531de:	5a0e      	ldrh	r6, [r1, r0]
100531e0:	9700      	str	r7, [sp, #0]
100531e2:	00bf      	lsls	r7, r7, #2
100531e4:	6828      	ldr	r0, [r5, #0]
100531e6:	19c0      	adds	r0, r0, r7
100531e8:	6900      	ldr	r0, [r0, #16]
100531ea:	8801      	ldrh	r1, [r0, #0]
100531ec:	8802      	ldrh	r2, [r0, #0]
100531ee:	42b2      	cmp	r2, r6
100531f0:	d02a      	beq.n	10053248 <Events_Process_Q+0xcc>
100531f2:	0889      	lsrs	r1, r1, #2
100531f4:	1c89      	adds	r1, r1, #2
100531f6:	0089      	lsls	r1, r1, #2
100531f8:	1844      	adds	r4, r0, r1
100531fa:	78a1      	ldrb	r1, [r4, #2]
100531fc:	2203      	movs	r2, #3
100531fe:	400a      	ands	r2, r1
10053200:	2a01      	cmp	r2, #1
10053202:	d002      	beq.n	1005320a <Events_Process_Q+0x8e>
10053204:	2a00      	cmp	r2, #0
10053206:	d103      	bne.n	10053210 <Events_Process_Q+0x94>
10053208:	e01e      	b.n	10053248 <Events_Process_Q+0xcc>
1005320a:	7a81      	ldrb	r1, [r0, #10]
1005320c:	3008      	adds	r0, #8
1005320e:	4604      	mov	r4, r0
10053210:	0648      	lsls	r0, r1, #25
10053212:	d403      	bmi.n	1005321c <Events_Process_Q+0xa0>
10053214:	4620      	mov	r0, r4
10053216:	f7ff ff39 	bl	1005308c <event_notify_cb>
1005321a:	e00a      	b.n	10053232 <Events_Process_Q+0xb6>
1005321c:	78e0      	ldrb	r0, [r4, #3]
1005321e:	2813      	cmp	r0, #19
10053220:	d207      	bcs.n	10053232 <Events_Process_Q+0xb6>
10053222:	0080      	lsls	r0, r0, #2
10053224:	4914      	ldr	r1, [pc, #80]	@ (10053278 <__arm_cp.8_1>)
10053226:	580a      	ldr	r2, [r1, r0]
10053228:	1d21      	adds	r1, r4, #4
1005322a:	4620      	mov	r0, r4
1005322c:	4790      	blx	r2
1005322e:	2800      	cmp	r0, #0
10053230:	d105      	bne.n	1005323e <Events_Process_Q+0xc2>
10053232:	6828      	ldr	r0, [r5, #0]
10053234:	19c0      	adds	r0, r0, r7
10053236:	6900      	ldr	r0, [r0, #16]
10053238:	8821      	ldrh	r1, [r4, #0]
1005323a:	8001      	strh	r1, [r0, #0]
1005323c:	e7d5      	b.n	100531ea <Events_Process_Q+0x6e>
1005323e:	2000      	movs	r0, #0
10053240:	f00f f93a 	bl	100624b8 <tsk_notify_idx>
10053244:	f7f0 fc69 	bl	10043b1a <BLE_STACK_ProcessRequest>
10053248:	f3ef 8010 	mrs	r0, PRIMASK
1005324c:	b672      	cpsid	i
1005324e:	6828      	ldr	r0, [r5, #0]
10053250:	19c0      	adds	r0, r0, r7
10053252:	6900      	ldr	r0, [r0, #16]
10053254:	8841      	ldrh	r1, [r0, #2]
10053256:	8802      	ldrh	r2, [r0, #0]
10053258:	4291      	cmp	r1, r2
1005325a:	d102      	bne.n	10053262 <Events_Process_Q+0xe6>
1005325c:	2100      	movs	r1, #0
1005325e:	8001      	strh	r1, [r0, #0]
10053260:	8041      	strh	r1, [r0, #2]
10053262:	b662      	cpsie	i
10053264:	9f00      	ldr	r7, [sp, #0]
10053266:	1c7f      	adds	r7, r7, #1
10053268:	2f03      	cmp	r7, #3
1005326a:	d1b6      	bne.n	100531da <Events_Process_Q+0x5e>
1005326c:	f7ff fb6c 	bl	10052948 <hal_radio_activity_state_cb_check>
10053270:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10053272:	46c0      	nop			@ (mov r8, r8)

10053274 <__arm_cp.8_0>:
10053274:	200010a4 	.word	0x200010a4

10053278 <__arm_cp.8_1>:
10053278:	10069f04 	.word	0x10069f04

1005327c <hci_event_notify_cb>:
1005327c:	b580      	push	{r7, lr}
1005327e:	4608      	mov	r0, r1
10053280:	7889      	ldrb	r1, [r1, #2]
10053282:	1cc9      	adds	r1, r1, #3
10053284:	f7fe f902 	bl	1005148c <BLE_STACK_Event>
10053288:	bd80      	pop	{r7, pc}

1005328a <hci_aci_event_notify_cb>:
1005328a:	b580      	push	{r7, lr}
1005328c:	4608      	mov	r0, r1
1005328e:	7889      	ldrb	r1, [r1, #2]
10053290:	78c2      	ldrb	r2, [r0, #3]
10053292:	0212      	lsls	r2, r2, #8
10053294:	1851      	adds	r1, r2, r1
10053296:	1d09      	adds	r1, r1, #4
10053298:	b289      	uxth	r1, r1
1005329a:	f7fe f8f7 	bl	1005148c <BLE_STACK_Event>
1005329e:	bd80      	pop	{r7, pc}

100532a0 <hci_rx_data_notify_cb>:
100532a0:	b580      	push	{r7, lr}
100532a2:	4608      	mov	r0, r1
100532a4:	78c9      	ldrb	r1, [r1, #3]
100532a6:	7902      	ldrb	r2, [r0, #4]
100532a8:	0212      	lsls	r2, r2, #8
100532aa:	1851      	adds	r1, r2, r1
100532ac:	1d49      	adds	r1, r1, #5
100532ae:	b289      	uxth	r1, r1
100532b0:	f7fe f8ec 	bl	1005148c <BLE_STACK_Event>
100532b4:	bd80      	pop	{r7, pc}
	...

100532b8 <hci_disconnection_complete_event_int_cb>:
100532b8:	b5b0      	push	{r4, r5, r7, lr}
100532ba:	460d      	mov	r5, r1
100532bc:	4604      	mov	r4, r0
100532be:	7908      	ldrb	r0, [r1, #4]
100532c0:	7949      	ldrb	r1, [r1, #5]
100532c2:	0209      	lsls	r1, r1, #8
100532c4:	1808      	adds	r0, r1, r0
100532c6:	f001 fb21 	bl	1005490c <GAT_att_cmn_disconnection>
100532ca:	7928      	ldrb	r0, [r5, #4]
100532cc:	7969      	ldrb	r1, [r5, #5]
100532ce:	0209      	lsls	r1, r1, #8
100532d0:	1808      	adds	r0, r1, r0
100532d2:	f00e fe21 	bl	10061f18 <smp_sap_hci_disconnection_complete_evt_hndl>
100532d6:	7928      	ldrb	r0, [r5, #4]
100532d8:	7969      	ldrb	r1, [r5, #5]
100532da:	0209      	lsls	r1, r1, #8
100532dc:	1808      	adds	r0, r1, r0
100532de:	f004 fead 	bl	1005803c <l2c_sap_hci_disconnection_complete_evt_hndl>
100532e2:	f000 feae 	bl	10054042 <GAP_hci_disconnection_complete_evt_hndl>
100532e6:	7928      	ldrb	r0, [r5, #4]
100532e8:	7969      	ldrb	r1, [r5, #5]
100532ea:	0209      	lsls	r1, r1, #8
100532ec:	1808      	adds	r0, r1, r0
100532ee:	f7ff fcd1 	bl	10052c94 <ACL_pkt_disconnection>
100532f2:	4808      	ldr	r0, [pc, #32]	@ (10053314 <__arm_cp.14_0>)
100532f4:	6800      	ldr	r0, [r0, #0]
100532f6:	2136      	movs	r1, #54	@ 0x36
100532f8:	5c40      	ldrb	r0, [r0, r1]
100532fa:	06c0      	lsls	r0, r0, #27
100532fc:	d401      	bmi.n	10053302 <hci_disconnection_complete_event_int_cb+0x4a>
100532fe:	2000      	movs	r0, #0
10053300:	bdb0      	pop	{r4, r5, r7, pc}
10053302:	2015      	movs	r0, #21
10053304:	70e0      	strb	r0, [r4, #3]
10053306:	78a0      	ldrb	r0, [r4, #2]
10053308:	21bf      	movs	r1, #191	@ 0xbf
1005330a:	4001      	ands	r1, r0
1005330c:	70a1      	strb	r1, [r4, #2]
1005330e:	2084      	movs	r0, #132	@ 0x84
10053310:	bdb0      	pop	{r4, r5, r7, pc}
10053312:	46c0      	nop			@ (mov r8, r8)

10053314 <__arm_cp.14_0>:
10053314:	200010f4 	.word	0x200010f4

10053318 <hci_encryption_change_event_int_cb>:
10053318:	b510      	push	{r4, lr}
1005331a:	4604      	mov	r4, r0
1005331c:	7908      	ldrb	r0, [r1, #4]
1005331e:	794a      	ldrb	r2, [r1, #5]
10053320:	0212      	lsls	r2, r2, #8
10053322:	1812      	adds	r2, r2, r0
10053324:	78c9      	ldrb	r1, [r1, #3]
10053326:	2006      	movs	r0, #6
10053328:	f00e fd7c 	bl	10061e24 <smp_sap_hci_encryption_change_evt_hndl>
1005332c:	4807      	ldr	r0, [pc, #28]	@ (1005334c <__arm_cp.16_0>)
1005332e:	6800      	ldr	r0, [r0, #0]
10053330:	2136      	movs	r1, #54	@ 0x36
10053332:	5640      	ldrsb	r0, [r0, r1]
10053334:	2800      	cmp	r0, #0
10053336:	d401      	bmi.n	1005333c <hci_encryption_change_event_int_cb+0x24>
10053338:	2000      	movs	r0, #0
1005333a:	bd10      	pop	{r4, pc}
1005333c:	2016      	movs	r0, #22
1005333e:	70e0      	strb	r0, [r4, #3]
10053340:	78a0      	ldrb	r0, [r4, #2]
10053342:	21bf      	movs	r1, #191	@ 0xbf
10053344:	4001      	ands	r1, r0
10053346:	70a1      	strb	r1, [r4, #2]
10053348:	2084      	movs	r0, #132	@ 0x84
1005334a:	bd10      	pop	{r4, pc}

1005334c <__arm_cp.16_0>:
1005334c:	200010f4 	.word	0x200010f4

10053350 <hci_encryption_key_refresh_complete_event_int_cb>:
10053350:	b510      	push	{r4, lr}
10053352:	4604      	mov	r4, r0
10053354:	7908      	ldrb	r0, [r1, #4]
10053356:	794a      	ldrb	r2, [r1, #5]
10053358:	0212      	lsls	r2, r2, #8
1005335a:	1812      	adds	r2, r2, r0
1005335c:	78c9      	ldrb	r1, [r1, #3]
1005335e:	2007      	movs	r0, #7
10053360:	f00e fd60 	bl	10061e24 <smp_sap_hci_encryption_change_evt_hndl>
10053364:	4807      	ldr	r0, [pc, #28]	@ (10053384 <__arm_cp.18_0>)
10053366:	6800      	ldr	r0, [r0, #0]
10053368:	213b      	movs	r1, #59	@ 0x3b
1005336a:	5640      	ldrsb	r0, [r0, r1]
1005336c:	2800      	cmp	r0, #0
1005336e:	d401      	bmi.n	10053374 <hci_encryption_key_refresh_complete_event_int_cb+0x24>
10053370:	2000      	movs	r0, #0
10053372:	bd10      	pop	{r4, pc}
10053374:	2017      	movs	r0, #23
10053376:	70e0      	strb	r0, [r4, #3]
10053378:	78a0      	ldrb	r0, [r4, #2]
1005337a:	21bf      	movs	r1, #191	@ 0xbf
1005337c:	4001      	ands	r1, r0
1005337e:	70a1      	strb	r1, [r4, #2]
10053380:	2084      	movs	r0, #132	@ 0x84
10053382:	bd10      	pop	{r4, pc}

10053384 <__arm_cp.18_0>:
10053384:	200010f4 	.word	0x200010f4

10053388 <hci_le_connection_complete_event_int_cb>:
10053388:	b5b0      	push	{r4, r5, r7, lr}
1005338a:	460d      	mov	r5, r1
1005338c:	4604      	mov	r4, r0
1005338e:	7908      	ldrb	r0, [r1, #4]
10053390:	2800      	cmp	r0, #0
10053392:	d11d      	bne.n	100533d0 <hci_le_connection_complete_event_int_cb+0x48>
10053394:	7968      	ldrb	r0, [r5, #5]
10053396:	79a9      	ldrb	r1, [r5, #6]
10053398:	0209      	lsls	r1, r1, #8
1005339a:	1808      	adds	r0, r1, r0
1005339c:	f7ff fc56 	bl	10052c4c <ACL_pkt_connection>
100533a0:	7968      	ldrb	r0, [r5, #5]
100533a2:	79a9      	ldrb	r1, [r5, #6]
100533a4:	0209      	lsls	r1, r1, #8
100533a6:	1808      	adds	r0, r1, r0
100533a8:	7a2a      	ldrb	r2, [r5, #8]
100533aa:	79e9      	ldrb	r1, [r5, #7]
100533ac:	462b      	mov	r3, r5
100533ae:	3309      	adds	r3, #9
100533b0:	f00e fbf6 	bl	10061ba0 <smp_sap_hci_le_connection_complete_evt_hndl>
100533b4:	7968      	ldrb	r0, [r5, #5]
100533b6:	79a9      	ldrb	r1, [r5, #6]
100533b8:	0209      	lsls	r1, r1, #8
100533ba:	1808      	adds	r0, r1, r0
100533bc:	f001 fa86 	bl	100548cc <GAT_att_cmn_connection>
100533c0:	7968      	ldrb	r0, [r5, #5]
100533c2:	79a9      	ldrb	r1, [r5, #6]
100533c4:	0209      	lsls	r1, r1, #8
100533c6:	1808      	adds	r0, r1, r0
100533c8:	79e9      	ldrb	r1, [r5, #7]
100533ca:	f004 fe27 	bl	1005801c <l2c_sap_hci_le_connection_complete_evt_hndl>
100533ce:	7928      	ldrb	r0, [r5, #4]
100533d0:	7969      	ldrb	r1, [r5, #5]
100533d2:	79aa      	ldrb	r2, [r5, #6]
100533d4:	0212      	lsls	r2, r2, #8
100533d6:	1851      	adds	r1, r2, r1
100533d8:	79ea      	ldrb	r2, [r5, #7]
100533da:	f000 fe33 	bl	10054044 <GAP_hci_le_connection_complete_evt_hndl>
100533de:	4809      	ldr	r0, [pc, #36]	@ (10053404 <__arm_cp.20_0>)
100533e0:	6801      	ldr	r1, [r0, #0]
100533e2:	203d      	movs	r0, #61	@ 0x3d
100533e4:	5c0a      	ldrb	r2, [r1, r0]
100533e6:	2000      	movs	r0, #0
100533e8:	0692      	lsls	r2, r2, #26
100533ea:	d50a      	bpl.n	10053402 <hci_le_connection_complete_event_int_cb+0x7a>
100533ec:	313d      	adds	r1, #61	@ 0x3d
100533ee:	7a49      	ldrb	r1, [r1, #9]
100533f0:	07c9      	lsls	r1, r1, #31
100533f2:	d006      	beq.n	10053402 <hci_le_connection_complete_event_int_cb+0x7a>
100533f4:	2018      	movs	r0, #24
100533f6:	70e0      	strb	r0, [r4, #3]
100533f8:	78a0      	ldrb	r0, [r4, #2]
100533fa:	21bf      	movs	r1, #191	@ 0xbf
100533fc:	4001      	ands	r1, r0
100533fe:	70a1      	strb	r1, [r4, #2]
10053400:	2084      	movs	r0, #132	@ 0x84
10053402:	bdb0      	pop	{r4, r5, r7, pc}

10053404 <__arm_cp.20_0>:
10053404:	200010f4 	.word	0x200010f4

10053408 <hci_le_enhanced_connection_complete_event_int_cb>:
10053408:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005340a:	460d      	mov	r5, r1
1005340c:	4604      	mov	r4, r0
1005340e:	7908      	ldrb	r0, [r1, #4]
10053410:	2800      	cmp	r0, #0
10053412:	d123      	bne.n	1005345c <hci_le_enhanced_connection_complete_event_int_cb+0x54>
10053414:	7968      	ldrb	r0, [r5, #5]
10053416:	79a9      	ldrb	r1, [r5, #6]
10053418:	0209      	lsls	r1, r1, #8
1005341a:	1808      	adds	r0, r1, r0
1005341c:	f7ff fc16 	bl	10052c4c <ACL_pkt_connection>
10053420:	7a2a      	ldrb	r2, [r5, #8]
10053422:	79e9      	ldrb	r1, [r5, #7]
10053424:	7968      	ldrb	r0, [r5, #5]
10053426:	79ab      	ldrb	r3, [r5, #6]
10053428:	462e      	mov	r6, r5
1005342a:	3615      	adds	r6, #21
1005342c:	462f      	mov	r7, r5
1005342e:	370f      	adds	r7, #15
10053430:	9700      	str	r7, [sp, #0]
10053432:	9601      	str	r6, [sp, #4]
10053434:	021b      	lsls	r3, r3, #8
10053436:	1818      	adds	r0, r3, r0
10053438:	462b      	mov	r3, r5
1005343a:	3309      	adds	r3, #9
1005343c:	f00e fc4a 	bl	10061cd4 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl>
10053440:	7968      	ldrb	r0, [r5, #5]
10053442:	79a9      	ldrb	r1, [r5, #6]
10053444:	0209      	lsls	r1, r1, #8
10053446:	1808      	adds	r0, r1, r0
10053448:	f001 fa40 	bl	100548cc <GAT_att_cmn_connection>
1005344c:	7968      	ldrb	r0, [r5, #5]
1005344e:	79a9      	ldrb	r1, [r5, #6]
10053450:	0209      	lsls	r1, r1, #8
10053452:	1808      	adds	r0, r1, r0
10053454:	79e9      	ldrb	r1, [r5, #7]
10053456:	f004 fde1 	bl	1005801c <l2c_sap_hci_le_connection_complete_evt_hndl>
1005345a:	7928      	ldrb	r0, [r5, #4]
1005345c:	7969      	ldrb	r1, [r5, #5]
1005345e:	79aa      	ldrb	r2, [r5, #6]
10053460:	0212      	lsls	r2, r2, #8
10053462:	1851      	adds	r1, r2, r1
10053464:	79ea      	ldrb	r2, [r5, #7]
10053466:	f000 fded 	bl	10054044 <GAP_hci_le_connection_complete_evt_hndl>
1005346a:	4809      	ldr	r0, [pc, #36]	@ (10053490 <__arm_cp.22_0>)
1005346c:	6801      	ldr	r1, [r0, #0]
1005346e:	203d      	movs	r0, #61	@ 0x3d
10053470:	5c0a      	ldrb	r2, [r1, r0]
10053472:	2000      	movs	r0, #0
10053474:	0692      	lsls	r2, r2, #26
10053476:	d50a      	bpl.n	1005348e <hci_le_enhanced_connection_complete_event_int_cb+0x86>
10053478:	313d      	adds	r1, #61	@ 0x3d
1005347a:	7a89      	ldrb	r1, [r1, #10]
1005347c:	0789      	lsls	r1, r1, #30
1005347e:	d506      	bpl.n	1005348e <hci_le_enhanced_connection_complete_event_int_cb+0x86>
10053480:	201c      	movs	r0, #28
10053482:	70e0      	strb	r0, [r4, #3]
10053484:	78a0      	ldrb	r0, [r4, #2]
10053486:	21bf      	movs	r1, #191	@ 0xbf
10053488:	4001      	ands	r1, r0
1005348a:	70a1      	strb	r1, [r4, #2]
1005348c:	2084      	movs	r0, #132	@ 0x84
1005348e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10053490 <__arm_cp.22_0>:
10053490:	200010f4 	.word	0x200010f4

10053494 <hci_le_long_term_key_request_event_int_cb>:
10053494:	b570      	push	{r4, r5, r6, lr}
10053496:	4604      	mov	r4, r0
10053498:	4d14      	ldr	r5, [pc, #80]	@ (100534ec <__arm_cp.24_0>)
1005349a:	6828      	ldr	r0, [r5, #0]
1005349c:	2636      	movs	r6, #54	@ 0x36
1005349e:	5d80      	ldrb	r0, [r0, r6]
100534a0:	2800      	cmp	r0, #0
100534a2:	d10e      	bne.n	100534c2 <hci_le_long_term_key_request_event_int_cb+0x2e>
100534a4:	7908      	ldrb	r0, [r1, #4]
100534a6:	794a      	ldrb	r2, [r1, #5]
100534a8:	0212      	lsls	r2, r2, #8
100534aa:	1810      	adds	r0, r2, r0
100534ac:	7b8a      	ldrb	r2, [r1, #14]
100534ae:	7bcb      	ldrb	r3, [r1, #15]
100534b0:	021b      	lsls	r3, r3, #8
100534b2:	189a      	adds	r2, r3, r2
100534b4:	1d89      	adds	r1, r1, #6
100534b6:	f00e fc35 	bl	10061d24 <smp_sap_hci_le_long_term_key_request_evt_hndl>
100534ba:	6828      	ldr	r0, [r5, #0]
100534bc:	5d80      	ldrb	r0, [r0, r6]
100534be:	2800      	cmp	r0, #0
100534c0:	d012      	beq.n	100534e8 <hci_le_long_term_key_request_event_int_cb+0x54>
100534c2:	480b      	ldr	r0, [pc, #44]	@ (100534f0 <__arm_cp.24_1>)
100534c4:	6801      	ldr	r1, [r0, #0]
100534c6:	203d      	movs	r0, #61	@ 0x3d
100534c8:	5c0a      	ldrb	r2, [r1, r0]
100534ca:	2000      	movs	r0, #0
100534cc:	0692      	lsls	r2, r2, #26
100534ce:	d50a      	bpl.n	100534e6 <hci_le_long_term_key_request_event_int_cb+0x52>
100534d0:	313d      	adds	r1, #61	@ 0x3d
100534d2:	7a49      	ldrb	r1, [r1, #9]
100534d4:	06c9      	lsls	r1, r1, #27
100534d6:	d506      	bpl.n	100534e6 <hci_le_long_term_key_request_event_int_cb+0x52>
100534d8:	2019      	movs	r0, #25
100534da:	70e0      	strb	r0, [r4, #3]
100534dc:	78a0      	ldrb	r0, [r4, #2]
100534de:	21bf      	movs	r1, #191	@ 0xbf
100534e0:	4001      	ands	r1, r0
100534e2:	70a1      	strb	r1, [r4, #2]
100534e4:	2084      	movs	r0, #132	@ 0x84
100534e6:	bd70      	pop	{r4, r5, r6, pc}
100534e8:	2000      	movs	r0, #0
100534ea:	bd70      	pop	{r4, r5, r6, pc}

100534ec <__arm_cp.24_0>:
100534ec:	200010a0 	.word	0x200010a0

100534f0 <__arm_cp.24_1>:
100534f0:	200010f4 	.word	0x200010f4

100534f4 <hci_le_read_local_p256_public_key_complete_event_int_cb>:
100534f4:	b510      	push	{r4, lr}
100534f6:	4604      	mov	r4, r0
100534f8:	7908      	ldrb	r0, [r1, #4]
100534fa:	1d49      	adds	r1, r1, #5
100534fc:	f7fe f93e 	bl	1005177c <smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg>
10053500:	480a      	ldr	r0, [pc, #40]	@ (1005352c <__arm_cp.26_0>)
10053502:	6801      	ldr	r1, [r0, #0]
10053504:	203d      	movs	r0, #61	@ 0x3d
10053506:	5c0a      	ldrb	r2, [r1, r0]
10053508:	2000      	movs	r0, #0
1005350a:	0692      	lsls	r2, r2, #26
1005350c:	d504      	bpl.n	10053518 <hci_le_read_local_p256_public_key_complete_event_int_cb+0x24>
1005350e:	313d      	adds	r1, #61	@ 0x3d
10053510:	2209      	movs	r2, #9
10053512:	5689      	ldrsb	r1, [r1, r2]
10053514:	2900      	cmp	r1, #0
10053516:	d400      	bmi.n	1005351a <hci_le_read_local_p256_public_key_complete_event_int_cb+0x26>
10053518:	bd10      	pop	{r4, pc}
1005351a:	201a      	movs	r0, #26
1005351c:	70e0      	strb	r0, [r4, #3]
1005351e:	78a0      	ldrb	r0, [r4, #2]
10053520:	21bf      	movs	r1, #191	@ 0xbf
10053522:	4001      	ands	r1, r0
10053524:	70a1      	strb	r1, [r4, #2]
10053526:	2084      	movs	r0, #132	@ 0x84
10053528:	bd10      	pop	{r4, pc}
1005352a:	46c0      	nop			@ (mov r8, r8)

1005352c <__arm_cp.26_0>:
1005352c:	200010f4 	.word	0x200010f4

10053530 <hci_le_generate_dhkey_complete_event_int_cb>:
10053530:	b510      	push	{r4, lr}
10053532:	4604      	mov	r4, r0
10053534:	7908      	ldrb	r0, [r1, #4]
10053536:	1d49      	adds	r1, r1, #5
10053538:	f7fe f932 	bl	100517a0 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg>
1005353c:	4809      	ldr	r0, [pc, #36]	@ (10053564 <__arm_cp.28_0>)
1005353e:	6801      	ldr	r1, [r0, #0]
10053540:	203d      	movs	r0, #61	@ 0x3d
10053542:	5c0a      	ldrb	r2, [r1, r0]
10053544:	2000      	movs	r0, #0
10053546:	0692      	lsls	r2, r2, #26
10053548:	d50a      	bpl.n	10053560 <hci_le_generate_dhkey_complete_event_int_cb+0x30>
1005354a:	313d      	adds	r1, #61	@ 0x3d
1005354c:	7a89      	ldrb	r1, [r1, #10]
1005354e:	07c9      	lsls	r1, r1, #31
10053550:	d006      	beq.n	10053560 <hci_le_generate_dhkey_complete_event_int_cb+0x30>
10053552:	201b      	movs	r0, #27
10053554:	70e0      	strb	r0, [r4, #3]
10053556:	78a0      	ldrb	r0, [r4, #2]
10053558:	21bf      	movs	r1, #191	@ 0xbf
1005355a:	4001      	ands	r1, r0
1005355c:	70a1      	strb	r1, [r4, #2]
1005355e:	2084      	movs	r0, #132	@ 0x84
10053560:	bd10      	pop	{r4, pc}
10053562:	46c0      	nop			@ (mov r8, r8)

10053564 <__arm_cp.28_0>:
10053564:	200010f4 	.word	0x200010f4

10053568 <hci_le_advertising_report_event_int_cb_ucfg_weak>:
10053568:	2000      	movs	r0, #0
1005356a:	4770      	bx	lr

1005356c <hci_le_directed_advertising_report_event_int_cb_ucfg_weak>:
1005356c:	2000      	movs	r0, #0
1005356e:	4770      	bx	lr

10053570 <hci_le_extended_advertising_report_event_int_cb_ucfg_weak>:
10053570:	2000      	movs	r0, #0
10053572:	4770      	bx	lr

10053574 <hci_le_scan_timeout_event_int_cb_ucfg_weak>:
10053574:	2000      	movs	r0, #0
10053576:	4770      	bx	lr

10053578 <hci_le_advertising_set_terminated_event_int_cb_ucfg_weak>:
10053578:	2000      	movs	r0, #0
1005357a:	4770      	bx	lr

1005357c <hci_read_remote_version_information_complete_event_copy>:
1005357c:	7101      	strb	r1, [r0, #4]
1005357e:	2300      	movs	r3, #0
10053580:	70c3      	strb	r3, [r0, #3]
10053582:	0a09      	lsrs	r1, r1, #8
10053584:	7141      	strb	r1, [r0, #5]
10053586:	7811      	ldrb	r1, [r2, #0]
10053588:	7181      	strb	r1, [r0, #6]
1005358a:	7851      	ldrb	r1, [r2, #1]
1005358c:	7893      	ldrb	r3, [r2, #2]
1005358e:	7203      	strb	r3, [r0, #8]
10053590:	71c1      	strb	r1, [r0, #7]
10053592:	78d1      	ldrb	r1, [r2, #3]
10053594:	7912      	ldrb	r2, [r2, #4]
10053596:	7282      	strb	r2, [r0, #10]
10053598:	7241      	strb	r1, [r0, #9]
1005359a:	4770      	bx	lr

1005359c <hci_number_of_completed_packets_event_copy>:
1005359c:	2200      	movs	r2, #0
1005359e:	7102      	strb	r2, [r0, #4]
100535a0:	2201      	movs	r2, #1
100535a2:	70c2      	strb	r2, [r0, #3]
100535a4:	7041      	strb	r1, [r0, #1]
100535a6:	7002      	strb	r2, [r0, #0]
100535a8:	0a09      	lsrs	r1, r1, #8
100535aa:	7081      	strb	r1, [r0, #2]
100535ac:	4770      	bx	lr

100535ae <aci_gap_proc_complete_event_copy>:
100535ae:	b510      	push	{r4, lr}
100535b0:	7813      	ldrb	r3, [r2, #0]
100535b2:	7183      	strb	r3, [r0, #6]
100535b4:	7853      	ldrb	r3, [r2, #1]
100535b6:	1e8c      	subs	r4, r1, #2
100535b8:	7204      	strb	r4, [r0, #8]
100535ba:	71c3      	strb	r3, [r0, #7]
100535bc:	3009      	adds	r0, #9
100535be:	1c91      	adds	r1, r2, #2
100535c0:	b2e2      	uxtb	r2, r4
100535c2:	f7f2 fd47 	bl	10046054 <BLEPLAT_MemCpy>
100535c6:	bd10      	pop	{r4, pc}

100535c8 <aci_l2cap_connection_update_req_event_copy>:
100535c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100535ca:	b085      	sub	sp, #20
100535cc:	4617      	mov	r7, r2
100535ce:	9103      	str	r1, [sp, #12]
100535d0:	4604      	mov	r4, r0
100535d2:	6850      	ldr	r0, [r2, #4]
100535d4:	7a40      	ldrb	r0, [r0, #9]
100535d6:	9004      	str	r0, [sp, #16]
100535d8:	2106      	movs	r1, #6
100535da:	4d16      	ldr	r5, [pc, #88]	@ (10053634 <__arm_cp.42_0>)
100535dc:	4610      	mov	r0, r2
100535de:	47a8      	blx	r5
100535e0:	9002      	str	r0, [sp, #8]
100535e2:	2108      	movs	r1, #8
100535e4:	4638      	mov	r0, r7
100535e6:	47a8      	blx	r5
100535e8:	9001      	str	r0, [sp, #4]
100535ea:	210a      	movs	r1, #10
100535ec:	4638      	mov	r0, r7
100535ee:	47a8      	blx	r5
100535f0:	4606      	mov	r6, r0
100535f2:	210c      	movs	r1, #12
100535f4:	4638      	mov	r0, r7
100535f6:	47a8      	blx	r5
100535f8:	462a      	mov	r2, r5
100535fa:	4605      	mov	r5, r0
100535fc:	210e      	movs	r1, #14
100535fe:	4638      	mov	r0, r7
10053600:	4790      	blx	r2
10053602:	7460      	strb	r0, [r4, #17]
10053604:	0a29      	lsrs	r1, r5, #8
10053606:	7421      	strb	r1, [r4, #16]
10053608:	73e5      	strb	r5, [r4, #15]
1005360a:	0a31      	lsrs	r1, r6, #8
1005360c:	73a1      	strb	r1, [r4, #14]
1005360e:	7366      	strb	r6, [r4, #13]
10053610:	9a01      	ldr	r2, [sp, #4]
10053612:	0a11      	lsrs	r1, r2, #8
10053614:	7321      	strb	r1, [r4, #12]
10053616:	72e2      	strb	r2, [r4, #11]
10053618:	9a02      	ldr	r2, [sp, #8]
1005361a:	0a11      	lsrs	r1, r2, #8
1005361c:	72a1      	strb	r1, [r4, #10]
1005361e:	7262      	strb	r2, [r4, #9]
10053620:	9a03      	ldr	r2, [sp, #12]
10053622:	0a11      	lsrs	r1, r2, #8
10053624:	71e1      	strb	r1, [r4, #7]
10053626:	71a2      	strb	r2, [r4, #6]
10053628:	9904      	ldr	r1, [sp, #16]
1005362a:	7221      	strb	r1, [r4, #8]
1005362c:	0a00      	lsrs	r0, r0, #8
1005362e:	74a0      	strb	r0, [r4, #18]
10053630:	b005      	add	sp, #20
10053632:	bdf0      	pop	{r4, r5, r6, r7, pc}

10053634 <__arm_cp.42_0>:
10053634:	10052bff 	.word	0x10052bff

10053638 <ACL_pkt_read_8b>:
10053638:	b51c      	push	{r2, r3, r4, lr}
1005363a:	291f      	cmp	r1, #31
1005363c:	d803      	bhi.n	10053646 <ACL_pkt_read_8b+0xe>
1005363e:	aa01      	add	r2, sp, #4
10053640:	8011      	strh	r1, [r2, #0]
10053642:	6840      	ldr	r0, [r0, #4]
10053644:	e005      	b.n	10053652 <ACL_pkt_read_8b+0x1a>
10053646:	6840      	ldr	r0, [r0, #4]
10053648:	ac01      	add	r4, sp, #4
1005364a:	4622      	mov	r2, r4
1005364c:	f00b ffcd 	bl	1005f5ea <Mem_Buff_get_buff_off>
10053650:	8821      	ldrh	r1, [r4, #0]
10053652:	1840      	adds	r0, r0, r1
10053654:	7900      	ldrb	r0, [r0, #4]
10053656:	bd1c      	pop	{r2, r3, r4, pc}

10053658 <aci_l2cap_command_reject_event_copy>:
10053658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005365a:	4615      	mov	r5, r2
1005365c:	460e      	mov	r6, r1
1005365e:	4604      	mov	r4, r0
10053660:	6850      	ldr	r0, [r2, #4]
10053662:	7a40      	ldrb	r0, [r0, #9]
10053664:	9000      	str	r0, [sp, #0]
10053666:	2106      	movs	r1, #6
10053668:	4610      	mov	r0, r2
1005366a:	f7ff fac8 	bl	10052bfe <ACL_pkt_read_16b>
1005366e:	4607      	mov	r7, r0
10053670:	2108      	movs	r1, #8
10053672:	4628      	mov	r0, r5
10053674:	f7ff fac3 	bl	10052bfe <ACL_pkt_read_16b>
10053678:	1eb9      	subs	r1, r7, #2
1005367a:	72e1      	strb	r1, [r4, #11]
1005367c:	7260      	strb	r0, [r4, #9]
1005367e:	9a00      	ldr	r2, [sp, #0]
10053680:	7222      	strb	r2, [r4, #8]
10053682:	0a32      	lsrs	r2, r6, #8
10053684:	71e2      	strb	r2, [r4, #7]
10053686:	71a6      	strb	r6, [r4, #6]
10053688:	0a00      	lsrs	r0, r0, #8
1005368a:	72a0      	strb	r0, [r4, #10]
1005368c:	b2ca      	uxtb	r2, r1
1005368e:	89a8      	ldrh	r0, [r5, #12]
10053690:	340c      	adds	r4, #12
10053692:	1d80      	adds	r0, r0, #6
10053694:	b281      	uxth	r1, r0
10053696:	4628      	mov	r0, r5
10053698:	4623      	mov	r3, r4
1005369a:	f7ff faa7 	bl	10052bec <ACL_pkt_read>
1005369e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100536a0 <aci_att_clt_find_info_resp_event_copy>:
100536a0:	b570      	push	{r4, r5, r6, lr}
100536a2:	461c      	mov	r4, r3
100536a4:	4605      	mov	r5, r0
100536a6:	885e      	ldrh	r6, [r3, #2]
100536a8:	0a10      	lsrs	r0, r2, #8
100536aa:	70e8      	strb	r0, [r5, #3]
100536ac:	70aa      	strb	r2, [r5, #2]
100536ae:	0a08      	lsrs	r0, r1, #8
100536b0:	7068      	strb	r0, [r5, #1]
100536b2:	7029      	strb	r1, [r5, #0]
100536b4:	8998      	ldrh	r0, [r3, #12]
100536b6:	1c40      	adds	r0, r0, #1
100536b8:	b281      	uxth	r1, r0
100536ba:	4618      	mov	r0, r3
100536bc:	f7ff ffbc 	bl	10053638 <ACL_pkt_read_8b>
100536c0:	1eb1      	subs	r1, r6, #2
100536c2:	0a0a      	lsrs	r2, r1, #8
100536c4:	71aa      	strb	r2, [r5, #6]
100536c6:	7169      	strb	r1, [r5, #5]
100536c8:	7128      	strb	r0, [r5, #4]
100536ca:	89a0      	ldrh	r0, [r4, #12]
100536cc:	1deb      	adds	r3, r5, #7
100536ce:	b28a      	uxth	r2, r1
100536d0:	1c80      	adds	r0, r0, #2
100536d2:	b281      	uxth	r1, r0
100536d4:	4620      	mov	r0, r4
100536d6:	f7ff fa89 	bl	10052bec <ACL_pkt_read>
100536da:	bd70      	pop	{r4, r5, r6, pc}

100536dc <aci_att_clt_find_by_type_value_resp_event_copy>:
100536dc:	b5b0      	push	{r4, r5, r7, lr}
100536de:	461c      	mov	r4, r3
100536e0:	885b      	ldrh	r3, [r3, #2]
100536e2:	0a15      	lsrs	r5, r2, #8
100536e4:	70c5      	strb	r5, [r0, #3]
100536e6:	7082      	strb	r2, [r0, #2]
100536e8:	0a0a      	lsrs	r2, r1, #8
100536ea:	7042      	strb	r2, [r0, #1]
100536ec:	7001      	strb	r1, [r0, #0]
100536ee:	1e59      	subs	r1, r3, #1
100536f0:	088a      	lsrs	r2, r1, #2
100536f2:	7102      	strb	r2, [r0, #4]
100536f4:	89a5      	ldrh	r5, [r4, #12]
100536f6:	1d43      	adds	r3, r0, #5
100536f8:	b28a      	uxth	r2, r1
100536fa:	1c68      	adds	r0, r5, #1
100536fc:	b281      	uxth	r1, r0
100536fe:	4620      	mov	r0, r4
10053700:	f7ff fa74 	bl	10052bec <ACL_pkt_read>
10053704:	bdb0      	pop	{r4, r5, r7, pc}

10053706 <aci_att_clt_read_by_type_resp_event_copy>:
10053706:	b570      	push	{r4, r5, r6, lr}
10053708:	461c      	mov	r4, r3
1005370a:	4605      	mov	r5, r0
1005370c:	885e      	ldrh	r6, [r3, #2]
1005370e:	0a10      	lsrs	r0, r2, #8
10053710:	70e8      	strb	r0, [r5, #3]
10053712:	70aa      	strb	r2, [r5, #2]
10053714:	0a08      	lsrs	r0, r1, #8
10053716:	7068      	strb	r0, [r5, #1]
10053718:	7029      	strb	r1, [r5, #0]
1005371a:	8998      	ldrh	r0, [r3, #12]
1005371c:	1c40      	adds	r0, r0, #1
1005371e:	b281      	uxth	r1, r0
10053720:	4618      	mov	r0, r3
10053722:	f7ff ff89 	bl	10053638 <ACL_pkt_read_8b>
10053726:	1eb1      	subs	r1, r6, #2
10053728:	0a0a      	lsrs	r2, r1, #8
1005372a:	71aa      	strb	r2, [r5, #6]
1005372c:	7169      	strb	r1, [r5, #5]
1005372e:	7128      	strb	r0, [r5, #4]
10053730:	89a0      	ldrh	r0, [r4, #12]
10053732:	1deb      	adds	r3, r5, #7
10053734:	b28a      	uxth	r2, r1
10053736:	1c80      	adds	r0, r0, #2
10053738:	b281      	uxth	r1, r0
1005373a:	4620      	mov	r0, r4
1005373c:	f7ff fa56 	bl	10052bec <ACL_pkt_read>
10053740:	bd70      	pop	{r4, r5, r6, pc}

10053742 <aci_att_clt_read_resp_event_copy>:
10053742:	b5b0      	push	{r4, r5, r7, lr}
10053744:	461c      	mov	r4, r3
10053746:	885b      	ldrh	r3, [r3, #2]
10053748:	0a15      	lsrs	r5, r2, #8
1005374a:	70c5      	strb	r5, [r0, #3]
1005374c:	7082      	strb	r2, [r0, #2]
1005374e:	0a0a      	lsrs	r2, r1, #8
10053750:	7042      	strb	r2, [r0, #1]
10053752:	7001      	strb	r1, [r0, #0]
10053754:	1e59      	subs	r1, r3, #1
10053756:	7101      	strb	r1, [r0, #4]
10053758:	0a0a      	lsrs	r2, r1, #8
1005375a:	7142      	strb	r2, [r0, #5]
1005375c:	89a5      	ldrh	r5, [r4, #12]
1005375e:	1d83      	adds	r3, r0, #6
10053760:	b28a      	uxth	r2, r1
10053762:	1c68      	adds	r0, r5, #1
10053764:	b281      	uxth	r1, r0
10053766:	4620      	mov	r0, r4
10053768:	f7ff fa40 	bl	10052bec <ACL_pkt_read>
1005376c:	bdb0      	pop	{r4, r5, r7, pc}

1005376e <aci_att_clt_read_blob_resp_event_copy>:
1005376e:	b5b0      	push	{r4, r5, r7, lr}
10053770:	461c      	mov	r4, r3
10053772:	885b      	ldrh	r3, [r3, #2]
10053774:	0a15      	lsrs	r5, r2, #8
10053776:	70c5      	strb	r5, [r0, #3]
10053778:	7082      	strb	r2, [r0, #2]
1005377a:	0a0a      	lsrs	r2, r1, #8
1005377c:	7042      	strb	r2, [r0, #1]
1005377e:	7001      	strb	r1, [r0, #0]
10053780:	1e59      	subs	r1, r3, #1
10053782:	7101      	strb	r1, [r0, #4]
10053784:	0a0a      	lsrs	r2, r1, #8
10053786:	7142      	strb	r2, [r0, #5]
10053788:	89a5      	ldrh	r5, [r4, #12]
1005378a:	1d83      	adds	r3, r0, #6
1005378c:	b28a      	uxth	r2, r1
1005378e:	1c68      	adds	r0, r5, #1
10053790:	b281      	uxth	r1, r0
10053792:	4620      	mov	r0, r4
10053794:	f7ff fa2a 	bl	10052bec <ACL_pkt_read>
10053798:	bdb0      	pop	{r4, r5, r7, pc}

1005379a <aci_att_clt_read_multiple_resp_event_copy>:
1005379a:	b5b0      	push	{r4, r5, r7, lr}
1005379c:	461c      	mov	r4, r3
1005379e:	885b      	ldrh	r3, [r3, #2]
100537a0:	0a15      	lsrs	r5, r2, #8
100537a2:	70c5      	strb	r5, [r0, #3]
100537a4:	7082      	strb	r2, [r0, #2]
100537a6:	0a0a      	lsrs	r2, r1, #8
100537a8:	7042      	strb	r2, [r0, #1]
100537aa:	7001      	strb	r1, [r0, #0]
100537ac:	1e59      	subs	r1, r3, #1
100537ae:	7101      	strb	r1, [r0, #4]
100537b0:	0a0a      	lsrs	r2, r1, #8
100537b2:	7142      	strb	r2, [r0, #5]
100537b4:	89a5      	ldrh	r5, [r4, #12]
100537b6:	1d83      	adds	r3, r0, #6
100537b8:	b28a      	uxth	r2, r1
100537ba:	1c68      	adds	r0, r5, #1
100537bc:	b281      	uxth	r1, r0
100537be:	4620      	mov	r0, r4
100537c0:	f7ff fa14 	bl	10052bec <ACL_pkt_read>
100537c4:	bdb0      	pop	{r4, r5, r7, pc}

100537c6 <aci_att_clt_read_by_group_type_resp_event_copy>:
100537c6:	b570      	push	{r4, r5, r6, lr}
100537c8:	461c      	mov	r4, r3
100537ca:	4605      	mov	r5, r0
100537cc:	885e      	ldrh	r6, [r3, #2]
100537ce:	0a10      	lsrs	r0, r2, #8
100537d0:	70e8      	strb	r0, [r5, #3]
100537d2:	70aa      	strb	r2, [r5, #2]
100537d4:	0a08      	lsrs	r0, r1, #8
100537d6:	7068      	strb	r0, [r5, #1]
100537d8:	7029      	strb	r1, [r5, #0]
100537da:	8998      	ldrh	r0, [r3, #12]
100537dc:	1c40      	adds	r0, r0, #1
100537de:	b281      	uxth	r1, r0
100537e0:	4618      	mov	r0, r3
100537e2:	f7ff ff29 	bl	10053638 <ACL_pkt_read_8b>
100537e6:	1eb1      	subs	r1, r6, #2
100537e8:	0a0a      	lsrs	r2, r1, #8
100537ea:	71aa      	strb	r2, [r5, #6]
100537ec:	7169      	strb	r1, [r5, #5]
100537ee:	7128      	strb	r0, [r5, #4]
100537f0:	89a0      	ldrh	r0, [r4, #12]
100537f2:	1deb      	adds	r3, r5, #7
100537f4:	b28a      	uxth	r2, r1
100537f6:	1c80      	adds	r0, r0, #2
100537f8:	b281      	uxth	r1, r0
100537fa:	4620      	mov	r0, r4
100537fc:	f7ff f9f6 	bl	10052bec <ACL_pkt_read>
10053800:	bd70      	pop	{r4, r5, r6, pc}

10053802 <aci_att_clt_prepare_write_resp_event_copy>:
10053802:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10053804:	461c      	mov	r4, r3
10053806:	4617      	mov	r7, r2
10053808:	9102      	str	r1, [sp, #8]
1005380a:	4605      	mov	r5, r0
1005380c:	8858      	ldrh	r0, [r3, #2]
1005380e:	9001      	str	r0, [sp, #4]
10053810:	8998      	ldrh	r0, [r3, #12]
10053812:	1c40      	adds	r0, r0, #1
10053814:	b281      	uxth	r1, r0
10053816:	4618      	mov	r0, r3
10053818:	f7ff f9f1 	bl	10052bfe <ACL_pkt_read_16b>
1005381c:	4606      	mov	r6, r0
1005381e:	89a0      	ldrh	r0, [r4, #12]
10053820:	1cc0      	adds	r0, r0, #3
10053822:	b281      	uxth	r1, r0
10053824:	4620      	mov	r0, r4
10053826:	f7ff f9ea 	bl	10052bfe <ACL_pkt_read_16b>
1005382a:	9901      	ldr	r1, [sp, #4]
1005382c:	1f49      	subs	r1, r1, #5
1005382e:	0a0a      	lsrs	r2, r1, #8
10053830:	726a      	strb	r2, [r5, #9]
10053832:	7229      	strb	r1, [r5, #8]
10053834:	71a8      	strb	r0, [r5, #6]
10053836:	0a32      	lsrs	r2, r6, #8
10053838:	716a      	strb	r2, [r5, #5]
1005383a:	712e      	strb	r6, [r5, #4]
1005383c:	0a3a      	lsrs	r2, r7, #8
1005383e:	70ea      	strb	r2, [r5, #3]
10053840:	70af      	strb	r7, [r5, #2]
10053842:	9b02      	ldr	r3, [sp, #8]
10053844:	0a1a      	lsrs	r2, r3, #8
10053846:	706a      	strb	r2, [r5, #1]
10053848:	702b      	strb	r3, [r5, #0]
1005384a:	0a00      	lsrs	r0, r0, #8
1005384c:	71e8      	strb	r0, [r5, #7]
1005384e:	89a0      	ldrh	r0, [r4, #12]
10053850:	350a      	adds	r5, #10
10053852:	b28a      	uxth	r2, r1
10053854:	1d40      	adds	r0, r0, #5
10053856:	b281      	uxth	r1, r0
10053858:	4620      	mov	r0, r4
1005385a:	462b      	mov	r3, r5
1005385c:	f7ff f9c6 	bl	10052bec <ACL_pkt_read>
10053860:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10053862 <aci_gatt_clt_indication_event_copy>:
10053862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10053864:	461c      	mov	r4, r3
10053866:	4617      	mov	r7, r2
10053868:	460e      	mov	r6, r1
1005386a:	4605      	mov	r5, r0
1005386c:	8858      	ldrh	r0, [r3, #2]
1005386e:	9000      	str	r0, [sp, #0]
10053870:	8998      	ldrh	r0, [r3, #12]
10053872:	1c40      	adds	r0, r0, #1
10053874:	b281      	uxth	r1, r0
10053876:	4618      	mov	r0, r3
10053878:	f7ff f9c1 	bl	10052bfe <ACL_pkt_read_16b>
1005387c:	9900      	ldr	r1, [sp, #0]
1005387e:	1ec9      	subs	r1, r1, #3
10053880:	0a0a      	lsrs	r2, r1, #8
10053882:	71ea      	strb	r2, [r5, #7]
10053884:	71a9      	strb	r1, [r5, #6]
10053886:	7128      	strb	r0, [r5, #4]
10053888:	0a3a      	lsrs	r2, r7, #8
1005388a:	70ea      	strb	r2, [r5, #3]
1005388c:	70af      	strb	r7, [r5, #2]
1005388e:	0a32      	lsrs	r2, r6, #8
10053890:	706a      	strb	r2, [r5, #1]
10053892:	702e      	strb	r6, [r5, #0]
10053894:	0a00      	lsrs	r0, r0, #8
10053896:	7168      	strb	r0, [r5, #5]
10053898:	89a0      	ldrh	r0, [r4, #12]
1005389a:	3508      	adds	r5, #8
1005389c:	b28a      	uxth	r2, r1
1005389e:	1cc0      	adds	r0, r0, #3
100538a0:	b281      	uxth	r1, r0
100538a2:	4620      	mov	r0, r4
100538a4:	462b      	mov	r3, r5
100538a6:	f7ff f9a1 	bl	10052bec <ACL_pkt_read>
100538aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100538ac <aci_gatt_clt_notification_event_copy>:
100538ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100538ae:	461c      	mov	r4, r3
100538b0:	4617      	mov	r7, r2
100538b2:	460e      	mov	r6, r1
100538b4:	4605      	mov	r5, r0
100538b6:	8858      	ldrh	r0, [r3, #2]
100538b8:	9000      	str	r0, [sp, #0]
100538ba:	8998      	ldrh	r0, [r3, #12]
100538bc:	1c40      	adds	r0, r0, #1
100538be:	b281      	uxth	r1, r0
100538c0:	4618      	mov	r0, r3
100538c2:	f7ff f99c 	bl	10052bfe <ACL_pkt_read_16b>
100538c6:	9900      	ldr	r1, [sp, #0]
100538c8:	1ec9      	subs	r1, r1, #3
100538ca:	0a0a      	lsrs	r2, r1, #8
100538cc:	71ea      	strb	r2, [r5, #7]
100538ce:	71a9      	strb	r1, [r5, #6]
100538d0:	7128      	strb	r0, [r5, #4]
100538d2:	0a3a      	lsrs	r2, r7, #8
100538d4:	70ea      	strb	r2, [r5, #3]
100538d6:	70af      	strb	r7, [r5, #2]
100538d8:	0a32      	lsrs	r2, r6, #8
100538da:	706a      	strb	r2, [r5, #1]
100538dc:	702e      	strb	r6, [r5, #0]
100538de:	0a00      	lsrs	r0, r0, #8
100538e0:	7168      	strb	r0, [r5, #5]
100538e2:	89a0      	ldrh	r0, [r4, #12]
100538e4:	3508      	adds	r5, #8
100538e6:	b28a      	uxth	r2, r1
100538e8:	1cc0      	adds	r0, r0, #3
100538ea:	b281      	uxth	r1, r0
100538ec:	4620      	mov	r0, r4
100538ee:	462b      	mov	r3, r5
100538f0:	f7ff f97c 	bl	10052bec <ACL_pkt_read>
100538f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100538f6 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_copy>:
100538f6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
100538f8:	461d      	mov	r5, r3
100538fa:	4604      	mov	r4, r0
100538fc:	7202      	strb	r2, [r0, #8]
100538fe:	7181      	strb	r1, [r0, #6]
10053900:	0a10      	lsrs	r0, r2, #8
10053902:	7260      	strb	r0, [r4, #9]
10053904:	0a08      	lsrs	r0, r1, #8
10053906:	71e0      	strb	r0, [r4, #7]
10053908:	9e07      	ldr	r6, [sp, #28]
1005390a:	89b0      	ldrh	r0, [r6, #12]
1005390c:	18c0      	adds	r0, r0, r3
1005390e:	b281      	uxth	r1, r0
10053910:	2202      	movs	r2, #2
10053912:	ab01      	add	r3, sp, #4
10053914:	4630      	mov	r0, r6
10053916:	f7ff f969 	bl	10052bec <ACL_pkt_read>
1005391a:	9806      	ldr	r0, [sp, #24]
1005391c:	1e80      	subs	r0, r0, #2
1005391e:	7320      	strb	r0, [r4, #12]
10053920:	9901      	ldr	r1, [sp, #4]
10053922:	72a1      	strb	r1, [r4, #10]
10053924:	0a09      	lsrs	r1, r1, #8
10053926:	72e1      	strb	r1, [r4, #11]
10053928:	89b1      	ldrh	r1, [r6, #12]
1005392a:	1869      	adds	r1, r5, r1
1005392c:	1c89      	adds	r1, r1, #2
1005392e:	b289      	uxth	r1, r1
10053930:	340d      	adds	r4, #13
10053932:	b2c2      	uxtb	r2, r0
10053934:	4630      	mov	r0, r6
10053936:	4623      	mov	r3, r4
10053938:	f7ff f958 	bl	10052bec <ACL_pkt_read>
1005393c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

1005393e <aci_gatt_srv_write_event_copy>:
1005393e:	b5b0      	push	{r4, r5, r7, lr}
10053940:	4615      	mov	r5, r2
10053942:	4604      	mov	r4, r0
10053944:	9a05      	ldr	r2, [sp, #20]
10053946:	71c2      	strb	r2, [r0, #7]
10053948:	9804      	ldr	r0, [sp, #16]
1005394a:	7160      	strb	r0, [r4, #5]
1005394c:	7123      	strb	r3, [r4, #4]
1005394e:	70a5      	strb	r5, [r4, #2]
10053950:	7021      	strb	r1, [r4, #0]
10053952:	0a13      	lsrs	r3, r2, #8
10053954:	7223      	strb	r3, [r4, #8]
10053956:	0a00      	lsrs	r0, r0, #8
10053958:	71a0      	strb	r0, [r4, #6]
1005395a:	0a28      	lsrs	r0, r5, #8
1005395c:	70e0      	strb	r0, [r4, #3]
1005395e:	0a08      	lsrs	r0, r1, #8
10053960:	7060      	strb	r0, [r4, #1]
10053962:	9806      	ldr	r0, [sp, #24]
10053964:	8981      	ldrh	r1, [r0, #12]
10053966:	3409      	adds	r4, #9
10053968:	1cc9      	adds	r1, r1, #3
1005396a:	b289      	uxth	r1, r1
1005396c:	4623      	mov	r3, r4
1005396e:	f7ff f93d 	bl	10052bec <ACL_pkt_read>
10053972:	bdb0      	pop	{r4, r5, r7, pc}

10053974 <aci_att_srv_prepare_write_req_event_copy>:
10053974:	b570      	push	{r4, r5, r6, lr}
10053976:	4615      	mov	r5, r2
10053978:	4604      	mov	r4, r0
1005397a:	9a05      	ldr	r2, [sp, #20]
1005397c:	7202      	strb	r2, [r0, #8]
1005397e:	9804      	ldr	r0, [sp, #16]
10053980:	71a0      	strb	r0, [r4, #6]
10053982:	7123      	strb	r3, [r4, #4]
10053984:	70a5      	strb	r5, [r4, #2]
10053986:	7021      	strb	r1, [r4, #0]
10053988:	0a16      	lsrs	r6, r2, #8
1005398a:	7266      	strb	r6, [r4, #9]
1005398c:	0a00      	lsrs	r0, r0, #8
1005398e:	71e0      	strb	r0, [r4, #7]
10053990:	0a18      	lsrs	r0, r3, #8
10053992:	7160      	strb	r0, [r4, #5]
10053994:	0a28      	lsrs	r0, r5, #8
10053996:	70e0      	strb	r0, [r4, #3]
10053998:	0a08      	lsrs	r0, r1, #8
1005399a:	7060      	strb	r0, [r4, #1]
1005399c:	9806      	ldr	r0, [sp, #24]
1005399e:	8981      	ldrh	r1, [r0, #12]
100539a0:	340a      	adds	r4, #10
100539a2:	1d49      	adds	r1, r1, #5
100539a4:	b289      	uxth	r1, r1
100539a6:	4623      	mov	r3, r4
100539a8:	f7ff f920 	bl	10052bec <ACL_pkt_read>
100539ac:	bd70      	pop	{r4, r5, r6, pc}

100539ae <aci_gatt_clt_multi_notification_int_event_copy>:
100539ae:	b5b0      	push	{r4, r5, r7, lr}
100539b0:	461c      	mov	r4, r3
100539b2:	885b      	ldrh	r3, [r3, #2]
100539b4:	0a15      	lsrs	r5, r2, #8
100539b6:	70c5      	strb	r5, [r0, #3]
100539b8:	7082      	strb	r2, [r0, #2]
100539ba:	0a0a      	lsrs	r2, r1, #8
100539bc:	7042      	strb	r2, [r0, #1]
100539be:	7001      	strb	r1, [r0, #0]
100539c0:	1e59      	subs	r1, r3, #1
100539c2:	7101      	strb	r1, [r0, #4]
100539c4:	0a0a      	lsrs	r2, r1, #8
100539c6:	7142      	strb	r2, [r0, #5]
100539c8:	89a5      	ldrh	r5, [r4, #12]
100539ca:	1d83      	adds	r3, r0, #6
100539cc:	b28a      	uxth	r2, r1
100539ce:	1c68      	adds	r0, r5, #1
100539d0:	b281      	uxth	r1, r0
100539d2:	4620      	mov	r0, r4
100539d4:	f7ff f90a 	bl	10052bec <ACL_pkt_read>
100539d8:	bdb0      	pop	{r4, r5, r7, pc}

100539da <aci_att_clt_read_multiple_var_len_resp_event_copy>:
100539da:	b5b0      	push	{r4, r5, r7, lr}
100539dc:	461c      	mov	r4, r3
100539de:	885b      	ldrh	r3, [r3, #2]
100539e0:	0a15      	lsrs	r5, r2, #8
100539e2:	70c5      	strb	r5, [r0, #3]
100539e4:	7082      	strb	r2, [r0, #2]
100539e6:	0a0a      	lsrs	r2, r1, #8
100539e8:	7042      	strb	r2, [r0, #1]
100539ea:	7001      	strb	r1, [r0, #0]
100539ec:	1e59      	subs	r1, r3, #1
100539ee:	7101      	strb	r1, [r0, #4]
100539f0:	0a0a      	lsrs	r2, r1, #8
100539f2:	7142      	strb	r2, [r0, #5]
100539f4:	89a5      	ldrh	r5, [r4, #12]
100539f6:	1d83      	adds	r3, r0, #6
100539f8:	b28a      	uxth	r2, r1
100539fa:	1c68      	adds	r0, r5, #1
100539fc:	b281      	uxth	r1, r0
100539fe:	4620      	mov	r0, r4
10053a00:	f7ff f8f4 	bl	10052bec <ACL_pkt_read>
10053a04:	bdb0      	pop	{r4, r5, r7, pc}

10053a06 <hci_rx_acl_data_event_copy>:
10053a06:	b5b0      	push	{r4, r5, r7, lr}
10053a08:	4614      	mov	r4, r2
10053a0a:	9a04      	ldr	r2, [sp, #16]
10053a0c:	70c2      	strb	r2, [r0, #3]
10053a0e:	7041      	strb	r1, [r0, #1]
10053a10:	0a15      	lsrs	r5, r2, #8
10053a12:	7105      	strb	r5, [r0, #4]
10053a14:	250f      	movs	r5, #15
10053a16:	022d      	lsls	r5, r5, #8
10053a18:	400d      	ands	r5, r1
10053a1a:	07a1      	lsls	r1, r4, #30
10053a1c:	0c89      	lsrs	r1, r1, #18
10053a1e:	1949      	adds	r1, r1, r5
10053a20:	039b      	lsls	r3, r3, #14
10053a22:	18c9      	adds	r1, r1, r3
10053a24:	0a09      	lsrs	r1, r1, #8
10053a26:	7081      	strb	r1, [r0, #2]
10053a28:	1d43      	adds	r3, r0, #5
10053a2a:	9805      	ldr	r0, [sp, #20]
10053a2c:	2100      	movs	r1, #0
10053a2e:	f7ff f8dd 	bl	10052bec <ACL_pkt_read>
10053a32:	bdb0      	pop	{r4, r5, r7, pc}

10053a34 <aci_l2cap_proc_timeout_event_copy>:
10053a34:	7001      	strb	r1, [r0, #0]
10053a36:	2200      	movs	r2, #0
10053a38:	7082      	strb	r2, [r0, #2]
10053a3a:	0a09      	lsrs	r1, r1, #8
10053a3c:	7041      	strb	r1, [r0, #1]
10053a3e:	4770      	bx	lr

10053a40 <hci_le_enhanced_connection_complete_v2_event_int_cb_ucfg_weak>:
10053a40:	2000      	movs	r0, #0
10053a42:	4770      	bx	lr

10053a44 <hci_hardware_error_event_cb>:
10053a44:	b5e0      	push	{r5, r6, r7, lr}
10053a46:	aa01      	add	r2, sp, #4
10053a48:	70d0      	strb	r0, [r2, #3]
10053a4a:	2001      	movs	r0, #1
10053a4c:	7090      	strb	r0, [r2, #2]
10053a4e:	2010      	movs	r0, #16
10053a50:	7050      	strb	r0, [r2, #1]
10053a52:	2104      	movs	r1, #4
10053a54:	7011      	strb	r1, [r2, #0]
10053a56:	4610      	mov	r0, r2
10053a58:	f7fd fd18 	bl	1005148c <BLE_STACK_Event>
10053a5c:	bd8c      	pop	{r2, r3, r7, pc}

10053a5e <GAP_enable_disable_scan_ucfg_weak>:
10053a5e:	2000      	movs	r0, #0
10053a60:	4770      	bx	lr

10053a62 <GAP_discover_peer_name_ucfg_weak>:
10053a62:	2000      	movs	r0, #0
10053a64:	4770      	bx	lr
	...

10053a68 <GAP_name_disc_proc_connected_check>:
10053a68:	b51c      	push	{r2, r3, r4, lr}
10053a6a:	4811      	ldr	r0, [pc, #68]	@ (10053ab0 <__arm_cp.18_0>)
10053a6c:	6804      	ldr	r4, [r0, #0]
10053a6e:	f7ff fff8 	bl	10053a62 <GAP_discover_peer_name_ucfg_weak>
10053a72:	2888      	cmp	r0, #136	@ 0x88
10053a74:	d007      	beq.n	10053a86 <GAP_name_disc_proc_connected_check+0x1e>
10053a76:	280c      	cmp	r0, #12
10053a78:	d005      	beq.n	10053a86 <GAP_name_disc_proc_connected_check+0x1e>
10053a7a:	345d      	adds	r4, #93	@ 0x5d
10053a7c:	2800      	cmp	r0, #0
10053a7e:	d108      	bne.n	10053a92 <GAP_name_disc_proc_connected_check+0x2a>
10053a80:	2002      	movs	r0, #2
10053a82:	7060      	strb	r0, [r4, #1]
10053a84:	bd1c      	pop	{r2, r3, r4, pc}
10053a86:	2005      	movs	r0, #5
10053a88:	f00e fd16 	bl	100624b8 <tsk_notify_idx>
10053a8c:	f7f0 f845 	bl	10043b1a <BLE_STACK_ProcessRequest>
10053a90:	bd1c      	pop	{r2, r3, r4, pc}
10053a92:	2000      	movs	r0, #0
10053a94:	7060      	strb	r0, [r4, #1]
10053a96:	7820      	ldrb	r0, [r4, #0]
10053a98:	217f      	movs	r1, #127	@ 0x7f
10053a9a:	4001      	ands	r1, r0
10053a9c:	7021      	strb	r1, [r4, #0]
10053a9e:	a901      	add	r1, sp, #4
10053aa0:	2086      	movs	r0, #134	@ 0x86
10053aa2:	7048      	strb	r0, [r1, #1]
10053aa4:	2080      	movs	r0, #128	@ 0x80
10053aa6:	7008      	strb	r0, [r1, #0]
10053aa8:	2002      	movs	r0, #2
10053aaa:	f000 f9c1 	bl	10053e30 <aci_gap_proc_complete_event_wrapper>
10053aae:	bd1c      	pop	{r2, r3, r4, pc}

10053ab0 <__arm_cp.18_0>:
10053ab0:	200010a8 	.word	0x200010a8

10053ab4 <GAP_central_connection_complete_handler_ucfg_weak>:
10053ab4:	4770      	bx	lr

10053ab6 <GAP_DiscProcTimeoutcb_ucfg_weak>:
10053ab6:	4770      	bx	lr

10053ab8 <GAP_started_gatt_proc>:
10053ab8:	4907      	ldr	r1, [pc, #28]	@ (10053ad8 <__arm_cp.28_0>)
10053aba:	6809      	ldr	r1, [r1, #0]
10053abc:	225d      	movs	r2, #93	@ 0x5d
10053abe:	5c8a      	ldrb	r2, [r1, r2]
10053ac0:	2388      	movs	r3, #136	@ 0x88
10053ac2:	421a      	tst	r2, r3
10053ac4:	d004      	beq.n	10053ad0 <GAP_started_gatt_proc+0x18>
10053ac6:	3172      	adds	r1, #114	@ 0x72
10053ac8:	8809      	ldrh	r1, [r1, #0]
10053aca:	4041      	eors	r1, r0
10053acc:	0508      	lsls	r0, r1, #20
10053ace:	d001      	beq.n	10053ad4 <GAP_started_gatt_proc+0x1c>
10053ad0:	2000      	movs	r0, #0
10053ad2:	4770      	bx	lr
10053ad4:	2001      	movs	r0, #1
10053ad6:	4770      	bx	lr

10053ad8 <__arm_cp.28_0>:
10053ad8:	200010a8 	.word	0x200010a8

10053adc <gap_timers_callback_wrapper>:
10053adc:	b580      	push	{r7, lr}
10053ade:	6940      	ldr	r0, [r0, #20]
10053ae0:	4901      	ldr	r1, [pc, #4]	@ (10053ae8 <__arm_cp.0_0>)
10053ae2:	f00e fe20 	bl	10062726 <cst_sharedCallback>
10053ae6:	bd80      	pop	{r7, pc}

10053ae8 <__arm_cp.0_0>:
10053ae8:	10053aed 	.word	0x10053aed

10053aec <gap_timers_callback>:
10053aec:	b580      	push	{r7, lr}
10053aee:	2802      	cmp	r0, #2
10053af0:	d007      	beq.n	10053b02 <gap_timers_callback+0x16>
10053af2:	2801      	cmp	r0, #1
10053af4:	d009      	beq.n	10053b0a <gap_timers_callback+0x1e>
10053af6:	2800      	cmp	r0, #0
10053af8:	d106      	bne.n	10053b08 <gap_timers_callback+0x1c>
10053afa:	2000      	movs	r0, #0
10053afc:	f7fd fd41 	bl	10051582 <GAP_LimDiscTimeoutcb_ucfg>
10053b00:	bd80      	pop	{r7, pc}
10053b02:	2000      	movs	r0, #0
10053b04:	f7ff ffd7 	bl	10053ab6 <GAP_DiscProcTimeoutcb_ucfg_weak>
10053b08:	bd80      	pop	{r7, pc}
10053b0a:	2000      	movs	r0, #0
10053b0c:	f000 f802 	bl	10053b14 <GAP_PrivateAddrTimercb>
10053b10:	bd80      	pop	{r7, pc}
	...

10053b14 <GAP_PrivateAddrTimercb>:
10053b14:	b5f0      	push	{r4, r5, r6, r7, lr}
10053b16:	b087      	sub	sp, #28
10053b18:	4831      	ldr	r0, [pc, #196]	@ (10053be0 <__arm_cp.2_0>)
10053b1a:	6804      	ldr	r4, [r0, #0]
10053b1c:	a906      	add	r1, sp, #24
10053b1e:	9104      	str	r1, [sp, #16]
10053b20:	2000      	movs	r0, #0
10053b22:	9001      	str	r0, [sp, #4]
10053b24:	7008      	strb	r0, [r1, #0]
10053b26:	ae05      	add	r6, sp, #20
10053b28:	2001      	movs	r0, #1
10053b2a:	7030      	strb	r0, [r6, #0]
10053b2c:	f000 f952 	bl	10053dd4 <GAP_reset_privacy_timer>
10053b30:	205d      	movs	r0, #93	@ 0x5d
10053b32:	9403      	str	r4, [sp, #12]
10053b34:	5c27      	ldrb	r7, [r4, r0]
10053b36:	1e78      	subs	r0, r7, #1
10053b38:	463d      	mov	r5, r7
10053b3a:	4185      	sbcs	r5, r0
10053b3c:	2020      	movs	r0, #32
10053b3e:	4038      	ands	r0, r7
10053b40:	4244      	negs	r4, r0
10053b42:	9002      	str	r0, [sp, #8]
10053b44:	4144      	adcs	r4, r0
10053b46:	9804      	ldr	r0, [sp, #16]
10053b48:	4631      	mov	r1, r6
10053b4a:	f000 fd2b 	bl	100545a4 <GAP_check_adv_status>
10053b4e:	2f00      	cmp	r7, #0
10053b50:	d101      	bne.n	10053b56 <GAP_PrivateAddrTimercb+0x42>
10053b52:	2801      	cmp	r0, #1
10053b54:	d13e      	bne.n	10053bd4 <GAP_PrivateAddrTimercb+0xc0>
10053b56:	402c      	ands	r4, r5
10053b58:	d138      	bne.n	10053bcc <GAP_PrivateAddrTimercb+0xb8>
10053b5a:	a805      	add	r0, sp, #20
10053b5c:	7800      	ldrb	r0, [r0, #0]
10053b5e:	2800      	cmp	r0, #0
10053b60:	d034      	beq.n	10053bcc <GAP_PrivateAddrTimercb+0xb8>
10053b62:	9c03      	ldr	r4, [sp, #12]
10053b64:	4620      	mov	r0, r4
10053b66:	305d      	adds	r0, #93	@ 0x5d
10053b68:	7bc0      	ldrb	r0, [r0, #15]
10053b6a:	2800      	cmp	r0, #0
10053b6c:	d034      	beq.n	10053bd8 <GAP_PrivateAddrTimercb+0xc4>
10053b6e:	3428      	adds	r4, #40	@ 0x28
10053b70:	9d02      	ldr	r5, [sp, #8]
10053b72:	2d00      	cmp	r5, #0
10053b74:	d003      	beq.n	10053b7e <GAP_PrivateAddrTimercb+0x6a>
10053b76:	7821      	ldrb	r1, [r4, #0]
10053b78:	2000      	movs	r0, #0
10053b7a:	f7ff ff70 	bl	10053a5e <GAP_enable_disable_scan_ucfg_weak>
10053b7e:	a806      	add	r0, sp, #24
10053b80:	7800      	ldrb	r0, [r0, #0]
10053b82:	2801      	cmp	r0, #1
10053b84:	d102      	bne.n	10053b8c <GAP_PrivateAddrTimercb+0x78>
10053b86:	2000      	movs	r0, #0
10053b88:	f000 fcd0 	bl	1005452c <GAP_suspend_resume_active_advertising_sets_ucfg_weak>
10053b8c:	f000 faf0 	bl	10054170 <GAP_generate_new_rpa>
10053b90:	2800      	cmp	r0, #0
10053b92:	d104      	bne.n	10053b9e <GAP_PrivateAddrTimercb+0x8a>
10053b94:	2000      	movs	r0, #0
10053b96:	2101      	movs	r1, #1
10053b98:	f000 fac2 	bl	10054120 <GAP_start_privacy_timer>
10053b9c:	9001      	str	r0, [sp, #4]
10053b9e:	2d00      	cmp	r5, #0
10053ba0:	d00a      	beq.n	10053bb8 <GAP_PrivateAddrTimercb+0xa4>
10053ba2:	7821      	ldrb	r1, [r4, #0]
10053ba4:	2001      	movs	r0, #1
10053ba6:	f7ff ff5a 	bl	10053a5e <GAP_enable_disable_scan_ucfg_weak>
10053baa:	2800      	cmp	r0, #0
10053bac:	d004      	beq.n	10053bb8 <GAP_PrivateAddrTimercb+0xa4>
10053bae:	9801      	ldr	r0, [sp, #4]
10053bb0:	2800      	cmp	r0, #0
10053bb2:	d001      	beq.n	10053bb8 <GAP_PrivateAddrTimercb+0xa4>
10053bb4:	f000 fa20 	bl	10053ff8 <GAP_stop_privacy_timer>
10053bb8:	a806      	add	r0, sp, #24
10053bba:	7800      	ldrb	r0, [r0, #0]
10053bbc:	2801      	cmp	r0, #1
10053bbe:	d109      	bne.n	10053bd4 <GAP_PrivateAddrTimercb+0xc0>
10053bc0:	2006      	movs	r0, #6
10053bc2:	f00e fc79 	bl	100624b8 <tsk_notify_idx>
10053bc6:	f7ef ffa8 	bl	10043b1a <BLE_STACK_ProcessRequest>
10053bca:	e003      	b.n	10053bd4 <GAP_PrivateAddrTimercb+0xc0>
10053bcc:	2001      	movs	r0, #1
10053bce:	4601      	mov	r1, r0
10053bd0:	f000 faa6 	bl	10054120 <GAP_start_privacy_timer>
10053bd4:	b007      	add	sp, #28
10053bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10053bd8:	2000      	movs	r0, #0
10053bda:	2101      	movs	r1, #1
10053bdc:	e7f8      	b.n	10053bd0 <GAP_PrivateAddrTimercb+0xbc>
10053bde:	46c0      	nop			@ (mov r8, r8)

10053be0 <__arm_cp.2_0>:
10053be0:	200010a8 	.word	0x200010a8

10053be4 <GAP_init_context>:
10053be4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10053be6:	461f      	mov	r7, r3
10053be8:	9201      	str	r2, [sp, #4]
10053bea:	9102      	str	r1, [sp, #8]
10053bec:	4605      	mov	r5, r0
10053bee:	2401      	movs	r4, #1
10053bf0:	2178      	movs	r1, #120	@ 0x78
10053bf2:	4620      	mov	r0, r4
10053bf4:	f00b fc5a 	bl	1005f4ac <csmem_mem_0_assign>
10053bf8:	21e1      	movs	r1, #225	@ 0xe1
10053bfa:	0089      	lsls	r1, r1, #2
10053bfc:	225a      	movs	r2, #90	@ 0x5a
10053bfe:	5281      	strh	r1, [r0, r2]
10053c00:	4e24      	ldr	r6, [pc, #144]	@ (10053c94 <__arm_cp.3_0>)
10053c02:	6030      	str	r0, [r6, #0]
10053c04:	2d01      	cmp	r5, #1
10053c06:	d117      	bne.n	10053c38 <GAP_init_context+0x54>
10053c08:	2001      	movs	r0, #1
10053c0a:	2106      	movs	r1, #6
10053c0c:	f00b fc4e 	bl	1005f4ac <csmem_mem_0_assign>
10053c10:	4601      	mov	r1, r0
10053c12:	6830      	ldr	r0, [r6, #0]
10053c14:	6381      	str	r1, [r0, #56]	@ 0x38
10053c16:	2f01      	cmp	r7, #1
10053c18:	d10e      	bne.n	10053c38 <GAP_init_context+0x54>
10053c1a:	2501      	movs	r5, #1
10053c1c:	270e      	movs	r7, #14
10053c1e:	4628      	mov	r0, r5
10053c20:	4639      	mov	r1, r7
10053c22:	f00b fc43 	bl	1005f4ac <csmem_mem_0_assign>
10053c26:	6831      	ldr	r1, [r6, #0]
10053c28:	64c8      	str	r0, [r1, #76]	@ 0x4c
10053c2a:	4628      	mov	r0, r5
10053c2c:	4639      	mov	r1, r7
10053c2e:	f00b fc3d 	bl	1005f4ac <csmem_mem_0_assign>
10053c32:	4601      	mov	r1, r0
10053c34:	6830      	ldr	r0, [r6, #0]
10053c36:	6501      	str	r1, [r0, #80]	@ 0x50
10053c38:	9902      	ldr	r1, [sp, #8]
10053c3a:	2901      	cmp	r1, #1
10053c3c:	d10b      	bne.n	10053c56 <GAP_init_context+0x72>
10053c3e:	9801      	ldr	r0, [sp, #4]
10053c40:	2801      	cmp	r0, #1
10053c42:	d105      	bne.n	10053c50 <GAP_init_context+0x6c>
10053c44:	201c      	movs	r0, #28
10053c46:	2101      	movs	r1, #1
10053c48:	f00b fc30 	bl	1005f4ac <csmem_mem_0_assign>
10053c4c:	6831      	ldr	r1, [r6, #0]
10053c4e:	62c8      	str	r0, [r1, #44]	@ 0x2c
10053c50:	4811      	ldr	r0, [pc, #68]	@ (10053c98 <__arm_cp.3_1>)
10053c52:	7e84      	ldrb	r4, [r0, #26]
10053c54:	e001      	b.n	10053c5a <GAP_init_context+0x76>
10053c56:	2100      	movs	r1, #0
10053c58:	62c1      	str	r1, [r0, #44]	@ 0x2c
10053c5a:	2114      	movs	r1, #20
10053c5c:	4620      	mov	r0, r4
10053c5e:	f00b fc25 	bl	1005f4ac <csmem_mem_0_assign>
10053c62:	6831      	ldr	r1, [r6, #0]
10053c64:	6548      	str	r0, [r1, #84]	@ 0x54
10053c66:	4c0d      	ldr	r4, [pc, #52]	@ (10053c9c <__arm_cp.3_2>)
10053c68:	2104      	movs	r1, #4
10053c6a:	2201      	movs	r2, #1
10053c6c:	4620      	mov	r0, r4
10053c6e:	f00b fc0b 	bl	1005f488 <csmem_mem_assign>
10053c72:	6831      	ldr	r1, [r6, #0]
10053c74:	6208      	str	r0, [r1, #32]
10053c76:	2503      	movs	r5, #3
10053c78:	2202      	movs	r2, #2
10053c7a:	4620      	mov	r0, r4
10053c7c:	4629      	mov	r1, r5
10053c7e:	f00b fc03 	bl	1005f488 <csmem_mem_assign>
10053c82:	6831      	ldr	r1, [r6, #0]
10053c84:	6248      	str	r0, [r1, #36]	@ 0x24
10053c86:	4a06      	ldr	r2, [pc, #24]	@ (10053ca0 <__arm_cp.3_3>)
10053c88:	2307      	movs	r3, #7
10053c8a:	4608      	mov	r0, r1
10053c8c:	4629      	mov	r1, r5
10053c8e:	f00e fc71 	bl	10062574 <CST_init>
10053c92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10053c94 <__arm_cp.3_0>:
10053c94:	200010a8 	.word	0x200010a8

10053c98 <__arm_cp.3_1>:
10053c98:	20001108 	.word	0x20001108

10053c9c <__arm_cp.3_2>:
10053c9c:	20001104 	.word	0x20001104

10053ca0 <__arm_cp.3_3>:
10053ca0:	10053add 	.word	0x10053add

10053ca4 <GAP_get_default_le_event_mask>:
10053ca4:	b5b0      	push	{r4, r5, r7, lr}
10053ca6:	4604      	mov	r4, r0
10053ca8:	2100      	movs	r1, #0
10053caa:	2508      	movs	r5, #8
10053cac:	462a      	mov	r2, r5
10053cae:	f7f2 f9e1 	bl	10046074 <BLEPLAT_MemSet>
10053cb2:	7820      	ldrb	r0, [r4, #0]
10053cb4:	21df      	movs	r1, #223	@ 0xdf
10053cb6:	4301      	orrs	r1, r0
10053cb8:	7021      	strb	r1, [r4, #0]
10053cba:	7860      	ldrb	r0, [r4, #1]
10053cbc:	2109      	movs	r1, #9
10053cbe:	4301      	orrs	r1, r0
10053cc0:	7061      	strb	r1, [r4, #1]
10053cc2:	78a1      	ldrb	r1, [r4, #2]
10053cc4:	4329      	orrs	r1, r5
10053cc6:	70a1      	strb	r1, [r4, #2]
10053cc8:	4911      	ldr	r1, [pc, #68]	@ (10053d10 <__arm_cp.4_0>)
10053cca:	6809      	ldr	r1, [r1, #0]
10053ccc:	225c      	movs	r2, #92	@ 0x5c
10053cce:	5c89      	ldrb	r1, [r1, r2]
10053cd0:	0689      	lsls	r1, r1, #26
10053cd2:	d502      	bpl.n	10053cda <GAP_get_default_le_event_mask+0x36>
10053cd4:	210f      	movs	r1, #15
10053cd6:	4308      	orrs	r0, r1
10053cd8:	7060      	strb	r0, [r4, #1]
10053cda:	f00a fc5c 	bl	1005e596 <ext_adv_scan_enabled_ucfg_weak>
10053cde:	2801      	cmp	r0, #1
10053ce0:	d107      	bne.n	10053cf2 <GAP_get_default_le_event_mask+0x4e>
10053ce2:	7860      	ldrb	r0, [r4, #1]
10053ce4:	2112      	movs	r1, #18
10053ce6:	4301      	orrs	r1, r0
10053ce8:	7061      	strb	r1, [r4, #1]
10053cea:	78a0      	ldrb	r0, [r4, #2]
10053cec:	2107      	movs	r1, #7
10053cee:	4301      	orrs	r1, r0
10053cf0:	70a1      	strb	r1, [r4, #2]
10053cf2:	f005 fedd 	bl	10059ab0 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10053cf6:	b2c0      	uxtb	r0, r0
10053cf8:	2801      	cmp	r0, #1
10053cfa:	d107      	bne.n	10053d0c <GAP_get_default_le_event_mask+0x68>
10053cfc:	7860      	ldrb	r0, [r4, #1]
10053cfe:	21e0      	movs	r1, #224	@ 0xe0
10053d00:	4301      	orrs	r1, r0
10053d02:	7061      	strb	r1, [r4, #1]
10053d04:	78a0      	ldrb	r0, [r4, #2]
10053d06:	2180      	movs	r1, #128	@ 0x80
10053d08:	4301      	orrs	r1, r0
10053d0a:	70a1      	strb	r1, [r4, #2]
10053d0c:	bdb0      	pop	{r4, r5, r7, pc}
10053d0e:	46c0      	nop			@ (mov r8, r8)

10053d10 <__arm_cp.4_0>:
10053d10:	200010a8 	.word	0x200010a8

10053d14 <gap_extended_adv_scan_supported>:
10053d14:	b580      	push	{r7, lr}
10053d16:	f00a fc3e 	bl	1005e596 <ext_adv_scan_enabled_ucfg_weak>
10053d1a:	bd80      	pop	{r7, pc}

10053d1c <GAP_Init>:
10053d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
10053d1e:	b087      	sub	sp, #28
10053d20:	4606      	mov	r6, r0
10053d22:	a806      	add	r0, sp, #24
10053d24:	2700      	movs	r7, #0
10053d26:	7007      	strb	r7, [r0, #0]
10053d28:	2412      	movs	r4, #18
10053d2a:	2901      	cmp	r1, #1
10053d2c:	d901      	bls.n	10053d32 <GAP_Init+0x16>
10053d2e:	4620      	mov	r0, r4
10053d30:	e04a      	b.n	10053dc8 <GAP_Init+0xac>
10053d32:	460d      	mov	r5, r1
10053d34:	4825      	ldr	r0, [pc, #148]	@ (10053dcc <__arm_cp.7_0>)
10053d36:	6800      	ldr	r0, [r0, #0]
10053d38:	9002      	str	r0, [sp, #8]
10053d3a:	f00e fef9 	bl	10062b30 <IDD_Initialize_Device_IDs>
10053d3e:	2800      	cmp	r0, #0
10053d40:	d142      	bne.n	10053dc8 <GAP_Init+0xac>
10053d42:	9902      	ldr	r1, [sp, #8]
10053d44:	315c      	adds	r1, #92	@ 0x5c
10053d46:	7808      	ldrb	r0, [r1, #0]
10053d48:	07c0      	lsls	r0, r0, #31
10053d4a:	d111      	bne.n	10053d70 <GAP_Init+0x54>
10053d4c:	78c8      	ldrb	r0, [r1, #3]
10053d4e:	4328      	orrs	r0, r5
10053d50:	9101      	str	r1, [sp, #4]
10053d52:	70c8      	strb	r0, [r1, #3]
10053d54:	a805      	add	r0, sp, #20
10053d56:	2107      	movs	r1, #7
10053d58:	7001      	strb	r1, [r0, #0]
10053d5a:	2e00      	cmp	r6, #0
10053d5c:	d012      	beq.n	10053d84 <GAP_Init+0x68>
10053d5e:	2e02      	cmp	r6, #2
10053d60:	d008      	beq.n	10053d74 <GAP_Init+0x58>
10053d62:	2e01      	cmp	r6, #1
10053d64:	4620      	mov	r0, r4
10053d66:	d12f      	bne.n	10053dc8 <GAP_Init+0xac>
10053d68:	a806      	add	r0, sp, #24
10053d6a:	2110      	movs	r1, #16
10053d6c:	7001      	strb	r1, [r0, #0]
10053d6e:	e009      	b.n	10053d84 <GAP_Init+0x68>
10053d70:	200c      	movs	r0, #12
10053d72:	e029      	b.n	10053dc8 <GAP_Init+0xac>
10053d74:	a806      	add	r0, sp, #24
10053d76:	2120      	movs	r1, #32
10053d78:	7001      	strb	r1, [r0, #0]
10053d7a:	a905      	add	r1, sp, #20
10053d7c:	f000 f996 	bl	100540ac <GAP_enable_controller_privacy_ucfg_weak>
10053d80:	2800      	cmp	r0, #0
10053d82:	d121      	bne.n	10053dc8 <GAP_Init+0xac>
10053d84:	4628      	mov	r0, r5
10053d86:	f000 f9c9 	bl	1005411c <GAP_init_advertising_sets_ucfg_weak>
10053d8a:	2800      	cmp	r0, #0
10053d8c:	d11c      	bne.n	10053dc8 <GAP_Init+0xac>
10053d8e:	9802      	ldr	r0, [sp, #8]
10053d90:	3060      	adds	r0, #96	@ 0x60
10053d92:	f000 f9bf 	bl	10054114 <GAP_set_controller_random_address_ucfg_weak>
10053d96:	2800      	cmp	r0, #0
10053d98:	d116      	bne.n	10053dc8 <GAP_Init+0xac>
10053d9a:	9806      	ldr	r0, [sp, #24]
10053d9c:	2101      	movs	r1, #1
10053d9e:	9a01      	ldr	r2, [sp, #4]
10053da0:	7411      	strb	r1, [r2, #16]
10053da2:	4308      	orrs	r0, r1
10053da4:	7010      	strb	r0, [r2, #0]
10053da6:	f000 f815 	bl	10053dd4 <GAP_reset_privacy_timer>
10053daa:	ac03      	add	r4, sp, #12
10053dac:	4620      	mov	r0, r4
10053dae:	f7ff ff79 	bl	10053ca4 <GAP_get_default_le_event_mask>
10053db2:	4620      	mov	r0, r4
10053db4:	f003 fab2 	bl	1005731c <hci_le_set_event_mask>
10053db8:	43f8      	mvns	r0, r7
10053dba:	9003      	str	r0, [sp, #12]
10053dbc:	4804      	ldr	r0, [pc, #16]	@ (10053dd0 <__arm_cp.7_1>)
10053dbe:	9004      	str	r0, [sp, #16]
10053dc0:	4620      	mov	r0, r4
10053dc2:	f003 fa9b 	bl	100572fc <hci_set_event_mask>
10053dc6:	4638      	mov	r0, r7
10053dc8:	b007      	add	sp, #28
10053dca:	bdf0      	pop	{r4, r5, r6, r7, pc}

10053dcc <__arm_cp.7_0>:
10053dcc:	200010a8 	.word	0x200010a8

10053dd0 <__arm_cp.7_1>:
10053dd0:	20009fff 	.word	0x20009fff

10053dd4 <GAP_reset_privacy_timer>:
10053dd4:	4806      	ldr	r0, [pc, #24]	@ (10053df0 <__arm_cp.8_0>)
10053dd6:	6800      	ldr	r0, [r0, #0]
10053dd8:	215c      	movs	r1, #92	@ 0x5c
10053dda:	5c41      	ldrb	r1, [r0, r1]
10053ddc:	0689      	lsls	r1, r1, #26
10053dde:	0f89      	lsrs	r1, r1, #30
10053de0:	d004      	beq.n	10053dec <GAP_reset_privacy_timer+0x18>
10053de2:	305c      	adds	r0, #92	@ 0x5c
10053de4:	78c1      	ldrb	r1, [r0, #3]
10053de6:	2202      	movs	r2, #2
10053de8:	430a      	orrs	r2, r1
10053dea:	70c2      	strb	r2, [r0, #3]
10053dec:	4770      	bx	lr
10053dee:	46c0      	nop			@ (mov r8, r8)

10053df0 <__arm_cp.8_0>:
10053df0:	200010a8 	.word	0x200010a8

10053df4 <GAP_internal_evt_handler>:
10053df4:	b5b0      	push	{r4, r5, r7, lr}
10053df6:	285c      	cmp	r0, #92	@ 0x5c
10053df8:	d106      	bne.n	10053e08 <GAP_internal_evt_handler+0x14>
10053dfa:	480c      	ldr	r0, [pc, #48]	@ (10053e2c <__arm_cp.12_0>)
10053dfc:	6804      	ldr	r4, [r0, #0]
10053dfe:	345d      	adds	r4, #93	@ 0x5d
10053e00:	2500      	movs	r5, #0
10053e02:	5760      	ldrsb	r0, [r4, r5]
10053e04:	2800      	cmp	r0, #0
10053e06:	d400      	bmi.n	10053e0a <GAP_internal_evt_handler+0x16>
10053e08:	bdb0      	pop	{r4, r5, r7, pc}
10053e0a:	7860      	ldrb	r0, [r4, #1]
10053e0c:	2802      	cmp	r0, #2
10053e0e:	d1fb      	bne.n	10053e08 <GAP_internal_evt_handler+0x14>
10053e10:	7055      	strb	r5, [r2, #1]
10053e12:	2080      	movs	r0, #128	@ 0x80
10053e14:	7010      	strb	r0, [r2, #0]
10053e16:	b2c8      	uxtb	r0, r1
10053e18:	4611      	mov	r1, r2
10053e1a:	f000 f809 	bl	10053e30 <aci_gap_proc_complete_event_wrapper>
10053e1e:	7065      	strb	r5, [r4, #1]
10053e20:	7820      	ldrb	r0, [r4, #0]
10053e22:	217f      	movs	r1, #127	@ 0x7f
10053e24:	4001      	ands	r1, r0
10053e26:	7021      	strb	r1, [r4, #0]
10053e28:	bdb0      	pop	{r4, r5, r7, pc}
10053e2a:	46c0      	nop			@ (mov r8, r8)

10053e2c <__arm_cp.12_0>:
10053e2c:	200010a8 	.word	0x200010a8

10053e30 <aci_gap_proc_complete_event_wrapper>:
10053e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10053e32:	2900      	cmp	r1, #0
10053e34:	d016      	beq.n	10053e64 <aci_gap_proc_complete_event_wrapper+0x34>
10053e36:	460e      	mov	r6, r1
10053e38:	4605      	mov	r5, r0
10053e3a:	7809      	ldrb	r1, [r1, #0]
10053e3c:	2400      	movs	r4, #0
10053e3e:	07c8      	lsls	r0, r1, #31
10053e40:	4620      	mov	r0, r4
10053e42:	d11f      	bne.n	10053e84 <aci_gap_proc_complete_event_wrapper+0x54>
10053e44:	0788      	lsls	r0, r1, #30
10053e46:	d40f      	bmi.n	10053e68 <aci_gap_proc_complete_event_wrapper+0x38>
10053e48:	0748      	lsls	r0, r1, #29
10053e4a:	d40f      	bmi.n	10053e6c <aci_gap_proc_complete_event_wrapper+0x3c>
10053e4c:	0708      	lsls	r0, r1, #28
10053e4e:	d40f      	bmi.n	10053e70 <aci_gap_proc_complete_event_wrapper+0x40>
10053e50:	06c8      	lsls	r0, r1, #27
10053e52:	d40f      	bmi.n	10053e74 <aci_gap_proc_complete_event_wrapper+0x44>
10053e54:	0688      	lsls	r0, r1, #26
10053e56:	d40f      	bmi.n	10053e78 <aci_gap_proc_complete_event_wrapper+0x48>
10053e58:	0648      	lsls	r0, r1, #25
10053e5a:	d40f      	bmi.n	10053e7c <aci_gap_proc_complete_event_wrapper+0x4c>
10053e5c:	0608      	lsls	r0, r1, #24
10053e5e:	d50f      	bpl.n	10053e80 <aci_gap_proc_complete_event_wrapper+0x50>
10053e60:	2007      	movs	r0, #7
10053e62:	e00f      	b.n	10053e84 <aci_gap_proc_complete_event_wrapper+0x54>
10053e64:	2412      	movs	r4, #18
10053e66:	e03c      	b.n	10053ee2 <aci_gap_proc_complete_event_wrapper+0xb2>
10053e68:	2001      	movs	r0, #1
10053e6a:	e00b      	b.n	10053e84 <aci_gap_proc_complete_event_wrapper+0x54>
10053e6c:	2002      	movs	r0, #2
10053e6e:	e009      	b.n	10053e84 <aci_gap_proc_complete_event_wrapper+0x54>
10053e70:	2003      	movs	r0, #3
10053e72:	e007      	b.n	10053e84 <aci_gap_proc_complete_event_wrapper+0x54>
10053e74:	2004      	movs	r0, #4
10053e76:	e005      	b.n	10053e84 <aci_gap_proc_complete_event_wrapper+0x54>
10053e78:	2005      	movs	r0, #5
10053e7a:	e003      	b.n	10053e84 <aci_gap_proc_complete_event_wrapper+0x54>
10053e7c:	2006      	movs	r0, #6
10053e7e:	e001      	b.n	10053e84 <aci_gap_proc_complete_event_wrapper+0x54>
10053e80:	2000      	movs	r0, #0
10053e82:	43c0      	mvns	r0, r0
10053e84:	7030      	strb	r0, [r6, #0]
10053e86:	4818      	ldr	r0, [pc, #96]	@ (10053ee8 <__arm_cp.13_0>)
10053e88:	6800      	ldr	r0, [r0, #0]
10053e8a:	214e      	movs	r1, #78	@ 0x4e
10053e8c:	5640      	ldrsb	r0, [r0, r1]
10053e8e:	2800      	cmp	r0, #0
10053e90:	d527      	bpl.n	10053ee2 <aci_gap_proc_complete_event_wrapper+0xb2>
10053e92:	4816      	ldr	r0, [pc, #88]	@ (10053eec <__arm_cp.13_1>)
10053e94:	1828      	adds	r0, r5, r0
10053e96:	2103      	movs	r1, #3
10053e98:	4301      	orrs	r1, r0
10053e9a:	310d      	adds	r1, #13
10053e9c:	0888      	lsrs	r0, r1, #2
10053e9e:	b283      	uxth	r3, r0
10053ea0:	4813      	ldr	r0, [pc, #76]	@ (10053ef0 <__arm_cp.13_2>)
10053ea2:	6800      	ldr	r0, [r0, #0]
10053ea4:	6980      	ldr	r0, [r0, #24]
10053ea6:	2102      	movs	r1, #2
10053ea8:	2247      	movs	r2, #71	@ 0x47
10053eaa:	f7ff f845 	bl	10052f38 <aci_event_fifo_push_header>
10053eae:	2800      	cmp	r0, #0
10053eb0:	d016      	beq.n	10053ee0 <aci_gap_proc_complete_event_wrapper+0xb0>
10053eb2:	4607      	mov	r7, r0
10053eb4:	1d00      	adds	r0, r0, #4
10053eb6:	4629      	mov	r1, r5
10053eb8:	4632      	mov	r2, r6
10053eba:	f7ff fb78 	bl	100535ae <aci_gap_proc_complete_event_copy>
10053ebe:	2004      	movs	r0, #4
10053ec0:	7278      	strb	r0, [r7, #9]
10053ec2:	2007      	movs	r0, #7
10053ec4:	7238      	strb	r0, [r7, #8]
10053ec6:	1ce8      	adds	r0, r5, #3
10053ec8:	0a01      	lsrs	r1, r0, #8
10053eca:	71f9      	strb	r1, [r7, #7]
10053ecc:	71b8      	strb	r0, [r7, #6]
10053ece:	20ff      	movs	r0, #255	@ 0xff
10053ed0:	7178      	strb	r0, [r7, #5]
10053ed2:	2082      	movs	r0, #130	@ 0x82
10053ed4:	7138      	strb	r0, [r7, #4]
10053ed6:	2002      	movs	r0, #2
10053ed8:	4639      	mov	r1, r7
10053eda:	f7ff f8ca 	bl	10053072 <aci_event_fifo_push>
10053ede:	e000      	b.n	10053ee2 <aci_gap_proc_complete_event_wrapper+0xb2>
10053ee0:	2407      	movs	r4, #7
10053ee2:	4620      	mov	r0, r4
10053ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10053ee6:	46c0      	nop			@ (mov r8, r8)

10053ee8 <__arm_cp.13_0>:
10053ee8:	200010f4 	.word	0x200010f4

10053eec <__arm_cp.13_1>:
10053eec:	0003fffd 	.word	0x0003fffd

10053ef0 <__arm_cp.13_2>:
10053ef0:	200010a4 	.word	0x200010a4

10053ef4 <GAP_LimDiscTimeoutcb>:
10053ef4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10053ef6:	4811      	ldr	r0, [pc, #68]	@ (10053f3c <__arm_cp.15_0>)
10053ef8:	6804      	ldr	r4, [r0, #0]
10053efa:	f00a fb4c 	bl	1005e596 <ext_adv_scan_enabled_ucfg_weak>
10053efe:	2800      	cmp	r0, #0
10053f00:	d002      	beq.n	10053f08 <GAP_LimDiscTimeoutcb+0x14>
10053f02:	480f      	ldr	r0, [pc, #60]	@ (10053f40 <__arm_cp.15_1>)
10053f04:	7e80      	ldrb	r0, [r0, #26]
10053f06:	e000      	b.n	10053f0a <GAP_LimDiscTimeoutcb+0x16>
10053f08:	2001      	movs	r0, #1
10053f0a:	b2c5      	uxtb	r5, r0
10053f0c:	2600      	movs	r6, #0
10053f0e:	2712      	movs	r7, #18
10053f10:	42b5      	cmp	r5, r6
10053f12:	d011      	beq.n	10053f38 <GAP_LimDiscTimeoutcb+0x44>
10053f14:	6d60      	ldr	r0, [r4, #84]	@ 0x54
10053f16:	5dc1      	ldrb	r1, [r0, r7]
10053f18:	2901      	cmp	r1, #1
10053f1a:	d10a      	bne.n	10053f32 <GAP_LimDiscTimeoutcb+0x3e>
10053f1c:	19c0      	adds	r0, r0, r7
10053f1e:	3810      	subs	r0, #16
10053f20:	7800      	ldrb	r0, [r0, #0]
10053f22:	0780      	lsls	r0, r0, #30
10053f24:	d505      	bpl.n	10053f32 <GAP_LimDiscTimeoutcb+0x3e>
10053f26:	aa01      	add	r2, sp, #4
10053f28:	7016      	strb	r6, [r2, #0]
10053f2a:	2000      	movs	r0, #0
10053f2c:	2101      	movs	r1, #1
10053f2e:	f7fe fb45 	bl	100525bc <GAP_set_advertising_enable_ucfg_weak>
10053f32:	3714      	adds	r7, #20
10053f34:	1c76      	adds	r6, r6, #1
10053f36:	e7eb      	b.n	10053f10 <GAP_LimDiscTimeoutcb+0x1c>
10053f38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10053f3a:	46c0      	nop			@ (mov r8, r8)

10053f3c <__arm_cp.15_0>:
10053f3c:	200010a8 	.word	0x200010a8

10053f40 <__arm_cp.15_1>:
10053f40:	20001108 	.word	0x20001108

10053f44 <GAP_stop_discoverability>:
10053f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10053f46:	4604      	mov	r4, r0
10053f48:	2514      	movs	r5, #20
10053f4a:	436c      	muls	r4, r5
10053f4c:	4826      	ldr	r0, [pc, #152]	@ (10053fe8 <__arm_cp.18_0>)
10053f4e:	6806      	ldr	r6, [r0, #0]
10053f50:	6d70      	ldr	r0, [r6, #84]	@ 0x54
10053f52:	1900      	adds	r0, r0, r4
10053f54:	7881      	ldrb	r1, [r0, #2]
10053f56:	0789      	lsls	r1, r1, #30
10053f58:	d401      	bmi.n	10053f5e <GAP_stop_discoverability+0x1a>
10053f5a:	2700      	movs	r7, #0
10053f5c:	e003      	b.n	10053f66 <GAP_stop_discoverability+0x22>
10053f5e:	1c80      	adds	r0, r0, #2
10053f60:	2100      	movs	r1, #0
10053f62:	7001      	strb	r1, [r0, #0]
10053f64:	2701      	movs	r7, #1
10053f66:	f00a fb16 	bl	1005e596 <ext_adv_scan_enabled_ucfg_weak>
10053f6a:	2800      	cmp	r0, #0
10053f6c:	d002      	beq.n	10053f74 <GAP_stop_discoverability+0x30>
10053f6e:	481f      	ldr	r0, [pc, #124]	@ (10053fec <__arm_cp.18_1>)
10053f70:	7e80      	ldrb	r0, [r0, #26]
10053f72:	e000      	b.n	10053f76 <GAP_stop_discoverability+0x32>
10053f74:	2001      	movs	r0, #1
10053f76:	b2c0      	uxtb	r0, r0
10053f78:	4345      	muls	r5, r0
10053f7a:	2000      	movs	r0, #0
10053f7c:	4285      	cmp	r5, r0
10053f7e:	d007      	beq.n	10053f90 <GAP_stop_discoverability+0x4c>
10053f80:	6d71      	ldr	r1, [r6, #84]	@ 0x54
10053f82:	1809      	adds	r1, r1, r0
10053f84:	7889      	ldrb	r1, [r1, #2]
10053f86:	0789      	lsls	r1, r1, #30
10053f88:	d500      	bpl.n	10053f8c <GAP_stop_discoverability+0x48>
10053f8a:	2700      	movs	r7, #0
10053f8c:	3014      	adds	r0, #20
10053f8e:	e7f5      	b.n	10053f7c <GAP_stop_discoverability+0x38>
10053f90:	2f01      	cmp	r7, #1
10053f92:	4f15      	ldr	r7, [pc, #84]	@ (10053fe8 <__arm_cp.18_0>)
10053f94:	d122      	bne.n	10053fdc <GAP_stop_discoverability+0x98>
10053f96:	6838      	ldr	r0, [r7, #0]
10053f98:	2500      	movs	r5, #0
10053f9a:	4629      	mov	r1, r5
10053f9c:	f00e faff 	bl	1006259e <CST_stop>
10053fa0:	4813      	ldr	r0, [pc, #76]	@ (10053ff0 <__arm_cp.18_2>)
10053fa2:	6800      	ldr	r0, [r0, #0]
10053fa4:	214e      	movs	r1, #78	@ 0x4e
10053fa6:	5c40      	ldrb	r0, [r0, r1]
10053fa8:	07c0      	lsls	r0, r0, #31
10053faa:	d017      	beq.n	10053fdc <GAP_stop_discoverability+0x98>
10053fac:	4811      	ldr	r0, [pc, #68]	@ (10053ff4 <__arm_cp.18_3>)
10053fae:	6800      	ldr	r0, [r0, #0]
10053fb0:	6980      	ldr	r0, [r0, #24]
10053fb2:	2244      	movs	r2, #68	@ 0x44
10053fb4:	2602      	movs	r6, #2
10053fb6:	4631      	mov	r1, r6
10053fb8:	4633      	mov	r3, r6
10053fba:	f7fe ffbd 	bl	10052f38 <aci_event_fifo_push_header>
10053fbe:	2800      	cmp	r0, #0
10053fc0:	d00c      	beq.n	10053fdc <GAP_stop_discoverability+0x98>
10053fc2:	4601      	mov	r1, r0
10053fc4:	7186      	strb	r6, [r0, #6]
10053fc6:	71c5      	strb	r5, [r0, #7]
10053fc8:	7205      	strb	r5, [r0, #8]
10053fca:	20ff      	movs	r0, #255	@ 0xff
10053fcc:	7148      	strb	r0, [r1, #5]
10053fce:	2082      	movs	r0, #130	@ 0x82
10053fd0:	7108      	strb	r0, [r1, #4]
10053fd2:	2004      	movs	r0, #4
10053fd4:	7248      	strb	r0, [r1, #9]
10053fd6:	4630      	mov	r0, r6
10053fd8:	f7ff f84b 	bl	10053072 <aci_event_fifo_push>
10053fdc:	6838      	ldr	r0, [r7, #0]
10053fde:	6d40      	ldr	r0, [r0, #84]	@ 0x54
10053fe0:	1900      	adds	r0, r0, r4
10053fe2:	2100      	movs	r1, #0
10053fe4:	74c1      	strb	r1, [r0, #19]
10053fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10053fe8 <__arm_cp.18_0>:
10053fe8:	200010a8 	.word	0x200010a8

10053fec <__arm_cp.18_1>:
10053fec:	20001108 	.word	0x20001108

10053ff0 <__arm_cp.18_2>:
10053ff0:	200010f4 	.word	0x200010f4

10053ff4 <__arm_cp.18_3>:
10053ff4:	200010a4 	.word	0x200010a4

10053ff8 <GAP_stop_privacy_timer>:
10053ff8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10053ffa:	4c0d      	ldr	r4, [pc, #52]	@ (10054030 <__arm_cp.19_0>)
10053ffc:	6825      	ldr	r5, [r4, #0]
10053ffe:	205c      	movs	r0, #92	@ 0x5c
10054000:	5c28      	ldrb	r0, [r5, r0]
10054002:	0680      	lsls	r0, r0, #26
10054004:	0f80      	lsrs	r0, r0, #30
10054006:	d012      	beq.n	1005402e <GAP_stop_privacy_timer+0x36>
10054008:	355c      	adds	r5, #92	@ 0x5c
1005400a:	78e8      	ldrb	r0, [r5, #3]
1005400c:	2602      	movs	r6, #2
1005400e:	4030      	ands	r0, r6
10054010:	d10d      	bne.n	1005402e <GAP_stop_privacy_timer+0x36>
10054012:	a801      	add	r0, sp, #4
10054014:	4669      	mov	r1, sp
10054016:	f000 fac5 	bl	100545a4 <GAP_check_adv_status>
1005401a:	7869      	ldrb	r1, [r5, #1]
1005401c:	4301      	orrs	r1, r0
1005401e:	d106      	bne.n	1005402e <GAP_stop_privacy_timer+0x36>
10054020:	78e8      	ldrb	r0, [r5, #3]
10054022:	4330      	orrs	r0, r6
10054024:	70e8      	strb	r0, [r5, #3]
10054026:	6820      	ldr	r0, [r4, #0]
10054028:	2101      	movs	r1, #1
1005402a:	f00e fab8 	bl	1006259e <CST_stop>
1005402e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

10054030 <__arm_cp.19_0>:
10054030:	200010a8 	.word	0x200010a8

10054034 <GAP_peripheral_connection_complete_handler_ucfg_weak>:
10054034:	b580      	push	{r7, lr}
10054036:	2000      	movs	r0, #0
10054038:	f7ff ff84 	bl	10053f44 <GAP_stop_discoverability>
1005403c:	f7ff ffdc 	bl	10053ff8 <GAP_stop_privacy_timer>
10054040:	bd80      	pop	{r7, pc}

10054042 <GAP_hci_disconnection_complete_evt_hndl>:
10054042:	4770      	bx	lr

10054044 <GAP_hci_le_connection_complete_evt_hndl>:
10054044:	b580      	push	{r7, lr}
10054046:	2a00      	cmp	r2, #0
10054048:	d003      	beq.n	10054052 <GAP_hci_le_connection_complete_evt_hndl+0xe>
1005404a:	4608      	mov	r0, r1
1005404c:	f7ff fff2 	bl	10054034 <GAP_peripheral_connection_complete_handler_ucfg_weak>
10054050:	bd80      	pop	{r7, pc}
10054052:	f7ff fd2f 	bl	10053ab4 <GAP_central_connection_complete_handler_ucfg_weak>
10054056:	bd80      	pop	{r7, pc}

10054058 <GapIsPrivacySupported>:
10054058:	4804      	ldr	r0, [pc, #16]	@ (1005406c <__arm_cp.26_0>)
1005405a:	6800      	ldr	r0, [r0, #0]
1005405c:	215c      	movs	r1, #92	@ 0x5c
1005405e:	5c41      	ldrb	r1, [r0, r1]
10054060:	2030      	movs	r0, #48	@ 0x30
10054062:	4008      	ands	r0, r1
10054064:	1e41      	subs	r1, r0, #1
10054066:	4188      	sbcs	r0, r1
10054068:	4770      	bx	lr
1005406a:	46c0      	nop			@ (mov r8, r8)

1005406c <__arm_cp.26_0>:
1005406c:	200010a8 	.word	0x200010a8

10054070 <GAP_get_identity_address_type>:
10054070:	4803      	ldr	r0, [pc, #12]	@ (10054080 <__arm_cp.28_0>)
10054072:	6800      	ldr	r0, [r0, #0]
10054074:	215f      	movs	r1, #95	@ 0x5f
10054076:	5c41      	ldrb	r1, [r0, r1]
10054078:	2001      	movs	r0, #1
1005407a:	4008      	ands	r0, r1
1005407c:	4770      	bx	lr
1005407e:	46c0      	nop			@ (mov r8, r8)

10054080 <__arm_cp.28_0>:
10054080:	200010a8 	.word	0x200010a8

10054084 <GAP_get_own_address_type>:
10054084:	4808      	ldr	r0, [pc, #32]	@ (100540a8 <__arm_cp.29_0>)
10054086:	6800      	ldr	r0, [r0, #0]
10054088:	215c      	movs	r1, #92	@ 0x5c
1005408a:	5c41      	ldrb	r1, [r0, r1]
1005408c:	06ca      	lsls	r2, r1, #27
1005408e:	d406      	bmi.n	1005409e <GAP_get_own_address_type+0x1a>
10054090:	0689      	lsls	r1, r1, #26
10054092:	d406      	bmi.n	100540a2 <GAP_get_own_address_type+0x1e>
10054094:	305c      	adds	r0, #92	@ 0x5c
10054096:	78c1      	ldrb	r1, [r0, #3]
10054098:	2001      	movs	r0, #1
1005409a:	4008      	ands	r0, r1
1005409c:	4770      	bx	lr
1005409e:	2001      	movs	r0, #1
100540a0:	4770      	bx	lr
100540a2:	2003      	movs	r0, #3
100540a4:	4770      	bx	lr
100540a6:	46c0      	nop			@ (mov r8, r8)

100540a8 <__arm_cp.29_0>:
100540a8:	200010a8 	.word	0x200010a8

100540ac <GAP_enable_controller_privacy_ucfg_weak>:
100540ac:	2012      	movs	r0, #18
100540ae:	4770      	bx	lr

100540b0 <GAP_Terminate_Link>:
100540b0:	b580      	push	{r7, lr}
100540b2:	f004 fe4b 	bl	10058d4c <llc_conn_disconnect_link>
100540b6:	bd80      	pop	{r7, pc}

100540b8 <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak>:
100540b8:	b580      	push	{r7, lr}
100540ba:	07c0      	lsls	r0, r0, #31
100540bc:	d101      	bne.n	100540c2 <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak+0xa>
100540be:	2000      	movs	r0, #0
100540c0:	bd80      	pop	{r7, pc}
100540c2:	4608      	mov	r0, r1
100540c4:	4611      	mov	r1, r2
100540c6:	f003 faeb 	bl	100576a0 <hci_le_add_device_to_filter_accept_list>
100540ca:	bd80      	pop	{r7, pc}

100540cc <GAP_clear_filter_accept_and_resolving_list_ucfg_weak>:
100540cc:	b580      	push	{r7, lr}
100540ce:	07c0      	lsls	r0, r0, #31
100540d0:	d101      	bne.n	100540d6 <GAP_clear_filter_accept_and_resolving_list_ucfg_weak+0xa>
100540d2:	2000      	movs	r0, #0
100540d4:	bd80      	pop	{r7, pc}
100540d6:	f003 fadf 	bl	10057698 <hci_le_clear_filter_accept_list>
100540da:	bd80      	pop	{r7, pc}

100540dc <GAP_configure_filter_accept_and_resolving_list>:
100540dc:	b570      	push	{r4, r5, r6, lr}
100540de:	b094      	sub	sp, #80	@ 0x50
100540e0:	4604      	mov	r4, r0
100540e2:	f7ff fff3 	bl	100540cc <GAP_clear_filter_accept_and_resolving_list_ucfg_weak>
100540e6:	4606      	mov	r6, r0
100540e8:	466d      	mov	r5, sp
100540ea:	353e      	adds	r5, #62	@ 0x3e
100540ec:	4668      	mov	r0, sp
100540ee:	f00b fe29 	bl	1005fd44 <sdb_sap_read_security_record_sequential>
100540f2:	2800      	cmp	r0, #0
100540f4:	d10b      	bne.n	1005410e <GAP_configure_filter_accept_and_resolving_list+0x32>
100540f6:	2e00      	cmp	r6, #0
100540f8:	d109      	bne.n	1005410e <GAP_configure_filter_accept_and_resolving_list+0x32>
100540fa:	4668      	mov	r0, sp
100540fc:	7840      	ldrb	r0, [r0, #1]
100540fe:	2101      	movs	r1, #1
10054100:	4001      	ands	r1, r0
10054102:	4620      	mov	r0, r4
10054104:	462a      	mov	r2, r5
10054106:	f7ff ffd7 	bl	100540b8 <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak>
1005410a:	4606      	mov	r6, r0
1005410c:	e7ee      	b.n	100540ec <GAP_configure_filter_accept_and_resolving_list+0x10>
1005410e:	b2f0      	uxtb	r0, r6
10054110:	b014      	add	sp, #80	@ 0x50
10054112:	bd70      	pop	{r4, r5, r6, pc}

10054114 <GAP_set_controller_random_address_ucfg_weak>:
10054114:	b580      	push	{r7, lr}
10054116:	f003 f8ed 	bl	100572f4 <hci_le_set_random_address>
1005411a:	bd80      	pop	{r7, pc}

1005411c <GAP_init_advertising_sets_ucfg_weak>:
1005411c:	2000      	movs	r0, #0
1005411e:	4770      	bx	lr

10054120 <GAP_start_privacy_timer>:
10054120:	b5b0      	push	{r4, r5, r7, lr}
10054122:	4602      	mov	r2, r0
10054124:	4810      	ldr	r0, [pc, #64]	@ (10054168 <__arm_cp.47_0>)
10054126:	6800      	ldr	r0, [r0, #0]
10054128:	4605      	mov	r5, r0
1005412a:	355a      	adds	r5, #90	@ 0x5a
1005412c:	2900      	cmp	r1, #0
1005412e:	d108      	bne.n	10054142 <GAP_start_privacy_timer+0x22>
10054130:	78a9      	ldrb	r1, [r5, #2]
10054132:	0689      	lsls	r1, r1, #26
10054134:	2400      	movs	r4, #0
10054136:	0f89      	lsrs	r1, r1, #30
10054138:	d014      	beq.n	10054164 <GAP_start_privacy_timer+0x44>
1005413a:	7969      	ldrb	r1, [r5, #5]
1005413c:	2302      	movs	r3, #2
1005413e:	400b      	ands	r3, r1
10054140:	d010      	beq.n	10054164 <GAP_start_privacy_timer+0x44>
10054142:	2a00      	cmp	r2, #0
10054144:	d001      	beq.n	1005414a <GAP_start_privacy_timer+0x2a>
10054146:	4b09      	ldr	r3, [pc, #36]	@ (1005416c <__arm_cp.47_1>)
10054148:	e003      	b.n	10054152 <GAP_start_privacy_timer+0x32>
1005414a:	217d      	movs	r1, #125	@ 0x7d
1005414c:	00c9      	lsls	r1, r1, #3
1005414e:	882b      	ldrh	r3, [r5, #0]
10054150:	434b      	muls	r3, r1
10054152:	2401      	movs	r4, #1
10054154:	4621      	mov	r1, r4
10054156:	4622      	mov	r2, r4
10054158:	f00e fa57 	bl	1006260a <CST_start>
1005415c:	7968      	ldrb	r0, [r5, #5]
1005415e:	21fd      	movs	r1, #253	@ 0xfd
10054160:	4001      	ands	r1, r0
10054162:	7169      	strb	r1, [r5, #5]
10054164:	4620      	mov	r0, r4
10054166:	bdb0      	pop	{r4, r5, r7, pc}

10054168 <__arm_cp.47_0>:
10054168:	200010a8 	.word	0x200010a8

1005416c <__arm_cp.47_1>:
1005416c:	00007530 	.word	0x00007530

10054170 <GAP_generate_new_rpa>:
10054170:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10054172:	4d0d      	ldr	r5, [pc, #52]	@ (100541a8 <__arm_cp.48_0>)
10054174:	6828      	ldr	r0, [r5, #0]
10054176:	215f      	movs	r1, #95	@ 0x5f
10054178:	5c40      	ldrb	r0, [r0, r1]
1005417a:	0780      	lsls	r0, r0, #30
1005417c:	d401      	bmi.n	10054182 <GAP_generate_new_rpa+0x12>
1005417e:	240c      	movs	r4, #12
10054180:	e00f      	b.n	100541a2 <GAP_generate_new_rpa+0x32>
10054182:	466c      	mov	r4, sp
10054184:	4620      	mov	r0, r4
10054186:	f00b feed 	bl	1005ff64 <smp_sap_crt_generate_rpa>
1005418a:	4620      	mov	r0, r4
1005418c:	f7ff ffc2 	bl	10054114 <GAP_set_controller_random_address_ucfg_weak>
10054190:	4604      	mov	r4, r0
10054192:	2800      	cmp	r0, #0
10054194:	d105      	bne.n	100541a2 <GAP_generate_new_rpa+0x32>
10054196:	6828      	ldr	r0, [r5, #0]
10054198:	3066      	adds	r0, #102	@ 0x66
1005419a:	4669      	mov	r1, sp
1005419c:	2206      	movs	r2, #6
1005419e:	f7f1 ff59 	bl	10046054 <BLEPLAT_MemCpy>
100541a2:	4620      	mov	r0, r4
100541a4:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
100541a6:	46c0      	nop			@ (mov r8, r8)

100541a8 <__arm_cp.48_0>:
100541a8:	200010a8 	.word	0x200010a8

100541ac <GAP_get_current_address>:
100541ac:	b5b0      	push	{r4, r5, r7, lr}
100541ae:	460d      	mov	r5, r1
100541b0:	4604      	mov	r4, r0
100541b2:	480f      	ldr	r0, [pc, #60]	@ (100541f0 <__arm_cp.49_0>)
100541b4:	6800      	ldr	r0, [r0, #0]
100541b6:	215c      	movs	r1, #92	@ 0x5c
100541b8:	5c40      	ldrb	r0, [r0, r1]
100541ba:	0680      	lsls	r0, r0, #26
100541bc:	0f80      	lsrs	r0, r0, #30
100541be:	d005      	beq.n	100541cc <GAP_get_current_address+0x20>
100541c0:	2001      	movs	r0, #1
100541c2:	7028      	strb	r0, [r5, #0]
100541c4:	4620      	mov	r0, r4
100541c6:	f000 f815 	bl	100541f4 <GAP_get_rpa>
100541ca:	e00e      	b.n	100541ea <GAP_get_current_address+0x3e>
100541cc:	f7ff ff5a 	bl	10054084 <GAP_get_own_address_type>
100541d0:	2800      	cmp	r0, #0
100541d2:	d005      	beq.n	100541e0 <GAP_get_current_address+0x34>
100541d4:	2001      	movs	r0, #1
100541d6:	7028      	strb	r0, [r5, #0]
100541d8:	4620      	mov	r0, r4
100541da:	f000 f81f 	bl	1005421c <GAP_get_static_random_address>
100541de:	e004      	b.n	100541ea <GAP_get_current_address+0x3e>
100541e0:	2000      	movs	r0, #0
100541e2:	7028      	strb	r0, [r5, #0]
100541e4:	4620      	mov	r0, r4
100541e6:	f000 f80f 	bl	10054208 <GAP_get_public_address>
100541ea:	2000      	movs	r0, #0
100541ec:	bdb0      	pop	{r4, r5, r7, pc}
100541ee:	46c0      	nop			@ (mov r8, r8)

100541f0 <__arm_cp.49_0>:
100541f0:	200010a8 	.word	0x200010a8

100541f4 <GAP_get_rpa>:
100541f4:	b580      	push	{r7, lr}
100541f6:	4903      	ldr	r1, [pc, #12]	@ (10054204 <__arm_cp.50_0>)
100541f8:	6809      	ldr	r1, [r1, #0]
100541fa:	3166      	adds	r1, #102	@ 0x66
100541fc:	2206      	movs	r2, #6
100541fe:	f7f1 ff29 	bl	10046054 <BLEPLAT_MemCpy>
10054202:	bd80      	pop	{r7, pc}

10054204 <__arm_cp.50_0>:
10054204:	200010a8 	.word	0x200010a8

10054208 <GAP_get_public_address>:
10054208:	b580      	push	{r7, lr}
1005420a:	4903      	ldr	r1, [pc, #12]	@ (10054218 <__arm_cp.51_0>)
1005420c:	6809      	ldr	r1, [r1, #0]
1005420e:	2206      	movs	r2, #6
10054210:	f7f1 ff20 	bl	10046054 <BLEPLAT_MemCpy>
10054214:	bd80      	pop	{r7, pc}
10054216:	46c0      	nop			@ (mov r8, r8)

10054218 <__arm_cp.51_0>:
10054218:	200010a0 	.word	0x200010a0

1005421c <GAP_get_static_random_address>:
1005421c:	b580      	push	{r7, lr}
1005421e:	4903      	ldr	r1, [pc, #12]	@ (1005422c <__arm_cp.52_0>)
10054220:	6809      	ldr	r1, [r1, #0]
10054222:	3160      	adds	r1, #96	@ 0x60
10054224:	2206      	movs	r2, #6
10054226:	f7f1 ff15 	bl	10046054 <BLEPLAT_MemCpy>
1005422a:	bd80      	pop	{r7, pc}

1005422c <__arm_cp.52_0>:
1005422c:	200010a8 	.word	0x200010a8

10054230 <GAP_is_rpa_change_at_timeout_enabled>:
10054230:	4802      	ldr	r0, [pc, #8]	@ (1005423c <__arm_cp.54_0>)
10054232:	6800      	ldr	r0, [r0, #0]
10054234:	216c      	movs	r1, #108	@ 0x6c
10054236:	5c40      	ldrb	r0, [r0, r1]
10054238:	4770      	bx	lr
1005423a:	46c0      	nop			@ (mov r8, r8)

1005423c <__arm_cp.54_0>:
1005423c:	200010a8 	.word	0x200010a8

10054240 <GAP_check_discoverability_mode>:
10054240:	1e43      	subs	r3, r0, #1
10054242:	2b02      	cmp	r3, #2
10054244:	d309      	bcc.n	1005425a <GAP_check_discoverability_mode+0x1a>
10054246:	2800      	cmp	r0, #0
10054248:	d00c      	beq.n	10054264 <GAP_check_discoverability_mode+0x24>
1005424a:	2803      	cmp	r0, #3
1005424c:	d109      	bne.n	10054262 <GAP_check_discoverability_mode+0x22>
1005424e:	2001      	movs	r0, #1
10054250:	4001      	ands	r1, r0
10054252:	4249      	negs	r1, r1
10054254:	2012      	movs	r0, #18
10054256:	4008      	ands	r0, r1
10054258:	4770      	bx	lr
1005425a:	2a00      	cmp	r2, #0
1005425c:	d101      	bne.n	10054262 <GAP_check_discoverability_mode+0x22>
1005425e:	4610      	mov	r0, r2
10054260:	4770      	bx	lr
10054262:	2012      	movs	r0, #18
10054264:	4770      	bx	lr
	...

10054268 <GAP_advEvtProp_to_advType>:
10054268:	4601      	mov	r1, r0
1005426a:	3910      	subs	r1, #16
1005426c:	2905      	cmp	r1, #5
1005426e:	d80a      	bhi.n	10054286 <GAP_advEvtProp_to_advType+0x1e>
10054270:	2000      	movs	r0, #0
10054272:	46c0      	nop			@ (mov r8, r8)
10054274:	4479      	add	r1, pc
10054276:	7909      	ldrb	r1, [r1, #4]
10054278:	0049      	lsls	r1, r1, #1
1005427a:	448f      	add	pc, r1
1005427c:	090a0802 	.word	0x090a0802
10054280:	0c08      	.short	0x0c08
10054282:	2003      	movs	r0, #3
10054284:	4770      	bx	lr
10054286:	281d      	cmp	r0, #29
10054288:	d101      	bne.n	1005428e <GAP_advEvtProp_to_advType+0x26>
1005428a:	2001      	movs	r0, #1
1005428c:	4770      	bx	lr
1005428e:	2005      	movs	r0, #5
10054290:	4770      	bx	lr
10054292:	2002      	movs	r0, #2
10054294:	4770      	bx	lr
10054296:	2004      	movs	r0, #4
10054298:	4770      	bx	lr
	...

1005429c <GAP_set_legacy_advertising_configuration>:
1005429c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005429e:	b08d      	sub	sp, #52	@ 0x34
100542a0:	4615      	mov	r5, r2
100542a2:	460f      	mov	r7, r1
100542a4:	4601      	mov	r1, r0
100542a6:	06fa      	lsls	r2, r7, #27
100542a8:	2012      	movs	r0, #18
100542aa:	2a00      	cmp	r2, #0
100542ac:	d542      	bpl.n	10054334 <GAP_set_legacy_advertising_configuration+0x98>
100542ae:	461c      	mov	r4, r3
100542b0:	2301      	movs	r3, #1
100542b2:	039a      	lsls	r2, r3, #14
100542b4:	4295      	cmp	r5, r2
100542b6:	d83d      	bhi.n	10054334 <GAP_set_legacy_advertising_configuration+0x98>
100542b8:	4294      	cmp	r4, r2
100542ba:	d83b      	bhi.n	10054334 <GAP_set_legacy_advertising_configuration+0x98>
100542bc:	930c      	str	r3, [sp, #48]	@ 0x30
100542be:	481e      	ldr	r0, [pc, #120]	@ (10054338 <__arm_cp.2_0>)
100542c0:	6806      	ldr	r6, [r0, #0]
100542c2:	9815      	ldr	r0, [sp, #84]	@ 0x54
100542c4:	900b      	str	r0, [sp, #44]	@ 0x2c
100542c6:	9814      	ldr	r0, [sp, #80]	@ 0x50
100542c8:	900a      	str	r0, [sp, #40]	@ 0x28
100542ca:	9813      	ldr	r0, [sp, #76]	@ 0x4c
100542cc:	9008      	str	r0, [sp, #32]
100542ce:	9812      	ldr	r0, [sp, #72]	@ 0x48
100542d0:	9009      	str	r0, [sp, #36]	@ 0x24
100542d2:	6d70      	ldr	r0, [r6, #84]	@ 0x54
100542d4:	2200      	movs	r2, #0
100542d6:	9205      	str	r2, [sp, #20]
100542d8:	7042      	strb	r2, [r0, #1]
100542da:	7001      	strb	r1, [r0, #0]
100542dc:	f7ff fed2 	bl	10054084 <GAP_get_own_address_type>
100542e0:	9007      	str	r0, [sp, #28]
100542e2:	4638      	mov	r0, r7
100542e4:	f7ff ffc0 	bl	10054268 <GAP_advEvtProp_to_advType>
100542e8:	4602      	mov	r2, r0
100542ea:	9606      	str	r6, [sp, #24]
100542ec:	6d70      	ldr	r0, [r6, #84]	@ 0x54
100542ee:	7841      	ldrb	r1, [r0, #1]
100542f0:	2320      	movs	r3, #32
100542f2:	430b      	orrs	r3, r1
100542f4:	7043      	strb	r3, [r0, #1]
100542f6:	2a04      	cmp	r2, #4
100542f8:	d808      	bhi.n	1005430c <GAP_set_legacy_advertising_configuration+0x70>
100542fa:	2317      	movs	r3, #23
100542fc:	40d3      	lsrs	r3, r2
100542fe:	07db      	lsls	r3, r3, #31
10054300:	d004      	beq.n	1005430c <GAP_set_legacy_advertising_configuration+0x70>
10054302:	b253      	sxtb	r3, r2
10054304:	a70d      	add	r7, pc, #52	@ (adr r7, 1005433c <__arm_cp.2_0+0x4>)
10054306:	5cfb      	ldrb	r3, [r7, r3]
10054308:	4319      	orrs	r1, r3
1005430a:	7041      	strb	r1, [r0, #1]
1005430c:	9808      	ldr	r0, [sp, #32]
1005430e:	9000      	str	r0, [sp, #0]
10054310:	980a      	ldr	r0, [sp, #40]	@ 0x28
10054312:	9001      	str	r0, [sp, #4]
10054314:	9809      	ldr	r0, [sp, #36]	@ 0x24
10054316:	9002      	str	r0, [sp, #8]
10054318:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005431a:	9003      	str	r0, [sp, #12]
1005431c:	b2a8      	uxth	r0, r5
1005431e:	b2a1      	uxth	r1, r4
10054320:	9b07      	ldr	r3, [sp, #28]
10054322:	f002 ff27 	bl	10057174 <hci_le_set_advertising_parameters>
10054326:	2800      	cmp	r0, #0
10054328:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005432a:	d103      	bne.n	10054334 <GAP_set_legacy_advertising_configuration+0x98>
1005432c:	9806      	ldr	r0, [sp, #24]
1005432e:	6d40      	ldr	r0, [r0, #84]	@ 0x54
10054330:	7481      	strb	r1, [r0, #18]
10054332:	9805      	ldr	r0, [sp, #20]
10054334:	b00d      	add	sp, #52	@ 0x34
10054336:	bdf0      	pop	{r4, r5, r6, r7, pc}

10054338 <__arm_cp.2_0>:
10054338:	200010a8 	.word	0x200010a8
1005433c:	70287028 	.word	0x70287028
10054340:	00000030 	.word	0x00000030

10054344 <GAP_set_legacy_advertising_enable>:
10054344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10054346:	4604      	mov	r4, r0
10054348:	481a      	ldr	r0, [pc, #104]	@ (100543b4 <__arm_cp.4_0>)
1005434a:	6807      	ldr	r7, [r0, #0]
1005434c:	2c00      	cmp	r4, #0
1005434e:	d00e      	beq.n	1005436e <GAP_set_legacy_advertising_enable+0x2a>
10054350:	6d78      	ldr	r0, [r7, #84]	@ 0x54
10054352:	7c80      	ldrb	r0, [r0, #18]
10054354:	2801      	cmp	r0, #1
10054356:	d124      	bne.n	100543a2 <GAP_set_legacy_advertising_enable+0x5e>
10054358:	2000      	movs	r0, #0
1005435a:	4601      	mov	r1, r0
1005435c:	f000 f82c 	bl	100543b8 <GAP_check_flags>
10054360:	4605      	mov	r5, r0
10054362:	2800      	cmp	r0, #0
10054364:	d11e      	bne.n	100543a4 <GAP_set_legacy_advertising_enable+0x60>
10054366:	f7ff ff03 	bl	10054170 <GAP_generate_new_rpa>
1005436a:	4606      	mov	r6, r0
1005436c:	e000      	b.n	10054370 <GAP_set_legacy_advertising_enable+0x2c>
1005436e:	260c      	movs	r6, #12
10054370:	4620      	mov	r0, r4
10054372:	f002 ff5f 	bl	10057234 <hci_le_set_advertising_enable>
10054376:	4605      	mov	r5, r0
10054378:	2800      	cmp	r0, #0
1005437a:	d113      	bne.n	100543a4 <GAP_set_legacy_advertising_enable+0x60>
1005437c:	2500      	movs	r5, #0
1005437e:	4620      	mov	r0, r4
10054380:	4629      	mov	r1, r5
10054382:	462a      	mov	r2, r5
10054384:	f000 f872 	bl	1005446c <GAP_set_discoverability_mode>
10054388:	6d78      	ldr	r0, [r7, #84]	@ 0x54
1005438a:	2c00      	cmp	r4, #0
1005438c:	d00c      	beq.n	100543a8 <GAP_set_legacy_advertising_enable+0x64>
1005438e:	2101      	movs	r1, #1
10054390:	74c1      	strb	r1, [r0, #19]
10054392:	2e00      	cmp	r6, #0
10054394:	d106      	bne.n	100543a4 <GAP_set_legacy_advertising_enable+0x60>
10054396:	2500      	movs	r5, #0
10054398:	4628      	mov	r0, r5
1005439a:	4629      	mov	r1, r5
1005439c:	f7ff fec0 	bl	10054120 <GAP_start_privacy_timer>
100543a0:	e000      	b.n	100543a4 <GAP_set_legacy_advertising_enable+0x60>
100543a2:	25d3      	movs	r5, #211	@ 0xd3
100543a4:	4628      	mov	r0, r5
100543a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100543a8:	2500      	movs	r5, #0
100543aa:	74c5      	strb	r5, [r0, #19]
100543ac:	f7ff fe24 	bl	10053ff8 <GAP_stop_privacy_timer>
100543b0:	e7f8      	b.n	100543a4 <GAP_set_legacy_advertising_enable+0x60>
100543b2:	46c0      	nop			@ (mov r8, r8)

100543b4 <__arm_cp.4_0>:
100543b4:	200010a8 	.word	0x200010a8

100543b8 <GAP_check_flags>:
100543b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100543ba:	4a28      	ldr	r2, [pc, #160]	@ (1005445c <__arm_cp.5_0>)
100543bc:	7e92      	ldrb	r2, [r2, #26]
100543be:	2512      	movs	r5, #18
100543c0:	428a      	cmp	r2, r1
100543c2:	d925      	bls.n	10054410 <GAP_check_flags+0x58>
100543c4:	2800      	cmp	r0, #0
100543c6:	d100      	bne.n	100543ca <GAP_check_flags+0x12>
100543c8:	4601      	mov	r1, r0
100543ca:	2214      	movs	r2, #20
100543cc:	434a      	muls	r2, r1
100543ce:	4824      	ldr	r0, [pc, #144]	@ (10054460 <__arm_cp.5_1>)
100543d0:	6800      	ldr	r0, [r0, #0]
100543d2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
100543d4:	1899      	adds	r1, r3, r2
100543d6:	784c      	ldrb	r4, [r1, #1]
100543d8:	06a0      	lsls	r0, r4, #26
100543da:	0fc6      	lsrs	r6, r0, #31
100543dc:	2000      	movs	r0, #0
100543de:	2e00      	cmp	r6, #0
100543e0:	d002      	beq.n	100543e8 <GAP_check_flags+0x30>
100543e2:	2710      	movs	r7, #16
100543e4:	4027      	ands	r7, r4
100543e6:	d114      	bne.n	10054412 <GAP_check_flags+0x5a>
100543e8:	2e00      	cmp	r6, #0
100543ea:	d102      	bne.n	100543f2 <GAP_check_flags+0x3a>
100543ec:	2608      	movs	r6, #8
100543ee:	4034      	ands	r4, r6
100543f0:	d10f      	bne.n	10054412 <GAP_check_flags+0x5a>
100543f2:	5c9e      	ldrb	r6, [r3, r2]
100543f4:	684c      	ldr	r4, [r1, #4]
100543f6:	8908      	ldrh	r0, [r1, #8]
100543f8:	4621      	mov	r1, r4
100543fa:	f000 f8bb 	bl	10054574 <GAP_search_flags_index>
100543fe:	4919      	ldr	r1, [pc, #100]	@ (10054464 <__arm_cp.5_2>)
10054400:	4288      	cmp	r0, r1
10054402:	d008      	beq.n	10054416 <GAP_check_flags+0x5e>
10054404:	1900      	adds	r0, r0, r4
10054406:	7881      	ldrb	r1, [r0, #2]
10054408:	0748      	lsls	r0, r1, #29
1005440a:	d40b      	bmi.n	10054424 <GAP_check_flags+0x6c>
1005440c:	20d4      	movs	r0, #212	@ 0xd4
1005440e:	e000      	b.n	10054412 <GAP_check_flags+0x5a>
10054410:	4628      	mov	r0, r5
10054412:	b2c0      	uxtb	r0, r0
10054414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10054416:	2e03      	cmp	r6, #3
10054418:	4628      	mov	r0, r5
1005441a:	d8fa      	bhi.n	10054412 <GAP_check_flags+0x5a>
1005441c:	00f1      	lsls	r1, r6, #3
1005441e:	4812      	ldr	r0, [pc, #72]	@ (10054468 <__arm_cp.5_3>)
10054420:	40c8      	lsrs	r0, r1
10054422:	e7f6      	b.n	10054412 <GAP_check_flags+0x5a>
10054424:	2e03      	cmp	r6, #3
10054426:	4628      	mov	r0, r5
10054428:	d8f3      	bhi.n	10054412 <GAP_check_flags+0x5a>
1005442a:	46c0      	nop			@ (mov r8, r8)
1005442c:	447e      	add	r6, pc
1005442e:	7936      	ldrb	r6, [r6, #4]
10054430:	0076      	lsls	r6, r6, #1
10054432:	44b7      	add	pc, r6
10054434:	010d0601 	.word	0x010d0601
10054438:	2003      	movs	r0, #3
1005443a:	4001      	ands	r1, r0
1005443c:	d105      	bne.n	1005444a <GAP_check_flags+0x92>
1005443e:	4608      	mov	r0, r1
10054440:	e7e7      	b.n	10054412 <GAP_check_flags+0x5a>
10054442:	2003      	movs	r0, #3
10054444:	4001      	ands	r1, r0
10054446:	2901      	cmp	r1, #1
10054448:	d006      	beq.n	10054458 <GAP_check_flags+0xa0>
1005444a:	202b      	movs	r0, #43	@ 0x2b
1005444c:	43c0      	mvns	r0, r0
1005444e:	e7e0      	b.n	10054412 <GAP_check_flags+0x5a>
10054450:	2003      	movs	r0, #3
10054452:	4001      	ands	r1, r0
10054454:	2902      	cmp	r1, #2
10054456:	d1f8      	bne.n	1005444a <GAP_check_flags+0x92>
10054458:	2000      	movs	r0, #0
1005445a:	e7da      	b.n	10054412 <GAP_check_flags+0x5a>

1005445c <__arm_cp.5_0>:
1005445c:	20001108 	.word	0x20001108

10054460 <__arm_cp.5_1>:
10054460:	200010a8 	.word	0x200010a8

10054464 <__arm_cp.5_2>:
10054464:	0000ffff 	.word	0x0000ffff

10054468 <__arm_cp.5_3>:
10054468:	00d4d400 	.word	0x00d4d400

1005446c <GAP_set_discoverability_mode>:
1005446c:	b570      	push	{r4, r5, r6, lr}
1005446e:	4603      	mov	r3, r0
10054470:	2900      	cmp	r1, #0
10054472:	d100      	bne.n	10054476 <GAP_set_discoverability_mode+0xa>
10054474:	460a      	mov	r2, r1
10054476:	4829      	ldr	r0, [pc, #164]	@ (1005451c <__arm_cp.6_0>)
10054478:	6800      	ldr	r0, [r0, #0]
1005447a:	6d41      	ldr	r1, [r0, #84]	@ 0x54
1005447c:	2b01      	cmp	r3, #1
1005447e:	d10c      	bne.n	1005449a <GAP_set_discoverability_mode+0x2e>
10054480:	2314      	movs	r3, #20
10054482:	4353      	muls	r3, r2
10054484:	5cca      	ldrb	r2, [r1, r3]
10054486:	2a01      	cmp	r2, #1
10054488:	d033      	beq.n	100544f2 <GAP_set_discoverability_mode+0x86>
1005448a:	2a02      	cmp	r2, #2
1005448c:	d13e      	bne.n	1005450c <GAP_set_discoverability_mode+0xa0>
1005448e:	18ca      	adds	r2, r1, r3
10054490:	7894      	ldrb	r4, [r2, #2]
10054492:	2004      	movs	r0, #4
10054494:	4320      	orrs	r0, r4
10054496:	7090      	strb	r0, [r2, #2]
10054498:	e03a      	b.n	10054510 <GAP_set_discoverability_mode+0xa4>
1005449a:	2314      	movs	r3, #20
1005449c:	4353      	muls	r3, r2
1005449e:	18c9      	adds	r1, r1, r3
100544a0:	1c8e      	adds	r6, r1, #2
100544a2:	7889      	ldrb	r1, [r1, #2]
100544a4:	0789      	lsls	r1, r1, #30
100544a6:	d521      	bpl.n	100544ec <GAP_set_discoverability_mode+0x80>
100544a8:	2400      	movs	r4, #0
100544aa:	4621      	mov	r1, r4
100544ac:	f00e f877 	bl	1006259e <CST_stop>
100544b0:	481b      	ldr	r0, [pc, #108]	@ (10054520 <__arm_cp.6_1>)
100544b2:	6800      	ldr	r0, [r0, #0]
100544b4:	214e      	movs	r1, #78	@ 0x4e
100544b6:	5c40      	ldrb	r0, [r0, r1]
100544b8:	07c0      	lsls	r0, r0, #31
100544ba:	d017      	beq.n	100544ec <GAP_set_discoverability_mode+0x80>
100544bc:	4819      	ldr	r0, [pc, #100]	@ (10054524 <__arm_cp.6_2>)
100544be:	6800      	ldr	r0, [r0, #0]
100544c0:	6980      	ldr	r0, [r0, #24]
100544c2:	2244      	movs	r2, #68	@ 0x44
100544c4:	2502      	movs	r5, #2
100544c6:	4629      	mov	r1, r5
100544c8:	462b      	mov	r3, r5
100544ca:	f7fe fd35 	bl	10052f38 <aci_event_fifo_push_header>
100544ce:	2800      	cmp	r0, #0
100544d0:	d00c      	beq.n	100544ec <GAP_set_discoverability_mode+0x80>
100544d2:	4601      	mov	r1, r0
100544d4:	7185      	strb	r5, [r0, #6]
100544d6:	71c4      	strb	r4, [r0, #7]
100544d8:	7204      	strb	r4, [r0, #8]
100544da:	20ff      	movs	r0, #255	@ 0xff
100544dc:	7148      	strb	r0, [r1, #5]
100544de:	2082      	movs	r0, #130	@ 0x82
100544e0:	7108      	strb	r0, [r1, #4]
100544e2:	2004      	movs	r0, #4
100544e4:	7248      	strb	r0, [r1, #9]
100544e6:	4628      	mov	r0, r5
100544e8:	f7fe fdc3 	bl	10053072 <aci_event_fifo_push>
100544ec:	2000      	movs	r0, #0
100544ee:	7030      	strb	r0, [r6, #0]
100544f0:	bd70      	pop	{r4, r5, r6, pc}
100544f2:	18c9      	adds	r1, r1, r3
100544f4:	784a      	ldrb	r2, [r1, #1]
100544f6:	788b      	ldrb	r3, [r1, #2]
100544f8:	4313      	orrs	r3, r2
100544fa:	2202      	movs	r2, #2
100544fc:	431a      	orrs	r2, r3
100544fe:	708a      	strb	r2, [r1, #2]
10054500:	2100      	movs	r1, #0
10054502:	2201      	movs	r2, #1
10054504:	4b08      	ldr	r3, [pc, #32]	@ (10054528 <__arm_cp.6_3>)
10054506:	f00e f880 	bl	1006260a <CST_start>
1005450a:	bd70      	pop	{r4, r5, r6, pc}
1005450c:	18c8      	adds	r0, r1, r3
1005450e:	7880      	ldrb	r0, [r0, #2]
10054510:	18c9      	adds	r1, r1, r3
10054512:	784a      	ldrb	r2, [r1, #1]
10054514:	4302      	orrs	r2, r0
10054516:	708a      	strb	r2, [r1, #2]
10054518:	bd70      	pop	{r4, r5, r6, pc}
1005451a:	46c0      	nop			@ (mov r8, r8)

1005451c <__arm_cp.6_0>:
1005451c:	200010a8 	.word	0x200010a8

10054520 <__arm_cp.6_1>:
10054520:	200010f4 	.word	0x200010f4

10054524 <__arm_cp.6_2>:
10054524:	200010a4 	.word	0x200010a4

10054528 <__arm_cp.6_3>:
10054528:	0002bf20 	.word	0x0002bf20

1005452c <GAP_suspend_resume_active_advertising_sets_ucfg_weak>:
1005452c:	b580      	push	{r7, lr}
1005452e:	f000 f801 	bl	10054534 <GAP_suspend_resume_active_advertising_sets_legacy>
10054532:	bd80      	pop	{r7, pc}

10054534 <GAP_suspend_resume_active_advertising_sets_legacy>:
10054534:	b580      	push	{r7, lr}
10054536:	4905      	ldr	r1, [pc, #20]	@ (1005454c <__arm_cp.10_0>)
10054538:	6809      	ldr	r1, [r1, #0]
1005453a:	6d49      	ldr	r1, [r1, #84]	@ 0x54
1005453c:	7cc9      	ldrb	r1, [r1, #19]
1005453e:	2901      	cmp	r1, #1
10054540:	d102      	bne.n	10054548 <GAP_suspend_resume_active_advertising_sets_legacy+0x14>
10054542:	f002 fe77 	bl	10057234 <hci_le_set_advertising_enable>
10054546:	bd80      	pop	{r7, pc}
10054548:	2000      	movs	r0, #0
1005454a:	bd80      	pop	{r7, pc}

1005454c <__arm_cp.10_0>:
1005454c:	200010a8 	.word	0x200010a8

10054550 <GAP_set_legacy_advertising_data>:
10054550:	b5b0      	push	{r4, r5, r7, lr}
10054552:	460c      	mov	r4, r1
10054554:	4605      	mov	r5, r0
10054556:	b2c0      	uxtb	r0, r0
10054558:	f009 fc36 	bl	1005ddc8 <ll_set_legacy_advertising_data_ptr>
1005455c:	2800      	cmp	r0, #0
1005455e:	d000      	beq.n	10054562 <GAP_set_legacy_advertising_data+0x12>
10054560:	bdb0      	pop	{r4, r5, r7, pc}
10054562:	4903      	ldr	r1, [pc, #12]	@ (10054570 <__arm_cp.11_0>)
10054564:	6809      	ldr	r1, [r1, #0]
10054566:	6d49      	ldr	r1, [r1, #84]	@ 0x54
10054568:	810d      	strh	r5, [r1, #8]
1005456a:	604c      	str	r4, [r1, #4]
1005456c:	bdb0      	pop	{r4, r5, r7, pc}
1005456e:	46c0      	nop			@ (mov r8, r8)

10054570 <__arm_cp.11_0>:
10054570:	200010a8 	.word	0x200010a8

10054574 <GAP_search_flags_index>:
10054574:	b5b0      	push	{r4, r5, r7, lr}
10054576:	4a0a      	ldr	r2, [pc, #40]	@ (100545a0 <__arm_cp.15_0>)
10054578:	2803      	cmp	r0, #3
1005457a:	d30f      	bcc.n	1005459c <GAP_search_flags_index+0x28>
1005457c:	2300      	movs	r3, #0
1005457e:	b29d      	uxth	r5, r3
10054580:	5d4c      	ldrb	r4, [r1, r5]
10054582:	2c02      	cmp	r4, #2
10054584:	d103      	bne.n	1005458e <GAP_search_flags_index+0x1a>
10054586:	186d      	adds	r5, r5, r1
10054588:	786d      	ldrb	r5, [r5, #1]
1005458a:	2d01      	cmp	r5, #1
1005458c:	d005      	beq.n	1005459a <GAP_search_flags_index+0x26>
1005458e:	191b      	adds	r3, r3, r4
10054590:	1c5b      	adds	r3, r3, #1
10054592:	b29c      	uxth	r4, r3
10054594:	4284      	cmp	r4, r0
10054596:	d3f2      	bcc.n	1005457e <GAP_search_flags_index+0xa>
10054598:	e000      	b.n	1005459c <GAP_search_flags_index+0x28>
1005459a:	461a      	mov	r2, r3
1005459c:	b290      	uxth	r0, r2
1005459e:	bdb0      	pop	{r4, r5, r7, pc}

100545a0 <__arm_cp.15_0>:
100545a0:	0000ffff 	.word	0x0000ffff

100545a4 <GAP_check_adv_status>:
100545a4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100545a6:	460c      	mov	r4, r1
100545a8:	4605      	mov	r5, r0
100545aa:	481c      	ldr	r0, [pc, #112]	@ (1005461c <__arm_cp.16_0>)
100545ac:	6806      	ldr	r6, [r0, #0]
100545ae:	f7ff fbb1 	bl	10053d14 <gap_extended_adv_scan_supported>
100545b2:	491b      	ldr	r1, [pc, #108]	@ (10054620 <__arm_cp.16_1>)
100545b4:	7e8a      	ldrb	r2, [r1, #26]
100545b6:	2100      	movs	r1, #0
100545b8:	9501      	str	r5, [sp, #4]
100545ba:	7029      	strb	r1, [r5, #0]
100545bc:	2301      	movs	r3, #1
100545be:	9402      	str	r4, [sp, #8]
100545c0:	7023      	strb	r3, [r4, #0]
100545c2:	2800      	cmp	r0, #0
100545c4:	d000      	beq.n	100545c8 <GAP_check_adv_status+0x24>
100545c6:	4613      	mov	r3, r2
100545c8:	b2d8      	uxtb	r0, r3
100545ca:	2714      	movs	r7, #20
100545cc:	4347      	muls	r7, r0
100545ce:	4608      	mov	r0, r1
100545d0:	460b      	mov	r3, r1
100545d2:	460a      	mov	r2, r1
100545d4:	428f      	cmp	r7, r1
100545d6:	d011      	beq.n	100545fc <GAP_check_adv_status+0x58>
100545d8:	6d74      	ldr	r4, [r6, #84]	@ 0x54
100545da:	1864      	adds	r4, r4, r1
100545dc:	7ca5      	ldrb	r5, [r4, #18]
100545de:	2d01      	cmp	r5, #1
100545e0:	d10a      	bne.n	100545f8 <GAP_check_adv_status+0x54>
100545e2:	7ce5      	ldrb	r5, [r4, #19]
100545e4:	2d00      	cmp	r5, #0
100545e6:	d007      	beq.n	100545f8 <GAP_check_adv_status+0x54>
100545e8:	2d02      	cmp	r5, #2
100545ea:	d100      	bne.n	100545ee <GAP_check_adv_status+0x4a>
100545ec:	2301      	movs	r3, #1
100545ee:	78a4      	ldrb	r4, [r4, #2]
100545f0:	2001      	movs	r0, #1
100545f2:	07a4      	lsls	r4, r4, #30
100545f4:	d500      	bpl.n	100545f8 <GAP_check_adv_status+0x54>
100545f6:	4602      	mov	r2, r0
100545f8:	3114      	adds	r1, #20
100545fa:	e7eb      	b.n	100545d4 <GAP_check_adv_status+0x30>
100545fc:	2801      	cmp	r0, #1
100545fe:	d102      	bne.n	10054606 <GAP_check_adv_status+0x62>
10054600:	2101      	movs	r1, #1
10054602:	9c01      	ldr	r4, [sp, #4]
10054604:	7021      	strb	r1, [r4, #0]
10054606:	2b01      	cmp	r3, #1
10054608:	d002      	beq.n	10054610 <GAP_check_adv_status+0x6c>
1005460a:	b2d1      	uxtb	r1, r2
1005460c:	2901      	cmp	r1, #1
1005460e:	d102      	bne.n	10054616 <GAP_check_adv_status+0x72>
10054610:	2100      	movs	r1, #0
10054612:	9a02      	ldr	r2, [sp, #8]
10054614:	7011      	strb	r1, [r2, #0]
10054616:	b2c0      	uxtb	r0, r0
10054618:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005461a:	46c0      	nop			@ (mov r8, r8)

1005461c <__arm_cp.16_0>:
1005461c:	200010a8 	.word	0x200010a8

10054620 <__arm_cp.16_1>:
10054620:	20001108 	.word	0x20001108

10054624 <GAP_ResumeAdvertising_ucfg_weak>:
10054624:	b580      	push	{r7, lr}
10054626:	2001      	movs	r0, #1
10054628:	f7ff ff84 	bl	10054534 <GAP_suspend_resume_active_advertising_sets_legacy>
1005462c:	bd80      	pop	{r7, pc}
	...

10054630 <GAT_att_cmn_init>:
10054630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10054632:	2001      	movs	r0, #1
10054634:	2198      	movs	r1, #152	@ 0x98
10054636:	f00a ff39 	bl	1005f4ac <csmem_mem_0_assign>
1005463a:	4e2b      	ldr	r6, [pc, #172]	@ (100546e8 <__arm_cp.1_0>)
1005463c:	6030      	str	r0, [r6, #0]
1005463e:	4f2b      	ldr	r7, [pc, #172]	@ (100546ec <__arm_cp.1_1>)
10054640:	7af8      	ldrb	r0, [r7, #11]
10054642:	7b39      	ldrb	r1, [r7, #12]
10054644:	1808      	adds	r0, r1, r0
10054646:	2414      	movs	r4, #20
10054648:	4621      	mov	r1, r4
1005464a:	f00a ff2f 	bl	1005f4ac <csmem_mem_0_assign>
1005464e:	6832      	ldr	r2, [r6, #0]
10054650:	2500      	movs	r5, #0
10054652:	6355      	str	r5, [r2, #52]	@ 0x34
10054654:	62d5      	str	r5, [r2, #44]	@ 0x2c
10054656:	7af9      	ldrb	r1, [r7, #11]
10054658:	4603      	mov	r3, r0
1005465a:	462f      	mov	r7, r5
1005465c:	42b9      	cmp	r1, r7
1005465e:	d00a      	beq.n	10054676 <GAT_att_cmn_init+0x46>
10054660:	611d      	str	r5, [r3, #16]
10054662:	705f      	strb	r7, [r3, #1]
10054664:	701f      	strb	r7, [r3, #0]
10054666:	6832      	ldr	r2, [r6, #0]
10054668:	62d3      	str	r3, [r2, #44]	@ 0x2c
1005466a:	4625      	mov	r5, r4
1005466c:	437d      	muls	r5, r7
1005466e:	1945      	adds	r5, r0, r5
10054670:	3314      	adds	r3, #20
10054672:	1c7f      	adds	r7, r7, #1
10054674:	e7f2      	b.n	1005465c <GAT_att_cmn_init+0x2c>
10054676:	2300      	movs	r3, #0
10054678:	6313      	str	r3, [r2, #48]	@ 0x30
1005467a:	4a1c      	ldr	r2, [pc, #112]	@ (100546ec <__arm_cp.1_1>)
1005467c:	7b12      	ldrb	r2, [r2, #12]
1005467e:	1852      	adds	r2, r2, r1
10054680:	b2cd      	uxtb	r5, r1
10054682:	42aa      	cmp	r2, r5
10054684:	d90a      	bls.n	1005469c <GAT_att_cmn_init+0x6c>
10054686:	4365      	muls	r5, r4
10054688:	27ff      	movs	r7, #255	@ 0xff
1005468a:	5547      	strb	r7, [r0, r5]
1005468c:	1945      	adds	r5, r0, r5
1005468e:	612b      	str	r3, [r5, #16]
10054690:	7069      	strb	r1, [r5, #1]
10054692:	6833      	ldr	r3, [r6, #0]
10054694:	631d      	str	r5, [r3, #48]	@ 0x30
10054696:	1c49      	adds	r1, r1, #1
10054698:	462b      	mov	r3, r5
1005469a:	e7f1      	b.n	10054680 <GAT_att_cmn_init+0x50>
1005469c:	0690      	lsls	r0, r2, #26
1005469e:	0e00      	lsrs	r0, r0, #24
100546a0:	1c41      	adds	r1, r0, #1
100546a2:	4c13      	ldr	r4, [pc, #76]	@ (100546f0 <__arm_cp.1_2>)
100546a4:	2201      	movs	r2, #1
100546a6:	4620      	mov	r0, r4
100546a8:	f00a feee 	bl	1005f488 <csmem_mem_assign>
100546ac:	6831      	ldr	r1, [r6, #0]
100546ae:	6208      	str	r0, [r1, #32]
100546b0:	4d0e      	ldr	r5, [pc, #56]	@ (100546ec <__arm_cp.1_1>)
100546b2:	7ae8      	ldrb	r0, [r5, #11]
100546b4:	7b29      	ldrb	r1, [r5, #12]
100546b6:	1808      	adds	r0, r1, r0
100546b8:	0680      	lsls	r0, r0, #26
100546ba:	0e01      	lsrs	r1, r0, #24
100546bc:	2202      	movs	r2, #2
100546be:	4620      	mov	r0, r4
100546c0:	f00a fee2 	bl	1005f488 <csmem_mem_assign>
100546c4:	6834      	ldr	r4, [r6, #0]
100546c6:	6260      	str	r0, [r4, #36]	@ 0x24
100546c8:	7ae8      	ldrb	r0, [r5, #11]
100546ca:	7b29      	ldrb	r1, [r5, #12]
100546cc:	1808      	adds	r0, r1, r0
100546ce:	0680      	lsls	r0, r0, #26
100546d0:	0e01      	lsrs	r1, r0, #24
100546d2:	4a08      	ldr	r2, [pc, #32]	@ (100546f4 <__arm_cp.1_3>)
100546d4:	2307      	movs	r3, #7
100546d6:	4620      	mov	r0, r4
100546d8:	f00d ff4c 	bl	10062574 <CST_init>
100546dc:	f000 fa06 	bl	10054aec <GAT_att_srv_init>
100546e0:	f00f fbc2 	bl	10063e68 <GAT_att_clt_init>
100546e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100546e6:	46c0      	nop			@ (mov r8, r8)

100546e8 <__arm_cp.1_0>:
100546e8:	200010ac 	.word	0x200010ac

100546ec <__arm_cp.1_1>:
100546ec:	20001108 	.word	0x20001108

100546f0 <__arm_cp.1_2>:
100546f0:	20001104 	.word	0x20001104

100546f4 <__arm_cp.1_3>:
100546f4:	100546f9 	.word	0x100546f9

100546f8 <GAT_att_cmn_timeout_cb_wrapper>:
100546f8:	b580      	push	{r7, lr}
100546fa:	6940      	ldr	r0, [r0, #20]
100546fc:	4901      	ldr	r1, [pc, #4]	@ (10054704 <__arm_cp.2_0>)
100546fe:	f00e f812 	bl	10062726 <cst_sharedCallback>
10054702:	bd80      	pop	{r7, pc}

10054704 <__arm_cp.2_0>:
10054704:	10054a71 	.word	0x10054a71

10054708 <GAT_att_cmn_timer_expire_tsk>:
10054708:	b5e0      	push	{r5, r6, r7, lr}
1005470a:	2000      	movs	r0, #0
1005470c:	9000      	str	r0, [sp, #0]
1005470e:	4b06      	ldr	r3, [pc, #24]	@ (10054728 <__arm_cp.4_0>)
10054710:	4601      	mov	r1, r0
10054712:	4602      	mov	r2, r0
10054714:	f000 f80a 	bl	1005472c <GAT_att_cmn_for_each_ch_descr>
10054718:	2800      	cmp	r0, #0
1005471a:	d004      	beq.n	10054726 <GAT_att_cmn_timer_expire_tsk+0x1e>
1005471c:	2007      	movs	r0, #7
1005471e:	f00d fecb 	bl	100624b8 <tsk_notify_idx>
10054722:	f7ef f9fa 	bl	10043b1a <BLE_STACK_ProcessRequest>
10054726:	bd8c      	pop	{r2, r3, r7, pc}

10054728 <__arm_cp.4_0>:
10054728:	10054789 	.word	0x10054789

1005472c <GAT_att_cmn_for_each_ch_descr>:
1005472c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005472e:	b085      	sub	sp, #20
10054730:	9304      	str	r3, [sp, #16]
10054732:	9201      	str	r2, [sp, #4]
10054734:	9102      	str	r1, [sp, #8]
10054736:	4607      	mov	r7, r0
10054738:	2002      	movs	r0, #2
1005473a:	4038      	ands	r0, r7
1005473c:	9003      	str	r0, [sp, #12]
1005473e:	2401      	movs	r4, #1
10054740:	403c      	ands	r4, r7
10054742:	4810      	ldr	r0, [pc, #64]	@ (10054784 <__arm_cp.5_0>)
10054744:	6805      	ldr	r5, [r0, #0]
10054746:	3534      	adds	r5, #52	@ 0x34
10054748:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1005474a:	682d      	ldr	r5, [r5, #0]
1005474c:	2d00      	cmp	r5, #0
1005474e:	d016      	beq.n	1005477e <GAT_att_cmn_for_each_ch_descr+0x52>
10054750:	2f00      	cmp	r7, #0
10054752:	d00c      	beq.n	1005476e <GAT_att_cmn_for_each_ch_descr+0x42>
10054754:	2c00      	cmp	r4, #0
10054756:	d003      	beq.n	10054760 <GAT_att_cmn_for_each_ch_descr+0x34>
10054758:	8928      	ldrh	r0, [r5, #8]
1005475a:	9902      	ldr	r1, [sp, #8]
1005475c:	4288      	cmp	r0, r1
1005475e:	d10c      	bne.n	1005477a <GAT_att_cmn_for_each_ch_descr+0x4e>
10054760:	9803      	ldr	r0, [sp, #12]
10054762:	2800      	cmp	r0, #0
10054764:	d003      	beq.n	1005476e <GAT_att_cmn_for_each_ch_descr+0x42>
10054766:	8968      	ldrh	r0, [r5, #10]
10054768:	9901      	ldr	r1, [sp, #4]
1005476a:	4288      	cmp	r0, r1
1005476c:	d105      	bne.n	1005477a <GAT_att_cmn_for_each_ch_descr+0x4e>
1005476e:	4628      	mov	r0, r5
10054770:	4631      	mov	r1, r6
10054772:	9a04      	ldr	r2, [sp, #16]
10054774:	4790      	blx	r2
10054776:	2800      	cmp	r0, #0
10054778:	d102      	bne.n	10054780 <GAT_att_cmn_for_each_ch_descr+0x54>
1005477a:	3510      	adds	r5, #16
1005477c:	e7e5      	b.n	1005474a <GAT_att_cmn_for_each_ch_descr+0x1e>
1005477e:	2000      	movs	r0, #0
10054780:	b005      	add	sp, #20
10054782:	bdf0      	pop	{r4, r5, r6, r7, pc}

10054784 <__arm_cp.5_0>:
10054784:	200010ac 	.word	0x200010ac

10054788 <GAT_att_cmn_handle_disconnec_iterate_f>:
10054788:	b5b0      	push	{r4, r5, r7, lr}
1005478a:	4604      	mov	r4, r0
1005478c:	8880      	ldrh	r0, [r0, #4]
1005478e:	2500      	movs	r5, #0
10054790:	05c0      	lsls	r0, r0, #23
10054792:	d401      	bmi.n	10054798 <GAT_att_cmn_handle_disconnec_iterate_f+0x10>
10054794:	4628      	mov	r0, r5
10054796:	e006      	b.n	100547a6 <GAT_att_cmn_handle_disconnec_iterate_f+0x1e>
10054798:	8962      	ldrh	r2, [r4, #10]
1005479a:	8921      	ldrh	r1, [r4, #8]
1005479c:	2002      	movs	r0, #2
1005479e:	f00e fd15 	bl	100631cc <aci_gatt_proc_timeout_event_push_noinline>
100547a2:	2800      	cmp	r0, #0
100547a4:	d000      	beq.n	100547a8 <GAT_att_cmn_handle_disconnec_iterate_f+0x20>
100547a6:	bdb0      	pop	{r4, r5, r7, pc}
100547a8:	8920      	ldrh	r0, [r4, #8]
100547aa:	8961      	ldrh	r1, [r4, #10]
100547ac:	2904      	cmp	r1, #4
100547ae:	d102      	bne.n	100547b6 <GAT_att_cmn_handle_disconnec_iterate_f+0x2e>
100547b0:	f000 f8ac 	bl	1005490c <GAT_att_cmn_disconnection>
100547b4:	e7ee      	b.n	10054794 <GAT_att_cmn_handle_disconnec_iterate_f+0xc>
100547b6:	f000 fb25 	bl	10054e04 <GAT_att_srv_bearer_close>
100547ba:	8961      	ldrh	r1, [r4, #10]
100547bc:	8920      	ldrh	r0, [r4, #8]
100547be:	f00f fc44 	bl	1006404a <GAT_att_clt_bearer_close>
100547c2:	2000      	movs	r0, #0
100547c4:	8120      	strh	r0, [r4, #8]
100547c6:	4909      	ldr	r1, [pc, #36]	@ (100547ec <__arm_cp.6_0>)
100547c8:	6809      	ldr	r1, [r1, #0]
100547ca:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
100547cc:	42a3      	cmp	r3, r4
100547ce:	d005      	beq.n	100547dc <GAT_att_cmn_handle_disconnec_iterate_f+0x54>
100547d0:	461a      	mov	r2, r3
100547d2:	691b      	ldr	r3, [r3, #16]
100547d4:	42a3      	cmp	r3, r4
100547d6:	d1fb      	bne.n	100547d0 <GAT_att_cmn_handle_disconnec_iterate_f+0x48>
100547d8:	3210      	adds	r2, #16
100547da:	e001      	b.n	100547e0 <GAT_att_cmn_handle_disconnec_iterate_f+0x58>
100547dc:	460a      	mov	r2, r1
100547de:	3234      	adds	r2, #52	@ 0x34
100547e0:	6923      	ldr	r3, [r4, #16]
100547e2:	6013      	str	r3, [r2, #0]
100547e4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
100547e6:	6122      	str	r2, [r4, #16]
100547e8:	630c      	str	r4, [r1, #48]	@ 0x30
100547ea:	bdb0      	pop	{r4, r5, r7, pc}

100547ec <__arm_cp.6_0>:
100547ec:	200010ac 	.word	0x200010ac

100547f0 <GAT_att_cmn_tx_pool_evt_tsk>:
100547f0:	b580      	push	{r7, lr}
100547f2:	2000      	movs	r0, #0
100547f4:	f7fe f9d8 	bl	10052ba8 <ACL_pkt_get_available_mem_buffers>
100547f8:	490d      	ldr	r1, [pc, #52]	@ (10054830 <__arm_cp.8_0>)
100547fa:	8a09      	ldrh	r1, [r1, #16]
100547fc:	3125      	adds	r1, #37	@ 0x25
100547fe:	0949      	lsrs	r1, r1, #5
10054800:	4288      	cmp	r0, r1
10054802:	d90f      	bls.n	10054824 <GAT_att_cmn_tx_pool_evt_tsk+0x34>
10054804:	1c49      	adds	r1, r1, #1
10054806:	f7ec fd1f 	bl	10041248 <__udivsi3>
1005480a:	4602      	mov	r2, r0
1005480c:	2042      	movs	r0, #66	@ 0x42
1005480e:	2100      	movs	r1, #0
10054810:	f00e fe4c 	bl	100634ac <aci_gatt_tx_pool_available_event_push_noinline>
10054814:	2800      	cmp	r0, #0
10054816:	d004      	beq.n	10054822 <GAT_att_cmn_tx_pool_evt_tsk+0x32>
10054818:	2008      	movs	r0, #8
1005481a:	f00d fe4d 	bl	100624b8 <tsk_notify_idx>
1005481e:	f7ef f97c 	bl	10043b1a <BLE_STACK_ProcessRequest>
10054822:	bd80      	pop	{r7, pc}
10054824:	2008      	movs	r0, #8
10054826:	2100      	movs	r1, #0
10054828:	f00d fe58 	bl	100624dc <tsk_wait_resource_idx>
1005482c:	bd80      	pop	{r7, pc}
1005482e:	46c0      	nop			@ (mov r8, r8)

10054830 <__arm_cp.8_0>:
10054830:	20001108 	.word	0x20001108

10054834 <GAT_att_cmn_rcv>:
10054834:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10054836:	460c      	mov	r4, r1
10054838:	2800      	cmp	r0, #0
1005483a:	d013      	beq.n	10054864 <GAT_att_cmn_rcv+0x30>
1005483c:	8825      	ldrh	r5, [r4, #0]
1005483e:	4620      	mov	r0, r4
10054840:	f003 f86f 	bl	10057922 <L2C_get_cid_from_basic_packet_header>
10054844:	4601      	mov	r1, r0
10054846:	4628      	mov	r0, r5
10054848:	f000 f82e 	bl	100548a8 <GAT_att_cmn_get_channel_descr_p>
1005484c:	2800      	cmp	r0, #0
1005484e:	d009      	beq.n	10054864 <GAT_att_cmn_rcv+0x30>
10054850:	8860      	ldrh	r0, [r4, #2]
10054852:	2800      	cmp	r0, #0
10054854:	d006      	beq.n	10054864 <GAT_att_cmn_rcv+0x30>
10054856:	89a1      	ldrh	r1, [r4, #12]
10054858:	291f      	cmp	r1, #31
1005485a:	d808      	bhi.n	1005486e <GAT_att_cmn_rcv+0x3a>
1005485c:	a801      	add	r0, sp, #4
1005485e:	8001      	strh	r1, [r0, #0]
10054860:	6860      	ldr	r0, [r4, #4]
10054862:	e00a      	b.n	1005487a <GAT_att_cmn_rcv+0x46>
10054864:	4620      	mov	r0, r4
10054866:	f7fe f9a5 	bl	10052bb4 <ACL_pkt_release>
1005486a:	2000      	movs	r0, #0
1005486c:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1005486e:	6860      	ldr	r0, [r4, #4]
10054870:	ad01      	add	r5, sp, #4
10054872:	462a      	mov	r2, r5
10054874:	f00a feb9 	bl	1005f5ea <Mem_Buff_get_buff_off>
10054878:	8829      	ldrh	r1, [r5, #0]
1005487a:	1840      	adds	r0, r0, r1
1005487c:	7900      	ldrb	r0, [r0, #4]
1005487e:	07c1      	lsls	r1, r0, #31
10054880:	d104      	bne.n	1005488c <GAT_att_cmn_rcv+0x58>
10054882:	281b      	cmp	r0, #27
10054884:	d008      	beq.n	10054898 <GAT_att_cmn_rcv+0x64>
10054886:	281d      	cmp	r0, #29
10054888:	d006      	beq.n	10054898 <GAT_att_cmn_rcv+0x64>
1005488a:	e009      	b.n	100548a0 <GAT_att_cmn_rcv+0x6c>
1005488c:	281e      	cmp	r0, #30
1005488e:	d303      	bcc.n	10054898 <GAT_att_cmn_rcv+0x64>
10054890:	2102      	movs	r1, #2
10054892:	4308      	orrs	r0, r1
10054894:	2823      	cmp	r0, #35	@ 0x23
10054896:	d103      	bne.n	100548a0 <GAT_att_cmn_rcv+0x6c>
10054898:	4620      	mov	r0, r4
1005489a:	f00f fae9 	bl	10063e70 <GAT_att_clt_rcv>
1005489e:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
100548a0:	4620      	mov	r0, r4
100548a2:	f000 f93b 	bl	10054b1c <GAT_att_srv_rcv>
100548a6:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100548a8 <GAT_att_cmn_get_channel_descr_p>:
100548a8:	4a07      	ldr	r2, [pc, #28]	@ (100548c8 <__arm_cp.10_0>)
100548aa:	6812      	ldr	r2, [r2, #0]
100548ac:	3234      	adds	r2, #52	@ 0x34
100548ae:	6812      	ldr	r2, [r2, #0]
100548b0:	2a00      	cmp	r2, #0
100548b2:	d007      	beq.n	100548c4 <GAT_att_cmn_get_channel_descr_p+0x1c>
100548b4:	8913      	ldrh	r3, [r2, #8]
100548b6:	4283      	cmp	r3, r0
100548b8:	d102      	bne.n	100548c0 <GAT_att_cmn_get_channel_descr_p+0x18>
100548ba:	8953      	ldrh	r3, [r2, #10]
100548bc:	428b      	cmp	r3, r1
100548be:	d001      	beq.n	100548c4 <GAT_att_cmn_get_channel_descr_p+0x1c>
100548c0:	3210      	adds	r2, #16
100548c2:	e7f4      	b.n	100548ae <GAT_att_cmn_get_channel_descr_p+0x6>
100548c4:	4610      	mov	r0, r2
100548c6:	4770      	bx	lr

100548c8 <__arm_cp.10_0>:
100548c8:	200010ac 	.word	0x200010ac

100548cc <GAT_att_cmn_connection>:
100548cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100548ce:	4604      	mov	r4, r0
100548d0:	4e0d      	ldr	r6, [pc, #52]	@ (10054908 <__arm_cp.11_0>)
100548d2:	6830      	ldr	r0, [r6, #0]
100548d4:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
100548d6:	6929      	ldr	r1, [r5, #16]
100548d8:	62c1      	str	r1, [r0, #44]	@ 0x2c
100548da:	882f      	ldrh	r7, [r5, #0]
100548dc:	2100      	movs	r1, #0
100548de:	2214      	movs	r2, #20
100548e0:	4628      	mov	r0, r5
100548e2:	f7f1 fbc7 	bl	10046074 <BLEPLAT_MemSet>
100548e6:	2004      	movs	r0, #4
100548e8:	8168      	strh	r0, [r5, #10]
100548ea:	2017      	movs	r0, #23
100548ec:	80e8      	strh	r0, [r5, #6]
100548ee:	812c      	strh	r4, [r5, #8]
100548f0:	802f      	strh	r7, [r5, #0]
100548f2:	6830      	ldr	r0, [r6, #0]
100548f4:	6b41      	ldr	r1, [r0, #52]	@ 0x34
100548f6:	6345      	str	r5, [r0, #52]	@ 0x34
100548f8:	6129      	str	r1, [r5, #16]
100548fa:	4620      	mov	r0, r4
100548fc:	f000 fa7e 	bl	10054dfc <GAT_att_srv_connection>
10054900:	4620      	mov	r0, r4
10054902:	f00f fb9e 	bl	10064042 <GAT_att_clt_connection>
10054906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10054908 <__arm_cp.11_0>:
10054908:	200010ac 	.word	0x200010ac

1005490c <GAT_att_cmn_disconnection>:
1005490c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005490e:	4604      	mov	r4, r0
10054910:	f00d fc6f 	bl	100621f2 <smp_sap_forget_device_upon_disconnection>
10054914:	481c      	ldr	r0, [pc, #112]	@ (10054988 <__arm_cp.12_0>)
10054916:	6800      	ldr	r0, [r0, #0]
10054918:	6b46      	ldr	r6, [r0, #52]	@ 0x34
1005491a:	2e00      	cmp	r6, #0
1005491c:	d032      	beq.n	10054984 <GAT_att_cmn_disconnection+0x78>
1005491e:	4637      	mov	r7, r6
10054920:	6936      	ldr	r6, [r6, #16]
10054922:	8938      	ldrh	r0, [r7, #8]
10054924:	42a0      	cmp	r0, r4
10054926:	d1f8      	bne.n	1005491a <GAT_att_cmn_disconnection+0xe>
10054928:	2500      	movs	r5, #0
1005492a:	897a      	ldrh	r2, [r7, #10]
1005492c:	b2e8      	uxtb	r0, r5
1005492e:	2803      	cmp	r0, #3
10054930:	d804      	bhi.n	1005493c <GAT_att_cmn_disconnection+0x30>
10054932:	4621      	mov	r1, r4
10054934:	f000 f82a 	bl	1005498c <GAT_att_cmn_stop_timer>
10054938:	1c6d      	adds	r5, r5, #1
1005493a:	e7f6      	b.n	1005492a <GAT_att_cmn_disconnection+0x1e>
1005493c:	4620      	mov	r0, r4
1005493e:	4611      	mov	r1, r2
10054940:	f000 fa60 	bl	10054e04 <GAT_att_srv_bearer_close>
10054944:	8979      	ldrh	r1, [r7, #10]
10054946:	4620      	mov	r0, r4
10054948:	f00f fb7f 	bl	1006404a <GAT_att_clt_bearer_close>
1005494c:	2000      	movs	r0, #0
1005494e:	8138      	strh	r0, [r7, #8]
10054950:	480d      	ldr	r0, [pc, #52]	@ (10054988 <__arm_cp.12_0>)
10054952:	6800      	ldr	r0, [r0, #0]
10054954:	6b42      	ldr	r2, [r0, #52]	@ 0x34
10054956:	42ba      	cmp	r2, r7
10054958:	d005      	beq.n	10054966 <GAT_att_cmn_disconnection+0x5a>
1005495a:	4611      	mov	r1, r2
1005495c:	6912      	ldr	r2, [r2, #16]
1005495e:	42ba      	cmp	r2, r7
10054960:	d1fb      	bne.n	1005495a <GAT_att_cmn_disconnection+0x4e>
10054962:	3110      	adds	r1, #16
10054964:	e001      	b.n	1005496a <GAT_att_cmn_disconnection+0x5e>
10054966:	4601      	mov	r1, r0
10054968:	3134      	adds	r1, #52	@ 0x34
1005496a:	693a      	ldr	r2, [r7, #16]
1005496c:	600a      	str	r2, [r1, #0]
1005496e:	8979      	ldrh	r1, [r7, #10]
10054970:	2904      	cmp	r1, #4
10054972:	d103      	bne.n	1005497c <GAT_att_cmn_disconnection+0x70>
10054974:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
10054976:	6139      	str	r1, [r7, #16]
10054978:	62c7      	str	r7, [r0, #44]	@ 0x2c
1005497a:	e7ce      	b.n	1005491a <GAT_att_cmn_disconnection+0xe>
1005497c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
1005497e:	6139      	str	r1, [r7, #16]
10054980:	6307      	str	r7, [r0, #48]	@ 0x30
10054982:	e7ca      	b.n	1005491a <GAT_att_cmn_disconnection+0xe>
10054984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10054986:	46c0      	nop			@ (mov r8, r8)

10054988 <__arm_cp.12_0>:
10054988:	200010ac 	.word	0x200010ac

1005498c <GAT_att_cmn_stop_timer>:
1005498c:	b510      	push	{r4, lr}
1005498e:	4604      	mov	r4, r0
10054990:	4608      	mov	r0, r1
10054992:	4611      	mov	r1, r2
10054994:	f000 f858 	bl	10054a48 <GAT_att_cmn_get_timer_index>
10054998:	0080      	lsls	r0, r0, #2
1005499a:	1900      	adds	r0, r0, r4
1005499c:	b2c1      	uxtb	r1, r0
1005499e:	4802      	ldr	r0, [pc, #8]	@ (100549a8 <__arm_cp.13_0>)
100549a0:	6800      	ldr	r0, [r0, #0]
100549a2:	f00d fdfc 	bl	1006259e <CST_stop>
100549a6:	bd10      	pop	{r4, pc}

100549a8 <__arm_cp.13_0>:
100549a8:	200010ac 	.word	0x200010ac

100549ac <GAT_att_cmn_send>:
100549ac:	b5b0      	push	{r4, r5, r7, lr}
100549ae:	460c      	mov	r4, r1
100549b0:	4605      	mov	r5, r0
100549b2:	8848      	ldrh	r0, [r1, #2]
100549b4:	1d00      	adds	r0, r0, #4
100549b6:	b281      	uxth	r1, r0
100549b8:	4620      	mov	r0, r4
100549ba:	f7fe f904 	bl	10052bc6 <ACL_pkt_resize>
100549be:	4628      	mov	r0, r5
100549c0:	4621      	mov	r1, r4
100549c2:	f003 f8d9 	bl	10057b78 <L2C_send_frame>
100549c6:	2800      	cmp	r0, #0
100549c8:	d004      	beq.n	100549d4 <GAT_att_cmn_send+0x28>
100549ca:	4620      	mov	r0, r4
100549cc:	f7fe f8f2 	bl	10052bb4 <ACL_pkt_release>
100549d0:	2081      	movs	r0, #129	@ 0x81
100549d2:	bdb0      	pop	{r4, r5, r7, pc}
100549d4:	2000      	movs	r0, #0
100549d6:	bdb0      	pop	{r4, r5, r7, pc}

100549d8 <GAT_att_cmn_dscr_flag_check_is_not_set_f>:
100549d8:	8809      	ldrh	r1, [r1, #0]
100549da:	8880      	ldrh	r0, [r0, #4]
100549dc:	4008      	ands	r0, r1
100549de:	d000      	beq.n	100549e2 <GAT_att_cmn_dscr_flag_check_is_not_set_f+0xa>
100549e0:	2086      	movs	r0, #134	@ 0x86
100549e2:	4770      	bx	lr

100549e4 <GAT_att_cmn_dscr_flag_set_f>:
100549e4:	8809      	ldrh	r1, [r1, #0]
100549e6:	8882      	ldrh	r2, [r0, #4]
100549e8:	430a      	orrs	r2, r1
100549ea:	8082      	strh	r2, [r0, #4]
100549ec:	2000      	movs	r0, #0
100549ee:	4770      	bx	lr

100549f0 <GAT_att_cmn_dscr_flag_clear_f>:
100549f0:	8809      	ldrh	r1, [r1, #0]
100549f2:	8882      	ldrh	r2, [r0, #4]
100549f4:	438a      	bics	r2, r1
100549f6:	8082      	strh	r2, [r0, #4]
100549f8:	2000      	movs	r0, #0
100549fa:	4770      	bx	lr

100549fc <GAT_att_cmn_get_conn_index>:
100549fc:	4907      	ldr	r1, [pc, #28]	@ (10054a1c <__arm_cp.22_0>)
100549fe:	6809      	ldr	r1, [r1, #0]
10054a00:	3134      	adds	r1, #52	@ 0x34
10054a02:	6809      	ldr	r1, [r1, #0]
10054a04:	2900      	cmp	r1, #0
10054a06:	d004      	beq.n	10054a12 <GAT_att_cmn_get_conn_index+0x16>
10054a08:	890a      	ldrh	r2, [r1, #8]
10054a0a:	4282      	cmp	r2, r0
10054a0c:	d003      	beq.n	10054a16 <GAT_att_cmn_get_conn_index+0x1a>
10054a0e:	3110      	adds	r1, #16
10054a10:	e7f7      	b.n	10054a02 <GAT_att_cmn_get_conn_index+0x6>
10054a12:	20ff      	movs	r0, #255	@ 0xff
10054a14:	4770      	bx	lr
10054a16:	7808      	ldrb	r0, [r1, #0]
10054a18:	4770      	bx	lr
10054a1a:	46c0      	nop			@ (mov r8, r8)

10054a1c <__arm_cp.22_0>:
10054a1c:	200010ac 	.word	0x200010ac

10054a20 <GAT_att_cmn_start_timer>:
10054a20:	b510      	push	{r4, lr}
10054a22:	4604      	mov	r4, r0
10054a24:	4608      	mov	r0, r1
10054a26:	4611      	mov	r1, r2
10054a28:	f000 f80e 	bl	10054a48 <GAT_att_cmn_get_timer_index>
10054a2c:	0080      	lsls	r0, r0, #2
10054a2e:	1900      	adds	r0, r0, r4
10054a30:	b2c1      	uxtb	r1, r0
10054a32:	4803      	ldr	r0, [pc, #12]	@ (10054a40 <__arm_cp.23_0>)
10054a34:	6800      	ldr	r0, [r0, #0]
10054a36:	2200      	movs	r2, #0
10054a38:	4b02      	ldr	r3, [pc, #8]	@ (10054a44 <__arm_cp.23_1>)
10054a3a:	f00d fde6 	bl	1006260a <CST_start>
10054a3e:	bd10      	pop	{r4, pc}

10054a40 <__arm_cp.23_0>:
10054a40:	200010ac 	.word	0x200010ac

10054a44 <__arm_cp.23_1>:
10054a44:	00007530 	.word	0x00007530

10054a48 <GAT_att_cmn_get_timer_index>:
10054a48:	4a08      	ldr	r2, [pc, #32]	@ (10054a6c <__arm_cp.24_0>)
10054a4a:	6812      	ldr	r2, [r2, #0]
10054a4c:	3234      	adds	r2, #52	@ 0x34
10054a4e:	6812      	ldr	r2, [r2, #0]
10054a50:	2a00      	cmp	r2, #0
10054a52:	d007      	beq.n	10054a64 <GAT_att_cmn_get_timer_index+0x1c>
10054a54:	8913      	ldrh	r3, [r2, #8]
10054a56:	4283      	cmp	r3, r0
10054a58:	d102      	bne.n	10054a60 <GAT_att_cmn_get_timer_index+0x18>
10054a5a:	8953      	ldrh	r3, [r2, #10]
10054a5c:	428b      	cmp	r3, r1
10054a5e:	d003      	beq.n	10054a68 <GAT_att_cmn_get_timer_index+0x20>
10054a60:	3210      	adds	r2, #16
10054a62:	e7f4      	b.n	10054a4e <GAT_att_cmn_get_timer_index+0x6>
10054a64:	20ff      	movs	r0, #255	@ 0xff
10054a66:	4770      	bx	lr
10054a68:	7850      	ldrb	r0, [r2, #1]
10054a6a:	4770      	bx	lr

10054a6c <__arm_cp.24_0>:
10054a6c:	200010ac 	.word	0x200010ac

10054a70 <GAT_att_cmn_timeout_cb>:
10054a70:	b580      	push	{r7, lr}
10054a72:	0881      	lsrs	r1, r0, #2
10054a74:	480a      	ldr	r0, [pc, #40]	@ (10054aa0 <__arm_cp.25_0>)
10054a76:	6800      	ldr	r0, [r0, #0]
10054a78:	3034      	adds	r0, #52	@ 0x34
10054a7a:	6800      	ldr	r0, [r0, #0]
10054a7c:	2800      	cmp	r0, #0
10054a7e:	d00e      	beq.n	10054a9e <GAT_att_cmn_timeout_cb+0x2e>
10054a80:	7842      	ldrb	r2, [r0, #1]
10054a82:	428a      	cmp	r2, r1
10054a84:	d001      	beq.n	10054a8a <GAT_att_cmn_timeout_cb+0x1a>
10054a86:	3010      	adds	r0, #16
10054a88:	e7f7      	b.n	10054a7a <GAT_att_cmn_timeout_cb+0xa>
10054a8a:	2101      	movs	r1, #1
10054a8c:	0209      	lsls	r1, r1, #8
10054a8e:	8882      	ldrh	r2, [r0, #4]
10054a90:	430a      	orrs	r2, r1
10054a92:	8082      	strh	r2, [r0, #4]
10054a94:	2007      	movs	r0, #7
10054a96:	f00d fd0f 	bl	100624b8 <tsk_notify_idx>
10054a9a:	f7ef f83e 	bl	10043b1a <BLE_STACK_ProcessRequest>
10054a9e:	bd80      	pop	{r7, pc}

10054aa0 <__arm_cp.25_0>:
10054aa0:	200010ac 	.word	0x200010ac

10054aa4 <GAT_att_cmn_get_pckt>:
10054aa4:	b510      	push	{r4, lr}
10054aa6:	8944      	ldrh	r4, [r0, #10]
10054aa8:	2c04      	cmp	r4, #4
10054aaa:	d000      	beq.n	10054aae <GAT_att_cmn_get_pckt+0xa>
10054aac:	2406      	movs	r4, #6
10054aae:	1861      	adds	r1, r4, r1
10054ab0:	b28a      	uxth	r2, r1
10054ab2:	8901      	ldrh	r1, [r0, #8]
10054ab4:	2000      	movs	r0, #0
10054ab6:	f7fe f85b 	bl	10052b70 <ACL_pkt_get>
10054aba:	2800      	cmp	r0, #0
10054abc:	d000      	beq.n	10054ac0 <GAT_att_cmn_get_pckt+0x1c>
10054abe:	8184      	strh	r4, [r0, #12]
10054ac0:	bd10      	pop	{r4, pc}
	...

10054ac4 <GAT_att_cmn_no_eatt_channels_are_active>:
10054ac4:	4908      	ldr	r1, [pc, #32]	@ (10054ae8 <__arm_cp.27_0>)
10054ac6:	6809      	ldr	r1, [r1, #0]
10054ac8:	3134      	adds	r1, #52	@ 0x34
10054aca:	6809      	ldr	r1, [r1, #0]
10054acc:	2900      	cmp	r1, #0
10054ace:	d007      	beq.n	10054ae0 <GAT_att_cmn_no_eatt_channels_are_active+0x1c>
10054ad0:	890a      	ldrh	r2, [r1, #8]
10054ad2:	4282      	cmp	r2, r0
10054ad4:	d102      	bne.n	10054adc <GAT_att_cmn_no_eatt_channels_are_active+0x18>
10054ad6:	894a      	ldrh	r2, [r1, #10]
10054ad8:	2a04      	cmp	r2, #4
10054ada:	d101      	bne.n	10054ae0 <GAT_att_cmn_no_eatt_channels_are_active+0x1c>
10054adc:	3110      	adds	r1, #16
10054ade:	e7f4      	b.n	10054aca <GAT_att_cmn_no_eatt_channels_are_active+0x6>
10054ae0:	4248      	negs	r0, r1
10054ae2:	4148      	adcs	r0, r1
10054ae4:	4770      	bx	lr
10054ae6:	46c0      	nop			@ (mov r8, r8)

10054ae8 <__arm_cp.27_0>:
10054ae8:	200010ac 	.word	0x200010ac

10054aec <GAT_att_srv_init>:
10054aec:	b510      	push	{r4, lr}
10054aee:	4c08      	ldr	r4, [pc, #32]	@ (10054b10 <__arm_cp.0_0>)
10054af0:	6820      	ldr	r0, [r4, #0]
10054af2:	3040      	adds	r0, #64	@ 0x40
10054af4:	f00d fed2 	bl	1006289c <ACL_list_init>
10054af8:	6820      	ldr	r0, [r4, #0]
10054afa:	3038      	adds	r0, #56	@ 0x38
10054afc:	f00d fece 	bl	1006289c <ACL_list_init>
10054b00:	4804      	ldr	r0, [pc, #16]	@ (10054b14 <__arm_cp.0_1>)
10054b02:	4905      	ldr	r1, [pc, #20]	@ (10054b18 <__arm_cp.0_2>)
10054b04:	223c      	movs	r2, #60	@ 0x3c
10054b06:	f7f1 faa5 	bl	10046054 <BLEPLAT_MemCpy>
10054b0a:	f001 f901 	bl	10055d10 <GAT_srv_init>
10054b0e:	bd10      	pop	{r4, pc}

10054b10 <__arm_cp.0_0>:
10054b10:	200010ac 	.word	0x200010ac

10054b14 <__arm_cp.0_1>:
10054b14:	200010b0 	.word	0x200010b0

10054b18 <__arm_cp.0_2>:
10054b18:	10069f50 	.word	0x10069f50

10054b1c <GAT_att_srv_rcv>:
10054b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
10054b1e:	b087      	sub	sp, #28
10054b20:	4604      	mov	r4, r0
10054b22:	8805      	ldrh	r5, [r0, #0]
10054b24:	f002 fefd 	bl	10057922 <L2C_get_cid_from_basic_packet_header>
10054b28:	4601      	mov	r1, r0
10054b2a:	4628      	mov	r0, r5
10054b2c:	f7ff febc 	bl	100548a8 <GAT_att_cmn_get_channel_descr_p>
10054b30:	4605      	mov	r5, r0
10054b32:	4620      	mov	r0, r4
10054b34:	f000 f853 	bl	10054bde <GAT_att_cmn_get_opcode>
10054b38:	4607      	mov	r7, r0
10054b3a:	f000 f855 	bl	10054be8 <GAT_att_srv_get_exec_fn_id_by_op>
10054b3e:	280f      	cmp	r0, #15
10054b40:	d114      	bne.n	10054b6c <GAT_att_srv_rcv+0x50>
10054b42:	2105      	movs	r1, #5
10054b44:	4628      	mov	r0, r5
10054b46:	f7ff ffad 	bl	10054aa4 <GAT_att_cmn_get_pckt>
10054b4a:	2800      	cmp	r0, #0
10054b4c:	d034      	beq.n	10054bb8 <GAT_att_srv_rcv+0x9c>
10054b4e:	4606      	mov	r6, r0
10054b50:	2100      	movs	r1, #0
10054b52:	2206      	movs	r2, #6
10054b54:	4638      	mov	r0, r7
10054b56:	4633      	mov	r3, r6
10054b58:	f000 faf6 	bl	10055148 <GAT_att_srv_write_err_packet>
10054b5c:	8968      	ldrh	r0, [r5, #10]
10054b5e:	4631      	mov	r1, r6
10054b60:	f7ff ff24 	bl	100549ac <GAT_att_cmn_send>
10054b64:	4606      	mov	r6, r0
10054b66:	2800      	cmp	r0, #0
10054b68:	d136      	bne.n	10054bd8 <GAT_att_srv_rcv+0xbc>
10054b6a:	e031      	b.n	10054bd0 <GAT_att_srv_rcv+0xb4>
10054b6c:	9501      	str	r5, [sp, #4]
10054b6e:	2500      	movs	r5, #0
10054b70:	2f1e      	cmp	r7, #30
10054b72:	462e      	mov	r6, r5
10054b74:	d016      	beq.n	10054ba4 <GAT_att_srv_rcv+0x88>
10054b76:	2040      	movs	r0, #64	@ 0x40
10054b78:	4007      	ands	r7, r0
10054b7a:	462e      	mov	r6, r5
10054b7c:	d112      	bne.n	10054ba4 <GAT_att_srv_rcv+0x88>
10054b7e:	9b01      	ldr	r3, [sp, #4]
10054b80:	8898      	ldrh	r0, [r3, #4]
10054b82:	07c0      	lsls	r0, r0, #31
10054b84:	d11a      	bne.n	10054bbc <GAT_att_srv_rcv+0xa0>
10054b86:	895a      	ldrh	r2, [r3, #10]
10054b88:	8919      	ldrh	r1, [r3, #8]
10054b8a:	2700      	movs	r7, #0
10054b8c:	4638      	mov	r0, r7
10054b8e:	f7ff ff47 	bl	10054a20 <GAT_att_cmn_start_timer>
10054b92:	4606      	mov	r6, r0
10054b94:	2800      	cmp	r0, #0
10054b96:	d105      	bne.n	10054ba4 <GAT_att_srv_rcv+0x88>
10054b98:	9a01      	ldr	r2, [sp, #4]
10054b9a:	8890      	ldrh	r0, [r2, #4]
10054b9c:	2101      	movs	r1, #1
10054b9e:	4301      	orrs	r1, r0
10054ba0:	8091      	strh	r1, [r2, #4]
10054ba2:	463e      	mov	r6, r7
10054ba4:	a802      	add	r0, sp, #8
10054ba6:	8005      	strh	r5, [r0, #0]
10054ba8:	9506      	str	r5, [sp, #24]
10054baa:	9505      	str	r5, [sp, #20]
10054bac:	9901      	ldr	r1, [sp, #4]
10054bae:	9104      	str	r1, [sp, #16]
10054bb0:	9403      	str	r4, [sp, #12]
10054bb2:	f000 f853 	bl	10054c5c <GAT_att_srv_run>
10054bb6:	e00f      	b.n	10054bd8 <GAT_att_srv_rcv+0xbc>
10054bb8:	2688      	movs	r6, #136	@ 0x88
10054bba:	e00d      	b.n	10054bd8 <GAT_att_srv_rcv+0xbc>
10054bbc:	3308      	adds	r3, #8
10054bbe:	2042      	movs	r0, #66	@ 0x42
10054bc0:	2103      	movs	r1, #3
10054bc2:	2202      	movs	r2, #2
10054bc4:	f00f f8a0 	bl	10063d08 <aci_hal_fw_error_event_push_noinline>
10054bc8:	2800      	cmp	r0, #0
10054bca:	d001      	beq.n	10054bd0 <GAT_att_srv_rcv+0xb4>
10054bcc:	2684      	movs	r6, #132	@ 0x84
10054bce:	e003      	b.n	10054bd8 <GAT_att_srv_rcv+0xbc>
10054bd0:	4620      	mov	r0, r4
10054bd2:	f7fd ffef 	bl	10052bb4 <ACL_pkt_release>
10054bd6:	2600      	movs	r6, #0
10054bd8:	4630      	mov	r0, r6
10054bda:	b007      	add	sp, #28
10054bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

10054bde <GAT_att_cmn_get_opcode>:
10054bde:	b580      	push	{r7, lr}
10054be0:	8981      	ldrh	r1, [r0, #12]
10054be2:	f001 f84c 	bl	10055c7e <ACL_pkt_read_8b>
10054be6:	bd80      	pop	{r7, pc}

10054be8 <GAT_att_srv_get_exec_fn_id_by_op>:
10054be8:	1e81      	subs	r1, r0, #2
10054bea:	291e      	cmp	r1, #30
10054bec:	d816      	bhi.n	10054c1c <GAT_att_srv_get_exec_fn_id_by_op+0x34>
10054bee:	2000      	movs	r0, #0
10054bf0:	4479      	add	r1, pc
10054bf2:	7909      	ldrb	r1, [r1, #4]
10054bf4:	0049      	lsls	r1, r1, #1
10054bf6:	448f      	add	pc, r1
10054bf8:	170f1718 	.word	0x170f1718
10054bfc:	171b1719 	.word	0x171b1719
10054c00:	171f171d 	.word	0x171f171d
10054c04:	17231721 	.word	0x17231721
10054c08:	17171725 	.word	0x17171725
10054c0c:	17291727 	.word	0x17291727
10054c10:	17171717 	.word	0x17171717
10054c14:	002d172b 	.word	0x002d172b
10054c18:	2001      	movs	r0, #1
10054c1a:	4770      	bx	lr
10054c1c:	2852      	cmp	r0, #82	@ 0x52
10054c1e:	d01b      	beq.n	10054c58 <GAT_att_srv_get_exec_fn_id_by_op+0x70>
10054c20:	28d2      	cmp	r0, #210	@ 0xd2
10054c22:	d101      	bne.n	10054c28 <GAT_att_srv_get_exec_fn_id_by_op+0x40>
10054c24:	200a      	movs	r0, #10
10054c26:	4770      	bx	lr
10054c28:	200f      	movs	r0, #15
10054c2a:	4770      	bx	lr
10054c2c:	2002      	movs	r0, #2
10054c2e:	4770      	bx	lr
10054c30:	2003      	movs	r0, #3
10054c32:	4770      	bx	lr
10054c34:	2004      	movs	r0, #4
10054c36:	4770      	bx	lr
10054c38:	2005      	movs	r0, #5
10054c3a:	4770      	bx	lr
10054c3c:	2006      	movs	r0, #6
10054c3e:	4770      	bx	lr
10054c40:	2007      	movs	r0, #7
10054c42:	4770      	bx	lr
10054c44:	2008      	movs	r0, #8
10054c46:	4770      	bx	lr
10054c48:	200b      	movs	r0, #11
10054c4a:	4770      	bx	lr
10054c4c:	200c      	movs	r0, #12
10054c4e:	4770      	bx	lr
10054c50:	200d      	movs	r0, #13
10054c52:	4770      	bx	lr
10054c54:	200e      	movs	r0, #14
10054c56:	4770      	bx	lr
10054c58:	2009      	movs	r0, #9
10054c5a:	4770      	bx	lr

10054c5c <GAT_att_srv_run>:
10054c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10054c5e:	b085      	sub	sp, #20
10054c60:	4604      	mov	r4, r0
10054c62:	7800      	ldrb	r0, [r0, #0]
10054c64:	2800      	cmp	r0, #0
10054c66:	d107      	bne.n	10054c78 <GAT_att_srv_run+0x1c>
10054c68:	6860      	ldr	r0, [r4, #4]
10054c6a:	f7ff ffb8 	bl	10054bde <GAT_att_cmn_get_opcode>
10054c6e:	7060      	strb	r0, [r4, #1]
10054c70:	68a5      	ldr	r5, [r4, #8]
10054c72:	68e8      	ldr	r0, [r5, #12]
10054c74:	2800      	cmp	r0, #0
10054c76:	d03c      	beq.n	10054cf2 <GAT_att_srv_run+0x96>
10054c78:	7865      	ldrb	r5, [r4, #1]
10054c7a:	4628      	mov	r0, r5
10054c7c:	f7ff ffb4 	bl	10054be8 <GAT_att_srv_get_exec_fn_id_by_op>
10054c80:	280e      	cmp	r0, #14
10054c82:	d808      	bhi.n	10054c96 <GAT_att_srv_run+0x3a>
10054c84:	0080      	lsls	r0, r0, #2
10054c86:	495b      	ldr	r1, [pc, #364]	@ (10054df4 <__arm_cp.4_3>)
10054c88:	5809      	ldr	r1, [r1, r0]
10054c8a:	2900      	cmp	r1, #0
10054c8c:	d003      	beq.n	10054c96 <GAT_att_srv_run+0x3a>
10054c8e:	4620      	mov	r0, r4
10054c90:	4788      	blx	r1
10054c92:	4607      	mov	r7, r0
10054c94:	e007      	b.n	10054ca6 <GAT_att_srv_run+0x4a>
10054c96:	68a0      	ldr	r0, [r4, #8]
10054c98:	68c3      	ldr	r3, [r0, #12]
10054c9a:	2100      	movs	r1, #0
10054c9c:	2206      	movs	r2, #6
10054c9e:	4628      	mov	r0, r5
10054ca0:	f000 fa52 	bl	10055148 <GAT_att_srv_write_err_packet>
10054ca4:	2786      	movs	r7, #134	@ 0x86
10054ca6:	6861      	ldr	r1, [r4, #4]
10054ca8:	2900      	cmp	r1, #0
10054caa:	d019      	beq.n	10054ce0 <GAT_att_srv_run+0x84>
10054cac:	2f88      	cmp	r7, #136	@ 0x88
10054cae:	d003      	beq.n	10054cb8 <GAT_att_srv_run+0x5c>
10054cb0:	2f84      	cmp	r7, #132	@ 0x84
10054cb2:	d00c      	beq.n	10054cce <GAT_att_srv_run+0x72>
10054cb4:	2f07      	cmp	r7, #7
10054cb6:	d110      	bne.n	10054cda <GAT_att_srv_run+0x7e>
10054cb8:	484f      	ldr	r0, [pc, #316]	@ (10054df8 <__arm_cp.4_4>)
10054cba:	6800      	ldr	r0, [r0, #0]
10054cbc:	3040      	adds	r0, #64	@ 0x40
10054cbe:	f00d fdf1 	bl	100628a4 <ACL_list_insert_tail>
10054cc2:	2009      	movs	r0, #9
10054cc4:	f00d fbf8 	bl	100624b8 <tsk_notify_idx>
10054cc8:	f7ee ff27 	bl	10043b1a <BLE_STACK_ProcessRequest>
10054ccc:	e008      	b.n	10054ce0 <GAT_att_srv_run+0x84>
10054cce:	484a      	ldr	r0, [pc, #296]	@ (10054df8 <__arm_cp.4_4>)
10054cd0:	6800      	ldr	r0, [r0, #0]
10054cd2:	3038      	adds	r0, #56	@ 0x38
10054cd4:	f00d fde6 	bl	100628a4 <ACL_list_insert_tail>
10054cd8:	e009      	b.n	10054cee <GAT_att_srv_run+0x92>
10054cda:	4608      	mov	r0, r1
10054cdc:	f7fd ff6a 	bl	10052bb4 <ACL_pkt_release>
10054ce0:	2f86      	cmp	r7, #134	@ 0x86
10054ce2:	d001      	beq.n	10054ce8 <GAT_att_srv_run+0x8c>
10054ce4:	2f00      	cmp	r7, #0
10054ce6:	d102      	bne.n	10054cee <GAT_att_srv_run+0x92>
10054ce8:	68a0      	ldr	r0, [r4, #8]
10054cea:	f000 fa46 	bl	1005517a <GAT_att_srv_send_response>
10054cee:	b005      	add	sp, #20
10054cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10054cf2:	6867      	ldr	r7, [r4, #4]
10054cf4:	4638      	mov	r0, r7
10054cf6:	f7ff ff72 	bl	10054bde <GAT_att_cmn_get_opcode>
10054cfa:	4606      	mov	r6, r0
10054cfc:	f7ff ff74 	bl	10054be8 <GAT_att_srv_get_exec_fn_id_by_op>
10054d00:	8879      	ldrh	r1, [r7, #2]
10054d02:	88ea      	ldrh	r2, [r5, #6]
10054d04:	2304      	movs	r3, #4
10054d06:	9302      	str	r3, [sp, #8]
10054d08:	2300      	movs	r3, #0
10054d0a:	4291      	cmp	r1, r2
10054d0c:	d83e      	bhi.n	10054d8c <GAT_att_srv_run+0x130>
10054d0e:	280e      	cmp	r0, #14
10054d10:	d83c      	bhi.n	10054d8c <GAT_att_srv_run+0x130>
10054d12:	9301      	str	r3, [sp, #4]
10054d14:	0042      	lsls	r2, r0, #1
10054d16:	4b34      	ldr	r3, [pc, #208]	@ (10054de8 <__arm_cp.4_0>)
10054d18:	5a9a      	ldrh	r2, [r3, r2]
10054d1a:	4b34      	ldr	r3, [pc, #208]	@ (10054dec <__arm_cp.4_1>)
10054d1c:	40c3      	lsrs	r3, r0
10054d1e:	07db      	lsls	r3, r3, #31
10054d20:	d105      	bne.n	10054d2e <GAT_att_srv_run+0xd2>
10054d22:	2380      	movs	r3, #128	@ 0x80
10054d24:	439a      	bics	r2, r3
10054d26:	4291      	cmp	r1, r2
10054d28:	9b01      	ldr	r3, [sp, #4]
10054d2a:	d003      	beq.n	10054d34 <GAT_att_srv_run+0xd8>
10054d2c:	e02e      	b.n	10054d8c <GAT_att_srv_run+0x130>
10054d2e:	4291      	cmp	r1, r2
10054d30:	9b01      	ldr	r3, [sp, #4]
10054d32:	d32b      	bcc.n	10054d8c <GAT_att_srv_run+0x130>
10054d34:	1e41      	subs	r1, r0, #1
10054d36:	2903      	cmp	r1, #3
10054d38:	d301      	bcc.n	10054d3e <GAT_att_srv_run+0xe2>
10054d3a:	2807      	cmp	r0, #7
10054d3c:	d10d      	bne.n	10054d5a <GAT_att_srv_run+0xfe>
10054d3e:	a904      	add	r1, sp, #16
10054d40:	aa03      	add	r2, sp, #12
10054d42:	9202      	str	r2, [sp, #8]
10054d44:	4638      	mov	r0, r7
10054d46:	460f      	mov	r7, r1
10054d48:	f000 ff49 	bl	10055bde <GAT_att_srv_get_handle_range>
10054d4c:	883b      	ldrh	r3, [r7, #0]
10054d4e:	9802      	ldr	r0, [sp, #8]
10054d50:	8800      	ldrh	r0, [r0, #0]
10054d52:	4283      	cmp	r3, r0
10054d54:	d818      	bhi.n	10054d88 <GAT_att_srv_run+0x12c>
10054d56:	2b00      	cmp	r3, #0
10054d58:	d016      	beq.n	10054d88 <GAT_att_srv_run+0x12c>
10054d5a:	6866      	ldr	r6, [r4, #4]
10054d5c:	4630      	mov	r0, r6
10054d5e:	f7ff ff3e 	bl	10054bde <GAT_att_cmn_get_opcode>
10054d62:	4607      	mov	r7, r0
10054d64:	8835      	ldrh	r5, [r6, #0]
10054d66:	4630      	mov	r0, r6
10054d68:	f002 fddb 	bl	10057922 <L2C_get_cid_from_basic_packet_header>
10054d6c:	4601      	mov	r1, r0
10054d6e:	4628      	mov	r0, r5
10054d70:	f7ff fd9a 	bl	100548a8 <GAT_att_cmn_get_channel_descr_p>
10054d74:	4605      	mov	r5, r0
10054d76:	2f1e      	cmp	r7, #30
10054d78:	d01d      	beq.n	10054db6 <GAT_att_srv_run+0x15a>
10054d7a:	2040      	movs	r0, #64	@ 0x40
10054d7c:	4038      	ands	r0, r7
10054d7e:	d11a      	bne.n	10054db6 <GAT_att_srv_run+0x15a>
10054d80:	2f16      	cmp	r7, #22
10054d82:	d11b      	bne.n	10054dbc <GAT_att_srv_run+0x160>
10054d84:	8871      	ldrh	r1, [r6, #2]
10054d86:	e026      	b.n	10054dd6 <GAT_att_srv_run+0x17a>
10054d88:	2001      	movs	r0, #1
10054d8a:	9002      	str	r0, [sp, #8]
10054d8c:	2786      	movs	r7, #134	@ 0x86
10054d8e:	2e1e      	cmp	r6, #30
10054d90:	d089      	beq.n	10054ca6 <GAT_att_srv_run+0x4a>
10054d92:	2040      	movs	r0, #64	@ 0x40
10054d94:	4030      	ands	r0, r6
10054d96:	d186      	bne.n	10054ca6 <GAT_att_srv_run+0x4a>
10054d98:	9301      	str	r3, [sp, #4]
10054d9a:	2105      	movs	r1, #5
10054d9c:	4628      	mov	r0, r5
10054d9e:	f7ff fe81 	bl	10054aa4 <GAT_att_cmn_get_pckt>
10054da2:	60e8      	str	r0, [r5, #12]
10054da4:	2800      	cmp	r0, #0
10054da6:	d01d      	beq.n	10054de4 <GAT_att_srv_run+0x188>
10054da8:	4603      	mov	r3, r0
10054daa:	4630      	mov	r0, r6
10054dac:	9901      	ldr	r1, [sp, #4]
10054dae:	9a02      	ldr	r2, [sp, #8]
10054db0:	f000 f9ca 	bl	10055148 <GAT_att_srv_write_err_packet>
10054db4:	e777      	b.n	10054ca6 <GAT_att_srv_run+0x4a>
10054db6:	2000      	movs	r0, #0
10054db8:	60e8      	str	r0, [r5, #12]
10054dba:	e75d      	b.n	10054c78 <GAT_att_srv_run+0x1c>
10054dbc:	4638      	mov	r0, r7
10054dbe:	f7ff ff13 	bl	10054be8 <GAT_att_srv_get_exec_fn_id_by_op>
10054dc2:	280e      	cmp	r0, #14
10054dc4:	d900      	bls.n	10054dc8 <GAT_att_srv_run+0x16c>
10054dc6:	e76d      	b.n	10054ca4 <GAT_att_srv_run+0x48>
10054dc8:	0040      	lsls	r0, r0, #1
10054dca:	4909      	ldr	r1, [pc, #36]	@ (10054df0 <__arm_cp.4_2>)
10054dcc:	5a09      	ldrh	r1, [r1, r0]
10054dce:	88e8      	ldrh	r0, [r5, #6]
10054dd0:	4281      	cmp	r1, r0
10054dd2:	d300      	bcc.n	10054dd6 <GAT_att_srv_run+0x17a>
10054dd4:	4601      	mov	r1, r0
10054dd6:	4628      	mov	r0, r5
10054dd8:	f7ff fe64 	bl	10054aa4 <GAT_att_cmn_get_pckt>
10054ddc:	60e8      	str	r0, [r5, #12]
10054dde:	2800      	cmp	r0, #0
10054de0:	d000      	beq.n	10054de4 <GAT_att_srv_run+0x188>
10054de2:	e749      	b.n	10054c78 <GAT_att_srv_run+0x1c>
10054de4:	2788      	movs	r7, #136	@ 0x88
10054de6:	e75e      	b.n	10054ca6 <GAT_att_srv_run+0x4a>

10054de8 <__arm_cp.4_0>:
10054de8:	10069f8c 	.word	0x10069f8c

10054dec <__arm_cp.4_1>:
10054dec:	00004fcc 	.word	0x00004fcc

10054df0 <__arm_cp.4_2>:
10054df0:	10069faa 	.word	0x10069faa

10054df4 <__arm_cp.4_3>:
10054df4:	200010b0 	.word	0x200010b0

10054df8 <__arm_cp.4_4>:
10054df8:	200010ac 	.word	0x200010ac

10054dfc <GAT_att_srv_connection>:
10054dfc:	b580      	push	{r7, lr}
10054dfe:	f000 ff99 	bl	10055d34 <GAT_srv_connection>
10054e02:	bd80      	pop	{r7, pc}

10054e04 <GAT_att_srv_bearer_close>:
10054e04:	b570      	push	{r4, r5, r6, lr}
10054e06:	460c      	mov	r4, r1
10054e08:	4605      	mov	r5, r0
10054e0a:	f001 f839 	bl	10055e80 <GAT_srv_bearer_close>
10054e0e:	4e07      	ldr	r6, [pc, #28]	@ (10054e2c <__arm_cp.6_0>)
10054e10:	6832      	ldr	r2, [r6, #0]
10054e12:	3240      	adds	r2, #64	@ 0x40
10054e14:	4628      	mov	r0, r5
10054e16:	4621      	mov	r1, r4
10054e18:	f000 f80a 	bl	10054e30 <GAT_att_srv_flush_rx_pckts>
10054e1c:	6832      	ldr	r2, [r6, #0]
10054e1e:	3238      	adds	r2, #56	@ 0x38
10054e20:	4628      	mov	r0, r5
10054e22:	4621      	mov	r1, r4
10054e24:	f000 f804 	bl	10054e30 <GAT_att_srv_flush_rx_pckts>
10054e28:	bd70      	pop	{r4, r5, r6, pc}
10054e2a:	46c0      	nop			@ (mov r8, r8)

10054e2c <__arm_cp.6_0>:
10054e2c:	200010ac 	.word	0x200010ac

10054e30 <GAT_att_srv_flush_rx_pckts>:
10054e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10054e32:	460d      	mov	r5, r1
10054e34:	4606      	mov	r6, r0
10054e36:	9200      	str	r2, [sp, #0]
10054e38:	6814      	ldr	r4, [r2, #0]
10054e3a:	2c00      	cmp	r4, #0
10054e3c:	d011      	beq.n	10054e62 <GAT_att_srv_flush_rx_pckts+0x32>
10054e3e:	4627      	mov	r7, r4
10054e40:	69e4      	ldr	r4, [r4, #28]
10054e42:	8838      	ldrh	r0, [r7, #0]
10054e44:	42b0      	cmp	r0, r6
10054e46:	d1f8      	bne.n	10054e3a <GAT_att_srv_flush_rx_pckts+0xa>
10054e48:	4638      	mov	r0, r7
10054e4a:	f002 fd6a 	bl	10057922 <L2C_get_cid_from_basic_packet_header>
10054e4e:	42a8      	cmp	r0, r5
10054e50:	d1f3      	bne.n	10054e3a <GAT_att_srv_flush_rx_pckts+0xa>
10054e52:	9800      	ldr	r0, [sp, #0]
10054e54:	4639      	mov	r1, r7
10054e56:	f00d fd35 	bl	100628c4 <ACL_list_remove>
10054e5a:	4638      	mov	r0, r7
10054e5c:	f7fd feaa 	bl	10052bb4 <ACL_pkt_release>
10054e60:	e7eb      	b.n	10054e3a <GAT_att_srv_flush_rx_pckts+0xa>
10054e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10054e64 <GAT_att_srv_process_rx_pckt_tsk>:
10054e64:	b5f0      	push	{r4, r5, r6, r7, lr}
10054e66:	b085      	sub	sp, #20
10054e68:	4f0f      	ldr	r7, [pc, #60]	@ (10054ea8 <__arm_cp.9_0>)
10054e6a:	6838      	ldr	r0, [r7, #0]
10054e6c:	3040      	adds	r0, #64	@ 0x40
10054e6e:	f00d fd49 	bl	10062904 <ACL_list_get_pckt_count>
10054e72:	4604      	mov	r4, r0
10054e74:	0420      	lsls	r0, r4, #16
10054e76:	d014      	beq.n	10054ea2 <GAT_att_srv_process_rx_pckt_tsk+0x3e>
10054e78:	466d      	mov	r5, sp
10054e7a:	2000      	movs	r0, #0
10054e7c:	7028      	strb	r0, [r5, #0]
10054e7e:	6838      	ldr	r0, [r7, #0]
10054e80:	3040      	adds	r0, #64	@ 0x40
10054e82:	f00d fd35 	bl	100628f0 <ACL_list_remove_head>
10054e86:	9001      	str	r0, [sp, #4]
10054e88:	8806      	ldrh	r6, [r0, #0]
10054e8a:	f002 fd4a 	bl	10057922 <L2C_get_cid_from_basic_packet_header>
10054e8e:	4601      	mov	r1, r0
10054e90:	4630      	mov	r0, r6
10054e92:	f7ff fd09 	bl	100548a8 <GAT_att_cmn_get_channel_descr_p>
10054e96:	9002      	str	r0, [sp, #8]
10054e98:	4628      	mov	r0, r5
10054e9a:	f7ff fedf 	bl	10054c5c <GAT_att_srv_run>
10054e9e:	1e64      	subs	r4, r4, #1
10054ea0:	e7e8      	b.n	10054e74 <GAT_att_srv_process_rx_pckt_tsk+0x10>
10054ea2:	b005      	add	sp, #20
10054ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10054ea6:	46c0      	nop			@ (mov r8, r8)

10054ea8 <__arm_cp.9_0>:
10054ea8:	200010ac 	.word	0x200010ac

10054eac <GAT_att_srv_hvtx>:
10054eac:	b5f0      	push	{r4, r5, r6, r7, lr}
10054eae:	b08b      	sub	sp, #44	@ 0x2c
10054eb0:	930a      	str	r3, [sp, #40]	@ 0x28
10054eb2:	4614      	mov	r4, r2
10054eb4:	460d      	mov	r5, r1
10054eb6:	4607      	mov	r7, r0
10054eb8:	f7ff fcf6 	bl	100548a8 <GAT_att_cmn_get_channel_descr_p>
10054ebc:	2800      	cmp	r0, #0
10054ebe:	d011      	beq.n	10054ee4 <GAT_att_srv_hvtx+0x38>
10054ec0:	4606      	mov	r6, r0
10054ec2:	9704      	str	r7, [sp, #16]
10054ec4:	8880      	ldrh	r0, [r0, #4]
10054ec6:	270c      	movs	r7, #12
10054ec8:	0741      	lsls	r1, r0, #29
10054eca:	d47f      	bmi.n	10054fcc <GAT_att_srv_hvtx+0x120>
10054ecc:	2c02      	cmp	r4, #2
10054ece:	d101      	bne.n	10054ed4 <GAT_att_srv_hvtx+0x28>
10054ed0:	0780      	lsls	r0, r0, #30
10054ed2:	d47b      	bmi.n	10054fcc <GAT_att_srv_hvtx+0x120>
10054ed4:	9502      	str	r5, [sp, #8]
10054ed6:	9403      	str	r4, [sp, #12]
10054ed8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
10054eda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10054edc:	2b01      	cmp	r3, #1
10054ede:	d803      	bhi.n	10054ee8 <GAT_att_srv_hvtx+0x3c>
10054ee0:	2503      	movs	r5, #3
10054ee2:	e003      	b.n	10054eec <GAT_att_srv_hvtx+0x40>
10054ee4:	2712      	movs	r7, #18
10054ee6:	e071      	b.n	10054fcc <GAT_att_srv_hvtx+0x120>
10054ee8:	0098      	lsls	r0, r3, #2
10054eea:	1c45      	adds	r5, r0, #1
10054eec:	1ca0      	adds	r0, r4, #2
10054eee:	4619      	mov	r1, r3
10054ef0:	2900      	cmp	r1, #0
10054ef2:	d004      	beq.n	10054efe <GAT_att_srv_hvtx+0x52>
10054ef4:	8802      	ldrh	r2, [r0, #0]
10054ef6:	1955      	adds	r5, r2, r5
10054ef8:	3008      	adds	r0, #8
10054efa:	1e49      	subs	r1, r1, #1
10054efc:	e7f8      	b.n	10054ef0 <GAT_att_srv_hvtx+0x44>
10054efe:	88f0      	ldrh	r0, [r6, #6]
10054f00:	2b02      	cmp	r3, #2
10054f02:	d302      	bcc.n	10054f0a <GAT_att_srv_hvtx+0x5e>
10054f04:	b2a9      	uxth	r1, r5
10054f06:	4281      	cmp	r1, r0
10054f08:	d860      	bhi.n	10054fcc <GAT_att_srv_hvtx+0x120>
10054f0a:	b2a9      	uxth	r1, r5
10054f0c:	4281      	cmp	r1, r0
10054f0e:	d300      	bcc.n	10054f12 <GAT_att_srv_hvtx+0x66>
10054f10:	4605      	mov	r5, r0
10054f12:	b2a9      	uxth	r1, r5
10054f14:	4630      	mov	r0, r6
10054f16:	9106      	str	r1, [sp, #24]
10054f18:	f7ff fdc4 	bl	10054aa4 <GAT_att_cmn_get_pckt>
10054f1c:	2800      	cmp	r0, #0
10054f1e:	d00e      	beq.n	10054f3e <GAT_att_srv_hvtx+0x92>
10054f20:	4607      	mov	r7, r0
10054f22:	9803      	ldr	r0, [sp, #12]
10054f24:	2802      	cmp	r0, #2
10054f26:	9707      	str	r7, [sp, #28]
10054f28:	9601      	str	r6, [sp, #4]
10054f2a:	d10f      	bne.n	10054f4c <GAT_att_srv_hvtx+0xa0>
10054f2c:	89b9      	ldrh	r1, [r7, #12]
10054f2e:	221d      	movs	r2, #29
10054f30:	4638      	mov	r0, r7
10054f32:	f000 f889 	bl	10055048 <ACL_pkt_write_8b>
10054f36:	980a      	ldr	r0, [sp, #40]	@ 0x28
10054f38:	2801      	cmp	r0, #1
10054f3a:	d00f      	beq.n	10054f5c <GAT_att_srv_hvtx+0xb0>
10054f3c:	e04e      	b.n	10054fdc <GAT_att_srv_hvtx+0x130>
10054f3e:	2008      	movs	r0, #8
10054f40:	f00d faba 	bl	100624b8 <tsk_notify_idx>
10054f44:	f7ee fde9 	bl	10043b1a <BLE_STACK_ProcessRequest>
10054f48:	2788      	movs	r7, #136	@ 0x88
10054f4a:	e03f      	b.n	10054fcc <GAT_att_srv_hvtx+0x120>
10054f4c:	89b9      	ldrh	r1, [r7, #12]
10054f4e:	980a      	ldr	r0, [sp, #40]	@ 0x28
10054f50:	2801      	cmp	r0, #1
10054f52:	d13e      	bne.n	10054fd2 <GAT_att_srv_hvtx+0x126>
10054f54:	221b      	movs	r2, #27
10054f56:	4638      	mov	r0, r7
10054f58:	f000 f876 	bl	10055048 <ACL_pkt_write_8b>
10054f5c:	8822      	ldrh	r2, [r4, #0]
10054f5e:	89b8      	ldrh	r0, [r7, #12]
10054f60:	1c40      	adds	r0, r0, #1
10054f62:	b281      	uxth	r1, r0
10054f64:	4638      	mov	r0, r7
10054f66:	f7fd fe5a 	bl	10052c1e <ACL_pkt_write_16b>
10054f6a:	6863      	ldr	r3, [r4, #4]
10054f6c:	89b8      	ldrh	r0, [r7, #12]
10054f6e:	1ee9      	subs	r1, r5, #3
10054f70:	b28a      	uxth	r2, r1
10054f72:	1cc0      	adds	r0, r0, #3
10054f74:	b281      	uxth	r1, r0
10054f76:	4638      	mov	r0, r7
10054f78:	f7fd fe5a 	bl	10052c30 <ACL_pkt_write>
10054f7c:	9807      	ldr	r0, [sp, #28]
10054f7e:	8045      	strh	r5, [r0, #2]
10054f80:	9d03      	ldr	r5, [sp, #12]
10054f82:	2d02      	cmp	r5, #2
10054f84:	d10c      	bne.n	10054fa0 <GAT_att_srv_hvtx+0xf4>
10054f86:	2001      	movs	r0, #1
10054f88:	9904      	ldr	r1, [sp, #16]
10054f8a:	9a02      	ldr	r2, [sp, #8]
10054f8c:	f7ff fd48 	bl	10054a20 <GAT_att_cmn_start_timer>
10054f90:	2800      	cmp	r0, #0
10054f92:	9c01      	ldr	r4, [sp, #4]
10054f94:	d00c      	beq.n	10054fb0 <GAT_att_srv_hvtx+0x104>
10054f96:	4607      	mov	r7, r0
10054f98:	9807      	ldr	r0, [sp, #28]
10054f9a:	f7fd fe0b 	bl	10052bb4 <ACL_pkt_release>
10054f9e:	e015      	b.n	10054fcc <GAT_att_srv_hvtx+0x120>
10054fa0:	07e8      	lsls	r0, r5, #31
10054fa2:	9c01      	ldr	r4, [sp, #4]
10054fa4:	d004      	beq.n	10054fb0 <GAT_att_srv_hvtx+0x104>
10054fa6:	9a07      	ldr	r2, [sp, #28]
10054fa8:	7a10      	ldrb	r0, [r2, #8]
10054faa:	2108      	movs	r1, #8
10054fac:	4301      	orrs	r1, r0
10054fae:	7211      	strb	r1, [r2, #8]
10054fb0:	9802      	ldr	r0, [sp, #8]
10054fb2:	9907      	ldr	r1, [sp, #28]
10054fb4:	f7ff fcfa 	bl	100549ac <GAT_att_cmn_send>
10054fb8:	4607      	mov	r7, r0
10054fba:	2d02      	cmp	r5, #2
10054fbc:	d106      	bne.n	10054fcc <GAT_att_srv_hvtx+0x120>
10054fbe:	2f00      	cmp	r7, #0
10054fc0:	d104      	bne.n	10054fcc <GAT_att_srv_hvtx+0x120>
10054fc2:	88a0      	ldrh	r0, [r4, #4]
10054fc4:	2102      	movs	r1, #2
10054fc6:	4301      	orrs	r1, r0
10054fc8:	80a1      	strh	r1, [r4, #4]
10054fca:	2700      	movs	r7, #0
10054fcc:	4638      	mov	r0, r7
10054fce:	b00b      	add	sp, #44	@ 0x2c
10054fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10054fd2:	2223      	movs	r2, #35	@ 0x23
10054fd4:	4638      	mov	r0, r7
10054fd6:	f000 f837 	bl	10055048 <ACL_pkt_write_8b>
10054fda:	980a      	ldr	r0, [sp, #40]	@ 0x28
10054fdc:	1ca7      	adds	r7, r4, #2
10054fde:	2101      	movs	r1, #1
10054fe0:	9505      	str	r5, [sp, #20]
10054fe2:	2800      	cmp	r0, #0
10054fe4:	d0ca      	beq.n	10054f7c <GAT_att_srv_hvtx+0xd0>
10054fe6:	900a      	str	r0, [sp, #40]	@ 0x28
10054fe8:	9d07      	ldr	r5, [sp, #28]
10054fea:	89a8      	ldrh	r0, [r5, #12]
10054fec:	1840      	adds	r0, r0, r1
10054fee:	9108      	str	r1, [sp, #32]
10054ff0:	b281      	uxth	r1, r0
10054ff2:	1ebb      	subs	r3, r7, #2
10054ff4:	2402      	movs	r4, #2
10054ff6:	4628      	mov	r0, r5
10054ff8:	4622      	mov	r2, r4
10054ffa:	4e12      	ldr	r6, [pc, #72]	@ (10055044 <__arm_cp.10_0>)
10054ffc:	47b0      	blx	r6
10054ffe:	89a8      	ldrh	r0, [r5, #12]
10055000:	9e08      	ldr	r6, [sp, #32]
10055002:	1830      	adds	r0, r6, r0
10055004:	1c80      	adds	r0, r0, #2
10055006:	b281      	uxth	r1, r0
10055008:	4628      	mov	r0, r5
1005500a:	9409      	str	r4, [sp, #36]	@ 0x24
1005500c:	4622      	mov	r2, r4
1005500e:	463b      	mov	r3, r7
10055010:	4c0c      	ldr	r4, [pc, #48]	@ (10055044 <__arm_cp.10_0>)
10055012:	47a0      	blx	r4
10055014:	1d31      	adds	r1, r6, #4
10055016:	89a8      	ldrh	r0, [r5, #12]
10055018:	1840      	adds	r0, r0, r1
1005501a:	b28e      	uxth	r6, r1
1005501c:	9906      	ldr	r1, [sp, #24]
1005501e:	1b8a      	subs	r2, r1, r6
10055020:	8839      	ldrh	r1, [r7, #0]
10055022:	428a      	cmp	r2, r1
10055024:	db00      	blt.n	10055028 <GAT_att_srv_hvtx+0x17c>
10055026:	460a      	mov	r2, r1
10055028:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005502a:	587b      	ldr	r3, [r7, r1]
1005502c:	b281      	uxth	r1, r0
1005502e:	b294      	uxth	r4, r2
10055030:	4628      	mov	r0, r5
10055032:	4622      	mov	r2, r4
10055034:	4d03      	ldr	r5, [pc, #12]	@ (10055044 <__arm_cp.10_0>)
10055036:	47a8      	blx	r5
10055038:	19a1      	adds	r1, r4, r6
1005503a:	3708      	adds	r7, #8
1005503c:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005503e:	1e40      	subs	r0, r0, #1
10055040:	9d05      	ldr	r5, [sp, #20]
10055042:	e7ce      	b.n	10054fe2 <GAT_att_srv_hvtx+0x136>

10055044 <__arm_cp.10_0>:
10055044:	10052c31 	.word	0x10052c31

10055048 <ACL_pkt_write_8b>:
10055048:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005504a:	4614      	mov	r4, r2
1005504c:	6840      	ldr	r0, [r0, #4]
1005504e:	2920      	cmp	r1, #32
10055050:	d304      	bcc.n	1005505c <ACL_pkt_write_8b+0x14>
10055052:	ad01      	add	r5, sp, #4
10055054:	462a      	mov	r2, r5
10055056:	f00a fac8 	bl	1005f5ea <Mem_Buff_get_buff_off>
1005505a:	8829      	ldrh	r1, [r5, #0]
1005505c:	1840      	adds	r0, r0, r1
1005505e:	7104      	strb	r4, [r0, #4]
10055060:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10055062 <GAT_att_srv_extract_write_packet_data>:
10055062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10055064:	461d      	mov	r5, r3
10055066:	4614      	mov	r4, r2
10055068:	460f      	mov	r7, r1
1005506a:	4606      	mov	r6, r0
1005506c:	f7ff fdb7 	bl	10054bde <GAT_att_cmn_get_opcode>
10055070:	210e      	movs	r1, #14
10055072:	43c9      	mvns	r1, r1
10055074:	28d2      	cmp	r0, #210	@ 0xd2
10055076:	d000      	beq.n	1005507a <GAT_att_srv_extract_write_packet_data+0x18>
10055078:	310c      	adds	r1, #12
1005507a:	8870      	ldrh	r0, [r6, #2]
1005507c:	1808      	adds	r0, r1, r0
1005507e:	b282      	uxth	r2, r0
10055080:	9906      	ldr	r1, [sp, #24]
10055082:	42ba      	cmp	r2, r7
10055084:	d905      	bls.n	10055092 <GAT_att_srv_extract_write_packet_data+0x30>
10055086:	200d      	movs	r0, #13
10055088:	7008      	strb	r0, [r1, #0]
1005508a:	2000      	movs	r0, #0
1005508c:	8028      	strh	r0, [r5, #0]
1005508e:	2786      	movs	r7, #134	@ 0x86
10055090:	e009      	b.n	100550a6 <GAT_att_srv_extract_write_packet_data+0x44>
10055092:	2700      	movs	r7, #0
10055094:	700f      	strb	r7, [r1, #0]
10055096:	8028      	strh	r0, [r5, #0]
10055098:	89b0      	ldrh	r0, [r6, #12]
1005509a:	1cc0      	adds	r0, r0, #3
1005509c:	b281      	uxth	r1, r0
1005509e:	4630      	mov	r0, r6
100550a0:	4623      	mov	r3, r4
100550a2:	f7fd fda3 	bl	10052bec <ACL_pkt_read>
100550a6:	4638      	mov	r0, r7
100550a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

100550ac <GAT_att_srv_resp>:
100550ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100550ae:	b089      	sub	sp, #36	@ 0x24
100550b0:	9303      	str	r3, [sp, #12]
100550b2:	4617      	mov	r7, r2
100550b4:	460e      	mov	r6, r1
100550b6:	4605      	mov	r5, r0
100550b8:	f7ff fbf6 	bl	100548a8 <GAT_att_cmn_get_channel_descr_p>
100550bc:	2800      	cmp	r0, #0
100550be:	d03f      	beq.n	10055140 <GAT_att_srv_resp+0x94>
100550c0:	4604      	mov	r4, r0
100550c2:	68c0      	ldr	r0, [r0, #12]
100550c4:	2800      	cmp	r0, #0
100550c6:	d03b      	beq.n	10055140 <GAT_att_srv_resp+0x94>
100550c8:	9702      	str	r7, [sp, #8]
100550ca:	980f      	ldr	r0, [sp, #60]	@ 0x3c
100550cc:	9001      	str	r0, [sp, #4]
100550ce:	980e      	ldr	r0, [sp, #56]	@ 0x38
100550d0:	9000      	str	r0, [sp, #0]
100550d2:	481c      	ldr	r0, [pc, #112]	@ (10055144 <__arm_cp.13_0>)
100550d4:	6807      	ldr	r7, [r0, #0]
100550d6:	3738      	adds	r7, #56	@ 0x38
100550d8:	683f      	ldr	r7, [r7, #0]
100550da:	2f00      	cmp	r7, #0
100550dc:	d00f      	beq.n	100550fe <GAT_att_srv_resp+0x52>
100550de:	8838      	ldrh	r0, [r7, #0]
100550e0:	42a8      	cmp	r0, r5
100550e2:	d104      	bne.n	100550ee <GAT_att_srv_resp+0x42>
100550e4:	4638      	mov	r0, r7
100550e6:	f002 fc1c 	bl	10057922 <L2C_get_cid_from_basic_packet_header>
100550ea:	42b0      	cmp	r0, r6
100550ec:	d001      	beq.n	100550f2 <GAT_att_srv_resp+0x46>
100550ee:	371c      	adds	r7, #28
100550f0:	e7f2      	b.n	100550d8 <GAT_att_srv_resp+0x2c>
100550f2:	4814      	ldr	r0, [pc, #80]	@ (10055144 <__arm_cp.13_0>)
100550f4:	6800      	ldr	r0, [r0, #0]
100550f6:	3038      	adds	r0, #56	@ 0x38
100550f8:	4639      	mov	r1, r7
100550fa:	f00d fbe3 	bl	100628c4 <ACL_list_remove>
100550fe:	68e0      	ldr	r0, [r4, #12]
10055100:	f7ff fd6d 	bl	10054bde <GAT_att_cmn_get_opcode>
10055104:	1e41      	subs	r1, r0, #1
10055106:	9a03      	ldr	r2, [sp, #12]
10055108:	2a00      	cmp	r2, #0
1005510a:	d00d      	beq.n	10055128 <GAT_att_srv_resp+0x7c>
1005510c:	68e3      	ldr	r3, [r4, #12]
1005510e:	b2c8      	uxtb	r0, r1
10055110:	9902      	ldr	r1, [sp, #8]
10055112:	f000 f819 	bl	10055148 <GAT_att_srv_write_err_packet>
10055116:	4620      	mov	r0, r4
10055118:	f000 f82f 	bl	1005517a <GAT_att_srv_send_response>
1005511c:	2f00      	cmp	r7, #0
1005511e:	d00f      	beq.n	10055140 <GAT_att_srv_resp+0x94>
10055120:	4638      	mov	r0, r7
10055122:	f7fd fd47 	bl	10052bb4 <ACL_pkt_release>
10055126:	e00b      	b.n	10055140 <GAT_att_srv_resp+0x94>
10055128:	a804      	add	r0, sp, #16
1005512a:	9a00      	ldr	r2, [sp, #0]
1005512c:	8182      	strh	r2, [r0, #12]
1005512e:	7041      	strb	r1, [r0, #1]
10055130:	2101      	movs	r1, #1
10055132:	7001      	strb	r1, [r0, #0]
10055134:	9901      	ldr	r1, [sp, #4]
10055136:	9108      	str	r1, [sp, #32]
10055138:	9406      	str	r4, [sp, #24]
1005513a:	9705      	str	r7, [sp, #20]
1005513c:	f7ff fd8e 	bl	10054c5c <GAT_att_srv_run>
10055140:	b009      	add	sp, #36	@ 0x24
10055142:	bdf0      	pop	{r4, r5, r6, r7, pc}

10055144 <__arm_cp.13_0>:
10055144:	200010ac 	.word	0x200010ac

10055148 <GAT_att_srv_write_err_packet>:
10055148:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005514a:	281e      	cmp	r0, #30
1005514c:	d014      	beq.n	10055178 <GAT_att_srv_write_err_packet+0x30>
1005514e:	461c      	mov	r4, r3
10055150:	2340      	movs	r3, #64	@ 0x40
10055152:	4003      	ands	r3, r0
10055154:	d110      	bne.n	10055178 <GAT_att_srv_write_err_packet+0x30>
10055156:	2c00      	cmp	r4, #0
10055158:	d00e      	beq.n	10055178 <GAT_att_srv_write_err_packet+0x30>
1005515a:	466b      	mov	r3, sp
1005515c:	7099      	strb	r1, [r3, #2]
1005515e:	7058      	strb	r0, [r3, #1]
10055160:	2001      	movs	r0, #1
10055162:	7018      	strb	r0, [r3, #0]
10055164:	711a      	strb	r2, [r3, #4]
10055166:	0a08      	lsrs	r0, r1, #8
10055168:	70d8      	strb	r0, [r3, #3]
1005516a:	89a1      	ldrh	r1, [r4, #12]
1005516c:	2505      	movs	r5, #5
1005516e:	4620      	mov	r0, r4
10055170:	462a      	mov	r2, r5
10055172:	f7fd fd5d 	bl	10052c30 <ACL_pkt_write>
10055176:	8065      	strh	r5, [r4, #2]
10055178:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1005517a <GAT_att_srv_send_response>:
1005517a:	b510      	push	{r4, lr}
1005517c:	4604      	mov	r4, r0
1005517e:	68c0      	ldr	r0, [r0, #12]
10055180:	2800      	cmp	r0, #0
10055182:	d015      	beq.n	100551b0 <GAT_att_srv_send_response+0x36>
10055184:	8841      	ldrh	r1, [r0, #2]
10055186:	1d09      	adds	r1, r1, #4
10055188:	b289      	uxth	r1, r1
1005518a:	f7fd fd1c 	bl	10052bc6 <ACL_pkt_resize>
1005518e:	68e1      	ldr	r1, [r4, #12]
10055190:	8960      	ldrh	r0, [r4, #10]
10055192:	f7ff fc0b 	bl	100549ac <GAT_att_cmn_send>
10055196:	2800      	cmp	r0, #0
10055198:	d108      	bne.n	100551ac <GAT_att_srv_send_response+0x32>
1005519a:	8962      	ldrh	r2, [r4, #10]
1005519c:	8921      	ldrh	r1, [r4, #8]
1005519e:	2000      	movs	r0, #0
100551a0:	f7ff fbf4 	bl	1005498c <GAT_att_cmn_stop_timer>
100551a4:	88a0      	ldrh	r0, [r4, #4]
100551a6:	2101      	movs	r1, #1
100551a8:	4388      	bics	r0, r1
100551aa:	80a0      	strh	r0, [r4, #4]
100551ac:	2000      	movs	r0, #0
100551ae:	60e0      	str	r0, [r4, #12]
100551b0:	bd10      	pop	{r4, pc}
	...

100551b4 <GAT_att_srv_confirmation_pending>:
100551b4:	b5e0      	push	{r5, r6, r7, lr}
100551b6:	a801      	add	r0, sp, #4
100551b8:	2102      	movs	r1, #2
100551ba:	8001      	strh	r1, [r0, #0]
100551bc:	9000      	str	r0, [sp, #0]
100551be:	2000      	movs	r0, #0
100551c0:	4b04      	ldr	r3, [pc, #16]	@ (100551d4 <__arm_cp.16_0>)
100551c2:	4601      	mov	r1, r0
100551c4:	4602      	mov	r2, r0
100551c6:	f7ff fab1 	bl	1005472c <GAT_att_cmn_for_each_ch_descr>
100551ca:	3886      	subs	r0, #134	@ 0x86
100551cc:	4241      	negs	r1, r0
100551ce:	4148      	adcs	r0, r1
100551d0:	bd8c      	pop	{r2, r3, r7, pc}
100551d2:	46c0      	nop			@ (mov r8, r8)

100551d4 <__arm_cp.16_0>:
100551d4:	100549d9 	.word	0x100549d9

100551d8 <GAT_att_srv_request_user_pending>:
100551d8:	b510      	push	{r4, lr}
100551da:	480a      	ldr	r0, [pc, #40]	@ (10055204 <__arm_cp.17_0>)
100551dc:	6804      	ldr	r4, [r0, #0]
100551de:	3438      	adds	r4, #56	@ 0x38
100551e0:	6824      	ldr	r4, [r4, #0]
100551e2:	2c00      	cmp	r4, #0
100551e4:	d009      	beq.n	100551fa <GAT_att_srv_request_user_pending+0x22>
100551e6:	4620      	mov	r0, r4
100551e8:	f7ff fcf9 	bl	10054bde <GAT_att_cmn_get_opcode>
100551ec:	281e      	cmp	r0, #30
100551ee:	d002      	beq.n	100551f6 <GAT_att_srv_request_user_pending+0x1e>
100551f0:	2140      	movs	r1, #64	@ 0x40
100551f2:	4008      	ands	r0, r1
100551f4:	d003      	beq.n	100551fe <GAT_att_srv_request_user_pending+0x26>
100551f6:	341c      	adds	r4, #28
100551f8:	e7f2      	b.n	100551e0 <GAT_att_srv_request_user_pending+0x8>
100551fa:	2000      	movs	r0, #0
100551fc:	bd10      	pop	{r4, pc}
100551fe:	2001      	movs	r0, #1
10055200:	bd10      	pop	{r4, pc}
10055202:	46c0      	nop			@ (mov r8, r8)

10055204 <__arm_cp.17_0>:
10055204:	200010ac 	.word	0x200010ac

10055208 <GAT_att_srv_flush_user_pending_list>:
10055208:	b570      	push	{r4, r5, r6, lr}
1005520a:	4d08      	ldr	r5, [pc, #32]	@ (1005522c <__arm_cp.18_0>)
1005520c:	6828      	ldr	r0, [r5, #0]
1005520e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
10055210:	2c00      	cmp	r4, #0
10055212:	d00a      	beq.n	1005522a <GAT_att_srv_flush_user_pending_list+0x22>
10055214:	69e6      	ldr	r6, [r4, #28]
10055216:	6828      	ldr	r0, [r5, #0]
10055218:	3038      	adds	r0, #56	@ 0x38
1005521a:	4621      	mov	r1, r4
1005521c:	f00d fb52 	bl	100628c4 <ACL_list_remove>
10055220:	4620      	mov	r0, r4
10055222:	f7fd fcc7 	bl	10052bb4 <ACL_pkt_release>
10055226:	4634      	mov	r4, r6
10055228:	e7f2      	b.n	10055210 <GAT_att_srv_flush_user_pending_list+0x8>
1005522a:	bd70      	pop	{r4, r5, r6, pc}

1005522c <__arm_cp.18_0>:
1005522c:	200010ac 	.word	0x200010ac

10055230 <GAT_att_srv_exchange_mtu_exc>:
10055230:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10055232:	4604      	mov	r4, r0
10055234:	6880      	ldr	r0, [r0, #8]
10055236:	8941      	ldrh	r1, [r0, #10]
10055238:	2904      	cmp	r1, #4
1005523a:	d11a      	bne.n	10055272 <GAT_att_srv_exchange_mtu_exc+0x42>
1005523c:	6860      	ldr	r0, [r4, #4]
1005523e:	8981      	ldrh	r1, [r0, #12]
10055240:	1c49      	adds	r1, r1, #1
10055242:	b289      	uxth	r1, r1
10055244:	f7fd fcdb 	bl	10052bfe <ACL_pkt_read_16b>
10055248:	4605      	mov	r5, r0
1005524a:	2817      	cmp	r0, #23
1005524c:	d800      	bhi.n	10055250 <GAT_att_srv_exchange_mtu_exc+0x20>
1005524e:	2517      	movs	r5, #23
10055250:	4e1d      	ldr	r6, [pc, #116]	@ (100552c8 <__arm_cp.19_0>)
10055252:	8a30      	ldrh	r0, [r6, #16]
10055254:	4285      	cmp	r5, r0
10055256:	d300      	bcc.n	1005525a <GAT_att_srv_exchange_mtu_exc+0x2a>
10055258:	4605      	mov	r5, r0
1005525a:	68a3      	ldr	r3, [r4, #8]
1005525c:	8898      	ldrh	r0, [r3, #4]
1005525e:	0700      	lsls	r0, r0, #28
10055260:	d40f      	bmi.n	10055282 <GAT_att_srv_exchange_mtu_exc+0x52>
10055262:	8919      	ldrh	r1, [r3, #8]
10055264:	2002      	movs	r0, #2
10055266:	462a      	mov	r2, r5
10055268:	f00e fa1e 	bl	100636a8 <aci_att_exchange_mtu_resp_event_push_noinline>
1005526c:	2800      	cmp	r0, #0
1005526e:	d014      	beq.n	1005529a <GAT_att_srv_exchange_mtu_exc+0x6a>
10055270:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
10055272:	68c3      	ldr	r3, [r0, #12]
10055274:	2002      	movs	r0, #2
10055276:	2100      	movs	r1, #0
10055278:	2206      	movs	r2, #6
1005527a:	f7ff ff65 	bl	10055148 <GAT_att_srv_write_err_packet>
1005527e:	2086      	movs	r0, #134	@ 0x86
10055280:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
10055282:	88d8      	ldrh	r0, [r3, #6]
10055284:	42a8      	cmp	r0, r5
10055286:	d00e      	beq.n	100552a6 <GAT_att_srv_exchange_mtu_exc+0x76>
10055288:	3308      	adds	r3, #8
1005528a:	2042      	movs	r0, #66	@ 0x42
1005528c:	2103      	movs	r1, #3
1005528e:	2202      	movs	r2, #2
10055290:	f00e fd3a 	bl	10063d08 <aci_hal_fw_error_event_push_noinline>
10055294:	2800      	cmp	r0, #0
10055296:	d1eb      	bne.n	10055270 <GAT_att_srv_exchange_mtu_exc+0x40>
10055298:	e005      	b.n	100552a6 <GAT_att_srv_exchange_mtu_exc+0x76>
1005529a:	68a0      	ldr	r0, [r4, #8]
1005529c:	80c5      	strh	r5, [r0, #6]
1005529e:	8881      	ldrh	r1, [r0, #4]
100552a0:	2208      	movs	r2, #8
100552a2:	430a      	orrs	r2, r1
100552a4:	8082      	strh	r2, [r0, #4]
100552a6:	8a30      	ldrh	r0, [r6, #16]
100552a8:	ab01      	add	r3, sp, #4
100552aa:	7058      	strb	r0, [r3, #1]
100552ac:	2503      	movs	r5, #3
100552ae:	701d      	strb	r5, [r3, #0]
100552b0:	0a00      	lsrs	r0, r0, #8
100552b2:	7098      	strb	r0, [r3, #2]
100552b4:	68a0      	ldr	r0, [r4, #8]
100552b6:	68c4      	ldr	r4, [r0, #12]
100552b8:	89a1      	ldrh	r1, [r4, #12]
100552ba:	4620      	mov	r0, r4
100552bc:	462a      	mov	r2, r5
100552be:	f7fd fcb7 	bl	10052c30 <ACL_pkt_write>
100552c2:	8065      	strh	r5, [r4, #2]
100552c4:	2000      	movs	r0, #0
100552c6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

100552c8 <__arm_cp.19_0>:
100552c8:	20001108 	.word	0x20001108

100552cc <GAT_att_srv_find_info_exc>:
100552cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100552ce:	b08f      	sub	sp, #60	@ 0x3c
100552d0:	4601      	mov	r1, r0
100552d2:	6840      	ldr	r0, [r0, #4]
100552d4:	9101      	str	r1, [sp, #4]
100552d6:	6889      	ldr	r1, [r1, #8]
100552d8:	68cf      	ldr	r7, [r1, #12]
100552da:	ad0d      	add	r5, sp, #52	@ 0x34
100552dc:	ac0e      	add	r4, sp, #56	@ 0x38
100552de:	4629      	mov	r1, r5
100552e0:	4622      	mov	r2, r4
100552e2:	f000 fc7c 	bl	10055bde <GAT_att_srv_get_handle_range>
100552e6:	8828      	ldrh	r0, [r5, #0]
100552e8:	9007      	str	r0, [sp, #28]
100552ea:	f00f f9cf 	bl	1006468c <GAT_att_db_find_from_handle>
100552ee:	4602      	mov	r2, r0
100552f0:	8820      	ldrh	r0, [r4, #0]
100552f2:	9002      	str	r0, [sp, #8]
100552f4:	2500      	movs	r5, #0
100552f6:	462b      	mov	r3, r5
100552f8:	9500      	str	r5, [sp, #0]
100552fa:	9503      	str	r5, [sp, #12]
100552fc:	2a00      	cmp	r2, #0
100552fe:	9506      	str	r5, [sp, #24]
10055300:	d050      	beq.n	100553a4 <GAT_att_srv_find_info_exc+0xd8>
10055302:	8850      	ldrh	r0, [r2, #2]
10055304:	9007      	str	r0, [sp, #28]
10055306:	9902      	ldr	r1, [sp, #8]
10055308:	4288      	cmp	r0, r1
1005530a:	d84b      	bhi.n	100553a4 <GAT_att_srv_find_info_exc+0xd8>
1005530c:	b2a8      	uxth	r0, r5
1005530e:	18c0      	adds	r0, r0, r3
10055310:	9901      	ldr	r1, [sp, #4]
10055312:	6889      	ldr	r1, [r1, #8]
10055314:	88c9      	ldrh	r1, [r1, #6]
10055316:	4288      	cmp	r0, r1
10055318:	d844      	bhi.n	100553a4 <GAT_att_srv_find_info_exc+0xd8>
1005531a:	461c      	mov	r4, r3
1005531c:	ad08      	add	r5, sp, #32
1005531e:	9205      	str	r2, [sp, #20]
10055320:	4610      	mov	r0, r2
10055322:	4629      	mov	r1, r5
10055324:	f000 ffd2 	bl	100562cc <GAT_srv_get_attr_type>
10055328:	7c2e      	ldrb	r6, [r5, #16]
1005532a:	9803      	ldr	r0, [sp, #12]
1005532c:	0600      	lsls	r0, r0, #24
1005532e:	d006      	beq.n	1005533e <GAT_att_srv_find_info_exc+0x72>
10055330:	9800      	ldr	r0, [sp, #0]
10055332:	4286      	cmp	r6, r0
10055334:	d139      	bne.n	100553aa <GAT_att_srv_find_info_exc+0xde>
10055336:	08c0      	lsrs	r0, r0, #3
10055338:	9004      	str	r0, [sp, #16]
1005533a:	9d06      	ldr	r5, [sp, #24]
1005533c:	e016      	b.n	1005536c <GAT_att_srv_find_info_exc+0xa0>
1005533e:	89b9      	ldrh	r1, [r7, #12]
10055340:	2205      	movs	r2, #5
10055342:	4638      	mov	r0, r7
10055344:	f7ff fe80 	bl	10055048 <ACL_pkt_write_8b>
10055348:	2e10      	cmp	r6, #16
1005534a:	d001      	beq.n	10055350 <GAT_att_srv_find_info_exc+0x84>
1005534c:	2202      	movs	r2, #2
1005534e:	e000      	b.n	10055352 <GAT_att_srv_find_info_exc+0x86>
10055350:	2201      	movs	r2, #1
10055352:	9d06      	ldr	r5, [sp, #24]
10055354:	89b8      	ldrh	r0, [r7, #12]
10055356:	1c40      	adds	r0, r0, #1
10055358:	b281      	uxth	r1, r0
1005535a:	4638      	mov	r0, r7
1005535c:	9203      	str	r2, [sp, #12]
1005535e:	f7ff fe73 	bl	10055048 <ACL_pkt_write_8b>
10055362:	1cad      	adds	r5, r5, #2
10055364:	08f0      	lsrs	r0, r6, #3
10055366:	9004      	str	r0, [sp, #16]
10055368:	1c84      	adds	r4, r0, #2
1005536a:	9600      	str	r6, [sp, #0]
1005536c:	89b8      	ldrh	r0, [r7, #12]
1005536e:	1940      	adds	r0, r0, r5
10055370:	b281      	uxth	r1, r0
10055372:	4638      	mov	r0, r7
10055374:	9a07      	ldr	r2, [sp, #28]
10055376:	f7fd fc52 	bl	10052c1e <ACL_pkt_write_16b>
1005537a:	89b8      	ldrh	r0, [r7, #12]
1005537c:	1828      	adds	r0, r5, r0
1005537e:	1c86      	adds	r6, r0, #2
10055380:	a808      	add	r0, sp, #32
10055382:	f00d fa86 	bl	10062892 <UUID_get_value_p>
10055386:	4603      	mov	r3, r0
10055388:	b2b1      	uxth	r1, r6
1005538a:	9804      	ldr	r0, [sp, #16]
1005538c:	b2c2      	uxtb	r2, r0
1005538e:	4638      	mov	r0, r7
10055390:	f7fd fc4e 	bl	10052c30 <ACL_pkt_write>
10055394:	b2e0      	uxtb	r0, r4
10055396:	182d      	adds	r5, r5, r0
10055398:	9805      	ldr	r0, [sp, #20]
1005539a:	f00f f9d9 	bl	10064750 <GAT_att_db_get_next>
1005539e:	4602      	mov	r2, r0
100553a0:	4623      	mov	r3, r4
100553a2:	e7ab      	b.n	100552fc <GAT_att_srv_find_info_exc+0x30>
100553a4:	9803      	ldr	r0, [sp, #12]
100553a6:	0600      	lsls	r0, r0, #24
100553a8:	d003      	beq.n	100553b2 <GAT_att_srv_find_info_exc+0xe6>
100553aa:	9806      	ldr	r0, [sp, #24]
100553ac:	8078      	strh	r0, [r7, #2]
100553ae:	2000      	movs	r0, #0
100553b0:	e007      	b.n	100553c2 <GAT_att_srv_find_info_exc+0xf6>
100553b2:	9807      	ldr	r0, [sp, #28]
100553b4:	b281      	uxth	r1, r0
100553b6:	2004      	movs	r0, #4
100553b8:	220a      	movs	r2, #10
100553ba:	463b      	mov	r3, r7
100553bc:	f7ff fec4 	bl	10055148 <GAT_att_srv_write_err_packet>
100553c0:	2086      	movs	r0, #134	@ 0x86
100553c2:	b00f      	add	sp, #60	@ 0x3c
100553c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

100553c6 <GAT_att_srv_find_by_type_val_exc>:
100553c6:	b5f0      	push	{r4, r5, r6, r7, lr}
100553c8:	b091      	sub	sp, #68	@ 0x44
100553ca:	4607      	mov	r7, r0
100553cc:	ac09      	add	r4, sp, #36	@ 0x24
100553ce:	2010      	movs	r0, #16
100553d0:	7420      	strb	r0, [r4, #16]
100553d2:	6878      	ldr	r0, [r7, #4]
100553d4:	8981      	ldrh	r1, [r0, #12]
100553d6:	1d49      	adds	r1, r1, #5
100553d8:	b289      	uxth	r1, r1
100553da:	f7fd fc10 	bl	10052bfe <ACL_pkt_read_16b>
100553de:	81a0      	strh	r0, [r4, #12]
100553e0:	6878      	ldr	r0, [r7, #4]
100553e2:	ae0f      	add	r6, sp, #60	@ 0x3c
100553e4:	ad0e      	add	r5, sp, #56	@ 0x38
100553e6:	4631      	mov	r1, r6
100553e8:	462a      	mov	r2, r5
100553ea:	f000 fbf8 	bl	10055bde <GAT_att_srv_get_handle_range>
100553ee:	8836      	ldrh	r6, [r6, #0]
100553f0:	6878      	ldr	r0, [r7, #4]
100553f2:	9706      	str	r7, [sp, #24]
100553f4:	68b9      	ldr	r1, [r7, #8]
100553f6:	8844      	ldrh	r4, [r0, #2]
100553f8:	68c8      	ldr	r0, [r1, #12]
100553fa:	8981      	ldrh	r1, [r0, #12]
100553fc:	2207      	movs	r2, #7
100553fe:	9002      	str	r0, [sp, #8]
10055400:	f7ff fe22 	bl	10055048 <ACL_pkt_write_8b>
10055404:	1fe0      	subs	r0, r4, #7
10055406:	8829      	ldrh	r1, [r5, #0]
10055408:	9104      	str	r1, [sp, #16]
1005540a:	2101      	movs	r1, #1
1005540c:	9105      	str	r1, [sp, #20]
1005540e:	b280      	uxth	r0, r0
10055410:	9003      	str	r0, [sp, #12]
10055412:	9601      	str	r6, [sp, #4]
10055414:	9805      	ldr	r0, [sp, #20]
10055416:	b287      	uxth	r7, r0
10055418:	1d3c      	adds	r4, r7, #4
1005541a:	9806      	ldr	r0, [sp, #24]
1005541c:	6880      	ldr	r0, [r0, #8]
1005541e:	88c0      	ldrh	r0, [r0, #6]
10055420:	4284      	cmp	r4, r0
10055422:	d83c      	bhi.n	1005549e <GAT_att_srv_find_by_type_val_exc+0xd8>
10055424:	b2b0      	uxth	r0, r6
10055426:	aa09      	add	r2, sp, #36	@ 0x24
10055428:	9904      	ldr	r1, [sp, #16]
1005542a:	f001 fabf 	bl	100569ac <GAT_srv_find_by_type_attr_p>
1005542e:	2800      	cmp	r0, #0
10055430:	d035      	beq.n	1005549e <GAT_att_srv_find_by_type_val_exc+0xd8>
10055432:	4605      	mov	r5, r0
10055434:	a810      	add	r0, sp, #64	@ 0x40
10055436:	9000      	str	r0, [sp, #0]
10055438:	2200      	movs	r2, #0
1005543a:	ab08      	add	r3, sp, #32
1005543c:	9806      	ldr	r0, [sp, #24]
1005543e:	4629      	mov	r1, r5
10055440:	f000 fbe0 	bl	10055c04 <GAT_att_srv_value_read>
10055444:	2886      	cmp	r0, #134	@ 0x86
10055446:	d028      	beq.n	1005549a <GAT_att_srv_find_by_type_val_exc+0xd4>
10055448:	2800      	cmp	r0, #0
1005544a:	d136      	bne.n	100554ba <GAT_att_srv_find_by_type_val_exc+0xf4>
1005544c:	886e      	ldrh	r6, [r5, #2]
1005544e:	9808      	ldr	r0, [sp, #32]
10055450:	6843      	ldr	r3, [r0, #4]
10055452:	9806      	ldr	r0, [sp, #24]
10055454:	6840      	ldr	r0, [r0, #4]
10055456:	8981      	ldrh	r1, [r0, #12]
10055458:	1dc9      	adds	r1, r1, #7
1005545a:	b289      	uxth	r1, r1
1005545c:	9f03      	ldr	r7, [sp, #12]
1005545e:	463a      	mov	r2, r7
10055460:	f7fd fbbb 	bl	10052bda <ACL_pkt_cmp>
10055464:	9908      	ldr	r1, [sp, #32]
10055466:	8809      	ldrh	r1, [r1, #0]
10055468:	42b9      	cmp	r1, r7
1005546a:	d116      	bne.n	1005549a <GAT_att_srv_find_by_type_val_exc+0xd4>
1005546c:	2800      	cmp	r0, #0
1005546e:	d114      	bne.n	1005549a <GAT_att_srv_find_by_type_val_exc+0xd4>
10055470:	af07      	add	r7, sp, #28
10055472:	703e      	strb	r6, [r7, #0]
10055474:	0a30      	lsrs	r0, r6, #8
10055476:	7078      	strb	r0, [r7, #1]
10055478:	4628      	mov	r0, r5
1005547a:	f000 ff4f 	bl	1005631c <GAT_srv_get_att_group_end_handle>
1005547e:	4606      	mov	r6, r0
10055480:	70b8      	strb	r0, [r7, #2]
10055482:	0a00      	lsrs	r0, r0, #8
10055484:	70f8      	strb	r0, [r7, #3]
10055486:	9802      	ldr	r0, [sp, #8]
10055488:	8981      	ldrh	r1, [r0, #12]
1005548a:	9a05      	ldr	r2, [sp, #20]
1005548c:	1889      	adds	r1, r1, r2
1005548e:	b289      	uxth	r1, r1
10055490:	2204      	movs	r2, #4
10055492:	463b      	mov	r3, r7
10055494:	f7fd fbcc 	bl	10052c30 <ACL_pkt_write>
10055498:	9405      	str	r4, [sp, #20]
1005549a:	1c76      	adds	r6, r6, #1
1005549c:	e7ba      	b.n	10055414 <GAT_att_srv_find_by_type_val_exc+0x4e>
1005549e:	2f01      	cmp	r7, #1
100554a0:	d107      	bne.n	100554b2 <GAT_att_srv_find_by_type_val_exc+0xec>
100554a2:	2006      	movs	r0, #6
100554a4:	220a      	movs	r2, #10
100554a6:	9901      	ldr	r1, [sp, #4]
100554a8:	9b02      	ldr	r3, [sp, #8]
100554aa:	f7ff fe4d 	bl	10055148 <GAT_att_srv_write_err_packet>
100554ae:	2086      	movs	r0, #134	@ 0x86
100554b0:	e003      	b.n	100554ba <GAT_att_srv_find_by_type_val_exc+0xf4>
100554b2:	9802      	ldr	r0, [sp, #8]
100554b4:	9905      	ldr	r1, [sp, #20]
100554b6:	8041      	strh	r1, [r0, #2]
100554b8:	2000      	movs	r0, #0
100554ba:	b011      	add	sp, #68	@ 0x44
100554bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

100554be <GAT_att_srv_read_by_type_exc>:
100554be:	b5f0      	push	{r4, r5, r6, r7, lr}
100554c0:	b097      	sub	sp, #92	@ 0x5c
100554c2:	4604      	mov	r4, r0
100554c4:	6840      	ldr	r0, [r0, #4]
100554c6:	a915      	add	r1, sp, #84	@ 0x54
100554c8:	aa14      	add	r2, sp, #80	@ 0x50
100554ca:	f000 fb88 	bl	10055bde <GAT_att_srv_get_handle_range>
100554ce:	940a      	str	r4, [sp, #40]	@ 0x28
100554d0:	6860      	ldr	r0, [r4, #4]
100554d2:	8981      	ldrh	r1, [r0, #12]
100554d4:	1d49      	adds	r1, r1, #5
100554d6:	8842      	ldrh	r2, [r0, #2]
100554d8:	b289      	uxth	r1, r1
100554da:	2a07      	cmp	r2, #7
100554dc:	d105      	bne.n	100554ea <GAT_att_srv_read_by_type_exc+0x2c>
100554de:	f7fd fb8e 	bl	10052bfe <ACL_pkt_read_16b>
100554e2:	a90f      	add	r1, sp, #60	@ 0x3c
100554e4:	8188      	strh	r0, [r1, #12]
100554e6:	2010      	movs	r0, #16
100554e8:	e004      	b.n	100554f4 <GAT_att_srv_read_by_type_exc+0x36>
100554ea:	2210      	movs	r2, #16
100554ec:	ab0f      	add	r3, sp, #60	@ 0x3c
100554ee:	f7fd fb7d 	bl	10052bec <ACL_pkt_read>
100554f2:	2080      	movs	r0, #128	@ 0x80
100554f4:	a90f      	add	r1, sp, #60	@ 0x3c
100554f6:	7408      	strb	r0, [r1, #16]
100554f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
100554fa:	7840      	ldrb	r0, [r0, #1]
100554fc:	2810      	cmp	r0, #16
100554fe:	d001      	beq.n	10055504 <GAT_att_srv_read_by_type_exc+0x46>
10055500:	2102      	movs	r1, #2
10055502:	e000      	b.n	10055506 <GAT_att_srv_read_by_type_exc+0x48>
10055504:	2104      	movs	r1, #4
10055506:	9107      	str	r1, [sp, #28]
10055508:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1005550a:	6891      	ldr	r1, [r2, #8]
1005550c:	68cc      	ldr	r4, [r1, #12]
1005550e:	88cb      	ldrh	r3, [r1, #6]
10055510:	9305      	str	r3, [sp, #20]
10055512:	7812      	ldrb	r2, [r2, #0]
10055514:	2a00      	cmp	r2, #0
10055516:	9404      	str	r4, [sp, #16]
10055518:	d00a      	beq.n	10055530 <GAT_att_srv_read_by_type_exc+0x72>
1005551a:	8865      	ldrh	r5, [r4, #2]
1005551c:	2d02      	cmp	r5, #2
1005551e:	d315      	bcc.n	1005554c <GAT_att_srv_read_by_type_exc+0x8e>
10055520:	89a0      	ldrh	r0, [r4, #12]
10055522:	1c40      	adds	r0, r0, #1
10055524:	b281      	uxth	r1, r0
10055526:	4620      	mov	r0, r4
10055528:	f000 fba9 	bl	10055c7e <ACL_pkt_read_8b>
1005552c:	4606      	mov	r6, r0
1005552e:	e00e      	b.n	1005554e <GAT_att_srv_read_by_type_exc+0x90>
10055530:	aa15      	add	r2, sp, #84	@ 0x54
10055532:	8815      	ldrh	r5, [r2, #0]
10055534:	2810      	cmp	r0, #16
10055536:	d112      	bne.n	1005555e <GAT_att_srv_read_by_type_exc+0xa0>
10055538:	a80f      	add	r0, sp, #60	@ 0x3c
1005553a:	f001 f999 	bl	10056870 <GAT_srv_is_supported_grouping_type>
1005553e:	2800      	cmp	r0, #0
10055540:	d100      	bne.n	10055544 <GAT_att_srv_read_by_type_exc+0x86>
10055542:	e0b8      	b.n	100556b6 <GAT_att_srv_read_by_type_exc+0x1f8>
10055544:	9508      	str	r5, [sp, #32]
10055546:	89a1      	ldrh	r1, [r4, #12]
10055548:	2211      	movs	r2, #17
1005554a:	e01b      	b.n	10055584 <GAT_att_srv_read_by_type_exc+0xc6>
1005554c:	2600      	movs	r6, #0
1005554e:	89a0      	ldrh	r0, [r4, #12]
10055550:	1940      	adds	r0, r0, r5
10055552:	b281      	uxth	r1, r0
10055554:	4620      	mov	r0, r4
10055556:	f7fd fb52 	bl	10052bfe <ACL_pkt_read_16b>
1005555a:	9008      	str	r0, [sp, #32]
1005555c:	e018      	b.n	10055590 <GAT_att_srv_read_by_type_exc+0xd2>
1005555e:	a80b      	add	r0, sp, #44	@ 0x2c
10055560:	8105      	strh	r5, [r0, #8]
10055562:	2202      	movs	r2, #2
10055564:	7102      	strb	r2, [r0, #4]
10055566:	9a14      	ldr	r2, [sp, #80]	@ 0x50
10055568:	8142      	strh	r2, [r0, #10]
1005556a:	910b      	str	r1, [sp, #44]	@ 0x2c
1005556c:	a90f      	add	r1, sp, #60	@ 0x3c
1005556e:	910e      	str	r1, [sp, #56]	@ 0x38
10055570:	f001 f9c0 	bl	100568f4 <GAT_srv_check_change_aware>
10055574:	2886      	cmp	r0, #134	@ 0x86
10055576:	d102      	bne.n	1005557e <GAT_att_srv_read_by_type_exc+0xc0>
10055578:	a816      	add	r0, sp, #88	@ 0x58
1005557a:	2212      	movs	r2, #18
1005557c:	e09d      	b.n	100556ba <GAT_att_srv_read_by_type_exc+0x1fc>
1005557e:	9508      	str	r5, [sp, #32]
10055580:	89a1      	ldrh	r1, [r4, #12]
10055582:	2209      	movs	r2, #9
10055584:	4620      	mov	r0, r4
10055586:	f7ff fd5f 	bl	10055048 <ACL_pkt_write_8b>
1005558a:	2501      	movs	r5, #1
1005558c:	8065      	strh	r5, [r4, #2]
1005558e:	2600      	movs	r6, #0
10055590:	9805      	ldr	r0, [sp, #20]
10055592:	1e80      	subs	r0, r0, #2
10055594:	9001      	str	r0, [sp, #4]
10055596:	a814      	add	r0, sp, #80	@ 0x50
10055598:	8800      	ldrh	r0, [r0, #0]
1005559a:	9003      	str	r0, [sp, #12]
1005559c:	9609      	str	r6, [sp, #36]	@ 0x24
1005559e:	b2f6      	uxtb	r6, r6
100555a0:	9506      	str	r5, [sp, #24]
100555a2:	b2af      	uxth	r7, r5
100555a4:	19b8      	adds	r0, r7, r6
100555a6:	9905      	ldr	r1, [sp, #20]
100555a8:	4288      	cmp	r0, r1
100555aa:	d874      	bhi.n	10055696 <GAT_att_srv_read_by_type_exc+0x1d8>
100555ac:	9808      	ldr	r0, [sp, #32]
100555ae:	b285      	uxth	r5, r0
100555b0:	aa0f      	add	r2, sp, #60	@ 0x3c
100555b2:	4628      	mov	r0, r5
100555b4:	9903      	ldr	r1, [sp, #12]
100555b6:	f001 f9f9 	bl	100569ac <GAT_srv_find_by_type_attr_p>
100555ba:	2800      	cmp	r0, #0
100555bc:	d06b      	beq.n	10055696 <GAT_att_srv_read_by_type_exc+0x1d8>
100555be:	4604      	mov	r4, r0
100555c0:	9502      	str	r5, [sp, #8]
100555c2:	a816      	add	r0, sp, #88	@ 0x58
100555c4:	9000      	str	r0, [sp, #0]
100555c6:	2500      	movs	r5, #0
100555c8:	ab0b      	add	r3, sp, #44	@ 0x2c
100555ca:	980a      	ldr	r0, [sp, #40]	@ 0x28
100555cc:	4621      	mov	r1, r4
100555ce:	462a      	mov	r2, r5
100555d0:	f000 fb18 	bl	10055c04 <GAT_att_srv_value_read>
100555d4:	2800      	cmp	r0, #0
100555d6:	d14f      	bne.n	10055678 <GAT_att_srv_read_by_type_exc+0x1ba>
100555d8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
100555da:	8800      	ldrh	r0, [r0, #0]
100555dc:	9907      	ldr	r1, [sp, #28]
100555de:	1809      	adds	r1, r1, r0
100555e0:	2f01      	cmp	r7, #1
100555e2:	d111      	bne.n	10055608 <GAT_att_srv_read_by_type_exc+0x14a>
100555e4:	29ff      	cmp	r1, #255	@ 0xff
100555e6:	d300      	bcc.n	100555ea <GAT_att_srv_read_by_type_exc+0x12c>
100555e8:	21ff      	movs	r1, #255	@ 0xff
100555ea:	9801      	ldr	r0, [sp, #4]
100555ec:	4281      	cmp	r1, r0
100555ee:	d300      	bcc.n	100555f2 <GAT_att_srv_read_by_type_exc+0x134>
100555f0:	9901      	ldr	r1, [sp, #4]
100555f2:	9109      	str	r1, [sp, #36]	@ 0x24
100555f4:	b2ca      	uxtb	r2, r1
100555f6:	9e04      	ldr	r6, [sp, #16]
100555f8:	89b0      	ldrh	r0, [r6, #12]
100555fa:	1c40      	adds	r0, r0, #1
100555fc:	b281      	uxth	r1, r0
100555fe:	4630      	mov	r0, r6
10055600:	f7ff fd22 	bl	10055048 <ACL_pkt_write_8b>
10055604:	2702      	movs	r7, #2
10055606:	e003      	b.n	10055610 <GAT_att_srv_read_by_type_exc+0x152>
10055608:	42b1      	cmp	r1, r6
1005560a:	9e04      	ldr	r6, [sp, #16]
1005560c:	9f06      	ldr	r7, [sp, #24]
1005560e:	d15c      	bne.n	100556ca <GAT_att_srv_read_by_type_exc+0x20c>
10055610:	8865      	ldrh	r5, [r4, #2]
10055612:	4620      	mov	r0, r4
10055614:	f000 fe82 	bl	1005631c <GAT_srv_get_att_group_end_handle>
10055618:	9008      	str	r0, [sp, #32]
1005561a:	89b0      	ldrh	r0, [r6, #12]
1005561c:	19c0      	adds	r0, r0, r7
1005561e:	b281      	uxth	r1, r0
10055620:	4630      	mov	r0, r6
10055622:	462a      	mov	r2, r5
10055624:	f7fd fafb 	bl	10052c1e <ACL_pkt_write_16b>
10055628:	9807      	ldr	r0, [sp, #28]
1005562a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005562c:	1a0a      	subs	r2, r1, r0
1005562e:	463c      	mov	r4, r7
10055630:	1cbf      	adds	r7, r7, #2
10055632:	980a      	ldr	r0, [sp, #40]	@ 0x28
10055634:	7840      	ldrb	r0, [r0, #1]
10055636:	2810      	cmp	r0, #16
10055638:	d10a      	bne.n	10055650 <GAT_att_srv_read_by_type_exc+0x192>
1005563a:	89b0      	ldrh	r0, [r6, #12]
1005563c:	19c0      	adds	r0, r0, r7
1005563e:	b281      	uxth	r1, r0
10055640:	4630      	mov	r0, r6
10055642:	9d08      	ldr	r5, [sp, #32]
10055644:	4617      	mov	r7, r2
10055646:	462a      	mov	r2, r5
10055648:	f7fd fae9 	bl	10052c1e <ACL_pkt_write_16b>
1005564c:	463a      	mov	r2, r7
1005564e:	1d27      	adds	r7, r4, #4
10055650:	462c      	mov	r4, r5
10055652:	89b0      	ldrh	r0, [r6, #12]
10055654:	19c0      	adds	r0, r0, r7
10055656:	b281      	uxth	r1, r0
10055658:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005565a:	6843      	ldr	r3, [r0, #4]
1005565c:	b2d5      	uxtb	r5, r2
1005565e:	4630      	mov	r0, r6
10055660:	462a      	mov	r2, r5
10055662:	f7fd fae5 	bl	10052c30 <ACL_pkt_write>
10055666:	197d      	adds	r5, r7, r5
10055668:	8075      	strh	r5, [r6, #2]
1005566a:	2002      	movs	r0, #2
1005566c:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005566e:	7008      	strb	r0, [r1, #0]
10055670:	1c60      	adds	r0, r4, #1
10055672:	9008      	str	r0, [sp, #32]
10055674:	9e09      	ldr	r6, [sp, #36]	@ 0x24
10055676:	e791      	b.n	1005559c <GAT_att_srv_read_by_type_exc+0xde>
10055678:	2886      	cmp	r0, #134	@ 0x86
1005567a:	9a06      	ldr	r2, [sp, #24]
1005567c:	d016      	beq.n	100556ac <GAT_att_srv_read_by_type_exc+0x1ee>
1005567e:	2884      	cmp	r0, #132	@ 0x84
10055680:	4605      	mov	r5, r0
10055682:	9804      	ldr	r0, [sp, #16]
10055684:	d121      	bne.n	100556ca <GAT_att_srv_read_by_type_exc+0x20c>
10055686:	8981      	ldrh	r1, [r0, #12]
10055688:	1889      	adds	r1, r1, r2
1005568a:	b289      	uxth	r1, r1
1005568c:	9a02      	ldr	r2, [sp, #8]
1005568e:	f7fd fac6 	bl	10052c1e <ACL_pkt_write_16b>
10055692:	2584      	movs	r5, #132	@ 0x84
10055694:	e019      	b.n	100556ca <GAT_att_srv_read_by_type_exc+0x20c>
10055696:	2f01      	cmp	r7, #1
10055698:	d106      	bne.n	100556a8 <GAT_att_srv_read_by_type_exc+0x1ea>
1005569a:	a816      	add	r0, sp, #88	@ 0x58
1005569c:	220a      	movs	r2, #10
1005569e:	7002      	strb	r2, [r0, #0]
100556a0:	a815      	add	r0, sp, #84	@ 0x54
100556a2:	8805      	ldrh	r5, [r0, #0]
100556a4:	9c04      	ldr	r4, [sp, #16]
100556a6:	e009      	b.n	100556bc <GAT_att_srv_read_by_type_exc+0x1fe>
100556a8:	2500      	movs	r5, #0
100556aa:	e00e      	b.n	100556ca <GAT_att_srv_read_by_type_exc+0x20c>
100556ac:	a816      	add	r0, sp, #88	@ 0x58
100556ae:	7802      	ldrb	r2, [r0, #0]
100556b0:	9c04      	ldr	r4, [sp, #16]
100556b2:	9d08      	ldr	r5, [sp, #32]
100556b4:	e002      	b.n	100556bc <GAT_att_srv_read_by_type_exc+0x1fe>
100556b6:	a816      	add	r0, sp, #88	@ 0x58
100556b8:	2210      	movs	r2, #16
100556ba:	7002      	strb	r2, [r0, #0]
100556bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
100556be:	7840      	ldrb	r0, [r0, #1]
100556c0:	b2a9      	uxth	r1, r5
100556c2:	4623      	mov	r3, r4
100556c4:	f7ff fd40 	bl	10055148 <GAT_att_srv_write_err_packet>
100556c8:	2586      	movs	r5, #134	@ 0x86
100556ca:	4628      	mov	r0, r5
100556cc:	b017      	add	sp, #92	@ 0x5c
100556ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

100556d0 <GAT_att_srv_read_exc>:
100556d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100556d2:	b08b      	sub	sp, #44	@ 0x2c
100556d4:	4605      	mov	r5, r0
100556d6:	6880      	ldr	r0, [r0, #8]
100556d8:	68c4      	ldr	r4, [r0, #12]
100556da:	88c7      	ldrh	r7, [r0, #6]
100556dc:	7828      	ldrb	r0, [r5, #0]
100556de:	2800      	cmp	r0, #0
100556e0:	d024      	beq.n	1005572c <GAT_att_srv_read_exc+0x5c>
100556e2:	462e      	mov	r6, r5
100556e4:	360c      	adds	r6, #12
100556e6:	9605      	str	r6, [sp, #20]
100556e8:	6868      	ldr	r0, [r5, #4]
100556ea:	8980      	ldrh	r0, [r0, #12]
100556ec:	1c40      	adds	r0, r0, #1
100556ee:	b281      	uxth	r1, r0
100556f0:	2204      	movs	r2, #4
100556f2:	ab04      	add	r3, sp, #16
100556f4:	4620      	mov	r0, r4
100556f6:	f7fd fa79 	bl	10052bec <ACL_pkt_read>
100556fa:	8830      	ldrh	r0, [r6, #0]
100556fc:	7869      	ldrb	r1, [r5, #1]
100556fe:	1e7f      	subs	r7, r7, #1
10055700:	290c      	cmp	r1, #12
10055702:	d103      	bne.n	1005570c <GAT_att_srv_read_exc+0x3c>
10055704:	4287      	cmp	r7, r0
10055706:	d253      	bcs.n	100557b0 <GAT_att_srv_read_exc+0xe0>
10055708:	9904      	ldr	r1, [sp, #16]
1005570a:	1a40      	subs	r0, r0, r1
1005570c:	b280      	uxth	r0, r0
1005570e:	4287      	cmp	r7, r0
10055710:	d300      	bcc.n	10055714 <GAT_att_srv_read_exc+0x44>
10055712:	4607      	mov	r7, r0
10055714:	b2ba      	uxth	r2, r7
10055716:	6873      	ldr	r3, [r6, #4]
10055718:	89a0      	ldrh	r0, [r4, #12]
1005571a:	1c40      	adds	r0, r0, #1
1005571c:	b281      	uxth	r1, r0
1005571e:	4620      	mov	r0, r4
10055720:	f7fd fa86 	bl	10052c30 <ACL_pkt_write>
10055724:	1c78      	adds	r0, r7, #1
10055726:	8060      	strh	r0, [r4, #2]
10055728:	2000      	movs	r0, #0
1005572a:	e04d      	b.n	100557c8 <GAT_att_srv_read_exc+0xf8>
1005572c:	7868      	ldrb	r0, [r5, #1]
1005572e:	280c      	cmp	r0, #12
10055730:	9702      	str	r7, [sp, #8]
10055732:	d107      	bne.n	10055744 <GAT_att_srv_read_exc+0x74>
10055734:	6868      	ldr	r0, [r5, #4]
10055736:	8981      	ldrh	r1, [r0, #12]
10055738:	1cc9      	adds	r1, r1, #3
1005573a:	b289      	uxth	r1, r1
1005573c:	f7fd fa5f 	bl	10052bfe <ACL_pkt_read_16b>
10055740:	220d      	movs	r2, #13
10055742:	e001      	b.n	10055748 <GAT_att_srv_read_exc+0x78>
10055744:	220b      	movs	r2, #11
10055746:	2000      	movs	r0, #0
10055748:	af04      	add	r7, sp, #16
1005574a:	9003      	str	r0, [sp, #12]
1005574c:	8038      	strh	r0, [r7, #0]
1005574e:	89a1      	ldrh	r1, [r4, #12]
10055750:	4620      	mov	r0, r4
10055752:	f7ff fc79 	bl	10055048 <ACL_pkt_write_8b>
10055756:	6868      	ldr	r0, [r5, #4]
10055758:	8981      	ldrh	r1, [r0, #12]
1005575a:	1c49      	adds	r1, r1, #1
1005575c:	b289      	uxth	r1, r1
1005575e:	f7fd fa4e 	bl	10052bfe <ACL_pkt_read_16b>
10055762:	4606      	mov	r6, r0
10055764:	8078      	strh	r0, [r7, #2]
10055766:	a807      	add	r0, sp, #28
10055768:	8106      	strh	r6, [r0, #8]
1005576a:	2701      	movs	r7, #1
1005576c:	7107      	strb	r7, [r0, #4]
1005576e:	68a9      	ldr	r1, [r5, #8]
10055770:	9107      	str	r1, [sp, #28]
10055772:	f001 f8bf 	bl	100568f4 <GAT_srv_check_change_aware>
10055776:	2886      	cmp	r0, #134	@ 0x86
10055778:	d101      	bne.n	1005577e <GAT_att_srv_read_exc+0xae>
1005577a:	2712      	movs	r7, #18
1005577c:	e015      	b.n	100557aa <GAT_att_srv_read_exc+0xda>
1005577e:	4630      	mov	r0, r6
10055780:	f00e ff5c 	bl	1006463c <GAT_att_db_find_by_handle>
10055784:	2800      	cmp	r0, #0
10055786:	d010      	beq.n	100557aa <GAT_att_srv_read_exc+0xda>
10055788:	4601      	mov	r1, r0
1005578a:	a806      	add	r0, sp, #24
1005578c:	9000      	str	r0, [sp, #0]
1005578e:	ab05      	add	r3, sp, #20
10055790:	4628      	mov	r0, r5
10055792:	9a03      	ldr	r2, [sp, #12]
10055794:	f000 fa36 	bl	10055c04 <GAT_att_srv_value_read>
10055798:	2800      	cmp	r0, #0
1005579a:	d017      	beq.n	100557cc <GAT_att_srv_read_exc+0xfc>
1005579c:	2884      	cmp	r0, #132	@ 0x84
1005579e:	d018      	beq.n	100557d2 <GAT_att_srv_read_exc+0x102>
100557a0:	2886      	cmp	r0, #134	@ 0x86
100557a2:	d111      	bne.n	100557c8 <GAT_att_srv_read_exc+0xf8>
100557a4:	a806      	add	r0, sp, #24
100557a6:	7807      	ldrb	r7, [r0, #0]
100557a8:	e007      	b.n	100557ba <GAT_att_srv_read_exc+0xea>
100557aa:	a806      	add	r0, sp, #24
100557ac:	7007      	strb	r7, [r0, #0]
100557ae:	e004      	b.n	100557ba <GAT_att_srv_read_exc+0xea>
100557b0:	a806      	add	r0, sp, #24
100557b2:	270b      	movs	r7, #11
100557b4:	7007      	strb	r7, [r0, #0]
100557b6:	a804      	add	r0, sp, #16
100557b8:	8846      	ldrh	r6, [r0, #2]
100557ba:	7868      	ldrb	r0, [r5, #1]
100557bc:	4631      	mov	r1, r6
100557be:	463a      	mov	r2, r7
100557c0:	4623      	mov	r3, r4
100557c2:	f7ff fcc1 	bl	10055148 <GAT_att_srv_write_err_packet>
100557c6:	2086      	movs	r0, #134	@ 0x86
100557c8:	b00b      	add	sp, #44	@ 0x2c
100557ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
100557cc:	9e05      	ldr	r6, [sp, #20]
100557ce:	9f02      	ldr	r7, [sp, #8]
100557d0:	e793      	b.n	100556fa <GAT_att_srv_read_exc+0x2a>
100557d2:	89a0      	ldrh	r0, [r4, #12]
100557d4:	1c40      	adds	r0, r0, #1
100557d6:	b281      	uxth	r1, r0
100557d8:	2204      	movs	r2, #4
100557da:	ab04      	add	r3, sp, #16
100557dc:	4620      	mov	r0, r4
100557de:	f7fd fa27 	bl	10052c30 <ACL_pkt_write>
100557e2:	2084      	movs	r0, #132	@ 0x84
100557e4:	e7f0      	b.n	100557c8 <GAT_att_srv_read_exc+0xf8>

100557e6 <GAT_att_srv_read_multi_exc>:
100557e6:	b5f0      	push	{r4, r5, r6, r7, lr}
100557e8:	b08d      	sub	sp, #52	@ 0x34
100557ea:	6881      	ldr	r1, [r0, #8]
100557ec:	68ce      	ldr	r6, [r1, #12]
100557ee:	88c9      	ldrh	r1, [r1, #6]
100557f0:	9106      	str	r1, [sp, #24]
100557f2:	7801      	ldrb	r1, [r0, #0]
100557f4:	2900      	cmp	r1, #0
100557f6:	9007      	str	r0, [sp, #28]
100557f8:	d009      	beq.n	1005580e <GAT_att_srv_read_multi_exc+0x28>
100557fa:	8877      	ldrh	r7, [r6, #2]
100557fc:	89b0      	ldrh	r0, [r6, #12]
100557fe:	19c0      	adds	r0, r0, r7
10055800:	b281      	uxth	r1, r0
10055802:	4630      	mov	r0, r6
10055804:	f7fd f9fb 	bl	10052bfe <ACL_pkt_read_16b>
10055808:	9907      	ldr	r1, [sp, #28]
1005580a:	4602      	mov	r2, r0
1005580c:	e00c      	b.n	10055828 <GAT_att_srv_read_multi_exc+0x42>
1005580e:	7840      	ldrb	r0, [r0, #1]
10055810:	280e      	cmp	r0, #14
10055812:	d001      	beq.n	10055818 <GAT_att_srv_read_multi_exc+0x32>
10055814:	2221      	movs	r2, #33	@ 0x21
10055816:	e000      	b.n	1005581a <GAT_att_srv_read_multi_exc+0x34>
10055818:	220f      	movs	r2, #15
1005581a:	89b1      	ldrh	r1, [r6, #12]
1005581c:	4630      	mov	r0, r6
1005581e:	f7ff fc13 	bl	10055048 <ACL_pkt_write_8b>
10055822:	2201      	movs	r2, #1
10055824:	4617      	mov	r7, r2
10055826:	9907      	ldr	r1, [sp, #28]
10055828:	6848      	ldr	r0, [r1, #4]
1005582a:	7880      	ldrb	r0, [r0, #2]
1005582c:	1a80      	subs	r0, r0, r2
1005582e:	b2c0      	uxtb	r0, r0
10055830:	0845      	lsrs	r5, r0, #1
10055832:	7808      	ldrb	r0, [r1, #0]
10055834:	2800      	cmp	r0, #0
10055836:	9602      	str	r6, [sp, #8]
10055838:	d066      	beq.n	10055908 <GAT_att_srv_read_multi_exc+0x122>
1005583a:	9907      	ldr	r1, [sp, #28]
1005583c:	4608      	mov	r0, r1
1005583e:	300c      	adds	r0, #12
10055840:	9001      	str	r0, [sp, #4]
10055842:	b2ed      	uxtb	r5, r5
10055844:	35ff      	adds	r5, #255	@ 0xff
10055846:	b2e8      	uxtb	r0, r5
10055848:	2300      	movs	r3, #0
1005584a:	9303      	str	r3, [sp, #12]
1005584c:	42a8      	cmp	r0, r5
1005584e:	d100      	bne.n	10055852 <GAT_att_srv_read_multi_exc+0x6c>
10055850:	e0b3      	b.n	100559ba <GAT_att_srv_read_multi_exc+0x1d4>
10055852:	b2bc      	uxth	r4, r7
10055854:	9806      	ldr	r0, [sp, #24]
10055856:	42a0      	cmp	r0, r4
10055858:	d800      	bhi.n	1005585c <GAT_att_srv_read_multi_exc+0x76>
1005585a:	e0ae      	b.n	100559ba <GAT_att_srv_read_multi_exc+0x1d4>
1005585c:	6848      	ldr	r0, [r1, #4]
1005585e:	8981      	ldrh	r1, [r0, #12]
10055860:	9205      	str	r2, [sp, #20]
10055862:	1889      	adds	r1, r1, r2
10055864:	b289      	uxth	r1, r1
10055866:	2202      	movs	r2, #2
10055868:	ab0c      	add	r3, sp, #48	@ 0x30
1005586a:	9204      	str	r2, [sp, #16]
1005586c:	f7fd f9be 	bl	10052bec <ACL_pkt_read>
10055870:	9907      	ldr	r1, [sp, #28]
10055872:	7808      	ldrb	r0, [r1, #0]
10055874:	2801      	cmp	r0, #1
10055876:	d102      	bne.n	1005587e <GAT_att_srv_read_multi_exc+0x98>
10055878:	9801      	ldr	r0, [sp, #4]
1005587a:	9008      	str	r0, [sp, #32]
1005587c:	e00d      	b.n	1005589a <GAT_att_srv_read_multi_exc+0xb4>
1005587e:	a80c      	add	r0, sp, #48	@ 0x30
10055880:	8800      	ldrh	r0, [r0, #0]
10055882:	f00e fedb 	bl	1006463c <GAT_att_db_find_by_handle>
10055886:	4601      	mov	r1, r0
10055888:	9807      	ldr	r0, [sp, #28]
1005588a:	6880      	ldr	r0, [r0, #8]
1005588c:	8900      	ldrh	r0, [r0, #8]
1005588e:	aa08      	add	r2, sp, #32
10055890:	f000 fdde 	bl	10056450 <GAT_srv_get_attr_value>
10055894:	9907      	ldr	r1, [sp, #28]
10055896:	2884      	cmp	r0, #132	@ 0x84
10055898:	d065      	beq.n	10055966 <GAT_att_srv_read_multi_exc+0x180>
1005589a:	9806      	ldr	r0, [sp, #24]
1005589c:	1b04      	subs	r4, r0, r4
1005589e:	7848      	ldrb	r0, [r1, #1]
100558a0:	280e      	cmp	r0, #14
100558a2:	d109      	bne.n	100558b8 <GAT_att_srv_read_multi_exc+0xd2>
100558a4:	89b0      	ldrh	r0, [r6, #12]
100558a6:	19c1      	adds	r1, r0, r7
100558a8:	9808      	ldr	r0, [sp, #32]
100558aa:	8802      	ldrh	r2, [r0, #0]
100558ac:	4294      	cmp	r4, r2
100558ae:	db00      	blt.n	100558b2 <GAT_att_srv_read_multi_exc+0xcc>
100558b0:	4614      	mov	r4, r2
100558b2:	b289      	uxth	r1, r1
100558b4:	b2a2      	uxth	r2, r4
100558b6:	e013      	b.n	100558e0 <GAT_att_srv_read_multi_exc+0xfa>
100558b8:	89b0      	ldrh	r0, [r6, #12]
100558ba:	19c0      	adds	r0, r0, r7
100558bc:	b281      	uxth	r1, r0
100558be:	9a08      	ldr	r2, [sp, #32]
100558c0:	4630      	mov	r0, r6
100558c2:	8816      	ldrh	r6, [r2, #0]
100558c4:	4632      	mov	r2, r6
100558c6:	f7fd f9aa 	bl	10052c1e <ACL_pkt_write_16b>
100558ca:	1ea4      	subs	r4, r4, #2
100558cc:	42b4      	cmp	r4, r6
100558ce:	d300      	bcc.n	100558d2 <GAT_att_srv_read_multi_exc+0xec>
100558d0:	4634      	mov	r4, r6
100558d2:	b2a2      	uxth	r2, r4
100558d4:	1cbf      	adds	r7, r7, #2
100558d6:	9e02      	ldr	r6, [sp, #8]
100558d8:	89b0      	ldrh	r0, [r6, #12]
100558da:	19c0      	adds	r0, r0, r7
100558dc:	b281      	uxth	r1, r0
100558de:	9808      	ldr	r0, [sp, #32]
100558e0:	6843      	ldr	r3, [r0, #4]
100558e2:	4630      	mov	r0, r6
100558e4:	f7fd f9a4 	bl	10052c30 <ACL_pkt_write>
100558e8:	193f      	adds	r7, r7, r4
100558ea:	8077      	strh	r7, [r6, #2]
100558ec:	9907      	ldr	r1, [sp, #28]
100558ee:	7848      	ldrb	r0, [r1, #1]
100558f0:	2820      	cmp	r0, #32
100558f2:	9a05      	ldr	r2, [sp, #20]
100558f4:	d104      	bne.n	10055900 <GAT_att_srv_read_multi_exc+0x11a>
100558f6:	9806      	ldr	r0, [sp, #24]
100558f8:	1bc0      	subs	r0, r0, r7
100558fa:	b280      	uxth	r0, r0
100558fc:	2802      	cmp	r0, #2
100558fe:	d35c      	bcc.n	100559ba <GAT_att_srv_read_multi_exc+0x1d4>
10055900:	9804      	ldr	r0, [sp, #16]
10055902:	7008      	strb	r0, [r1, #0]
10055904:	1c92      	adds	r2, r2, #2
10055906:	e79c      	b.n	10055842 <GAT_att_srv_read_multi_exc+0x5c>
10055908:	2100      	movs	r1, #0
1005590a:	9205      	str	r2, [sp, #20]
1005590c:	9c07      	ldr	r4, [sp, #28]
1005590e:	b288      	uxth	r0, r1
10055910:	42a8      	cmp	r0, r5
10055912:	d292      	bcs.n	1005583a <GAT_att_srv_read_multi_exc+0x54>
10055914:	9104      	str	r1, [sp, #16]
10055916:	0049      	lsls	r1, r1, #1
10055918:	6860      	ldr	r0, [r4, #4]
1005591a:	8982      	ldrh	r2, [r0, #12]
1005591c:	1851      	adds	r1, r2, r1
1005591e:	1c49      	adds	r1, r1, #1
10055920:	b289      	uxth	r1, r1
10055922:	2202      	movs	r2, #2
10055924:	ab0c      	add	r3, sp, #48	@ 0x30
10055926:	f7fd f961 	bl	10052bec <ACL_pkt_read>
1005592a:	a808      	add	r0, sp, #32
1005592c:	2601      	movs	r6, #1
1005592e:	7106      	strb	r6, [r0, #4]
10055930:	990c      	ldr	r1, [sp, #48]	@ 0x30
10055932:	8101      	strh	r1, [r0, #8]
10055934:	68a1      	ldr	r1, [r4, #8]
10055936:	9108      	str	r1, [sp, #32]
10055938:	f000 ffdc 	bl	100568f4 <GAT_srv_check_change_aware>
1005593c:	2886      	cmp	r0, #134	@ 0x86
1005593e:	d02a      	beq.n	10055996 <GAT_att_srv_read_multi_exc+0x1b0>
10055940:	a80c      	add	r0, sp, #48	@ 0x30
10055942:	8800      	ldrh	r0, [r0, #0]
10055944:	f00e fe7a 	bl	1006463c <GAT_att_db_find_by_handle>
10055948:	2800      	cmp	r0, #0
1005594a:	d027      	beq.n	1005599c <GAT_att_srv_read_multi_exc+0x1b6>
1005594c:	9907      	ldr	r1, [sp, #28]
1005594e:	6889      	ldr	r1, [r1, #8]
10055950:	8909      	ldrh	r1, [r1, #8]
10055952:	2201      	movs	r2, #1
10055954:	f000 fd06 	bl	10056364 <GAT_srv_check_perms>
10055958:	2800      	cmp	r0, #0
1005595a:	d11e      	bne.n	1005599a <GAT_att_srv_read_multi_exc+0x1b4>
1005595c:	9904      	ldr	r1, [sp, #16]
1005595e:	1c49      	adds	r1, r1, #1
10055960:	9e02      	ldr	r6, [sp, #8]
10055962:	9a05      	ldr	r2, [sp, #20]
10055964:	e7d3      	b.n	1005590e <GAT_att_srv_read_multi_exc+0x128>
10055966:	a80c      	add	r0, sp, #48	@ 0x30
10055968:	8803      	ldrh	r3, [r0, #0]
1005596a:	6888      	ldr	r0, [r1, #8]
1005596c:	8942      	ldrh	r2, [r0, #10]
1005596e:	8901      	ldrh	r1, [r0, #8]
10055970:	2000      	movs	r0, #0
10055972:	9000      	str	r0, [sp, #0]
10055974:	2002      	movs	r0, #2
10055976:	f00d fdfd 	bl	10063574 <aci_gatt_srv_read_event_push_noinline>
1005597a:	9003      	str	r0, [sp, #12]
1005597c:	2800      	cmp	r0, #0
1005597e:	9a05      	ldr	r2, [sp, #20]
10055980:	d11b      	bne.n	100559ba <GAT_att_srv_read_multi_exc+0x1d4>
10055982:	8077      	strh	r7, [r6, #2]
10055984:	89b0      	ldrh	r0, [r6, #12]
10055986:	19c0      	adds	r0, r0, r7
10055988:	b281      	uxth	r1, r0
1005598a:	b292      	uxth	r2, r2
1005598c:	4630      	mov	r0, r6
1005598e:	f7fd f946 	bl	10052c1e <ACL_pkt_write_16b>
10055992:	2084      	movs	r0, #132	@ 0x84
10055994:	e010      	b.n	100559b8 <GAT_att_srv_read_multi_exc+0x1d2>
10055996:	2612      	movs	r6, #18
10055998:	e000      	b.n	1005599c <GAT_att_srv_read_multi_exc+0x1b6>
1005599a:	4606      	mov	r6, r0
1005599c:	a80c      	add	r0, sp, #48	@ 0x30
1005599e:	8801      	ldrh	r1, [r0, #0]
100559a0:	9807      	ldr	r0, [sp, #28]
100559a2:	7840      	ldrb	r0, [r0, #1]
100559a4:	280e      	cmp	r0, #14
100559a6:	d101      	bne.n	100559ac <GAT_att_srv_read_multi_exc+0x1c6>
100559a8:	200e      	movs	r0, #14
100559aa:	e000      	b.n	100559ae <GAT_att_srv_read_multi_exc+0x1c8>
100559ac:	2020      	movs	r0, #32
100559ae:	4632      	mov	r2, r6
100559b0:	9b02      	ldr	r3, [sp, #8]
100559b2:	f7ff fbc9 	bl	10055148 <GAT_att_srv_write_err_packet>
100559b6:	2086      	movs	r0, #134	@ 0x86
100559b8:	9003      	str	r0, [sp, #12]
100559ba:	9803      	ldr	r0, [sp, #12]
100559bc:	b00d      	add	sp, #52	@ 0x34
100559be:	bdf0      	pop	{r4, r5, r6, r7, pc}

100559c0 <GAT_att_srv_write_exc>:
100559c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100559c2:	b089      	sub	sp, #36	@ 0x24
100559c4:	4604      	mov	r4, r0
100559c6:	7800      	ldrb	r0, [r0, #0]
100559c8:	2800      	cmp	r0, #0
100559ca:	d001      	beq.n	100559d0 <GAT_att_srv_write_exc+0x10>
100559cc:	2000      	movs	r0, #0
100559ce:	e03b      	b.n	10055a48 <GAT_att_srv_write_exc+0x88>
100559d0:	6860      	ldr	r0, [r4, #4]
100559d2:	68a1      	ldr	r1, [r4, #8]
100559d4:	68c9      	ldr	r1, [r1, #12]
100559d6:	9106      	str	r1, [sp, #24]
100559d8:	8846      	ldrh	r6, [r0, #2]
100559da:	8981      	ldrh	r1, [r0, #12]
100559dc:	1c49      	adds	r1, r1, #1
100559de:	b289      	uxth	r1, r1
100559e0:	f7fd f90d 	bl	10052bfe <ACL_pkt_read_16b>
100559e4:	4605      	mov	r5, r0
100559e6:	1ef1      	subs	r1, r6, #3
100559e8:	7860      	ldrb	r0, [r4, #1]
100559ea:	2700      	movs	r7, #0
100559ec:	2852      	cmp	r0, #82	@ 0x52
100559ee:	d00c      	beq.n	10055a0a <GAT_att_srv_write_exc+0x4a>
100559f0:	28d2      	cmp	r0, #210	@ 0xd2
100559f2:	d10e      	bne.n	10055a12 <GAT_att_srv_write_exc+0x52>
100559f4:	68a0      	ldr	r0, [r4, #8]
100559f6:	8940      	ldrh	r0, [r0, #10]
100559f8:	2804      	cmp	r0, #4
100559fa:	d124      	bne.n	10055a46 <GAT_att_srv_write_exc+0x86>
100559fc:	3e0f      	subs	r6, #15
100559fe:	2205      	movs	r2, #5
10055a00:	2701      	movs	r7, #1
10055a02:	2000      	movs	r0, #0
10055a04:	9004      	str	r0, [sp, #16]
10055a06:	9605      	str	r6, [sp, #20]
10055a08:	e00e      	b.n	10055a28 <GAT_att_srv_write_exc+0x68>
10055a0a:	9105      	str	r1, [sp, #20]
10055a0c:	2204      	movs	r2, #4
10055a0e:	9704      	str	r7, [sp, #16]
10055a10:	e00a      	b.n	10055a28 <GAT_att_srv_write_exc+0x68>
10055a12:	9105      	str	r1, [sp, #20]
10055a14:	9e06      	ldr	r6, [sp, #24]
10055a16:	89b1      	ldrh	r1, [r6, #12]
10055a18:	2213      	movs	r2, #19
10055a1a:	4630      	mov	r0, r6
10055a1c:	f7ff fb14 	bl	10055048 <ACL_pkt_write_8b>
10055a20:	2001      	movs	r0, #1
10055a22:	9004      	str	r0, [sp, #16]
10055a24:	8070      	strh	r0, [r6, #2]
10055a26:	2203      	movs	r2, #3
10055a28:	ab07      	add	r3, sp, #28
10055a2a:	4620      	mov	r0, r4
10055a2c:	4629      	mov	r1, r5
10055a2e:	f000 f936 	bl	10055c9e <GAT_att_srv_set_attr_value_check>
10055a32:	4602      	mov	r2, r0
10055a34:	a808      	add	r0, sp, #32
10055a36:	7002      	strb	r2, [r0, #0]
10055a38:	2a00      	cmp	r2, #0
10055a3a:	d007      	beq.n	10055a4c <GAT_att_srv_write_exc+0x8c>
10055a3c:	7860      	ldrb	r0, [r4, #1]
10055a3e:	4629      	mov	r1, r5
10055a40:	9b06      	ldr	r3, [sp, #24]
10055a42:	f7ff fb81 	bl	10055148 <GAT_att_srv_write_err_packet>
10055a46:	2086      	movs	r0, #134	@ 0x86
10055a48:	b009      	add	sp, #36	@ 0x24
10055a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10055a4c:	2f00      	cmp	r7, #0
10055a4e:	d008      	beq.n	10055a62 <GAT_att_srv_write_exc+0xa2>
10055a50:	6861      	ldr	r1, [r4, #4]
10055a52:	68a0      	ldr	r0, [r4, #8]
10055a54:	8900      	ldrh	r0, [r0, #8]
10055a56:	f00c fc0a 	bl	1006226e <smp_sap_sm2_packet_data_signing_validate>
10055a5a:	2800      	cmp	r0, #0
10055a5c:	d001      	beq.n	10055a62 <GAT_att_srv_write_exc+0xa2>
10055a5e:	2200      	movs	r2, #0
10055a60:	e7ec      	b.n	10055a3c <GAT_att_srv_write_exc+0x7c>
10055a62:	6861      	ldr	r1, [r4, #4]
10055a64:	9807      	ldr	r0, [sp, #28]
10055a66:	aa08      	add	r2, sp, #32
10055a68:	f000 fdf2 	bl	10056650 <GAT_srv_attr_value_write>
10055a6c:	2800      	cmp	r0, #0
10055a6e:	d0eb      	beq.n	10055a48 <GAT_att_srv_write_exc+0x88>
10055a70:	2884      	cmp	r0, #132	@ 0x84
10055a72:	d112      	bne.n	10055a9a <GAT_att_srv_write_exc+0xda>
10055a74:	6860      	ldr	r0, [r4, #4]
10055a76:	68a1      	ldr	r1, [r4, #8]
10055a78:	894a      	ldrh	r2, [r1, #10]
10055a7a:	8909      	ldrh	r1, [r1, #8]
10055a7c:	9b05      	ldr	r3, [sp, #20]
10055a7e:	b29b      	uxth	r3, r3
10055a80:	9500      	str	r5, [sp, #0]
10055a82:	9301      	str	r3, [sp, #4]
10055a84:	9002      	str	r0, [sp, #8]
10055a86:	200a      	movs	r0, #10
10055a88:	9b04      	ldr	r3, [sp, #16]
10055a8a:	f00d fdad 	bl	100635e8 <aci_gatt_srv_write_event_push_noinline>
10055a8e:	2800      	cmp	r0, #0
10055a90:	d1da      	bne.n	10055a48 <GAT_att_srv_write_exc+0x88>
10055a92:	2000      	movs	r0, #0
10055a94:	6060      	str	r0, [r4, #4]
10055a96:	2084      	movs	r0, #132	@ 0x84
10055a98:	e7d6      	b.n	10055a48 <GAT_att_srv_write_exc+0x88>
10055a9a:	a808      	add	r0, sp, #32
10055a9c:	7802      	ldrb	r2, [r0, #0]
10055a9e:	e7cd      	b.n	10055a3c <GAT_att_srv_write_exc+0x7c>

10055aa0 <GAT_att_srv_prep_wr_exc>:
10055aa0:	b570      	push	{r4, r5, r6, lr}
10055aa2:	b086      	sub	sp, #24
10055aa4:	4604      	mov	r4, r0
10055aa6:	7800      	ldrb	r0, [r0, #0]
10055aa8:	2800      	cmp	r0, #0
10055aaa:	d014      	beq.n	10055ad6 <GAT_att_srv_prep_wr_exc+0x36>
10055aac:	89a5      	ldrh	r5, [r4, #12]
10055aae:	68a0      	ldr	r0, [r4, #8]
10055ab0:	88c1      	ldrh	r1, [r0, #6]
10055ab2:	1f49      	subs	r1, r1, #5
10055ab4:	42a9      	cmp	r1, r5
10055ab6:	d800      	bhi.n	10055aba <GAT_att_srv_prep_wr_exc+0x1a>
10055ab8:	460d      	mov	r5, r1
10055aba:	b2aa      	uxth	r2, r5
10055abc:	6923      	ldr	r3, [r4, #16]
10055abe:	68c0      	ldr	r0, [r0, #12]
10055ac0:	8981      	ldrh	r1, [r0, #12]
10055ac2:	1d49      	adds	r1, r1, #5
10055ac4:	b289      	uxth	r1, r1
10055ac6:	f7fd f8b3 	bl	10052c30 <ACL_pkt_write>
10055aca:	1d68      	adds	r0, r5, #5
10055acc:	68a1      	ldr	r1, [r4, #8]
10055ace:	68c9      	ldr	r1, [r1, #12]
10055ad0:	8048      	strh	r0, [r1, #2]
10055ad2:	2000      	movs	r0, #0
10055ad4:	e040      	b.n	10055b58 <GAT_att_srv_prep_wr_exc+0xb8>
10055ad6:	6860      	ldr	r0, [r4, #4]
10055ad8:	8981      	ldrh	r1, [r0, #12]
10055ada:	1c49      	adds	r1, r1, #1
10055adc:	b289      	uxth	r1, r1
10055ade:	f7fd f88e 	bl	10052bfe <ACL_pkt_read_16b>
10055ae2:	4605      	mov	r5, r0
10055ae4:	2203      	movs	r2, #3
10055ae6:	ab05      	add	r3, sp, #20
10055ae8:	4620      	mov	r0, r4
10055aea:	4629      	mov	r1, r5
10055aec:	f000 f8d7 	bl	10055c9e <GAT_att_srv_set_attr_value_check>
10055af0:	2800      	cmp	r0, #0
10055af2:	d008      	beq.n	10055b06 <GAT_att_srv_prep_wr_exc+0x66>
10055af4:	4602      	mov	r2, r0
10055af6:	68a0      	ldr	r0, [r4, #8]
10055af8:	68c3      	ldr	r3, [r0, #12]
10055afa:	2016      	movs	r0, #22
10055afc:	4629      	mov	r1, r5
10055afe:	f7ff fb23 	bl	10055148 <GAT_att_srv_write_err_packet>
10055b02:	2086      	movs	r0, #134	@ 0x86
10055b04:	e028      	b.n	10055b58 <GAT_att_srv_prep_wr_exc+0xb8>
10055b06:	6860      	ldr	r0, [r4, #4]
10055b08:	8981      	ldrh	r1, [r0, #12]
10055b0a:	1cc9      	adds	r1, r1, #3
10055b0c:	b289      	uxth	r1, r1
10055b0e:	f7fd f876 	bl	10052bfe <ACL_pkt_read_16b>
10055b12:	4606      	mov	r6, r0
10055b14:	6860      	ldr	r0, [r4, #4]
10055b16:	68a1      	ldr	r1, [r4, #8]
10055b18:	894a      	ldrh	r2, [r1, #10]
10055b1a:	8909      	ldrh	r1, [r1, #8]
10055b1c:	8843      	ldrh	r3, [r0, #2]
10055b1e:	1f5b      	subs	r3, r3, #5
10055b20:	b29b      	uxth	r3, r3
10055b22:	9600      	str	r6, [sp, #0]
10055b24:	9301      	str	r3, [sp, #4]
10055b26:	9002      	str	r0, [sp, #8]
10055b28:	200a      	movs	r0, #10
10055b2a:	462b      	mov	r3, r5
10055b2c:	f00d ffc4 	bl	10063ab8 <aci_att_srv_prepare_write_req_event_push_noinline>
10055b30:	2800      	cmp	r0, #0
10055b32:	d111      	bne.n	10055b58 <GAT_att_srv_prep_wr_exc+0xb8>
10055b34:	ab03      	add	r3, sp, #12
10055b36:	705d      	strb	r5, [r3, #1]
10055b38:	0a28      	lsrs	r0, r5, #8
10055b3a:	7098      	strb	r0, [r3, #2]
10055b3c:	70de      	strb	r6, [r3, #3]
10055b3e:	2017      	movs	r0, #23
10055b40:	7018      	strb	r0, [r3, #0]
10055b42:	0a30      	lsrs	r0, r6, #8
10055b44:	7118      	strb	r0, [r3, #4]
10055b46:	68a0      	ldr	r0, [r4, #8]
10055b48:	68c0      	ldr	r0, [r0, #12]
10055b4a:	8981      	ldrh	r1, [r0, #12]
10055b4c:	2205      	movs	r2, #5
10055b4e:	f7fd f86f 	bl	10052c30 <ACL_pkt_write>
10055b52:	2000      	movs	r0, #0
10055b54:	6060      	str	r0, [r4, #4]
10055b56:	2084      	movs	r0, #132	@ 0x84
10055b58:	b006      	add	sp, #24
10055b5a:	bd70      	pop	{r4, r5, r6, pc}

10055b5c <GAT_att_srv_exec_wr_exc>:
10055b5c:	b510      	push	{r4, lr}
10055b5e:	4604      	mov	r4, r0
10055b60:	7800      	ldrb	r0, [r0, #0]
10055b62:	2800      	cmp	r0, #0
10055b64:	d001      	beq.n	10055b6a <GAT_att_srv_exec_wr_exc+0xe>
10055b66:	2000      	movs	r0, #0
10055b68:	bd10      	pop	{r4, pc}
10055b6a:	6860      	ldr	r0, [r4, #4]
10055b6c:	8981      	ldrh	r1, [r0, #12]
10055b6e:	1c49      	adds	r1, r1, #1
10055b70:	b289      	uxth	r1, r1
10055b72:	f000 f884 	bl	10055c7e <ACL_pkt_read_8b>
10055b76:	4603      	mov	r3, r0
10055b78:	68a0      	ldr	r0, [r4, #8]
10055b7a:	8942      	ldrh	r2, [r0, #10]
10055b7c:	8901      	ldrh	r1, [r0, #8]
10055b7e:	2002      	movs	r0, #2
10055b80:	f00d ffc8 	bl	10063b14 <aci_att_srv_exec_write_req_event_push_noinline>
10055b84:	2800      	cmp	r0, #0
10055b86:	d000      	beq.n	10055b8a <GAT_att_srv_exec_wr_exc+0x2e>
10055b88:	bd10      	pop	{r4, pc}
10055b8a:	68a0      	ldr	r0, [r4, #8]
10055b8c:	68c0      	ldr	r0, [r0, #12]
10055b8e:	8981      	ldrh	r1, [r0, #12]
10055b90:	2219      	movs	r2, #25
10055b92:	f7ff fa59 	bl	10055048 <ACL_pkt_write_8b>
10055b96:	68a0      	ldr	r0, [r4, #8]
10055b98:	68c0      	ldr	r0, [r0, #12]
10055b9a:	2101      	movs	r1, #1
10055b9c:	8041      	strh	r1, [r0, #2]
10055b9e:	2084      	movs	r0, #132	@ 0x84
10055ba0:	bd10      	pop	{r4, pc}

10055ba2 <GAT_att_srv_confirm_exc>:
10055ba2:	b5b0      	push	{r4, r5, r7, lr}
10055ba4:	4605      	mov	r5, r0
10055ba6:	6880      	ldr	r0, [r0, #8]
10055ba8:	8942      	ldrh	r2, [r0, #10]
10055baa:	8901      	ldrh	r1, [r0, #8]
10055bac:	2042      	movs	r0, #66	@ 0x42
10055bae:	f00d fcaf 	bl	10063510 <aci_gatt_srv_confirmation_event_push_noinline>
10055bb2:	4604      	mov	r4, r0
10055bb4:	2800      	cmp	r0, #0
10055bb6:	d110      	bne.n	10055bda <GAT_att_srv_confirm_exc+0x38>
10055bb8:	68a8      	ldr	r0, [r5, #8]
10055bba:	8942      	ldrh	r2, [r0, #10]
10055bbc:	8901      	ldrh	r1, [r0, #8]
10055bbe:	2001      	movs	r0, #1
10055bc0:	f7fe fee4 	bl	1005498c <GAT_att_cmn_stop_timer>
10055bc4:	68a8      	ldr	r0, [r5, #8]
10055bc6:	8881      	ldrh	r1, [r0, #4]
10055bc8:	064a      	lsls	r2, r1, #25
10055bca:	d503      	bpl.n	10055bd4 <GAT_att_srv_confirm_exc+0x32>
10055bcc:	f000 fe84 	bl	100568d8 <GAT_srv_set_change_aware>
10055bd0:	68a8      	ldr	r0, [r5, #8]
10055bd2:	8881      	ldrh	r1, [r0, #4]
10055bd4:	2202      	movs	r2, #2
10055bd6:	4391      	bics	r1, r2
10055bd8:	8081      	strh	r1, [r0, #4]
10055bda:	4620      	mov	r0, r4
10055bdc:	bdb0      	pop	{r4, r5, r7, pc}

10055bde <GAT_att_srv_get_handle_range>:
10055bde:	b570      	push	{r4, r5, r6, lr}
10055be0:	4614      	mov	r4, r2
10055be2:	460d      	mov	r5, r1
10055be4:	4606      	mov	r6, r0
10055be6:	8980      	ldrh	r0, [r0, #12]
10055be8:	1c40      	adds	r0, r0, #1
10055bea:	b281      	uxth	r1, r0
10055bec:	4630      	mov	r0, r6
10055bee:	f7fd f806 	bl	10052bfe <ACL_pkt_read_16b>
10055bf2:	8028      	strh	r0, [r5, #0]
10055bf4:	89b0      	ldrh	r0, [r6, #12]
10055bf6:	1cc0      	adds	r0, r0, #3
10055bf8:	b281      	uxth	r1, r0
10055bfa:	4630      	mov	r0, r6
10055bfc:	f7fc ffff 	bl	10052bfe <ACL_pkt_read_16b>
10055c00:	8020      	strh	r0, [r4, #0]
10055c02:	bd70      	pop	{r4, r5, r6, pc}

10055c04 <GAT_att_srv_value_read>:
10055c04:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10055c06:	461f      	mov	r7, r3
10055c08:	4606      	mov	r6, r0
10055c0a:	9d08      	ldr	r5, [sp, #32]
10055c0c:	2400      	movs	r4, #0
10055c0e:	702c      	strb	r4, [r5, #0]
10055c10:	7800      	ldrb	r0, [r0, #0]
10055c12:	2801      	cmp	r0, #1
10055c14:	d107      	bne.n	10055c26 <GAT_att_srv_value_read+0x22>
10055c16:	6930      	ldr	r0, [r6, #16]
10055c18:	2800      	cmp	r0, #0
10055c1a:	d01f      	beq.n	10055c5c <GAT_att_srv_value_read+0x58>
10055c1c:	360c      	adds	r6, #12
10055c1e:	603e      	str	r6, [r7, #0]
10055c20:	2000      	movs	r0, #0
10055c22:	7028      	strb	r0, [r5, #0]
10055c24:	e029      	b.n	10055c7a <GAT_att_srv_value_read+0x76>
10055c26:	9202      	str	r2, [sp, #8]
10055c28:	68b0      	ldr	r0, [r6, #8]
10055c2a:	8900      	ldrh	r0, [r0, #8]
10055c2c:	9101      	str	r1, [sp, #4]
10055c2e:	463a      	mov	r2, r7
10055c30:	462b      	mov	r3, r5
10055c32:	f000 fb7e 	bl	10056332 <GAT_srv_attr_value_read>
10055c36:	2800      	cmp	r0, #0
10055c38:	d012      	beq.n	10055c60 <GAT_att_srv_value_read+0x5c>
10055c3a:	2884      	cmp	r0, #132	@ 0x84
10055c3c:	d11d      	bne.n	10055c7a <GAT_att_srv_value_read+0x76>
10055c3e:	9801      	ldr	r0, [sp, #4]
10055c40:	8843      	ldrh	r3, [r0, #2]
10055c42:	68b0      	ldr	r0, [r6, #8]
10055c44:	8942      	ldrh	r2, [r0, #10]
10055c46:	8901      	ldrh	r1, [r0, #8]
10055c48:	9802      	ldr	r0, [sp, #8]
10055c4a:	9000      	str	r0, [sp, #0]
10055c4c:	2002      	movs	r0, #2
10055c4e:	f00d fc91 	bl	10063574 <aci_gatt_srv_read_event_push_noinline>
10055c52:	2800      	cmp	r0, #0
10055c54:	d111      	bne.n	10055c7a <GAT_att_srv_value_read+0x76>
10055c56:	207b      	movs	r0, #123	@ 0x7b
10055c58:	43c0      	mvns	r0, r0
10055c5a:	e00e      	b.n	10055c7a <GAT_att_srv_value_read+0x76>
10055c5c:	200e      	movs	r0, #14
10055c5e:	e005      	b.n	10055c6c <GAT_att_srv_value_read+0x68>
10055c60:	6838      	ldr	r0, [r7, #0]
10055c62:	8801      	ldrh	r1, [r0, #0]
10055c64:	9a02      	ldr	r2, [sp, #8]
10055c66:	4291      	cmp	r1, r2
10055c68:	d203      	bcs.n	10055c72 <GAT_att_srv_value_read+0x6e>
10055c6a:	2007      	movs	r0, #7
10055c6c:	7028      	strb	r0, [r5, #0]
10055c6e:	2086      	movs	r0, #134	@ 0x86
10055c70:	e003      	b.n	10055c7a <GAT_att_srv_value_read+0x76>
10055c72:	6841      	ldr	r1, [r0, #4]
10055c74:	1889      	adds	r1, r1, r2
10055c76:	6041      	str	r1, [r0, #4]
10055c78:	4620      	mov	r0, r4
10055c7a:	b2c0      	uxtb	r0, r0
10055c7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10055c7e <ACL_pkt_read_8b>:
10055c7e:	b51c      	push	{r2, r3, r4, lr}
10055c80:	291f      	cmp	r1, #31
10055c82:	d803      	bhi.n	10055c8c <ACL_pkt_read_8b+0xe>
10055c84:	aa01      	add	r2, sp, #4
10055c86:	8011      	strh	r1, [r2, #0]
10055c88:	6840      	ldr	r0, [r0, #4]
10055c8a:	e005      	b.n	10055c98 <ACL_pkt_read_8b+0x1a>
10055c8c:	6840      	ldr	r0, [r0, #4]
10055c8e:	ac01      	add	r4, sp, #4
10055c90:	4622      	mov	r2, r4
10055c92:	f009 fcaa 	bl	1005f5ea <Mem_Buff_get_buff_off>
10055c96:	8821      	ldrh	r1, [r4, #0]
10055c98:	1840      	adds	r0, r0, r1
10055c9a:	7900      	ldrb	r0, [r0, #4]
10055c9c:	bd1c      	pop	{r2, r3, r4, pc}

10055c9e <GAT_att_srv_set_attr_value_check>:
10055c9e:	b5f0      	push	{r4, r5, r6, r7, lr}
10055ca0:	b085      	sub	sp, #20
10055ca2:	461e      	mov	r6, r3
10055ca4:	4614      	mov	r4, r2
10055ca6:	460f      	mov	r7, r1
10055ca8:	4605      	mov	r5, r0
10055caa:	a801      	add	r0, sp, #4
10055cac:	8101      	strh	r1, [r0, #8]
10055cae:	7102      	strb	r2, [r0, #4]
10055cb0:	68a9      	ldr	r1, [r5, #8]
10055cb2:	9101      	str	r1, [sp, #4]
10055cb4:	f000 fe1e 	bl	100568f4 <GAT_srv_check_change_aware>
10055cb8:	2886      	cmp	r0, #134	@ 0x86
10055cba:	d101      	bne.n	10055cc0 <GAT_att_srv_set_attr_value_check+0x22>
10055cbc:	2012      	movs	r0, #18
10055cbe:	e00c      	b.n	10055cda <GAT_att_srv_set_attr_value_check+0x3c>
10055cc0:	4638      	mov	r0, r7
10055cc2:	f00e fcbb 	bl	1006463c <GAT_att_db_find_by_handle>
10055cc6:	6030      	str	r0, [r6, #0]
10055cc8:	2800      	cmp	r0, #0
10055cca:	d005      	beq.n	10055cd8 <GAT_att_srv_set_attr_value_check+0x3a>
10055ccc:	68a9      	ldr	r1, [r5, #8]
10055cce:	8909      	ldrh	r1, [r1, #8]
10055cd0:	4622      	mov	r2, r4
10055cd2:	f000 fb47 	bl	10056364 <GAT_srv_check_perms>
10055cd6:	e000      	b.n	10055cda <GAT_att_srv_set_attr_value_check+0x3c>
10055cd8:	2001      	movs	r0, #1
10055cda:	b005      	add	sp, #20
10055cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

10055cde <GAT_clt_exchange_mtu>:
10055cde:	b580      	push	{r7, lr}
10055ce0:	b08a      	sub	sp, #40	@ 0x28
10055ce2:	a901      	add	r1, sp, #4
10055ce4:	2201      	movs	r2, #1
10055ce6:	718a      	strb	r2, [r1, #6]
10055ce8:	2204      	movs	r2, #4
10055cea:	808a      	strh	r2, [r1, #4]
10055cec:	8048      	strh	r0, [r1, #2]
10055cee:	4608      	mov	r0, r1
10055cf0:	f00f f90c 	bl	10064f0c <GAT_clt_start_proc>
10055cf4:	b00a      	add	sp, #40	@ 0x28
10055cf6:	bd80      	pop	{r7, pc}

10055cf8 <GAT_clt_confirm_indication>:
10055cf8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10055cfa:	aa01      	add	r2, sp, #4
10055cfc:	8091      	strh	r1, [r2, #4]
10055cfe:	8050      	strh	r0, [r2, #2]
10055d00:	201e      	movs	r0, #30
10055d02:	7010      	strb	r0, [r2, #0]
10055d04:	4610      	mov	r0, r2
10055d06:	f00e f9a5 	bl	10064054 <GAT_att_clt_tx>
10055d0a:	b006      	add	sp, #24
10055d0c:	bd80      	pop	{r7, pc}
	...

10055d10 <GAT_srv_init>:
10055d10:	b580      	push	{r7, lr}
10055d12:	4806      	ldr	r0, [pc, #24]	@ (10055d2c <__arm_cp.0_0>)
10055d14:	8900      	ldrh	r0, [r0, #8]
10055d16:	3013      	adds	r0, #19
10055d18:	b280      	uxth	r0, r0
10055d1a:	f00e fc2b 	bl	10064574 <GAT_att_db_init>
10055d1e:	4804      	ldr	r0, [pc, #16]	@ (10055d30 <__arm_cp.0_1>)
10055d20:	6800      	ldr	r0, [r0, #0]
10055d22:	215c      	movs	r1, #92	@ 0x5c
10055d24:	2201      	movs	r2, #1
10055d26:	5442      	strb	r2, [r0, r1]
10055d28:	bd80      	pop	{r7, pc}
10055d2a:	46c0      	nop			@ (mov r8, r8)

10055d2c <__arm_cp.0_0>:
10055d2c:	20001108 	.word	0x20001108

10055d30 <__arm_cp.0_1>:
10055d30:	200010ac 	.word	0x200010ac

10055d34 <GAT_srv_connection>:
10055d34:	b5f0      	push	{r4, r5, r6, r7, lr}
10055d36:	b0a1      	sub	sp, #132	@ 0x84
10055d38:	4604      	mov	r4, r0
10055d3a:	f000 f89b 	bl	10055e74 <GAT_srv_is_bonded>
10055d3e:	2801      	cmp	r0, #1
10055d40:	d114      	bne.n	10055d6c <GAT_srv_connection+0x38>
10055d42:	a807      	add	r0, sp, #28
10055d44:	4945      	ldr	r1, [pc, #276]	@ (10055e5c <__arm_cp.1_0>)
10055d46:	2514      	movs	r5, #20
10055d48:	462a      	mov	r2, r5
10055d4a:	f011 fb66 	bl	1006741a <__aeabi_memcpy>
10055d4e:	a802      	add	r0, sp, #8
10055d50:	4943      	ldr	r1, [pc, #268]	@ (10055e60 <__arm_cp.1_1>)
10055d52:	462a      	mov	r2, r5
10055d54:	f011 fb61 	bl	1006741a <__aeabi_memcpy>
10055d58:	2044      	movs	r0, #68	@ 0x44
10055d5a:	900f      	str	r0, [sp, #60]	@ 0x3c
10055d5c:	2101      	movs	r1, #1
10055d5e:	aa0d      	add	r2, sp, #52	@ 0x34
10055d60:	ab0c      	add	r3, sp, #48	@ 0x30
10055d62:	4620      	mov	r0, r4
10055d64:	f00c f9e5 	bl	10062132 <smp_sap_get_remote_address_check_addr_type>
10055d68:	2800      	cmp	r0, #0
10055d6a:	d001      	beq.n	10055d70 <GAT_srv_connection+0x3c>
10055d6c:	b021      	add	sp, #132	@ 0x84
10055d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10055d70:	a80c      	add	r0, sp, #48	@ 0x30
10055d72:	7801      	ldrb	r1, [r0, #0]
10055d74:	a80d      	add	r0, sp, #52	@ 0x34
10055d76:	aa0f      	add	r2, sp, #60	@ 0x3c
10055d78:	ab10      	add	r3, sp, #64	@ 0x40
10055d7a:	f00a f85c 	bl	1005fe36 <SDB_sap_read_peer_bonded_gatt_client_data>
10055d7e:	2800      	cmp	r0, #0
10055d80:	d1f4      	bne.n	10055d6c <GAT_srv_connection+0x38>
10055d82:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10055d84:	2844      	cmp	r0, #68	@ 0x44
10055d86:	d8f1      	bhi.n	10055d6c <GAT_srv_connection+0x38>
10055d88:	2001      	movs	r0, #1
10055d8a:	4d36      	ldr	r5, [pc, #216]	@ (10055e64 <__arm_cp.1_2>)
10055d8c:	aa02      	add	r2, sp, #8
10055d8e:	4629      	mov	r1, r5
10055d90:	f000 fe0c 	bl	100569ac <GAT_srv_find_by_type_attr_p>
10055d94:	2800      	cmp	r0, #0
10055d96:	d010      	beq.n	10055dba <GAT_srv_connection+0x86>
10055d98:	4606      	mov	r6, r0
10055d9a:	4620      	mov	r0, r4
10055d9c:	f7fe fe2e 	bl	100549fc <GAT_att_cmn_get_conn_index>
10055da0:	a910      	add	r1, sp, #64	@ 0x40
10055da2:	7c0a      	ldrb	r2, [r1, #16]
10055da4:	4930      	ldr	r1, [pc, #192]	@ (10055e68 <__arm_cp.1_3>)
10055da6:	7ac9      	ldrb	r1, [r1, #11]
10055da8:	6873      	ldr	r3, [r6, #4]
10055daa:	6a1b      	ldr	r3, [r3, #32]
10055dac:	689b      	ldr	r3, [r3, #8]
10055dae:	9300      	str	r3, [sp, #0]
10055db0:	0849      	lsrs	r1, r1, #1
10055db2:	1c4b      	adds	r3, r1, #1
10055db4:	2104      	movs	r1, #4
10055db6:	f000 fd08 	bl	100567ca <GAT_srv_set_zip_val>
10055dba:	482c      	ldr	r0, [pc, #176]	@ (10055e6c <__arm_cp.1_4>)
10055dbc:	6801      	ldr	r1, [r0, #0]
10055dbe:	3183      	adds	r1, #131	@ 0x83
10055dc0:	a810      	add	r0, sp, #64	@ 0x40
10055dc2:	2210      	movs	r2, #16
10055dc4:	f7f0 f966 	bl	10046094 <BLEPLAT_MemCmp>
10055dc8:	2800      	cmp	r0, #0
10055dca:	d01f      	beq.n	10055e0c <GAT_srv_connection+0xd8>
10055dcc:	2001      	movs	r0, #1
10055dce:	aa07      	add	r2, sp, #28
10055dd0:	4629      	mov	r1, r5
10055dd2:	f000 fdeb 	bl	100569ac <GAT_srv_find_by_type_attr_p>
10055dd6:	2800      	cmp	r0, #0
10055dd8:	d0c8      	beq.n	10055d6c <GAT_srv_connection+0x38>
10055dda:	f000 fe3f 	bl	10056a5c <GAT_srv_get_cccd_attr_p>
10055dde:	2800      	cmp	r0, #0
10055de0:	d0c4      	beq.n	10055d6c <GAT_srv_connection+0x38>
10055de2:	4605      	mov	r5, r0
10055de4:	2104      	movs	r1, #4
10055de6:	4620      	mov	r0, r4
10055de8:	f7fe fd5e 	bl	100548a8 <GAT_att_cmn_get_channel_descr_p>
10055dec:	8881      	ldrh	r1, [r0, #4]
10055dee:	2240      	movs	r2, #64	@ 0x40
10055df0:	430a      	orrs	r2, r1
10055df2:	8082      	strh	r2, [r0, #4]
10055df4:	a810      	add	r0, sp, #64	@ 0x40
10055df6:	7c42      	ldrb	r2, [r0, #17]
10055df8:	4620      	mov	r0, r4
10055dfa:	4629      	mov	r1, r5
10055dfc:	f000 fd26 	bl	1005684c <GAT_srv_set_cccd_val>
10055e00:	200b      	movs	r0, #11
10055e02:	f00c fb59 	bl	100624b8 <tsk_notify_idx>
10055e06:	f7ed fe88 	bl	10043b1a <BLE_STACK_ProcessRequest>
10055e0a:	e7af      	b.n	10055d6c <GAT_srv_connection+0x38>
10055e0c:	2001      	movs	r0, #1
10055e0e:	f00e fc3d 	bl	1006468c <GAT_att_db_find_from_handle>
10055e12:	4606      	mov	r6, r0
10055e14:	ad10      	add	r5, sp, #64	@ 0x40
10055e16:	3512      	adds	r5, #18
10055e18:	2700      	movs	r7, #0
10055e1a:	2e00      	cmp	r6, #0
10055e1c:	d0a6      	beq.n	10055d6c <GAT_srv_connection+0x38>
10055e1e:	b2b8      	uxth	r0, r7
10055e20:	2863      	cmp	r0, #99	@ 0x63
10055e22:	d8a3      	bhi.n	10055d6c <GAT_srv_connection+0x38>
10055e24:	7831      	ldrb	r1, [r6, #0]
10055e26:	2904      	cmp	r1, #4
10055e28:	d112      	bne.n	10055e50 <GAT_srv_connection+0x11c>
10055e2a:	6871      	ldr	r1, [r6, #4]
10055e2c:	7d0a      	ldrb	r2, [r1, #20]
10055e2e:	2a10      	cmp	r2, #16
10055e30:	d10e      	bne.n	10055e50 <GAT_srv_connection+0x11c>
10055e32:	8a09      	ldrh	r1, [r1, #16]
10055e34:	4a0e      	ldr	r2, [pc, #56]	@ (10055e70 <__arm_cp.1_5>)
10055e36:	4291      	cmp	r1, r2
10055e38:	d10a      	bne.n	10055e50 <GAT_srv_connection+0x11c>
10055e3a:	2102      	movs	r1, #2
10055e3c:	2232      	movs	r2, #50	@ 0x32
10055e3e:	462b      	mov	r3, r5
10055e40:	f000 fcb0 	bl	100567a4 <GAT_srv_get_zip_val>
10055e44:	4602      	mov	r2, r0
10055e46:	4620      	mov	r0, r4
10055e48:	4631      	mov	r1, r6
10055e4a:	f000 fcff 	bl	1005684c <GAT_srv_set_cccd_val>
10055e4e:	1c7f      	adds	r7, r7, #1
10055e50:	4630      	mov	r0, r6
10055e52:	f00e fc7d 	bl	10064750 <GAT_att_db_get_next>
10055e56:	4606      	mov	r6, r0
10055e58:	e7df      	b.n	10055e1a <GAT_srv_connection+0xe6>
10055e5a:	46c0      	nop			@ (mov r8, r8)

10055e5c <__arm_cp.1_0>:
10055e5c:	10069fc8 	.word	0x10069fc8

10055e60 <__arm_cp.1_1>:
10055e60:	10069fdc 	.word	0x10069fdc

10055e64 <__arm_cp.1_2>:
10055e64:	0000ffff 	.word	0x0000ffff

10055e68 <__arm_cp.1_3>:
10055e68:	20001108 	.word	0x20001108

10055e6c <__arm_cp.1_4>:
10055e6c:	200010ac 	.word	0x200010ac

10055e70 <__arm_cp.1_5>:
10055e70:	00002902 	.word	0x00002902

10055e74 <GAT_srv_is_bonded>:
10055e74:	b580      	push	{r7, lr}
10055e76:	f00c f992 	bl	1006219e <smp_sap_check_is_peer_device_bonded>
10055e7a:	4241      	negs	r1, r0
10055e7c:	4148      	adcs	r0, r1
10055e7e:	bd80      	pop	{r7, pc}

10055e80 <GAT_srv_bearer_close>:
10055e80:	b5f0      	push	{r4, r5, r6, r7, lr}
10055e82:	b0a1      	sub	sp, #132	@ 0x84
10055e84:	2904      	cmp	r1, #4
10055e86:	d000      	beq.n	10055e8a <GAT_srv_bearer_close+0xa>
10055e88:	e0de      	b.n	10056048 <GAT_srv_bearer_close+0x1c8>
10055e8a:	4607      	mov	r7, r0
10055e8c:	f7ff fff2 	bl	10055e74 <GAT_srv_is_bonded>
10055e90:	4c6e      	ldr	r4, [pc, #440]	@ (1005604c <__arm_cp.3_0>)
10055e92:	4e6f      	ldr	r6, [pc, #444]	@ (10056050 <__arm_cp.3_1>)
10055e94:	2801      	cmp	r0, #1
10055e96:	d000      	beq.n	10055e9a <GAT_srv_bearer_close+0x1a>
10055e98:	e0a0      	b.n	10055fdc <GAT_srv_bearer_close+0x15c>
10055e9a:	ad0b      	add	r5, sp, #44	@ 0x2c
10055e9c:	496d      	ldr	r1, [pc, #436]	@ (10056054 <__arm_cp.3_2>)
10055e9e:	2214      	movs	r2, #20
10055ea0:	4628      	mov	r0, r5
10055ea2:	f011 faba 	bl	1006741a <__aeabi_memcpy>
10055ea6:	a810      	add	r0, sp, #64	@ 0x40
10055ea8:	4634      	mov	r4, r6
10055eaa:	2600      	movs	r6, #0
10055eac:	2244      	movs	r2, #68	@ 0x44
10055eae:	4631      	mov	r1, r6
10055eb0:	f7f0 f8e0 	bl	10046074 <BLEPLAT_MemSet>
10055eb4:	2001      	movs	r0, #1
10055eb6:	4621      	mov	r1, r4
10055eb8:	462a      	mov	r2, r5
10055eba:	f000 fd77 	bl	100569ac <GAT_srv_find_by_type_attr_p>
10055ebe:	2800      	cmp	r0, #0
10055ec0:	d00f      	beq.n	10055ee2 <GAT_srv_bearer_close+0x62>
10055ec2:	4604      	mov	r4, r0
10055ec4:	4638      	mov	r0, r7
10055ec6:	f7fe fd99 	bl	100549fc <GAT_att_cmn_get_conn_index>
10055eca:	6861      	ldr	r1, [r4, #4]
10055ecc:	6a09      	ldr	r1, [r1, #32]
10055ece:	688b      	ldr	r3, [r1, #8]
10055ed0:	4961      	ldr	r1, [pc, #388]	@ (10056058 <__arm_cp.3_3>)
10055ed2:	7ac9      	ldrb	r1, [r1, #11]
10055ed4:	0849      	lsrs	r1, r1, #1
10055ed6:	1c4a      	adds	r2, r1, #1
10055ed8:	2104      	movs	r1, #4
10055eda:	f000 fc63 	bl	100567a4 <GAT_srv_get_zip_val>
10055ede:	a910      	add	r1, sp, #64	@ 0x40
10055ee0:	7408      	strb	r0, [r1, #16]
10055ee2:	2104      	movs	r1, #4
10055ee4:	9704      	str	r7, [sp, #16]
10055ee6:	4638      	mov	r0, r7
10055ee8:	f7fe fcde 	bl	100548a8 <GAT_att_cmn_get_channel_descr_p>
10055eec:	a910      	add	r1, sp, #64	@ 0x40
10055eee:	7c09      	ldrb	r1, [r1, #16]
10055ef0:	2901      	cmp	r1, #1
10055ef2:	d103      	bne.n	10055efc <GAT_srv_bearer_close+0x7c>
10055ef4:	8880      	ldrh	r0, [r0, #4]
10055ef6:	0600      	lsls	r0, r0, #24
10055ef8:	0f80      	lsrs	r0, r0, #30
10055efa:	d106      	bne.n	10055f0a <GAT_srv_bearer_close+0x8a>
10055efc:	4857      	ldr	r0, [pc, #348]	@ (1005605c <__arm_cp.3_4>)
10055efe:	6801      	ldr	r1, [r0, #0]
10055f00:	3183      	adds	r1, #131	@ 0x83
10055f02:	a810      	add	r0, sp, #64	@ 0x40
10055f04:	2210      	movs	r2, #16
10055f06:	f7f0 f8a5 	bl	10046054 <BLEPLAT_MemCpy>
10055f0a:	2001      	movs	r0, #1
10055f0c:	9003      	str	r0, [sp, #12]
10055f0e:	f00e fbbd 	bl	1006468c <GAT_att_db_find_from_handle>
10055f12:	4605      	mov	r5, r0
10055f14:	a810      	add	r0, sp, #64	@ 0x40
10055f16:	3012      	adds	r0, #18
10055f18:	9002      	str	r0, [sp, #8]
10055f1a:	9605      	str	r6, [sp, #20]
10055f1c:	4c4b      	ldr	r4, [pc, #300]	@ (1005604c <__arm_cp.3_0>)
10055f1e:	2d00      	cmp	r5, #0
10055f20:	d034      	beq.n	10055f8c <GAT_srv_bearer_close+0x10c>
10055f22:	b2b7      	uxth	r7, r6
10055f24:	2f63      	cmp	r7, #99	@ 0x63
10055f26:	d831      	bhi.n	10055f8c <GAT_srv_bearer_close+0x10c>
10055f28:	7828      	ldrb	r0, [r5, #0]
10055f2a:	2804      	cmp	r0, #4
10055f2c:	d00b      	beq.n	10055f46 <GAT_srv_bearer_close+0xc6>
10055f2e:	2802      	cmp	r0, #2
10055f30:	d127      	bne.n	10055f82 <GAT_srv_bearer_close+0x102>
10055f32:	6868      	ldr	r0, [r5, #4]
10055f34:	7d01      	ldrb	r1, [r0, #20]
10055f36:	2910      	cmp	r1, #16
10055f38:	d121      	bne.n	10055f7e <GAT_srv_bearer_close+0xfe>
10055f3a:	8a00      	ldrh	r0, [r0, #16]
10055f3c:	4949      	ldr	r1, [pc, #292]	@ (10056064 <__arm_cp.3_6>)
10055f3e:	4288      	cmp	r0, r1
10055f40:	d11d      	bne.n	10055f7e <GAT_srv_bearer_close+0xfe>
10055f42:	9803      	ldr	r0, [sp, #12]
10055f44:	e01c      	b.n	10055f80 <GAT_srv_bearer_close+0x100>
10055f46:	6868      	ldr	r0, [r5, #4]
10055f48:	7d01      	ldrb	r1, [r0, #20]
10055f4a:	2910      	cmp	r1, #16
10055f4c:	d119      	bne.n	10055f82 <GAT_srv_bearer_close+0x102>
10055f4e:	8a00      	ldrh	r0, [r0, #16]
10055f50:	42a0      	cmp	r0, r4
10055f52:	d116      	bne.n	10055f82 <GAT_srv_bearer_close+0x102>
10055f54:	9804      	ldr	r0, [sp, #16]
10055f56:	4629      	mov	r1, r5
10055f58:	f000 fdb0 	bl	10056abc <GAT_srv_get_cccd_val>
10055f5c:	4604      	mov	r4, r0
10055f5e:	9802      	ldr	r0, [sp, #8]
10055f60:	9000      	str	r0, [sp, #0]
10055f62:	b2e2      	uxtb	r2, r4
10055f64:	2102      	movs	r1, #2
10055f66:	2332      	movs	r3, #50	@ 0x32
10055f68:	4638      	mov	r0, r7
10055f6a:	f000 fc2e 	bl	100567ca <GAT_srv_set_zip_val>
10055f6e:	9805      	ldr	r0, [sp, #20]
10055f70:	2801      	cmp	r0, #1
10055f72:	d101      	bne.n	10055f78 <GAT_srv_bearer_close+0xf8>
10055f74:	a810      	add	r0, sp, #64	@ 0x40
10055f76:	7444      	strb	r4, [r0, #17]
10055f78:	1c76      	adds	r6, r6, #1
10055f7a:	4c34      	ldr	r4, [pc, #208]	@ (1005604c <__arm_cp.3_0>)
10055f7c:	e001      	b.n	10055f82 <GAT_srv_bearer_close+0x102>
10055f7e:	2000      	movs	r0, #0
10055f80:	9005      	str	r0, [sp, #20]
10055f82:	4628      	mov	r0, r5
10055f84:	f00e fbe4 	bl	10064750 <GAT_att_db_get_next>
10055f88:	4605      	mov	r5, r0
10055f8a:	e7c8      	b.n	10055f1e <GAT_srv_bearer_close+0x9e>
10055f8c:	2101      	movs	r1, #1
10055f8e:	aa09      	add	r2, sp, #36	@ 0x24
10055f90:	ab08      	add	r3, sp, #32
10055f92:	9f04      	ldr	r7, [sp, #16]
10055f94:	4638      	mov	r0, r7
10055f96:	f00c f8cc 	bl	10062132 <smp_sap_get_remote_address_check_addr_type>
10055f9a:	2800      	cmp	r0, #0
10055f9c:	d11c      	bne.n	10055fd8 <GAT_srv_bearer_close+0x158>
10055f9e:	b2b0      	uxth	r0, r6
10055fa0:	0040      	lsls	r0, r0, #1
10055fa2:	492f      	ldr	r1, [pc, #188]	@ (10056060 <__arm_cp.3_5>)
10055fa4:	1840      	adds	r0, r0, r1
10055fa6:	0880      	lsrs	r0, r0, #2
10055fa8:	3013      	adds	r0, #19
10055faa:	b282      	uxth	r2, r0
10055fac:	a808      	add	r0, sp, #32
10055fae:	7801      	ldrb	r1, [r0, #0]
10055fb0:	a809      	add	r0, sp, #36	@ 0x24
10055fb2:	ab10      	add	r3, sp, #64	@ 0x40
10055fb4:	f009 ff0d 	bl	1005fdd2 <SDB_sap_write_peer_bonded_gatt_client_data>
10055fb8:	2800      	cmp	r0, #0
10055fba:	d00d      	beq.n	10055fd8 <GAT_srv_bearer_close+0x158>
10055fbc:	4604      	mov	r4, r0
10055fbe:	ad06      	add	r5, sp, #24
10055fc0:	a909      	add	r1, sp, #36	@ 0x24
10055fc2:	2206      	movs	r2, #6
10055fc4:	4628      	mov	r0, r5
10055fc6:	f7f0 f845 	bl	10046054 <BLEPLAT_MemCpy>
10055fca:	71ac      	strb	r4, [r5, #6]
10055fcc:	2042      	movs	r0, #66	@ 0x42
10055fce:	2104      	movs	r1, #4
10055fd0:	2207      	movs	r2, #7
10055fd2:	462b      	mov	r3, r5
10055fd4:	f00d fe98 	bl	10063d08 <aci_hal_fw_error_event_push_noinline>
10055fd8:	4e1d      	ldr	r6, [pc, #116]	@ (10056050 <__arm_cp.3_1>)
10055fda:	4c1c      	ldr	r4, [pc, #112]	@ (1005604c <__arm_cp.3_0>)
10055fdc:	2001      	movs	r0, #1
10055fde:	f00e fb55 	bl	1006468c <GAT_att_db_find_from_handle>
10055fe2:	4605      	mov	r5, r0
10055fe4:	2800      	cmp	r0, #0
10055fe6:	d012      	beq.n	1005600e <GAT_srv_bearer_close+0x18e>
10055fe8:	7828      	ldrb	r0, [r5, #0]
10055fea:	2804      	cmp	r0, #4
10055fec:	d10b      	bne.n	10056006 <GAT_srv_bearer_close+0x186>
10055fee:	6868      	ldr	r0, [r5, #4]
10055ff0:	7d01      	ldrb	r1, [r0, #20]
10055ff2:	2910      	cmp	r1, #16
10055ff4:	d107      	bne.n	10056006 <GAT_srv_bearer_close+0x186>
10055ff6:	8a00      	ldrh	r0, [r0, #16]
10055ff8:	42a0      	cmp	r0, r4
10055ffa:	d104      	bne.n	10056006 <GAT_srv_bearer_close+0x186>
10055ffc:	2200      	movs	r2, #0
10055ffe:	4638      	mov	r0, r7
10056000:	4629      	mov	r1, r5
10056002:	f000 fc23 	bl	1005684c <GAT_srv_set_cccd_val>
10056006:	4628      	mov	r0, r5
10056008:	f00e fba2 	bl	10064750 <GAT_att_db_get_next>
1005600c:	e7e9      	b.n	10055fe2 <GAT_srv_bearer_close+0x162>
1005600e:	ac10      	add	r4, sp, #64	@ 0x40
10056010:	4910      	ldr	r1, [pc, #64]	@ (10056054 <__arm_cp.3_2>)
10056012:	2214      	movs	r2, #20
10056014:	4620      	mov	r0, r4
10056016:	f011 fa00 	bl	1006741a <__aeabi_memcpy>
1005601a:	2001      	movs	r0, #1
1005601c:	4631      	mov	r1, r6
1005601e:	4622      	mov	r2, r4
10056020:	f000 fcc4 	bl	100569ac <GAT_srv_find_by_type_attr_p>
10056024:	2800      	cmp	r0, #0
10056026:	d00f      	beq.n	10056048 <GAT_srv_bearer_close+0x1c8>
10056028:	4604      	mov	r4, r0
1005602a:	4638      	mov	r0, r7
1005602c:	f7fe fce6 	bl	100549fc <GAT_att_cmn_get_conn_index>
10056030:	4909      	ldr	r1, [pc, #36]	@ (10056058 <__arm_cp.3_3>)
10056032:	7ac9      	ldrb	r1, [r1, #11]
10056034:	6862      	ldr	r2, [r4, #4]
10056036:	6a12      	ldr	r2, [r2, #32]
10056038:	6892      	ldr	r2, [r2, #8]
1005603a:	9200      	str	r2, [sp, #0]
1005603c:	0849      	lsrs	r1, r1, #1
1005603e:	1c4b      	adds	r3, r1, #1
10056040:	2104      	movs	r1, #4
10056042:	2200      	movs	r2, #0
10056044:	f000 fbc1 	bl	100567ca <GAT_srv_set_zip_val>
10056048:	b021      	add	sp, #132	@ 0x84
1005604a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005604c <__arm_cp.3_0>:
1005604c:	00002902 	.word	0x00002902

10056050 <__arm_cp.3_1>:
10056050:	0000ffff 	.word	0x0000ffff

10056054 <__arm_cp.3_2>:
10056054:	10069fdc 	.word	0x10069fdc

10056058 <__arm_cp.3_3>:
10056058:	20001108 	.word	0x20001108

1005605c <__arm_cp.3_4>:
1005605c:	200010ac 	.word	0x200010ac

10056060 <__arm_cp.3_5>:
10056060:	0003fffe 	.word	0x0003fffe

10056064 <__arm_cp.3_6>:
10056064:	00002a05 	.word	0x00002a05

10056068 <GAT_srv_db_hash_tsk>:
10056068:	b5f0      	push	{r4, r5, r6, r7, lr}
1005606a:	b0d3      	sub	sp, #332	@ 0x14c
1005606c:	2500      	movs	r5, #0
1005606e:	950c      	str	r5, [sp, #48]	@ 0x30
10056070:	950b      	str	r5, [sp, #44]	@ 0x2c
10056072:	950a      	str	r5, [sp, #40]	@ 0x28
10056074:	9509      	str	r5, [sp, #36]	@ 0x24
10056076:	2041      	movs	r0, #65	@ 0x41
10056078:	0082      	lsls	r2, r0, #2
1005607a:	ac0d      	add	r4, sp, #52	@ 0x34
1005607c:	4620      	mov	r0, r4
1005607e:	4629      	mov	r1, r5
10056080:	f7ef fff8 	bl	10046074 <BLEPLAT_MemSet>
10056084:	7125      	strb	r5, [r4, #4]
10056086:	2010      	movs	r0, #16
10056088:	9044      	str	r0, [sp, #272]	@ 0x110
1005608a:	9016      	str	r0, [sp, #88]	@ 0x58
1005608c:	a809      	add	r0, sp, #36	@ 0x24
1005608e:	900f      	str	r0, [sp, #60]	@ 0x3c
10056090:	4620      	mov	r0, r4
10056092:	f7f0 f85d 	bl	10046150 <BLEPLAT_AesCMACEncryptInit>
10056096:	34dc      	adds	r4, #220	@ 0xdc
10056098:	9401      	str	r4, [sp, #4]
1005609a:	2001      	movs	r0, #1
1005609c:	f00e faf6 	bl	1006468c <GAT_att_db_find_from_handle>
100560a0:	4606      	mov	r6, r0
100560a2:	a84e      	add	r0, sp, #312	@ 0x138
100560a4:	300c      	adds	r0, #12
100560a6:	9002      	str	r0, [sp, #8]
100560a8:	4d48      	ldr	r5, [pc, #288]	@ (100561cc <__arm_cp.5_2>)
100560aa:	2e00      	cmp	r6, #0
100560ac:	d041      	beq.n	10056132 <GAT_srv_db_hash_tsk+0xca>
100560ae:	7830      	ldrb	r0, [r6, #0]
100560b0:	2803      	cmp	r0, #3
100560b2:	d039      	beq.n	10056128 <GAT_srv_db_hash_tsk+0xc0>
100560b4:	af4e      	add	r7, sp, #312	@ 0x138
100560b6:	4630      	mov	r0, r6
100560b8:	4639      	mov	r1, r7
100560ba:	f000 f907 	bl	100562cc <GAT_srv_get_attr_type>
100560be:	7c38      	ldrb	r0, [r7, #16]
100560c0:	2810      	cmp	r0, #16
100560c2:	d131      	bne.n	10056128 <GAT_srv_db_hash_tsk+0xc0>
100560c4:	8870      	ldrh	r0, [r6, #2]
100560c6:	a904      	add	r1, sp, #16
100560c8:	8008      	strh	r0, [r1, #0]
100560ca:	a84e      	add	r0, sp, #312	@ 0x138
100560cc:	8980      	ldrh	r0, [r0, #12]
100560ce:	493d      	ldr	r1, [pc, #244]	@ (100561c4 <__arm_cp.5_0>)
100560d0:	1841      	adds	r1, r0, r1
100560d2:	2905      	cmp	r1, #5
100560d4:	d31c      	bcc.n	10056110 <GAT_srv_db_hash_tsk+0xa8>
100560d6:	493c      	ldr	r1, [pc, #240]	@ (100561c8 <__arm_cp.5_1>)
100560d8:	1841      	adds	r1, r0, r1
100560da:	2904      	cmp	r1, #4
100560dc:	d303      	bcc.n	100560e6 <GAT_srv_db_hash_tsk+0x7e>
100560de:	2129      	movs	r1, #41	@ 0x29
100560e0:	0209      	lsls	r1, r1, #8
100560e2:	4288      	cmp	r0, r1
100560e4:	d120      	bne.n	10056128 <GAT_srv_db_hash_tsk+0xc0>
100560e6:	af0d      	add	r7, sp, #52	@ 0x34
100560e8:	2402      	movs	r4, #2
100560ea:	aa04      	add	r2, sp, #16
100560ec:	4638      	mov	r0, r7
100560ee:	4621      	mov	r1, r4
100560f0:	47a8      	blx	r5
100560f2:	4638      	mov	r0, r7
100560f4:	4621      	mov	r1, r4
100560f6:	9a02      	ldr	r2, [sp, #8]
100560f8:	47a8      	blx	r5
100560fa:	2000      	movs	r0, #0
100560fc:	aa05      	add	r2, sp, #20
100560fe:	4631      	mov	r1, r6
10056100:	f000 f9a6 	bl	10056450 <GAT_srv_get_attr_value>
10056104:	9805      	ldr	r0, [sp, #20]
10056106:	6842      	ldr	r2, [r0, #4]
10056108:	8801      	ldrh	r1, [r0, #0]
1005610a:	4638      	mov	r0, r7
1005610c:	47a8      	blx	r5
1005610e:	e00b      	b.n	10056128 <GAT_srv_db_hash_tsk+0xc0>
10056110:	ac0d      	add	r4, sp, #52	@ 0x34
10056112:	2702      	movs	r7, #2
10056114:	aa04      	add	r2, sp, #16
10056116:	4620      	mov	r0, r4
10056118:	4639      	mov	r1, r7
1005611a:	f000 fcdb 	bl	10056ad4 <GAT_srv_aes_cmac_append>
1005611e:	4620      	mov	r0, r4
10056120:	4639      	mov	r1, r7
10056122:	9a02      	ldr	r2, [sp, #8]
10056124:	f000 fcd6 	bl	10056ad4 <GAT_srv_aes_cmac_append>
10056128:	4630      	mov	r0, r6
1005612a:	f00e fb11 	bl	10064750 <GAT_att_db_get_next>
1005612e:	4606      	mov	r6, r0
10056130:	e7bb      	b.n	100560aa <GAT_srv_db_hash_tsk+0x42>
10056132:	9801      	ldr	r0, [sp, #4]
10056134:	8c82      	ldrh	r2, [r0, #36]	@ 0x24
10056136:	2a00      	cmp	r2, #0
10056138:	d006      	beq.n	10056148 <GAT_srv_db_hash_tsk+0xe0>
1005613a:	a80d      	add	r0, sp, #52	@ 0x34
1005613c:	2120      	movs	r1, #32
1005613e:	7101      	strb	r1, [r0, #4]
10056140:	4601      	mov	r1, r0
10056142:	31e0      	adds	r1, #224	@ 0xe0
10056144:	f7f0 f811 	bl	1004616a <BLEPLAT_AesCMACEncryptAppend>
10056148:	a80d      	add	r0, sp, #52	@ 0x34
1005614a:	ac4e      	add	r4, sp, #312	@ 0x138
1005614c:	aa04      	add	r2, sp, #16
1005614e:	4621      	mov	r1, r4
10056150:	f7f0 f81c 	bl	1004618c <BLEPLAT_AesCMACEncryptFinish>
10056154:	ad05      	add	r5, sp, #20
10056156:	2610      	movs	r6, #16
10056158:	2301      	movs	r3, #1
1005615a:	4628      	mov	r0, r5
1005615c:	4621      	mov	r1, r4
1005615e:	4632      	mov	r2, r6
10056160:	f00c fb10 	bl	10062784 <copy_swap_buffer>
10056164:	4f1a      	ldr	r7, [pc, #104]	@ (100561d0 <__arm_cp.5_3>)
10056166:	6839      	ldr	r1, [r7, #0]
10056168:	3183      	adds	r1, #131	@ 0x83
1005616a:	4628      	mov	r0, r5
1005616c:	4632      	mov	r2, r6
1005616e:	f7ef ff91 	bl	10046094 <BLEPLAT_MemCmp>
10056172:	2800      	cmp	r0, #0
10056174:	d019      	beq.n	100561aa <GAT_srv_db_hash_tsk+0x142>
10056176:	6838      	ldr	r0, [r7, #0]
10056178:	3083      	adds	r0, #131	@ 0x83
1005617a:	a905      	add	r1, sp, #20
1005617c:	2210      	movs	r2, #16
1005617e:	f7ef ff69 	bl	10046054 <BLEPLAT_MemCpy>
10056182:	ad03      	add	r5, sp, #12
10056184:	2082      	movs	r0, #130	@ 0x82
10056186:	8028      	strh	r0, [r5, #0]
10056188:	9500      	str	r5, [sp, #0]
1005618a:	2400      	movs	r4, #0
1005618c:	4b11      	ldr	r3, [pc, #68]	@ (100561d4 <__arm_cp.5_4>)
1005618e:	4620      	mov	r0, r4
10056190:	4621      	mov	r1, r4
10056192:	4622      	mov	r2, r4
10056194:	f7fe faca 	bl	1005472c <GAT_att_cmn_for_each_ch_descr>
10056198:	2040      	movs	r0, #64	@ 0x40
1005619a:	8028      	strh	r0, [r5, #0]
1005619c:	9500      	str	r5, [sp, #0]
1005619e:	4b0e      	ldr	r3, [pc, #56]	@ (100561d8 <__arm_cp.5_5>)
100561a0:	4620      	mov	r0, r4
100561a2:	4621      	mov	r1, r4
100561a4:	4622      	mov	r2, r4
100561a6:	f7fe fac1 	bl	1005472c <GAT_att_cmn_for_each_ch_descr>
100561aa:	6838      	ldr	r0, [r7, #0]
100561ac:	215c      	movs	r1, #92	@ 0x5c
100561ae:	5c42      	ldrb	r2, [r0, r1]
100561b0:	23fd      	movs	r3, #253	@ 0xfd
100561b2:	4013      	ands	r3, r2
100561b4:	5443      	strb	r3, [r0, r1]
100561b6:	200b      	movs	r0, #11
100561b8:	f00c f97e 	bl	100624b8 <tsk_notify_idx>
100561bc:	f7ed fcad 	bl	10043b1a <BLE_STACK_ProcessRequest>
100561c0:	b053      	add	sp, #332	@ 0x14c
100561c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

100561c4 <__arm_cp.5_0>:
100561c4:	ffffd6ff 	.word	0xffffd6ff

100561c8 <__arm_cp.5_1>:
100561c8:	ffffd800 	.word	0xffffd800

100561cc <__arm_cp.5_2>:
100561cc:	10056ad5 	.word	0x10056ad5

100561d0 <__arm_cp.5_3>:
100561d0:	200010ac 	.word	0x200010ac

100561d4 <__arm_cp.5_4>:
100561d4:	100549f1 	.word	0x100549f1

100561d8 <__arm_cp.5_5>:
100561d8:	100549e5 	.word	0x100549e5

100561dc <GAT_srv_send_srv_change_tsk>:
100561dc:	b5e0      	push	{r5, r6, r7, lr}
100561de:	2100      	movs	r1, #0
100561e0:	9100      	str	r1, [sp, #0]
100561e2:	2002      	movs	r0, #2
100561e4:	2204      	movs	r2, #4
100561e6:	4b07      	ldr	r3, [pc, #28]	@ (10056204 <__arm_cp.7_0>)
100561e8:	f7fe faa0 	bl	1005472c <GAT_att_cmn_for_each_ch_descr>
100561ec:	2800      	cmp	r0, #0
100561ee:	d001      	beq.n	100561f4 <GAT_srv_send_srv_change_tsk+0x18>
100561f0:	2881      	cmp	r0, #129	@ 0x81
100561f2:	d100      	bne.n	100561f6 <GAT_srv_send_srv_change_tsk+0x1a>
100561f4:	bd8c      	pop	{r2, r3, r7, pc}
100561f6:	200b      	movs	r0, #11
100561f8:	f00c f95e 	bl	100624b8 <tsk_notify_idx>
100561fc:	f7ed fc8d 	bl	10043b1a <BLE_STACK_ProcessRequest>
10056200:	bd8c      	pop	{r2, r3, r7, pc}
10056202:	46c0      	nop			@ (mov r8, r8)

10056204 <__arm_cp.7_0>:
10056204:	10056209 	.word	0x10056209

10056208 <GAT_srv_tx_service_change>:
10056208:	b5b0      	push	{r4, r5, r7, lr}
1005620a:	b08a      	sub	sp, #40	@ 0x28
1005620c:	4604      	mov	r4, r0
1005620e:	8880      	ldrh	r0, [r0, #4]
10056210:	0640      	lsls	r0, r0, #25
10056212:	d401      	bmi.n	10056218 <GAT_srv_tx_service_change+0x10>
10056214:	2500      	movs	r5, #0
10056216:	e04b      	b.n	100562b0 <GAT_srv_tx_service_change+0xa8>
10056218:	a809      	add	r0, sp, #36	@ 0x24
1005621a:	2180      	movs	r1, #128	@ 0x80
1005621c:	8001      	strh	r1, [r0, #0]
1005621e:	8921      	ldrh	r1, [r4, #8]
10056220:	9000      	str	r0, [sp, #0]
10056222:	2001      	movs	r0, #1
10056224:	2500      	movs	r5, #0
10056226:	4b24      	ldr	r3, [pc, #144]	@ (100562b8 <__arm_cp.8_0>)
10056228:	462a      	mov	r2, r5
1005622a:	f7fe fa7f 	bl	1005472c <GAT_att_cmn_for_each_ch_descr>
1005622e:	88a1      	ldrh	r1, [r4, #4]
10056230:	0789      	lsls	r1, r1, #30
10056232:	d43d      	bmi.n	100562b0 <GAT_srv_tx_service_change+0xa8>
10056234:	2800      	cmp	r0, #0
10056236:	d13b      	bne.n	100562b0 <GAT_srv_tx_service_change+0xa8>
10056238:	ad04      	add	r5, sp, #16
1005623a:	4920      	ldr	r1, [pc, #128]	@ (100562bc <__arm_cp.8_1>)
1005623c:	2214      	movs	r2, #20
1005623e:	4628      	mov	r0, r5
10056240:	f011 f8eb 	bl	1006741a <__aeabi_memcpy>
10056244:	2001      	movs	r0, #1
10056246:	491e      	ldr	r1, [pc, #120]	@ (100562c0 <__arm_cp.8_2>)
10056248:	462a      	mov	r2, r5
1005624a:	f000 fbaf 	bl	100569ac <GAT_srv_find_by_type_attr_p>
1005624e:	2800      	cmp	r0, #0
10056250:	d012      	beq.n	10056278 <GAT_srv_tx_service_change+0x70>
10056252:	4605      	mov	r5, r0
10056254:	f000 fc02 	bl	10056a5c <GAT_srv_get_cccd_attr_p>
10056258:	2800      	cmp	r0, #0
1005625a:	d00d      	beq.n	10056278 <GAT_srv_tx_service_change+0x70>
1005625c:	4601      	mov	r1, r0
1005625e:	8920      	ldrh	r0, [r4, #8]
10056260:	f000 fc2c 	bl	10056abc <GAT_srv_get_cccd_val>
10056264:	0780      	lsls	r0, r0, #30
10056266:	d412      	bmi.n	1005628e <GAT_srv_tx_service_change+0x86>
10056268:	8920      	ldrh	r0, [r4, #8]
1005626a:	2100      	movs	r1, #0
1005626c:	2201      	movs	r2, #1
1005626e:	f000 fbbd 	bl	100569ec <GAT_srv_check_client_support_feature>
10056272:	4605      	mov	r5, r0
10056274:	2881      	cmp	r0, #129	@ 0x81
10056276:	d11b      	bne.n	100562b0 <GAT_srv_tx_service_change+0xa8>
10056278:	a809      	add	r0, sp, #36	@ 0x24
1005627a:	2140      	movs	r1, #64	@ 0x40
1005627c:	8001      	strh	r1, [r0, #0]
1005627e:	8921      	ldrh	r1, [r4, #8]
10056280:	9000      	str	r0, [sp, #0]
10056282:	2001      	movs	r0, #1
10056284:	2200      	movs	r2, #0
10056286:	4b10      	ldr	r3, [pc, #64]	@ (100562c8 <__arm_cp.8_4>)
10056288:	f7fe fa50 	bl	1005472c <GAT_att_cmn_for_each_ch_descr>
1005628c:	e00f      	b.n	100562ae <GAT_srv_tx_service_change+0xa6>
1005628e:	480d      	ldr	r0, [pc, #52]	@ (100562c4 <__arm_cp.8_3>)
10056290:	9003      	str	r0, [sp, #12]
10056292:	aa01      	add	r2, sp, #4
10056294:	2004      	movs	r0, #4
10056296:	8050      	strh	r0, [r2, #2]
10056298:	8868      	ldrh	r0, [r5, #2]
1005629a:	8010      	strh	r0, [r2, #0]
1005629c:	a803      	add	r0, sp, #12
1005629e:	9002      	str	r0, [sp, #8]
100562a0:	8961      	ldrh	r1, [r4, #10]
100562a2:	8920      	ldrh	r0, [r4, #8]
100562a4:	9200      	str	r2, [sp, #0]
100562a6:	2202      	movs	r2, #2
100562a8:	2301      	movs	r3, #1
100562aa:	f7fe fdff 	bl	10054eac <GAT_att_srv_hvtx>
100562ae:	4605      	mov	r5, r0
100562b0:	4628      	mov	r0, r5
100562b2:	b00a      	add	sp, #40	@ 0x28
100562b4:	bdb0      	pop	{r4, r5, r7, pc}
100562b6:	46c0      	nop			@ (mov r8, r8)

100562b8 <__arm_cp.8_0>:
100562b8:	100549d9 	.word	0x100549d9

100562bc <__arm_cp.8_1>:
100562bc:	10069fc8 	.word	0x10069fc8

100562c0 <__arm_cp.8_2>:
100562c0:	0000ffff 	.word	0x0000ffff

100562c4 <__arm_cp.8_3>:
100562c4:	ffff0001 	.word	0xffff0001

100562c8 <__arm_cp.8_4>:
100562c8:	100549f1 	.word	0x100549f1

100562cc <GAT_srv_get_attr_type>:
100562cc:	b580      	push	{r7, lr}
100562ce:	2210      	movs	r2, #16
100562d0:	740a      	strb	r2, [r1, #16]
100562d2:	7802      	ldrb	r2, [r0, #0]
100562d4:	2a04      	cmp	r2, #4
100562d6:	d80d      	bhi.n	100562f4 <GAT_srv_get_attr_type+0x28>
100562d8:	447a      	add	r2, pc
100562da:	7912      	ldrb	r2, [r2, #4]
100562dc:	0052      	lsls	r2, r2, #1
100562de:	4497      	add	pc, r2
100562e0:	0212160a 	.word	0x0212160a
100562e4:	0002      	.short	0x0002
100562e6:	6840      	ldr	r0, [r0, #4]
100562e8:	1d03      	adds	r3, r0, #4
100562ea:	2214      	movs	r2, #20
100562ec:	4608      	mov	r0, r1
100562ee:	4619      	mov	r1, r3
100562f0:	f7ef feb0 	bl	10046054 <BLEPLAT_MemCpy>
100562f4:	bd80      	pop	{r7, pc}
100562f6:	2205      	movs	r2, #5
100562f8:	02d2      	lsls	r2, r2, #11
100562fa:	6840      	ldr	r0, [r0, #4]
100562fc:	7d00      	ldrb	r0, [r0, #20]
100562fe:	2801      	cmp	r0, #1
10056300:	d109      	bne.n	10056316 <GAT_srv_get_attr_type+0x4a>
10056302:	818a      	strh	r2, [r1, #12]
10056304:	bd80      	pop	{r7, pc}
10056306:	2005      	movs	r0, #5
10056308:	02c0      	lsls	r0, r0, #11
1005630a:	1cc0      	adds	r0, r0, #3
1005630c:	e004      	b.n	10056318 <GAT_srv_get_attr_type+0x4c>
1005630e:	2005      	movs	r0, #5
10056310:	02c0      	lsls	r0, r0, #11
10056312:	1c80      	adds	r0, r0, #2
10056314:	e000      	b.n	10056318 <GAT_srv_get_attr_type+0x4c>
10056316:	1c50      	adds	r0, r2, #1
10056318:	8188      	strh	r0, [r1, #12]
1005631a:	bd80      	pop	{r7, pc}

1005631c <GAT_srv_get_att_group_end_handle>:
1005631c:	b580      	push	{r7, lr}
1005631e:	7801      	ldrb	r1, [r0, #0]
10056320:	2202      	movs	r2, #2
10056322:	430a      	orrs	r2, r1
10056324:	2a02      	cmp	r2, #2
10056326:	d102      	bne.n	1005632e <GAT_srv_get_att_group_end_handle+0x12>
10056328:	f00e fa26 	bl	10064778 <GAT_att_db_get_last_group_handle>
1005632c:	bd80      	pop	{r7, pc}
1005632e:	8840      	ldrh	r0, [r0, #2]
10056330:	bd80      	pop	{r7, pc}

10056332 <GAT_srv_attr_value_read>:
10056332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10056334:	461c      	mov	r4, r3
10056336:	9200      	str	r2, [sp, #0]
10056338:	460e      	mov	r6, r1
1005633a:	4607      	mov	r7, r0
1005633c:	2201      	movs	r2, #1
1005633e:	4608      	mov	r0, r1
10056340:	4639      	mov	r1, r7
10056342:	f000 f80f 	bl	10056364 <GAT_srv_check_perms>
10056346:	7020      	strb	r0, [r4, #0]
10056348:	2586      	movs	r5, #134	@ 0x86
1005634a:	2800      	cmp	r0, #0
1005634c:	d108      	bne.n	10056360 <GAT_srv_attr_value_read+0x2e>
1005634e:	4638      	mov	r0, r7
10056350:	4631      	mov	r1, r6
10056352:	9a00      	ldr	r2, [sp, #0]
10056354:	f000 f87c 	bl	10056450 <GAT_srv_get_attr_value>
10056358:	2886      	cmp	r0, #134	@ 0x86
1005635a:	d102      	bne.n	10056362 <GAT_srv_attr_value_read+0x30>
1005635c:	200e      	movs	r0, #14
1005635e:	7020      	strb	r0, [r4, #0]
10056360:	4628      	mov	r0, r5
10056362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10056364 <GAT_srv_check_perms>:
10056364:	b5f0      	push	{r4, r5, r6, r7, lr}
10056366:	b085      	sub	sp, #20
10056368:	4615      	mov	r5, r2
1005636a:	9101      	str	r1, [sp, #4]
1005636c:	4601      	mov	r1, r0
1005636e:	7804      	ldrb	r4, [r0, #0]
10056370:	2700      	movs	r7, #0
10056372:	2302      	movs	r3, #2
10056374:	200e      	movs	r0, #14
10056376:	2c03      	cmp	r4, #3
10056378:	461a      	mov	r2, r3
1005637a:	463e      	mov	r6, r7
1005637c:	d312      	bcc.n	100563a4 <GAT_srv_check_perms+0x40>
1005637e:	d00b      	beq.n	10056398 <GAT_srv_check_perms+0x34>
10056380:	2c04      	cmp	r4, #4
10056382:	d158      	bne.n	10056436 <GAT_srv_check_perms+0xd2>
10056384:	6848      	ldr	r0, [r1, #4]
10056386:	7801      	ldrb	r1, [r0, #0]
10056388:	078c      	lsls	r4, r1, #30
1005638a:	07c9      	lsls	r1, r1, #31
1005638c:	0f8a      	lsrs	r2, r1, #30
1005638e:	2c00      	cmp	r4, #0
10056390:	d500      	bpl.n	10056394 <GAT_srv_check_perms+0x30>
10056392:	324c      	adds	r2, #76	@ 0x4c
10056394:	1c41      	adds	r1, r0, #1
10056396:	e002      	b.n	1005639e <GAT_srv_check_perms+0x3a>
10056398:	6848      	ldr	r0, [r1, #4]
1005639a:	1c41      	adds	r1, r0, #1
1005639c:	7802      	ldrb	r2, [r0, #0]
1005639e:	1c80      	adds	r0, r0, #2
100563a0:	780e      	ldrb	r6, [r1, #0]
100563a2:	7807      	ldrb	r7, [r0, #0]
100563a4:	2d01      	cmp	r5, #1
100563a6:	d103      	bne.n	100563b0 <GAT_srv_check_perms+0x4c>
100563a8:	4610      	mov	r0, r2
100563aa:	4018      	ands	r0, r3
100563ac:	4618      	mov	r0, r3
100563ae:	d042      	beq.n	10056436 <GAT_srv_check_perms+0xd2>
100563b0:	2003      	movs	r0, #3
100563b2:	2d03      	cmp	r5, #3
100563b4:	d102      	bne.n	100563bc <GAT_srv_check_perms+0x58>
100563b6:	2108      	movs	r1, #8
100563b8:	4011      	ands	r1, r2
100563ba:	d03c      	beq.n	10056436 <GAT_srv_check_perms+0xd2>
100563bc:	2d04      	cmp	r5, #4
100563be:	d102      	bne.n	100563c6 <GAT_srv_check_perms+0x62>
100563c0:	2104      	movs	r1, #4
100563c2:	4011      	ands	r1, r2
100563c4:	d037      	beq.n	10056436 <GAT_srv_check_perms+0xd2>
100563c6:	2d05      	cmp	r5, #5
100563c8:	d102      	bne.n	100563d0 <GAT_srv_check_perms+0x6c>
100563ca:	2140      	movs	r1, #64	@ 0x40
100563cc:	400a      	ands	r2, r1
100563ce:	d032      	beq.n	10056436 <GAT_srv_check_perms+0xd2>
100563d0:	a904      	add	r1, sp, #16
100563d2:	aa03      	add	r2, sp, #12
100563d4:	ab02      	add	r3, sp, #8
100563d6:	9c01      	ldr	r4, [sp, #4]
100563d8:	4620      	mov	r0, r4
100563da:	f00b fe84 	bl	100620e6 <smp_sap_get_security_level>
100563de:	2802      	cmp	r0, #2
100563e0:	d102      	bne.n	100563e8 <GAT_srv_check_perms+0x84>
100563e2:	2f00      	cmp	r7, #0
100563e4:	d10f      	bne.n	10056406 <GAT_srv_check_perms+0xa2>
100563e6:	e025      	b.n	10056434 <GAT_srv_check_perms+0xd0>
100563e8:	2d01      	cmp	r5, #1
100563ea:	d000      	beq.n	100563ee <GAT_srv_check_perms+0x8a>
100563ec:	08ff      	lsrs	r7, r7, #3
100563ee:	2d05      	cmp	r5, #5
100563f0:	d10b      	bne.n	1005640a <GAT_srv_check_perms+0xa6>
100563f2:	a804      	add	r0, sp, #16
100563f4:	7800      	ldrb	r0, [r0, #0]
100563f6:	2802      	cmp	r0, #2
100563f8:	d105      	bne.n	10056406 <GAT_srv_check_perms+0xa2>
100563fa:	a802      	add	r0, sp, #8
100563fc:	7800      	ldrb	r0, [r0, #0]
100563fe:	2802      	cmp	r0, #2
10056400:	d114      	bne.n	1005642c <GAT_srv_check_perms+0xc8>
10056402:	2000      	movs	r0, #0
10056404:	e013      	b.n	1005642e <GAT_srv_check_perms+0xca>
10056406:	200e      	movs	r0, #14
10056408:	e015      	b.n	10056436 <GAT_srv_check_perms+0xd2>
1005640a:	2000      	movs	r0, #0
1005640c:	2f00      	cmp	r7, #0
1005640e:	d012      	beq.n	10056436 <GAT_srv_check_perms+0xd2>
10056410:	a903      	add	r1, sp, #12
10056412:	7809      	ldrb	r1, [r1, #0]
10056414:	07fa      	lsls	r2, r7, #31
10056416:	d003      	beq.n	10056420 <GAT_srv_check_perms+0xbc>
10056418:	2903      	cmp	r1, #3
1005641a:	d201      	bcs.n	10056420 <GAT_srv_check_perms+0xbc>
1005641c:	2005      	movs	r0, #5
1005641e:	e00a      	b.n	10056436 <GAT_srv_check_perms+0xd2>
10056420:	077a      	lsls	r2, r7, #29
10056422:	d508      	bpl.n	10056436 <GAT_srv_check_perms+0xd2>
10056424:	2902      	cmp	r1, #2
10056426:	d208      	bcs.n	1005643a <GAT_srv_check_perms+0xd6>
10056428:	200f      	movs	r0, #15
1005642a:	e004      	b.n	10056436 <GAT_srv_check_perms+0xd2>
1005642c:	2005      	movs	r0, #5
1005642e:	2101      	movs	r1, #1
10056430:	400f      	ands	r7, r1
10056432:	d100      	bne.n	10056436 <GAT_srv_check_perms+0xd2>
10056434:	4638      	mov	r0, r7
10056436:	b005      	add	sp, #20
10056438:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005643a:	4620      	mov	r0, r4
1005643c:	4631      	mov	r1, r6
1005643e:	f00b fec8 	bl	100621d2 <smp_sap_check_encryption_key_size>
10056442:	28b6      	cmp	r0, #182	@ 0xb6
10056444:	d001      	beq.n	1005644a <GAT_srv_check_perms+0xe6>
10056446:	2000      	movs	r0, #0
10056448:	e7f5      	b.n	10056436 <GAT_srv_check_perms+0xd2>
1005644a:	200c      	movs	r0, #12
1005644c:	e7f3      	b.n	10056436 <GAT_srv_check_perms+0xd2>
	...

10056450 <GAT_srv_get_attr_value>:
10056450:	b5f0      	push	{r4, r5, r6, r7, lr}
10056452:	b085      	sub	sp, #20
10056454:	460d      	mov	r5, r1
10056456:	7809      	ldrb	r1, [r1, #0]
10056458:	2904      	cmp	r1, #4
1005645a:	d811      	bhi.n	10056480 <GAT_srv_get_attr_value+0x30>
1005645c:	4614      	mov	r4, r2
1005645e:	46c0      	nop			@ (mov r8, r8)
10056460:	4479      	add	r1, pc
10056462:	7909      	ldrb	r1, [r1, #4]
10056464:	0049      	lsls	r1, r1, #1
10056466:	448f      	add	pc, r1
10056468:	694a0d02 	.word	0x694a0d02
1005646c:	007e      	.short	0x007e
1005646e:	4e73      	ldr	r6, [pc, #460]	@ (1005663c <__arm_cp.13_0>)
10056470:	6830      	ldr	r0, [r6, #0]
10056472:	4601      	mov	r1, r0
10056474:	3170      	adds	r1, #112	@ 0x70
10056476:	66c1      	str	r1, [r0, #108]	@ 0x6c
10056478:	6868      	ldr	r0, [r5, #4]
1005647a:	f00c f9f5 	bl	10062868 <UUID_write_to_flat>
1005647e:	e057      	b.n	10056530 <GAT_srv_get_attr_value+0xe0>
10056480:	2686      	movs	r6, #134	@ 0x86
10056482:	e0d3      	b.n	1005662c <GAT_srv_get_attr_value+0x1dc>
10056484:	4f6d      	ldr	r7, [pc, #436]	@ (1005663c <__arm_cp.13_0>)
10056486:	6838      	ldr	r0, [r7, #0]
10056488:	4601      	mov	r1, r0
1005648a:	3170      	adds	r1, #112	@ 0x70
1005648c:	66c1      	str	r1, [r0, #108]	@ 0x6c
1005648e:	686b      	ldr	r3, [r5, #4]
10056490:	2001      	movs	r0, #1
10056492:	496e      	ldr	r1, [pc, #440]	@ (1005664c <__arm_cp.13_4>)
10056494:	2600      	movs	r6, #0
10056496:	4632      	mov	r2, r6
10056498:	f000 fad6 	bl	10056a48 <GAT_srv_get_attribute_handle>
1005649c:	a901      	add	r1, sp, #4
1005649e:	8008      	strh	r0, [r1, #0]
100564a0:	2800      	cmp	r0, #0
100564a2:	d100      	bne.n	100564a6 <GAT_srv_get_attr_value+0x56>
100564a4:	e0ad      	b.n	10056602 <GAT_srv_get_attr_value+0x1b2>
100564a6:	f00e f8c9 	bl	1006463c <GAT_att_db_find_by_handle>
100564aa:	f7ff ff37 	bl	1005631c <GAT_srv_get_att_group_end_handle>
100564ae:	a902      	add	r1, sp, #8
100564b0:	9100      	str	r1, [sp, #0]
100564b2:	8008      	strh	r0, [r1, #0]
100564b4:	6838      	ldr	r0, [r7, #0]
100564b6:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
100564b8:	a901      	add	r1, sp, #4
100564ba:	2702      	movs	r7, #2
100564bc:	463a      	mov	r2, r7
100564be:	f7ef fdc9 	bl	10046054 <BLEPLAT_MemCpy>
100564c2:	485e      	ldr	r0, [pc, #376]	@ (1005663c <__arm_cp.13_0>)
100564c4:	6800      	ldr	r0, [r0, #0]
100564c6:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
100564c8:	1c80      	adds	r0, r0, #2
100564ca:	9900      	ldr	r1, [sp, #0]
100564cc:	463a      	mov	r2, r7
100564ce:	f7ef fdc1 	bl	10046054 <BLEPLAT_MemCpy>
100564d2:	485a      	ldr	r0, [pc, #360]	@ (1005663c <__arm_cp.13_0>)
100564d4:	6800      	ldr	r0, [r0, #0]
100564d6:	2768      	movs	r7, #104	@ 0x68
100564d8:	2104      	movs	r1, #4
100564da:	53c1      	strh	r1, [r0, r7]
100564dc:	6869      	ldr	r1, [r5, #4]
100564de:	7c0a      	ldrb	r2, [r1, #16]
100564e0:	2a10      	cmp	r2, #16
100564e2:	d000      	beq.n	100564e6 <GAT_srv_get_attr_value+0x96>
100564e4:	e091      	b.n	1005660a <GAT_srv_get_attr_value+0x1ba>
100564e6:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
100564e8:	310c      	adds	r1, #12
100564ea:	1d00      	adds	r0, r0, #4
100564ec:	2202      	movs	r2, #2
100564ee:	f7ef fdb1 	bl	10046054 <BLEPLAT_MemCpy>
100564f2:	4852      	ldr	r0, [pc, #328]	@ (1005663c <__arm_cp.13_0>)
100564f4:	6800      	ldr	r0, [r0, #0]
100564f6:	5bc1      	ldrh	r1, [r0, r7]
100564f8:	1c89      	adds	r1, r1, #2
100564fa:	53c1      	strh	r1, [r0, r7]
100564fc:	e085      	b.n	1005660a <GAT_srv_get_attr_value+0x1ba>
100564fe:	4e4f      	ldr	r6, [pc, #316]	@ (1005663c <__arm_cp.13_0>)
10056500:	6830      	ldr	r0, [r6, #0]
10056502:	4601      	mov	r1, r0
10056504:	3170      	adds	r1, #112	@ 0x70
10056506:	66c1      	str	r1, [r0, #108]	@ 0x6c
10056508:	6869      	ldr	r1, [r5, #4]
1005650a:	7809      	ldrb	r1, [r1, #0]
1005650c:	2270      	movs	r2, #112	@ 0x70
1005650e:	5481      	strb	r1, [r0, r2]
10056510:	8869      	ldrh	r1, [r5, #2]
10056512:	1c4a      	adds	r2, r1, #1
10056514:	a903      	add	r1, sp, #12
10056516:	800a      	strh	r2, [r1, #0]
10056518:	3071      	adds	r0, #113	@ 0x71
1005651a:	2202      	movs	r2, #2
1005651c:	f7ef fd9a 	bl	10046054 <BLEPLAT_MemCpy>
10056520:	6830      	ldr	r0, [r6, #0]
10056522:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
10056524:	6868      	ldr	r0, [r5, #4]
10056526:	1d00      	adds	r0, r0, #4
10056528:	1cc9      	adds	r1, r1, #3
1005652a:	f00c f99d 	bl	10062868 <UUID_write_to_flat>
1005652e:	1cc0      	adds	r0, r0, #3
10056530:	6831      	ldr	r1, [r6, #0]
10056532:	2268      	movs	r2, #104	@ 0x68
10056534:	5288      	strh	r0, [r1, r2]
10056536:	3168      	adds	r1, #104	@ 0x68
10056538:	6021      	str	r1, [r4, #0]
1005653a:	e076      	b.n	1005662a <GAT_srv_get_attr_value+0x1da>
1005653c:	6869      	ldr	r1, [r5, #4]
1005653e:	7d0a      	ldrb	r2, [r1, #20]
10056540:	2a10      	cmp	r2, #16
10056542:	d132      	bne.n	100565aa <GAT_srv_get_attr_value+0x15a>
10056544:	4a3f      	ldr	r2, [pc, #252]	@ (10056644 <__arm_cp.13_2>)
10056546:	1c52      	adds	r2, r2, #1
10056548:	8a0b      	ldrh	r3, [r1, #16]
1005654a:	4293      	cmp	r3, r2
1005654c:	d12d      	bne.n	100565aa <GAT_srv_get_attr_value+0x15a>
1005654e:	483b      	ldr	r0, [pc, #236]	@ (1005663c <__arm_cp.13_0>)
10056550:	6801      	ldr	r1, [r0, #0]
10056552:	3168      	adds	r1, #104	@ 0x68
10056554:	6021      	str	r1, [r4, #0]
10056556:	6800      	ldr	r0, [r0, #0]
10056558:	2168      	movs	r1, #104	@ 0x68
1005655a:	2210      	movs	r2, #16
1005655c:	5242      	strh	r2, [r0, r1]
1005655e:	4601      	mov	r1, r0
10056560:	3183      	adds	r1, #131	@ 0x83
10056562:	66c1      	str	r1, [r0, #108]	@ 0x6c
10056564:	e061      	b.n	1005662a <GAT_srv_get_attr_value+0x1da>
10056566:	6869      	ldr	r1, [r5, #4]
10056568:	6989      	ldr	r1, [r1, #24]
1005656a:	2900      	cmp	r1, #0
1005656c:	d045      	beq.n	100565fa <GAT_srv_get_attr_value+0x1aa>
1005656e:	4e33      	ldr	r6, [pc, #204]	@ (1005663c <__arm_cp.13_0>)
10056570:	6831      	ldr	r1, [r6, #0]
10056572:	3168      	adds	r1, #104	@ 0x68
10056574:	6021      	str	r1, [r4, #0]
10056576:	6869      	ldr	r1, [r5, #4]
10056578:	7d0a      	ldrb	r2, [r1, #20]
1005657a:	2a10      	cmp	r2, #16
1005657c:	d13f      	bne.n	100565fe <GAT_srv_get_attr_value+0x1ae>
1005657e:	8a0a      	ldrh	r2, [r1, #16]
10056580:	4b2f      	ldr	r3, [pc, #188]	@ (10056640 <__arm_cp.13_1>)
10056582:	429a      	cmp	r2, r3
10056584:	d13b      	bne.n	100565fe <GAT_srv_get_attr_value+0x1ae>
10056586:	6831      	ldr	r1, [r6, #0]
10056588:	2268      	movs	r2, #104	@ 0x68
1005658a:	2402      	movs	r4, #2
1005658c:	528c      	strh	r4, [r1, r2]
1005658e:	460a      	mov	r2, r1
10056590:	3270      	adds	r2, #112	@ 0x70
10056592:	66ca      	str	r2, [r1, #108]	@ 0x6c
10056594:	4629      	mov	r1, r5
10056596:	f000 fa91 	bl	10056abc <GAT_srv_get_cccd_val>
1005659a:	a904      	add	r1, sp, #16
1005659c:	8008      	strh	r0, [r1, #0]
1005659e:	6830      	ldr	r0, [r6, #0]
100565a0:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
100565a2:	4622      	mov	r2, r4
100565a4:	f7ef fd56 	bl	10046054 <BLEPLAT_MemCpy>
100565a8:	e03f      	b.n	1005662a <GAT_srv_get_attr_value+0x1da>
100565aa:	6a09      	ldr	r1, [r1, #32]
100565ac:	2900      	cmp	r1, #0
100565ae:	d024      	beq.n	100565fa <GAT_srv_get_attr_value+0x1aa>
100565b0:	4e22      	ldr	r6, [pc, #136]	@ (1005663c <__arm_cp.13_0>)
100565b2:	6831      	ldr	r1, [r6, #0]
100565b4:	3168      	adds	r1, #104	@ 0x68
100565b6:	6021      	str	r1, [r4, #0]
100565b8:	6869      	ldr	r1, [r5, #4]
100565ba:	7d0a      	ldrb	r2, [r1, #20]
100565bc:	2a10      	cmp	r2, #16
100565be:	d127      	bne.n	10056610 <GAT_srv_get_attr_value+0x1c0>
100565c0:	8a0a      	ldrh	r2, [r1, #16]
100565c2:	4b20      	ldr	r3, [pc, #128]	@ (10056644 <__arm_cp.13_2>)
100565c4:	429a      	cmp	r2, r3
100565c6:	d123      	bne.n	10056610 <GAT_srv_get_attr_value+0x1c0>
100565c8:	6831      	ldr	r1, [r6, #0]
100565ca:	2268      	movs	r2, #104	@ 0x68
100565cc:	2301      	movs	r3, #1
100565ce:	528b      	strh	r3, [r1, r2]
100565d0:	460a      	mov	r2, r1
100565d2:	3270      	adds	r2, #112	@ 0x70
100565d4:	66ca      	str	r2, [r1, #108]	@ 0x6c
100565d6:	f7fe fa11 	bl	100549fc <GAT_att_cmn_get_conn_index>
100565da:	28ff      	cmp	r0, #255	@ 0xff
100565dc:	d029      	beq.n	10056632 <GAT_srv_get_attr_value+0x1e2>
100565de:	6869      	ldr	r1, [r5, #4]
100565e0:	6a09      	ldr	r1, [r1, #32]
100565e2:	688b      	ldr	r3, [r1, #8]
100565e4:	4918      	ldr	r1, [pc, #96]	@ (10056648 <__arm_cp.13_3>)
100565e6:	7ac9      	ldrb	r1, [r1, #11]
100565e8:	0849      	lsrs	r1, r1, #1
100565ea:	1c4a      	adds	r2, r1, #1
100565ec:	2104      	movs	r1, #4
100565ee:	f000 f8d9 	bl	100567a4 <GAT_srv_get_zip_val>
100565f2:	6831      	ldr	r1, [r6, #0]
100565f4:	2270      	movs	r2, #112	@ 0x70
100565f6:	5488      	strb	r0, [r1, r2]
100565f8:	e017      	b.n	1005662a <GAT_srv_get_attr_value+0x1da>
100565fa:	2684      	movs	r6, #132	@ 0x84
100565fc:	e016      	b.n	1005662c <GAT_srv_get_attr_value+0x1dc>
100565fe:	6988      	ldr	r0, [r1, #24]
10056600:	e007      	b.n	10056612 <GAT_srv_get_attr_value+0x1c2>
10056602:	6838      	ldr	r0, [r7, #0]
10056604:	2168      	movs	r1, #104	@ 0x68
10056606:	2200      	movs	r2, #0
10056608:	5242      	strh	r2, [r0, r1]
1005660a:	3068      	adds	r0, #104	@ 0x68
1005660c:	6020      	str	r0, [r4, #0]
1005660e:	e00d      	b.n	1005662c <GAT_srv_get_attr_value+0x1dc>
10056610:	6a08      	ldr	r0, [r1, #32]
10056612:	7801      	ldrb	r1, [r0, #0]
10056614:	0789      	lsls	r1, r1, #30
10056616:	d501      	bpl.n	1005661c <GAT_srv_get_attr_value+0x1cc>
10056618:	2102      	movs	r1, #2
1005661a:	e000      	b.n	1005661e <GAT_srv_get_attr_value+0x1ce>
1005661c:	2104      	movs	r1, #4
1005661e:	5a41      	ldrh	r1, [r0, r1]
10056620:	6880      	ldr	r0, [r0, #8]
10056622:	6832      	ldr	r2, [r6, #0]
10056624:	2368      	movs	r3, #104	@ 0x68
10056626:	52d1      	strh	r1, [r2, r3]
10056628:	66d0      	str	r0, [r2, #108]	@ 0x6c
1005662a:	2600      	movs	r6, #0
1005662c:	4630      	mov	r0, r6
1005662e:	b005      	add	sp, #20
10056630:	bdf0      	pop	{r4, r5, r6, r7, pc}
10056632:	6830      	ldr	r0, [r6, #0]
10056634:	2170      	movs	r1, #112	@ 0x70
10056636:	2600      	movs	r6, #0
10056638:	5446      	strb	r6, [r0, r1]
1005663a:	e7f7      	b.n	1005662c <GAT_srv_get_attr_value+0x1dc>

1005663c <__arm_cp.13_0>:
1005663c:	200010ac 	.word	0x200010ac

10056640 <__arm_cp.13_1>:
10056640:	00002902 	.word	0x00002902

10056644 <__arm_cp.13_2>:
10056644:	00002b29 	.word	0x00002b29

10056648 <__arm_cp.13_3>:
10056648:	20001108 	.word	0x20001108

1005664c <__arm_cp.13_4>:
1005664c:	0000ffff 	.word	0x0000ffff

10056650 <GAT_srv_attr_value_write>:
10056650:	b5f0      	push	{r4, r5, r6, r7, lr}
10056652:	b089      	sub	sp, #36	@ 0x24
10056654:	4617      	mov	r7, r2
10056656:	460d      	mov	r5, r1
10056658:	4606      	mov	r6, r0
1005665a:	7800      	ldrb	r0, [r0, #0]
1005665c:	8874      	ldrh	r4, [r6, #2]
1005665e:	2804      	cmp	r0, #4
10056660:	d045      	beq.n	100566ee <GAT_srv_attr_value_write+0x9e>
10056662:	2803      	cmp	r0, #3
10056664:	d177      	bne.n	10056756 <GAT_srv_attr_value_write+0x106>
10056666:	6871      	ldr	r1, [r6, #4]
10056668:	6a08      	ldr	r0, [r1, #32]
1005666a:	2800      	cmp	r0, #0
1005666c:	d07d      	beq.n	1005676a <GAT_srv_attr_value_write+0x11a>
1005666e:	7d0a      	ldrb	r2, [r1, #20]
10056670:	2a10      	cmp	r2, #16
10056672:	d174      	bne.n	1005675e <GAT_srv_attr_value_write+0x10e>
10056674:	8a09      	ldrh	r1, [r1, #16]
10056676:	4a49      	ldr	r2, [pc, #292]	@ (1005679c <__arm_cp.14_1>)
10056678:	4291      	cmp	r1, r2
1005667a:	d170      	bne.n	1005675e <GAT_srv_attr_value_write+0x10e>
1005667c:	9700      	str	r7, [sp, #0]
1005667e:	2101      	movs	r1, #1
10056680:	aa07      	add	r2, sp, #28
10056682:	ab08      	add	r3, sp, #32
10056684:	4628      	mov	r0, r5
10056686:	f7fe fcec 	bl	10055062 <GAT_att_srv_extract_write_packet_data>
1005668a:	2800      	cmp	r0, #0
1005668c:	d16e      	bne.n	1005676c <GAT_srv_attr_value_write+0x11c>
1005668e:	8828      	ldrh	r0, [r5, #0]
10056690:	f7fe f9b4 	bl	100549fc <GAT_att_cmn_get_conn_index>
10056694:	aa07      	add	r2, sp, #28
10056696:	7811      	ldrb	r1, [r2, #0]
10056698:	2307      	movs	r3, #7
1005669a:	400b      	ands	r3, r1
1005669c:	9305      	str	r3, [sp, #20]
1005669e:	7013      	strb	r3, [r2, #0]
100566a0:	6871      	ldr	r1, [r6, #4]
100566a2:	6a09      	ldr	r1, [r1, #32]
100566a4:	688b      	ldr	r3, [r1, #8]
100566a6:	493e      	ldr	r1, [pc, #248]	@ (100567a0 <__arm_cp.14_2>)
100566a8:	7ac9      	ldrb	r1, [r1, #11]
100566aa:	0849      	lsrs	r1, r1, #1
100566ac:	1c4a      	adds	r2, r1, #1
100566ae:	2104      	movs	r1, #4
100566b0:	9004      	str	r0, [sp, #16]
100566b2:	9203      	str	r2, [sp, #12]
100566b4:	9302      	str	r3, [sp, #8]
100566b6:	f000 f875 	bl	100567a4 <GAT_srv_get_zip_val>
100566ba:	9a05      	ldr	r2, [sp, #20]
100566bc:	4601      	mov	r1, r0
100566be:	4011      	ands	r1, r2
100566c0:	4281      	cmp	r1, r0
100566c2:	d157      	bne.n	10056774 <GAT_srv_attr_value_write+0x124>
100566c4:	9802      	ldr	r0, [sp, #8]
100566c6:	9000      	str	r0, [sp, #0]
100566c8:	2104      	movs	r1, #4
100566ca:	9804      	ldr	r0, [sp, #16]
100566cc:	9b03      	ldr	r3, [sp, #12]
100566ce:	f000 f87c 	bl	100567ca <GAT_srv_set_zip_val>
100566d2:	6870      	ldr	r0, [r6, #4]
100566d4:	6a00      	ldr	r0, [r0, #32]
100566d6:	7800      	ldrb	r0, [r0, #0]
100566d8:	07c0      	lsls	r0, r0, #31
100566da:	d03a      	beq.n	10056752 <GAT_srv_attr_value_write+0x102>
100566dc:	882e      	ldrh	r6, [r5, #0]
100566de:	4628      	mov	r0, r5
100566e0:	f001 f91f 	bl	10057922 <L2C_get_cid_from_basic_packet_header>
100566e4:	4602      	mov	r2, r0
100566e6:	a808      	add	r0, sp, #32
100566e8:	8800      	ldrh	r0, [r0, #0]
100566ea:	a907      	add	r1, sp, #28
100566ec:	e04c      	b.n	10056788 <GAT_srv_attr_value_write+0x138>
100566ee:	6871      	ldr	r1, [r6, #4]
100566f0:	6988      	ldr	r0, [r1, #24]
100566f2:	2800      	cmp	r0, #0
100566f4:	d039      	beq.n	1005676a <GAT_srv_attr_value_write+0x11a>
100566f6:	7d0a      	ldrb	r2, [r1, #20]
100566f8:	2a10      	cmp	r2, #16
100566fa:	d130      	bne.n	1005675e <GAT_srv_attr_value_write+0x10e>
100566fc:	8a09      	ldrh	r1, [r1, #16]
100566fe:	4a26      	ldr	r2, [pc, #152]	@ (10056798 <__arm_cp.14_0>)
10056700:	4291      	cmp	r1, r2
10056702:	d12c      	bne.n	1005675e <GAT_srv_attr_value_write+0x10e>
10056704:	9700      	str	r7, [sp, #0]
10056706:	2102      	movs	r1, #2
10056708:	aa06      	add	r2, sp, #24
1005670a:	ab08      	add	r3, sp, #32
1005670c:	4628      	mov	r0, r5
1005670e:	f7fe fca8 	bl	10055062 <GAT_att_srv_extract_write_packet_data>
10056712:	2800      	cmp	r0, #0
10056714:	d12a      	bne.n	1005676c <GAT_srv_attr_value_write+0x11c>
10056716:	a806      	add	r0, sp, #24
10056718:	8800      	ldrh	r0, [r0, #0]
1005671a:	9005      	str	r0, [sp, #20]
1005671c:	8870      	ldrh	r0, [r6, #2]
1005671e:	1e80      	subs	r0, r0, #2
10056720:	b281      	uxth	r1, r0
10056722:	2002      	movs	r0, #2
10056724:	f00e f8c0 	bl	100648a8 <GAT_att_db_reverse_find_attr_of_type>
10056728:	2800      	cmp	r0, #0
1005672a:	d021      	beq.n	10056770 <GAT_srv_attr_value_write+0x120>
1005672c:	9905      	ldr	r1, [sp, #20]
1005672e:	0789      	lsls	r1, r1, #30
10056730:	0e89      	lsrs	r1, r1, #26
10056732:	6840      	ldr	r0, [r0, #4]
10056734:	7800      	ldrb	r0, [r0, #0]
10056736:	4008      	ands	r0, r1
10056738:	4288      	cmp	r0, r1
1005673a:	d119      	bne.n	10056770 <GAT_srv_attr_value_write+0x120>
1005673c:	a806      	add	r0, sp, #24
1005673e:	8802      	ldrh	r2, [r0, #0]
10056740:	8828      	ldrh	r0, [r5, #0]
10056742:	4631      	mov	r1, r6
10056744:	f000 f882 	bl	1005684c <GAT_srv_set_cccd_val>
10056748:	6870      	ldr	r0, [r6, #4]
1005674a:	6980      	ldr	r0, [r0, #24]
1005674c:	7800      	ldrb	r0, [r0, #0]
1005674e:	07c0      	lsls	r0, r0, #31
10056750:	d112      	bne.n	10056778 <GAT_srv_attr_value_write+0x128>
10056752:	2000      	movs	r0, #0
10056754:	e00a      	b.n	1005676c <GAT_srv_attr_value_write+0x11c>
10056756:	2003      	movs	r0, #3
10056758:	7038      	strb	r0, [r7, #0]
1005675a:	2086      	movs	r0, #134	@ 0x86
1005675c:	e006      	b.n	1005676c <GAT_srv_attr_value_write+0x11c>
1005675e:	4621      	mov	r1, r4
10056760:	462a      	mov	r2, r5
10056762:	463b      	mov	r3, r7
10056764:	f000 f847 	bl	100567f6 <GAT_srv_attr_direct_value_write>
10056768:	e000      	b.n	1005676c <GAT_srv_attr_value_write+0x11c>
1005676a:	2084      	movs	r0, #132	@ 0x84
1005676c:	b009      	add	sp, #36	@ 0x24
1005676e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10056770:	20fd      	movs	r0, #253	@ 0xfd
10056772:	e7f1      	b.n	10056758 <GAT_srv_attr_value_write+0x108>
10056774:	2013      	movs	r0, #19
10056776:	e7ef      	b.n	10056758 <GAT_srv_attr_value_write+0x108>
10056778:	882e      	ldrh	r6, [r5, #0]
1005677a:	4628      	mov	r0, r5
1005677c:	f001 f8d1 	bl	10057922 <L2C_get_cid_from_basic_packet_header>
10056780:	4602      	mov	r2, r0
10056782:	a808      	add	r0, sp, #32
10056784:	8800      	ldrh	r0, [r0, #0]
10056786:	a906      	add	r1, sp, #24
10056788:	9000      	str	r0, [sp, #0]
1005678a:	9101      	str	r1, [sp, #4]
1005678c:	2002      	movs	r0, #2
1005678e:	4631      	mov	r1, r6
10056790:	4623      	mov	r3, r4
10056792:	f00c fcc5 	bl	10063120 <aci_gatt_srv_attribute_modified_event_push_noinline>
10056796:	e7e9      	b.n	1005676c <GAT_srv_attr_value_write+0x11c>

10056798 <__arm_cp.14_0>:
10056798:	00002902 	.word	0x00002902

1005679c <__arm_cp.14_1>:
1005679c:	00002b29 	.word	0x00002b29

100567a0 <__arm_cp.14_2>:
100567a0:	20001108 	.word	0x20001108

100567a4 <GAT_srv_get_zip_val>:
100567a4:	b510      	push	{r4, lr}
100567a6:	4348      	muls	r0, r1
100567a8:	08c4      	lsrs	r4, r0, #3
100567aa:	b2a4      	uxth	r4, r4
100567ac:	4294      	cmp	r4, r2
100567ae:	d901      	bls.n	100567b4 <GAT_srv_get_zip_val+0x10>
100567b0:	2000      	movs	r0, #0
100567b2:	bd10      	pop	{r4, pc}
100567b4:	2207      	movs	r2, #7
100567b6:	4010      	ands	r0, r2
100567b8:	5d1a      	ldrb	r2, [r3, r4]
100567ba:	40c2      	lsrs	r2, r0
100567bc:	2020      	movs	r0, #32
100567be:	1a41      	subs	r1, r0, r1
100567c0:	2000      	movs	r0, #0
100567c2:	43c0      	mvns	r0, r0
100567c4:	40c8      	lsrs	r0, r1
100567c6:	4010      	ands	r0, r2
100567c8:	bd10      	pop	{r4, pc}

100567ca <GAT_srv_set_zip_val>:
100567ca:	b5b0      	push	{r4, r5, r7, lr}
100567cc:	4348      	muls	r0, r1
100567ce:	08c4      	lsrs	r4, r0, #3
100567d0:	b2a4      	uxth	r4, r4
100567d2:	429c      	cmp	r4, r3
100567d4:	d80e      	bhi.n	100567f4 <GAT_srv_set_zip_val+0x2a>
100567d6:	9b04      	ldr	r3, [sp, #16]
100567d8:	2507      	movs	r5, #7
100567da:	4028      	ands	r0, r5
100567dc:	2520      	movs	r5, #32
100567de:	1a69      	subs	r1, r5, r1
100567e0:	2500      	movs	r5, #0
100567e2:	43ed      	mvns	r5, r5
100567e4:	40cd      	lsrs	r5, r1
100567e6:	402a      	ands	r2, r5
100567e8:	4082      	lsls	r2, r0
100567ea:	4085      	lsls	r5, r0
100567ec:	5d18      	ldrb	r0, [r3, r4]
100567ee:	43a8      	bics	r0, r5
100567f0:	4310      	orrs	r0, r2
100567f2:	5518      	strb	r0, [r3, r4]
100567f4:	bdb0      	pop	{r4, r5, r7, pc}

100567f6 <GAT_srv_attr_direct_value_write>:
100567f6:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100567f8:	4616      	mov	r6, r2
100567fa:	460c      	mov	r4, r1
100567fc:	4605      	mov	r5, r0
100567fe:	6882      	ldr	r2, [r0, #8]
10056800:	8881      	ldrh	r1, [r0, #4]
10056802:	9300      	str	r3, [sp, #0]
10056804:	ab02      	add	r3, sp, #8
10056806:	4630      	mov	r0, r6
10056808:	f7fe fc2b 	bl	10055062 <GAT_att_srv_extract_write_packet_data>
1005680c:	2800      	cmp	r0, #0
1005680e:	d000      	beq.n	10056812 <GAT_srv_attr_direct_value_write+0x1c>
10056810:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10056812:	7828      	ldrb	r0, [r5, #0]
10056814:	0781      	lsls	r1, r0, #30
10056816:	d403      	bmi.n	10056820 <GAT_srv_attr_direct_value_write+0x2a>
10056818:	88a9      	ldrh	r1, [r5, #4]
1005681a:	aa02      	add	r2, sp, #8
1005681c:	8011      	strh	r1, [r2, #0]
1005681e:	e001      	b.n	10056824 <GAT_srv_attr_direct_value_write+0x2e>
10056820:	9902      	ldr	r1, [sp, #8]
10056822:	8069      	strh	r1, [r5, #2]
10056824:	07c0      	lsls	r0, r0, #31
10056826:	d101      	bne.n	1005682c <GAT_srv_attr_direct_value_write+0x36>
10056828:	2000      	movs	r0, #0
1005682a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005682c:	8837      	ldrh	r7, [r6, #0]
1005682e:	4630      	mov	r0, r6
10056830:	f001 f877 	bl	10057922 <L2C_get_cid_from_basic_packet_header>
10056834:	4602      	mov	r2, r0
10056836:	a802      	add	r0, sp, #8
10056838:	8800      	ldrh	r0, [r0, #0]
1005683a:	68a9      	ldr	r1, [r5, #8]
1005683c:	9000      	str	r0, [sp, #0]
1005683e:	9101      	str	r1, [sp, #4]
10056840:	2002      	movs	r0, #2
10056842:	4639      	mov	r1, r7
10056844:	4623      	mov	r3, r4
10056846:	f00c fc6b 	bl	10063120 <aci_gatt_srv_attribute_modified_event_push_noinline>
1005684a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005684c <GAT_srv_set_cccd_val>:
1005684c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005684e:	4614      	mov	r4, r2
10056850:	460d      	mov	r5, r1
10056852:	f7fe f8d3 	bl	100549fc <GAT_att_cmn_get_conn_index>
10056856:	6869      	ldr	r1, [r5, #4]
10056858:	6989      	ldr	r1, [r1, #24]
1005685a:	888b      	ldrh	r3, [r1, #4]
1005685c:	6889      	ldr	r1, [r1, #8]
1005685e:	9100      	str	r1, [sp, #0]
10056860:	2103      	movs	r1, #3
10056862:	400c      	ands	r4, r1
10056864:	2102      	movs	r1, #2
10056866:	4622      	mov	r2, r4
10056868:	f7ff ffaf 	bl	100567ca <GAT_srv_set_zip_val>
1005686c:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
	...

10056870 <GAT_srv_is_supported_grouping_type>:
10056870:	b570      	push	{r4, r5, r6, lr}
10056872:	b08a      	sub	sp, #40	@ 0x28
10056874:	4604      	mov	r4, r0
10056876:	ad05      	add	r5, sp, #20
10056878:	a10d      	add	r1, pc, #52	@ (adr r1, 100568b0 <GAT_srv_is_supported_grouping_type+0x40>)
1005687a:	2614      	movs	r6, #20
1005687c:	4628      	mov	r0, r5
1005687e:	4632      	mov	r2, r6
10056880:	f010 fdcb 	bl	1006741a <__aeabi_memcpy>
10056884:	4668      	mov	r0, sp
10056886:	a10f      	add	r1, pc, #60	@ (adr r1, 100568c4 <GAT_srv_is_supported_grouping_type+0x54>)
10056888:	4632      	mov	r2, r6
1005688a:	f010 fdc6 	bl	1006741a <__aeabi_memcpy>
1005688e:	4620      	mov	r0, r4
10056890:	4629      	mov	r1, r5
10056892:	f00b ffb9 	bl	10062808 <UUID_cmp_128bits>
10056896:	2800      	cmp	r0, #0
10056898:	d007      	beq.n	100568aa <GAT_srv_is_supported_grouping_type+0x3a>
1005689a:	4669      	mov	r1, sp
1005689c:	4620      	mov	r0, r4
1005689e:	f00b ffb3 	bl	10062808 <UUID_cmp_128bits>
100568a2:	4601      	mov	r1, r0
100568a4:	4240      	negs	r0, r0
100568a6:	4148      	adcs	r0, r1
100568a8:	e000      	b.n	100568ac <GAT_srv_is_supported_grouping_type+0x3c>
100568aa:	2001      	movs	r0, #1
100568ac:	b00a      	add	sp, #40	@ 0x28
100568ae:	bd70      	pop	{r4, r5, r6, pc}
100568b0:	5f9b34fb 	.word	0x5f9b34fb
100568b4:	80000080 	.word	0x80000080
100568b8:	00001000 	.word	0x00001000
100568bc:	00002800 	.word	0x00002800
100568c0:	00000010 	.word	0x00000010
100568c4:	5f9b34fb 	.word	0x5f9b34fb
100568c8:	80000080 	.word	0x80000080
100568cc:	00001000 	.word	0x00001000
100568d0:	00002801 	.word	0x00002801
100568d4:	00000010 	.word	0x00000010

100568d8 <GAT_srv_set_change_aware>:
100568d8:	b5e0      	push	{r5, r6, r7, lr}
100568da:	aa01      	add	r2, sp, #4
100568dc:	21c2      	movs	r1, #194	@ 0xc2
100568de:	8011      	strh	r1, [r2, #0]
100568e0:	8901      	ldrh	r1, [r0, #8]
100568e2:	9200      	str	r2, [sp, #0]
100568e4:	2001      	movs	r0, #1
100568e6:	2200      	movs	r2, #0
100568e8:	4b01      	ldr	r3, [pc, #4]	@ (100568f0 <__arm_cp.21_0>)
100568ea:	f7fd ff1f 	bl	1005472c <GAT_att_cmn_for_each_ch_descr>
100568ee:	bd8c      	pop	{r2, r3, r7, pc}

100568f0 <__arm_cp.21_0>:
100568f0:	100549f1 	.word	0x100549f1

100568f4 <GAT_srv_check_change_aware>:
100568f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100568f6:	b087      	sub	sp, #28
100568f8:	4605      	mov	r5, r0
100568fa:	ac02      	add	r4, sp, #8
100568fc:	4927      	ldr	r1, [pc, #156]	@ (1005699c <__arm_cp.22_0>)
100568fe:	2214      	movs	r2, #20
10056900:	4620      	mov	r0, r4
10056902:	f010 fd8a 	bl	1006741a <__aeabi_memcpy>
10056906:	2001      	movs	r0, #1
10056908:	4e25      	ldr	r6, [pc, #148]	@ (100569a0 <__arm_cp.22_1>)
1005690a:	4631      	mov	r1, r6
1005690c:	4622      	mov	r2, r4
1005690e:	f000 f84d 	bl	100569ac <GAT_srv_find_by_type_attr_p>
10056912:	2700      	movs	r7, #0
10056914:	2800      	cmp	r0, #0
10056916:	d03c      	beq.n	10056992 <GAT_srv_check_change_aware+0x9e>
10056918:	4601      	mov	r1, r0
1005691a:	6828      	ldr	r0, [r5, #0]
1005691c:	8882      	ldrh	r2, [r0, #4]
1005691e:	0652      	lsls	r2, r2, #25
10056920:	d537      	bpl.n	10056992 <GAT_srv_check_change_aware+0x9e>
10056922:	792a      	ldrb	r2, [r5, #4]
10056924:	23fe      	movs	r3, #254	@ 0xfe
10056926:	4013      	ands	r3, r2
10056928:	2486      	movs	r4, #134	@ 0x86
1005692a:	2b04      	cmp	r3, #4
1005692c:	d032      	beq.n	10056994 <GAT_srv_check_change_aware+0xa0>
1005692e:	8900      	ldrh	r0, [r0, #8]
10056930:	2201      	movs	r2, #1
10056932:	f000 f85b 	bl	100569ec <GAT_srv_check_client_support_feature>
10056936:	2881      	cmp	r0, #129	@ 0x81
10056938:	d02b      	beq.n	10056992 <GAT_srv_check_change_aware+0x9e>
1005693a:	6828      	ldr	r0, [r5, #0]
1005693c:	8881      	ldrh	r1, [r0, #4]
1005693e:	060a      	lsls	r2, r1, #24
10056940:	d425      	bmi.n	1005698e <GAT_srv_check_change_aware+0x9a>
10056942:	2780      	movs	r7, #128	@ 0x80
10056944:	4339      	orrs	r1, r7
10056946:	8081      	strh	r1, [r0, #4]
10056948:	7928      	ldrb	r0, [r5, #4]
1005694a:	2802      	cmp	r0, #2
1005694c:	d122      	bne.n	10056994 <GAT_srv_check_change_aware+0xa0>
1005694e:	8928      	ldrh	r0, [r5, #8]
10056950:	2801      	cmp	r0, #1
10056952:	d11f      	bne.n	10056994 <GAT_srv_check_change_aware+0xa0>
10056954:	8968      	ldrh	r0, [r5, #10]
10056956:	42b0      	cmp	r0, r6
10056958:	d11c      	bne.n	10056994 <GAT_srv_check_change_aware+0xa0>
1005695a:	68ea      	ldr	r2, [r5, #12]
1005695c:	7c10      	ldrb	r0, [r2, #16]
1005695e:	2810      	cmp	r0, #16
10056960:	d118      	bne.n	10056994 <GAT_srv_check_change_aware+0xa0>
10056962:	8990      	ldrh	r0, [r2, #12]
10056964:	490f      	ldr	r1, [pc, #60]	@ (100569a4 <__arm_cp.22_2>)
10056966:	4288      	cmp	r0, r1
10056968:	d114      	bne.n	10056994 <GAT_srv_check_change_aware+0xa0>
1005696a:	2001      	movs	r0, #1
1005696c:	4631      	mov	r1, r6
1005696e:	f000 f81d 	bl	100569ac <GAT_srv_find_by_type_attr_p>
10056972:	2800      	cmp	r0, #0
10056974:	d00e      	beq.n	10056994 <GAT_srv_check_change_aware+0xa0>
10056976:	a801      	add	r0, sp, #4
10056978:	8007      	strh	r7, [r0, #0]
1005697a:	6829      	ldr	r1, [r5, #0]
1005697c:	8909      	ldrh	r1, [r1, #8]
1005697e:	9000      	str	r0, [sp, #0]
10056980:	2001      	movs	r0, #1
10056982:	2400      	movs	r4, #0
10056984:	4b08      	ldr	r3, [pc, #32]	@ (100569a8 <__arm_cp.22_3>)
10056986:	4622      	mov	r2, r4
10056988:	f7fd fed0 	bl	1005472c <GAT_att_cmn_for_each_ch_descr>
1005698c:	e002      	b.n	10056994 <GAT_srv_check_change_aware+0xa0>
1005698e:	f7ff ffa3 	bl	100568d8 <GAT_srv_set_change_aware>
10056992:	463c      	mov	r4, r7
10056994:	4620      	mov	r0, r4
10056996:	b007      	add	sp, #28
10056998:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005699a:	46c0      	nop			@ (mov r8, r8)

1005699c <__arm_cp.22_0>:
1005699c:	10069fdc 	.word	0x10069fdc

100569a0 <__arm_cp.22_1>:
100569a0:	0000ffff 	.word	0x0000ffff

100569a4 <__arm_cp.22_2>:
100569a4:	00002b2a 	.word	0x00002b2a

100569a8 <__arm_cp.22_3>:
100569a8:	100549e5 	.word	0x100549e5

100569ac <GAT_srv_find_by_type_attr_p>:
100569ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100569ae:	b085      	sub	sp, #20
100569b0:	4614      	mov	r4, r2
100569b2:	460d      	mov	r5, r1
100569b4:	f00d fe6a 	bl	1006468c <GAT_att_db_find_from_handle>
100569b8:	4606      	mov	r6, r0
100569ba:	2000      	movs	r0, #0
100569bc:	2e00      	cmp	r6, #0
100569be:	d012      	beq.n	100569e6 <GAT_srv_find_by_type_attr_p+0x3a>
100569c0:	8871      	ldrh	r1, [r6, #2]
100569c2:	42a9      	cmp	r1, r5
100569c4:	d80f      	bhi.n	100569e6 <GAT_srv_find_by_type_attr_p+0x3a>
100569c6:	466f      	mov	r7, sp
100569c8:	4630      	mov	r0, r6
100569ca:	4639      	mov	r1, r7
100569cc:	f7ff fc7e 	bl	100562cc <GAT_srv_get_attr_type>
100569d0:	4620      	mov	r0, r4
100569d2:	4639      	mov	r1, r7
100569d4:	f00b ff01 	bl	100627da <UUID_cmp>
100569d8:	2800      	cmp	r0, #0
100569da:	d003      	beq.n	100569e4 <GAT_srv_find_by_type_attr_p+0x38>
100569dc:	4630      	mov	r0, r6
100569de:	f00d feb7 	bl	10064750 <GAT_att_db_get_next>
100569e2:	e7e9      	b.n	100569b8 <GAT_srv_find_by_type_attr_p+0xc>
100569e4:	4630      	mov	r0, r6
100569e6:	b005      	add	sp, #20
100569e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

100569ec <GAT_srv_check_client_support_feature>:
100569ec:	b570      	push	{r4, r5, r6, lr}
100569ee:	b086      	sub	sp, #24
100569f0:	4614      	mov	r4, r2
100569f2:	460e      	mov	r6, r1
100569f4:	4605      	mov	r5, r0
100569f6:	a801      	add	r0, sp, #4
100569f8:	4910      	ldr	r1, [pc, #64]	@ (10056a3c <__arm_cp.24_0>)
100569fa:	2214      	movs	r2, #20
100569fc:	f010 fd0d 	bl	1006741a <__aeabi_memcpy>
10056a00:	2e00      	cmp	r6, #0
10056a02:	d107      	bne.n	10056a14 <GAT_srv_check_client_support_feature+0x28>
10056a04:	2001      	movs	r0, #1
10056a06:	490e      	ldr	r1, [pc, #56]	@ (10056a40 <__arm_cp.24_1>)
10056a08:	aa01      	add	r2, sp, #4
10056a0a:	f7ff ffcf 	bl	100569ac <GAT_srv_find_by_type_attr_p>
10056a0e:	4606      	mov	r6, r0
10056a10:	2800      	cmp	r0, #0
10056a12:	d010      	beq.n	10056a36 <GAT_srv_check_client_support_feature+0x4a>
10056a14:	4628      	mov	r0, r5
10056a16:	f7fd fff1 	bl	100549fc <GAT_att_cmn_get_conn_index>
10056a1a:	6871      	ldr	r1, [r6, #4]
10056a1c:	6a09      	ldr	r1, [r1, #32]
10056a1e:	688b      	ldr	r3, [r1, #8]
10056a20:	4908      	ldr	r1, [pc, #32]	@ (10056a44 <__arm_cp.24_2>)
10056a22:	7ac9      	ldrb	r1, [r1, #11]
10056a24:	0849      	lsrs	r1, r1, #1
10056a26:	1c4a      	adds	r2, r1, #1
10056a28:	2104      	movs	r1, #4
10056a2a:	f7ff febb 	bl	100567a4 <GAT_srv_get_zip_val>
10056a2e:	4220      	tst	r0, r4
10056a30:	d001      	beq.n	10056a36 <GAT_srv_check_client_support_feature+0x4a>
10056a32:	2000      	movs	r0, #0
10056a34:	e000      	b.n	10056a38 <GAT_srv_check_client_support_feature+0x4c>
10056a36:	2081      	movs	r0, #129	@ 0x81
10056a38:	b006      	add	sp, #24
10056a3a:	bd70      	pop	{r4, r5, r6, pc}

10056a3c <__arm_cp.24_0>:
10056a3c:	10069fdc 	.word	0x10069fdc

10056a40 <__arm_cp.24_1>:
10056a40:	0000ffff 	.word	0x0000ffff

10056a44 <__arm_cp.24_2>:
10056a44:	20001108 	.word	0x20001108

10056a48 <GAT_srv_get_attribute_handle>:
10056a48:	b580      	push	{r7, lr}
10056a4a:	f00d fe49 	bl	100646e0 <GAT_att_db_find_by_def>
10056a4e:	2800      	cmp	r0, #0
10056a50:	d001      	beq.n	10056a56 <GAT_srv_get_attribute_handle+0xe>
10056a52:	8840      	ldrh	r0, [r0, #2]
10056a54:	bd80      	pop	{r7, pc}
10056a56:	2000      	movs	r0, #0
10056a58:	bd80      	pop	{r7, pc}
	...

10056a5c <GAT_srv_get_cccd_attr_p>:
10056a5c:	b570      	push	{r4, r5, r6, lr}
10056a5e:	b08a      	sub	sp, #40	@ 0x28
10056a60:	4605      	mov	r5, r0
10056a62:	a805      	add	r0, sp, #20
10056a64:	a110      	add	r1, pc, #64	@ (adr r1, 10056aa8 <GAT_srv_get_cccd_attr_p+0x4c>)
10056a66:	2214      	movs	r2, #20
10056a68:	f010 fcd7 	bl	1006741a <__aeabi_memcpy>
10056a6c:	7828      	ldrb	r0, [r5, #0]
10056a6e:	21fe      	movs	r1, #254	@ 0xfe
10056a70:	4001      	ands	r1, r0
10056a72:	2400      	movs	r4, #0
10056a74:	2902      	cmp	r1, #2
10056a76:	d114      	bne.n	10056aa2 <GAT_srv_get_cccd_attr_p+0x46>
10056a78:	4628      	mov	r0, r5
10056a7a:	f00d fe69 	bl	10064750 <GAT_att_db_get_next>
10056a7e:	4605      	mov	r5, r0
10056a80:	2800      	cmp	r0, #0
10056a82:	d00e      	beq.n	10056aa2 <GAT_srv_get_cccd_attr_p+0x46>
10056a84:	7828      	ldrb	r0, [r5, #0]
10056a86:	2802      	cmp	r0, #2
10056a88:	d00b      	beq.n	10056aa2 <GAT_srv_get_cccd_attr_p+0x46>
10056a8a:	466e      	mov	r6, sp
10056a8c:	4628      	mov	r0, r5
10056a8e:	4631      	mov	r1, r6
10056a90:	f7ff fc1c 	bl	100562cc <GAT_srv_get_attr_type>
10056a94:	a805      	add	r0, sp, #20
10056a96:	4631      	mov	r1, r6
10056a98:	f00b fe9f 	bl	100627da <UUID_cmp>
10056a9c:	2800      	cmp	r0, #0
10056a9e:	d1eb      	bne.n	10056a78 <GAT_srv_get_cccd_attr_p+0x1c>
10056aa0:	462c      	mov	r4, r5
10056aa2:	4620      	mov	r0, r4
10056aa4:	b00a      	add	sp, #40	@ 0x28
10056aa6:	bd70      	pop	{r4, r5, r6, pc}
10056aa8:	5f9b34fb 	.word	0x5f9b34fb
10056aac:	80000080 	.word	0x80000080
10056ab0:	00001000 	.word	0x00001000
10056ab4:	00002902 	.word	0x00002902
10056ab8:	00000010 	.word	0x00000010

10056abc <GAT_srv_get_cccd_val>:
10056abc:	b510      	push	{r4, lr}
10056abe:	460c      	mov	r4, r1
10056ac0:	f7fd ff9c 	bl	100549fc <GAT_att_cmn_get_conn_index>
10056ac4:	6861      	ldr	r1, [r4, #4]
10056ac6:	6989      	ldr	r1, [r1, #24]
10056ac8:	688b      	ldr	r3, [r1, #8]
10056aca:	888a      	ldrh	r2, [r1, #4]
10056acc:	2102      	movs	r1, #2
10056ace:	f7ff fe69 	bl	100567a4 <GAT_srv_get_zip_val>
10056ad2:	bd10      	pop	{r4, pc}

10056ad4 <GAT_srv_aes_cmac_append>:
10056ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
10056ad6:	b085      	sub	sp, #20
10056ad8:	9203      	str	r2, [sp, #12]
10056ada:	460c      	mov	r4, r1
10056adc:	2101      	movs	r1, #1
10056ade:	0209      	lsls	r1, r1, #8
10056ae0:	1841      	adds	r1, r0, r1
10056ae2:	9104      	str	r1, [sp, #16]
10056ae4:	9002      	str	r0, [sp, #8]
10056ae6:	30e0      	adds	r0, #224	@ 0xe0
10056ae8:	9001      	str	r0, [sp, #4]
10056aea:	0420      	lsls	r0, r4, #16
10056aec:	d023      	beq.n	10056b36 <GAT_srv_aes_cmac_append+0x62>
10056aee:	9804      	ldr	r0, [sp, #16]
10056af0:	8800      	ldrh	r0, [r0, #0]
10056af2:	2810      	cmp	r0, #16
10056af4:	d107      	bne.n	10056b06 <GAT_srv_aes_cmac_append+0x32>
10056af6:	2210      	movs	r2, #16
10056af8:	9802      	ldr	r0, [sp, #8]
10056afa:	9901      	ldr	r1, [sp, #4]
10056afc:	f7ef fb35 	bl	1004616a <BLEPLAT_AesCMACEncryptAppend>
10056b00:	2000      	movs	r0, #0
10056b02:	9904      	ldr	r1, [sp, #16]
10056b04:	8008      	strh	r0, [r1, #0]
10056b06:	2110      	movs	r1, #16
10056b08:	1a0d      	subs	r5, r1, r0
10056b0a:	b2a9      	uxth	r1, r5
10056b0c:	b2a2      	uxth	r2, r4
10056b0e:	4291      	cmp	r1, r2
10056b10:	d300      	bcc.n	10056b14 <GAT_srv_aes_cmac_append+0x40>
10056b12:	4625      	mov	r5, r4
10056b14:	b2af      	uxth	r7, r5
10056b16:	9902      	ldr	r1, [sp, #8]
10056b18:	1808      	adds	r0, r1, r0
10056b1a:	30e0      	adds	r0, #224	@ 0xe0
10056b1c:	9e03      	ldr	r6, [sp, #12]
10056b1e:	4631      	mov	r1, r6
10056b20:	463a      	mov	r2, r7
10056b22:	f7ef fa97 	bl	10046054 <BLEPLAT_MemCpy>
10056b26:	9904      	ldr	r1, [sp, #16]
10056b28:	8808      	ldrh	r0, [r1, #0]
10056b2a:	1828      	adds	r0, r5, r0
10056b2c:	8008      	strh	r0, [r1, #0]
10056b2e:	1b64      	subs	r4, r4, r5
10056b30:	19f6      	adds	r6, r6, r7
10056b32:	9603      	str	r6, [sp, #12]
10056b34:	e7d9      	b.n	10056aea <GAT_srv_aes_cmac_append+0x16>
10056b36:	b005      	add	sp, #20
10056b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10056b3c <GAT_srv_add_service>:
10056b3c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10056b3e:	4604      	mov	r4, r0
10056b40:	f000 f89c 	bl	10056c7c <GAT_srv_db_update_allowed>
10056b44:	250c      	movs	r5, #12
10056b46:	2800      	cmp	r0, #0
10056b48:	d025      	beq.n	10056b96 <GAT_srv_add_service+0x5a>
10056b4a:	2612      	movs	r6, #18
10056b4c:	2c00      	cmp	r4, #0
10056b4e:	d023      	beq.n	10056b98 <GAT_srv_add_service+0x5c>
10056b50:	7d20      	ldrb	r0, [r4, #20]
10056b52:	1e40      	subs	r0, r0, #1
10056b54:	2801      	cmp	r0, #1
10056b56:	d81f      	bhi.n	10056b98 <GAT_srv_add_service+0x5c>
10056b58:	7c20      	ldrb	r0, [r4, #16]
10056b5a:	2880      	cmp	r0, #128	@ 0x80
10056b5c:	d01e      	beq.n	10056b9c <GAT_srv_add_service+0x60>
10056b5e:	2810      	cmp	r0, #16
10056b60:	d11a      	bne.n	10056b98 <GAT_srv_add_service+0x5c>
10056b62:	89a0      	ldrh	r0, [r4, #12]
10056b64:	2101      	movs	r1, #1
10056b66:	4388      	bics	r0, r1
10056b68:	2103      	movs	r1, #3
10056b6a:	02c9      	lsls	r1, r1, #11
10056b6c:	4288      	cmp	r0, r1
10056b6e:	d115      	bne.n	10056b9c <GAT_srv_add_service+0x60>
10056b70:	2001      	movs	r0, #1
10056b72:	f00d fd8b 	bl	1006468c <GAT_att_db_find_from_handle>
10056b76:	2800      	cmp	r0, #0
10056b78:	d010      	beq.n	10056b9c <GAT_srv_add_service+0x60>
10056b7a:	7801      	ldrb	r1, [r0, #0]
10056b7c:	2900      	cmp	r1, #0
10056b7e:	d107      	bne.n	10056b90 <GAT_srv_add_service+0x54>
10056b80:	6841      	ldr	r1, [r0, #4]
10056b82:	7c0a      	ldrb	r2, [r1, #16]
10056b84:	2a10      	cmp	r2, #16
10056b86:	d103      	bne.n	10056b90 <GAT_srv_add_service+0x54>
10056b88:	8989      	ldrh	r1, [r1, #12]
10056b8a:	89a2      	ldrh	r2, [r4, #12]
10056b8c:	428a      	cmp	r2, r1
10056b8e:	d002      	beq.n	10056b96 <GAT_srv_add_service+0x5a>
10056b90:	f00d fdde 	bl	10064750 <GAT_att_db_get_next>
10056b94:	e7ef      	b.n	10056b76 <GAT_srv_add_service+0x3a>
10056b96:	462e      	mov	r6, r5
10056b98:	4630      	mov	r0, r6
10056b9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10056b9c:	2000      	movs	r0, #0
10056b9e:	f00d fe6d 	bl	1006487c <GAT_att_db_find_last_attr_of_type>
10056ba2:	2800      	cmp	r0, #0
10056ba4:	d006      	beq.n	10056bb4 <GAT_srv_add_service+0x78>
10056ba6:	6841      	ldr	r1, [r0, #4]
10056ba8:	8ac9      	ldrh	r1, [r1, #22]
10056baa:	2900      	cmp	r1, #0
10056bac:	d004      	beq.n	10056bb8 <GAT_srv_add_service+0x7c>
10056bae:	8840      	ldrh	r0, [r0, #2]
10056bb0:	1840      	adds	r0, r0, r1
10056bb2:	e004      	b.n	10056bbe <GAT_srv_add_service+0x82>
10056bb4:	2001      	movs	r0, #1
10056bb6:	e002      	b.n	10056bbe <GAT_srv_add_service+0x82>
10056bb8:	f00d fe0e 	bl	100647d8 <GAT_att_db_get_last_handle>
10056bbc:	1c40      	adds	r0, r0, #1
10056bbe:	b282      	uxth	r2, r0
10056bc0:	2600      	movs	r6, #0
10056bc2:	4630      	mov	r0, r6
10056bc4:	4631      	mov	r1, r6
10056bc6:	4623      	mov	r3, r4
10056bc8:	f00d fce4 	bl	10064594 <GAT_att_db_insert>
10056bcc:	2800      	cmp	r0, #0
10056bce:	d020      	beq.n	10056c12 <GAT_srv_add_service+0xd6>
10056bd0:	43f7      	mvns	r7, r6
10056bd2:	8ae1      	ldrh	r1, [r4, #22]
10056bd4:	1e49      	subs	r1, r1, #1
10056bd6:	9102      	str	r1, [sp, #8]
10056bd8:	9000      	str	r0, [sp, #0]
10056bda:	9401      	str	r4, [sp, #4]
10056bdc:	1c7f      	adds	r7, r7, #1
10056bde:	7e21      	ldrb	r1, [r4, #24]
10056be0:	428f      	cmp	r7, r1
10056be2:	d218      	bcs.n	10056c16 <GAT_srv_add_service+0xda>
10056be4:	8ae1      	ldrh	r1, [r4, #22]
10056be6:	2900      	cmp	r1, #0
10056be8:	d004      	beq.n	10056bf4 <GAT_srv_add_service+0xb8>
10056bea:	9a02      	ldr	r2, [sp, #8]
10056bec:	0411      	lsls	r1, r2, #16
10056bee:	d03a      	beq.n	10056c66 <GAT_srv_add_service+0x12a>
10056bf0:	1e52      	subs	r2, r2, #1
10056bf2:	9202      	str	r2, [sp, #8]
10056bf4:	1d35      	adds	r5, r6, #4
10056bf6:	1c40      	adds	r0, r0, #1
10056bf8:	9c01      	ldr	r4, [sp, #4]
10056bfa:	69e1      	ldr	r1, [r4, #28]
10056bfc:	598b      	ldr	r3, [r1, r6]
10056bfe:	b282      	uxth	r2, r0
10056c00:	2001      	movs	r0, #1
10056c02:	2100      	movs	r1, #0
10056c04:	f00d fcc6 	bl	10064594 <GAT_att_db_insert>
10056c08:	2800      	cmp	r0, #0
10056c0a:	462e      	mov	r6, r5
10056c0c:	d1e6      	bne.n	10056bdc <GAT_srv_add_service+0xa0>
10056c0e:	2687      	movs	r6, #135	@ 0x87
10056c10:	e02e      	b.n	10056c70 <GAT_srv_add_service+0x134>
10056c12:	2687      	movs	r6, #135	@ 0x87
10056c14:	e7c0      	b.n	10056b98 <GAT_srv_add_service+0x5c>
10056c16:	4818      	ldr	r0, [pc, #96]	@ (10056c78 <__arm_cp.0_0>)
10056c18:	6800      	ldr	r0, [r0, #0]
10056c1a:	215c      	movs	r1, #92	@ 0x5c
10056c1c:	5c42      	ldrb	r2, [r0, r1]
10056c1e:	2302      	movs	r3, #2
10056c20:	4313      	orrs	r3, r2
10056c22:	5443      	strb	r3, [r0, r1]
10056c24:	200a      	movs	r0, #10
10056c26:	f00b fc47 	bl	100624b8 <tsk_notify_idx>
10056c2a:	f7ec ff76 	bl	10043b1a <BLE_STACK_ProcessRequest>
10056c2e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
10056c30:	2600      	movs	r6, #0
10056c32:	2800      	cmp	r0, #0
10056c34:	d0b0      	beq.n	10056b98 <GAT_srv_add_service+0x5c>
10056c36:	2020      	movs	r0, #32
10056c38:	5c20      	ldrb	r0, [r4, r0]
10056c3a:	2800      	cmp	r0, #0
10056c3c:	d0ac      	beq.n	10056b98 <GAT_srv_add_service+0x5c>
10056c3e:	4621      	mov	r1, r4
10056c40:	3120      	adds	r1, #32
10056c42:	9102      	str	r1, [sp, #8]
10056c44:	2500      	movs	r5, #0
10056c46:	462f      	mov	r7, r5
10056c48:	9501      	str	r5, [sp, #4]
10056c4a:	4285      	cmp	r5, r0
10056c4c:	9900      	ldr	r1, [sp, #0]
10056c4e:	d20c      	bcs.n	10056c6a <GAT_srv_add_service+0x12e>
10056c50:	6a60      	ldr	r0, [r4, #36]	@ 0x24
10056c52:	19c0      	adds	r0, r0, r7
10056c54:	f000 f822 	bl	10056c9c <GAT_srv_add_characteristic>
10056c58:	2800      	cmp	r0, #0
10056c5a:	d108      	bne.n	10056c6e <GAT_srv_add_service+0x132>
10056c5c:	3724      	adds	r7, #36	@ 0x24
10056c5e:	9802      	ldr	r0, [sp, #8]
10056c60:	7800      	ldrb	r0, [r0, #0]
10056c62:	1c6d      	adds	r5, r5, #1
10056c64:	e7f1      	b.n	10056c4a <GAT_srv_add_service+0x10e>
10056c66:	2612      	movs	r6, #18
10056c68:	e002      	b.n	10056c70 <GAT_srv_add_service+0x134>
10056c6a:	9e01      	ldr	r6, [sp, #4]
10056c6c:	e794      	b.n	10056b98 <GAT_srv_add_service+0x5c>
10056c6e:	4606      	mov	r6, r0
10056c70:	9800      	ldr	r0, [sp, #0]
10056c72:	f000 f8a3 	bl	10056dbc <GAT_srv_rm_service>
10056c76:	e78f      	b.n	10056b98 <GAT_srv_add_service+0x5c>

10056c78 <__arm_cp.0_0>:
10056c78:	200010ac 	.word	0x200010ac

10056c7c <GAT_srv_db_update_allowed>:
10056c7c:	b510      	push	{r4, lr}
10056c7e:	f7fe faab 	bl	100551d8 <GAT_att_srv_request_user_pending>
10056c82:	2400      	movs	r4, #0
10056c84:	2800      	cmp	r0, #0
10056c86:	d106      	bne.n	10056c96 <GAT_srv_db_update_allowed+0x1a>
10056c88:	f7fe fa94 	bl	100551b4 <GAT_att_srv_confirmation_pending>
10056c8c:	2800      	cmp	r0, #0
10056c8e:	d102      	bne.n	10056c96 <GAT_srv_db_update_allowed+0x1a>
10056c90:	f7fe faba 	bl	10055208 <GAT_att_srv_flush_user_pending_list>
10056c94:	2401      	movs	r4, #1
10056c96:	4620      	mov	r0, r4
10056c98:	bd10      	pop	{r4, pc}
	...

10056c9c <GAT_srv_add_characteristic>:
10056c9c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10056c9e:	460e      	mov	r6, r1
10056ca0:	4604      	mov	r4, r0
10056ca2:	f7ff ffeb 	bl	10056c7c <GAT_srv_db_update_allowed>
10056ca6:	2800      	cmp	r0, #0
10056ca8:	d066      	beq.n	10056d78 <GAT_srv_add_characteristic+0xdc>
10056caa:	2512      	movs	r5, #18
10056cac:	2c00      	cmp	r4, #0
10056cae:	d064      	beq.n	10056d7a <GAT_srv_add_characteristic+0xde>
10056cb0:	7d20      	ldrb	r0, [r4, #20]
10056cb2:	2880      	cmp	r0, #128	@ 0x80
10056cb4:	d013      	beq.n	10056cde <GAT_srv_add_characteristic+0x42>
10056cb6:	2810      	cmp	r0, #16
10056cb8:	d15f      	bne.n	10056d7a <GAT_srv_add_characteristic+0xde>
10056cba:	8a20      	ldrh	r0, [r4, #16]
10056cbc:	493c      	ldr	r1, [pc, #240]	@ (10056db0 <__arm_cp.2_0>)
10056cbe:	4288      	cmp	r0, r1
10056cc0:	d10d      	bne.n	10056cde <GAT_srv_add_characteristic+0x42>
10056cc2:	6a20      	ldr	r0, [r4, #32]
10056cc4:	2800      	cmp	r0, #0
10056cc6:	d058      	beq.n	10056d7a <GAT_srv_add_characteristic+0xde>
10056cc8:	8882      	ldrh	r2, [r0, #4]
10056cca:	493a      	ldr	r1, [pc, #232]	@ (10056db4 <__arm_cp.2_1>)
10056ccc:	7ac9      	ldrb	r1, [r1, #11]
10056cce:	0849      	lsrs	r1, r1, #1
10056cd0:	1c49      	adds	r1, r1, #1
10056cd2:	428a      	cmp	r2, r1
10056cd4:	d351      	bcc.n	10056d7a <GAT_srv_add_characteristic+0xde>
10056cd6:	6880      	ldr	r0, [r0, #8]
10056cd8:	2100      	movs	r1, #0
10056cda:	f7ef f9cb 	bl	10046074 <BLEPLAT_MemSet>
10056cde:	78a0      	ldrb	r0, [r4, #2]
10056ce0:	2124      	movs	r1, #36	@ 0x24
10056ce2:	4208      	tst	r0, r1
10056ce4:	d003      	beq.n	10056cee <GAT_srv_add_characteristic+0x52>
10056ce6:	7860      	ldrb	r0, [r4, #1]
10056ce8:	1fc0      	subs	r0, r0, #7
10056cea:	2809      	cmp	r0, #9
10056cec:	d845      	bhi.n	10056d7a <GAT_srv_add_characteristic+0xde>
10056cee:	4630      	mov	r0, r6
10056cf0:	f00d fca4 	bl	1006463c <GAT_att_db_find_by_handle>
10056cf4:	2800      	cmp	r0, #0
10056cf6:	d040      	beq.n	10056d7a <GAT_srv_add_characteristic+0xde>
10056cf8:	4606      	mov	r6, r0
10056cfa:	7800      	ldrb	r0, [r0, #0]
10056cfc:	2800      	cmp	r0, #0
10056cfe:	d13c      	bne.n	10056d7a <GAT_srv_add_characteristic+0xde>
10056d00:	7e20      	ldrb	r0, [r4, #24]
10056d02:	1c81      	adds	r1, r0, #2
10056d04:	4630      	mov	r0, r6
10056d06:	f000 f883 	bl	10056e10 <GAT_srv_check_group_size>
10056d0a:	4605      	mov	r5, r0
10056d0c:	2800      	cmp	r0, #0
10056d0e:	d134      	bne.n	10056d7a <GAT_srv_add_characteristic+0xde>
10056d10:	4630      	mov	r0, r6
10056d12:	f7ff fb03 	bl	1005631c <GAT_srv_get_att_group_end_handle>
10056d16:	4605      	mov	r5, r0
10056d18:	f00d fc90 	bl	1006463c <GAT_att_db_find_by_handle>
10056d1c:	4601      	mov	r1, r0
10056d1e:	1c68      	adds	r0, r5, #1
10056d20:	b286      	uxth	r6, r0
10056d22:	2702      	movs	r7, #2
10056d24:	4638      	mov	r0, r7
10056d26:	4632      	mov	r2, r6
10056d28:	4623      	mov	r3, r4
10056d2a:	f00d fc33 	bl	10064594 <GAT_att_db_insert>
10056d2e:	42b0      	cmp	r0, r6
10056d30:	d125      	bne.n	10056d7e <GAT_srv_add_characteristic+0xe2>
10056d32:	4630      	mov	r0, r6
10056d34:	f00d fc82 	bl	1006463c <GAT_att_db_find_by_handle>
10056d38:	4601      	mov	r1, r0
10056d3a:	1ca8      	adds	r0, r5, #2
10056d3c:	b282      	uxth	r2, r0
10056d3e:	2003      	movs	r0, #3
10056d40:	4623      	mov	r3, r4
10056d42:	f00d fc27 	bl	10064594 <GAT_att_db_insert>
10056d46:	2800      	cmp	r0, #0
10056d48:	d029      	beq.n	10056d9e <GAT_srv_add_characteristic+0x102>
10056d4a:	9701      	str	r7, [sp, #4]
10056d4c:	9602      	str	r6, [sp, #8]
10056d4e:	69e0      	ldr	r0, [r4, #28]
10056d50:	2800      	cmp	r0, #0
10056d52:	d016      	beq.n	10056d82 <GAT_srv_add_characteristic+0xe6>
10056d54:	7e20      	ldrb	r0, [r4, #24]
10056d56:	2800      	cmp	r0, #0
10056d58:	d013      	beq.n	10056d82 <GAT_srv_add_characteristic+0xe6>
10056d5a:	2600      	movs	r6, #0
10056d5c:	4637      	mov	r7, r6
10056d5e:	4287      	cmp	r7, r0
10056d60:	d20f      	bcs.n	10056d82 <GAT_srv_add_characteristic+0xe6>
10056d62:	69e0      	ldr	r0, [r4, #28]
10056d64:	1980      	adds	r0, r0, r6
10056d66:	9902      	ldr	r1, [sp, #8]
10056d68:	f000 f86c 	bl	10056e44 <GAT_srv_add_char_descriptor>
10056d6c:	2800      	cmp	r0, #0
10056d6e:	d118      	bne.n	10056da2 <GAT_srv_add_characteristic+0x106>
10056d70:	361c      	adds	r6, #28
10056d72:	7e20      	ldrb	r0, [r4, #24]
10056d74:	1c7f      	adds	r7, r7, #1
10056d76:	e7f2      	b.n	10056d5e <GAT_srv_add_characteristic+0xc2>
10056d78:	250c      	movs	r5, #12
10056d7a:	4628      	mov	r0, r5
10056d7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10056d7e:	2587      	movs	r5, #135	@ 0x87
10056d80:	e7fb      	b.n	10056d7a <GAT_srv_add_characteristic+0xde>
10056d82:	480d      	ldr	r0, [pc, #52]	@ (10056db8 <__arm_cp.2_2>)
10056d84:	6800      	ldr	r0, [r0, #0]
10056d86:	215c      	movs	r1, #92	@ 0x5c
10056d88:	5c42      	ldrb	r2, [r0, r1]
10056d8a:	9b01      	ldr	r3, [sp, #4]
10056d8c:	431a      	orrs	r2, r3
10056d8e:	5442      	strb	r2, [r0, r1]
10056d90:	200a      	movs	r0, #10
10056d92:	f00b fb91 	bl	100624b8 <tsk_notify_idx>
10056d96:	f7ec fec0 	bl	10043b1a <BLE_STACK_ProcessRequest>
10056d9a:	2500      	movs	r5, #0
10056d9c:	e7ed      	b.n	10056d7a <GAT_srv_add_characteristic+0xde>
10056d9e:	2587      	movs	r5, #135	@ 0x87
10056da0:	e001      	b.n	10056da6 <GAT_srv_add_characteristic+0x10a>
10056da2:	4605      	mov	r5, r0
10056da4:	9e02      	ldr	r6, [sp, #8]
10056da6:	4630      	mov	r0, r6
10056da8:	f000 f8d4 	bl	10056f54 <GAT_srv_rm_characteristic>
10056dac:	e7e5      	b.n	10056d7a <GAT_srv_add_characteristic+0xde>
10056dae:	46c0      	nop			@ (mov r8, r8)

10056db0 <__arm_cp.2_0>:
10056db0:	00002b29 	.word	0x00002b29

10056db4 <__arm_cp.2_1>:
10056db4:	20001108 	.word	0x20001108

10056db8 <__arm_cp.2_2>:
10056db8:	200010ac 	.word	0x200010ac

10056dbc <GAT_srv_rm_service>:
10056dbc:	b510      	push	{r4, lr}
10056dbe:	4604      	mov	r4, r0
10056dc0:	f7ff ff5c 	bl	10056c7c <GAT_srv_db_update_allowed>
10056dc4:	2800      	cmp	r0, #0
10056dc6:	d00a      	beq.n	10056dde <GAT_srv_rm_service+0x22>
10056dc8:	4620      	mov	r0, r4
10056dca:	f00d fc37 	bl	1006463c <GAT_att_db_find_by_handle>
10056dce:	4601      	mov	r1, r0
10056dd0:	2012      	movs	r0, #18
10056dd2:	2900      	cmp	r1, #0
10056dd4:	d002      	beq.n	10056ddc <GAT_srv_rm_service+0x20>
10056dd6:	780a      	ldrb	r2, [r1, #0]
10056dd8:	2a00      	cmp	r2, #0
10056dda:	d002      	beq.n	10056de2 <GAT_srv_rm_service+0x26>
10056ddc:	bd10      	pop	{r4, pc}
10056dde:	200c      	movs	r0, #12
10056de0:	bd10      	pop	{r4, pc}
10056de2:	4608      	mov	r0, r1
10056de4:	f00d fcc8 	bl	10064778 <GAT_att_db_get_last_group_handle>
10056de8:	4601      	mov	r1, r0
10056dea:	4620      	mov	r0, r4
10056dec:	f00d fd04 	bl	100647f8 <GAT_att_db_rm_att_range>
10056df0:	4806      	ldr	r0, [pc, #24]	@ (10056e0c <__arm_cp.3_0>)
10056df2:	6800      	ldr	r0, [r0, #0]
10056df4:	215c      	movs	r1, #92	@ 0x5c
10056df6:	5c42      	ldrb	r2, [r0, r1]
10056df8:	2302      	movs	r3, #2
10056dfa:	4313      	orrs	r3, r2
10056dfc:	5443      	strb	r3, [r0, r1]
10056dfe:	200a      	movs	r0, #10
10056e00:	f00b fb5a 	bl	100624b8 <tsk_notify_idx>
10056e04:	f7ec fe89 	bl	10043b1a <BLE_STACK_ProcessRequest>
10056e08:	2000      	movs	r0, #0
10056e0a:	bd10      	pop	{r4, pc}

10056e0c <__arm_cp.3_0>:
10056e0c:	200010ac 	.word	0x200010ac

10056e10 <GAT_srv_check_group_size>:
10056e10:	b5b0      	push	{r4, r5, r7, lr}
10056e12:	460d      	mov	r5, r1
10056e14:	4604      	mov	r4, r0
10056e16:	f7ff fa81 	bl	1005631c <GAT_srv_get_att_group_end_handle>
10056e1a:	6861      	ldr	r1, [r4, #4]
10056e1c:	8ac9      	ldrh	r1, [r1, #22]
10056e1e:	2900      	cmp	r1, #0
10056e20:	d008      	beq.n	10056e34 <GAT_srv_check_group_size+0x24>
10056e22:	43c0      	mvns	r0, r0
10056e24:	1808      	adds	r0, r1, r0
10056e26:	8861      	ldrh	r1, [r4, #2]
10056e28:	1840      	adds	r0, r0, r1
10056e2a:	b280      	uxth	r0, r0
10056e2c:	42a8      	cmp	r0, r5
10056e2e:	d306      	bcc.n	10056e3e <GAT_srv_check_group_size+0x2e>
10056e30:	2000      	movs	r0, #0
10056e32:	bdb0      	pop	{r4, r5, r7, pc}
10056e34:	2000      	movs	r0, #0
10056e36:	f00d fd21 	bl	1006487c <GAT_att_db_find_last_attr_of_type>
10056e3a:	42a0      	cmp	r0, r4
10056e3c:	d0f8      	beq.n	10056e30 <GAT_srv_check_group_size+0x20>
10056e3e:	200c      	movs	r0, #12
10056e40:	bdb0      	pop	{r4, r5, r7, pc}
	...

10056e44 <GAT_srv_add_char_descriptor>:
10056e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10056e46:	460e      	mov	r6, r1
10056e48:	4604      	mov	r4, r0
10056e4a:	f7ff ff17 	bl	10056c7c <GAT_srv_db_update_allowed>
10056e4e:	2800      	cmp	r0, #0
10056e50:	d075      	beq.n	10056f3e <GAT_srv_add_char_descriptor+0xfa>
10056e52:	2512      	movs	r5, #18
10056e54:	2c00      	cmp	r4, #0
10056e56:	d073      	beq.n	10056f40 <GAT_srv_add_char_descriptor+0xfc>
10056e58:	7d20      	ldrb	r0, [r4, #20]
10056e5a:	2880      	cmp	r0, #128	@ 0x80
10056e5c:	d001      	beq.n	10056e62 <GAT_srv_add_char_descriptor+0x1e>
10056e5e:	2810      	cmp	r0, #16
10056e60:	d16e      	bne.n	10056f40 <GAT_srv_add_char_descriptor+0xfc>
10056e62:	2810      	cmp	r0, #16
10056e64:	d108      	bne.n	10056e78 <GAT_srv_add_char_descriptor+0x34>
10056e66:	8a21      	ldrh	r1, [r4, #16]
10056e68:	2229      	movs	r2, #41	@ 0x29
10056e6a:	0212      	lsls	r2, r2, #8
10056e6c:	1c92      	adds	r2, r2, #2
10056e6e:	4291      	cmp	r1, r2
10056e70:	d102      	bne.n	10056e78 <GAT_srv_add_char_descriptor+0x34>
10056e72:	69a1      	ldr	r1, [r4, #24]
10056e74:	2900      	cmp	r1, #0
10056e76:	d063      	beq.n	10056f40 <GAT_srv_add_char_descriptor+0xfc>
10056e78:	78a1      	ldrb	r1, [r4, #2]
10056e7a:	2224      	movs	r2, #36	@ 0x24
10056e7c:	4211      	tst	r1, r2
10056e7e:	d003      	beq.n	10056e88 <GAT_srv_add_char_descriptor+0x44>
10056e80:	7862      	ldrb	r2, [r4, #1]
10056e82:	1fd2      	subs	r2, r2, #7
10056e84:	2a09      	cmp	r2, #9
10056e86:	d85b      	bhi.n	10056f40 <GAT_srv_add_char_descriptor+0xfc>
10056e88:	2810      	cmp	r0, #16
10056e8a:	d115      	bne.n	10056eb8 <GAT_srv_add_char_descriptor+0x74>
10056e8c:	8a20      	ldrh	r0, [r4, #16]
10056e8e:	4a2f      	ldr	r2, [pc, #188]	@ (10056f4c <__arm_cp.7_0>)
10056e90:	1882      	adds	r2, r0, r2
10056e92:	2a05      	cmp	r2, #5
10056e94:	d810      	bhi.n	10056eb8 <GAT_srv_add_char_descriptor+0x74>
10056e96:	2301      	movs	r3, #1
10056e98:	4093      	lsls	r3, r2
10056e9a:	2231      	movs	r2, #49	@ 0x31
10056e9c:	4213      	tst	r3, r2
10056e9e:	d00b      	beq.n	10056eb8 <GAT_srv_add_char_descriptor+0x74>
10056ea0:	7822      	ldrb	r2, [r4, #0]
10056ea2:	2a01      	cmp	r2, #1
10056ea4:	d14c      	bne.n	10056f40 <GAT_srv_add_char_descriptor+0xfc>
10056ea6:	2900      	cmp	r1, #0
10056ea8:	d14a      	bne.n	10056f40 <GAT_srv_add_char_descriptor+0xfc>
10056eaa:	2129      	movs	r1, #41	@ 0x29
10056eac:	0209      	lsls	r1, r1, #8
10056eae:	4288      	cmp	r0, r1
10056eb0:	d102      	bne.n	10056eb8 <GAT_srv_add_char_descriptor+0x74>
10056eb2:	69a0      	ldr	r0, [r4, #24]
10056eb4:	2800      	cmp	r0, #0
10056eb6:	d043      	beq.n	10056f40 <GAT_srv_add_char_descriptor+0xfc>
10056eb8:	4630      	mov	r0, r6
10056eba:	f00d fbbf 	bl	1006463c <GAT_att_db_find_by_handle>
10056ebe:	2800      	cmp	r0, #0
10056ec0:	d03e      	beq.n	10056f40 <GAT_srv_add_char_descriptor+0xfc>
10056ec2:	4607      	mov	r7, r0
10056ec4:	7800      	ldrb	r0, [r0, #0]
10056ec6:	2802      	cmp	r0, #2
10056ec8:	d13a      	bne.n	10056f40 <GAT_srv_add_char_descriptor+0xfc>
10056eca:	2500      	movs	r5, #0
10056ecc:	4628      	mov	r0, r5
10056ece:	4631      	mov	r1, r6
10056ed0:	f00d fcea 	bl	100648a8 <GAT_att_db_reverse_find_attr_of_type>
10056ed4:	2800      	cmp	r0, #0
10056ed6:	d035      	beq.n	10056f44 <GAT_srv_add_char_descriptor+0x100>
10056ed8:	462e      	mov	r6, r5
10056eda:	2101      	movs	r1, #1
10056edc:	f7ff ff98 	bl	10056e10 <GAT_srv_check_group_size>
10056ee0:	4605      	mov	r5, r0
10056ee2:	2800      	cmp	r0, #0
10056ee4:	d12c      	bne.n	10056f40 <GAT_srv_add_char_descriptor+0xfc>
10056ee6:	4638      	mov	r0, r7
10056ee8:	f7ff fa18 	bl	1005631c <GAT_srv_get_att_group_end_handle>
10056eec:	4605      	mov	r5, r0
10056eee:	f00d fba5 	bl	1006463c <GAT_att_db_find_by_handle>
10056ef2:	4601      	mov	r1, r0
10056ef4:	1c6d      	adds	r5, r5, #1
10056ef6:	b2aa      	uxth	r2, r5
10056ef8:	2004      	movs	r0, #4
10056efa:	4623      	mov	r3, r4
10056efc:	f00d fb4a 	bl	10064594 <GAT_att_db_insert>
10056f00:	4285      	cmp	r5, r0
10056f02:	d121      	bne.n	10056f48 <GAT_srv_add_char_descriptor+0x104>
10056f04:	7d20      	ldrb	r0, [r4, #20]
10056f06:	2810      	cmp	r0, #16
10056f08:	d10b      	bne.n	10056f22 <GAT_srv_add_char_descriptor+0xde>
10056f0a:	8a20      	ldrh	r0, [r4, #16]
10056f0c:	2129      	movs	r1, #41	@ 0x29
10056f0e:	0209      	lsls	r1, r1, #8
10056f10:	1c89      	adds	r1, r1, #2
10056f12:	4288      	cmp	r0, r1
10056f14:	d105      	bne.n	10056f22 <GAT_srv_add_char_descriptor+0xde>
10056f16:	69a0      	ldr	r0, [r4, #24]
10056f18:	8882      	ldrh	r2, [r0, #4]
10056f1a:	6880      	ldr	r0, [r0, #8]
10056f1c:	2100      	movs	r1, #0
10056f1e:	f7ef f8a9 	bl	10046074 <BLEPLAT_MemSet>
10056f22:	480b      	ldr	r0, [pc, #44]	@ (10056f50 <__arm_cp.7_1>)
10056f24:	6800      	ldr	r0, [r0, #0]
10056f26:	215c      	movs	r1, #92	@ 0x5c
10056f28:	5c42      	ldrb	r2, [r0, r1]
10056f2a:	2302      	movs	r3, #2
10056f2c:	4313      	orrs	r3, r2
10056f2e:	5443      	strb	r3, [r0, r1]
10056f30:	200a      	movs	r0, #10
10056f32:	f00b fac1 	bl	100624b8 <tsk_notify_idx>
10056f36:	f7ec fdf0 	bl	10043b1a <BLE_STACK_ProcessRequest>
10056f3a:	4635      	mov	r5, r6
10056f3c:	e000      	b.n	10056f40 <GAT_srv_add_char_descriptor+0xfc>
10056f3e:	250c      	movs	r5, #12
10056f40:	4628      	mov	r0, r5
10056f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10056f44:	2586      	movs	r5, #134	@ 0x86
10056f46:	e7fb      	b.n	10056f40 <GAT_srv_add_char_descriptor+0xfc>
10056f48:	2587      	movs	r5, #135	@ 0x87
10056f4a:	e7f9      	b.n	10056f40 <GAT_srv_add_char_descriptor+0xfc>

10056f4c <__arm_cp.7_0>:
10056f4c:	ffffd700 	.word	0xffffd700

10056f50 <__arm_cp.7_1>:
10056f50:	200010ac 	.word	0x200010ac

10056f54 <GAT_srv_rm_characteristic>:
10056f54:	b510      	push	{r4, lr}
10056f56:	4604      	mov	r4, r0
10056f58:	f7ff fe90 	bl	10056c7c <GAT_srv_db_update_allowed>
10056f5c:	2800      	cmp	r0, #0
10056f5e:	d01e      	beq.n	10056f9e <GAT_srv_rm_characteristic+0x4a>
10056f60:	4620      	mov	r0, r4
10056f62:	f00d fb6b 	bl	1006463c <GAT_att_db_find_by_handle>
10056f66:	4601      	mov	r1, r0
10056f68:	2012      	movs	r0, #18
10056f6a:	2900      	cmp	r1, #0
10056f6c:	d016      	beq.n	10056f9c <GAT_srv_rm_characteristic+0x48>
10056f6e:	780a      	ldrb	r2, [r1, #0]
10056f70:	2a02      	cmp	r2, #2
10056f72:	d113      	bne.n	10056f9c <GAT_srv_rm_characteristic+0x48>
10056f74:	4608      	mov	r0, r1
10056f76:	f00d fbff 	bl	10064778 <GAT_att_db_get_last_group_handle>
10056f7a:	4601      	mov	r1, r0
10056f7c:	4620      	mov	r0, r4
10056f7e:	f00d fc3b 	bl	100647f8 <GAT_att_db_rm_att_range>
10056f82:	4808      	ldr	r0, [pc, #32]	@ (10056fa4 <__arm_cp.8_0>)
10056f84:	6800      	ldr	r0, [r0, #0]
10056f86:	215c      	movs	r1, #92	@ 0x5c
10056f88:	5c42      	ldrb	r2, [r0, r1]
10056f8a:	2302      	movs	r3, #2
10056f8c:	4313      	orrs	r3, r2
10056f8e:	5443      	strb	r3, [r0, r1]
10056f90:	200a      	movs	r0, #10
10056f92:	f00b fa91 	bl	100624b8 <tsk_notify_idx>
10056f96:	f7ec fdc0 	bl	10043b1a <BLE_STACK_ProcessRequest>
10056f9a:	2000      	movs	r0, #0
10056f9c:	bd10      	pop	{r4, pc}
10056f9e:	200c      	movs	r0, #12
10056fa0:	bd10      	pop	{r4, pc}
10056fa2:	46c0      	nop			@ (mov r8, r8)

10056fa4 <__arm_cp.8_0>:
10056fa4:	200010ac 	.word	0x200010ac

10056fa8 <GAT_srv_notify>:
10056fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
10056faa:	b085      	sub	sp, #20
10056fac:	9104      	str	r1, [sp, #16]
10056fae:	2412      	movs	r4, #18
10056fb0:	2800      	cmp	r0, #0
10056fb2:	d039      	beq.n	10057028 <GAT_srv_notify+0x80>
10056fb4:	461d      	mov	r5, r3
10056fb6:	4616      	mov	r6, r2
10056fb8:	4607      	mov	r7, r0
10056fba:	2b02      	cmp	r3, #2
10056fbc:	d30a      	bcc.n	10056fd4 <GAT_srv_notify+0x2c>
10056fbe:	2e02      	cmp	r6, #2
10056fc0:	d032      	beq.n	10057028 <GAT_srv_notify+0x80>
10056fc2:	2100      	movs	r1, #0
10056fc4:	2204      	movs	r2, #4
10056fc6:	4638      	mov	r0, r7
10056fc8:	f7ff fd10 	bl	100569ec <GAT_srv_check_client_support_feature>
10056fcc:	2881      	cmp	r0, #129	@ 0x81
10056fce:	d101      	bne.n	10056fd4 <GAT_srv_notify+0x2c>
10056fd0:	240c      	movs	r4, #12
10056fd2:	e029      	b.n	10057028 <GAT_srv_notify+0x80>
10056fd4:	980a      	ldr	r0, [sp, #40]	@ 0x28
10056fd6:	2e02      	cmp	r6, #2
10056fd8:	9003      	str	r0, [sp, #12]
10056fda:	9502      	str	r5, [sp, #8]
10056fdc:	9601      	str	r6, [sp, #4]
10056fde:	d20f      	bcs.n	10057000 <GAT_srv_notify+0x58>
10056fe0:	1c6d      	adds	r5, r5, #1
10056fe2:	4606      	mov	r6, r0
10056fe4:	1e6d      	subs	r5, r5, #1
10056fe6:	d017      	beq.n	10057018 <GAT_srv_notify+0x70>
10056fe8:	8832      	ldrh	r2, [r6, #0]
10056fea:	3608      	adds	r6, #8
10056fec:	2310      	movs	r3, #16
10056fee:	4638      	mov	r0, r7
10056ff0:	9904      	ldr	r1, [sp, #16]
10056ff2:	f000 f81d 	bl	10057030 <GAT_srv_checks_for_notify>
10056ff6:	4604      	mov	r4, r0
10056ff8:	9803      	ldr	r0, [sp, #12]
10056ffa:	2c00      	cmp	r4, #0
10056ffc:	d0f2      	beq.n	10056fe4 <GAT_srv_notify+0x3c>
10056ffe:	e013      	b.n	10057028 <GAT_srv_notify+0x80>
10057000:	2e02      	cmp	r6, #2
10057002:	d111      	bne.n	10057028 <GAT_srv_notify+0x80>
10057004:	8802      	ldrh	r2, [r0, #0]
10057006:	2320      	movs	r3, #32
10057008:	4638      	mov	r0, r7
1005700a:	9904      	ldr	r1, [sp, #16]
1005700c:	f000 f810 	bl	10057030 <GAT_srv_checks_for_notify>
10057010:	4604      	mov	r4, r0
10057012:	9803      	ldr	r0, [sp, #12]
10057014:	2c00      	cmp	r4, #0
10057016:	d107      	bne.n	10057028 <GAT_srv_notify+0x80>
10057018:	9000      	str	r0, [sp, #0]
1005701a:	4638      	mov	r0, r7
1005701c:	9904      	ldr	r1, [sp, #16]
1005701e:	9a01      	ldr	r2, [sp, #4]
10057020:	9b02      	ldr	r3, [sp, #8]
10057022:	f7fd ff43 	bl	10054eac <GAT_att_srv_hvtx>
10057026:	4604      	mov	r4, r0
10057028:	4620      	mov	r0, r4
1005702a:	b005      	add	sp, #20
1005702c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10057030 <GAT_srv_checks_for_notify>:
10057030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10057032:	461d      	mov	r5, r3
10057034:	4616      	mov	r6, r2
10057036:	4604      	mov	r4, r0
10057038:	f7fd fc36 	bl	100548a8 <GAT_att_cmn_get_channel_descr_p>
1005703c:	2712      	movs	r7, #18
1005703e:	2800      	cmp	r0, #0
10057040:	d024      	beq.n	1005708c <GAT_srv_checks_for_notify+0x5c>
10057042:	4601      	mov	r1, r0
10057044:	481b      	ldr	r0, [pc, #108]	@ (100570b4 <__arm_cp.11_0>)
10057046:	6800      	ldr	r0, [r0, #0]
10057048:	225c      	movs	r2, #92	@ 0x5c
1005704a:	5c82      	ldrb	r2, [r0, r2]
1005704c:	2081      	movs	r0, #129	@ 0x81
1005704e:	0792      	lsls	r2, r2, #30
10057050:	d42c      	bmi.n	100570ac <GAT_srv_checks_for_notify+0x7c>
10057052:	8889      	ldrh	r1, [r1, #4]
10057054:	0649      	lsls	r1, r1, #25
10057056:	d429      	bmi.n	100570ac <GAT_srv_checks_for_notify+0x7c>
10057058:	1e70      	subs	r0, r6, #1
1005705a:	b280      	uxth	r0, r0
1005705c:	f00d faee 	bl	1006463c <GAT_att_db_find_by_handle>
10057060:	4601      	mov	r1, r0
10057062:	2800      	cmp	r0, #0
10057064:	4638      	mov	r0, r7
10057066:	d021      	beq.n	100570ac <GAT_srv_checks_for_notify+0x7c>
10057068:	6848      	ldr	r0, [r1, #4]
1005706a:	7800      	ldrb	r0, [r0, #0]
1005706c:	4228      	tst	r0, r5
1005706e:	d01e      	beq.n	100570ae <GAT_srv_checks_for_notify+0x7e>
10057070:	4608      	mov	r0, r1
10057072:	f7ff fcf3 	bl	10056a5c <GAT_srv_get_cccd_attr_p>
10057076:	2800      	cmp	r0, #0
10057078:	d00a      	beq.n	10057090 <GAT_srv_checks_for_notify+0x60>
1005707a:	4606      	mov	r6, r0
1005707c:	2203      	movs	r2, #3
1005707e:	4621      	mov	r1, r4
10057080:	f7ff f970 	bl	10056364 <GAT_srv_check_perms>
10057084:	2800      	cmp	r0, #0
10057086:	d005      	beq.n	10057094 <GAT_srv_checks_for_notify+0x64>
10057088:	20c0      	movs	r0, #192	@ 0xc0
1005708a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005708c:	4638      	mov	r0, r7
1005708e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10057090:	2086      	movs	r0, #134	@ 0x86
10057092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10057094:	2d10      	cmp	r5, #16
10057096:	d001      	beq.n	1005709c <GAT_srv_checks_for_notify+0x6c>
10057098:	2502      	movs	r5, #2
1005709a:	e000      	b.n	1005709e <GAT_srv_checks_for_notify+0x6e>
1005709c:	2501      	movs	r5, #1
1005709e:	4620      	mov	r0, r4
100570a0:	4631      	mov	r1, r6
100570a2:	f7ff fd0b 	bl	10056abc <GAT_srv_get_cccd_val>
100570a6:	4205      	tst	r5, r0
100570a8:	d001      	beq.n	100570ae <GAT_srv_checks_for_notify+0x7e>
100570aa:	2000      	movs	r0, #0
100570ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100570ae:	200c      	movs	r0, #12
100570b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100570b2:	46c0      	nop			@ (mov r8, r8)

100570b4 <__arm_cp.11_0>:
100570b4:	200010ac 	.word	0x200010ac

100570b8 <GAT_srv_resp>:
100570b8:	b51c      	push	{r2, r3, r4, lr}
100570ba:	9c05      	ldr	r4, [sp, #20]
100570bc:	9401      	str	r4, [sp, #4]
100570be:	9c04      	ldr	r4, [sp, #16]
100570c0:	9400      	str	r4, [sp, #0]
100570c2:	f7fd fff3 	bl	100550ac <GAT_att_srv_resp>
100570c6:	bd1c      	pop	{r2, r3, r4, pc}

100570c8 <GAT_srv_get_service_handle>:
100570c8:	b580      	push	{r7, lr}
100570ca:	4603      	mov	r3, r0
100570cc:	2001      	movs	r0, #1
100570ce:	4902      	ldr	r1, [pc, #8]	@ (100570d8 <__arm_cp.14_0>)
100570d0:	2200      	movs	r2, #0
100570d2:	f7ff fcb9 	bl	10056a48 <GAT_srv_get_attribute_handle>
100570d6:	bd80      	pop	{r7, pc}

100570d8 <__arm_cp.14_0>:
100570d8:	0000ffff 	.word	0x0000ffff

100570dc <GAT_srv_get_char_decl_handle>:
100570dc:	b580      	push	{r7, lr}
100570de:	4603      	mov	r3, r0
100570e0:	2001      	movs	r0, #1
100570e2:	4902      	ldr	r1, [pc, #8]	@ (100570ec <__arm_cp.16_0>)
100570e4:	2202      	movs	r2, #2
100570e6:	f7ff fcaf 	bl	10056a48 <GAT_srv_get_attribute_handle>
100570ea:	bd80      	pop	{r7, pc}

100570ec <__arm_cp.16_0>:
100570ec:	0000ffff 	.word	0x0000ffff

100570f0 <hci_rx_acl_data>:
100570f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100570f2:	b085      	sub	sp, #20
100570f4:	4604      	mov	r4, r0
100570f6:	7887      	ldrb	r7, [r0, #2]
100570f8:	1e78      	subs	r0, r7, #1
100570fa:	2103      	movs	r1, #3
100570fc:	9104      	str	r1, [sp, #16]
100570fe:	4308      	orrs	r0, r1
10057100:	3009      	adds	r0, #9
10057102:	0880      	lsrs	r0, r0, #2
10057104:	b283      	uxth	r3, r0
10057106:	7a20      	ldrb	r0, [r4, #8]
10057108:	9003      	str	r0, [sp, #12]
1005710a:	8820      	ldrh	r0, [r4, #0]
1005710c:	9002      	str	r0, [sp, #8]
1005710e:	4811      	ldr	r0, [pc, #68]	@ (10057154 <__arm_cp.2_0>)
10057110:	6800      	ldr	r0, [r0, #0]
10057112:	6980      	ldr	r0, [r0, #24]
10057114:	2502      	movs	r5, #2
10057116:	223e      	movs	r2, #62	@ 0x3e
10057118:	4629      	mov	r1, r5
1005711a:	f7fb ff0d 	bl	10052f38 <aci_event_fifo_push_header>
1005711e:	2800      	cmp	r0, #0
10057120:	d014      	beq.n	1005714c <hci_rx_acl_data+0x5c>
10057122:	4606      	mov	r6, r0
10057124:	9700      	str	r7, [sp, #0]
10057126:	9401      	str	r4, [sp, #4]
10057128:	9804      	ldr	r0, [sp, #16]
1005712a:	9a03      	ldr	r2, [sp, #12]
1005712c:	4002      	ands	r2, r0
1005712e:	1d30      	adds	r0, r6, #4
10057130:	2700      	movs	r7, #0
10057132:	9902      	ldr	r1, [sp, #8]
10057134:	463b      	mov	r3, r7
10057136:	f7fc fc66 	bl	10053a06 <hci_rx_acl_data_event_copy>
1005713a:	7135      	strb	r5, [r6, #4]
1005713c:	4628      	mov	r0, r5
1005713e:	4631      	mov	r1, r6
10057140:	f7fb ff97 	bl	10053072 <aci_event_fifo_push>
10057144:	4620      	mov	r0, r4
10057146:	f7fb fd35 	bl	10052bb4 <ACL_pkt_release>
1005714a:	e000      	b.n	1005714e <hci_rx_acl_data+0x5e>
1005714c:	2707      	movs	r7, #7
1005714e:	4638      	mov	r0, r7
10057150:	b005      	add	sp, #20
10057152:	bdf0      	pop	{r4, r5, r6, r7, pc}

10057154 <__arm_cp.2_0>:
10057154:	200010a4 	.word	0x200010a4

10057158 <hci_tx_acl_data_done>:
10057158:	b5b0      	push	{r4, r5, r7, lr}
1005715a:	4604      	mov	r4, r0
1005715c:	8801      	ldrh	r1, [r0, #0]
1005715e:	2002      	movs	r0, #2
10057160:	f00c fd50 	bl	10063c04 <hci_number_of_completed_packets_event_push_noinline>
10057164:	4605      	mov	r5, r0
10057166:	2800      	cmp	r0, #0
10057168:	d102      	bne.n	10057170 <hci_tx_acl_data_done+0x18>
1005716a:	4620      	mov	r0, r4
1005716c:	f7fb fd22 	bl	10052bb4 <ACL_pkt_release>
10057170:	4628      	mov	r0, r5
10057172:	bdb0      	pop	{r4, r5, r7, pc}

10057174 <hci_le_set_advertising_parameters>:
10057174:	b5f0      	push	{r4, r5, r6, r7, lr}
10057176:	b089      	sub	sp, #36	@ 0x24
10057178:	461d      	mov	r5, r3
1005717a:	4616      	mov	r6, r2
1005717c:	460f      	mov	r7, r1
1005717e:	9004      	str	r0, [sp, #16]
10057180:	2002      	movs	r0, #2
10057182:	2401      	movs	r4, #1
10057184:	4621      	mov	r1, r4
10057186:	f000 f8d9 	bl	1005733c <hci_get_set_legacy_ext_flag>
1005718a:	2800      	cmp	r0, #0
1005718c:	d150      	bne.n	10057230 <hci_le_set_advertising_parameters+0xbc>
1005718e:	9703      	str	r7, [sp, #12]
10057190:	2012      	movs	r0, #18
10057192:	2e04      	cmp	r6, #4
10057194:	d84c      	bhi.n	10057230 <hci_le_set_advertising_parameters+0xbc>
10057196:	9002      	str	r0, [sp, #8]
10057198:	f7fa fa50 	bl	1005163c <conn_supp_csr_ucfg>
1005719c:	2e01      	cmp	r6, #1
1005719e:	d803      	bhi.n	100571a8 <hci_le_set_advertising_parameters+0x34>
100571a0:	2800      	cmp	r0, #0
100571a2:	d101      	bne.n	100571a8 <hci_le_set_advertising_parameters+0x34>
100571a4:	2011      	movs	r0, #17
100571a6:	e043      	b.n	10057230 <hci_le_set_advertising_parameters+0xbc>
100571a8:	9811      	ldr	r0, [sp, #68]	@ 0x44
100571aa:	9000      	str	r0, [sp, #0]
100571ac:	9810      	ldr	r0, [sp, #64]	@ 0x40
100571ae:	9001      	str	r0, [sp, #4]
100571b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
100571b2:	980e      	ldr	r0, [sp, #56]	@ 0x38
100571b4:	af05      	add	r7, sp, #20
100571b6:	7238      	strb	r0, [r7, #8]
100571b8:	71fd      	strb	r5, [r7, #7]
100571ba:	713e      	strb	r6, [r7, #4]
100571bc:	9803      	ldr	r0, [sp, #12]
100571be:	8078      	strh	r0, [r7, #2]
100571c0:	9804      	ldr	r0, [sp, #16]
100571c2:	8038      	strh	r0, [r7, #0]
100571c4:	4638      	mov	r0, r7
100571c6:	3009      	adds	r0, #9
100571c8:	2206      	movs	r2, #6
100571ca:	f7ee ff43 	bl	10046054 <BLEPLAT_MemCpy>
100571ce:	9900      	ldr	r1, [sp, #0]
100571d0:	71b9      	strb	r1, [r7, #6]
100571d2:	9801      	ldr	r0, [sp, #4]
100571d4:	7178      	strb	r0, [r7, #5]
100571d6:	7938      	ldrb	r0, [r7, #4]
100571d8:	2804      	cmp	r0, #4
100571da:	d001      	beq.n	100571e0 <hci_le_set_advertising_parameters+0x6c>
100571dc:	2801      	cmp	r0, #1
100571de:	d104      	bne.n	100571ea <hci_le_set_advertising_parameters+0x76>
100571e0:	a905      	add	r1, sp, #20
100571e2:	7a09      	ldrb	r1, [r1, #8]
100571e4:	2902      	cmp	r1, #2
100571e6:	d302      	bcc.n	100571ee <hci_le_set_advertising_parameters+0x7a>
100571e8:	e021      	b.n	1005722e <hci_le_set_advertising_parameters+0xba>
100571ea:	2903      	cmp	r1, #3
100571ec:	d81f      	bhi.n	1005722e <hci_le_set_advertising_parameters+0xba>
100571ee:	2801      	cmp	r0, #1
100571f0:	d10e      	bne.n	10057210 <hci_le_set_advertising_parameters+0x9c>
100571f2:	f000 fa4f 	bl	10057694 <hci_le_check_own_address_type_max_value_ucfg_weak>
100571f6:	a905      	add	r1, sp, #20
100571f8:	79c9      	ldrb	r1, [r1, #7]
100571fa:	4281      	cmp	r1, r0
100571fc:	d817      	bhi.n	1005722e <hci_le_set_advertising_parameters+0xba>
100571fe:	a805      	add	r0, sp, #20
10057200:	7940      	ldrb	r0, [r0, #5]
10057202:	0740      	lsls	r0, r0, #29
10057204:	9802      	ldr	r0, [sp, #8]
10057206:	d013      	beq.n	10057230 <hci_le_set_advertising_parameters+0xbc>
10057208:	a805      	add	r0, sp, #20
1005720a:	f006 fabb 	bl	1005d784 <LL_LE_Set_Advertising_Parameters>
1005720e:	e00f      	b.n	10057230 <hci_le_set_advertising_parameters+0xbc>
10057210:	a805      	add	r0, sp, #20
10057212:	8800      	ldrh	r0, [r0, #0]
10057214:	2820      	cmp	r0, #32
10057216:	d30a      	bcc.n	1005722e <hci_le_set_advertising_parameters+0xba>
10057218:	03a1      	lsls	r1, r4, #14
1005721a:	4288      	cmp	r0, r1
1005721c:	d807      	bhi.n	1005722e <hci_le_set_advertising_parameters+0xba>
1005721e:	aa05      	add	r2, sp, #20
10057220:	8852      	ldrh	r2, [r2, #2]
10057222:	2a20      	cmp	r2, #32
10057224:	d303      	bcc.n	1005722e <hci_le_set_advertising_parameters+0xba>
10057226:	428a      	cmp	r2, r1
10057228:	d801      	bhi.n	1005722e <hci_le_set_advertising_parameters+0xba>
1005722a:	4290      	cmp	r0, r2
1005722c:	d9e1      	bls.n	100571f2 <hci_le_set_advertising_parameters+0x7e>
1005722e:	9802      	ldr	r0, [sp, #8]
10057230:	b009      	add	sp, #36	@ 0x24
10057232:	bdf0      	pop	{r4, r5, r6, r7, pc}

10057234 <hci_le_set_advertising_enable>:
10057234:	b510      	push	{r4, lr}
10057236:	4604      	mov	r4, r0
10057238:	2002      	movs	r0, #2
1005723a:	2101      	movs	r1, #1
1005723c:	f000 f87e 	bl	1005733c <hci_get_set_legacy_ext_flag>
10057240:	2800      	cmp	r0, #0
10057242:	d000      	beq.n	10057246 <hci_le_set_advertising_enable+0x12>
10057244:	bd10      	pop	{r4, pc}
10057246:	2c01      	cmp	r4, #1
10057248:	d803      	bhi.n	10057252 <hci_le_set_advertising_enable+0x1e>
1005724a:	4620      	mov	r0, r4
1005724c:	f006 fb1e 	bl	1005d88c <LL_LE_Set_Advertise_Enable>
10057250:	bd10      	pop	{r4, pc}
10057252:	2012      	movs	r0, #18
10057254:	bd10      	pop	{r4, pc}

10057256 <chc_csr_ucfg_weak>:
10057256:	2000      	movs	r0, #0
10057258:	4770      	bx	lr
	...

1005725c <HCI_Init>:
1005725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005725e:	4917      	ldr	r1, [pc, #92]	@ (100572bc <__arm_cp.0_0>)
10057260:	6808      	ldr	r0, [r1, #0]
10057262:	460d      	mov	r5, r1
10057264:	2124      	movs	r1, #36	@ 0x24
10057266:	2400      	movs	r4, #0
10057268:	5444      	strb	r4, [r0, r1]
1005726a:	3025      	adds	r0, #37	@ 0x25
1005726c:	2211      	movs	r2, #17
1005726e:	4f14      	ldr	r7, [pc, #80]	@ (100572c0 <__arm_cp.0_1>)
10057270:	4621      	mov	r1, r4
10057272:	47b8      	blx	r7
10057274:	6828      	ldr	r0, [r5, #0]
10057276:	3036      	adds	r0, #54	@ 0x36
10057278:	26ff      	movs	r6, #255	@ 0xff
1005727a:	2205      	movs	r2, #5
1005727c:	4631      	mov	r1, r6
1005727e:	47b8      	blx	r7
10057280:	6829      	ldr	r1, [r5, #0]
10057282:	203b      	movs	r0, #59	@ 0x3b
10057284:	231f      	movs	r3, #31
10057286:	540b      	strb	r3, [r1, r0]
10057288:	2201      	movs	r2, #1
1005728a:	0355      	lsls	r5, r2, #13
1005728c:	4608      	mov	r0, r1
1005728e:	303b      	adds	r0, #59	@ 0x3b
10057290:	5285      	strh	r5, [r0, r2]
10057292:	72c3      	strb	r3, [r0, #11]
10057294:	3147      	adds	r1, #71	@ 0x47
10057296:	2207      	movs	r2, #7
10057298:	4608      	mov	r0, r1
1005729a:	4621      	mov	r1, r4
1005729c:	47b8      	blx	r7
1005729e:	4d07      	ldr	r5, [pc, #28]	@ (100572bc <__arm_cp.0_0>)
100572a0:	6828      	ldr	r0, [r5, #0]
100572a2:	304e      	adds	r0, #78	@ 0x4e
100572a4:	2208      	movs	r2, #8
100572a6:	4631      	mov	r1, r6
100572a8:	47b8      	blx	r7
100572aa:	4806      	ldr	r0, [pc, #24]	@ (100572c4 <__arm_cp.0_2>)
100572ac:	6800      	ldr	r0, [r0, #0]
100572ae:	2135      	movs	r1, #53	@ 0x35
100572b0:	5444      	strb	r4, [r0, r1]
100572b2:	6828      	ldr	r0, [r5, #0]
100572b4:	4904      	ldr	r1, [pc, #16]	@ (100572c8 <__arm_cp.0_3>)
100572b6:	6201      	str	r1, [r0, #32]
100572b8:	65c4      	str	r4, [r0, #92]	@ 0x5c
100572ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100572bc <__arm_cp.0_0>:
100572bc:	200010f4 	.word	0x200010f4

100572c0 <__arm_cp.0_1>:
100572c0:	10046075 	.word	0x10046075

100572c4 <__arm_cp.0_2>:
100572c4:	200010a0 	.word	0x200010a0

100572c8 <__arm_cp.0_3>:
100572c8:	fffffdbe 	.word	0xfffffdbe

100572cc <Controller_Process_Q>:
100572cc:	b570      	push	{r4, r5, r6, lr}
100572ce:	2500      	movs	r5, #0
100572d0:	4e07      	ldr	r6, [pc, #28]	@ (100572f0 <__arm_cp.2_0>)
100572d2:	7af0      	ldrb	r0, [r6, #11]
100572d4:	4285      	cmp	r5, r0
100572d6:	d20a      	bcs.n	100572ee <Controller_Process_Q+0x22>
100572d8:	b2ec      	uxtb	r4, r5
100572da:	4620      	mov	r0, r4
100572dc:	f002 fd14 	bl	10059d08 <LL_cpe_engine>
100572e0:	2800      	cmp	r0, #0
100572e2:	d002      	beq.n	100572ea <Controller_Process_Q+0x1e>
100572e4:	4620      	mov	r0, r4
100572e6:	f002 fd0f 	bl	10059d08 <LL_cpe_engine>
100572ea:	1c6d      	adds	r5, r5, #1
100572ec:	e7f1      	b.n	100572d2 <Controller_Process_Q+0x6>
100572ee:	bd70      	pop	{r4, r5, r6, pc}

100572f0 <__arm_cp.2_0>:
100572f0:	20001108 	.word	0x20001108

100572f4 <hci_le_set_random_address>:
100572f4:	b580      	push	{r7, lr}
100572f6:	f006 fcd9 	bl	1005dcac <LL_Set_Advertising_Set_Random_Address>
100572fa:	bd80      	pop	{r7, pc}

100572fc <hci_set_event_mask>:
100572fc:	b510      	push	{r4, lr}
100572fe:	2136      	movs	r1, #54	@ 0x36
10057300:	4a05      	ldr	r2, [pc, #20]	@ (10057318 <__arm_cp.14_0>)
10057302:	293e      	cmp	r1, #62	@ 0x3e
10057304:	d006      	beq.n	10057314 <hci_set_event_mask+0x18>
10057306:	1843      	adds	r3, r0, r1
10057308:	3b36      	subs	r3, #54	@ 0x36
1005730a:	781b      	ldrb	r3, [r3, #0]
1005730c:	6814      	ldr	r4, [r2, #0]
1005730e:	5463      	strb	r3, [r4, r1]
10057310:	1c49      	adds	r1, r1, #1
10057312:	e7f6      	b.n	10057302 <hci_set_event_mask+0x6>
10057314:	2000      	movs	r0, #0
10057316:	bd10      	pop	{r4, pc}

10057318 <__arm_cp.14_0>:
10057318:	200010f4 	.word	0x200010f4

1005731c <hci_le_set_event_mask>:
1005731c:	b510      	push	{r4, lr}
1005731e:	2146      	movs	r1, #70	@ 0x46
10057320:	4a05      	ldr	r2, [pc, #20]	@ (10057338 <__arm_cp.16_0>)
10057322:	294e      	cmp	r1, #78	@ 0x4e
10057324:	d006      	beq.n	10057334 <hci_le_set_event_mask+0x18>
10057326:	1843      	adds	r3, r0, r1
10057328:	3b46      	subs	r3, #70	@ 0x46
1005732a:	781b      	ldrb	r3, [r3, #0]
1005732c:	6814      	ldr	r4, [r2, #0]
1005732e:	5463      	strb	r3, [r4, r1]
10057330:	1c49      	adds	r1, r1, #1
10057332:	e7f6      	b.n	10057322 <hci_le_set_event_mask+0x6>
10057334:	2000      	movs	r0, #0
10057336:	bd10      	pop	{r4, pc}

10057338 <__arm_cp.16_0>:
10057338:	200010f4 	.word	0x200010f4

1005733c <hci_get_set_legacy_ext_flag>:
1005733c:	4a05      	ldr	r2, [pc, #20]	@ (10057354 <__arm_cp.18_0>)
1005733e:	6812      	ldr	r2, [r2, #0]
10057340:	2335      	movs	r3, #53	@ 0x35
10057342:	5cd3      	ldrb	r3, [r2, r3]
10057344:	4203      	tst	r3, r0
10057346:	d001      	beq.n	1005734c <hci_get_set_legacy_ext_flag+0x10>
10057348:	200c      	movs	r0, #12
1005734a:	4770      	bx	lr
1005734c:	3235      	adds	r2, #53	@ 0x35
1005734e:	7011      	strb	r1, [r2, #0]
10057350:	2000      	movs	r0, #0
10057352:	4770      	bx	lr

10057354 <__arm_cp.18_0>:
10057354:	200010a0 	.word	0x200010a0

10057358 <hci_check_legacy_ext_flag>:
10057358:	4903      	ldr	r1, [pc, #12]	@ (10057368 <__arm_cp.25_0>)
1005735a:	6809      	ldr	r1, [r1, #0]
1005735c:	2235      	movs	r2, #53	@ 0x35
1005735e:	5c89      	ldrb	r1, [r1, r2]
10057360:	4008      	ands	r0, r1
10057362:	1e41      	subs	r1, r0, #1
10057364:	4188      	sbcs	r0, r1
10057366:	4770      	bx	lr

10057368 <__arm_cp.25_0>:
10057368:	200010a0 	.word	0x200010a0

1005736c <LLC_offline_control_procedures_processing>:
1005736c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005736e:	2400      	movs	r4, #0
10057370:	4620      	mov	r0, r4
10057372:	f000 fe99 	bl	100580a8 <llc_conn_get_cntxt_per_p>
10057376:	4605      	mov	r5, r0
10057378:	2201      	movs	r2, #1
1005737a:	4b30      	ldr	r3, [pc, #192]	@ (1005743c <__arm_cp.27_0>)
1005737c:	4627      	mov	r7, r4
1005737e:	9200      	str	r2, [sp, #0]
10057380:	6818      	ldr	r0, [r3, #0]
10057382:	2134      	movs	r1, #52	@ 0x34
10057384:	5c40      	ldrb	r0, [r0, r1]
10057386:	4284      	cmp	r4, r0
10057388:	d250      	bcs.n	1005742c <LLC_offline_control_procedures_processing+0xc0>
1005738a:	202c      	movs	r0, #44	@ 0x2c
1005738c:	5c28      	ldrb	r0, [r5, r0]
1005738e:	21fe      	movs	r1, #254	@ 0xfe
10057390:	4001      	ands	r1, r0
10057392:	2902      	cmp	r1, #2
10057394:	d13e      	bne.n	10057414 <LLC_offline_control_procedures_processing+0xa8>
10057396:	208c      	movs	r0, #140	@ 0x8c
10057398:	582e      	ldr	r6, [r5, r0]
1005739a:	07f0      	lsls	r0, r6, #31
1005739c:	d00d      	beq.n	100573ba <LLC_offline_control_procedures_processing+0x4e>
1005739e:	8f69      	ldrh	r1, [r5, #58]	@ 0x3a
100573a0:	2000      	movs	r0, #0
100573a2:	f004 fbe7 	bl	1005bb74 <LL_Read_Remote_Used_Features>
100573a6:	283a      	cmp	r0, #58	@ 0x3a
100573a8:	9a00      	ldr	r2, [sp, #0]
100573aa:	4610      	mov	r0, r2
100573ac:	d030      	beq.n	10057410 <LLC_offline_control_procedures_processing+0xa4>
100573ae:	4628      	mov	r0, r5
100573b0:	308c      	adds	r0, #140	@ 0x8c
100573b2:	6801      	ldr	r1, [r0, #0]
100573b4:	2201      	movs	r2, #1
100573b6:	4391      	bics	r1, r2
100573b8:	6001      	str	r1, [r0, #0]
100573ba:	4628      	mov	r0, r5
100573bc:	f002 fbcc 	bl	10059b58 <llc_subrate_offline_processing_ucfg_weak>
100573c0:	2800      	cmp	r0, #0
100573c2:	9a00      	ldr	r2, [sp, #0]
100573c4:	4610      	mov	r0, r2
100573c6:	d123      	bne.n	10057410 <LLC_offline_control_procedures_processing+0xa4>
100573c8:	4628      	mov	r0, r5
100573ca:	4631      	mov	r1, r6
100573cc:	f7fa fac3 	bl	10051956 <Data_Len_Update_Offline_Processing_ucfg>
100573d0:	9a00      	ldr	r2, [sp, #0]
100573d2:	2800      	cmp	r0, #0
100573d4:	4610      	mov	r0, r2
100573d6:	d11b      	bne.n	10057410 <LLC_offline_control_procedures_processing+0xa4>
100573d8:	b2e6      	uxtb	r6, r4
100573da:	4630      	mov	r0, r6
100573dc:	f003 fc62 	bl	1005aca4 <LLC_channel_map_update_offline_processing_ucfg_weak>
100573e0:	9a00      	ldr	r2, [sp, #0]
100573e2:	2800      	cmp	r0, #0
100573e4:	4610      	mov	r0, r2
100573e6:	d113      	bne.n	10057410 <LLC_offline_control_procedures_processing+0xa4>
100573e8:	4630      	mov	r0, r6
100573ea:	f003 fc5f 	bl	1005acac <LLC_chc_reporting_offline_processing_ucfg_weak>
100573ee:	9a00      	ldr	r2, [sp, #0]
100573f0:	2800      	cmp	r0, #0
100573f2:	4610      	mov	r0, r2
100573f4:	d10c      	bne.n	10057410 <LLC_offline_control_procedures_processing+0xa4>
100573f6:	4628      	mov	r0, r5
100573f8:	f003 fe99 	bl	1005b12e <LLC_cte_request_procedure_ucfg_weak>
100573fc:	9a00      	ldr	r2, [sp, #0]
100573fe:	2800      	cmp	r0, #0
10057400:	4610      	mov	r0, r2
10057402:	d105      	bne.n	10057410 <LLC_offline_control_procedures_processing+0xa4>
10057404:	4630      	mov	r0, r6
10057406:	f005 f8c4 	bl	1005c592 <LLC_pcl_offline_processing_ucfg_weak>
1005740a:	9a00      	ldr	r2, [sp, #0]
1005740c:	1e41      	subs	r1, r0, #1
1005740e:	4188      	sbcs	r0, r1
10057410:	4b0a      	ldr	r3, [pc, #40]	@ (1005743c <__arm_cp.27_0>)
10057412:	e000      	b.n	10057416 <LLC_offline_control_procedures_processing+0xaa>
10057414:	2000      	movs	r0, #0
10057416:	1e41      	subs	r1, r0, #1
10057418:	4188      	sbcs	r0, r1
1005741a:	0639      	lsls	r1, r7, #24
1005741c:	4617      	mov	r7, r2
1005741e:	d100      	bne.n	10057422 <LLC_offline_control_procedures_processing+0xb6>
10057420:	4607      	mov	r7, r0
10057422:	204d      	movs	r0, #77	@ 0x4d
10057424:	0080      	lsls	r0, r0, #2
10057426:	182d      	adds	r5, r5, r0
10057428:	1c64      	adds	r4, r4, #1
1005742a:	e7a9      	b.n	10057380 <LLC_offline_control_procedures_processing+0x14>
1005742c:	0638      	lsls	r0, r7, #24
1005742e:	d003      	beq.n	10057438 <LLC_offline_control_procedures_processing+0xcc>
10057430:	2011      	movs	r0, #17
10057432:	2101      	movs	r1, #1
10057434:	f00b f852 	bl	100624dc <tsk_wait_resource_idx>
10057438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005743a:	46c0      	nop			@ (mov r8, r8)

1005743c <__arm_cp.27_0>:
1005743c:	200010a0 	.word	0x200010a0

10057440 <cte_csr_ucfg_weak>:
10057440:	2000      	movs	r0, #0
10057442:	4770      	bx	lr

10057444 <hci_le_encrypt>:
10057444:	b5f0      	push	{r4, r5, r6, r7, lr}
10057446:	b08f      	sub	sp, #60	@ 0x3c
10057448:	9202      	str	r2, [sp, #8]
1005744a:	4607      	mov	r7, r0
1005744c:	a807      	add	r0, sp, #28
1005744e:	9001      	str	r0, [sp, #4]
10057450:	2510      	movs	r5, #16
10057452:	4e0c      	ldr	r6, [pc, #48]	@ (10057484 <__arm_cp.0_0>)
10057454:	462a      	mov	r2, r5
10057456:	47b0      	blx	r6
10057458:	ac0b      	add	r4, sp, #44	@ 0x2c
1005745a:	4620      	mov	r0, r4
1005745c:	4639      	mov	r1, r7
1005745e:	462a      	mov	r2, r5
10057460:	47b0      	blx	r6
10057462:	af03      	add	r7, sp, #12
10057464:	2600      	movs	r6, #0
10057466:	9801      	ldr	r0, [sp, #4]
10057468:	4621      	mov	r1, r4
1005746a:	463a      	mov	r2, r7
1005746c:	4633      	mov	r3, r6
1005746e:	f00b fb36 	bl	10062ade <BLEPLAT_aes128_encrypt>
10057472:	9802      	ldr	r0, [sp, #8]
10057474:	4639      	mov	r1, r7
10057476:	462a      	mov	r2, r5
10057478:	4b02      	ldr	r3, [pc, #8]	@ (10057484 <__arm_cp.0_0>)
1005747a:	4798      	blx	r3
1005747c:	4630      	mov	r0, r6
1005747e:	b00f      	add	sp, #60	@ 0x3c
10057480:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057482:	46c0      	nop			@ (mov r8, r8)

10057484 <__arm_cp.0_0>:
10057484:	10046055 	.word	0x10046055

10057488 <hci_le_long_term_key_request_reply_api>:
10057488:	b5b0      	push	{r4, r5, r7, lr}
1005748a:	460c      	mov	r4, r1
1005748c:	4605      	mov	r5, r0
1005748e:	f001 f885 	bl	1005859c <llc_conn_get_conn_idx>
10057492:	28ff      	cmp	r0, #255	@ 0xff
10057494:	d005      	beq.n	100574a2 <hci_le_long_term_key_request_reply_api+0x1a>
10057496:	2000      	movs	r0, #0
10057498:	4629      	mov	r1, r5
1005749a:	4622      	mov	r2, r4
1005749c:	f004 fa17 	bl	1005b8ce <LL_Get_LTK>
100574a0:	bdb0      	pop	{r4, r5, r7, pc}
100574a2:	2002      	movs	r0, #2
100574a4:	bdb0      	pop	{r4, r5, r7, pc}

100574a6 <hci_le_long_term_key_request_negative_reply_api>:
100574a6:	b510      	push	{r4, lr}
100574a8:	4604      	mov	r4, r0
100574aa:	f001 f877 	bl	1005859c <llc_conn_get_conn_idx>
100574ae:	28ff      	cmp	r0, #255	@ 0xff
100574b0:	d005      	beq.n	100574be <hci_le_long_term_key_request_negative_reply_api+0x18>
100574b2:	2081      	movs	r0, #129	@ 0x81
100574b4:	2200      	movs	r2, #0
100574b6:	4621      	mov	r1, r4
100574b8:	f004 fa09 	bl	1005b8ce <LL_Get_LTK>
100574bc:	bd10      	pop	{r4, pc}
100574be:	2002      	movs	r0, #2
100574c0:	bd10      	pop	{r4, pc}
	...

100574c4 <hci_le_read_local_p256_public_key_cb>:
100574c4:	b570      	push	{r4, r5, r6, lr}
100574c6:	b090      	sub	sp, #64	@ 0x40
100574c8:	4604      	mov	r4, r0
100574ca:	2800      	cmp	r0, #0
100574cc:	d10c      	bne.n	100574e8 <hci_le_read_local_p256_public_key_cb+0x24>
100574ce:	460d      	mov	r5, r1
100574d0:	4820      	ldr	r0, [pc, #128]	@ (10057554 <__arm_cp.4_0>)
100574d2:	6800      	ldr	r0, [r0, #0]
100574d4:	3068      	adds	r0, #104	@ 0x68
100574d6:	2220      	movs	r2, #32
100574d8:	f7ee fdbc 	bl	10046054 <BLEPLAT_MemCpy>
100574dc:	3520      	adds	r5, #32
100574de:	4668      	mov	r0, sp
100574e0:	2240      	movs	r2, #64	@ 0x40
100574e2:	4629      	mov	r1, r5
100574e4:	f7ee fdb6 	bl	10046054 <BLEPLAT_MemCpy>
100574e8:	481b      	ldr	r0, [pc, #108]	@ (10057558 <__arm_cp.4_1>)
100574ea:	6800      	ldr	r0, [r0, #0]
100574ec:	212c      	movs	r1, #44	@ 0x2c
100574ee:	5c40      	ldrb	r0, [r0, r1]
100574f0:	07c0      	lsls	r0, r0, #31
100574f2:	0ec5      	lsrs	r5, r0, #27
100574f4:	d11f      	bne.n	10057536 <hci_le_read_local_p256_public_key_cb+0x72>
100574f6:	220b      	movs	r2, #11
100574f8:	2012      	movs	r0, #18
100574fa:	4045      	eors	r5, r0
100574fc:	4817      	ldr	r0, [pc, #92]	@ (1005755c <__arm_cp.4_2>)
100574fe:	6800      	ldr	r0, [r0, #0]
10057500:	6980      	ldr	r0, [r0, #24]
10057502:	2312      	movs	r3, #18
10057504:	4629      	mov	r1, r5
10057506:	f7fb fd17 	bl	10052f38 <aci_event_fifo_push_header>
1005750a:	2800      	cmp	r0, #0
1005750c:	d01e      	beq.n	1005754c <hci_le_read_local_p256_public_key_cb+0x88>
1005750e:	4606      	mov	r6, r0
10057510:	7204      	strb	r4, [r0, #8]
10057512:	3009      	adds	r0, #9
10057514:	4669      	mov	r1, sp
10057516:	2240      	movs	r2, #64	@ 0x40
10057518:	f7ee fd9c 	bl	10046054 <BLEPLAT_MemCpy>
1005751c:	2008      	movs	r0, #8
1005751e:	71f0      	strb	r0, [r6, #7]
10057520:	2042      	movs	r0, #66	@ 0x42
10057522:	71b0      	strb	r0, [r6, #6]
10057524:	203e      	movs	r0, #62	@ 0x3e
10057526:	7170      	strb	r0, [r6, #5]
10057528:	2004      	movs	r0, #4
1005752a:	7130      	strb	r0, [r6, #4]
1005752c:	4628      	mov	r0, r5
1005752e:	4631      	mov	r1, r6
10057530:	f7fb fd9f 	bl	10053072 <aci_event_fifo_push>
10057534:	e00a      	b.n	1005754c <hci_le_read_local_p256_public_key_cb+0x88>
10057536:	4807      	ldr	r0, [pc, #28]	@ (10057554 <__arm_cp.4_0>)
10057538:	6800      	ldr	r0, [r0, #0]
1005753a:	213d      	movs	r1, #61	@ 0x3d
1005753c:	5c41      	ldrb	r1, [r0, r1]
1005753e:	0689      	lsls	r1, r1, #26
10057540:	d504      	bpl.n	1005754c <hci_le_read_local_p256_public_key_cb+0x88>
10057542:	303d      	adds	r0, #61	@ 0x3d
10057544:	2109      	movs	r1, #9
10057546:	5640      	ldrsb	r0, [r0, r1]
10057548:	2800      	cmp	r0, #0
1005754a:	d401      	bmi.n	10057550 <hci_le_read_local_p256_public_key_cb+0x8c>
1005754c:	b010      	add	sp, #64	@ 0x40
1005754e:	bd70      	pop	{r4, r5, r6, pc}
10057550:	221a      	movs	r2, #26
10057552:	e7d1      	b.n	100574f8 <hci_le_read_local_p256_public_key_cb+0x34>

10057554 <__arm_cp.4_0>:
10057554:	200010f4 	.word	0x200010f4

10057558 <__arm_cp.4_1>:
10057558:	200010a0 	.word	0x200010a0

1005755c <__arm_cp.4_2>:
1005755c:	200010a4 	.word	0x200010a4

10057560 <hci_le_read_local_p256_public_key_api>:
10057560:	b510      	push	{r4, lr}
10057562:	b088      	sub	sp, #32
10057564:	4668      	mov	r0, sp
10057566:	2120      	movs	r1, #32
10057568:	f00f ff5b 	bl	10067422 <__aeabi_memclr>
1005756c:	2400      	movs	r4, #0
1005756e:	4668      	mov	r0, sp
10057570:	2c20      	cmp	r4, #32
10057572:	d004      	beq.n	1005757e <hci_le_read_local_p256_public_key_api+0x1e>
10057574:	1900      	adds	r0, r0, r4
10057576:	f7ee fe26 	bl	100461c6 <BLEPLAT_RngGetRandom32>
1005757a:	1d24      	adds	r4, r4, #4
1005757c:	e7f7      	b.n	1005756e <hci_le_read_local_p256_public_key_api+0xe>
1005757e:	4905      	ldr	r1, [pc, #20]	@ (10057594 <__arm_cp.5_0>)
10057580:	f7ee fdb5 	bl	100460ee <BLEPLAT_PkaStartP256Key>
10057584:	1c80      	adds	r0, r0, #2
10057586:	d001      	beq.n	1005758c <hci_le_read_local_p256_public_key_api+0x2c>
10057588:	2000      	movs	r0, #0
1005758a:	e000      	b.n	1005758e <hci_le_read_local_p256_public_key_api+0x2e>
1005758c:	203a      	movs	r0, #58	@ 0x3a
1005758e:	b008      	add	sp, #32
10057590:	bd10      	pop	{r4, pc}
10057592:	46c0      	nop			@ (mov r8, r8)

10057594 <__arm_cp.5_0>:
10057594:	100574c5 	.word	0x100574c5

10057598 <hci_le_generate_dhkey_cb>:
10057598:	b570      	push	{r4, r5, r6, lr}
1005759a:	b088      	sub	sp, #32
1005759c:	4604      	mov	r4, r0
1005759e:	2800      	cmp	r0, #0
100575a0:	d005      	beq.n	100575ae <hci_le_generate_dhkey_cb+0x16>
100575a2:	4668      	mov	r0, sp
100575a4:	21ff      	movs	r1, #255	@ 0xff
100575a6:	2220      	movs	r2, #32
100575a8:	f7ee fd64 	bl	10046074 <BLEPLAT_MemSet>
100575ac:	e004      	b.n	100575b8 <hci_le_generate_dhkey_cb+0x20>
100575ae:	3120      	adds	r1, #32
100575b0:	4668      	mov	r0, sp
100575b2:	2220      	movs	r2, #32
100575b4:	f7ee fd4e 	bl	10046054 <BLEPLAT_MemCpy>
100575b8:	4819      	ldr	r0, [pc, #100]	@ (10057620 <__arm_cp.6_0>)
100575ba:	6800      	ldr	r0, [r0, #0]
100575bc:	212c      	movs	r1, #44	@ 0x2c
100575be:	5c40      	ldrb	r0, [r0, r1]
100575c0:	07c0      	lsls	r0, r0, #31
100575c2:	0ec5      	lsrs	r5, r0, #27
100575c4:	d101      	bne.n	100575ca <hci_le_generate_dhkey_cb+0x32>
100575c6:	220c      	movs	r2, #12
100575c8:	e00a      	b.n	100575e0 <hci_le_generate_dhkey_cb+0x48>
100575ca:	4816      	ldr	r0, [pc, #88]	@ (10057624 <__arm_cp.6_1>)
100575cc:	6800      	ldr	r0, [r0, #0]
100575ce:	213d      	movs	r1, #61	@ 0x3d
100575d0:	5c41      	ldrb	r1, [r0, r1]
100575d2:	0689      	lsls	r1, r1, #26
100575d4:	d522      	bpl.n	1005761c <hci_le_generate_dhkey_cb+0x84>
100575d6:	303d      	adds	r0, #61	@ 0x3d
100575d8:	7a80      	ldrb	r0, [r0, #10]
100575da:	07c0      	lsls	r0, r0, #31
100575dc:	d01e      	beq.n	1005761c <hci_le_generate_dhkey_cb+0x84>
100575de:	221b      	movs	r2, #27
100575e0:	2012      	movs	r0, #18
100575e2:	4045      	eors	r5, r0
100575e4:	4810      	ldr	r0, [pc, #64]	@ (10057628 <__arm_cp.6_2>)
100575e6:	6800      	ldr	r0, [r0, #0]
100575e8:	6980      	ldr	r0, [r0, #24]
100575ea:	230a      	movs	r3, #10
100575ec:	4629      	mov	r1, r5
100575ee:	f7fb fca3 	bl	10052f38 <aci_event_fifo_push_header>
100575f2:	2800      	cmp	r0, #0
100575f4:	d012      	beq.n	1005761c <hci_le_generate_dhkey_cb+0x84>
100575f6:	4606      	mov	r6, r0
100575f8:	7204      	strb	r4, [r0, #8]
100575fa:	3009      	adds	r0, #9
100575fc:	4669      	mov	r1, sp
100575fe:	2220      	movs	r2, #32
10057600:	f7ee fd28 	bl	10046054 <BLEPLAT_MemCpy>
10057604:	2009      	movs	r0, #9
10057606:	71f0      	strb	r0, [r6, #7]
10057608:	2022      	movs	r0, #34	@ 0x22
1005760a:	71b0      	strb	r0, [r6, #6]
1005760c:	203e      	movs	r0, #62	@ 0x3e
1005760e:	7170      	strb	r0, [r6, #5]
10057610:	2004      	movs	r0, #4
10057612:	7130      	strb	r0, [r6, #4]
10057614:	4628      	mov	r0, r5
10057616:	4631      	mov	r1, r6
10057618:	f7fb fd2b 	bl	10053072 <aci_event_fifo_push>
1005761c:	b008      	add	sp, #32
1005761e:	bd70      	pop	{r4, r5, r6, pc}

10057620 <__arm_cp.6_0>:
10057620:	200010a0 	.word	0x200010a0

10057624 <__arm_cp.6_1>:
10057624:	200010f4 	.word	0x200010f4

10057628 <__arm_cp.6_2>:
10057628:	200010a4 	.word	0x200010a4

1005762c <hci_le_generate_dhkey_api>:
1005762c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005762e:	b091      	sub	sp, #68	@ 0x44
10057630:	4605      	mov	r5, r0
10057632:	4f0f      	ldr	r7, [pc, #60]	@ (10057670 <__arm_cp.7_0>)
10057634:	683a      	ldr	r2, [r7, #0]
10057636:	3268      	adds	r2, #104	@ 0x68
10057638:	2400      	movs	r4, #0
1005763a:	2120      	movs	r1, #32
1005763c:	4620      	mov	r0, r4
1005763e:	f00b f8b1 	bl	100627a4 <is_Buffer_All_Set_To>
10057642:	2800      	cmp	r0, #0
10057644:	d001      	beq.n	1005764a <hci_le_generate_dhkey_api+0x1e>
10057646:	241f      	movs	r4, #31
10057648:	e00e      	b.n	10057668 <hci_le_generate_dhkey_api+0x3c>
1005764a:	ae01      	add	r6, sp, #4
1005764c:	2240      	movs	r2, #64	@ 0x40
1005764e:	4630      	mov	r0, r6
10057650:	4629      	mov	r1, r5
10057652:	f7ee fcff 	bl	10046054 <BLEPLAT_MemCpy>
10057656:	6838      	ldr	r0, [r7, #0]
10057658:	3068      	adds	r0, #104	@ 0x68
1005765a:	4a06      	ldr	r2, [pc, #24]	@ (10057674 <__arm_cp.7_1>)
1005765c:	4631      	mov	r1, r6
1005765e:	f7ee fd56 	bl	1004610e <BLEPLAT_PkaStartDHkey>
10057662:	1cc0      	adds	r0, r0, #3
10057664:	d100      	bne.n	10057668 <hci_le_generate_dhkey_api+0x3c>
10057666:	2412      	movs	r4, #18
10057668:	4620      	mov	r0, r4
1005766a:	b011      	add	sp, #68	@ 0x44
1005766c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005766e:	46c0      	nop			@ (mov r8, r8)

10057670 <__arm_cp.7_0>:
10057670:	200010f4 	.word	0x200010f4

10057674 <__arm_cp.7_1>:
10057674:	10057599 	.word	0x10057599

10057678 <hci_vs_force_local_p256_debug_key_api>:
10057678:	b580      	push	{r7, lr}
1005767a:	4804      	ldr	r0, [pc, #16]	@ (1005768c <__arm_cp.8_0>)
1005767c:	6800      	ldr	r0, [r0, #0]
1005767e:	3068      	adds	r0, #104	@ 0x68
10057680:	4903      	ldr	r1, [pc, #12]	@ (10057690 <__arm_cp.8_1>)
10057682:	2220      	movs	r2, #32
10057684:	f7ee fce6 	bl	10046054 <BLEPLAT_MemCpy>
10057688:	bd80      	pop	{r7, pc}
1005768a:	46c0      	nop			@ (mov r8, r8)

1005768c <__arm_cp.8_0>:
1005768c:	200010f4 	.word	0x200010f4

10057690 <__arm_cp.8_1>:
10057690:	10069ff0 	.word	0x10069ff0

10057694 <hci_le_check_own_address_type_max_value_ucfg_weak>:
10057694:	2001      	movs	r0, #1
10057696:	4770      	bx	lr

10057698 <hci_le_clear_filter_accept_list>:
10057698:	b580      	push	{r7, lr}
1005769a:	f002 f9a5 	bl	100599e8 <llc_wl_clear_filter_accept_list>
1005769e:	bd80      	pop	{r7, pc}

100576a0 <hci_le_add_device_to_filter_accept_list>:
100576a0:	b5e0      	push	{r5, r6, r7, lr}
100576a2:	2802      	cmp	r0, #2
100576a4:	d301      	bcc.n	100576aa <hci_le_add_device_to_filter_accept_list+0xa>
100576a6:	28ff      	cmp	r0, #255	@ 0xff
100576a8:	d10d      	bne.n	100576c6 <hci_le_add_device_to_filter_accept_list+0x26>
100576aa:	2200      	movs	r2, #0
100576ac:	9200      	str	r2, [sp, #0]
100576ae:	466b      	mov	r3, sp
100576b0:	7018      	strb	r0, [r3, #0]
100576b2:	9201      	str	r2, [sp, #4]
100576b4:	1c58      	adds	r0, r3, #1
100576b6:	2206      	movs	r2, #6
100576b8:	f7ee fccc 	bl	10046054 <BLEPLAT_MemCpy>
100576bc:	9901      	ldr	r1, [sp, #4]
100576be:	9800      	ldr	r0, [sp, #0]
100576c0:	f002 f9ac 	bl	10059a1c <llc_wl_add_device_to_filter_accept_list>
100576c4:	bd8c      	pop	{r2, r3, r7, pc}
100576c6:	2012      	movs	r0, #18
100576c8:	bd8c      	pop	{r2, r3, r7, pc}

100576ca <data_length_extension_csr>:
100576ca:	2001      	movs	r0, #1
100576cc:	4770      	bx	lr

100576ce <pcl_csr_ucfg_weak>:
100576ce:	2000      	movs	r0, #0
100576d0:	4770      	bx	lr

100576d2 <hci_le_read_phy_api>:
100576d2:	b580      	push	{r7, lr}
100576d4:	0a03      	lsrs	r3, r0, #8
100576d6:	2b0e      	cmp	r3, #14
100576d8:	d901      	bls.n	100576de <hci_le_read_phy_api+0xc>
100576da:	2002      	movs	r0, #2
100576dc:	bd80      	pop	{r7, pc}
100576de:	f004 ff5a 	bl	1005c596 <LL_phy_update_read_phy>
100576e2:	bd80      	pop	{r7, pc}

100576e4 <hci_le_set_default_phy_api>:
100576e4:	b580      	push	{r7, lr}
100576e6:	f004 ff70 	bl	1005c5ca <LL_phy_update_set_default_phy>
100576ea:	bd80      	pop	{r7, pc}

100576ec <hci_le_set_phy_api>:
100576ec:	b510      	push	{r4, lr}
100576ee:	9c02      	ldr	r4, [sp, #8]
100576f0:	0424      	lsls	r4, r4, #16
100576f2:	1820      	adds	r0, r4, r0
100576f4:	0212      	lsls	r2, r2, #8
100576f6:	1851      	adds	r1, r2, r1
100576f8:	041a      	lsls	r2, r3, #16
100576fa:	1889      	adds	r1, r1, r2
100576fc:	f004 ff8c 	bl	1005c618 <LL_phy_update_set_phy>
10057700:	bd10      	pop	{r4, pc}

10057702 <phy_upd_csr>:
10057702:	2001      	movs	r0, #1
10057704:	4770      	bx	lr

10057706 <scan_csr_ucfg_weak>:
10057706:	2000      	movs	r0, #0
10057708:	4770      	bx	lr

1005770a <conn_supp_csr>:
1005770a:	2001      	movs	r0, #1
1005770c:	4770      	bx	lr

1005770e <subrate_csr_ucfg_weak>:
1005770e:	2000      	movs	r0, #0
10057710:	4770      	bx	lr
	...

10057714 <L2C_build_connect_update_request>:
10057714:	b5f0      	push	{r4, r5, r6, r7, lr}
10057716:	b087      	sub	sp, #28
10057718:	8901      	ldrh	r1, [r0, #8]
1005771a:	9104      	str	r1, [sp, #16]
1005771c:	88c1      	ldrh	r1, [r0, #6]
1005771e:	9105      	str	r1, [sp, #20]
10057720:	8884      	ldrh	r4, [r0, #4]
10057722:	8846      	ldrh	r6, [r0, #2]
10057724:	8807      	ldrh	r7, [r0, #0]
10057726:	2000      	movs	r0, #0
10057728:	9006      	str	r0, [sp, #24]
1005772a:	a906      	add	r1, sp, #24
1005772c:	4638      	mov	r0, r7
1005772e:	f000 f89f 	bl	10057870 <l2c_get_check_link_status_on_request_sending>
10057732:	4605      	mov	r5, r0
10057734:	2800      	cmp	r0, #0
10057736:	d15a      	bne.n	100577ee <L2C_build_connect_update_request+0xda>
10057738:	9603      	str	r6, [sp, #12]
1005773a:	9402      	str	r4, [sp, #8]
1005773c:	9806      	ldr	r0, [sp, #24]
1005773e:	7880      	ldrb	r0, [r0, #2]
10057740:	07c0      	lsls	r0, r0, #31
10057742:	d151      	bne.n	100577e8 <L2C_build_connect_update_request+0xd4>
10057744:	2400      	movs	r4, #0
10057746:	2210      	movs	r2, #16
10057748:	4620      	mov	r0, r4
1005774a:	4639      	mov	r1, r7
1005774c:	f7fb fa10 	bl	10052b70 <ACL_pkt_get>
10057750:	2800      	cmp	r0, #0
10057752:	d04b      	beq.n	100577ec <L2C_build_connect_update_request+0xd8>
10057754:	4607      	mov	r7, r0
10057756:	482a      	ldr	r0, [pc, #168]	@ (10057800 <__arm_cp.0_0>)
10057758:	9a03      	ldr	r2, [sp, #12]
1005775a:	1f91      	subs	r1, r2, #6
1005775c:	b289      	uxth	r1, r1
1005775e:	2512      	movs	r5, #18
10057760:	4281      	cmp	r1, r0
10057762:	d23d      	bcs.n	100577e0 <L2C_build_connect_update_request+0xcc>
10057764:	9e02      	ldr	r6, [sp, #8]
10057766:	2e06      	cmp	r6, #6
10057768:	d33a      	bcc.n	100577e0 <L2C_build_connect_update_request+0xcc>
1005776a:	1d80      	adds	r0, r0, #6
1005776c:	4286      	cmp	r6, r0
1005776e:	d237      	bcs.n	100577e0 <L2C_build_connect_update_request+0xcc>
10057770:	42b2      	cmp	r2, r6
10057772:	d835      	bhi.n	100577e0 <L2C_build_connect_update_request+0xcc>
10057774:	9a05      	ldr	r2, [sp, #20]
10057776:	0891      	lsrs	r1, r2, #2
10057778:	297c      	cmp	r1, #124	@ 0x7c
1005777a:	d831      	bhi.n	100577e0 <L2C_build_connect_update_request+0xcc>
1005777c:	1c51      	adds	r1, r2, #1
1005777e:	4371      	muls	r1, r6
10057780:	9b04      	ldr	r3, [sp, #16]
10057782:	009a      	lsls	r2, r3, #2
10057784:	4291      	cmp	r1, r2
10057786:	d82b      	bhi.n	100577e0 <L2C_build_connect_update_request+0xcc>
10057788:	2b0a      	cmp	r3, #10
1005778a:	d329      	bcc.n	100577e0 <L2C_build_connect_update_request+0xcc>
1005778c:	4283      	cmp	r3, r0
1005778e:	d227      	bcs.n	100577e0 <L2C_build_connect_update_request+0xcc>
10057790:	9401      	str	r4, [sp, #4]
10057792:	6878      	ldr	r0, [r7, #4]
10057794:	2112      	movs	r1, #18
10057796:	7201      	strb	r1, [r0, #8]
10057798:	6878      	ldr	r0, [r7, #4]
1005779a:	9906      	ldr	r1, [sp, #24]
1005779c:	7909      	ldrb	r1, [r1, #4]
1005779e:	7241      	strb	r1, [r0, #9]
100577a0:	2106      	movs	r1, #6
100577a2:	2508      	movs	r5, #8
100577a4:	4c17      	ldr	r4, [pc, #92]	@ (10057804 <__arm_cp.0_1>)
100577a6:	4638      	mov	r0, r7
100577a8:	462a      	mov	r2, r5
100577aa:	47a0      	blx	r4
100577ac:	4638      	mov	r0, r7
100577ae:	4629      	mov	r1, r5
100577b0:	9a03      	ldr	r2, [sp, #12]
100577b2:	47a0      	blx	r4
100577b4:	210a      	movs	r1, #10
100577b6:	4638      	mov	r0, r7
100577b8:	4632      	mov	r2, r6
100577ba:	4625      	mov	r5, r4
100577bc:	47a0      	blx	r4
100577be:	240c      	movs	r4, #12
100577c0:	4638      	mov	r0, r7
100577c2:	4621      	mov	r1, r4
100577c4:	9a05      	ldr	r2, [sp, #20]
100577c6:	47a8      	blx	r5
100577c8:	210e      	movs	r1, #14
100577ca:	4638      	mov	r0, r7
100577cc:	9a04      	ldr	r2, [sp, #16]
100577ce:	47a8      	blx	r5
100577d0:	807c      	strh	r4, [r7, #2]
100577d2:	2005      	movs	r0, #5
100577d4:	4639      	mov	r1, r7
100577d6:	f000 f9cf 	bl	10057b78 <L2C_send_frame>
100577da:	2800      	cmp	r0, #0
100577dc:	d00a      	beq.n	100577f4 <L2C_build_connect_update_request+0xe0>
100577de:	2581      	movs	r5, #129	@ 0x81
100577e0:	4638      	mov	r0, r7
100577e2:	f7fb f9e7 	bl	10052bb4 <ACL_pkt_release>
100577e6:	e002      	b.n	100577ee <L2C_build_connect_update_request+0xda>
100577e8:	250c      	movs	r5, #12
100577ea:	e000      	b.n	100577ee <L2C_build_connect_update_request+0xda>
100577ec:	2588      	movs	r5, #136	@ 0x88
100577ee:	4628      	mov	r0, r5
100577f0:	b007      	add	sp, #28
100577f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100577f4:	9906      	ldr	r1, [sp, #24]
100577f6:	2012      	movs	r0, #18
100577f8:	f000 f84f 	bl	1005789a <l2c_set_link_status_after_request_enqueued>
100577fc:	9d01      	ldr	r5, [sp, #4]
100577fe:	e7f6      	b.n	100577ee <L2C_build_connect_update_request+0xda>

10057800 <__arm_cp.0_0>:
10057800:	00000c7b 	.word	0x00000c7b

10057804 <__arm_cp.0_1>:
10057804:	10052c1f 	.word	0x10052c1f

10057808 <l2c_get_link_control_block_ref>:
10057808:	b570      	push	{r4, r5, r6, lr}
1005780a:	490b      	ldr	r1, [pc, #44]	@ (10057838 <__arm_cp.0_0>)
1005780c:	7ac9      	ldrb	r1, [r1, #11]
1005780e:	2214      	movs	r2, #20
10057810:	434a      	muls	r2, r1
10057812:	3214      	adds	r2, #20
10057814:	4909      	ldr	r1, [pc, #36]	@ (1005783c <__arm_cp.0_1>)
10057816:	680b      	ldr	r3, [r1, #0]
10057818:	2100      	movs	r1, #0
1005781a:	460d      	mov	r5, r1
1005781c:	460c      	mov	r4, r1
1005781e:	3414      	adds	r4, #20
10057820:	42a2      	cmp	r2, r4
10057822:	d006      	beq.n	10057832 <l2c_get_link_control_block_ref+0x2a>
10057824:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
10057826:	5b75      	ldrh	r5, [r6, r5]
10057828:	4285      	cmp	r5, r0
1005782a:	4625      	mov	r5, r4
1005782c:	d1f7      	bne.n	1005781e <l2c_get_link_control_block_ref+0x16>
1005782e:	1931      	adds	r1, r6, r4
10057830:	3914      	subs	r1, #20
10057832:	4608      	mov	r0, r1
10057834:	bd70      	pop	{r4, r5, r6, pc}
10057836:	46c0      	nop			@ (mov r8, r8)

10057838 <__arm_cp.0_0>:
10057838:	20001108 	.word	0x20001108

1005783c <__arm_cp.0_1>:
1005783c:	200010ec 	.word	0x200010ec

10057840 <l2c_get_link_control_block_index>:
10057840:	b5b0      	push	{r4, r5, r7, lr}
10057842:	4909      	ldr	r1, [pc, #36]	@ (10057868 <__arm_cp.1_0>)
10057844:	7aca      	ldrb	r2, [r1, #11]
10057846:	4909      	ldr	r1, [pc, #36]	@ (1005786c <__arm_cp.1_1>)
10057848:	680b      	ldr	r3, [r1, #0]
1005784a:	2400      	movs	r4, #0
1005784c:	4621      	mov	r1, r4
1005784e:	428a      	cmp	r2, r1
10057850:	d006      	beq.n	10057860 <l2c_get_link_control_block_index+0x20>
10057852:	6add      	ldr	r5, [r3, #44]	@ 0x2c
10057854:	5b2d      	ldrh	r5, [r5, r4]
10057856:	4285      	cmp	r5, r0
10057858:	d003      	beq.n	10057862 <l2c_get_link_control_block_index+0x22>
1005785a:	3414      	adds	r4, #20
1005785c:	1c49      	adds	r1, r1, #1
1005785e:	e7f6      	b.n	1005784e <l2c_get_link_control_block_index+0xe>
10057860:	4611      	mov	r1, r2
10057862:	b2c8      	uxtb	r0, r1
10057864:	bdb0      	pop	{r4, r5, r7, pc}
10057866:	46c0      	nop			@ (mov r8, r8)

10057868 <__arm_cp.1_0>:
10057868:	20001108 	.word	0x20001108

1005786c <__arm_cp.1_1>:
1005786c:	200010ec 	.word	0x200010ec

10057870 <l2c_get_check_link_status_on_request_sending>:
10057870:	b5b0      	push	{r4, r5, r7, lr}
10057872:	460c      	mov	r4, r1
10057874:	4605      	mov	r5, r0
10057876:	f7ff ffc7 	bl	10057808 <l2c_get_link_control_block_ref>
1005787a:	4601      	mov	r1, r0
1005787c:	6020      	str	r0, [r4, #0]
1005787e:	2002      	movs	r0, #2
10057880:	2d00      	cmp	r5, #0
10057882:	d009      	beq.n	10057898 <l2c_get_check_link_status_on_request_sending+0x28>
10057884:	2900      	cmp	r1, #0
10057886:	d007      	beq.n	10057898 <l2c_get_check_link_status_on_request_sending+0x28>
10057888:	7908      	ldrb	r0, [r1, #4]
1005788a:	2800      	cmp	r0, #0
1005788c:	d003      	beq.n	10057896 <l2c_get_check_link_status_on_request_sending+0x26>
1005788e:	7889      	ldrb	r1, [r1, #2]
10057890:	2006      	movs	r0, #6
10057892:	4008      	ands	r0, r1
10057894:	d000      	beq.n	10057898 <l2c_get_check_link_status_on_request_sending+0x28>
10057896:	200c      	movs	r0, #12
10057898:	bdb0      	pop	{r4, r5, r7, pc}

1005789a <l2c_set_link_status_after_request_enqueued>:
1005789a:	7188      	strb	r0, [r1, #6]
1005789c:	7908      	ldrb	r0, [r1, #4]
1005789e:	71c8      	strb	r0, [r1, #7]
100578a0:	7888      	ldrb	r0, [r1, #2]
100578a2:	2206      	movs	r2, #6
100578a4:	4302      	orrs	r2, r0
100578a6:	708a      	strb	r2, [r1, #2]
100578a8:	4770      	bx	lr

100578aa <l2c_post_process_incoming_request_packet>:
100578aa:	7190      	strb	r0, [r2, #6]
100578ac:	7151      	strb	r1, [r2, #5]
100578ae:	7890      	ldrb	r0, [r2, #2]
100578b0:	2104      	movs	r1, #4
100578b2:	4301      	orrs	r1, r0
100578b4:	7091      	strb	r1, [r2, #2]
100578b6:	4770      	bx	lr

100578b8 <l2c_pre_process_incoming_response_packet>:
100578b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100578ba:	4604      	mov	r4, r0
100578bc:	2014      	movs	r0, #20
100578be:	4360      	muls	r0, r4
100578c0:	4b14      	ldr	r3, [pc, #80]	@ (10057914 <__arm_cp.7_0>)
100578c2:	681b      	ldr	r3, [r3, #0]
100578c4:	6add      	ldr	r5, [r3, #44]	@ 0x2c
100578c6:	182d      	adds	r5, r5, r0
100578c8:	78a8      	ldrb	r0, [r5, #2]
100578ca:	0746      	lsls	r6, r0, #29
100578cc:	2081      	movs	r0, #129	@ 0x81
100578ce:	2e00      	cmp	r6, #0
100578d0:	d51f      	bpl.n	10057912 <l2c_pre_process_incoming_response_packet+0x5a>
100578d2:	79ae      	ldrb	r6, [r5, #6]
100578d4:	1c76      	adds	r6, r6, #1
100578d6:	428e      	cmp	r6, r1
100578d8:	d001      	beq.n	100578de <l2c_pre_process_incoming_response_packet+0x26>
100578da:	2901      	cmp	r1, #1
100578dc:	d119      	bne.n	10057912 <l2c_pre_process_incoming_response_packet+0x5a>
100578de:	79e9      	ldrb	r1, [r5, #7]
100578e0:	4291      	cmp	r1, r2
100578e2:	d116      	bne.n	10057912 <l2c_pre_process_incoming_response_packet+0x5a>
100578e4:	1cae      	adds	r6, r5, #2
100578e6:	1daf      	adds	r7, r5, #6
100578e8:	1de8      	adds	r0, r5, #7
100578ea:	9000      	str	r0, [sp, #0]
100578ec:	4618      	mov	r0, r3
100578ee:	4621      	mov	r1, r4
100578f0:	f00a fe55 	bl	1006259e <CST_stop>
100578f4:	2000      	movs	r0, #0
100578f6:	7038      	strb	r0, [r7, #0]
100578f8:	9900      	ldr	r1, [sp, #0]
100578fa:	7008      	strb	r0, [r1, #0]
100578fc:	7831      	ldrb	r1, [r6, #0]
100578fe:	22fb      	movs	r2, #251	@ 0xfb
10057900:	400a      	ands	r2, r1
10057902:	7032      	strb	r2, [r6, #0]
10057904:	7929      	ldrb	r1, [r5, #4]
10057906:	1c4a      	adds	r2, r1, #1
10057908:	b2d1      	uxtb	r1, r2
1005790a:	4291      	cmp	r1, r2
1005790c:	d000      	beq.n	10057910 <l2c_pre_process_incoming_response_packet+0x58>
1005790e:	2101      	movs	r1, #1
10057910:	7129      	strb	r1, [r5, #4]
10057912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10057914 <__arm_cp.7_0>:
10057914:	200010ec 	.word	0x200010ec

10057918 <l2c_release_unexpected_acl_packet>:
10057918:	b580      	push	{r7, lr}
1005791a:	4608      	mov	r0, r1
1005791c:	f7fb f94a 	bl	10052bb4 <ACL_pkt_release>
10057920:	bd80      	pop	{r7, pc}

10057922 <L2C_get_cid_from_basic_packet_header>:
10057922:	b580      	push	{r7, lr}
10057924:	2102      	movs	r1, #2
10057926:	f7fb f96a 	bl	10052bfe <ACL_pkt_read_16b>
1005792a:	bd80      	pop	{r7, pc}

1005792c <L2C_build_command_reject_pdu>:
1005792c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005792e:	b085      	sub	sp, #20
10057930:	461e      	mov	r6, r3
10057932:	9204      	str	r2, [sp, #16]
10057934:	460d      	mov	r5, r1
10057936:	4607      	mov	r7, r0
10057938:	f7ff ff66 	bl	10057808 <l2c_get_link_control_block_ref>
1005793c:	2800      	cmp	r0, #0
1005793e:	d00f      	beq.n	10057960 <L2C_build_command_reject_pdu+0x34>
10057940:	4604      	mov	r4, r0
10057942:	9603      	str	r6, [sp, #12]
10057944:	7940      	ldrb	r0, [r0, #5]
10057946:	2612      	movs	r6, #18
10057948:	42a8      	cmp	r0, r5
1005794a:	d10a      	bne.n	10057962 <L2C_build_command_reject_pdu+0x36>
1005794c:	9904      	ldr	r1, [sp, #16]
1005794e:	2902      	cmp	r1, #2
10057950:	d807      	bhi.n	10057962 <L2C_build_command_reject_pdu+0x36>
10057952:	78a0      	ldrb	r0, [r4, #2]
10057954:	0780      	lsls	r0, r0, #30
10057956:	d407      	bmi.n	10057968 <L2C_build_command_reject_pdu+0x3c>
10057958:	2901      	cmp	r1, #1
1005795a:	d007      	beq.n	1005796c <L2C_build_command_reject_pdu+0x40>
1005795c:	2004      	movs	r0, #4
1005795e:	e006      	b.n	1005796e <L2C_build_command_reject_pdu+0x42>
10057960:	2602      	movs	r6, #2
10057962:	4630      	mov	r0, r6
10057964:	b005      	add	sp, #20
10057966:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057968:	260c      	movs	r6, #12
1005796a:	e7fa      	b.n	10057962 <L2C_build_command_reject_pdu+0x36>
1005796c:	2002      	movs	r0, #2
1005796e:	2900      	cmp	r1, #0
10057970:	d100      	bne.n	10057974 <L2C_build_command_reject_pdu+0x48>
10057972:	4608      	mov	r0, r1
10057974:	9002      	str	r0, [sp, #8]
10057976:	1d82      	adds	r2, r0, #6
10057978:	2600      	movs	r6, #0
1005797a:	4630      	mov	r0, r6
1005797c:	4639      	mov	r1, r7
1005797e:	9201      	str	r2, [sp, #4]
10057980:	f7fb f8f6 	bl	10052b70 <ACL_pkt_get>
10057984:	2800      	cmp	r0, #0
10057986:	d027      	beq.n	100579d8 <L2C_build_command_reject_pdu+0xac>
10057988:	4607      	mov	r7, r0
1005798a:	6840      	ldr	r0, [r0, #4]
1005798c:	2101      	movs	r1, #1
1005798e:	7201      	strb	r1, [r0, #8]
10057990:	6878      	ldr	r0, [r7, #4]
10057992:	7245      	strb	r5, [r0, #9]
10057994:	9802      	ldr	r0, [sp, #8]
10057996:	1c80      	adds	r0, r0, #2
10057998:	b282      	uxth	r2, r0
1005799a:	2106      	movs	r1, #6
1005799c:	4638      	mov	r0, r7
1005799e:	f7fb f93e 	bl	10052c1e <ACL_pkt_write_16b>
100579a2:	2108      	movs	r1, #8
100579a4:	4638      	mov	r0, r7
100579a6:	9d04      	ldr	r5, [sp, #16]
100579a8:	462a      	mov	r2, r5
100579aa:	f7fb f938 	bl	10052c1e <ACL_pkt_write_16b>
100579ae:	2d00      	cmp	r5, #0
100579b0:	d005      	beq.n	100579be <L2C_build_command_reject_pdu+0x92>
100579b2:	210a      	movs	r1, #10
100579b4:	4638      	mov	r0, r7
100579b6:	9a02      	ldr	r2, [sp, #8]
100579b8:	9b03      	ldr	r3, [sp, #12]
100579ba:	f7fb f939 	bl	10052c30 <ACL_pkt_write>
100579be:	9801      	ldr	r0, [sp, #4]
100579c0:	8078      	strh	r0, [r7, #2]
100579c2:	2005      	movs	r0, #5
100579c4:	4639      	mov	r1, r7
100579c6:	f000 f8d7 	bl	10057b78 <L2C_send_frame>
100579ca:	2800      	cmp	r0, #0
100579cc:	d006      	beq.n	100579dc <L2C_build_command_reject_pdu+0xb0>
100579ce:	4638      	mov	r0, r7
100579d0:	f7fb f8f0 	bl	10052bb4 <ACL_pkt_release>
100579d4:	2681      	movs	r6, #129	@ 0x81
100579d6:	e7c4      	b.n	10057962 <L2C_build_command_reject_pdu+0x36>
100579d8:	2688      	movs	r6, #136	@ 0x88
100579da:	e7c2      	b.n	10057962 <L2C_build_command_reject_pdu+0x36>
100579dc:	71a6      	strb	r6, [r4, #6]
100579de:	78a0      	ldrb	r0, [r4, #2]
100579e0:	21fb      	movs	r1, #251	@ 0xfb
100579e2:	4001      	ands	r1, r0
100579e4:	70a1      	strb	r1, [r4, #2]
100579e6:	e7bc      	b.n	10057962 <L2C_build_command_reject_pdu+0x36>

100579e8 <l2c_cos_channel_descriptor_reset>:
100579e8:	b570      	push	{r4, r5, r6, lr}
100579ea:	4604      	mov	r4, r0
100579ec:	2022      	movs	r0, #34	@ 0x22
100579ee:	4910      	ldr	r1, [pc, #64]	@ (10057a30 <__arm_cp.4_0>)
100579f0:	5c08      	ldrb	r0, [r1, r0]
100579f2:	42a0      	cmp	r0, r4
100579f4:	d91b      	bls.n	10057a2e <l2c_cos_channel_descriptor_reset+0x46>
100579f6:	4d0f      	ldr	r5, [pc, #60]	@ (10057a34 <__arm_cp.4_1>)
100579f8:	6829      	ldr	r1, [r5, #0]
100579fa:	2030      	movs	r0, #48	@ 0x30
100579fc:	5c0a      	ldrb	r2, [r1, r0]
100579fe:	1c52      	adds	r2, r2, #1
10057a00:	540a      	strb	r2, [r1, r0]
10057a02:	2234      	movs	r2, #52	@ 0x34
10057a04:	4354      	muls	r4, r2
10057a06:	3130      	adds	r1, #48	@ 0x30
10057a08:	6848      	ldr	r0, [r1, #4]
10057a0a:	1900      	adds	r0, r0, r4
10057a0c:	7883      	ldrb	r3, [r0, #2]
10057a0e:	071b      	lsls	r3, r3, #28
10057a10:	d505      	bpl.n	10057a1e <l2c_cos_channel_descriptor_reset+0x36>
10057a12:	78c3      	ldrb	r3, [r0, #3]
10057a14:	2b11      	cmp	r3, #17
10057a16:	d302      	bcc.n	10057a1e <l2c_cos_channel_descriptor_reset+0x36>
10057a18:	784b      	ldrb	r3, [r1, #1]
10057a1a:	1e5b      	subs	r3, r3, #1
10057a1c:	704b      	strb	r3, [r1, #1]
10057a1e:	8946      	ldrh	r6, [r0, #10]
10057a20:	2100      	movs	r1, #0
10057a22:	f7ee fb27 	bl	10046074 <BLEPLAT_MemSet>
10057a26:	6828      	ldr	r0, [r5, #0]
10057a28:	6b40      	ldr	r0, [r0, #52]	@ 0x34
10057a2a:	1900      	adds	r0, r0, r4
10057a2c:	8146      	strh	r6, [r0, #10]
10057a2e:	bd70      	pop	{r4, r5, r6, pc}

10057a30 <__arm_cp.4_0>:
10057a30:	20001108 	.word	0x20001108

10057a34 <__arm_cp.4_1>:
10057a34:	200010ec 	.word	0x200010ec

10057a38 <L2C_cos_channel_descriptors_reset_pending>:
10057a38:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10057a3a:	460c      	mov	r4, r1
10057a3c:	4605      	mov	r5, r0
10057a3e:	2022      	movs	r0, #34	@ 0x22
10057a40:	4912      	ldr	r1, [pc, #72]	@ (10057a8c <__arm_cp.5_0>)
10057a42:	9002      	str	r0, [sp, #8]
10057a44:	5c08      	ldrb	r0, [r1, r0]
10057a46:	2700      	movs	r7, #0
10057a48:	2603      	movs	r6, #3
10057a4a:	4b11      	ldr	r3, [pc, #68]	@ (10057a90 <__arm_cp.5_1>)
10057a4c:	9501      	str	r5, [sp, #4]
10057a4e:	b2c1      	uxtb	r1, r0
10057a50:	428f      	cmp	r7, r1
10057a52:	d219      	bcs.n	10057a88 <L2C_cos_channel_descriptors_reset_pending+0x50>
10057a54:	6819      	ldr	r1, [r3, #0]
10057a56:	6b49      	ldr	r1, [r1, #52]	@ 0x34
10057a58:	198a      	adds	r2, r1, r6
10057a5a:	1ed2      	subs	r2, r2, #3
10057a5c:	8812      	ldrh	r2, [r2, #0]
10057a5e:	42aa      	cmp	r2, r5
10057a60:	d10f      	bne.n	10057a82 <L2C_cos_channel_descriptors_reset_pending+0x4a>
10057a62:	2cff      	cmp	r4, #255	@ 0xff
10057a64:	d002      	beq.n	10057a6c <L2C_cos_channel_descriptors_reset_pending+0x34>
10057a66:	5d89      	ldrb	r1, [r1, r6]
10057a68:	42a1      	cmp	r1, r4
10057a6a:	d10a      	bne.n	10057a82 <L2C_cos_channel_descriptors_reset_pending+0x4a>
10057a6c:	b2f8      	uxtb	r0, r7
10057a6e:	4625      	mov	r5, r4
10057a70:	461c      	mov	r4, r3
10057a72:	f7ff ffb9 	bl	100579e8 <l2c_cos_channel_descriptor_reset>
10057a76:	4623      	mov	r3, r4
10057a78:	462c      	mov	r4, r5
10057a7a:	9d01      	ldr	r5, [sp, #4]
10057a7c:	9802      	ldr	r0, [sp, #8]
10057a7e:	4903      	ldr	r1, [pc, #12]	@ (10057a8c <__arm_cp.5_0>)
10057a80:	5c08      	ldrb	r0, [r1, r0]
10057a82:	3634      	adds	r6, #52	@ 0x34
10057a84:	1c7f      	adds	r7, r7, #1
10057a86:	e7e2      	b.n	10057a4e <L2C_cos_channel_descriptors_reset_pending+0x16>
10057a88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10057a8a:	46c0      	nop			@ (mov r8, r8)

10057a8c <__arm_cp.5_0>:
10057a8c:	20001108 	.word	0x20001108

10057a90 <__arm_cp.5_1>:
10057a90:	200010ec 	.word	0x200010ec

10057a94 <l2c_cos_csr_ucfg_weak>:
10057a94:	2000      	movs	r0, #0
10057a96:	4770      	bx	lr

10057a98 <L2C_cos_cfc_init_ucfg_weak>:
10057a98:	2000      	movs	r0, #0
10057a9a:	4770      	bx	lr

10057a9c <l2c_cos_process_pending_actions_tsk_ucfg_weak>:
10057a9c:	4770      	bx	lr

10057a9e <L2C_cos_physical_link_disconnection_hndl_ucfg_weak>:
10057a9e:	4770      	bx	lr

10057aa0 <l2c_cos_sdu_enqueue_for_segmentation_ucfg_weak>:
10057aa0:	2000      	movs	r0, #0
10057aa2:	4770      	bx	lr

10057aa4 <l2c_cos_sdu_segmentation_tsk_ucfg_weak>:
10057aa4:	4770      	bx	lr

10057aa6 <l2c_cos_transmit_pdu_packets_tsk_ucfg_weak>:
10057aa6:	4770      	bx	lr

10057aa8 <l2cap_timers_callback_wrapper>:
10057aa8:	b580      	push	{r7, lr}
10057aaa:	6940      	ldr	r0, [r0, #20]
10057aac:	4901      	ldr	r1, [pc, #4]	@ (10057ab4 <__arm_cp.0_0>)
10057aae:	f00a fe3a 	bl	10062726 <cst_sharedCallback>
10057ab2:	bd80      	pop	{r7, pc}

10057ab4 <__arm_cp.0_0>:
10057ab4:	10057ab9 	.word	0x10057ab9

10057ab8 <l2cap_timers_callback>:
10057ab8:	b580      	push	{r7, lr}
10057aba:	4903      	ldr	r1, [pc, #12]	@ (10057ac8 <__arm_cp.1_0>)
10057abc:	7ac9      	ldrb	r1, [r1, #11]
10057abe:	4281      	cmp	r1, r0
10057ac0:	d301      	bcc.n	10057ac6 <l2cap_timers_callback+0xe>
10057ac2:	f000 fa77 	bl	10057fb4 <L2C_timeout_handler_signalling>
10057ac6:	bd80      	pop	{r7, pc}

10057ac8 <__arm_cp.1_0>:
10057ac8:	20001108 	.word	0x20001108

10057acc <L2C_init>:
10057acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10057ace:	4605      	mov	r5, r0
10057ad0:	2001      	movs	r0, #1
10057ad2:	2168      	movs	r1, #104	@ 0x68
10057ad4:	f007 fcea 	bl	1005f4ac <csmem_mem_0_assign>
10057ad8:	4f23      	ldr	r7, [pc, #140]	@ (10057b68 <__arm_cp.3_0>)
10057ada:	6038      	str	r0, [r7, #0]
10057adc:	4e23      	ldr	r6, [pc, #140]	@ (10057b6c <__arm_cp.3_1>)
10057ade:	7af0      	ldrb	r0, [r6, #11]
10057ae0:	2414      	movs	r4, #20
10057ae2:	4621      	mov	r1, r4
10057ae4:	f007 fce2 	bl	1005f4ac <csmem_mem_0_assign>
10057ae8:	4601      	mov	r1, r0
10057aea:	6838      	ldr	r0, [r7, #0]
10057aec:	62c1      	str	r1, [r0, #44]	@ 0x2c
10057aee:	2d01      	cmp	r5, #1
10057af0:	d110      	bne.n	10057b14 <L2C_init+0x48>
10057af2:	305c      	adds	r0, #92	@ 0x5c
10057af4:	f00a fed2 	bl	1006289c <ACL_list_init>
10057af8:	2522      	movs	r5, #34	@ 0x22
10057afa:	5d70      	ldrb	r0, [r6, r5]
10057afc:	2134      	movs	r1, #52	@ 0x34
10057afe:	f007 fcd5 	bl	1005f4ac <csmem_mem_0_assign>
10057b02:	6839      	ldr	r1, [r7, #0]
10057b04:	6348      	str	r0, [r1, #52]	@ 0x34
10057b06:	5d70      	ldrb	r0, [r6, r5]
10057b08:	0040      	lsls	r0, r0, #1
10057b0a:	2110      	movs	r1, #16
10057b0c:	f007 fcce 	bl	1005f4ac <csmem_mem_0_assign>
10057b10:	6839      	ldr	r1, [r7, #0]
10057b12:	6488      	str	r0, [r1, #72]	@ 0x48
10057b14:	7af0      	ldrb	r0, [r6, #11]
10057b16:	1c41      	adds	r1, r0, #1
10057b18:	4d15      	ldr	r5, [pc, #84]	@ (10057b70 <__arm_cp.3_2>)
10057b1a:	2201      	movs	r2, #1
10057b1c:	4628      	mov	r0, r5
10057b1e:	f007 fcb3 	bl	1005f488 <csmem_mem_assign>
10057b22:	6839      	ldr	r1, [r7, #0]
10057b24:	6208      	str	r0, [r1, #32]
10057b26:	7af1      	ldrb	r1, [r6, #11]
10057b28:	2202      	movs	r2, #2
10057b2a:	4628      	mov	r0, r5
10057b2c:	f007 fcac 	bl	1005f488 <csmem_mem_assign>
10057b30:	683d      	ldr	r5, [r7, #0]
10057b32:	6268      	str	r0, [r5, #36]	@ 0x24
10057b34:	7af1      	ldrb	r1, [r6, #11]
10057b36:	4a0f      	ldr	r2, [pc, #60]	@ (10057b74 <__arm_cp.3_3>)
10057b38:	2307      	movs	r3, #7
10057b3a:	4628      	mov	r0, r5
10057b3c:	f00a fd1a 	bl	10062574 <CST_init>
10057b40:	6838      	ldr	r0, [r7, #0]
10057b42:	2117      	movs	r1, #23
10057b44:	8501      	strh	r1, [r0, #40]	@ 0x28
10057b46:	8c31      	ldrh	r1, [r6, #32]
10057b48:	2917      	cmp	r1, #23
10057b4a:	d201      	bcs.n	10057b50 <L2C_init+0x84>
10057b4c:	2086      	movs	r0, #134	@ 0x86
10057b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10057b50:	8541      	strh	r1, [r0, #42]	@ 0x2a
10057b52:	7af1      	ldrb	r1, [r6, #11]
10057b54:	434c      	muls	r4, r1
10057b56:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
10057b58:	2100      	movs	r1, #0
10057b5a:	4622      	mov	r2, r4
10057b5c:	f7ee fa8a 	bl	10046074 <BLEPLAT_MemSet>
10057b60:	f7ff ff9a 	bl	10057a98 <L2C_cos_cfc_init_ucfg_weak>
10057b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10057b66:	46c0      	nop			@ (mov r8, r8)

10057b68 <__arm_cp.3_0>:
10057b68:	200010ec 	.word	0x200010ec

10057b6c <__arm_cp.3_1>:
10057b6c:	20001108 	.word	0x20001108

10057b70 <__arm_cp.3_2>:
10057b70:	20001104 	.word	0x20001104

10057b74 <__arm_cp.3_3>:
10057b74:	10057aa9 	.word	0x10057aa9

10057b78 <L2C_send_frame>:
10057b78:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10057b7a:	460c      	mov	r4, r1
10057b7c:	1f01      	subs	r1, r0, #4
10057b7e:	4606      	mov	r6, r0
10057b80:	2902      	cmp	r1, #2
10057b82:	d821      	bhi.n	10057bc8 <L2C_send_frame+0x50>
10057b84:	8862      	ldrh	r2, [r4, #2]
10057b86:	2500      	movs	r5, #0
10057b88:	4620      	mov	r0, r4
10057b8a:	4629      	mov	r1, r5
10057b8c:	f7fb f847 	bl	10052c1e <ACL_pkt_write_16b>
10057b90:	2702      	movs	r7, #2
10057b92:	4620      	mov	r0, r4
10057b94:	4639      	mov	r1, r7
10057b96:	4632      	mov	r2, r6
10057b98:	f7fb f841 	bl	10052c1e <ACL_pkt_write_16b>
10057b9c:	8225      	strh	r5, [r4, #16]
10057b9e:	81e5      	strh	r5, [r4, #14]
10057ba0:	7325      	strb	r5, [r4, #12]
10057ba2:	6860      	ldr	r0, [r4, #4]
10057ba4:	6160      	str	r0, [r4, #20]
10057ba6:	61a0      	str	r0, [r4, #24]
10057ba8:	8860      	ldrh	r0, [r4, #2]
10057baa:	1d00      	adds	r0, r0, #4
10057bac:	8060      	strh	r0, [r4, #2]
10057bae:	7a20      	ldrb	r0, [r4, #8]
10057bb0:	4338      	orrs	r0, r7
10057bb2:	7220      	strb	r0, [r4, #8]
10057bb4:	4620      	mov	r0, r4
10057bb6:	f7fa ff69 	bl	10052a8c <Acl_Transmit_Data>
10057bba:	2800      	cmp	r0, #0
10057bbc:	d014      	beq.n	10057be8 <L2C_send_frame+0x70>
10057bbe:	8860      	ldrh	r0, [r4, #2]
10057bc0:	1f00      	subs	r0, r0, #4
10057bc2:	8060      	strh	r0, [r4, #2]
10057bc4:	2581      	movs	r5, #129	@ 0x81
10057bc6:	e00f      	b.n	10057be8 <L2C_send_frame+0x70>
10057bc8:	25a0      	movs	r5, #160	@ 0xa0
10057bca:	283f      	cmp	r0, #63	@ 0x3f
10057bcc:	d00c      	beq.n	10057be8 <L2C_send_frame+0x70>
10057bce:	3820      	subs	r0, #32
10057bd0:	285f      	cmp	r0, #95	@ 0x5f
10057bd2:	d809      	bhi.n	10057be8 <L2C_send_frame+0x70>
10057bd4:	a801      	add	r0, sp, #4
10057bd6:	8086      	strh	r6, [r0, #4]
10057bd8:	2122      	movs	r1, #34	@ 0x22
10057bda:	4a04      	ldr	r2, [pc, #16]	@ (10057bec <__arm_cp.4_0>)
10057bdc:	5c51      	ldrb	r1, [r2, r1]
10057bde:	7181      	strb	r1, [r0, #6]
10057be0:	9401      	str	r4, [sp, #4]
10057be2:	f7ff ff5d 	bl	10057aa0 <l2c_cos_sdu_enqueue_for_segmentation_ucfg_weak>
10057be6:	4605      	mov	r5, r0
10057be8:	4628      	mov	r0, r5
10057bea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10057bec <__arm_cp.4_0>:
10057bec:	20001108 	.word	0x20001108

10057bf0 <L2C_receive_data>:
10057bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
10057bf2:	b0c3      	sub	sp, #268	@ 0x10c
10057bf4:	4604      	mov	r4, r0
10057bf6:	8800      	ldrh	r0, [r0, #0]
10057bf8:	f7ff fe06 	bl	10057808 <l2c_get_link_control_block_ref>
10057bfc:	2800      	cmp	r0, #0
10057bfe:	d07c      	beq.n	10057cfa <L2C_receive_data+0x10a>
10057c00:	4605      	mov	r5, r0
10057c02:	7a20      	ldrb	r0, [r4, #8]
10057c04:	2703      	movs	r7, #3
10057c06:	4007      	ands	r7, r0
10057c08:	6928      	ldr	r0, [r5, #16]
10057c0a:	462a      	mov	r2, r5
10057c0c:	320c      	adds	r2, #12
10057c0e:	2f02      	cmp	r7, #2
10057c10:	9203      	str	r2, [sp, #12]
10057c12:	d108      	bne.n	10057c26 <L2C_receive_data+0x36>
10057c14:	2800      	cmp	r0, #0
10057c16:	d02f      	beq.n	10057c78 <L2C_receive_data+0x88>
10057c18:	8811      	ldrh	r1, [r2, #0]
10057c1a:	2684      	movs	r6, #132	@ 0x84
10057c1c:	2904      	cmp	r1, #4
10057c1e:	d354      	bcc.n	10057cca <L2C_receive_data+0xda>
10057c20:	2101      	movs	r1, #1
10057c22:	9102      	str	r1, [sp, #8]
10057c24:	e031      	b.n	10057c8a <L2C_receive_data+0x9a>
10057c26:	2800      	cmp	r0, #0
10057c28:	d04a      	beq.n	10057cc0 <L2C_receive_data+0xd0>
10057c2a:	8866      	ldrh	r6, [r4, #2]
10057c2c:	2e00      	cmp	r6, #0
10057c2e:	d026      	beq.n	10057c7e <L2C_receive_data+0x8e>
10057c30:	2100      	movs	r1, #0
10057c32:	9101      	str	r1, [sp, #4]
10057c34:	a804      	add	r0, sp, #16
10057c36:	9002      	str	r0, [sp, #8]
10057c38:	4620      	mov	r0, r4
10057c3a:	4632      	mov	r2, r6
10057c3c:	9b02      	ldr	r3, [sp, #8]
10057c3e:	f7fa ffd5 	bl	10052bec <ACL_pkt_read>
10057c42:	6928      	ldr	r0, [r5, #16]
10057c44:	6840      	ldr	r0, [r0, #4]
10057c46:	9000      	str	r0, [sp, #0]
10057c48:	4620      	mov	r0, r4
10057c4a:	f7fa fffa 	bl	10052c42 <ACL_pkt_extract_pdu>
10057c4e:	4601      	mov	r1, r0
10057c50:	9800      	ldr	r0, [sp, #0]
10057c52:	f007 fdbe 	bl	1005f7d2 <Mem_Buff_append>
10057c56:	89a9      	ldrh	r1, [r5, #12]
10057c58:	6928      	ldr	r0, [r5, #16]
10057c5a:	4632      	mov	r2, r6
10057c5c:	9b02      	ldr	r3, [sp, #8]
10057c5e:	f7fa ffe7 	bl	10052c30 <ACL_pkt_write>
10057c62:	89a8      	ldrh	r0, [r5, #12]
10057c64:	1980      	adds	r0, r0, r6
10057c66:	81a8      	strh	r0, [r5, #12]
10057c68:	b281      	uxth	r1, r0
10057c6a:	6928      	ldr	r0, [r5, #16]
10057c6c:	f7fa ffab 	bl	10052bc6 <ACL_pkt_resize>
10057c70:	9a03      	ldr	r2, [sp, #12]
10057c72:	9801      	ldr	r0, [sp, #4]
10057c74:	8060      	strh	r0, [r4, #2]
10057c76:	e002      	b.n	10057c7e <L2C_receive_data+0x8e>
10057c78:	612c      	str	r4, [r5, #16]
10057c7a:	8860      	ldrh	r0, [r4, #2]
10057c7c:	81a8      	strh	r0, [r5, #12]
10057c7e:	8810      	ldrh	r0, [r2, #0]
10057c80:	2804      	cmp	r0, #4
10057c82:	d31b      	bcc.n	10057cbc <L2C_receive_data+0xcc>
10057c84:	6928      	ldr	r0, [r5, #16]
10057c86:	2600      	movs	r6, #0
10057c88:	9602      	str	r6, [sp, #8]
10057c8a:	2100      	movs	r1, #0
10057c8c:	9101      	str	r1, [sp, #4]
10057c8e:	f7fa ffb6 	bl	10052bfe <ACL_pkt_read_16b>
10057c92:	1d00      	adds	r0, r0, #4
10057c94:	b281      	uxth	r1, r0
10057c96:	89aa      	ldrh	r2, [r5, #12]
10057c98:	428a      	cmp	r2, r1
10057c9a:	d816      	bhi.n	10057cca <L2C_receive_data+0xda>
10057c9c:	d112      	bne.n	10057cc4 <L2C_receive_data+0xd4>
10057c9e:	6929      	ldr	r1, [r5, #16]
10057ca0:	8048      	strh	r0, [r1, #2]
10057ca2:	2001      	movs	r0, #1
10057ca4:	f000 f832 	bl	10057d0c <L2C_mux_acl_packet>
10057ca8:	2800      	cmp	r0, #0
10057caa:	d02d      	beq.n	10057d08 <L2C_receive_data+0x118>
10057cac:	6928      	ldr	r0, [r5, #16]
10057cae:	2684      	movs	r6, #132	@ 0x84
10057cb0:	42a0      	cmp	r0, r4
10057cb2:	d126      	bne.n	10057d02 <L2C_receive_data+0x112>
10057cb4:	9801      	ldr	r0, [sp, #4]
10057cb6:	81a8      	strh	r0, [r5, #12]
10057cb8:	6128      	str	r0, [r5, #16]
10057cba:	e022      	b.n	10057d02 <L2C_receive_data+0x112>
10057cbc:	2600      	movs	r6, #0
10057cbe:	e018      	b.n	10057cf2 <L2C_receive_data+0x102>
10057cc0:	2600      	movs	r6, #0
10057cc2:	e002      	b.n	10057cca <L2C_receive_data+0xda>
10057cc4:	9802      	ldr	r0, [sp, #8]
10057cc6:	2800      	cmp	r0, #0
10057cc8:	d013      	beq.n	10057cf2 <L2C_receive_data+0x102>
10057cca:	78a8      	ldrb	r0, [r5, #2]
10057ccc:	2110      	movs	r1, #16
10057cce:	4301      	orrs	r1, r0
10057cd0:	70a9      	strb	r1, [r5, #2]
10057cd2:	2042      	movs	r0, #66	@ 0x42
10057cd4:	2101      	movs	r1, #1
10057cd6:	2202      	movs	r2, #2
10057cd8:	462b      	mov	r3, r5
10057cda:	f00c f815 	bl	10063d08 <aci_hal_fw_error_event_push_noinline>
10057cde:	6928      	ldr	r0, [r5, #16]
10057ce0:	2800      	cmp	r0, #0
10057ce2:	d006      	beq.n	10057cf2 <L2C_receive_data+0x102>
10057ce4:	f7fa ff66 	bl	10052bb4 <ACL_pkt_release>
10057ce8:	2000      	movs	r0, #0
10057cea:	6128      	str	r0, [r5, #16]
10057cec:	9903      	ldr	r1, [sp, #12]
10057cee:	2000      	movs	r0, #0
10057cf0:	8008      	strh	r0, [r1, #0]
10057cf2:	2e00      	cmp	r6, #0
10057cf4:	d105      	bne.n	10057d02 <L2C_receive_data+0x112>
10057cf6:	2f01      	cmp	r7, #1
10057cf8:	d103      	bne.n	10057d02 <L2C_receive_data+0x112>
10057cfa:	4620      	mov	r0, r4
10057cfc:	f7fa ff5a 	bl	10052bb4 <ACL_pkt_release>
10057d00:	2600      	movs	r6, #0
10057d02:	4630      	mov	r0, r6
10057d04:	b043      	add	sp, #268	@ 0x10c
10057d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057d08:	9801      	ldr	r0, [sp, #4]
10057d0a:	e7ee      	b.n	10057cea <L2C_receive_data+0xfa>

10057d0c <L2C_mux_acl_packet>:
10057d0c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10057d0e:	460c      	mov	r4, r1
10057d10:	4605      	mov	r5, r0
10057d12:	8848      	ldrh	r0, [r1, #2]
10057d14:	1f00      	subs	r0, r0, #4
10057d16:	8048      	strh	r0, [r1, #2]
10057d18:	4608      	mov	r0, r1
10057d1a:	f7ff fe02 	bl	10057922 <L2C_get_cid_from_basic_packet_header>
10057d1e:	1f01      	subs	r1, r0, #4
10057d20:	2902      	cmp	r1, #2
10057d22:	d80c      	bhi.n	10057d3e <L2C_mux_acl_packet+0x32>
10057d24:	2806      	cmp	r0, #6
10057d26:	d01a      	beq.n	10057d5e <L2C_mux_acl_packet+0x52>
10057d28:	2805      	cmp	r0, #5
10057d2a:	d01d      	beq.n	10057d68 <L2C_mux_acl_packet+0x5c>
10057d2c:	2804      	cmp	r0, #4
10057d2e:	d111      	bne.n	10057d54 <L2C_mux_acl_packet+0x48>
10057d30:	2004      	movs	r0, #4
10057d32:	81a0      	strh	r0, [r4, #12]
10057d34:	4628      	mov	r0, r5
10057d36:	4621      	mov	r1, r4
10057d38:	f7fc fd7c 	bl	10054834 <GAT_att_cmn_rcv>
10057d3c:	e018      	b.n	10057d70 <L2C_mux_acl_packet+0x64>
10057d3e:	283f      	cmp	r0, #63	@ 0x3f
10057d40:	d008      	beq.n	10057d54 <L2C_mux_acl_packet+0x48>
10057d42:	3820      	subs	r0, #32
10057d44:	285f      	cmp	r0, #95	@ 0x5f
10057d46:	d805      	bhi.n	10057d54 <L2C_mux_acl_packet+0x48>
10057d48:	4668      	mov	r0, sp
10057d4a:	7005      	strb	r5, [r0, #0]
10057d4c:	9401      	str	r4, [sp, #4]
10057d4e:	f00d fb29 	bl	100653a4 <l2c_cos_hndl_incoming_le_frame_ucfg_weak>
10057d52:	e00d      	b.n	10057d70 <L2C_mux_acl_packet+0x64>
10057d54:	4628      	mov	r0, r5
10057d56:	4621      	mov	r1, r4
10057d58:	f7ff fdde 	bl	10057918 <l2c_release_unexpected_acl_packet>
10057d5c:	e00e      	b.n	10057d7c <L2C_mux_acl_packet+0x70>
10057d5e:	4628      	mov	r0, r5
10057d60:	4621      	mov	r1, r4
10057d62:	f00a f961 	bl	10062028 <smp_sap_l2c_acl_data_hndl>
10057d66:	e003      	b.n	10057d70 <L2C_mux_acl_packet+0x64>
10057d68:	4628      	mov	r0, r5
10057d6a:	4621      	mov	r1, r4
10057d6c:	f000 f808 	bl	10057d80 <L2C_acl_cframe_signaling_hndl>
10057d70:	2800      	cmp	r0, #0
10057d72:	d003      	beq.n	10057d7c <L2C_mux_acl_packet+0x70>
10057d74:	8861      	ldrh	r1, [r4, #2]
10057d76:	1d09      	adds	r1, r1, #4
10057d78:	8061      	strh	r1, [r4, #2]
10057d7a:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10057d7c:	2000      	movs	r0, #0
10057d7e:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10057d80 <L2C_acl_cframe_signaling_hndl>:
10057d80:	b5f0      	push	{r4, r5, r6, r7, lr}
10057d82:	b085      	sub	sp, #20
10057d84:	460c      	mov	r4, r1
10057d86:	4606      	mov	r6, r0
10057d88:	880f      	ldrh	r7, [r1, #0]
10057d8a:	4638      	mov	r0, r7
10057d8c:	f7ff fd58 	bl	10057840 <l2c_get_link_control_block_index>
10057d90:	4605      	mov	r5, r0
10057d92:	4880      	ldr	r0, [pc, #512]	@ (10057f94 <__arm_cp.7_0>)
10057d94:	7ac1      	ldrb	r1, [r0, #11]
10057d96:	428d      	cmp	r5, r1
10057d98:	d206      	bcs.n	10057da8 <L2C_acl_cframe_signaling_hndl+0x28>
10057d9a:	2014      	movs	r0, #20
10057d9c:	4368      	muls	r0, r5
10057d9e:	4a7e      	ldr	r2, [pc, #504]	@ (10057f98 <__arm_cp.7_1>)
10057da0:	6812      	ldr	r2, [r2, #0]
10057da2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
10057da4:	1810      	adds	r0, r2, r0
10057da6:	9002      	str	r0, [sp, #8]
10057da8:	6862      	ldr	r2, [r4, #4]
10057daa:	7a10      	ldrb	r0, [r2, #8]
10057dac:	2300      	movs	r3, #0
10057dae:	2e01      	cmp	r6, #1
10057db0:	d01c      	beq.n	10057dec <L2C_acl_cframe_signaling_hndl+0x6c>
10057db2:	2e00      	cmp	r6, #0
10057db4:	d13c      	bne.n	10057e30 <L2C_acl_cframe_signaling_hndl+0xb0>
10057db6:	461e      	mov	r6, r3
10057db8:	428d      	cmp	r5, r1
10057dba:	d212      	bcs.n	10057de2 <L2C_acl_cframe_signaling_hndl+0x62>
10057dbc:	2819      	cmp	r0, #25
10057dbe:	d80b      	bhi.n	10057dd8 <L2C_acl_cframe_signaling_hndl+0x58>
10057dc0:	2101      	movs	r1, #1
10057dc2:	4081      	lsls	r1, r0
10057dc4:	4879      	ldr	r0, [pc, #484]	@ (10057fac <__arm_cp.7_6>)
10057dc6:	4201      	tst	r1, r0
10057dc8:	d006      	beq.n	10057dd8 <L2C_acl_cframe_signaling_hndl+0x58>
10057dca:	4873      	ldr	r0, [pc, #460]	@ (10057f98 <__arm_cp.7_1>)
10057dcc:	6800      	ldr	r0, [r0, #0]
10057dce:	2201      	movs	r2, #1
10057dd0:	4b77      	ldr	r3, [pc, #476]	@ (10057fb0 <__arm_cp.7_7>)
10057dd2:	4629      	mov	r1, r5
10057dd4:	f00a fc19 	bl	1006260a <CST_start>
10057dd8:	9a02      	ldr	r2, [sp, #8]
10057dda:	7890      	ldrb	r0, [r2, #2]
10057ddc:	21fd      	movs	r1, #253	@ 0xfd
10057dde:	4001      	ands	r1, r0
10057de0:	7091      	strb	r1, [r2, #2]
10057de2:	4620      	mov	r0, r4
10057de4:	f7fa fee6 	bl	10052bb4 <ACL_pkt_release>
10057de8:	4630      	mov	r0, r6
10057dea:	e0d0      	b.n	10057f8e <L2C_acl_cframe_signaling_hndl+0x20e>
10057dec:	428d      	cmp	r5, r1
10057dee:	d300      	bcc.n	10057df2 <L2C_acl_cframe_signaling_hndl+0x72>
10057df0:	e0c8      	b.n	10057f84 <L2C_acl_cframe_signaling_hndl+0x204>
10057df2:	7a56      	ldrb	r6, [r2, #9]
10057df4:	2813      	cmp	r0, #19
10057df6:	d81d      	bhi.n	10057e34 <L2C_acl_cframe_signaling_hndl+0xb4>
10057df8:	2101      	movs	r1, #1
10057dfa:	9100      	str	r1, [sp, #0]
10057dfc:	4081      	lsls	r1, r0
10057dfe:	4a67      	ldr	r2, [pc, #412]	@ (10057f9c <__arm_cp.7_2>)
10057e00:	4211      	tst	r1, r2
10057e02:	d017      	beq.n	10057e34 <L2C_acl_cframe_signaling_hndl+0xb4>
10057e04:	2801      	cmp	r0, #1
10057e06:	d021      	beq.n	10057e4c <L2C_acl_cframe_signaling_hndl+0xcc>
10057e08:	2114      	movs	r1, #20
10057e0a:	4a63      	ldr	r2, [pc, #396]	@ (10057f98 <__arm_cp.7_1>)
10057e0c:	6812      	ldr	r2, [r2, #0]
10057e0e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
10057e10:	2813      	cmp	r0, #19
10057e12:	d03e      	beq.n	10057e92 <L2C_acl_cframe_signaling_hndl+0x112>
10057e14:	2812      	cmp	r0, #18
10057e16:	d000      	beq.n	10057e1a <L2C_acl_cframe_signaling_hndl+0x9a>
10057e18:	e0b4      	b.n	10057f84 <L2C_acl_cframe_signaling_hndl+0x204>
10057e1a:	9301      	str	r3, [sp, #4]
10057e1c:	4608      	mov	r0, r1
10057e1e:	4368      	muls	r0, r5
10057e20:	1810      	adds	r0, r2, r0
10057e22:	7883      	ldrb	r3, [r0, #2]
10057e24:	07df      	lsls	r7, r3, #31
10057e26:	d166      	bne.n	10057ef6 <L2C_acl_cframe_signaling_hndl+0x176>
10057e28:	7146      	strb	r6, [r0, #5]
10057e2a:	8820      	ldrh	r0, [r4, #0]
10057e2c:	2200      	movs	r2, #0
10057e2e:	e09d      	b.n	10057f6c <L2C_acl_cframe_signaling_hndl+0x1ec>
10057e30:	4618      	mov	r0, r3
10057e32:	e0ac      	b.n	10057f8e <L2C_acl_cframe_signaling_hndl+0x20e>
10057e34:	9301      	str	r3, [sp, #4]
10057e36:	f00d fab3 	bl	100653a0 <L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak>
10057e3a:	2800      	cmp	r0, #0
10057e3c:	d100      	bne.n	10057e40 <L2C_acl_cframe_signaling_hndl+0xc0>
10057e3e:	e091      	b.n	10057f64 <L2C_acl_cframe_signaling_hndl+0x1e4>
10057e40:	a803      	add	r0, sp, #12
10057e42:	7105      	strb	r5, [r0, #4]
10057e44:	9403      	str	r4, [sp, #12]
10057e46:	f00d faa9 	bl	1006539c <L2C_cos_process_cfc_mode_command_ucfg_weak>
10057e4a:	e093      	b.n	10057f74 <L2C_acl_cframe_signaling_hndl+0x1f4>
10057e4c:	2701      	movs	r7, #1
10057e4e:	4628      	mov	r0, r5
10057e50:	4639      	mov	r1, r7
10057e52:	4632      	mov	r2, r6
10057e54:	9301      	str	r3, [sp, #4]
10057e56:	f7ff fd2f 	bl	100578b8 <l2c_pre_process_incoming_response_packet>
10057e5a:	9b01      	ldr	r3, [sp, #4]
10057e5c:	2800      	cmp	r0, #0
10057e5e:	d000      	beq.n	10057e62 <L2C_acl_cframe_signaling_hndl+0xe2>
10057e60:	e090      	b.n	10057f84 <L2C_acl_cframe_signaling_hndl+0x204>
10057e62:	8826      	ldrh	r6, [r4, #0]
10057e64:	484e      	ldr	r0, [pc, #312]	@ (10057fa0 <__arm_cp.7_3>)
10057e66:	6800      	ldr	r0, [r0, #0]
10057e68:	6980      	ldr	r0, [r0, #24]
10057e6a:	2142      	movs	r1, #66	@ 0x42
10057e6c:	2252      	movs	r2, #82	@ 0x52
10057e6e:	2303      	movs	r3, #3
10057e70:	f7fb f862 	bl	10052f38 <aci_event_fifo_push_header>
10057e74:	9b01      	ldr	r3, [sp, #4]
10057e76:	2800      	cmp	r0, #0
10057e78:	d100      	bne.n	10057e7c <L2C_acl_cframe_signaling_hndl+0xfc>
10057e7a:	e083      	b.n	10057f84 <L2C_acl_cframe_signaling_hndl+0x204>
10057e7c:	4605      	mov	r5, r0
10057e7e:	4631      	mov	r1, r6
10057e80:	1d06      	adds	r6, r0, #4
10057e82:	4630      	mov	r0, r6
10057e84:	4622      	mov	r2, r4
10057e86:	f7fb fbe7 	bl	10053658 <aci_l2cap_command_reject_event_copy>
10057e8a:	02f8      	lsls	r0, r7, #11
10057e8c:	300a      	adds	r0, #10
10057e8e:	2108      	movs	r1, #8
10057e90:	e058      	b.n	10057f44 <L2C_acl_cframe_signaling_hndl+0x1c4>
10057e92:	4369      	muls	r1, r5
10057e94:	1850      	adds	r0, r2, r1
10057e96:	7880      	ldrb	r0, [r0, #2]
10057e98:	07c0      	lsls	r0, r0, #31
10057e9a:	d173      	bne.n	10057f84 <L2C_acl_cframe_signaling_hndl+0x204>
10057e9c:	2113      	movs	r1, #19
10057e9e:	4628      	mov	r0, r5
10057ea0:	4632      	mov	r2, r6
10057ea2:	9301      	str	r3, [sp, #4]
10057ea4:	f7ff fd08 	bl	100578b8 <l2c_pre_process_incoming_response_packet>
10057ea8:	9b01      	ldr	r3, [sp, #4]
10057eaa:	2800      	cmp	r0, #0
10057eac:	d16a      	bne.n	10057f84 <L2C_acl_cframe_signaling_hndl+0x204>
10057eae:	2108      	movs	r1, #8
10057eb0:	4620      	mov	r0, r4
10057eb2:	f7fa fea4 	bl	10052bfe <ACL_pkt_read_16b>
10057eb6:	9b01      	ldr	r3, [sp, #4]
10057eb8:	4606      	mov	r6, r0
10057eba:	483a      	ldr	r0, [pc, #232]	@ (10057fa4 <__arm_cp.7_4>)
10057ebc:	6800      	ldr	r0, [r0, #0]
10057ebe:	214f      	movs	r1, #79	@ 0x4f
10057ec0:	5c40      	ldrb	r0, [r0, r1]
10057ec2:	0780      	lsls	r0, r0, #30
10057ec4:	d55e      	bpl.n	10057f84 <L2C_acl_cframe_signaling_hndl+0x204>
10057ec6:	8827      	ldrh	r7, [r4, #0]
10057ec8:	4835      	ldr	r0, [pc, #212]	@ (10057fa0 <__arm_cp.7_3>)
10057eca:	6800      	ldr	r0, [r0, #0]
10057ecc:	6980      	ldr	r0, [r0, #24]
10057ece:	2142      	movs	r1, #66	@ 0x42
10057ed0:	224c      	movs	r2, #76	@ 0x4c
10057ed2:	2303      	movs	r3, #3
10057ed4:	f7fb f830 	bl	10052f38 <aci_event_fifo_push_header>
10057ed8:	9b01      	ldr	r3, [sp, #4]
10057eda:	2800      	cmp	r0, #0
10057edc:	d052      	beq.n	10057f84 <L2C_acl_cframe_signaling_hndl+0x204>
10057ede:	4605      	mov	r5, r0
10057ee0:	7306      	strb	r6, [r0, #12]
10057ee2:	7287      	strb	r7, [r0, #10]
10057ee4:	0a30      	lsrs	r0, r6, #8
10057ee6:	7368      	strb	r0, [r5, #13]
10057ee8:	0a38      	lsrs	r0, r7, #8
10057eea:	72e8      	strb	r0, [r5, #11]
10057eec:	1d2e      	adds	r6, r5, #4
10057eee:	9800      	ldr	r0, [sp, #0]
10057ef0:	02c0      	lsls	r0, r0, #11
10057ef2:	2106      	movs	r1, #6
10057ef4:	e026      	b.n	10057f44 <L2C_acl_cframe_signaling_hndl+0x1c4>
10057ef6:	0758      	lsls	r0, r3, #29
10057ef8:	9b01      	ldr	r3, [sp, #4]
10057efa:	d443      	bmi.n	10057f84 <L2C_acl_cframe_signaling_hndl+0x204>
10057efc:	4369      	muls	r1, r5
10057efe:	1852      	adds	r2, r2, r1
10057f00:	2012      	movs	r0, #18
10057f02:	4631      	mov	r1, r6
10057f04:	f7ff fcd1 	bl	100578aa <l2c_post_process_incoming_request_packet>
10057f08:	9b01      	ldr	r3, [sp, #4]
10057f0a:	4826      	ldr	r0, [pc, #152]	@ (10057fa4 <__arm_cp.7_4>)
10057f0c:	6800      	ldr	r0, [r0, #0]
10057f0e:	214f      	movs	r1, #79	@ 0x4f
10057f10:	5c40      	ldrb	r0, [r0, r1]
10057f12:	07c0      	lsls	r0, r0, #31
10057f14:	d036      	beq.n	10057f84 <L2C_acl_cframe_signaling_hndl+0x204>
10057f16:	8827      	ldrh	r7, [r4, #0]
10057f18:	4821      	ldr	r0, [pc, #132]	@ (10057fa0 <__arm_cp.7_3>)
10057f1a:	6800      	ldr	r0, [r0, #0]
10057f1c:	6980      	ldr	r0, [r0, #24]
10057f1e:	2142      	movs	r1, #66	@ 0x42
10057f20:	224d      	movs	r2, #77	@ 0x4d
10057f22:	2305      	movs	r3, #5
10057f24:	f7fb f808 	bl	10052f38 <aci_event_fifo_push_header>
10057f28:	9b01      	ldr	r3, [sp, #4]
10057f2a:	2800      	cmp	r0, #0
10057f2c:	d02a      	beq.n	10057f84 <L2C_acl_cframe_signaling_hndl+0x204>
10057f2e:	4605      	mov	r5, r0
10057f30:	1d06      	adds	r6, r0, #4
10057f32:	4630      	mov	r0, r6
10057f34:	4639      	mov	r1, r7
10057f36:	4622      	mov	r2, r4
10057f38:	f7fb fb46 	bl	100535c8 <aci_l2cap_connection_update_req_event_copy>
10057f3c:	9800      	ldr	r0, [sp, #0]
10057f3e:	02c0      	lsls	r0, r0, #11
10057f40:	1c80      	adds	r0, r0, #2
10057f42:	210f      	movs	r1, #15
10057f44:	22ff      	movs	r2, #255	@ 0xff
10057f46:	7072      	strb	r2, [r6, #1]
10057f48:	2282      	movs	r2, #130	@ 0x82
10057f4a:	7032      	strb	r2, [r6, #0]
10057f4c:	0a02      	lsrs	r2, r0, #8
10057f4e:	726a      	strb	r2, [r5, #9]
10057f50:	7228      	strb	r0, [r5, #8]
10057f52:	2000      	movs	r0, #0
10057f54:	71e8      	strb	r0, [r5, #7]
10057f56:	71a9      	strb	r1, [r5, #6]
10057f58:	2042      	movs	r0, #66	@ 0x42
10057f5a:	4629      	mov	r1, r5
10057f5c:	f7fb f889 	bl	10053072 <aci_event_fifo_push>
10057f60:	9b01      	ldr	r3, [sp, #4]
10057f62:	e00f      	b.n	10057f84 <L2C_acl_cframe_signaling_hndl+0x204>
10057f64:	9802      	ldr	r0, [sp, #8]
10057f66:	7146      	strb	r6, [r0, #5]
10057f68:	2200      	movs	r2, #0
10057f6a:	4638      	mov	r0, r7
10057f6c:	4631      	mov	r1, r6
10057f6e:	4613      	mov	r3, r2
10057f70:	f7ff fcdc 	bl	1005792c <L2C_build_command_reject_pdu>
10057f74:	9b01      	ldr	r3, [sp, #4]
10057f76:	2812      	cmp	r0, #18
10057f78:	d809      	bhi.n	10057f8e <L2C_acl_cframe_signaling_hndl+0x20e>
10057f7a:	2101      	movs	r1, #1
10057f7c:	4081      	lsls	r1, r0
10057f7e:	4a0a      	ldr	r2, [pc, #40]	@ (10057fa8 <__arm_cp.7_5>)
10057f80:	4211      	tst	r1, r2
10057f82:	d004      	beq.n	10057f8e <L2C_acl_cframe_signaling_hndl+0x20e>
10057f84:	4620      	mov	r0, r4
10057f86:	461c      	mov	r4, r3
10057f88:	f7fa fe14 	bl	10052bb4 <ACL_pkt_release>
10057f8c:	4620      	mov	r0, r4
10057f8e:	b005      	add	sp, #20
10057f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057f92:	46c0      	nop			@ (mov r8, r8)

10057f94 <__arm_cp.7_0>:
10057f94:	20001108 	.word	0x20001108

10057f98 <__arm_cp.7_1>:
10057f98:	200010ec 	.word	0x200010ec

10057f9c <__arm_cp.7_2>:
10057f9c:	000c0002 	.word	0x000c0002

10057fa0 <__arm_cp.7_3>:
10057fa0:	200010a4 	.word	0x200010a4

10057fa4 <__arm_cp.7_4>:
10057fa4:	200010f4 	.word	0x200010f4

10057fa8 <__arm_cp.7_5>:
10057fa8:	00040005 	.word	0x00040005

10057fac <__arm_cp.7_6>:
10057fac:	02940040 	.word	0x02940040

10057fb0 <__arm_cp.7_7>:
10057fb0:	00007530 	.word	0x00007530

10057fb4 <L2C_timeout_handler_signalling>:
10057fb4:	b570      	push	{r4, r5, r6, lr}
10057fb6:	2414      	movs	r4, #20
10057fb8:	4344      	muls	r4, r0
10057fba:	4d14      	ldr	r5, [pc, #80]	@ (1005800c <__arm_cp.8_0>)
10057fbc:	4814      	ldr	r0, [pc, #80]	@ (10058010 <__arm_cp.8_1>)
10057fbe:	6800      	ldr	r0, [r0, #0]
10057fc0:	214f      	movs	r1, #79	@ 0x4f
10057fc2:	5c40      	ldrb	r0, [r0, r1]
10057fc4:	0700      	lsls	r0, r0, #28
10057fc6:	d513      	bpl.n	10057ff0 <L2C_timeout_handler_signalling+0x3c>
10057fc8:	6828      	ldr	r0, [r5, #0]
10057fca:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
10057fcc:	5b06      	ldrh	r6, [r0, r4]
10057fce:	4811      	ldr	r0, [pc, #68]	@ (10058014 <__arm_cp.8_2>)
10057fd0:	6800      	ldr	r0, [r0, #0]
10057fd2:	6980      	ldr	r0, [r0, #24]
10057fd4:	2206      	movs	r2, #6
10057fd6:	2102      	movs	r1, #2
10057fd8:	460b      	mov	r3, r1
10057fda:	f7fa ffad 	bl	10052f38 <aci_event_fifo_push_header>
10057fde:	2800      	cmp	r0, #0
10057fe0:	d006      	beq.n	10057ff0 <L2C_timeout_handler_signalling+0x3c>
10057fe2:	4601      	mov	r1, r0
10057fe4:	480c      	ldr	r0, [pc, #48]	@ (10058018 <__arm_cp.8_3>)
10057fe6:	6048      	str	r0, [r1, #4]
10057fe8:	810e      	strh	r6, [r1, #8]
10057fea:	2002      	movs	r0, #2
10057fec:	f7fb f841 	bl	10053072 <aci_event_fifo_push>
10057ff0:	6828      	ldr	r0, [r5, #0]
10057ff2:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
10057ff4:	1901      	adds	r1, r0, r4
10057ff6:	2200      	movs	r2, #0
10057ff8:	718a      	strb	r2, [r1, #6]
10057ffa:	788a      	ldrb	r2, [r1, #2]
10057ffc:	23f9      	movs	r3, #249	@ 0xf9
10057ffe:	4013      	ands	r3, r2
10058000:	708b      	strb	r3, [r1, #2]
10058002:	5b00      	ldrh	r0, [r0, r4]
10058004:	21ff      	movs	r1, #255	@ 0xff
10058006:	f7ff fd17 	bl	10057a38 <L2C_cos_channel_descriptors_reset_pending>
1005800a:	bd70      	pop	{r4, r5, r6, pc}

1005800c <__arm_cp.8_0>:
1005800c:	200010ec 	.word	0x200010ec

10058010 <__arm_cp.8_1>:
10058010:	200010f4 	.word	0x200010f4

10058014 <__arm_cp.8_2>:
10058014:	200010a4 	.word	0x200010a4

10058018 <__arm_cp.8_3>:
10058018:	10063cd1 	.word	0x10063cd1

1005801c <l2c_sap_hci_le_connection_complete_evt_hndl>:
1005801c:	b5b0      	push	{r4, r5, r7, lr}
1005801e:	460c      	mov	r4, r1
10058020:	4605      	mov	r5, r0
10058022:	2000      	movs	r0, #0
10058024:	f7ff fbf0 	bl	10057808 <l2c_get_link_control_block_ref>
10058028:	2800      	cmp	r0, #0
1005802a:	d005      	beq.n	10058038 <l2c_sap_hci_le_connection_complete_evt_hndl+0x1c>
1005802c:	2101      	movs	r1, #1
1005802e:	8081      	strh	r1, [r0, #4]
10058030:	8005      	strh	r5, [r0, #0]
10058032:	4261      	negs	r1, r4
10058034:	4161      	adcs	r1, r4
10058036:	7081      	strb	r1, [r0, #2]
10058038:	bdb0      	pop	{r4, r5, r7, pc}
	...

1005803c <l2c_sap_hci_disconnection_complete_evt_hndl>:
1005803c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005803e:	4604      	mov	r4, r0
10058040:	f7ff fbfe 	bl	10057840 <l2c_get_link_control_block_index>
10058044:	4605      	mov	r5, r0
10058046:	4810      	ldr	r0, [pc, #64]	@ (10058088 <__arm_cp.1_0>)
10058048:	7ac0      	ldrb	r0, [r0, #11]
1005804a:	4285      	cmp	r5, r0
1005804c:	d21b      	bcs.n	10058086 <l2c_sap_hci_disconnection_complete_evt_hndl+0x4a>
1005804e:	4e0f      	ldr	r6, [pc, #60]	@ (1005808c <__arm_cp.1_1>)
10058050:	6830      	ldr	r0, [r6, #0]
10058052:	4629      	mov	r1, r5
10058054:	f00a faa3 	bl	1006259e <CST_stop>
10058058:	2714      	movs	r7, #20
1005805a:	436f      	muls	r7, r5
1005805c:	6830      	ldr	r0, [r6, #0]
1005805e:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
10058060:	2500      	movs	r5, #0
10058062:	53c5      	strh	r5, [r0, r7]
10058064:	19c0      	adds	r0, r0, r7
10058066:	6900      	ldr	r0, [r0, #16]
10058068:	2800      	cmp	r0, #0
1005806a:	d009      	beq.n	10058080 <l2c_sap_hci_disconnection_complete_evt_hndl+0x44>
1005806c:	f7fa fda2 	bl	10052bb4 <ACL_pkt_release>
10058070:	6830      	ldr	r0, [r6, #0]
10058072:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
10058074:	19c0      	adds	r0, r0, r7
10058076:	6105      	str	r5, [r0, #16]
10058078:	6830      	ldr	r0, [r6, #0]
1005807a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
1005807c:	19c0      	adds	r0, r0, r7
1005807e:	8185      	strh	r5, [r0, #12]
10058080:	4620      	mov	r0, r4
10058082:	f7ff fd0c 	bl	10057a9e <L2C_cos_physical_link_disconnection_hndl_ucfg_weak>
10058086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10058088 <__arm_cp.1_0>:
10058088:	20001108 	.word	0x20001108

1005808c <__arm_cp.1_1>:
1005808c:	200010ec 	.word	0x200010ec

10058090 <llc_cig_cmn_start_cis_ucfg_weak>:
10058090:	4770      	bx	lr

10058092 <llc_cig_cmn_terminate_cises_on_acl_ucfg_weak>:
10058092:	4770      	bx	lr

10058094 <llc_conn_get_cntxt_p>:
10058094:	4803      	ldr	r0, [pc, #12]	@ (100580a4 <__arm_cp.0_0>)
10058096:	6800      	ldr	r0, [r0, #0]
10058098:	219c      	movs	r1, #156	@ 0x9c
1005809a:	5840      	ldr	r0, [r0, r1]
1005809c:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005809e:	6800      	ldr	r0, [r0, #0]
100580a0:	4770      	bx	lr
100580a2:	46c0      	nop			@ (mov r8, r8)

100580a4 <__arm_cp.0_0>:
100580a4:	200010f4 	.word	0x200010f4

100580a8 <llc_conn_get_cntxt_per_p>:
100580a8:	214d      	movs	r1, #77	@ 0x4d
100580aa:	0089      	lsls	r1, r1, #2
100580ac:	4341      	muls	r1, r0
100580ae:	4804      	ldr	r0, [pc, #16]	@ (100580c0 <__arm_cp.1_0>)
100580b0:	6800      	ldr	r0, [r0, #0]
100580b2:	229c      	movs	r2, #156	@ 0x9c
100580b4:	5880      	ldr	r0, [r0, r2]
100580b6:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
100580b8:	6840      	ldr	r0, [r0, #4]
100580ba:	1840      	adds	r0, r0, r1
100580bc:	4770      	bx	lr
100580be:	46c0      	nop			@ (mov r8, r8)

100580c0 <__arm_cp.1_0>:
100580c0:	200010f4 	.word	0x200010f4

100580c4 <llc_conn_get_cntxt_per_p_from_handle>:
100580c4:	b510      	push	{r4, lr}
100580c6:	4601      	mov	r1, r0
100580c8:	2000      	movs	r0, #0
100580ca:	4a0d      	ldr	r2, [pc, #52]	@ (10058100 <__arm_cp.2_0>)
100580cc:	4291      	cmp	r1, r2
100580ce:	d015      	beq.n	100580fc <llc_conn_get_cntxt_per_p_from_handle+0x38>
100580d0:	4a0c      	ldr	r2, [pc, #48]	@ (10058104 <__arm_cp.2_1>)
100580d2:	6812      	ldr	r2, [r2, #0]
100580d4:	2334      	movs	r3, #52	@ 0x34
100580d6:	5cd2      	ldrb	r2, [r2, r3]
100580d8:	1c52      	adds	r2, r2, #1
100580da:	4b0b      	ldr	r3, [pc, #44]	@ (10058108 <__arm_cp.2_2>)
100580dc:	681b      	ldr	r3, [r3, #0]
100580de:	249c      	movs	r4, #156	@ 0x9c
100580e0:	591b      	ldr	r3, [r3, r4]
100580e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100580e4:	685b      	ldr	r3, [r3, #4]
100580e6:	1e52      	subs	r2, r2, #1
100580e8:	d008      	beq.n	100580fc <llc_conn_get_cntxt_per_p_from_handle+0x38>
100580ea:	244d      	movs	r4, #77	@ 0x4d
100580ec:	00a4      	lsls	r4, r4, #2
100580ee:	191c      	adds	r4, r3, r4
100580f0:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
100580f2:	428b      	cmp	r3, r1
100580f4:	4623      	mov	r3, r4
100580f6:	d1f6      	bne.n	100580e6 <llc_conn_get_cntxt_per_p_from_handle+0x22>
100580f8:	4804      	ldr	r0, [pc, #16]	@ (1005810c <__arm_cp.2_3>)
100580fa:	1820      	adds	r0, r4, r0
100580fc:	bd10      	pop	{r4, pc}
100580fe:	46c0      	nop			@ (mov r8, r8)

10058100 <__arm_cp.2_0>:
10058100:	0000ffff 	.word	0x0000ffff

10058104 <__arm_cp.2_1>:
10058104:	200010a0 	.word	0x200010a0

10058108 <__arm_cp.2_2>:
10058108:	200010f4 	.word	0x200010f4

1005810c <__arm_cp.2_3>:
1005810c:	fffffecc 	.word	0xfffffecc

10058110 <llc_conn_get_phy_upd_cntxt_per_p>:
10058110:	b510      	push	{r4, lr}
10058112:	4604      	mov	r4, r0
10058114:	f7f9 fa8a 	bl	1005162c <phy_upd_csr_ucfg>
10058118:	2801      	cmp	r0, #1
1005811a:	d109      	bne.n	10058130 <llc_conn_get_phy_upd_cntxt_per_p+0x20>
1005811c:	200e      	movs	r0, #14
1005811e:	4360      	muls	r0, r4
10058120:	4904      	ldr	r1, [pc, #16]	@ (10058134 <__arm_cp.7_0>)
10058122:	6809      	ldr	r1, [r1, #0]
10058124:	229c      	movs	r2, #156	@ 0x9c
10058126:	5889      	ldr	r1, [r1, r2]
10058128:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005812a:	6949      	ldr	r1, [r1, #20]
1005812c:	1808      	adds	r0, r1, r0
1005812e:	bd10      	pop	{r4, pc}
10058130:	2000      	movs	r0, #0
10058132:	bd10      	pop	{r4, pc}

10058134 <__arm_cp.7_0>:
10058134:	200010f4 	.word	0x200010f4

10058138 <llc_conn_init>:
10058138:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005813a:	4c3e      	ldr	r4, [pc, #248]	@ (10058234 <__arm_cp.8_0>)
1005813c:	6820      	ldr	r0, [r4, #0]
1005813e:	259c      	movs	r5, #156	@ 0x9c
10058140:	5940      	ldr	r0, [r0, r5]
10058142:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10058144:	6803      	ldr	r3, [r0, #0]
10058146:	2136      	movs	r1, #54	@ 0x36
10058148:	2600      	movs	r6, #0
1005814a:	545e      	strb	r6, [r3, r1]
1005814c:	493a      	ldr	r1, [pc, #232]	@ (10058238 <__arm_cp.8_1>)
1005814e:	6949      	ldr	r1, [r1, #20]
10058150:	0c0a      	lsrs	r2, r1, #16
10058152:	2a19      	cmp	r2, #25
10058154:	d301      	bcc.n	1005815a <llc_conn_init+0x22>
10058156:	2119      	movs	r1, #25
10058158:	0409      	lsls	r1, r1, #16
1005815a:	6059      	str	r1, [r3, #4]
1005815c:	6019      	str	r1, [r3, #0]
1005815e:	6900      	ldr	r0, [r0, #16]
10058160:	9302      	str	r3, [sp, #8]
10058162:	6098      	str	r0, [r3, #8]
10058164:	f000 fad0 	bl	10058708 <llc_conn_list_reset>
10058168:	6820      	ldr	r0, [r4, #0]
1005816a:	5940      	ldr	r0, [r0, r5]
1005816c:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005816e:	6807      	ldr	r7, [r0, #0]
10058170:	f7f9 fa54 	bl	1005161c <data_length_extension_csr_ucfg>
10058174:	2801      	cmp	r0, #1
10058176:	d001      	beq.n	1005817c <llc_conn_init+0x44>
10058178:	201b      	movs	r0, #27
1005817a:	e000      	b.n	1005817e <llc_conn_init+0x46>
1005817c:	20fb      	movs	r0, #251	@ 0xfb
1005817e:	82b8      	strh	r0, [r7, #20]
10058180:	f7f9 fa4c 	bl	1005161c <data_length_extension_csr_ucfg>
10058184:	4604      	mov	r4, r0
10058186:	2029      	movs	r0, #41	@ 0x29
10058188:	00c0      	lsls	r0, r0, #3
1005818a:	9000      	str	r0, [sp, #0]
1005818c:	20a9      	movs	r0, #169	@ 0xa9
1005818e:	0105      	lsls	r5, r0, #4
10058190:	f7f9 fa4c 	bl	1005162c <phy_upd_csr_ucfg>
10058194:	2c01      	cmp	r4, #1
10058196:	9501      	str	r5, [sp, #4]
10058198:	d107      	bne.n	100581aa <llc_conn_init+0x72>
1005819a:	2801      	cmp	r0, #1
1005819c:	4d27      	ldr	r5, [pc, #156]	@ (1005823c <__arm_cp.8_2>)
1005819e:	9c00      	ldr	r4, [sp, #0]
100581a0:	d00c      	beq.n	100581bc <llc_conn_init+0x84>
100581a2:	4d27      	ldr	r5, [pc, #156]	@ (10058240 <__arm_cp.8_3>)
100581a4:	f7ff f94c 	bl	10057440 <cte_csr_ucfg_weak>
100581a8:	e005      	b.n	100581b6 <llc_conn_init+0x7e>
100581aa:	2801      	cmp	r0, #1
100581ac:	9c00      	ldr	r4, [sp, #0]
100581ae:	d005      	beq.n	100581bc <llc_conn_init+0x84>
100581b0:	f7ff f946 	bl	10057440 <cte_csr_ucfg_weak>
100581b4:	4625      	mov	r5, r4
100581b6:	2801      	cmp	r0, #1
100581b8:	d100      	bne.n	100581bc <llc_conn_init+0x84>
100581ba:	3508      	adds	r5, #8
100581bc:	82fd      	strh	r5, [r7, #22]
100581be:	f7f9 fa2d 	bl	1005161c <data_length_extension_csr_ucfg>
100581c2:	2801      	cmp	r0, #1
100581c4:	d001      	beq.n	100581ca <llc_conn_init+0x92>
100581c6:	201b      	movs	r0, #27
100581c8:	e000      	b.n	100581cc <llc_conn_init+0x94>
100581ca:	20fb      	movs	r0, #251	@ 0xfb
100581cc:	8338      	strh	r0, [r7, #24]
100581ce:	f7f9 fa25 	bl	1005161c <data_length_extension_csr_ucfg>
100581d2:	4605      	mov	r5, r0
100581d4:	f7f9 fa2a 	bl	1005162c <phy_upd_csr_ucfg>
100581d8:	2d01      	cmp	r5, #1
100581da:	d107      	bne.n	100581ec <llc_conn_init+0xb4>
100581dc:	2801      	cmp	r0, #1
100581de:	9d01      	ldr	r5, [sp, #4]
100581e0:	4916      	ldr	r1, [pc, #88]	@ (1005823c <__arm_cp.8_2>)
100581e2:	d00d      	beq.n	10058200 <llc_conn_init+0xc8>
100581e4:	f7ff f92c 	bl	10057440 <cte_csr_ucfg_weak>
100581e8:	4915      	ldr	r1, [pc, #84]	@ (10058240 <__arm_cp.8_3>)
100581ea:	e006      	b.n	100581fa <llc_conn_init+0xc2>
100581ec:	2801      	cmp	r0, #1
100581ee:	9d01      	ldr	r5, [sp, #4]
100581f0:	4629      	mov	r1, r5
100581f2:	d005      	beq.n	10058200 <llc_conn_init+0xc8>
100581f4:	f7ff f924 	bl	10057440 <cte_csr_ucfg_weak>
100581f8:	4621      	mov	r1, r4
100581fa:	2801      	cmp	r0, #1
100581fc:	d100      	bne.n	10058200 <llc_conn_init+0xc8>
100581fe:	3108      	adds	r1, #8
10058200:	83fc      	strh	r4, [r7, #30]
10058202:	201b      	movs	r0, #27
10058204:	83b8      	strh	r0, [r7, #28]
10058206:	827d      	strh	r5, [r7, #18]
10058208:	823c      	strh	r4, [r7, #16]
1005820a:	81fc      	strh	r4, [r7, #14]
1005820c:	81b8      	strh	r0, [r7, #12]
1005820e:	8379      	strh	r1, [r7, #26]
10058210:	f7f9 fb5d 	bl	100518ce <LL_phy_update_init_ucfg>
10058214:	9802      	ldr	r0, [sp, #8]
10058216:	f001 fc7f 	bl	10059b18 <llc_subrate_init_acceptable>
1005821a:	4c0a      	ldr	r4, [pc, #40]	@ (10058244 <__arm_cp.8_4>)
1005821c:	6820      	ldr	r0, [r4, #0]
1005821e:	2134      	movs	r1, #52	@ 0x34
10058220:	5c41      	ldrb	r1, [r0, r1]
10058222:	b2f0      	uxtb	r0, r6
10058224:	4288      	cmp	r0, r1
10058226:	d203      	bcs.n	10058230 <llc_conn_init+0xf8>
10058228:	f000 f80e 	bl	10058248 <llc_conn_per_init>
1005822c:	1c76      	adds	r6, r6, #1
1005822e:	e7f5      	b.n	1005821c <llc_conn_init+0xe4>
10058230:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10058232:	46c0      	nop			@ (mov r8, r8)

10058234 <__arm_cp.8_0>:
10058234:	200010f4 	.word	0x200010f4

10058238 <__arm_cp.8_1>:
10058238:	20001108 	.word	0x20001108

1005823c <__arm_cp.8_2>:
1005823c:	00004290 	.word	0x00004290

10058240 <__arm_cp.8_3>:
10058240:	00000848 	.word	0x00000848

10058244 <__arm_cp.8_4>:
10058244:	200010a0 	.word	0x200010a0

10058248 <llc_conn_per_init>:
10058248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005824a:	4605      	mov	r5, r0
1005824c:	204d      	movs	r0, #77	@ 0x4d
1005824e:	0080      	lsls	r0, r0, #2
10058250:	4368      	muls	r0, r5
10058252:	492d      	ldr	r1, [pc, #180]	@ (10058308 <__arm_cp.9_0>)
10058254:	6809      	ldr	r1, [r1, #0]
10058256:	279c      	movs	r7, #156	@ 0x9c
10058258:	59c9      	ldr	r1, [r1, r7]
1005825a:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005825c:	6849      	ldr	r1, [r1, #4]
1005825e:	180c      	adds	r4, r1, r0
10058260:	f001 fc26 	bl	10059ab0 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10058264:	4606      	mov	r6, r0
10058266:	f001 fc19 	bl	10059a9c <cis_csr_ucfg_weak>
1005826a:	4330      	orrs	r0, r6
1005826c:	b2c0      	uxtb	r0, r0
1005826e:	f006 fc57 	bl	1005eb20 <LL_get_control_pdu_size>
10058272:	2200      	movs	r2, #0
10058274:	51e2      	str	r2, [r4, r7]
10058276:	212e      	movs	r1, #46	@ 0x2e
10058278:	231f      	movs	r3, #31
1005827a:	5463      	strb	r3, [r4, r1]
1005827c:	85a2      	strh	r2, [r4, #44]	@ 0x2c
1005827e:	0880      	lsrs	r0, r0, #2
10058280:	4368      	muls	r0, r5
10058282:	0080      	lsls	r0, r0, #2
10058284:	4920      	ldr	r1, [pc, #128]	@ (10058308 <__arm_cp.9_0>)
10058286:	6809      	ldr	r1, [r1, #0]
10058288:	460b      	mov	r3, r1
1005828a:	3394      	adds	r3, #148	@ 0x94
1005828c:	685b      	ldr	r3, [r3, #4]
1005828e:	181b      	adds	r3, r3, r0
10058290:	2690      	movs	r6, #144	@ 0x90
10058292:	51a3      	str	r3, [r4, r6]
10058294:	238c      	movs	r3, #140	@ 0x8c
10058296:	50e2      	str	r2, [r4, r3]
10058298:	2388      	movs	r3, #136	@ 0x88
1005829a:	50e2      	str	r2, [r4, r3]
1005829c:	2330      	movs	r3, #48	@ 0x30
1005829e:	54e5      	strb	r5, [r4, r3]
100582a0:	239a      	movs	r3, #154	@ 0x9a
100582a2:	52e2      	strh	r2, [r4, r3]
100582a4:	23ff      	movs	r3, #255	@ 0xff
100582a6:	461d      	mov	r5, r3
100582a8:	3508      	adds	r5, #8
100582aa:	5562      	strb	r2, [r4, r5]
100582ac:	2241      	movs	r2, #65	@ 0x41
100582ae:	54a3      	strb	r3, [r4, r2]
100582b0:	222f      	movs	r2, #47	@ 0x2f
100582b2:	2307      	movs	r3, #7
100582b4:	54a3      	strb	r3, [r4, r2]
100582b6:	227d      	movs	r2, #125	@ 0x7d
100582b8:	0452      	lsls	r2, r2, #17
100582ba:	66e2      	str	r2, [r4, #108]	@ 0x6c
100582bc:	6722      	str	r2, [r4, #112]	@ 0x70
100582be:	2201      	movs	r2, #1
100582c0:	8522      	strh	r2, [r4, #40]	@ 0x28
100582c2:	4a12      	ldr	r2, [pc, #72]	@ (1005830c <__arm_cp.9_1>)
100582c4:	8762      	strh	r2, [r4, #58]	@ 0x3a
100582c6:	2219      	movs	r2, #25
100582c8:	0412      	lsls	r2, r2, #16
100582ca:	65a2      	str	r2, [r4, #88]	@ 0x58
100582cc:	65e2      	str	r2, [r4, #92]	@ 0x5c
100582ce:	6622      	str	r2, [r4, #96]	@ 0x60
100582d0:	4622      	mov	r2, r4
100582d2:	32b4      	adds	r2, #180	@ 0xb4
100582d4:	2394      	movs	r3, #148	@ 0x94
100582d6:	58c9      	ldr	r1, [r1, r3]
100582d8:	231b      	movs	r3, #27
100582da:	8053      	strh	r3, [r2, #2]
100582dc:	1808      	adds	r0, r1, r0
100582de:	4621      	mov	r1, r4
100582e0:	3190      	adds	r1, #144	@ 0x90
100582e2:	6048      	str	r0, [r1, #4]
100582e4:	20b4      	movs	r0, #180	@ 0xb4
100582e6:	5223      	strh	r3, [r4, r0]
100582e8:	4809      	ldr	r0, [pc, #36]	@ (10058310 <__arm_cp.9_2>)
100582ea:	490a      	ldr	r1, [pc, #40]	@ (10058314 <__arm_cp.9_3>)
100582ec:	6050      	str	r0, [r2, #4]
100582ee:	6091      	str	r1, [r2, #8]
100582f0:	2029      	movs	r0, #41	@ 0x29
100582f2:	00c0      	lsls	r0, r0, #3
100582f4:	8190      	strh	r0, [r2, #12]
100582f6:	4620      	mov	r0, r4
100582f8:	f001 fc23 	bl	10059b42 <llc_subrate_reset_params>
100582fc:	3480      	adds	r4, #128	@ 0x80
100582fe:	4620      	mov	r0, r4
10058300:	f00a facc 	bl	1006289c <ACL_list_init>
10058304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10058306:	46c0      	nop			@ (mov r8, r8)

10058308 <__arm_cp.9_0>:
10058308:	200010f4 	.word	0x200010f4

1005830c <__arm_cp.9_1>:
1005830c:	0000ffff 	.word	0x0000ffff

10058310 <__arm_cp.9_2>:
10058310:	0148001b 	.word	0x0148001b

10058314 <__arm_cp.9_3>:
10058314:	001b0148 	.word	0x001b0148

10058318 <llc_conn_mem_allocate>:
10058318:	b5f0      	push	{r4, r5, r6, r7, lr}
1005831a:	b085      	sub	sp, #20
1005831c:	2b01      	cmp	r3, #1
1005831e:	d000      	beq.n	10058322 <llc_conn_mem_allocate+0xa>
10058320:	e082      	b.n	10058428 <llc_conn_mem_allocate+0x110>
10058322:	ab02      	add	r3, sp, #8
10058324:	c307      	stmia	r3!, {r0, r1, r2}
10058326:	4841      	ldr	r0, [pc, #260]	@ (1005842c <__arm_cp.10_0>)
10058328:	7fc1      	ldrb	r1, [r0, #31]
1005832a:	9101      	str	r1, [sp, #4]
1005832c:	7ac4      	ldrb	r4, [r0, #11]
1005832e:	9400      	str	r4, [sp, #0]
10058330:	2601      	movs	r6, #1
10058332:	2124      	movs	r1, #36	@ 0x24
10058334:	4a3e      	ldr	r2, [pc, #248]	@ (10058430 <__arm_cp.10_1>)
10058336:	4630      	mov	r0, r6
10058338:	4790      	blx	r2
1005833a:	493e      	ldr	r1, [pc, #248]	@ (10058434 <__arm_cp.10_2>)
1005833c:	6809      	ldr	r1, [r1, #0]
1005833e:	279c      	movs	r7, #156	@ 0x9c
10058340:	59c9      	ldr	r1, [r1, r7]
10058342:	63c8      	str	r0, [r1, #60]	@ 0x3c
10058344:	2538      	movs	r5, #56	@ 0x38
10058346:	4630      	mov	r0, r6
10058348:	4629      	mov	r1, r5
1005834a:	4a39      	ldr	r2, [pc, #228]	@ (10058430 <__arm_cp.10_1>)
1005834c:	4790      	blx	r2
1005834e:	4939      	ldr	r1, [pc, #228]	@ (10058434 <__arm_cp.10_2>)
10058350:	6809      	ldr	r1, [r1, #0]
10058352:	59c9      	ldr	r1, [r1, r7]
10058354:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
10058356:	6008      	str	r0, [r1, #0]
10058358:	204d      	movs	r0, #77	@ 0x4d
1005835a:	0081      	lsls	r1, r0, #2
1005835c:	4620      	mov	r0, r4
1005835e:	4c34      	ldr	r4, [pc, #208]	@ (10058430 <__arm_cp.10_1>)
10058360:	47a0      	blx	r4
10058362:	4934      	ldr	r1, [pc, #208]	@ (10058434 <__arm_cp.10_2>)
10058364:	6809      	ldr	r1, [r1, #0]
10058366:	59c9      	ldr	r1, [r1, r7]
10058368:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005836a:	6048      	str	r0, [r1, #4]
1005836c:	9801      	ldr	r0, [sp, #4]
1005836e:	4086      	lsls	r6, r0
10058370:	b2f0      	uxtb	r0, r6
10058372:	2108      	movs	r1, #8
10058374:	47a0      	blx	r4
10058376:	492f      	ldr	r1, [pc, #188]	@ (10058434 <__arm_cp.10_2>)
10058378:	6809      	ldr	r1, [r1, #0]
1005837a:	59c9      	ldr	r1, [r1, r7]
1005837c:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005837e:	6809      	ldr	r1, [r1, #0]
10058380:	2228      	movs	r2, #40	@ 0x28
10058382:	2300      	movs	r3, #0
10058384:	548b      	strb	r3, [r1, r2]
10058386:	6248      	str	r0, [r1, #36]	@ 0x24
10058388:	3128      	adds	r1, #40	@ 0x28
1005838a:	704e      	strb	r6, [r1, #1]
1005838c:	9c00      	ldr	r4, [sp, #0]
1005838e:	2013      	movs	r0, #19
10058390:	2104      	movs	r1, #4
10058392:	4e27      	ldr	r6, [pc, #156]	@ (10058430 <__arm_cp.10_1>)
10058394:	47b0      	blx	r6
10058396:	4927      	ldr	r1, [pc, #156]	@ (10058434 <__arm_cp.10_2>)
10058398:	6809      	ldr	r1, [r1, #0]
1005839a:	59c9      	ldr	r1, [r1, r7]
1005839c:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005839e:	6108      	str	r0, [r1, #16]
100583a0:	4620      	mov	r0, r4
100583a2:	4629      	mov	r1, r5
100583a4:	47b0      	blx	r6
100583a6:	4633      	mov	r3, r6
100583a8:	4a22      	ldr	r2, [pc, #136]	@ (10058434 <__arm_cp.10_2>)
100583aa:	6811      	ldr	r1, [r2, #0]
100583ac:	59c9      	ldr	r1, [r1, r7]
100583ae:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
100583b0:	6088      	str	r0, [r1, #8]
100583b2:	4626      	mov	r6, r4
100583b4:	4620      	mov	r0, r4
100583b6:	4629      	mov	r1, r5
100583b8:	4615      	mov	r5, r2
100583ba:	4798      	blx	r3
100583bc:	6829      	ldr	r1, [r5, #0]
100583be:	59c9      	ldr	r1, [r1, r7]
100583c0:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
100583c2:	60c8      	str	r0, [r1, #12]
100583c4:	9802      	ldr	r0, [sp, #8]
100583c6:	2801      	cmp	r0, #1
100583c8:	d107      	bne.n	100583da <llc_conn_mem_allocate+0xc2>
100583ca:	210e      	movs	r1, #14
100583cc:	4630      	mov	r0, r6
100583ce:	f007 f86d 	bl	1005f4ac <csmem_mem_0_assign>
100583d2:	6829      	ldr	r1, [r5, #0]
100583d4:	59c9      	ldr	r1, [r1, r7]
100583d6:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
100583d8:	6148      	str	r0, [r1, #20]
100583da:	9803      	ldr	r0, [sp, #12]
100583dc:	2801      	cmp	r0, #1
100583de:	d107      	bne.n	100583f0 <llc_conn_mem_allocate+0xd8>
100583e0:	2108      	movs	r1, #8
100583e2:	4630      	mov	r0, r6
100583e4:	f007 f862 	bl	1005f4ac <csmem_mem_0_assign>
100583e8:	6829      	ldr	r1, [r5, #0]
100583ea:	59c9      	ldr	r1, [r1, r7]
100583ec:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
100583ee:	6188      	str	r0, [r1, #24]
100583f0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
100583f2:	9804      	ldr	r0, [sp, #16]
100583f4:	2801      	cmp	r0, #1
100583f6:	d10d      	bne.n	10058414 <llc_conn_mem_allocate+0xfc>
100583f8:	2120      	movs	r1, #32
100583fa:	4630      	mov	r0, r6
100583fc:	f007 f856 	bl	1005f4ac <csmem_mem_0_assign>
10058400:	6829      	ldr	r1, [r5, #0]
10058402:	59c9      	ldr	r1, [r1, r7]
10058404:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
10058406:	61c8      	str	r0, [r1, #28]
10058408:	2001      	movs	r0, #1
1005840a:	2111      	movs	r1, #17
1005840c:	f007 f84e 	bl	1005f4ac <csmem_mem_0_assign>
10058410:	6829      	ldr	r1, [r5, #0]
10058412:	6648      	str	r0, [r1, #100]	@ 0x64
10058414:	2c01      	cmp	r4, #1
10058416:	d107      	bne.n	10058428 <llc_conn_mem_allocate+0x110>
10058418:	211c      	movs	r1, #28
1005841a:	4630      	mov	r0, r6
1005841c:	f007 f846 	bl	1005f4ac <csmem_mem_0_assign>
10058420:	6829      	ldr	r1, [r5, #0]
10058422:	59c9      	ldr	r1, [r1, r7]
10058424:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
10058426:	6208      	str	r0, [r1, #32]
10058428:	b005      	add	sp, #20
1005842a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005842c <__arm_cp.10_0>:
1005842c:	20001108 	.word	0x20001108

10058430 <__arm_cp.10_1>:
10058430:	1005f4ad 	.word	0x1005f4ad

10058434 <__arm_cp.10_2>:
10058434:	200010f4 	.word	0x200010f4

10058438 <llc_conn_clr_instant_reached_passed>:
10058438:	219a      	movs	r1, #154	@ 0x9a
1005843a:	5a42      	ldrh	r2, [r0, r1]
1005843c:	2304      	movs	r3, #4
1005843e:	439a      	bics	r2, r3
10058440:	5242      	strh	r2, [r0, r1]
10058442:	5a42      	ldrh	r2, [r0, r1]
10058444:	2302      	movs	r3, #2
10058446:	439a      	bics	r2, r3
10058448:	5242      	strh	r2, [r0, r1]
1005844a:	4770      	bx	lr

1005844c <llc_conn_clr_rx_acl_blocked>:
1005844c:	2194      	movs	r1, #148	@ 0x94
1005844e:	5840      	ldr	r0, [r0, r1]
10058450:	8801      	ldrh	r1, [r0, #0]
10058452:	4a02      	ldr	r2, [pc, #8]	@ (1005845c <__arm_cp.5_0>)
10058454:	400a      	ands	r2, r1
10058456:	8002      	strh	r2, [r0, #0]
10058458:	4770      	bx	lr
1005845a:	46c0      	nop			@ (mov r8, r8)

1005845c <__arm_cp.5_0>:
1005845c:	0000feff 	.word	0x0000feff

10058460 <llc_conn_clr_rx_ctrl_pdu_full>:
10058460:	2190      	movs	r1, #144	@ 0x90
10058462:	5840      	ldr	r0, [r0, r1]
10058464:	8801      	ldrh	r1, [r0, #0]
10058466:	2201      	movs	r2, #1
10058468:	4391      	bics	r1, r2
1005846a:	8001      	strh	r1, [r0, #0]
1005846c:	4770      	bx	lr

1005846e <llc_conn_clr_tx_acl_blocked>:
1005846e:	2194      	movs	r1, #148	@ 0x94
10058470:	5840      	ldr	r0, [r0, r1]
10058472:	8801      	ldrh	r1, [r0, #0]
10058474:	2280      	movs	r2, #128	@ 0x80
10058476:	4391      	bics	r1, r2
10058478:	8001      	strh	r1, [r0, #0]
1005847a:	4770      	bx	lr

1005847c <llc_conn_copy_tx_data_packet>:
1005847c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005847e:	460c      	mov	r4, r1
10058480:	2188      	movs	r1, #136	@ 0x88
10058482:	5c41      	ldrb	r1, [r0, r1]
10058484:	0649      	lsls	r1, r1, #25
10058486:	d40c      	bmi.n	100584a2 <llc_conn_copy_tx_data_packet+0x26>
10058488:	3088      	adds	r0, #136	@ 0x88
1005848a:	8a21      	ldrh	r1, [r4, #16]
1005848c:	8862      	ldrh	r2, [r4, #2]
1005848e:	1a52      	subs	r2, r2, r1
10058490:	b293      	uxth	r3, r2
10058492:	8dc5      	ldrh	r5, [r0, #46]	@ 0x2e
10058494:	42ab      	cmp	r3, r5
10058496:	d909      	bls.n	100584ac <llc_conn_copy_tx_data_packet+0x30>
10058498:	7a20      	ldrb	r0, [r4, #8]
1005849a:	22f7      	movs	r2, #247	@ 0xf7
1005849c:	4002      	ands	r2, r0
1005849e:	7222      	strb	r2, [r4, #8]
100584a0:	e001      	b.n	100584a6 <llc_conn_copy_tx_data_packet+0x2a>
100584a2:	8a21      	ldrh	r1, [r4, #16]
100584a4:	7b25      	ldrb	r5, [r4, #12]
100584a6:	2010      	movs	r0, #16
100584a8:	9001      	str	r0, [sp, #4]
100584aa:	e005      	b.n	100584b8 <llc_conn_copy_tx_data_packet+0x3c>
100584ac:	69e0      	ldr	r0, [r4, #28]
100584ae:	1e43      	subs	r3, r0, #1
100584b0:	4198      	sbcs	r0, r3
100584b2:	0100      	lsls	r0, r0, #4
100584b4:	9001      	str	r0, [sp, #4]
100584b6:	4615      	mov	r5, r2
100584b8:	2900      	cmp	r1, #0
100584ba:	d102      	bne.n	100584c2 <llc_conn_copy_tx_data_packet+0x46>
100584bc:	7a20      	ldrb	r0, [r4, #8]
100584be:	0780      	lsls	r0, r0, #30
100584c0:	d401      	bmi.n	100584c6 <llc_conn_copy_tx_data_packet+0x4a>
100584c2:	2001      	movs	r0, #1
100584c4:	e000      	b.n	100584c8 <llc_conn_copy_tx_data_packet+0x4c>
100584c6:	2002      	movs	r0, #2
100584c8:	9002      	str	r0, [sp, #8]
100584ca:	480e      	ldr	r0, [pc, #56]	@ (10058504 <__arm_cp.8_0>)
100584cc:	6800      	ldr	r0, [r0, #0]
100584ce:	278c      	movs	r7, #140	@ 0x8c
100584d0:	59c0      	ldr	r0, [r0, r7]
100584d2:	1d00      	adds	r0, r0, #4
100584d4:	89e2      	ldrh	r2, [r4, #14]
100584d6:	1851      	adds	r1, r2, r1
100584d8:	261f      	movs	r6, #31
100584da:	400e      	ands	r6, r1
100584dc:	19a9      	adds	r1, r5, r6
100584de:	b28a      	uxth	r2, r1
100584e0:	69a1      	ldr	r1, [r4, #24]
100584e2:	f007 f944 	bl	1005f76e <Mem_Buff_block_copy>
100584e6:	6160      	str	r0, [r4, #20]
100584e8:	7325      	strb	r5, [r4, #12]
100584ea:	4b06      	ldr	r3, [pc, #24]	@ (10058504 <__arm_cp.8_0>)
100584ec:	6818      	ldr	r0, [r3, #0]
100584ee:	59c0      	ldr	r0, [r0, r7]
100584f0:	1830      	adds	r0, r6, r0
100584f2:	9901      	ldr	r1, [sp, #4]
100584f4:	9a02      	ldr	r2, [sp, #8]
100584f6:	4311      	orrs	r1, r2
100584f8:	7081      	strb	r1, [r0, #2]
100584fa:	6818      	ldr	r0, [r3, #0]
100584fc:	59c0      	ldr	r0, [r0, r7]
100584fe:	1830      	adds	r0, r6, r0
10058500:	70c5      	strb	r5, [r0, #3]
10058502:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10058504 <__arm_cp.8_0>:
10058504:	200010f4 	.word	0x200010f4

10058508 <llc_conn_enhanced_get_latency>:
10058508:	b570      	push	{r4, r5, r6, lr}
1005850a:	4605      	mov	r5, r0
1005850c:	202c      	movs	r0, #44	@ 0x2c
1005850e:	5c28      	ldrb	r0, [r5, r0]
10058510:	2401      	movs	r4, #1
10058512:	2803      	cmp	r0, #3
10058514:	d13f      	bne.n	10058596 <llc_conn_enhanced_get_latency+0x8e>
10058516:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
10058518:	2800      	cmp	r0, #0
1005851a:	d03c      	beq.n	10058596 <llc_conn_enhanced_get_latency+0x8e>
1005851c:	4628      	mov	r0, r5
1005851e:	f7ee ff76 	bl	1004740e <BLEPLAT_CNTR_PacketGetDataPtr>
10058522:	4629      	mov	r1, r5
10058524:	3128      	adds	r1, #40	@ 0x28
10058526:	4288      	cmp	r0, r1
10058528:	d135      	bne.n	10058596 <llc_conn_enhanced_get_latency+0x8e>
1005852a:	462e      	mov	r6, r5
1005852c:	362c      	adds	r6, #44	@ 0x2c
1005852e:	205c      	movs	r0, #92	@ 0x5c
10058530:	5c30      	ldrb	r0, [r6, r0]
10058532:	0600      	lsls	r0, r0, #24
10058534:	0f80      	lsrs	r0, r0, #30
10058536:	d12e      	bne.n	10058596 <llc_conn_enhanced_get_latency+0x8e>
10058538:	20ff      	movs	r0, #255	@ 0xff
1005853a:	3008      	adds	r0, #8
1005853c:	1828      	adds	r0, r5, r0
1005853e:	7800      	ldrb	r0, [r0, #0]
10058540:	0780      	lsls	r0, r0, #30
10058542:	d428      	bmi.n	10058596 <llc_conn_enhanced_get_latency+0x8e>
10058544:	208f      	movs	r0, #143	@ 0x8f
10058546:	0040      	lsls	r0, r0, #1
10058548:	1828      	adds	r0, r5, r0
1005854a:	8800      	ldrh	r0, [r0, #0]
1005854c:	2800      	cmp	r0, #0
1005854e:	d122      	bne.n	10058596 <llc_conn_enhanced_get_latency+0x8e>
10058550:	7930      	ldrb	r0, [r6, #4]
10058552:	2401      	movs	r4, #1
10058554:	4621      	mov	r1, r4
10058556:	f001 fb48 	bl	10059bea <LL_cpe_get_active_status>
1005855a:	2800      	cmp	r0, #0
1005855c:	d105      	bne.n	1005856a <llc_conn_enhanced_get_latency+0x62>
1005855e:	7930      	ldrb	r0, [r6, #4]
10058560:	2100      	movs	r1, #0
10058562:	f001 fb42 	bl	10059bea <LL_cpe_get_active_status>
10058566:	2800      	cmp	r0, #0
10058568:	d013      	beq.n	10058592 <llc_conn_enhanced_get_latency+0x8a>
1005856a:	4628      	mov	r0, r5
1005856c:	3098      	adds	r0, #152	@ 0x98
1005856e:	8841      	ldrh	r1, [r0, #2]
10058570:	07c9      	lsls	r1, r1, #31
10058572:	d010      	beq.n	10058596 <llc_conn_enhanced_get_latency+0x8e>
10058574:	8af1      	ldrh	r1, [r6, #22]
10058576:	8800      	ldrh	r0, [r0, #0]
10058578:	1a40      	subs	r0, r0, r1
1005857a:	b281      	uxth	r1, r0
1005857c:	2902      	cmp	r1, #2
1005857e:	d30a      	bcc.n	10058596 <llc_conn_enhanced_get_latency+0x8e>
10058580:	1e44      	subs	r4, r0, #1
10058582:	b2a1      	uxth	r1, r4
10058584:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
10058586:	1c40      	adds	r0, r0, #1
10058588:	b282      	uxth	r2, r0
1005858a:	4291      	cmp	r1, r2
1005858c:	d303      	bcc.n	10058596 <llc_conn_enhanced_get_latency+0x8e>
1005858e:	4604      	mov	r4, r0
10058590:	e001      	b.n	10058596 <llc_conn_enhanced_get_latency+0x8e>
10058592:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
10058594:	1c44      	adds	r4, r0, #1
10058596:	b2a0      	uxth	r0, r4
10058598:	bd70      	pop	{r4, r5, r6, pc}
	...

1005859c <llc_conn_get_conn_idx>:
1005859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005859e:	4604      	mov	r4, r0
100585a0:	25ff      	movs	r5, #255	@ 0xff
100585a2:	480a      	ldr	r0, [pc, #40]	@ (100585cc <__arm_cp.13_0>)
100585a4:	4284      	cmp	r4, r0
100585a6:	d00f      	beq.n	100585c8 <llc_conn_get_conn_idx+0x2c>
100585a8:	2600      	movs	r6, #0
100585aa:	4f09      	ldr	r7, [pc, #36]	@ (100585d0 <__arm_cp.13_1>)
100585ac:	6838      	ldr	r0, [r7, #0]
100585ae:	2134      	movs	r1, #52	@ 0x34
100585b0:	5c41      	ldrb	r1, [r0, r1]
100585b2:	b2f0      	uxtb	r0, r6
100585b4:	4288      	cmp	r0, r1
100585b6:	d207      	bcs.n	100585c8 <llc_conn_get_conn_idx+0x2c>
100585b8:	f7ff fd76 	bl	100580a8 <llc_conn_get_cntxt_per_p>
100585bc:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
100585be:	42a0      	cmp	r0, r4
100585c0:	d001      	beq.n	100585c6 <llc_conn_get_conn_idx+0x2a>
100585c2:	1c76      	adds	r6, r6, #1
100585c4:	e7f2      	b.n	100585ac <llc_conn_get_conn_idx+0x10>
100585c6:	4635      	mov	r5, r6
100585c8:	b2e8      	uxtb	r0, r5
100585ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100585cc <__arm_cp.13_0>:
100585cc:	0000ffff 	.word	0x0000ffff

100585d0 <__arm_cp.13_1>:
100585d0:	200010a0 	.word	0x200010a0

100585d4 <llc_conn_get_ctrl_pdu_data_p>:
100585d4:	0089      	lsls	r1, r1, #2
100585d6:	1840      	adds	r0, r0, r1
100585d8:	2190      	movs	r1, #144	@ 0x90
100585da:	5840      	ldr	r0, [r0, r1]
100585dc:	1c80      	adds	r0, r0, #2
100585de:	4770      	bx	lr

100585e0 <llc_conn_get_enc_on>:
100585e0:	2900      	cmp	r1, #0
100585e2:	d001      	beq.n	100585e8 <llc_conn_get_enc_on+0x8>
100585e4:	2102      	movs	r1, #2
100585e6:	e000      	b.n	100585ea <llc_conn_get_enc_on+0xa>
100585e8:	2103      	movs	r1, #3
100585ea:	2288      	movs	r2, #136	@ 0x88
100585ec:	5882      	ldr	r2, [r0, r2]
100585ee:	40ca      	lsrs	r2, r1
100585f0:	2001      	movs	r0, #1
100585f2:	4010      	ands	r0, r2
100585f4:	4770      	bx	lr

100585f6 <llc_conn_get_instant_passed>:
100585f6:	219a      	movs	r1, #154	@ 0x9a
100585f8:	5a40      	ldrh	r0, [r0, r1]
100585fa:	0740      	lsls	r0, r0, #29
100585fc:	0fc0      	lsrs	r0, r0, #31
100585fe:	4770      	bx	lr

10058600 <llc_conn_get_instant_reached>:
10058600:	219a      	movs	r1, #154	@ 0x9a
10058602:	5a40      	ldrh	r0, [r0, r1]
10058604:	0780      	lsls	r0, r0, #30
10058606:	0fc0      	lsrs	r0, r0, #31
10058608:	4770      	bx	lr

1005860a <llc_conn_get_rx_ctrl_pdu_full>:
1005860a:	2190      	movs	r1, #144	@ 0x90
1005860c:	5840      	ldr	r0, [r0, r1]
1005860e:	8801      	ldrh	r1, [r0, #0]
10058610:	2001      	movs	r0, #1
10058612:	4008      	ands	r0, r1
10058614:	4770      	bx	lr

10058616 <llc_conn_get_rx_acl_blocked>:
10058616:	2194      	movs	r1, #148	@ 0x94
10058618:	5840      	ldr	r0, [r0, r1]
1005861a:	8800      	ldrh	r0, [r0, #0]
1005861c:	05c0      	lsls	r0, r0, #23
1005861e:	0fc0      	lsrs	r0, r0, #31
10058620:	4770      	bx	lr

10058622 <llc_conn_get_tx_acl_blocked>:
10058622:	2194      	movs	r1, #148	@ 0x94
10058624:	5840      	ldr	r0, [r0, r1]
10058626:	8800      	ldrh	r0, [r0, #0]
10058628:	b2c0      	uxtb	r0, r0
1005862a:	09c0      	lsrs	r0, r0, #7
1005862c:	4770      	bx	lr

1005862e <llc_conn_get_tx_ctrl_pdu_state>:
1005862e:	2194      	movs	r1, #148	@ 0x94
10058630:	5840      	ldr	r0, [r0, r1]
10058632:	8801      	ldrh	r1, [r0, #0]
10058634:	2003      	movs	r0, #3
10058636:	4008      	ands	r0, r1
10058638:	4770      	bx	lr
	...

1005863c <llc_conn_guard_time_for_close_conn_event>:
1005863c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005863e:	4607      	mov	r7, r0
10058640:	2441      	movs	r4, #65	@ 0x41
10058642:	5d00      	ldrb	r0, [r0, r4]
10058644:	f7ef f970 	bl	10047928 <BLEPLAT_CNTR_SmGetTxPhy>
10058648:	4605      	mov	r5, r0
1005864a:	5d38      	ldrb	r0, [r7, r4]
1005864c:	f7ef f95b 	bl	10047906 <BLEPLAT_CNTR_SmGetRxPhy>
10058650:	23b6      	movs	r3, #182	@ 0xb6
10058652:	1e6c      	subs	r4, r5, #1
10058654:	b2e1      	uxtb	r1, r4
10058656:	9702      	str	r7, [sp, #8]
10058658:	37b6      	adds	r7, #182	@ 0xb6
1005865a:	2570      	movs	r5, #112	@ 0x70
1005865c:	2603      	movs	r6, #3
1005865e:	2905      	cmp	r1, #5
10058660:	4632      	mov	r2, r6
10058662:	9501      	str	r5, [sp, #4]
10058664:	4629      	mov	r1, r5
10058666:	d805      	bhi.n	10058674 <llc_conn_guard_time_for_close_conn_event+0x38>
10058668:	b261      	sxtb	r1, r4
1005866a:	008a      	lsls	r2, r1, #2
1005866c:	4919      	ldr	r1, [pc, #100]	@ (100586d4 <__arm_cp.22_0>)
1005866e:	5889      	ldr	r1, [r1, r2]
10058670:	4c19      	ldr	r4, [pc, #100]	@ (100586d8 <__arm_cp.22_1>)
10058672:	58a2      	ldr	r2, [r4, r2]
10058674:	9c02      	ldr	r4, [sp, #8]
10058676:	5ae3      	ldrh	r3, [r4, r3]
10058678:	887c      	ldrh	r4, [r7, #2]
1005867a:	1e40      	subs	r0, r0, #1
1005867c:	b2c5      	uxtb	r5, r0
1005867e:	2d05      	cmp	r5, #5
10058680:	d806      	bhi.n	10058690 <llc_conn_guard_time_for_close_conn_event+0x54>
10058682:	b240      	sxtb	r0, r0
10058684:	0080      	lsls	r0, r0, #2
10058686:	4d13      	ldr	r5, [pc, #76]	@ (100586d4 <__arm_cp.22_0>)
10058688:	582d      	ldr	r5, [r5, r0]
1005868a:	9501      	str	r5, [sp, #4]
1005868c:	4d12      	ldr	r5, [pc, #72]	@ (100586d8 <__arm_cp.22_1>)
1005868e:	582e      	ldr	r6, [r5, r0]
10058690:	4093      	lsls	r3, r2
10058692:	1858      	adds	r0, r3, r1
10058694:	0200      	lsls	r0, r0, #8
10058696:	2147      	movs	r1, #71	@ 0x47
10058698:	00cd      	lsls	r5, r1, #3
1005869a:	1940      	adds	r0, r0, r5
1005869c:	490f      	ldr	r1, [pc, #60]	@ (100586dc <__arm_cp.22_2>)
1005869e:	f7e8 fdd3 	bl	10041248 <__udivsi3>
100586a2:	9000      	str	r0, [sp, #0]
100586a4:	40b4      	lsls	r4, r6
100586a6:	9801      	ldr	r0, [sp, #4]
100586a8:	1820      	adds	r0, r4, r0
100586aa:	0200      	lsls	r0, r0, #8
100586ac:	1940      	adds	r0, r0, r5
100586ae:	490b      	ldr	r1, [pc, #44]	@ (100586dc <__arm_cp.22_2>)
100586b0:	f7e8 fdca 	bl	10041248 <__udivsi3>
100586b4:	4606      	mov	r6, r0
100586b6:	88fc      	ldrh	r4, [r7, #6]
100586b8:	f006 fa76 	bl	1005eba8 <LL_sched_engine_return_actual_scheduler_margin>
100586bc:	9900      	ldr	r1, [sp, #0]
100586be:	1808      	adds	r0, r1, r0
100586c0:	b2b1      	uxth	r1, r6
100586c2:	428c      	cmp	r4, r1
100586c4:	d800      	bhi.n	100586c8 <llc_conn_guard_time_for_close_conn_event+0x8c>
100586c6:	4621      	mov	r1, r4
100586c8:	1840      	adds	r0, r0, r1
100586ca:	30cd      	adds	r0, #205	@ 0xcd
100586cc:	9902      	ldr	r1, [sp, #8]
100586ce:	6748      	str	r0, [r1, #116]	@ 0x74
100586d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100586d2:	46c0      	nop			@ (mov r8, r8)

100586d4 <__arm_cp.22_0>:
100586d4:	1006a028 	.word	0x1006a028

100586d8 <__arm_cp.22_1>:
100586d8:	1006a010 	.word	0x1006a010

100586dc <__arm_cp.22_2>:
100586dc:	00000271 	.word	0x00000271

100586e0 <llc_conn_list_add_address>:
100586e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100586e2:	460a      	mov	r2, r1
100586e4:	4601      	mov	r1, r0
100586e6:	4807      	ldr	r0, [pc, #28]	@ (10058704 <__arm_cp.23_0>)
100586e8:	6800      	ldr	r0, [r0, #0]
100586ea:	239c      	movs	r3, #156	@ 0x9c
100586ec:	58c0      	ldr	r0, [r0, r3]
100586ee:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
100586f0:	6800      	ldr	r0, [r0, #0]
100586f2:	ab02      	add	r3, sp, #8
100586f4:	9301      	str	r3, [sp, #4]
100586f6:	ab03      	add	r3, sp, #12
100586f8:	9300      	str	r3, [sp, #0]
100586fa:	3024      	adds	r0, #36	@ 0x24
100586fc:	2300      	movs	r3, #0
100586fe:	f00a f94f 	bl	100629a0 <addr8_list_add>
10058702:	bd8f      	pop	{r0, r1, r2, r3, r7, pc}

10058704 <__arm_cp.23_0>:
10058704:	200010f4 	.word	0x200010f4

10058708 <llc_conn_list_reset>:
10058708:	b580      	push	{r7, lr}
1005870a:	4805      	ldr	r0, [pc, #20]	@ (10058720 <__arm_cp.24_0>)
1005870c:	6800      	ldr	r0, [r0, #0]
1005870e:	219c      	movs	r1, #156	@ 0x9c
10058710:	5840      	ldr	r0, [r0, r1]
10058712:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10058714:	6800      	ldr	r0, [r0, #0]
10058716:	3024      	adds	r0, #36	@ 0x24
10058718:	f00a f9c1 	bl	10062a9e <addr8_list_clear>
1005871c:	bd80      	pop	{r7, pc}
1005871e:	46c0      	nop			@ (mov r8, r8)

10058720 <__arm_cp.24_0>:
10058720:	200010f4 	.word	0x200010f4

10058724 <llc_conn_list_remove_address>:
10058724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10058726:	460a      	mov	r2, r1
10058728:	4601      	mov	r1, r0
1005872a:	4807      	ldr	r0, [pc, #28]	@ (10058748 <__arm_cp.25_0>)
1005872c:	6800      	ldr	r0, [r0, #0]
1005872e:	239c      	movs	r3, #156	@ 0x9c
10058730:	58c0      	ldr	r0, [r0, r3]
10058732:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10058734:	6800      	ldr	r0, [r0, #0]
10058736:	ab02      	add	r3, sp, #8
10058738:	9301      	str	r3, [sp, #4]
1005873a:	ab03      	add	r3, sp, #12
1005873c:	9300      	str	r3, [sp, #0]
1005873e:	3024      	adds	r0, #36	@ 0x24
10058740:	2300      	movs	r3, #0
10058742:	f00a f970 	bl	10062a26 <addr8_list_remove_by_addr>
10058746:	bd8f      	pop	{r0, r1, r2, r3, r7, pc}

10058748 <__arm_cp.25_0>:
10058748:	200010f4 	.word	0x200010f4

1005874c <llc_conn_list_search_address>:
1005874c:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1005874e:	460c      	mov	r4, r1
10058750:	4605      	mov	r5, r0
10058752:	f7ff fc9f 	bl	10058094 <llc_conn_get_cntxt_p>
10058756:	2136      	movs	r1, #54	@ 0x36
10058758:	5c40      	ldrb	r0, [r0, r1]
1005875a:	2800      	cmp	r0, #0
1005875c:	d001      	beq.n	10058762 <llc_conn_list_search_address+0x16>
1005875e:	2000      	movs	r0, #0
10058760:	e011      	b.n	10058786 <llc_conn_list_search_address+0x3a>
10058762:	480a      	ldr	r0, [pc, #40]	@ (1005878c <__arm_cp.26_0>)
10058764:	6800      	ldr	r0, [r0, #0]
10058766:	219c      	movs	r1, #156	@ 0x9c
10058768:	5840      	ldr	r0, [r0, r1]
1005876a:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005876c:	6801      	ldr	r1, [r0, #0]
1005876e:	6a48      	ldr	r0, [r1, #36]	@ 0x24
10058770:	6a89      	ldr	r1, [r1, #40]	@ 0x28
10058772:	aa03      	add	r2, sp, #12
10058774:	2300      	movs	r3, #0
10058776:	9300      	str	r3, [sp, #0]
10058778:	9201      	str	r2, [sp, #4]
1005877a:	22fe      	movs	r2, #254	@ 0xfe
1005877c:	4395      	bics	r5, r2
1005877e:	462a      	mov	r2, r5
10058780:	4623      	mov	r3, r4
10058782:	f00a f8c9 	bl	10062918 <addr8_list_search>
10058786:	b004      	add	sp, #16
10058788:	bdb0      	pop	{r4, r5, r7, pc}
1005878a:	46c0      	nop			@ (mov r8, r8)

1005878c <__arm_cp.26_0>:
1005878c:	200010f4 	.word	0x200010f4

10058790 <llc_conn_push_adv_set_terminated_event>:
10058790:	b570      	push	{r4, r5, r6, lr}
10058792:	460d      	mov	r5, r1
10058794:	4604      	mov	r4, r0
10058796:	481a      	ldr	r0, [pc, #104]	@ (10058800 <__arm_cp.27_0>)
10058798:	6800      	ldr	r0, [r0, #0]
1005879a:	212c      	movs	r1, #44	@ 0x2c
1005879c:	5c40      	ldrb	r0, [r0, r1]
1005879e:	07c0      	lsls	r0, r0, #31
100587a0:	0ec1      	lsrs	r1, r0, #27
100587a2:	d101      	bne.n	100587a8 <llc_conn_push_adv_set_terminated_event+0x18>
100587a4:	2211      	movs	r2, #17
100587a6:	e00a      	b.n	100587be <llc_conn_push_adv_set_terminated_event+0x2e>
100587a8:	4816      	ldr	r0, [pc, #88]	@ (10058804 <__arm_cp.27_1>)
100587aa:	6800      	ldr	r0, [r0, #0]
100587ac:	223d      	movs	r2, #61	@ 0x3d
100587ae:	5c82      	ldrb	r2, [r0, r2]
100587b0:	0692      	lsls	r2, r2, #26
100587b2:	d524      	bpl.n	100587fe <llc_conn_push_adv_set_terminated_event+0x6e>
100587b4:	303d      	adds	r0, #61	@ 0x3d
100587b6:	7ac0      	ldrb	r0, [r0, #11]
100587b8:	0780      	lsls	r0, r0, #30
100587ba:	d520      	bpl.n	100587fe <llc_conn_push_adv_set_terminated_event+0x6e>
100587bc:	221f      	movs	r2, #31
100587be:	204e      	movs	r0, #78	@ 0x4e
100587c0:	43c0      	mvns	r0, r0
100587c2:	4041      	eors	r1, r0
100587c4:	4810      	ldr	r0, [pc, #64]	@ (10058808 <__arm_cp.27_2>)
100587c6:	6800      	ldr	r0, [r0, #0]
100587c8:	6940      	ldr	r0, [r0, #20]
100587ca:	b2ce      	uxtb	r6, r1
100587cc:	2303      	movs	r3, #3
100587ce:	4631      	mov	r1, r6
100587d0:	f7fa fbb2 	bl	10052f38 <aci_event_fifo_push_header>
100587d4:	2800      	cmp	r0, #0
100587d6:	d012      	beq.n	100587fe <llc_conn_push_adv_set_terminated_event+0x6e>
100587d8:	4601      	mov	r1, r0
100587da:	7284      	strb	r4, [r0, #10]
100587dc:	2000      	movs	r0, #0
100587de:	7308      	strb	r0, [r1, #12]
100587e0:	724d      	strb	r5, [r1, #9]
100587e2:	7208      	strb	r0, [r1, #8]
100587e4:	2012      	movs	r0, #18
100587e6:	71c8      	strb	r0, [r1, #7]
100587e8:	2006      	movs	r0, #6
100587ea:	7188      	strb	r0, [r1, #6]
100587ec:	203e      	movs	r0, #62	@ 0x3e
100587ee:	7148      	strb	r0, [r1, #5]
100587f0:	2004      	movs	r0, #4
100587f2:	7108      	strb	r0, [r1, #4]
100587f4:	0a20      	lsrs	r0, r4, #8
100587f6:	72c8      	strb	r0, [r1, #11]
100587f8:	4630      	mov	r0, r6
100587fa:	f7fa fc3a 	bl	10053072 <aci_event_fifo_push>
100587fe:	bd70      	pop	{r4, r5, r6, pc}

10058800 <__arm_cp.27_0>:
10058800:	200010a0 	.word	0x200010a0

10058804 <__arm_cp.27_1>:
10058804:	200010f4 	.word	0x200010f4

10058808 <__arm_cp.27_2>:
10058808:	200010a4 	.word	0x200010a4

1005880c <llc_conn_push_connection_complete_event>:
1005880c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005880e:	b08d      	sub	sp, #52	@ 0x34
10058810:	4604      	mov	r4, r0
10058812:	4895      	ldr	r0, [pc, #596]	@ (10058a68 <__arm_cp.28_0>)
10058814:	6800      	ldr	r0, [r0, #0]
10058816:	212c      	movs	r1, #44	@ 0x2c
10058818:	5c40      	ldrb	r0, [r0, r1]
1005881a:	07c0      	lsls	r0, r0, #31
1005881c:	0ec5      	lsrs	r5, r0, #27
1005881e:	206f      	movs	r0, #111	@ 0x6f
10058820:	43c6      	mvns	r6, r0
10058822:	406e      	eors	r6, r5
10058824:	f001 f946 	bl	10059ab4 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
10058828:	4990      	ldr	r1, [pc, #576]	@ (10058a6c <__arm_cp.28_1>)
1005882a:	6809      	ldr	r1, [r1, #0]
1005882c:	223d      	movs	r2, #61	@ 0x3d
1005882e:	5c8b      	ldrb	r3, [r1, r2]
10058830:	2220      	movs	r2, #32
10058832:	4013      	ands	r3, r2
10058834:	313d      	adds	r1, #61	@ 0x3d
10058836:	2800      	cmp	r0, #0
10058838:	d066      	beq.n	10058908 <llc_conn_push_connection_complete_event+0xfc>
1005883a:	2b00      	cmp	r3, #0
1005883c:	d100      	bne.n	10058840 <llc_conn_push_connection_complete_event+0x34>
1005883e:	e110      	b.n	10058a62 <llc_conn_push_connection_complete_event+0x256>
10058840:	7b88      	ldrb	r0, [r1, #14]
10058842:	07c0      	lsls	r0, r0, #31
10058844:	d063      	beq.n	1005890e <llc_conn_push_connection_complete_event+0x102>
10058846:	2d00      	cmp	r5, #0
10058848:	d100      	bne.n	1005884c <llc_conn_push_connection_complete_event+0x40>
1005884a:	2212      	movs	r2, #18
1005884c:	8aa0      	ldrh	r0, [r4, #20]
1005884e:	900c      	str	r0, [sp, #48]	@ 0x30
10058850:	7da7      	ldrb	r7, [r4, #22]
10058852:	7de0      	ldrb	r0, [r4, #23]
10058854:	9008      	str	r0, [sp, #32]
10058856:	8a60      	ldrh	r0, [r4, #18]
10058858:	900b      	str	r0, [sp, #44]	@ 0x2c
1005885a:	8a20      	ldrh	r0, [r4, #16]
1005885c:	9009      	str	r0, [sp, #36]	@ 0x24
1005885e:	89a0      	ldrh	r0, [r4, #12]
10058860:	900a      	str	r0, [sp, #40]	@ 0x28
10058862:	6820      	ldr	r0, [r4, #0]
10058864:	9005      	str	r0, [sp, #20]
10058866:	6860      	ldr	r0, [r4, #4]
10058868:	9007      	str	r0, [sp, #28]
1005886a:	68a0      	ldr	r0, [r4, #8]
1005886c:	9006      	str	r0, [sp, #24]
1005886e:	7e20      	ldrb	r0, [r4, #24]
10058870:	9003      	str	r0, [sp, #12]
10058872:	7e60      	ldrb	r0, [r4, #25]
10058874:	9004      	str	r0, [sp, #16]
10058876:	89e5      	ldrh	r5, [r4, #14]
10058878:	7ea0      	ldrb	r0, [r4, #26]
1005887a:	9002      	str	r0, [sp, #8]
1005887c:	487c      	ldr	r0, [pc, #496]	@ (10058a70 <__arm_cp.28_2>)
1005887e:	6800      	ldr	r0, [r0, #0]
10058880:	6900      	ldr	r0, [r0, #16]
10058882:	b2f1      	uxtb	r1, r6
10058884:	230a      	movs	r3, #10
10058886:	f7fa fb57 	bl	10052f38 <aci_event_fifo_push_header>
1005888a:	2800      	cmp	r0, #0
1005888c:	d100      	bne.n	10058890 <llc_conn_push_connection_complete_event+0x84>
1005888e:	e0e8      	b.n	10058a62 <llc_conn_push_connection_complete_event+0x256>
10058890:	4604      	mov	r4, r0
10058892:	9701      	str	r7, [sp, #4]
10058894:	4607      	mov	r7, r0
10058896:	371f      	adds	r7, #31
10058898:	7245      	strb	r5, [r0, #9]
1005889a:	9803      	ldr	r0, [sp, #12]
1005889c:	7320      	strb	r0, [r4, #12]
1005889e:	9804      	ldr	r0, [sp, #16]
100588a0:	72e0      	strb	r0, [r4, #11]
100588a2:	9802      	ldr	r0, [sp, #8]
100588a4:	7220      	strb	r0, [r4, #8]
100588a6:	0a28      	lsrs	r0, r5, #8
100588a8:	72a0      	strb	r0, [r4, #10]
100588aa:	4620      	mov	r0, r4
100588ac:	300d      	adds	r0, #13
100588ae:	2506      	movs	r5, #6
100588b0:	9905      	ldr	r1, [sp, #20]
100588b2:	462a      	mov	r2, r5
100588b4:	4b6f      	ldr	r3, [pc, #444]	@ (10058a74 <__arm_cp.28_3>)
100588b6:	4798      	blx	r3
100588b8:	4620      	mov	r0, r4
100588ba:	3013      	adds	r0, #19
100588bc:	9906      	ldr	r1, [sp, #24]
100588be:	462a      	mov	r2, r5
100588c0:	4b6c      	ldr	r3, [pc, #432]	@ (10058a74 <__arm_cp.28_3>)
100588c2:	4798      	blx	r3
100588c4:	4b6b      	ldr	r3, [pc, #428]	@ (10058a74 <__arm_cp.28_3>)
100588c6:	4620      	mov	r0, r4
100588c8:	3019      	adds	r0, #25
100588ca:	9907      	ldr	r1, [sp, #28]
100588cc:	462a      	mov	r2, r5
100588ce:	4798      	blx	r3
100588d0:	2021      	movs	r0, #33	@ 0x21
100588d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
100588d4:	5421      	strb	r1, [r4, r0]
100588d6:	2025      	movs	r0, #37	@ 0x25
100588d8:	9a08      	ldr	r2, [sp, #32]
100588da:	5422      	strb	r2, [r4, r0]
100588dc:	4620      	mov	r0, r4
100588de:	3021      	adds	r0, #33	@ 0x21
100588e0:	0a09      	lsrs	r1, r1, #8
100588e2:	7041      	strb	r1, [r0, #1]
100588e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
100588e6:	0a08      	lsrs	r0, r1, #8
100588e8:	7078      	strb	r0, [r7, #1]
100588ea:	7039      	strb	r1, [r7, #0]
100588ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
100588ee:	0a08      	lsrs	r0, r1, #8
100588f0:	7178      	strb	r0, [r7, #5]
100588f2:	7139      	strb	r1, [r7, #4]
100588f4:	990c      	ldr	r1, [sp, #48]	@ 0x30
100588f6:	0a08      	lsrs	r0, r1, #8
100588f8:	7278      	strb	r0, [r7, #9]
100588fa:	7239      	strb	r1, [r7, #8]
100588fc:	9801      	ldr	r0, [sp, #4]
100588fe:	71f8      	strb	r0, [r7, #7]
10058900:	1d20      	adds	r0, r4, #4
10058902:	2129      	movs	r1, #41	@ 0x29
10058904:	2222      	movs	r2, #34	@ 0x22
10058906:	e0a2      	b.n	10058a4e <llc_conn_push_connection_complete_event+0x242>
10058908:	2b00      	cmp	r3, #0
1005890a:	d100      	bne.n	1005890e <llc_conn_push_connection_complete_event+0x102>
1005890c:	e0a9      	b.n	10058a62 <llc_conn_push_connection_complete_event+0x256>
1005890e:	7a88      	ldrb	r0, [r1, #10]
10058910:	0780      	lsls	r0, r0, #30
10058912:	d445      	bmi.n	100589a0 <llc_conn_push_connection_complete_event+0x194>
10058914:	7a48      	ldrb	r0, [r1, #9]
10058916:	07c0      	lsls	r0, r0, #31
10058918:	d100      	bne.n	1005891c <llc_conn_push_connection_complete_event+0x110>
1005891a:	e0a2      	b.n	10058a62 <llc_conn_push_connection_complete_event+0x256>
1005891c:	2008      	movs	r0, #8
1005891e:	4305      	orrs	r5, r0
10058920:	7de0      	ldrb	r0, [r4, #23]
10058922:	900c      	str	r0, [sp, #48]	@ 0x30
10058924:	8a60      	ldrh	r0, [r4, #18]
10058926:	900b      	str	r0, [sp, #44]	@ 0x2c
10058928:	8a20      	ldrh	r0, [r4, #16]
1005892a:	9009      	str	r0, [sp, #36]	@ 0x24
1005892c:	89a0      	ldrh	r0, [r4, #12]
1005892e:	900a      	str	r0, [sp, #40]	@ 0x28
10058930:	6820      	ldr	r0, [r4, #0]
10058932:	9008      	str	r0, [sp, #32]
10058934:	7e20      	ldrb	r0, [r4, #24]
10058936:	9006      	str	r0, [sp, #24]
10058938:	7e60      	ldrb	r0, [r4, #25]
1005893a:	9007      	str	r0, [sp, #28]
1005893c:	89e7      	ldrh	r7, [r4, #14]
1005893e:	7ea0      	ldrb	r0, [r4, #26]
10058940:	9005      	str	r0, [sp, #20]
10058942:	484b      	ldr	r0, [pc, #300]	@ (10058a70 <__arm_cp.28_2>)
10058944:	6800      	ldr	r0, [r0, #0]
10058946:	6900      	ldr	r0, [r0, #16]
10058948:	b2f1      	uxtb	r1, r6
1005894a:	2306      	movs	r3, #6
1005894c:	462a      	mov	r2, r5
1005894e:	f7fa faf3 	bl	10052f38 <aci_event_fifo_push_header>
10058952:	2800      	cmp	r0, #0
10058954:	d100      	bne.n	10058958 <llc_conn_push_connection_complete_event+0x14c>
10058956:	e084      	b.n	10058a62 <llc_conn_push_connection_complete_event+0x256>
10058958:	4604      	mov	r4, r0
1005895a:	4605      	mov	r5, r0
1005895c:	3513      	adds	r5, #19
1005895e:	7247      	strb	r7, [r0, #9]
10058960:	9806      	ldr	r0, [sp, #24]
10058962:	7320      	strb	r0, [r4, #12]
10058964:	9807      	ldr	r0, [sp, #28]
10058966:	72e0      	strb	r0, [r4, #11]
10058968:	9805      	ldr	r0, [sp, #20]
1005896a:	7220      	strb	r0, [r4, #8]
1005896c:	0a38      	lsrs	r0, r7, #8
1005896e:	72a0      	strb	r0, [r4, #10]
10058970:	4620      	mov	r0, r4
10058972:	300d      	adds	r0, #13
10058974:	2206      	movs	r2, #6
10058976:	9908      	ldr	r1, [sp, #32]
10058978:	f7ed fb6c 	bl	10046054 <BLEPLAT_MemCpy>
1005897c:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005897e:	0a08      	lsrs	r0, r1, #8
10058980:	75a0      	strb	r0, [r4, #22]
10058982:	7561      	strb	r1, [r4, #21]
10058984:	990a      	ldr	r1, [sp, #40]	@ 0x28
10058986:	0a08      	lsrs	r0, r1, #8
10058988:	7068      	strb	r0, [r5, #1]
1005898a:	7029      	strb	r1, [r5, #0]
1005898c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005898e:	0a08      	lsrs	r0, r1, #8
10058990:	7168      	strb	r0, [r5, #5]
10058992:	7129      	strb	r1, [r5, #4]
10058994:	980c      	ldr	r0, [sp, #48]	@ 0x30
10058996:	7660      	strb	r0, [r4, #25]
10058998:	1d20      	adds	r0, r4, #4
1005899a:	2101      	movs	r1, #1
1005899c:	2213      	movs	r2, #19
1005899e:	e056      	b.n	10058a4e <llc_conn_push_connection_complete_event+0x242>
100589a0:	2d00      	cmp	r5, #0
100589a2:	d001      	beq.n	100589a8 <llc_conn_push_connection_complete_event+0x19c>
100589a4:	221c      	movs	r2, #28
100589a6:	e000      	b.n	100589aa <llc_conn_push_connection_complete_event+0x19e>
100589a8:	220d      	movs	r2, #13
100589aa:	7de0      	ldrb	r0, [r4, #23]
100589ac:	900a      	str	r0, [sp, #40]	@ 0x28
100589ae:	8a67      	ldrh	r7, [r4, #18]
100589b0:	8a20      	ldrh	r0, [r4, #16]
100589b2:	900b      	str	r0, [sp, #44]	@ 0x2c
100589b4:	89a0      	ldrh	r0, [r4, #12]
100589b6:	900c      	str	r0, [sp, #48]	@ 0x30
100589b8:	6820      	ldr	r0, [r4, #0]
100589ba:	9007      	str	r0, [sp, #28]
100589bc:	6860      	ldr	r0, [r4, #4]
100589be:	9009      	str	r0, [sp, #36]	@ 0x24
100589c0:	68a0      	ldr	r0, [r4, #8]
100589c2:	9008      	str	r0, [sp, #32]
100589c4:	7e20      	ldrb	r0, [r4, #24]
100589c6:	9005      	str	r0, [sp, #20]
100589c8:	7e60      	ldrb	r0, [r4, #25]
100589ca:	9006      	str	r0, [sp, #24]
100589cc:	89e5      	ldrh	r5, [r4, #14]
100589ce:	7ea0      	ldrb	r0, [r4, #26]
100589d0:	9004      	str	r0, [sp, #16]
100589d2:	4827      	ldr	r0, [pc, #156]	@ (10058a70 <__arm_cp.28_2>)
100589d4:	6800      	ldr	r0, [r0, #0]
100589d6:	6900      	ldr	r0, [r0, #16]
100589d8:	b2f1      	uxtb	r1, r6
100589da:	2309      	movs	r3, #9
100589dc:	f7fa faac 	bl	10052f38 <aci_event_fifo_push_header>
100589e0:	2800      	cmp	r0, #0
100589e2:	d03e      	beq.n	10058a62 <llc_conn_push_connection_complete_event+0x256>
100589e4:	4604      	mov	r4, r0
100589e6:	9703      	str	r7, [sp, #12]
100589e8:	4607      	mov	r7, r0
100589ea:	371f      	adds	r7, #31
100589ec:	7245      	strb	r5, [r0, #9]
100589ee:	9805      	ldr	r0, [sp, #20]
100589f0:	7320      	strb	r0, [r4, #12]
100589f2:	9806      	ldr	r0, [sp, #24]
100589f4:	72e0      	strb	r0, [r4, #11]
100589f6:	9804      	ldr	r0, [sp, #16]
100589f8:	7220      	strb	r0, [r4, #8]
100589fa:	0a28      	lsrs	r0, r5, #8
100589fc:	72a0      	strb	r0, [r4, #10]
100589fe:	4620      	mov	r0, r4
10058a00:	300d      	adds	r0, #13
10058a02:	2506      	movs	r5, #6
10058a04:	9907      	ldr	r1, [sp, #28]
10058a06:	462a      	mov	r2, r5
10058a08:	4b1a      	ldr	r3, [pc, #104]	@ (10058a74 <__arm_cp.28_3>)
10058a0a:	4798      	blx	r3
10058a0c:	4620      	mov	r0, r4
10058a0e:	3013      	adds	r0, #19
10058a10:	9908      	ldr	r1, [sp, #32]
10058a12:	462a      	mov	r2, r5
10058a14:	4b17      	ldr	r3, [pc, #92]	@ (10058a74 <__arm_cp.28_3>)
10058a16:	4798      	blx	r3
10058a18:	4b16      	ldr	r3, [pc, #88]	@ (10058a74 <__arm_cp.28_3>)
10058a1a:	4620      	mov	r0, r4
10058a1c:	3019      	adds	r0, #25
10058a1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
10058a20:	462a      	mov	r2, r5
10058a22:	4798      	blx	r3
10058a24:	2021      	movs	r0, #33	@ 0x21
10058a26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
10058a28:	5422      	strb	r2, [r4, r0]
10058a2a:	2025      	movs	r0, #37	@ 0x25
10058a2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
10058a2e:	5421      	strb	r1, [r4, r0]
10058a30:	1d20      	adds	r0, r4, #4
10058a32:	4621      	mov	r1, r4
10058a34:	3121      	adds	r1, #33	@ 0x21
10058a36:	0a12      	lsrs	r2, r2, #8
10058a38:	704a      	strb	r2, [r1, #1]
10058a3a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10058a3c:	0a11      	lsrs	r1, r2, #8
10058a3e:	7079      	strb	r1, [r7, #1]
10058a40:	703a      	strb	r2, [r7, #0]
10058a42:	9a03      	ldr	r2, [sp, #12]
10058a44:	0a11      	lsrs	r1, r2, #8
10058a46:	7179      	strb	r1, [r7, #5]
10058a48:	713a      	strb	r2, [r7, #4]
10058a4a:	210a      	movs	r1, #10
10058a4c:	221f      	movs	r2, #31
10058a4e:	2304      	movs	r3, #4
10058a50:	7123      	strb	r3, [r4, #4]
10058a52:	233e      	movs	r3, #62	@ 0x3e
10058a54:	7043      	strb	r3, [r0, #1]
10058a56:	71e1      	strb	r1, [r4, #7]
10058a58:	71a2      	strb	r2, [r4, #6]
10058a5a:	b2f0      	uxtb	r0, r6
10058a5c:	4621      	mov	r1, r4
10058a5e:	f7fa fb08 	bl	10053072 <aci_event_fifo_push>
10058a62:	b00d      	add	sp, #52	@ 0x34
10058a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
10058a66:	46c0      	nop			@ (mov r8, r8)

10058a68 <__arm_cp.28_0>:
10058a68:	200010a0 	.word	0x200010a0

10058a6c <__arm_cp.28_1>:
10058a6c:	200010f4 	.word	0x200010f4

10058a70 <__arm_cp.28_2>:
10058a70:	200010a4 	.word	0x200010a4

10058a74 <__arm_cp.28_3>:
10058a74:	10046055 	.word	0x10046055

10058a78 <llc_conn_push_csa_event>:
10058a78:	b5b0      	push	{r4, r5, r7, lr}
10058a7a:	460d      	mov	r5, r1
10058a7c:	4604      	mov	r4, r0
10058a7e:	4812      	ldr	r0, [pc, #72]	@ (10058ac8 <__arm_cp.29_0>)
10058a80:	6800      	ldr	r0, [r0, #0]
10058a82:	213d      	movs	r1, #61	@ 0x3d
10058a84:	5c41      	ldrb	r1, [r0, r1]
10058a86:	0689      	lsls	r1, r1, #26
10058a88:	d51c      	bpl.n	10058ac4 <llc_conn_push_csa_event+0x4c>
10058a8a:	303d      	adds	r0, #61	@ 0x3d
10058a8c:	7ac0      	ldrb	r0, [r0, #11]
10058a8e:	0700      	lsls	r0, r0, #28
10058a90:	d518      	bpl.n	10058ac4 <llc_conn_push_csa_event+0x4c>
10058a92:	480e      	ldr	r0, [pc, #56]	@ (10058acc <__arm_cp.29_1>)
10058a94:	6800      	ldr	r0, [r0, #0]
10058a96:	6940      	ldr	r0, [r0, #20]
10058a98:	21a1      	movs	r1, #161	@ 0xa1
10058a9a:	222c      	movs	r2, #44	@ 0x2c
10058a9c:	2302      	movs	r3, #2
10058a9e:	f7fa fa4b 	bl	10052f38 <aci_event_fifo_push_header>
10058aa2:	2800      	cmp	r0, #0
10058aa4:	d00e      	beq.n	10058ac4 <llc_conn_push_csa_event+0x4c>
10058aa6:	4601      	mov	r1, r0
10058aa8:	7204      	strb	r4, [r0, #8]
10058aaa:	7285      	strb	r5, [r0, #10]
10058aac:	2014      	movs	r0, #20
10058aae:	71c8      	strb	r0, [r1, #7]
10058ab0:	2004      	movs	r0, #4
10058ab2:	7188      	strb	r0, [r1, #6]
10058ab4:	223e      	movs	r2, #62	@ 0x3e
10058ab6:	714a      	strb	r2, [r1, #5]
10058ab8:	7108      	strb	r0, [r1, #4]
10058aba:	0a20      	lsrs	r0, r4, #8
10058abc:	7248      	strb	r0, [r1, #9]
10058abe:	20a1      	movs	r0, #161	@ 0xa1
10058ac0:	f7fa fad7 	bl	10053072 <aci_event_fifo_push>
10058ac4:	bdb0      	pop	{r4, r5, r7, pc}
10058ac6:	46c0      	nop			@ (mov r8, r8)

10058ac8 <__arm_cp.29_0>:
10058ac8:	200010f4 	.word	0x200010f4

10058acc <__arm_cp.29_1>:
10058acc:	200010a4 	.word	0x200010a4

10058ad0 <llc_conn_set_chmap_params>:
10058ad0:	2398      	movs	r3, #152	@ 0x98
10058ad2:	52c2      	strh	r2, [r0, r3]
10058ad4:	3098      	adds	r0, #152	@ 0x98
10058ad6:	6341      	str	r1, [r0, #52]	@ 0x34
10058ad8:	8841      	ldrh	r1, [r0, #2]
10058ada:	2220      	movs	r2, #32
10058adc:	430a      	orrs	r2, r1
10058ade:	8042      	strh	r2, [r0, #2]
10058ae0:	4770      	bx	lr

10058ae2 <llc_conn_set_conn_update_params>:
10058ae2:	2398      	movs	r3, #152	@ 0x98
10058ae4:	52c2      	strh	r2, [r0, r3]
10058ae6:	3098      	adds	r0, #152	@ 0x98
10058ae8:	6301      	str	r1, [r0, #48]	@ 0x30
10058aea:	8841      	ldrh	r1, [r0, #2]
10058aec:	2208      	movs	r2, #8
10058aee:	430a      	orrs	r2, r1
10058af0:	8042      	strh	r2, [r0, #2]
10058af2:	4770      	bx	lr

10058af4 <llc_conn_set_rx_acl_blocked>:
10058af4:	2194      	movs	r1, #148	@ 0x94
10058af6:	5840      	ldr	r0, [r0, r1]
10058af8:	8801      	ldrh	r1, [r0, #0]
10058afa:	2201      	movs	r2, #1
10058afc:	0212      	lsls	r2, r2, #8
10058afe:	430a      	orrs	r2, r1
10058b00:	8002      	strh	r2, [r0, #0]
10058b02:	4770      	bx	lr

10058b04 <llc_conn_set_start_enc>:
10058b04:	2294      	movs	r2, #148	@ 0x94
10058b06:	5880      	ldr	r0, [r0, r2]
10058b08:	2900      	cmp	r1, #0
10058b0a:	d007      	beq.n	10058b1c <llc_conn_set_start_enc+0x18>
10058b0c:	2901      	cmp	r1, #1
10058b0e:	d003      	beq.n	10058b18 <llc_conn_set_start_enc+0x14>
10058b10:	8801      	ldrh	r1, [r0, #0]
10058b12:	2210      	movs	r2, #16
10058b14:	430a      	orrs	r2, r1
10058b16:	8002      	strh	r2, [r0, #0]
10058b18:	2108      	movs	r1, #8
10058b1a:	e000      	b.n	10058b1e <llc_conn_set_start_enc+0x1a>
10058b1c:	2110      	movs	r1, #16
10058b1e:	8802      	ldrh	r2, [r0, #0]
10058b20:	430a      	orrs	r2, r1
10058b22:	8002      	strh	r2, [r0, #0]
10058b24:	4770      	bx	lr

10058b26 <llc_conn_set_stop_enc>:
10058b26:	2294      	movs	r2, #148	@ 0x94
10058b28:	5880      	ldr	r0, [r0, r2]
10058b2a:	2900      	cmp	r1, #0
10058b2c:	d007      	beq.n	10058b3e <llc_conn_set_stop_enc+0x18>
10058b2e:	2901      	cmp	r1, #1
10058b30:	d003      	beq.n	10058b3a <llc_conn_set_stop_enc+0x14>
10058b32:	8801      	ldrh	r1, [r0, #0]
10058b34:	2240      	movs	r2, #64	@ 0x40
10058b36:	430a      	orrs	r2, r1
10058b38:	8002      	strh	r2, [r0, #0]
10058b3a:	2120      	movs	r1, #32
10058b3c:	e000      	b.n	10058b40 <llc_conn_set_stop_enc+0x1a>
10058b3e:	2140      	movs	r1, #64	@ 0x40
10058b40:	8802      	ldrh	r2, [r0, #0]
10058b42:	430a      	orrs	r2, r1
10058b44:	8002      	strh	r2, [r0, #0]
10058b46:	4770      	bx	lr

10058b48 <llc_conn_set_tx_acl_blocked>:
10058b48:	2194      	movs	r1, #148	@ 0x94
10058b4a:	5840      	ldr	r0, [r0, r1]
10058b4c:	8801      	ldrh	r1, [r0, #0]
10058b4e:	2280      	movs	r2, #128	@ 0x80
10058b50:	430a      	orrs	r2, r1
10058b52:	8002      	strh	r2, [r0, #0]
10058b54:	4770      	bx	lr

10058b56 <llc_conn_set_tx_ctrl_pdu_has_instant>:
10058b56:	2194      	movs	r1, #148	@ 0x94
10058b58:	5840      	ldr	r0, [r0, r1]
10058b5a:	8801      	ldrh	r1, [r0, #0]
10058b5c:	2204      	movs	r2, #4
10058b5e:	430a      	orrs	r2, r1
10058b60:	8002      	strh	r2, [r0, #0]
10058b62:	4770      	bx	lr

10058b64 <llc_conn_set_tx_ctrl_pdu_state>:
10058b64:	b580      	push	{r7, lr}
10058b66:	2294      	movs	r2, #148	@ 0x94
10058b68:	5880      	ldr	r0, [r0, r2]
10058b6a:	8802      	ldrh	r2, [r0, #0]
10058b6c:	2303      	movs	r3, #3
10058b6e:	439a      	bics	r2, r3
10058b70:	8002      	strh	r2, [r0, #0]
10058b72:	4019      	ands	r1, r3
10058b74:	8802      	ldrh	r2, [r0, #0]
10058b76:	430a      	orrs	r2, r1
10058b78:	8002      	strh	r2, [r0, #0]
10058b7a:	2015      	movs	r0, #21
10058b7c:	f009 fc9c 	bl	100624b8 <tsk_notify_idx>
10058b80:	f7ea ffcb 	bl	10043b1a <BLE_STACK_ProcessRequest>
10058b84:	bd80      	pop	{r7, pc}

10058b86 <llc_conn_calc_skip_ucfg_weak>:
10058b86:	4610      	mov	r0, r2
10058b88:	4770      	bx	lr

10058b8a <llc_conn_check_ctrl_proc_rsp_timer>:
10058b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10058b8c:	460d      	mov	r5, r1
10058b8e:	4604      	mov	r4, r0
10058b90:	2030      	movs	r0, #48	@ 0x30
10058b92:	5c20      	ldrb	r0, [r4, r0]
10058b94:	2101      	movs	r1, #1
10058b96:	f001 f828 	bl	10059bea <LL_cpe_get_active_status>
10058b9a:	4627      	mov	r7, r4
10058b9c:	3730      	adds	r7, #48	@ 0x30
10058b9e:	2801      	cmp	r0, #1
10058ba0:	d10e      	bne.n	10058bc0 <llc_conn_check_ctrl_proc_rsp_timer+0x36>
10058ba2:	7838      	ldrb	r0, [r7, #0]
10058ba4:	2101      	movs	r1, #1
10058ba6:	f001 fe47 	bl	1005a838 <LL_cpe_conn_exception_opcode_from_sm>
10058baa:	2800      	cmp	r0, #0
10058bac:	d108      	bne.n	10058bc0 <llc_conn_check_ctrl_proc_rsp_timer+0x36>
10058bae:	6f20      	ldr	r0, [r4, #112]	@ 0x70
10058bb0:	1e41      	subs	r1, r0, #1
10058bb2:	d41d      	bmi.n	10058bf0 <llc_conn_check_ctrl_proc_rsp_timer+0x66>
10058bb4:	217d      	movs	r1, #125	@ 0x7d
10058bb6:	0449      	lsls	r1, r1, #17
10058bb8:	4288      	cmp	r0, r1
10058bba:	d800      	bhi.n	10058bbe <llc_conn_check_ctrl_proc_rsp_timer+0x34>
10058bbc:	1b41      	subs	r1, r0, r5
10058bbe:	6721      	str	r1, [r4, #112]	@ 0x70
10058bc0:	7838      	ldrb	r0, [r7, #0]
10058bc2:	2600      	movs	r6, #0
10058bc4:	4631      	mov	r1, r6
10058bc6:	f001 f810 	bl	10059bea <LL_cpe_get_active_status>
10058bca:	2801      	cmp	r0, #1
10058bcc:	d111      	bne.n	10058bf2 <llc_conn_check_ctrl_proc_rsp_timer+0x68>
10058bce:	7838      	ldrb	r0, [r7, #0]
10058bd0:	2600      	movs	r6, #0
10058bd2:	4631      	mov	r1, r6
10058bd4:	f001 fe30 	bl	1005a838 <LL_cpe_conn_exception_opcode_from_sm>
10058bd8:	2800      	cmp	r0, #0
10058bda:	d10a      	bne.n	10058bf2 <llc_conn_check_ctrl_proc_rsp_timer+0x68>
10058bdc:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
10058bde:	1e41      	subs	r1, r0, #1
10058be0:	d406      	bmi.n	10058bf0 <llc_conn_check_ctrl_proc_rsp_timer+0x66>
10058be2:	217d      	movs	r1, #125	@ 0x7d
10058be4:	0449      	lsls	r1, r1, #17
10058be6:	4288      	cmp	r0, r1
10058be8:	d800      	bhi.n	10058bec <llc_conn_check_ctrl_proc_rsp_timer+0x62>
10058bea:	1b41      	subs	r1, r0, r5
10058bec:	66e1      	str	r1, [r4, #108]	@ 0x6c
10058bee:	e000      	b.n	10058bf2 <llc_conn_check_ctrl_proc_rsp_timer+0x68>
10058bf0:	2622      	movs	r6, #34	@ 0x22
10058bf2:	4630      	mov	r0, r6
10058bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10058bf8 <llc_conn_check_instant_and_set_params>:
10058bf8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10058bfa:	4604      	mov	r4, r0
10058bfc:	209a      	movs	r0, #154	@ 0x9a
10058bfe:	5a20      	ldrh	r0, [r4, r0]
10058c00:	07c2      	lsls	r2, r0, #31
10058c02:	4625      	mov	r5, r4
10058c04:	352c      	adds	r5, #44	@ 0x2c
10058c06:	2a00      	cmp	r2, #0
10058c08:	d100      	bne.n	10058c0c <llc_conn_check_instant_and_set_params+0x14>
10058c0a:	e081      	b.n	10058d10 <llc_conn_check_instant_and_set_params+0x118>
10058c0c:	4626      	mov	r6, r4
10058c0e:	3698      	adds	r6, #152	@ 0x98
10058c10:	8832      	ldrh	r2, [r6, #0]
10058c12:	1a51      	subs	r1, r2, r1
10058c14:	040b      	lsls	r3, r1, #16
10058c16:	d004      	beq.n	10058c22 <llc_conn_check_instant_and_set_params+0x2a>
10058c18:	b208      	sxth	r0, r1
10058c1a:	2800      	cmp	r0, #0
10058c1c:	d578      	bpl.n	10058d10 <llc_conn_check_instant_and_set_params+0x118>
10058c1e:	2028      	movs	r0, #40	@ 0x28
10058c20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10058c22:	0541      	lsls	r1, r0, #21
10058c24:	d40f      	bmi.n	10058c46 <llc_conn_check_instant_and_set_params+0x4e>
10058c26:	0701      	lsls	r1, r0, #28
10058c28:	d416      	bmi.n	10058c58 <llc_conn_check_instant_and_set_params+0x60>
10058c2a:	0680      	lsls	r0, r0, #26
10058c2c:	d438      	bmi.n	10058ca0 <llc_conn_check_instant_and_set_params+0xa8>
10058c2e:	7928      	ldrb	r0, [r5, #4]
10058c30:	f7f8 fe3d 	bl	100518ae <LL_phy_upd_pending_ucfg>
10058c34:	2800      	cmp	r0, #0
10058c36:	d060      	beq.n	10058cfa <llc_conn_check_instant_and_set_params+0x102>
10058c38:	7928      	ldrb	r0, [r5, #4]
10058c3a:	2101      	movs	r1, #1
10058c3c:	2200      	movs	r2, #0
10058c3e:	4613      	mov	r3, r2
10058c40:	f003 fca6 	bl	1005c590 <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>
10058c44:	e059      	b.n	10058cfa <llc_conn_check_instant_and_set_params+0x102>
10058c46:	7928      	ldrb	r0, [r5, #4]
10058c48:	4611      	mov	r1, r2
10058c4a:	f7ff fa21 	bl	10058090 <llc_cig_cmn_start_cis_ucfg_weak>
10058c4e:	8870      	ldrh	r0, [r6, #2]
10058c50:	4932      	ldr	r1, [pc, #200]	@ (10058d1c <__arm_cp.2_0>)
10058c52:	4001      	ands	r1, r0
10058c54:	8071      	strh	r1, [r6, #2]
10058c56:	e050      	b.n	10058cfa <llc_conn_check_instant_and_set_params+0x102>
10058c58:	6c60      	ldr	r0, [r4, #68]	@ 0x44
10058c5a:	6b37      	ldr	r7, [r6, #48]	@ 0x30
10058c5c:	6879      	ldr	r1, [r7, #4]
10058c5e:	1840      	adds	r0, r0, r1
10058c60:	6460      	str	r0, [r4, #68]	@ 0x44
10058c62:	68b9      	ldr	r1, [r7, #8]
10058c64:	683a      	ldr	r2, [r7, #0]
10058c66:	7828      	ldrb	r0, [r5, #0]
10058c68:	2802      	cmp	r0, #2
10058c6a:	9102      	str	r1, [sp, #8]
10058c6c:	9201      	str	r2, [sp, #4]
10058c6e:	d129      	bne.n	10058cc4 <llc_conn_check_instant_and_set_params+0xcc>
10058c70:	7d68      	ldrb	r0, [r5, #21]
10058c72:	f7ee fe59 	bl	10047928 <BLEPLAT_CNTR_SmGetTxPhy>
10058c76:	2804      	cmp	r0, #4
10058c78:	d001      	beq.n	10058c7e <llc_conn_check_instant_and_set_params+0x86>
10058c7a:	2806      	cmp	r0, #6
10058c7c:	d100      	bne.n	10058c80 <llc_conn_check_instant_and_set_params+0x88>
10058c7e:	2002      	movs	r0, #2
10058c80:	9b02      	ldr	r3, [sp, #8]
10058c82:	6979      	ldr	r1, [r7, #20]
10058c84:	4299      	cmp	r1, r3
10058c86:	460a      	mov	r2, r1
10058c88:	d300      	bcc.n	10058c8c <llc_conn_check_instant_and_set_params+0x94>
10058c8a:	461a      	mov	r2, r3
10058c8c:	6522      	str	r2, [r4, #80]	@ 0x50
10058c8e:	0080      	lsls	r0, r0, #2
10058c90:	1820      	adds	r0, r4, r0
10058c92:	6581      	str	r1, [r0, #88]	@ 0x58
10058c94:	9801      	ldr	r0, [sp, #4]
10058c96:	0840      	lsrs	r0, r0, #1
10058c98:	6c61      	ldr	r1, [r4, #68]	@ 0x44
10058c9a:	1808      	adds	r0, r1, r0
10058c9c:	6460      	str	r0, [r4, #68]	@ 0x44
10058c9e:	e01b      	b.n	10058cd8 <llc_conn_check_instant_and_set_params+0xe0>
10058ca0:	2083      	movs	r0, #131	@ 0x83
10058ca2:	0040      	lsls	r0, r0, #1
10058ca4:	1827      	adds	r7, r4, r0
10058ca6:	6b71      	ldr	r1, [r6, #52]	@ 0x34
10058ca8:	7d68      	ldrb	r0, [r5, #21]
10058caa:	f7ee fea3 	bl	100479f4 <BLEPLAT_CNTR_SmSetChannelMap>
10058cae:	7838      	ldrb	r0, [r7, #0]
10058cb0:	2801      	cmp	r0, #1
10058cb2:	d104      	bne.n	10058cbe <llc_conn_check_instant_and_set_params+0xc6>
10058cb4:	6b71      	ldr	r1, [r6, #52]	@ 0x34
10058cb6:	34e0      	adds	r4, #224	@ 0xe0
10058cb8:	4620      	mov	r0, r4
10058cba:	f000 fdc3 	bl	10059844 <llc_mngm_csa2_update_remapping_table>
10058cbe:	8870      	ldrh	r0, [r6, #2]
10058cc0:	2120      	movs	r1, #32
10058cc2:	e018      	b.n	10058cf6 <llc_conn_check_instant_and_set_params+0xfe>
10058cc4:	f7ff f9e6 	bl	10058094 <llc_conn_get_cntxt_p>
10058cc8:	9b02      	ldr	r3, [sp, #8]
10058cca:	9901      	ldr	r1, [sp, #4]
10058ccc:	6361      	str	r1, [r4, #52]	@ 0x34
10058cce:	6840      	ldr	r0, [r0, #4]
10058cd0:	4298      	cmp	r0, r3
10058cd2:	d300      	bcc.n	10058cd6 <llc_conn_check_instant_and_set_params+0xde>
10058cd4:	4618      	mov	r0, r3
10058cd6:	6520      	str	r0, [r4, #80]	@ 0x50
10058cd8:	68f8      	ldr	r0, [r7, #12]
10058cda:	8720      	strh	r0, [r4, #56]	@ 0x38
10058cdc:	6938      	ldr	r0, [r7, #16]
10058cde:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
10058ce0:	180a      	adds	r2, r1, r0
10058ce2:	6662      	str	r2, [r4, #100]	@ 0x64
10058ce4:	66a0      	str	r0, [r4, #104]	@ 0x68
10058ce6:	4299      	cmp	r1, r3
10058ce8:	d003      	beq.n	10058cf2 <llc_conn_check_instant_and_set_params+0xfa>
10058cea:	64e3      	str	r3, [r4, #76]	@ 0x4c
10058cec:	4620      	mov	r0, r4
10058cee:	f000 ff28 	bl	10059b42 <llc_subrate_reset_params>
10058cf2:	8870      	ldrh	r0, [r6, #2]
10058cf4:	2108      	movs	r1, #8
10058cf6:	4388      	bics	r0, r1
10058cf8:	8070      	strh	r0, [r6, #2]
10058cfa:	8870      	ldrh	r0, [r6, #2]
10058cfc:	2102      	movs	r1, #2
10058cfe:	4301      	orrs	r1, r0
10058d00:	2001      	movs	r0, #1
10058d02:	4381      	bics	r1, r0
10058d04:	8071      	strh	r1, [r6, #2]
10058d06:	2015      	movs	r0, #21
10058d08:	f009 fbd6 	bl	100624b8 <tsk_notify_idx>
10058d0c:	f7ea ff05 	bl	10043b1a <BLE_STACK_ProcessRequest>
10058d10:	7928      	ldrb	r0, [r5, #4]
10058d12:	f7f8 fdf4 	bl	100518fe <LL_phy_upd_evt_pending_check_isr_ucfg>
10058d16:	2000      	movs	r0, #0
10058d18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10058d1a:	46c0      	nop			@ (mov r8, r8)

10058d1c <__arm_cp.2_0>:
10058d1c:	0000fbff 	.word	0x0000fbff

10058d20 <llc_conn_check_supervision_timer>:
10058d20:	6e42      	ldr	r2, [r0, #100]	@ 0x64
10058d22:	1a51      	subs	r1, r2, r1
10058d24:	6641      	str	r1, [r0, #100]	@ 0x64
10058d26:	1e49      	subs	r1, r1, #1
10058d28:	d401      	bmi.n	10058d2e <llc_conn_check_supervision_timer+0xe>
10058d2a:	2000      	movs	r0, #0
10058d2c:	4770      	bx	lr
10058d2e:	2188      	movs	r1, #136	@ 0x88
10058d30:	5c40      	ldrb	r0, [r0, r1]
10058d32:	0680      	lsls	r0, r0, #26
10058d34:	d501      	bpl.n	10058d3a <llc_conn_check_supervision_timer+0x1a>
10058d36:	2008      	movs	r0, #8
10058d38:	4770      	bx	lr
10058d3a:	203e      	movs	r0, #62	@ 0x3e
10058d3c:	4770      	bx	lr

10058d3e <llc_conn_release_conn_idx>:
10058d3e:	b580      	push	{r7, lr}
10058d40:	f7ff f9b2 	bl	100580a8 <llc_conn_get_cntxt_per_p>
10058d44:	212c      	movs	r1, #44	@ 0x2c
10058d46:	2200      	movs	r2, #0
10058d48:	5442      	strb	r2, [r0, r1]
10058d4a:	bd80      	pop	{r7, pc}

10058d4c <llc_conn_disconnect_link>:
10058d4c:	b5b0      	push	{r4, r5, r7, lr}
10058d4e:	460c      	mov	r4, r1
10058d50:	4601      	mov	r1, r0
10058d52:	0a02      	lsrs	r2, r0, #8
10058d54:	2012      	movs	r0, #18
10058d56:	2a0e      	cmp	r2, #14
10058d58:	d81c      	bhi.n	10058d94 <llc_conn_disconnect_link+0x48>
10058d5a:	2c1a      	cmp	r4, #26
10058d5c:	d81a      	bhi.n	10058d94 <llc_conn_disconnect_link+0x48>
10058d5e:	2201      	movs	r2, #1
10058d60:	40a2      	lsls	r2, r4
10058d62:	4b0d      	ldr	r3, [pc, #52]	@ (10058d98 <__arm_cp.8_0>)
10058d64:	421a      	tst	r2, r3
10058d66:	d015      	beq.n	10058d94 <llc_conn_disconnect_link+0x48>
10058d68:	4608      	mov	r0, r1
10058d6a:	f7ff f9ab 	bl	100580c4 <llc_conn_get_cntxt_per_p_from_handle>
10058d6e:	2800      	cmp	r0, #0
10058d70:	d008      	beq.n	10058d84 <llc_conn_disconnect_link+0x38>
10058d72:	4605      	mov	r5, r0
10058d74:	2030      	movs	r0, #48	@ 0x30
10058d76:	5c28      	ldrb	r0, [r5, r0]
10058d78:	f001 fd57 	bl	1005a82a <LL_cpe_get_tx_terminate_in_progress>
10058d7c:	2801      	cmp	r0, #1
10058d7e:	d103      	bne.n	10058d88 <llc_conn_disconnect_link+0x3c>
10058d80:	203a      	movs	r0, #58	@ 0x3a
10058d82:	bdb0      	pop	{r4, r5, r7, pc}
10058d84:	2002      	movs	r0, #2
10058d86:	bdb0      	pop	{r4, r5, r7, pc}
10058d88:	3530      	adds	r5, #48	@ 0x30
10058d8a:	7828      	ldrb	r0, [r5, #0]
10058d8c:	4621      	mov	r1, r4
10058d8e:	f001 fd3f 	bl	1005a810 <LL_cpe_set_disconnect>
10058d92:	2000      	movs	r0, #0
10058d94:	bdb0      	pop	{r4, r5, r7, pc}
10058d96:	46c0      	nop			@ (mov r8, r8)

10058d98 <__arm_cp.8_0>:
10058d98:	04080020 	.word	0x04080020

10058d9c <llc_conn_disconnect_link_from_cpf>:
10058d9c:	b510      	push	{r4, lr}
10058d9e:	4604      	mov	r4, r0
10058da0:	202d      	movs	r0, #45	@ 0x2d
10058da2:	5421      	strb	r1, [r4, r0]
10058da4:	342d      	adds	r4, #45	@ 0x2d
10058da6:	7d20      	ldrb	r0, [r4, #20]
10058da8:	f006 f990 	bl	1005f0cc <LL_sched_delete_taskslot>
10058dac:	7d20      	ldrb	r0, [r4, #20]
10058dae:	f006 f9df 	bl	1005f170 <LL_sched_check_and_wait_sched>
10058db2:	bd10      	pop	{r4, pc}

10058db4 <llc_conn_go_to_connect>:
10058db4:	b5f0      	push	{r4, r5, r6, r7, lr}
10058db6:	b0ad      	sub	sp, #180	@ 0xb4
10058db8:	4605      	mov	r5, r0
10058dba:	7ac0      	ldrb	r0, [r0, #11]
10058dbc:	f7ff f974 	bl	100580a8 <llc_conn_get_cntxt_per_p>
10058dc0:	4606      	mov	r6, r0
10058dc2:	f7ff f967 	bl	10058094 <llc_conn_get_cntxt_p>
10058dc6:	9020      	str	r0, [sp, #128]	@ 0x80
10058dc8:	682c      	ldr	r4, [r5, #0]
10058dca:	2023      	movs	r0, #35	@ 0x23
10058dcc:	5c20      	ldrb	r0, [r4, r0]
10058dce:	9018      	str	r0, [sp, #96]	@ 0x60
10058dd0:	7d60      	ldrb	r0, [r4, #21]
10058dd2:	9011      	str	r0, [sp, #68]	@ 0x44
10058dd4:	7820      	ldrb	r0, [r4, #0]
10058dd6:	901d      	str	r0, [sp, #116]	@ 0x74
10058dd8:	7ba0      	ldrb	r0, [r4, #14]
10058dda:	9021      	str	r0, [sp, #132]	@ 0x84
10058ddc:	7be0      	ldrb	r0, [r4, #15]
10058dde:	900e      	str	r0, [sp, #56]	@ 0x38
10058de0:	7c20      	ldrb	r0, [r4, #16]
10058de2:	9019      	str	r0, [sp, #100]	@ 0x64
10058de4:	7c60      	ldrb	r0, [r4, #17]
10058de6:	901b      	str	r0, [sp, #108]	@ 0x6c
10058de8:	7ca0      	ldrb	r0, [r4, #18]
10058dea:	901c      	str	r0, [sp, #112]	@ 0x70
10058dec:	7ce0      	ldrb	r0, [r4, #19]
10058dee:	9014      	str	r0, [sp, #80]	@ 0x50
10058df0:	7d20      	ldrb	r0, [r4, #20]
10058df2:	9017      	str	r0, [sp, #92]	@ 0x5c
10058df4:	7da0      	ldrb	r0, [r4, #22]
10058df6:	9009      	str	r0, [sp, #36]	@ 0x24
10058df8:	7de0      	ldrb	r0, [r4, #23]
10058dfa:	9010      	str	r0, [sp, #64]	@ 0x40
10058dfc:	7e20      	ldrb	r0, [r4, #24]
10058dfe:	9016      	str	r0, [sp, #88]	@ 0x58
10058e00:	7e60      	ldrb	r0, [r4, #25]
10058e02:	900a      	str	r0, [sp, #40]	@ 0x28
10058e04:	7ea0      	ldrb	r0, [r4, #26]
10058e06:	9012      	str	r0, [sp, #72]	@ 0x48
10058e08:	7ee0      	ldrb	r0, [r4, #27]
10058e0a:	900c      	str	r0, [sp, #48]	@ 0x30
10058e0c:	7f20      	ldrb	r0, [r4, #28]
10058e0e:	9015      	str	r0, [sp, #84]	@ 0x54
10058e10:	7f60      	ldrb	r0, [r4, #29]
10058e12:	900b      	str	r0, [sp, #44]	@ 0x2c
10058e14:	7ba8      	ldrb	r0, [r5, #14]
10058e16:	f7ee fd87 	bl	10047928 <BLEPLAT_CNTR_SmGetTxPhy>
10058e1a:	901f      	str	r0, [sp, #124]	@ 0x7c
10058e1c:	f005 fbb2 	bl	1005e584 <llc_get_channel_sel_algo2_enabled>
10058e20:	900d      	str	r0, [sp, #52]	@ 0x34
10058e22:	2094      	movs	r0, #148	@ 0x94
10058e24:	5830      	ldr	r0, [r6, r0]
10058e26:	2300      	movs	r3, #0
10058e28:	6003      	str	r3, [r0, #0]
10058e2a:	2090      	movs	r0, #144	@ 0x90
10058e2c:	5830      	ldr	r0, [r6, r0]
10058e2e:	6003      	str	r3, [r0, #0]
10058e30:	20a8      	movs	r0, #168	@ 0xa8
10058e32:	5233      	strh	r3, [r6, r0]
10058e34:	2042      	movs	r0, #66	@ 0x42
10058e36:	5233      	strh	r3, [r6, r0]
10058e38:	202d      	movs	r0, #45	@ 0x2d
10058e3a:	5433      	strb	r3, [r6, r0]
10058e3c:	2045      	movs	r0, #69	@ 0x45
10058e3e:	0080      	lsls	r0, r0, #2
10058e40:	5033      	str	r3, [r6, r0]
10058e42:	2111      	movs	r1, #17
10058e44:	0109      	lsls	r1, r1, #4
10058e46:	5473      	strb	r3, [r6, r1]
10058e48:	2121      	movs	r1, #33	@ 0x21
10058e4a:	00c9      	lsls	r1, r1, #3
10058e4c:	227f      	movs	r2, #127	@ 0x7f
10058e4e:	5472      	strb	r2, [r6, r1]
10058e50:	212f      	movs	r1, #47	@ 0x2f
10058e52:	2207      	movs	r2, #7
10058e54:	5472      	strb	r2, [r6, r1]
10058e56:	2188      	movs	r1, #136	@ 0x88
10058e58:	5073      	str	r3, [r6, r1]
10058e5a:	218c      	movs	r1, #140	@ 0x8c
10058e5c:	5073      	str	r3, [r6, r1]
10058e5e:	4631      	mov	r1, r6
10058e60:	31a8      	adds	r1, #168	@ 0xa8
10058e62:	810b      	strh	r3, [r1, #8]
10058e64:	9122      	str	r1, [sp, #136]	@ 0x88
10058e66:	728b      	strb	r3, [r1, #10]
10058e68:	1830      	adds	r0, r6, r0
10058e6a:	931e      	str	r3, [sp, #120]	@ 0x78
10058e6c:	900f      	str	r0, [sp, #60]	@ 0x3c
10058e6e:	6043      	str	r3, [r0, #4]
10058e70:	2701      	movs	r7, #1
10058e72:	8537      	strh	r7, [r6, #40]	@ 0x28
10058e74:	9523      	str	r5, [sp, #140]	@ 0x8c
10058e76:	7ba8      	ldrb	r0, [r5, #14]
10058e78:	2141      	movs	r1, #65	@ 0x41
10058e7a:	5470      	strb	r0, [r6, r1]
10058e7c:	201f      	movs	r0, #31
10058e7e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
10058e80:	9008      	str	r0, [sp, #32]
10058e82:	4002      	ands	r2, r0
10058e84:	7ae8      	ldrb	r0, [r5, #11]
10058e86:	2131      	movs	r1, #49	@ 0x31
10058e88:	921a      	str	r2, [sp, #104]	@ 0x68
10058e8a:	5472      	strb	r2, [r6, r1]
10058e8c:	2130      	movs	r1, #48	@ 0x30
10058e8e:	9113      	str	r1, [sp, #76]	@ 0x4c
10058e90:	5470      	strb	r0, [r6, r1]
10058e92:	980a      	ldr	r0, [sp, #40]	@ 0x28
10058e94:	0200      	lsls	r0, r0, #8
10058e96:	9916      	ldr	r1, [sp, #88]	@ 0x58
10058e98:	1840      	adds	r0, r0, r1
10058e9a:	9016      	str	r0, [sp, #88]	@ 0x58
10058e9c:	b280      	uxth	r0, r0
10058e9e:	0241      	lsls	r1, r0, #9
10058ea0:	64f1      	str	r1, [r6, #76]	@ 0x4c
10058ea2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10058ea4:	0209      	lsls	r1, r1, #8
10058ea6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10058ea8:	1889      	adds	r1, r1, r2
10058eaa:	9115      	str	r1, [sp, #84]	@ 0x54
10058eac:	b289      	uxth	r1, r1
10058eae:	0309      	lsls	r1, r1, #12
10058eb0:	2203      	movs	r2, #3
10058eb2:	920b      	str	r2, [sp, #44]	@ 0x2c
10058eb4:	0292      	lsls	r2, r2, #10
10058eb6:	4342      	muls	r2, r0
10058eb8:	6672      	str	r2, [r6, #100]	@ 0x64
10058eba:	66b1      	str	r1, [r6, #104]	@ 0x68
10058ebc:	9814      	ldr	r0, [sp, #80]	@ 0x50
10058ebe:	0200      	lsls	r0, r0, #8
10058ec0:	991c      	ldr	r1, [sp, #112]	@ 0x70
10058ec2:	1840      	adds	r0, r0, r1
10058ec4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
10058ec6:	0409      	lsls	r1, r1, #16
10058ec8:	1840      	adds	r0, r0, r1
10058eca:	9017      	str	r0, [sp, #92]	@ 0x5c
10058ecc:	6570      	str	r0, [r6, #84]	@ 0x54
10058ece:	980c      	ldr	r0, [sp, #48]	@ 0x30
10058ed0:	0200      	lsls	r0, r0, #8
10058ed2:	9912      	ldr	r1, [sp, #72]	@ 0x48
10058ed4:	1840      	adds	r0, r0, r1
10058ed6:	9012      	str	r0, [sp, #72]	@ 0x48
10058ed8:	8730      	strh	r0, [r6, #56]	@ 0x38
10058eda:	25ff      	movs	r5, #255	@ 0xff
10058edc:	950c      	str	r5, [sp, #48]	@ 0x30
10058ede:	3512      	adds	r5, #18
10058ee0:	f005 fe2c 	bl	1005eb3c <llc_get_next_free_conn_handle>
10058ee4:	971c      	str	r7, [sp, #112]	@ 0x70
10058ee6:	5577      	strb	r7, [r6, r5]
10058ee8:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
10058eea:	8770      	strh	r0, [r6, #58]	@ 0x3a
10058eec:	207d      	movs	r0, #125	@ 0x7d
10058eee:	0440      	lsls	r0, r0, #17
10058ef0:	66f0      	str	r0, [r6, #108]	@ 0x6c
10058ef2:	6730      	str	r0, [r6, #112]	@ 0x70
10058ef4:	2083      	movs	r0, #131	@ 0x83
10058ef6:	0040      	lsls	r0, r0, #1
10058ef8:	1833      	adds	r3, r6, r0
10058efa:	980e      	ldr	r0, [sp, #56]	@ 0x38
10058efc:	0200      	lsls	r0, r0, #8
10058efe:	9921      	ldr	r1, [sp, #132]	@ 0x84
10058f00:	1840      	adds	r0, r0, r1
10058f02:	9919      	ldr	r1, [sp, #100]	@ 0x64
10058f04:	0409      	lsls	r1, r1, #16
10058f06:	1840      	adds	r0, r0, r1
10058f08:	991b      	ldr	r1, [sp, #108]	@ 0x6c
10058f0a:	0609      	lsls	r1, r1, #24
10058f0c:	1840      	adds	r0, r0, r1
10058f0e:	9019      	str	r0, [sp, #100]	@ 0x64
10058f10:	4632      	mov	r2, r6
10058f12:	322c      	adds	r2, #44	@ 0x2c
10058f14:	341e      	adds	r4, #30
10058f16:	941b      	str	r4, [sp, #108]	@ 0x6c
10058f18:	980d      	ldr	r0, [sp, #52]	@ 0x34
10058f1a:	2801      	cmp	r0, #1
10058f1c:	9221      	str	r2, [sp, #132]	@ 0x84
10058f1e:	9314      	str	r3, [sp, #80]	@ 0x50
10058f20:	d106      	bne.n	10058f30 <llc_conn_go_to_connect+0x17c>
10058f22:	7c38      	ldrb	r0, [r7, #16]
10058f24:	2801      	cmp	r0, #1
10058f26:	d103      	bne.n	10058f30 <llc_conn_go_to_connect+0x17c>
10058f28:	2020      	movs	r0, #32
10058f2a:	991d      	ldr	r1, [sp, #116]	@ 0x74
10058f2c:	4008      	ands	r0, r1
10058f2e:	d104      	bne.n	10058f3a <llc_conn_go_to_connect+0x186>
10058f30:	7b38      	ldrb	r0, [r7, #12]
10058f32:	21fe      	movs	r1, #254	@ 0xfe
10058f34:	4001      	ands	r1, r0
10058f36:	2902      	cmp	r1, #2
10058f38:	d11b      	bne.n	10058f72 <llc_conn_go_to_connect+0x1be>
10058f3a:	2001      	movs	r0, #1
10058f3c:	7018      	strb	r0, [r3, #0]
10058f3e:	7bb8      	ldrb	r0, [r7, #14]
10058f40:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
10058f42:	4621      	mov	r1, r4
10058f44:	f7ee fd56 	bl	100479f4 <BLEPLAT_CNTR_SmSetChannelMap>
10058f48:	4635      	mov	r5, r6
10058f4a:	35e0      	adds	r5, #224	@ 0xe0
10058f4c:	4628      	mov	r0, r5
10058f4e:	4621      	mov	r1, r4
10058f50:	f000 fc78 	bl	10059844 <llc_mngm_csa2_update_remapping_table>
10058f54:	9821      	ldr	r0, [sp, #132]	@ 0x84
10058f56:	7d40      	ldrb	r0, [r0, #21]
10058f58:	2200      	movs	r2, #0
10058f5a:	9200      	str	r2, [sp, #0]
10058f5c:	9919      	ldr	r1, [sp, #100]	@ 0x64
10058f5e:	9101      	str	r1, [sp, #4]
10058f60:	9202      	str	r2, [sp, #8]
10058f62:	4629      	mov	r1, r5
10058f64:	921a      	str	r2, [sp, #104]	@ 0x68
10058f66:	4613      	mov	r3, r2
10058f68:	f000 fc87 	bl	1005987a <llc_mngm_csa2_select_channel_for_task>
10058f6c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
10058f6e:	901e      	str	r0, [sp, #120]	@ 0x78
10058f70:	e001      	b.n	10058f76 <llc_conn_go_to_connect+0x1c2>
10058f72:	981e      	ldr	r0, [sp, #120]	@ 0x78
10058f74:	7018      	strb	r0, [r3, #0]
10058f76:	209f      	movs	r0, #159	@ 0x9f
10058f78:	990f      	ldr	r1, [sp, #60]	@ 0x3c
10058f7a:	7788      	strb	r0, [r1, #30]
10058f7c:	48f5      	ldr	r0, [pc, #980]	@ (10059354 <__arm_cp.10_0>)
10058f7e:	8388      	strh	r0, [r1, #28]
10058f80:	48f5      	ldr	r0, [pc, #980]	@ (10059358 <__arm_cp.10_1>)
10058f82:	8348      	strh	r0, [r1, #26]
10058f84:	6e10      	ldr	r0, [r2, #96]	@ 0x60
10058f86:	991c      	ldr	r1, [sp, #112]	@ 0x70
10058f88:	4388      	bics	r0, r1
10058f8a:	6610      	str	r0, [r2, #96]	@ 0x60
10058f8c:	7af8      	ldrb	r0, [r7, #11]
10058f8e:	f7f8 fca6 	bl	100518de <LL_phy_update_init_per_st_data_ucfg>
10058f92:	2029      	movs	r0, #41	@ 0x29
10058f94:	00c5      	lsls	r5, r0, #3
10058f96:	20a9      	movs	r0, #169	@ 0xa9
10058f98:	0107      	lsls	r7, r0, #4
10058f9a:	f7f8 fb3f 	bl	1005161c <data_length_extension_csr_ucfg>
10058f9e:	2801      	cmp	r0, #1
10058fa0:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
10058fa2:	d117      	bne.n	10058fd4 <llc_conn_go_to_connect+0x220>
10058fa4:	9820      	ldr	r0, [sp, #128]	@ 0x80
10058fa6:	8980      	ldrh	r0, [r0, #12]
10058fa8:	281b      	cmp	r0, #27
10058faa:	d10e      	bne.n	10058fca <llc_conn_go_to_connect+0x216>
10058fac:	2c04      	cmp	r4, #4
10058fae:	d108      	bne.n	10058fc2 <llc_conn_go_to_connect+0x20e>
10058fb0:	9820      	ldr	r0, [sp, #128]	@ 0x80
10058fb2:	8a40      	ldrh	r0, [r0, #18]
10058fb4:	42b8      	cmp	r0, r7
10058fb6:	d108      	bne.n	10058fca <llc_conn_go_to_connect+0x216>
10058fb8:	201b      	movs	r0, #27
10058fba:	9922      	ldr	r1, [sp, #136]	@ 0x88
10058fbc:	8208      	strh	r0, [r1, #16]
10058fbe:	8188      	strh	r0, [r1, #12]
10058fc0:	e00f      	b.n	10058fe2 <llc_conn_go_to_connect+0x22e>
10058fc2:	9820      	ldr	r0, [sp, #128]	@ 0x80
10058fc4:	8a00      	ldrh	r0, [r0, #16]
10058fc6:	42a8      	cmp	r0, r5
10058fc8:	d004      	beq.n	10058fd4 <llc_conn_go_to_connect+0x220>
10058fca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
10058fcc:	6e10      	ldr	r0, [r2, #96]	@ 0x60
10058fce:	2104      	movs	r1, #4
10058fd0:	4301      	orrs	r1, r0
10058fd2:	6611      	str	r1, [r2, #96]	@ 0x60
10058fd4:	201b      	movs	r0, #27
10058fd6:	9922      	ldr	r1, [sp, #136]	@ 0x88
10058fd8:	8208      	strh	r0, [r1, #16]
10058fda:	8188      	strh	r0, [r1, #12]
10058fdc:	2c04      	cmp	r4, #4
10058fde:	d000      	beq.n	10058fe2 <llc_conn_go_to_connect+0x22e>
10058fe0:	462f      	mov	r7, r5
10058fe2:	9810      	ldr	r0, [sp, #64]	@ 0x40
10058fe4:	0200      	lsls	r0, r0, #8
10058fe6:	9010      	str	r0, [sp, #64]	@ 0x40
10058fe8:	9922      	ldr	r1, [sp, #136]	@ 0x88
10058fea:	828f      	strh	r7, [r1, #20]
10058fec:	824f      	strh	r7, [r1, #18]
10058fee:	830f      	strh	r7, [r1, #24]
10058ff0:	201b      	movs	r0, #27
10058ff2:	82c8      	strh	r0, [r1, #22]
10058ff4:	81c8      	strh	r0, [r1, #14]
10058ff6:	83cf      	strh	r7, [r1, #30]
10058ff8:	838f      	strh	r7, [r1, #28]
10058ffa:	9d20      	ldr	r5, [sp, #128]	@ 0x80
10058ffc:	8b68      	ldrh	r0, [r5, #26]
10058ffe:	8348      	strh	r0, [r1, #26]
10059000:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
10059002:	7af8      	ldrb	r0, [r7, #11]
10059004:	f002 f892 	bl	1005b12c <llc_conn_init_cte_ctxt_ucfg_weak>
10059008:	7af8      	ldrb	r0, [r7, #11]
1005900a:	f003 faae 	bl	1005c56a <llc_conn_init_pcl_ctxt_ucfg_weak>
1005900e:	7af8      	ldrb	r0, [r7, #11]
10059010:	f001 fe4a 	bl	1005aca8 <LLC_conn_init_chc_ctxt_ucfg_weak>
10059014:	4628      	mov	r0, r5
10059016:	4631      	mov	r1, r6
10059018:	f000 fd88 	bl	10059b2c <llc_subrate_init_acceptable_per>
1005901c:	7af8      	ldrb	r0, [r7, #11]
1005901e:	f003 faa9 	bl	1005c574 <LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak>
10059022:	7af8      	ldrb	r0, [r7, #11]
10059024:	f003 faa0 	bl	1005c568 <LL_past_default_params_ucfg_weak>
10059028:	4630      	mov	r0, r6
1005902a:	f003 f90b 	bl	1005c244 <LLC_init_le_ping_params>
1005902e:	7af8      	ldrb	r0, [r7, #11]
10059030:	f001 fc1e 	bl	1005a870 <llc_cpe_init_sm_ctxt>
10059034:	4620      	mov	r0, r4
10059036:	f7ee fe8a 	bl	10047d4e <BLEPLAT_CNTR_DemodDelaySt>
1005903a:	7b39      	ldrb	r1, [r7, #12]
1005903c:	4ac7      	ldr	r2, [pc, #796]	@ (1005935c <__arm_cp.10_2>)
1005903e:	6812      	ldr	r2, [r2, #0]
10059040:	6817      	ldr	r7, [r2, #0]
10059042:	2903      	cmp	r1, #3
10059044:	d009      	beq.n	1005905a <llc_conn_go_to_connect+0x2a6>
10059046:	2902      	cmp	r1, #2
10059048:	d00b      	beq.n	10059062 <llc_conn_go_to_connect+0x2ae>
1005904a:	9923      	ldr	r1, [sp, #140]	@ 0x8c
1005904c:	7b49      	ldrb	r1, [r1, #13]
1005904e:	1a38      	subs	r0, r7, r0
10059050:	2900      	cmp	r1, #0
10059052:	d100      	bne.n	10059056 <llc_conn_go_to_connect+0x2a2>
10059054:	e0a5      	b.n	100591a2 <llc_conn_go_to_connect+0x3ee>
10059056:	3090      	adds	r0, #144	@ 0x90
10059058:	e005      	b.n	10059066 <llc_conn_go_to_connect+0x2b2>
1005905a:	210e      	movs	r1, #14
1005905c:	4620      	mov	r0, r4
1005905e:	f005 fb53 	bl	1005e708 <LL_link_calc_packetlength>
10059062:	1a38      	subs	r0, r7, r0
10059064:	383e      	subs	r0, #62	@ 0x3e
10059066:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
10059068:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005906a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
1005906c:	4627      	mov	r7, r4
1005906e:	065a      	lsls	r2, r3, #25
10059070:	9c10      	ldr	r4, [sp, #64]	@ 0x40
10059072:	1861      	adds	r1, r4, r1
10059074:	2f04      	cmp	r7, #4
10059076:	463c      	mov	r4, r7
10059078:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005907a:	d007      	beq.n	1005908c <llc_conn_go_to_connect+0x2d8>
1005907c:	7b3d      	ldrb	r5, [r7, #12]
1005907e:	23fe      	movs	r3, #254	@ 0xfe
10059080:	402b      	ands	r3, r5
10059082:	2b02      	cmp	r3, #2
10059084:	d100      	bne.n	10059088 <llc_conn_go_to_connect+0x2d4>
10059086:	931c      	str	r3, [sp, #112]	@ 0x70
10059088:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
1005908a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
1005908c:	09db      	lsrs	r3, r3, #7
1005908e:	930e      	str	r3, [sp, #56]	@ 0x38
10059090:	0fd2      	lsrs	r2, r2, #31
10059092:	920f      	str	r2, [sp, #60]	@ 0x3c
10059094:	1869      	adds	r1, r5, r1
10059096:	024d      	lsls	r5, r1, #9
10059098:	1828      	adds	r0, r5, r0
1005909a:	901c      	str	r0, [sp, #112]	@ 0x70
1005909c:	683b      	ldr	r3, [r7, #0]
1005909e:	7b78      	ldrb	r0, [r7, #13]
100590a0:	2800      	cmp	r0, #0
100590a2:	d028      	beq.n	100590f6 <llc_conn_go_to_connect+0x342>
100590a4:	9310      	str	r3, [sp, #64]	@ 0x40
100590a6:	9818      	ldr	r0, [sp, #96]	@ 0x60
100590a8:	0944      	lsrs	r4, r0, #5
100590aa:	f005 fb49 	bl	1005e740 <LL_link_get_own_sca_ppm>
100590ae:	4607      	mov	r7, r0
100590b0:	941d      	str	r4, [sp, #116]	@ 0x74
100590b2:	4620      	mov	r0, r4
100590b4:	f000 fd52 	bl	10059b5c <llc_convert_sca_to_ppm>
100590b8:	2103      	movs	r1, #3
100590ba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
100590bc:	7011      	strb	r1, [r2, #0]
100590be:	9911      	ldr	r1, [sp, #68]	@ 0x44
100590c0:	0249      	lsls	r1, r1, #9
100590c2:	6371      	str	r1, [r6, #52]	@ 0x34
100590c4:	19c0      	adds	r0, r0, r7
100590c6:	8570      	strh	r0, [r6, #42]	@ 0x2a
100590c8:	6cf1      	ldr	r1, [r6, #76]	@ 0x4c
100590ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
100590cc:	6852      	ldr	r2, [r2, #4]
100590ce:	4291      	cmp	r1, r2
100590d0:	d300      	bcc.n	100590d4 <llc_conn_go_to_connect+0x320>
100590d2:	4611      	mov	r1, r2
100590d4:	6531      	str	r1, [r6, #80]	@ 0x50
100590d6:	b280      	uxth	r0, r0
100590d8:	4629      	mov	r1, r5
100590da:	f005 fb0b 	bl	1005e6f4 <LL_link_calculate_window_widening_from_ppm>
100590de:	300d      	adds	r0, #13
100590e0:	0041      	lsls	r1, r0, #1
100590e2:	6b72      	ldr	r2, [r6, #52]	@ 0x34
100590e4:	188a      	adds	r2, r1, r2
100590e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
100590e8:	1c9b      	adds	r3, r3, #2
100590ea:	2102      	movs	r1, #2
100590ec:	9118      	str	r1, [sp, #96]	@ 0x60
100590ee:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
100590f0:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
100590f2:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
100590f4:	e018      	b.n	10059128 <llc_conn_go_to_connect+0x374>
100590f6:	2102      	movs	r1, #2
100590f8:	9821      	ldr	r0, [sp, #132]	@ 0x84
100590fa:	7001      	strb	r1, [r0, #0]
100590fc:	2000      	movs	r0, #0
100590fe:	8570      	strh	r0, [r6, #42]	@ 0x2a
10059100:	2c04      	cmp	r4, #4
10059102:	d000      	beq.n	10059106 <llc_conn_go_to_connect+0x352>
10059104:	4621      	mov	r1, r4
10059106:	0089      	lsls	r1, r1, #2
10059108:	1871      	adds	r1, r6, r1
1005910a:	6d89      	ldr	r1, [r1, #88]	@ 0x58
1005910c:	6cf2      	ldr	r2, [r6, #76]	@ 0x4c
1005910e:	428a      	cmp	r2, r1
10059110:	d300      	bcc.n	10059114 <llc_conn_go_to_connect+0x360>
10059112:	460a      	mov	r2, r1
10059114:	6532      	str	r2, [r6, #80]	@ 0x50
10059116:	9911      	ldr	r1, [sp, #68]	@ 0x44
10059118:	0209      	lsls	r1, r1, #8
1005911a:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
1005911c:	1864      	adds	r4, r4, r1
1005911e:	3308      	adds	r3, #8
10059120:	2185      	movs	r1, #133	@ 0x85
10059122:	9118      	str	r1, [sp, #96]	@ 0x60
10059124:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
10059126:	901d      	str	r0, [sp, #116]	@ 0x74
10059128:	6474      	str	r4, [r6, #68]	@ 0x44
1005912a:	64b0      	str	r0, [r6, #72]	@ 0x48
1005912c:	a824      	add	r0, sp, #144	@ 0x90
1005912e:	2400      	movs	r4, #0
10059130:	8084      	strh	r4, [r0, #4]
10059132:	9424      	str	r4, [sp, #144]	@ 0x90
10059134:	4889      	ldr	r0, [pc, #548]	@ (1005935c <__arm_cp.10_2>)
10059136:	6800      	ldr	r0, [r0, #0]
10059138:	213d      	movs	r1, #61	@ 0x3d
1005913a:	5c41      	ldrb	r1, [r0, r1]
1005913c:	0689      	lsls	r1, r1, #26
1005913e:	9220      	str	r2, [sp, #128]	@ 0x80
10059140:	d543      	bpl.n	100591ca <llc_conn_go_to_connect+0x416>
10059142:	303d      	adds	r0, #61	@ 0x3d
10059144:	7b81      	ldrb	r1, [r0, #14]
10059146:	07c9      	lsls	r1, r1, #31
10059148:	d102      	bne.n	10059150 <llc_conn_go_to_connect+0x39c>
1005914a:	7a80      	ldrb	r0, [r0, #10]
1005914c:	0780      	lsls	r0, r0, #30
1005914e:	d53c      	bpl.n	100591ca <llc_conn_go_to_connect+0x416>
10059150:	6878      	ldr	r0, [r7, #4]
10059152:	6801      	ldr	r1, [r0, #0]
10059154:	461d      	mov	r5, r3
10059156:	23fe      	movs	r3, #254	@ 0xfe
10059158:	400b      	ands	r3, r1
1005915a:	aa24      	add	r2, sp, #144	@ 0x90
1005915c:	2b02      	cmp	r3, #2
1005915e:	462b      	mov	r3, r5
10059160:	d000      	beq.n	10059164 <llc_conn_go_to_connect+0x3b0>
10059162:	4613      	mov	r3, r2
10059164:	b2cd      	uxtb	r5, r1
10059166:	7b79      	ldrb	r1, [r7, #13]
10059168:	2900      	cmp	r1, #0
1005916a:	9310      	str	r3, [sp, #64]	@ 0x40
1005916c:	d00c      	beq.n	10059188 <llc_conn_go_to_connect+0x3d4>
1005916e:	a924      	add	r1, sp, #144	@ 0x90
10059170:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10059172:	2a00      	cmp	r2, #0
10059174:	d01a      	beq.n	100591ac <llc_conn_go_to_connect+0x3f8>
10059176:	6839      	ldr	r1, [r7, #0]
10059178:	7b4a      	ldrb	r2, [r1, #13]
1005917a:	23c0      	movs	r3, #192	@ 0xc0
1005917c:	4013      	ands	r3, r2
1005917e:	aa24      	add	r2, sp, #144	@ 0x90
10059180:	2b40      	cmp	r3, #64	@ 0x40
10059182:	d012      	beq.n	100591aa <llc_conn_go_to_connect+0x3f6>
10059184:	4611      	mov	r1, r2
10059186:	e011      	b.n	100591ac <llc_conn_go_to_connect+0x3f8>
10059188:	a924      	add	r1, sp, #144	@ 0x90
1005918a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1005918c:	2a00      	cmp	r2, #0
1005918e:	d00d      	beq.n	100591ac <llc_conn_go_to_connect+0x3f8>
10059190:	683a      	ldr	r2, [r7, #0]
10059192:	79d1      	ldrb	r1, [r2, #7]
10059194:	23c0      	movs	r3, #192	@ 0xc0
10059196:	400b      	ands	r3, r1
10059198:	a924      	add	r1, sp, #144	@ 0x90
1005919a:	2b40      	cmp	r3, #64	@ 0x40
1005919c:	d106      	bne.n	100591ac <llc_conn_go_to_connect+0x3f8>
1005919e:	1c91      	adds	r1, r2, #2
100591a0:	e004      	b.n	100591ac <llc_conn_go_to_connect+0x3f8>
100591a2:	2181      	movs	r1, #129	@ 0x81
100591a4:	0049      	lsls	r1, r1, #1
100591a6:	1840      	adds	r0, r0, r1
100591a8:	e75d      	b.n	10059066 <llc_conn_go_to_connect+0x2b2>
100591aa:	3108      	adds	r1, #8
100591ac:	7aba      	ldrb	r2, [r7, #10]
100591ae:	ab26      	add	r3, sp, #152	@ 0x98
100591b0:	759a      	strb	r2, [r3, #22]
100591b2:	893a      	ldrh	r2, [r7, #8]
100591b4:	829a      	strh	r2, [r3, #20]
100591b6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
100591b8:	9227      	str	r2, [sp, #156]	@ 0x9c
100591ba:	9128      	str	r1, [sp, #160]	@ 0xa0
100591bc:	2dfe      	cmp	r5, #254	@ 0xfe
100591be:	d002      	beq.n	100591c6 <llc_conn_go_to_connect+0x412>
100591c0:	2103      	movs	r1, #3
100591c2:	400d      	ands	r5, r1
100591c4:	e000      	b.n	100591c8 <llc_conn_go_to_connect+0x414>
100591c6:	2501      	movs	r5, #1
100591c8:	1c43      	adds	r3, r0, #1
100591ca:	9922      	ldr	r1, [sp, #136]	@ 0x88
100591cc:	630c      	str	r4, [r1, #48]	@ 0x30
100591ce:	2001      	movs	r0, #1
100591d0:	4028      	ands	r0, r5
100591d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
100591d4:	5488      	strb	r0, [r1, r2]
100591d6:	634c      	str	r4, [r1, #52]	@ 0x34
100591d8:	4608      	mov	r0, r1
100591da:	3030      	adds	r0, #48	@ 0x30
100591dc:	1c40      	adds	r0, r0, #1
100591de:	2206      	movs	r2, #6
100591e0:	4619      	mov	r1, r3
100591e2:	461f      	mov	r7, r3
100591e4:	f7ec ff36 	bl	10046054 <BLEPLAT_MemCpy>
100591e8:	a826      	add	r0, sp, #152	@ 0x98
100591ea:	941c      	str	r4, [sp, #112]	@ 0x70
100591ec:	7684      	strb	r4, [r0, #26]
100591ee:	7605      	strb	r5, [r0, #24]
100591f0:	991d      	ldr	r1, [sp, #116]	@ 0x74
100591f2:	75c1      	strb	r1, [r0, #23]
100591f4:	9915      	ldr	r1, [sp, #84]	@ 0x54
100591f6:	8241      	strh	r1, [r0, #18]
100591f8:	9912      	ldr	r1, [sp, #72]	@ 0x48
100591fa:	8201      	strh	r1, [r0, #16]
100591fc:	9916      	ldr	r1, [sp, #88]	@ 0x58
100591fe:	8181      	strh	r1, [r0, #12]
10059200:	8f71      	ldrh	r1, [r6, #58]	@ 0x3a
10059202:	81c1      	strh	r1, [r0, #14]
10059204:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
10059206:	7b51      	ldrb	r1, [r2, #13]
10059208:	7641      	strb	r1, [r0, #25]
1005920a:	9726      	str	r7, [sp, #152]	@ 0x98
1005920c:	4617      	mov	r7, r2
1005920e:	f7ff fafd 	bl	1005880c <llc_conn_push_connection_complete_event>
10059212:	7bf8      	ldrb	r0, [r7, #15]
10059214:	2800      	cmp	r0, #0
10059216:	d003      	beq.n	10059220 <llc_conn_go_to_connect+0x46c>
10059218:	7ab9      	ldrb	r1, [r7, #10]
1005921a:	8f70      	ldrh	r0, [r6, #58]	@ 0x3a
1005921c:	f7ff fab8 	bl	10058790 <llc_conn_push_adv_set_terminated_event>
10059220:	9814      	ldr	r0, [sp, #80]	@ 0x50
10059222:	7801      	ldrb	r1, [r0, #0]
10059224:	8f70      	ldrh	r0, [r6, #58]	@ 0x3a
10059226:	f7ff fc27 	bl	10058a78 <llc_conn_push_csa_event>
1005922a:	9922      	ldr	r1, [sp, #136]	@ 0x88
1005922c:	6b08      	ldr	r0, [r1, #48]	@ 0x30
1005922e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
10059230:	f7ff fa56 	bl	100586e0 <llc_conn_list_add_address>
10059234:	7b7c      	ldrb	r4, [r7, #13]
10059236:	7bbf      	ldrb	r7, [r7, #14]
10059238:	4638      	mov	r0, r7
1005923a:	f7ee fb86 	bl	1004794a <BLEPLAT_CNTR_SmGetTxPwr>
1005923e:	9022      	str	r0, [sp, #136]	@ 0x88
10059240:	4638      	mov	r0, r7
10059242:	f7ee fba7 	bl	10047994 <BLEPLAT_CNTR_SmInitTo0>
10059246:	4638      	mov	r0, r7
10059248:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
1005924a:	4629      	mov	r1, r5
1005924c:	f7ee fd1f 	bl	10047c8e <BLEPLAT_CNTR_SmSetTxPhy>
10059250:	4638      	mov	r0, r7
10059252:	4629      	mov	r1, r5
10059254:	f7ee fcaf 	bl	10047bb6 <BLEPLAT_CNTR_SmSetRxPhy>
10059258:	4638      	mov	r0, r7
1005925a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
1005925c:	f7ee fbca 	bl	100479f4 <BLEPLAT_CNTR_SmSetChannelMap>
10059260:	4638      	mov	r0, r7
10059262:	9919      	ldr	r1, [sp, #100]	@ 0x64
10059264:	f7ee fbb4 	bl	100479d0 <BLEPLAT_CNTR_SmSetAccessAddr>
10059268:	4638      	mov	r0, r7
1005926a:	991e      	ldr	r1, [sp, #120]	@ 0x78
1005926c:	f7ee fd4b 	bl	10047d06 <BLEPLAT_CNTR_SmSetUnmappedChan>
10059270:	4638      	mov	r0, r7
10059272:	991a      	ldr	r1, [sp, #104]	@ 0x68
10059274:	f7ee fc16 	bl	10047aa4 <BLEPLAT_CNTR_SmSetHopIncr>
10059278:	4638      	mov	r0, r7
1005927a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
1005927c:	f7ee fbeb 	bl	10047a56 <BLEPLAT_CNTR_SmSetCrcInit>
10059280:	4638      	mov	r0, r7
10059282:	4631      	mov	r1, r6
10059284:	f7ee fcf1 	bl	10047c6a <BLEPLAT_CNTR_SmSetTxPacketPtr>
10059288:	4635      	mov	r5, r6
1005928a:	3514      	adds	r5, #20
1005928c:	4638      	mov	r0, r7
1005928e:	4629      	mov	r1, r5
10059290:	f7ee fc7f 	bl	10047b92 <BLEPLAT_CNTR_SmSetRxPacketPtr>
10059294:	4638      	mov	r0, r7
10059296:	9922      	ldr	r1, [sp, #136]	@ 0x88
10059298:	f7ee fd0e 	bl	10047cb8 <BLEPLAT_CNTR_SmSetTxPwr>
1005929c:	f7fe f8d0 	bl	10057440 <cte_csr_ucfg_weak>
100592a0:	2800      	cmp	r0, #0
100592a2:	d102      	bne.n	100592aa <llc_conn_go_to_connect+0x4f6>
100592a4:	4638      	mov	r0, r7
100592a6:	f7ee fa09 	bl	100476bc <BLEPLAT_CNTR_SmCteOff>
100592aa:	4638      	mov	r0, r7
100592ac:	2c00      	cmp	r4, #0
100592ae:	d002      	beq.n	100592b6 <llc_conn_go_to_connect+0x502>
100592b0:	f7ee fc60 	bl	10047b74 <BLEPLAT_CNTR_SmSetRxMode>
100592b4:	e001      	b.n	100592ba <llc_conn_go_to_connect+0x506>
100592b6:	f7ee fcc9 	bl	10047c4c <BLEPLAT_CNTR_SmSetTxMode>
100592ba:	4634      	mov	r4, r6
100592bc:	3428      	adds	r4, #40	@ 0x28
100592be:	f7f8 f9ad 	bl	1005161c <data_length_extension_csr_ucfg>
100592c2:	2801      	cmp	r0, #1
100592c4:	d101      	bne.n	100592ca <llc_conn_go_to_connect+0x516>
100592c6:	980c      	ldr	r0, [sp, #48]	@ 0x30
100592c8:	e00c      	b.n	100592e4 <llc_conn_go_to_connect+0x530>
100592ca:	f000 fbf1 	bl	10059ab0 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
100592ce:	2801      	cmp	r0, #1
100592d0:	980c      	ldr	r0, [sp, #48]	@ 0x30
100592d2:	d007      	beq.n	100592e4 <llc_conn_go_to_connect+0x530>
100592d4:	f000 fbe2 	bl	10059a9c <cis_csr_ucfg_weak>
100592d8:	2801      	cmp	r0, #1
100592da:	d001      	beq.n	100592e0 <llc_conn_go_to_connect+0x52c>
100592dc:	9808      	ldr	r0, [sp, #32]
100592de:	e001      	b.n	100592e4 <llc_conn_go_to_connect+0x530>
100592e0:	981c      	ldr	r0, [sp, #112]	@ 0x70
100592e2:	43c0      	mvns	r0, r0
100592e4:	b2c1      	uxtb	r1, r0
100592e6:	4638      	mov	r0, r7
100592e8:	f7ee fbc7 	bl	10047a7a <BLEPLAT_CNTR_SmSetDataLength>
100592ec:	4630      	mov	r0, r6
100592ee:	4621      	mov	r1, r4
100592f0:	463a      	mov	r2, r7
100592f2:	f000 fa3d 	bl	10059770 <llc_conn_set_blue_packets>
100592f6:	2100      	movs	r1, #0
100592f8:	4628      	mov	r0, r5
100592fa:	463a      	mov	r2, r7
100592fc:	f000 fa38 	bl	10059770 <llc_conn_set_blue_packets>
10059300:	4630      	mov	r0, r6
10059302:	f7ee f9ba 	bl	1004767a <BLEPLAT_CNTR_PacketSetTxReady>
10059306:	4628      	mov	r0, r5
10059308:	f7ee f975 	bl	100475f6 <BLEPLAT_CNTR_PacketSetRxReady>
1005930c:	9823      	ldr	r0, [sp, #140]	@ 0x8c
1005930e:	7b81      	ldrb	r1, [r0, #14]
10059310:	9122      	str	r1, [sp, #136]	@ 0x88
10059312:	7c40      	ldrb	r0, [r0, #17]
10059314:	4634      	mov	r4, r6
10059316:	3444      	adds	r4, #68	@ 0x44
10059318:	cc1c      	ldmia	r4, {r2, r3, r4}
1005931a:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005931c:	788d      	ldrb	r5, [r1, #2]
1005931e:	78cf      	ldrb	r7, [r1, #3]
10059320:	490f      	ldr	r1, [pc, #60]	@ (10059360 <__arm_cp.10_3>)
10059322:	9107      	str	r1, [sp, #28]
10059324:	490f      	ldr	r1, [pc, #60]	@ (10059364 <__arm_cp.10_4>)
10059326:	9106      	str	r1, [sp, #24]
10059328:	490f      	ldr	r1, [pc, #60]	@ (10059368 <__arm_cp.10_5>)
1005932a:	9105      	str	r1, [sp, #20]
1005932c:	490f      	ldr	r1, [pc, #60]	@ (1005936c <__arm_cp.10_6>)
1005932e:	9104      	str	r1, [sp, #16]
10059330:	9703      	str	r7, [sp, #12]
10059332:	9502      	str	r5, [sp, #8]
10059334:	1ad1      	subs	r1, r2, r3
10059336:	9101      	str	r1, [sp, #4]
10059338:	9400      	str	r4, [sp, #0]
1005933a:	2800      	cmp	r0, #0
1005933c:	d001      	beq.n	10059342 <llc_conn_go_to_connect+0x58e>
1005933e:	4c0d      	ldr	r4, [pc, #52]	@ (10059374 <__arm_cp.10_8>)
10059340:	e000      	b.n	10059344 <llc_conn_go_to_connect+0x590>
10059342:	4c0b      	ldr	r4, [pc, #44]	@ (10059370 <__arm_cp.10_7>)
10059344:	9b20      	ldr	r3, [sp, #128]	@ 0x80
10059346:	9a18      	ldr	r2, [sp, #96]	@ 0x60
10059348:	9822      	ldr	r0, [sp, #136]	@ 0x88
1005934a:	4631      	mov	r1, r6
1005934c:	47a0      	blx	r4
1005934e:	b02d      	add	sp, #180	@ 0xb4
10059350:	bdf0      	pop	{r4, r5, r6, r7, pc}
10059352:	46c0      	nop			@ (mov r8, r8)

10059354 <__arm_cp.10_0>:
10059354:	000004ff 	.word	0x000004ff

10059358 <__arm_cp.10_1>:
10059358:	0000f7fb 	.word	0x0000f7fb

1005935c <__arm_cp.10_2>:
1005935c:	200010f4 	.word	0x200010f4

10059360 <__arm_cp.10_3>:
10059360:	100653bb 	.word	0x100653bb

10059364 <__arm_cp.10_4>:
10059364:	10065549 	.word	0x10065549

10059368 <__arm_cp.10_5>:
10059368:	100653f3 	.word	0x100653f3

1005936c <__arm_cp.10_6>:
1005936c:	1006547d 	.word	0x1006547d

10059370 <__arm_cp.10_7>:
10059370:	1005f095 	.word	0x1005f095

10059374 <__arm_cp.10_8>:
10059374:	1005ec31 	.word	0x1005ec31

10059378 <llc_conn_peripheral_roll_back_params>:
10059378:	b5f0      	push	{r4, r5, r6, r7, lr}
1005937a:	b089      	sub	sp, #36	@ 0x24
1005937c:	4604      	mov	r4, r0
1005937e:	2091      	movs	r0, #145	@ 0x91
10059380:	0040      	lsls	r0, r0, #1
10059382:	5a25      	ldrh	r5, [r4, r0]
10059384:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
10059386:	26ff      	movs	r6, #255	@ 0xff
10059388:	3608      	adds	r6, #8
1005938a:	f7ec ff4f 	bl	1004622c <BLEPLAT_GetCurrentSysTime>
1005938e:	5da1      	ldrb	r1, [r4, r6]
10059390:	22fe      	movs	r2, #254	@ 0xfe
10059392:	400a      	ands	r2, r1
10059394:	55a2      	strb	r2, [r4, r6]
10059396:	2135      	movs	r1, #53	@ 0x35
10059398:	0109      	lsls	r1, r1, #4
1005939a:	1846      	adds	r6, r0, r1
1005939c:	437d      	muls	r5, r7
1005939e:	0068      	lsls	r0, r5, #1
100593a0:	1830      	adds	r0, r6, r0
100593a2:	f3ef 8110 	mrs	r1, PRIMASK
100593a6:	b672      	cpsid	i
100593a8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
100593aa:	43c9      	mvns	r1, r1
100593ac:	1840      	adds	r0, r0, r1
100593ae:	d400      	bmi.n	100593b2 <llc_conn_peripheral_roll_back_params+0x3a>
100593b0:	e089      	b.n	100594c6 <llc_conn_peripheral_roll_back_params+0x14e>
100593b2:	2083      	movs	r0, #131	@ 0x83
100593b4:	0040      	lsls	r0, r0, #1
100593b6:	1820      	adds	r0, r4, r0
100593b8:	9008      	str	r0, [sp, #32]
100593ba:	4630      	mov	r0, r6
100593bc:	f005 fc74 	bl	1005eca8 <LL_sched_is_scheduler_call_pending>
100593c0:	2800      	cmp	r0, #0
100593c2:	d004      	beq.n	100593ce <llc_conn_peripheral_roll_back_params+0x56>
100593c4:	4941      	ldr	r1, [pc, #260]	@ (100594cc <__arm_cp.13_0>)
100593c6:	6809      	ldr	r1, [r1, #0]
100593c8:	7bc9      	ldrb	r1, [r1, #15]
100593ca:	2903      	cmp	r1, #3
100593cc:	d171      	bne.n	100594b2 <llc_conn_peripheral_roll_back_params+0x13a>
100593ce:	9706      	str	r7, [sp, #24]
100593d0:	9004      	str	r0, [sp, #16]
100593d2:	4620      	mov	r0, r4
100593d4:	3031      	adds	r0, #49	@ 0x31
100593d6:	9007      	str	r0, [sp, #28]
100593d8:	4620      	mov	r0, r4
100593da:	3042      	adds	r0, #66	@ 0x42
100593dc:	9005      	str	r0, [sp, #20]
100593de:	6c60      	ldr	r0, [r4, #68]	@ 0x44
100593e0:	1b80      	subs	r0, r0, r6
100593e2:	2700      	movs	r7, #0
100593e4:	2108      	movs	r1, #8
100593e6:	b24a      	sxtb	r2, r1
100593e8:	2a00      	cmp	r2, #0
100593ea:	d40c      	bmi.n	10059406 <llc_conn_peripheral_roll_back_params+0x8e>
100593ec:	b2cb      	uxtb	r3, r1
100593ee:	462a      	mov	r2, r5
100593f0:	409a      	lsls	r2, r3
100593f2:	4290      	cmp	r0, r2
100593f4:	d302      	bcc.n	100593fc <llc_conn_peripheral_roll_back_params+0x84>
100593f6:	2601      	movs	r6, #1
100593f8:	409e      	lsls	r6, r3
100593fa:	19bf      	adds	r7, r7, r6
100593fc:	1a82      	subs	r2, r0, r2
100593fe:	d300      	bcc.n	10059402 <llc_conn_peripheral_roll_back_params+0x8a>
10059400:	4610      	mov	r0, r2
10059402:	1e49      	subs	r1, r1, #1
10059404:	e7ef      	b.n	100593e6 <llc_conn_peripheral_roll_back_params+0x6e>
10059406:	9908      	ldr	r1, [sp, #32]
10059408:	8b88      	ldrh	r0, [r1, #28]
1005940a:	4347      	muls	r7, r0
1005940c:	9a05      	ldr	r2, [sp, #20]
1005940e:	8810      	ldrh	r0, [r2, #0]
10059410:	1bc0      	subs	r0, r0, r7
10059412:	8010      	strh	r0, [r2, #0]
10059414:	b2be      	uxth	r6, r7
10059416:	9d07      	ldr	r5, [sp, #28]
10059418:	7c28      	ldrb	r0, [r5, #16]
1005941a:	7809      	ldrb	r1, [r1, #0]
1005941c:	2901      	cmp	r1, #1
1005941e:	d10f      	bne.n	10059440 <llc_conn_peripheral_roll_back_params+0xc8>
10059420:	4617      	mov	r7, r2
10059422:	f7ee f99c 	bl	1004775e <BLEPLAT_CNTR_SmGetAccessAddr>
10059426:	883f      	ldrh	r7, [r7, #0]
10059428:	7c2a      	ldrb	r2, [r5, #16]
1005942a:	2300      	movs	r3, #0
1005942c:	9300      	str	r3, [sp, #0]
1005942e:	9001      	str	r0, [sp, #4]
10059430:	9302      	str	r3, [sp, #8]
10059432:	4621      	mov	r1, r4
10059434:	31e0      	adds	r1, #224	@ 0xe0
10059436:	4610      	mov	r0, r2
10059438:	463a      	mov	r2, r7
1005943a:	f000 fa1e 	bl	1005987a <llc_mngm_csa2_select_channel_for_task>
1005943e:	e010      	b.n	10059462 <llc_conn_peripheral_roll_back_params+0xea>
10059440:	f7ee fa04 	bl	1004784c <BLEPLAT_CNTR_SmGetHopIncr>
10059444:	2125      	movs	r1, #37	@ 0x25
10059446:	1a08      	subs	r0, r1, r0
10059448:	9008      	str	r0, [sp, #32]
1005944a:	4347      	muls	r7, r0
1005944c:	7828      	ldrb	r0, [r5, #0]
1005944e:	1838      	adds	r0, r7, r0
10059450:	b280      	uxth	r0, r0
10059452:	f000 f9e7 	bl	10059824 <llc_mngm_mod_37>
10059456:	7028      	strb	r0, [r5, #0]
10059458:	9908      	ldr	r1, [sp, #32]
1005945a:	1808      	adds	r0, r1, r0
1005945c:	b280      	uxth	r0, r0
1005945e:	f000 f9e1 	bl	10059824 <llc_mngm_mod_37>
10059462:	4601      	mov	r1, r0
10059464:	462f      	mov	r7, r5
10059466:	7c28      	ldrb	r0, [r5, #16]
10059468:	f7ee fc4d 	bl	10047d06 <BLEPLAT_CNTR_SmSetUnmappedChan>
1005946c:	9806      	ldr	r0, [sp, #24]
1005946e:	4346      	muls	r6, r0
10059470:	6c60      	ldr	r0, [r4, #68]	@ 0x44
10059472:	1b80      	subs	r0, r0, r6
10059474:	6460      	str	r0, [r4, #68]	@ 0x44
10059476:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
10059478:	4631      	mov	r1, r6
1005947a:	f005 f93b 	bl	1005e6f4 <LL_link_calculate_window_widening_from_ppm>
1005947e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
10059480:	4282      	cmp	r2, r0
10059482:	d904      	bls.n	1005948e <llc_conn_peripheral_roll_back_params+0x116>
10059484:	1a12      	subs	r2, r2, r0
10059486:	2a0d      	cmp	r2, #13
10059488:	d800      	bhi.n	1005948c <llc_conn_peripheral_roll_back_params+0x114>
1005948a:	220d      	movs	r2, #13
1005948c:	64a2      	str	r2, [r4, #72]	@ 0x48
1005948e:	9d04      	ldr	r5, [sp, #16]
10059490:	6e60      	ldr	r0, [r4, #100]	@ 0x64
10059492:	1980      	adds	r0, r0, r6
10059494:	6660      	str	r0, [r4, #100]	@ 0x64
10059496:	6f60      	ldr	r0, [r4, #116]	@ 0x74
10059498:	0051      	lsls	r1, r2, #1
1005949a:	1809      	adds	r1, r1, r0
1005949c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005949e:	1a82      	subs	r2, r0, r2
100594a0:	7c38      	ldrb	r0, [r7, #16]
100594a2:	f005 fba9 	bl	1005ebf8 <LL_sched_set_taskslot_length_anchor>
100594a6:	2d00      	cmp	r5, #0
100594a8:	d10d      	bne.n	100594c6 <llc_conn_peripheral_roll_back_params+0x14e>
100594aa:	7c38      	ldrb	r0, [r7, #16]
100594ac:	f005 fc1e 	bl	1005ecec <LL_sched_engine>
100594b0:	e009      	b.n	100594c6 <llc_conn_peripheral_roll_back_params+0x14e>
100594b2:	9a08      	ldr	r2, [sp, #32]
100594b4:	7850      	ldrb	r0, [r2, #1]
100594b6:	2101      	movs	r1, #1
100594b8:	4301      	orrs	r1, r0
100594ba:	7051      	strb	r1, [r2, #1]
100594bc:	2013      	movs	r0, #19
100594be:	f008 fffb 	bl	100624b8 <tsk_notify_idx>
100594c2:	f7ea fb2a 	bl	10043b1a <BLE_STACK_ProcessRequest>
100594c6:	b662      	cpsie	i
100594c8:	b009      	add	sp, #36	@ 0x24
100594ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

100594cc <__arm_cp.13_0>:
100594cc:	200010f8 	.word	0x200010f8

100594d0 <llc_conn_reserve_conn_idx>:
100594d0:	b510      	push	{r4, lr}
100594d2:	2400      	movs	r4, #0
100594d4:	4620      	mov	r0, r4
100594d6:	f7fe fde7 	bl	100580a8 <llc_conn_get_cntxt_per_p>
100594da:	490a      	ldr	r1, [pc, #40]	@ (10059504 <__arm_cp.14_0>)
100594dc:	6809      	ldr	r1, [r1, #0]
100594de:	2234      	movs	r2, #52	@ 0x34
100594e0:	5c89      	ldrb	r1, [r1, r2]
100594e2:	302c      	adds	r0, #44	@ 0x2c
100594e4:	42a1      	cmp	r1, r4
100594e6:	d007      	beq.n	100594f8 <llc_conn_reserve_conn_idx+0x28>
100594e8:	7802      	ldrb	r2, [r0, #0]
100594ea:	2a00      	cmp	r2, #0
100594ec:	d006      	beq.n	100594fc <llc_conn_reserve_conn_idx+0x2c>
100594ee:	224d      	movs	r2, #77	@ 0x4d
100594f0:	0092      	lsls	r2, r2, #2
100594f2:	1880      	adds	r0, r0, r2
100594f4:	1c64      	adds	r4, r4, #1
100594f6:	e7f5      	b.n	100594e4 <llc_conn_reserve_conn_idx+0x14>
100594f8:	24ff      	movs	r4, #255	@ 0xff
100594fa:	e001      	b.n	10059500 <llc_conn_reserve_conn_idx+0x30>
100594fc:	2101      	movs	r1, #1
100594fe:	7001      	strb	r1, [r0, #0]
10059500:	b2e0      	uxtb	r0, r4
10059502:	bd10      	pop	{r4, pc}

10059504 <__arm_cp.14_0>:
10059504:	200010a0 	.word	0x200010a0

10059508 <llc_conn_send_acl_data>:
10059508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005950a:	4606      	mov	r6, r0
1005950c:	8800      	ldrh	r0, [r0, #0]
1005950e:	f7fe fdd9 	bl	100580c4 <llc_conn_get_cntxt_per_p_from_handle>
10059512:	2800      	cmp	r0, #0
10059514:	d012      	beq.n	1005953c <llc_conn_send_acl_data+0x34>
10059516:	4604      	mov	r4, r0
10059518:	4607      	mov	r7, r0
1005951a:	372c      	adds	r7, #44	@ 0x2c
1005951c:	f3ef 8010 	mrs	r0, PRIMASK
10059520:	b672      	cpsid	i
10059522:	463d      	mov	r5, r7
10059524:	3554      	adds	r5, #84	@ 0x54
10059526:	4628      	mov	r0, r5
10059528:	4631      	mov	r1, r6
1005952a:	f009 f9bb 	bl	100628a4 <ACL_list_insert_tail>
1005952e:	7838      	ldrb	r0, [r7, #0]
10059530:	2803      	cmp	r0, #3
10059532:	d105      	bne.n	10059540 <llc_conn_send_acl_data+0x38>
10059534:	4620      	mov	r0, r4
10059536:	f7ff ff1f 	bl	10059378 <llc_conn_peripheral_roll_back_params>
1005953a:	e01a      	b.n	10059572 <llc_conn_send_acl_data+0x6a>
1005953c:	2002      	movs	r0, #2
1005953e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10059540:	7d78      	ldrb	r0, [r7, #21]
10059542:	4e28      	ldr	r6, [pc, #160]	@ (100595e4 <__arm_cp.15_0>)
10059544:	6831      	ldr	r1, [r6, #0]
10059546:	7b49      	ldrb	r1, [r1, #13]
10059548:	4288      	cmp	r0, r1
1005954a:	d112      	bne.n	10059572 <llc_conn_send_acl_data+0x6a>
1005954c:	f7ec fe6e 	bl	1004622c <BLEPLAT_GetCurrentSysTime>
10059550:	6831      	ldr	r1, [r6, #0]
10059552:	6809      	ldr	r1, [r1, #0]
10059554:	43c9      	mvns	r1, r1
10059556:	1840      	adds	r0, r0, r1
10059558:	2101      	movs	r1, #1
1005955a:	0289      	lsls	r1, r1, #10
1005955c:	1840      	adds	r0, r0, r1
1005955e:	d508      	bpl.n	10059572 <llc_conn_send_acl_data+0x6a>
10059560:	205c      	movs	r0, #92	@ 0x5c
10059562:	5c38      	ldrb	r0, [r7, r0]
10059564:	0640      	lsls	r0, r0, #25
10059566:	d404      	bmi.n	10059572 <llc_conn_send_acl_data+0x6a>
10059568:	4620      	mov	r0, r4
1005956a:	f7ff f85a 	bl	10058622 <llc_conn_get_tx_acl_blocked>
1005956e:	2800      	cmp	r0, #0
10059570:	d002      	beq.n	10059578 <llc_conn_send_acl_data+0x70>
10059572:	b662      	cpsie	i
10059574:	2084      	movs	r0, #132	@ 0x84
10059576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10059578:	4620      	mov	r0, r4
1005957a:	f7ed ff48 	bl	1004740e <BLEPLAT_CNTR_PacketGetDataPtr>
1005957e:	4606      	mov	r6, r0
10059580:	4620      	mov	r0, r4
10059582:	3028      	adds	r0, #40	@ 0x28
10059584:	4286      	cmp	r6, r0
10059586:	d00a      	beq.n	1005959e <llc_conn_send_acl_data+0x96>
10059588:	2101      	movs	r1, #1
1005958a:	4620      	mov	r0, r4
1005958c:	f7ff f822 	bl	100585d4 <llc_conn_get_ctrl_pdu_data_p>
10059590:	4286      	cmp	r6, r0
10059592:	d0ee      	beq.n	10059572 <llc_conn_send_acl_data+0x6a>
10059594:	7830      	ldrb	r0, [r6, #0]
10059596:	2110      	movs	r1, #16
10059598:	4301      	orrs	r1, r0
1005959a:	7031      	strb	r1, [r6, #0]
1005959c:	e7e9      	b.n	10059572 <llc_conn_send_acl_data+0x6a>
1005959e:	4812      	ldr	r0, [pc, #72]	@ (100595e8 <__arm_cp.15_1>)
100595a0:	6800      	ldr	r0, [r0, #0]
100595a2:	218c      	movs	r1, #140	@ 0x8c
100595a4:	5840      	ldr	r0, [r0, r1]
100595a6:	682e      	ldr	r6, [r5, #0]
100595a8:	8a31      	ldrh	r1, [r6, #16]
100595aa:	89f2      	ldrh	r2, [r6, #14]
100595ac:	1851      	adds	r1, r2, r1
100595ae:	221f      	movs	r2, #31
100595b0:	400a      	ands	r2, r1
100595b2:	1817      	adds	r7, r2, r0
100595b4:	1cbd      	adds	r5, r7, #2
100595b6:	4620      	mov	r0, r4
100595b8:	4629      	mov	r1, r5
100595ba:	f7ed ff6a 	bl	10047492 <BLEPLAT_CNTR_PacketSetDataPtr>
100595be:	4620      	mov	r0, r4
100595c0:	4631      	mov	r1, r6
100595c2:	f7fe ff5b 	bl	1005847c <llc_conn_copy_tx_data_packet>
100595c6:	67e6      	str	r6, [r4, #124]	@ 0x7c
100595c8:	78f8      	ldrb	r0, [r7, #3]
100595ca:	2800      	cmp	r0, #0
100595cc:	d0d1      	beq.n	10059572 <llc_conn_send_acl_data+0x6a>
100595ce:	2101      	movs	r1, #1
100595d0:	4620      	mov	r0, r4
100595d2:	f7ff f805 	bl	100585e0 <llc_conn_get_enc_on>
100595d6:	2801      	cmp	r0, #1
100595d8:	d1cb      	bne.n	10059572 <llc_conn_send_acl_data+0x6a>
100595da:	7868      	ldrb	r0, [r5, #1]
100595dc:	1d00      	adds	r0, r0, #4
100595de:	7068      	strb	r0, [r5, #1]
100595e0:	e7c7      	b.n	10059572 <llc_conn_send_acl_data+0x6a>
100595e2:	46c0      	nop			@ (mov r8, r8)

100595e4 <__arm_cp.15_0>:
100595e4:	200010f8 	.word	0x200010f8

100595e8 <__arm_cp.15_1>:
100595e8:	200010f4 	.word	0x200010f4

100595ec <llc_conn_set_taskslot_params>:
100595ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100595ee:	b085      	sub	sp, #20
100595f0:	460f      	mov	r7, r1
100595f2:	4604      	mov	r4, r0
100595f4:	2041      	movs	r0, #65	@ 0x41
100595f6:	5c20      	ldrb	r0, [r4, r0]
100595f8:	2183      	movs	r1, #131	@ 0x83
100595fa:	0049      	lsls	r1, r1, #1
100595fc:	5c61      	ldrb	r1, [r4, r1]
100595fe:	4625      	mov	r5, r4
10059600:	352c      	adds	r5, #44	@ 0x2c
10059602:	2901      	cmp	r1, #1
10059604:	d10d      	bne.n	10059622 <llc_conn_set_taskslot_params+0x36>
10059606:	f7ee f8aa 	bl	1004775e <BLEPLAT_CNTR_SmGetAccessAddr>
1005960a:	8aea      	ldrh	r2, [r5, #22]
1005960c:	7d6e      	ldrb	r6, [r5, #21]
1005960e:	2300      	movs	r3, #0
10059610:	9300      	str	r3, [sp, #0]
10059612:	9001      	str	r0, [sp, #4]
10059614:	9302      	str	r3, [sp, #8]
10059616:	4621      	mov	r1, r4
10059618:	31e0      	adds	r1, #224	@ 0xe0
1005961a:	4630      	mov	r0, r6
1005961c:	f000 f92d 	bl	1005987a <llc_mngm_csa2_select_channel_for_task>
10059620:	e010      	b.n	10059644 <llc_conn_set_taskslot_params+0x58>
10059622:	4616      	mov	r6, r2
10059624:	f7ee f912 	bl	1004784c <BLEPLAT_CNTR_SmGetHopIncr>
10059628:	9704      	str	r7, [sp, #16]
1005962a:	4607      	mov	r7, r0
1005962c:	4346      	muls	r6, r0
1005962e:	7968      	ldrb	r0, [r5, #5]
10059630:	1836      	adds	r6, r6, r0
10059632:	b2b0      	uxth	r0, r6
10059634:	f000 f8f6 	bl	10059824 <llc_mngm_mod_37>
10059638:	7168      	strb	r0, [r5, #5]
1005963a:	1bf0      	subs	r0, r6, r7
1005963c:	9f04      	ldr	r7, [sp, #16]
1005963e:	b280      	uxth	r0, r0
10059640:	f000 f8f0 	bl	10059824 <llc_mngm_mod_37>
10059644:	4601      	mov	r1, r0
10059646:	7d68      	ldrb	r0, [r5, #21]
10059648:	f7ee fb5d 	bl	10047d06 <BLEPLAT_CNTR_SmSetUnmappedChan>
1005964c:	7828      	ldrb	r0, [r5, #0]
1005964e:	2802      	cmp	r0, #2
10059650:	d10c      	bne.n	1005966c <llc_conn_set_taskslot_params+0x80>
10059652:	4620      	mov	r0, r4
10059654:	f7ed ffc2 	bl	100475dc <BLEPLAT_CNTR_PacketSetPllTrig>
10059658:	4620      	mov	r0, r4
1005965a:	f7ed ff29 	bl	100474b0 <BLEPLAT_CNTR_PacketSetIncChan>
1005965e:	7d68      	ldrb	r0, [r5, #21]
10059660:	f7ee faf4 	bl	10047c4c <BLEPLAT_CNTR_SmSetTxMode>
10059664:	6c62      	ldr	r2, [r4, #68]	@ 0x44
10059666:	6d21      	ldr	r1, [r4, #80]	@ 0x50
10059668:	7d68      	ldrb	r0, [r5, #21]
1005966a:	e02d      	b.n	100596c8 <llc_conn_set_taskslot_params+0xdc>
1005966c:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
1005966e:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
10059670:	4639      	mov	r1, r7
10059672:	f005 f83f 	bl	1005e6f4 <LL_link_calculate_window_widening_from_ppm>
10059676:	1980      	adds	r0, r0, r6
10059678:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
1005967a:	2900      	cmp	r1, #0
1005967c:	d100      	bne.n	10059680 <llc_conn_set_taskslot_params+0x94>
1005967e:	300d      	adds	r0, #13
10059680:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
10059682:	0849      	lsrs	r1, r1, #1
10059684:	393e      	subs	r1, #62	@ 0x3e
10059686:	4288      	cmp	r0, r1
10059688:	d901      	bls.n	1005968e <llc_conn_set_taskslot_params+0xa2>
1005968a:	2008      	movs	r0, #8
1005968c:	e022      	b.n	100596d4 <llc_conn_set_taskslot_params+0xe8>
1005968e:	64a0      	str	r0, [r4, #72]	@ 0x48
10059690:	6b61      	ldr	r1, [r4, #52]	@ 0x34
10059692:	0040      	lsls	r0, r0, #1
10059694:	2900      	cmp	r1, #0
10059696:	d001      	beq.n	1005969c <llc_conn_set_taskslot_params+0xb0>
10059698:	180f      	adds	r7, r1, r0
1005969a:	e005      	b.n	100596a8 <llc_conn_set_taskslot_params+0xbc>
1005969c:	6f61      	ldr	r1, [r4, #116]	@ 0x74
1005969e:	1808      	adds	r0, r1, r0
100596a0:	6d27      	ldr	r7, [r4, #80]	@ 0x50
100596a2:	42b8      	cmp	r0, r7
100596a4:	d800      	bhi.n	100596a8 <llc_conn_set_taskslot_params+0xbc>
100596a6:	4607      	mov	r7, r0
100596a8:	4626      	mov	r6, r4
100596aa:	3614      	adds	r6, #20
100596ac:	4630      	mov	r0, r6
100596ae:	f7ed ff95 	bl	100475dc <BLEPLAT_CNTR_PacketSetPllTrig>
100596b2:	4630      	mov	r0, r6
100596b4:	f7ed fefc 	bl	100474b0 <BLEPLAT_CNTR_PacketSetIncChan>
100596b8:	7d68      	ldrb	r0, [r5, #21]
100596ba:	f7ee fa5b 	bl	10047b74 <BLEPLAT_CNTR_SmSetRxMode>
100596be:	6c60      	ldr	r0, [r4, #68]	@ 0x44
100596c0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
100596c2:	1a42      	subs	r2, r0, r1
100596c4:	7d68      	ldrb	r0, [r5, #21]
100596c6:	4639      	mov	r1, r7
100596c8:	f005 fa96 	bl	1005ebf8 <LL_sched_set_taskslot_length_anchor>
100596cc:	8e60      	ldrh	r0, [r4, #50]	@ 0x32
100596ce:	1c40      	adds	r0, r0, #1
100596d0:	8660      	strh	r0, [r4, #50]	@ 0x32
100596d2:	2000      	movs	r0, #0
100596d4:	b005      	add	sp, #20
100596d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100596d8 <llc_conn_update_receive_window>:
100596d8:	b570      	push	{r4, r5, r6, lr}
100596da:	4604      	mov	r4, r0
100596dc:	4606      	mov	r6, r0
100596de:	362c      	adds	r6, #44	@ 0x2c
100596e0:	4605      	mov	r5, r0
100596e2:	35d0      	adds	r5, #208	@ 0xd0
100596e4:	f7f7 ffa2 	bl	1005162c <phy_upd_csr_ucfg>
100596e8:	2801      	cmp	r0, #1
100596ea:	d10b      	bne.n	10059704 <llc_conn_update_receive_window+0x2c>
100596ec:	7930      	ldrb	r0, [r6, #4]
100596ee:	210e      	movs	r1, #14
100596f0:	4341      	muls	r1, r0
100596f2:	480e      	ldr	r0, [pc, #56]	@ (1005972c <__arm_cp.17_0>)
100596f4:	6800      	ldr	r0, [r0, #0]
100596f6:	229c      	movs	r2, #156	@ 0x9c
100596f8:	5880      	ldr	r0, [r0, r2]
100596fa:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
100596fc:	6940      	ldr	r0, [r0, #20]
100596fe:	1840      	adds	r0, r0, r1
10059700:	79c0      	ldrb	r0, [r0, #7]
10059702:	e000      	b.n	10059706 <llc_conn_update_receive_window+0x2e>
10059704:	2001      	movs	r0, #1
10059706:	f7ee fb22 	bl	10047d4e <BLEPLAT_CNTR_DemodDelaySt>
1005970a:	4909      	ldr	r1, [pc, #36]	@ (10059730 <__arm_cp.17_1>)
1005970c:	4348      	muls	r0, r1
1005970e:	0a00      	lsrs	r0, r0, #8
10059710:	3010      	adds	r0, #16
10059712:	6028      	str	r0, [r5, #0]
10059714:	7832      	ldrb	r2, [r6, #0]
10059716:	2a03      	cmp	r2, #3
10059718:	d107      	bne.n	1005972a <llc_conn_update_receive_window+0x52>
1005971a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
1005971c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
1005971e:	005b      	lsls	r3, r3, #1
10059720:	189a      	adds	r2, r3, r2
10059722:	4351      	muls	r1, r2
10059724:	0a09      	lsrs	r1, r1, #8
10059726:	1808      	adds	r0, r1, r0
10059728:	6028      	str	r0, [r5, #0]
1005972a:	bd70      	pop	{r4, r5, r6, pc}

1005972c <__arm_cp.17_0>:
1005972c:	200010f4 	.word	0x200010f4

10059730 <__arm_cp.17_1>:
10059730:	00000271 	.word	0x00000271

10059734 <llc_conn_peripheral_roll_back_params_tsk>:
10059734:	b570      	push	{r4, r5, r6, lr}
10059736:	2400      	movs	r4, #0
10059738:	4620      	mov	r0, r4
1005973a:	f7fe fcb5 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005973e:	4605      	mov	r5, r0
10059740:	4e0a      	ldr	r6, [pc, #40]	@ (1005976c <__arm_cp.19_0>)
10059742:	6830      	ldr	r0, [r6, #0]
10059744:	2134      	movs	r1, #52	@ 0x34
10059746:	5c41      	ldrb	r1, [r0, r1]
10059748:	428c      	cmp	r4, r1
1005974a:	d20d      	bcs.n	10059768 <llc_conn_peripheral_roll_back_params_tsk+0x34>
1005974c:	21ff      	movs	r1, #255	@ 0xff
1005974e:	3108      	adds	r1, #8
10059750:	5c69      	ldrb	r1, [r5, r1]
10059752:	07c9      	lsls	r1, r1, #31
10059754:	d003      	beq.n	1005975e <llc_conn_peripheral_roll_back_params_tsk+0x2a>
10059756:	4628      	mov	r0, r5
10059758:	f7ff fe0e 	bl	10059378 <llc_conn_peripheral_roll_back_params>
1005975c:	6830      	ldr	r0, [r6, #0]
1005975e:	214d      	movs	r1, #77	@ 0x4d
10059760:	0089      	lsls	r1, r1, #2
10059762:	186d      	adds	r5, r5, r1
10059764:	1c64      	adds	r4, r4, #1
10059766:	e7ed      	b.n	10059744 <llc_conn_peripheral_roll_back_params_tsk+0x10>
10059768:	bd70      	pop	{r4, r5, r6, pc}
1005976a:	46c0      	nop			@ (mov r8, r8)

1005976c <__arm_cp.19_0>:
1005976c:	200010a0 	.word	0x200010a0

10059770 <llc_conn_set_blue_packets>:
10059770:	b570      	push	{r4, r5, r6, lr}
10059772:	4616      	mov	r6, r2
10059774:	460d      	mov	r5, r1
10059776:	4604      	mov	r4, r0
10059778:	f7ed fe56 	bl	10047428 <BLEPLAT_CNTR_PacketInitTo0>
1005977c:	4620      	mov	r0, r4
1005977e:	f7ed fe6e 	bl	1004745e <BLEPLAT_CNTR_PacketSetCrcinitSel>
10059782:	4620      	mov	r0, r4
10059784:	f7ed feac 	bl	100474e0 <BLEPLAT_CNTR_PacketSetIntDone>
10059788:	4620      	mov	r0, r4
1005978a:	4621      	mov	r1, r4
1005978c:	f7ed fee6 	bl	1004755c <BLEPLAT_CNTR_PacketSetNextPtr>
10059790:	4620      	mov	r0, r4
10059792:	f7ed ff17 	bl	100475c4 <BLEPLAT_CNTR_PacketSetNsEn>
10059796:	4620      	mov	r0, r4
10059798:	4631      	mov	r1, r6
1005979a:	f7ed fefb 	bl	10047594 <BLEPLAT_CNTR_PacketSetNextSlot>
1005979e:	4620      	mov	r0, r4
100597a0:	f7ed ff45 	bl	1004762e <BLEPLAT_CNTR_PacketSetTimer2Active>
100597a4:	4620      	mov	r0, r4
100597a6:	f7ed ff19 	bl	100475dc <BLEPLAT_CNTR_PacketSetPllTrig>
100597aa:	4620      	mov	r0, r4
100597ac:	f7ed fe80 	bl	100474b0 <BLEPLAT_CNTR_PacketSetIncChan>
100597b0:	4620      	mov	r0, r4
100597b2:	f7ed fec6 	bl	10047542 <BLEPLAT_CNTR_PacketSetKeepsemareq>
100597b6:	2d00      	cmp	r5, #0
100597b8:	d00d      	beq.n	100597d6 <llc_conn_set_blue_packets+0x66>
100597ba:	2094      	movs	r0, #148	@ 0x94
100597bc:	2100      	movs	r1, #0
100597be:	460a      	mov	r2, r1
100597c0:	f7ed fcc0 	bl	10047144 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
100597c4:	4601      	mov	r1, r0
100597c6:	4620      	mov	r0, r4
100597c8:	f7ed ff22 	bl	10047610 <BLEPLAT_CNTR_PacketSetTimeout>
100597cc:	4620      	mov	r0, r4
100597ce:	4629      	mov	r1, r5
100597d0:	f7ed fe5f 	bl	10047492 <BLEPLAT_CNTR_PacketSetDataPtr>
100597d4:	bd70      	pop	{r4, r5, r6, pc}
100597d6:	4812      	ldr	r0, [pc, #72]	@ (10059820 <__arm_cp.20_0>)
100597d8:	6800      	ldr	r0, [r0, #0]
100597da:	2190      	movs	r1, #144	@ 0x90
100597dc:	5845      	ldr	r5, [r0, r1]
100597de:	2096      	movs	r0, #150	@ 0x96
100597e0:	2101      	movs	r1, #1
100597e2:	2200      	movs	r2, #0
100597e4:	f7ed fcae 	bl	10047144 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
100597e8:	4601      	mov	r1, r0
100597ea:	4620      	mov	r0, r4
100597ec:	f7ed ff10 	bl	10047610 <BLEPLAT_CNTR_PacketSetTimeout>
100597f0:	4620      	mov	r0, r4
100597f2:	f7ed fe81 	bl	100474f8 <BLEPLAT_CNTR_PacketSetIntRcvOk>
100597f6:	4620      	mov	r0, r4
100597f8:	f7ed fe96 	bl	10047528 <BLEPLAT_CNTR_PacketSetIntTxOk>
100597fc:	4620      	mov	r0, r4
100597fe:	f7ed fe87 	bl	10047510 <BLEPLAT_CNTR_PacketSetIntTimeout>
10059802:	4620      	mov	r0, r4
10059804:	f7ed fe60 	bl	100474c8 <BLEPLAT_CNTR_PacketSetIntCrcErr>
10059808:	1ca9      	adds	r1, r5, #2
1005980a:	4620      	mov	r0, r4
1005980c:	f7ed fe41 	bl	10047492 <BLEPLAT_CNTR_PacketSetDataPtr>
10059810:	4620      	mov	r0, r4
10059812:	f7ed feca 	bl	100475aa <BLEPLAT_CNTR_PacketSetNextTxMode>
10059816:	4620      	mov	r0, r4
10059818:	f7ed ff22 	bl	10047660 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1005981c:	bd70      	pop	{r4, r5, r6, pc}
1005981e:	46c0      	nop			@ (mov r8, r8)

10059820 <__arm_cp.20_0>:
10059820:	200010f4 	.word	0x200010f4

10059824 <llc_mngm_mod_37>:
10059824:	4906      	ldr	r1, [pc, #24]	@ (10059840 <__arm_cp.0_0>)
10059826:	4341      	muls	r1, r0
10059828:	0c09      	lsrs	r1, r1, #16
1005982a:	2224      	movs	r2, #36	@ 0x24
1005982c:	43d2      	mvns	r2, r2
1005982e:	434a      	muls	r2, r1
10059830:	1810      	adds	r0, r2, r0
10059832:	b281      	uxth	r1, r0
10059834:	2924      	cmp	r1, #36	@ 0x24
10059836:	d900      	bls.n	1005983a <llc_mngm_mod_37+0x16>
10059838:	3825      	subs	r0, #37	@ 0x25
1005983a:	b2c0      	uxtb	r0, r0
1005983c:	4770      	bx	lr
1005983e:	46c0      	nop			@ (mov r8, r8)

10059840 <__arm_cp.0_0>:
10059840:	000006eb 	.word	0x000006eb

10059844 <llc_mngm_csa2_update_remapping_table>:
10059844:	b570      	push	{r4, r5, r6, lr}
10059846:	460d      	mov	r5, r1
10059848:	4604      	mov	r4, r0
1005984a:	1c40      	adds	r0, r0, #1
1005984c:	2600      	movs	r6, #0
1005984e:	2225      	movs	r2, #37	@ 0x25
10059850:	4631      	mov	r1, r6
10059852:	f7ec fc0f 	bl	10046074 <BLEPLAT_MemSet>
10059856:	4630      	mov	r0, r6
10059858:	2e25      	cmp	r6, #37	@ 0x25
1005985a:	d20c      	bcs.n	10059876 <llc_mngm_csa2_update_remapping_table+0x32>
1005985c:	2107      	movs	r1, #7
1005985e:	4031      	ands	r1, r6
10059860:	08f2      	lsrs	r2, r6, #3
10059862:	5caa      	ldrb	r2, [r5, r2]
10059864:	40ca      	lsrs	r2, r1
10059866:	07d1      	lsls	r1, r2, #31
10059868:	d003      	beq.n	10059872 <llc_mngm_csa2_update_remapping_table+0x2e>
1005986a:	b2c1      	uxtb	r1, r0
1005986c:	1861      	adds	r1, r4, r1
1005986e:	704e      	strb	r6, [r1, #1]
10059870:	1c40      	adds	r0, r0, #1
10059872:	1c76      	adds	r6, r6, #1
10059874:	e7f0      	b.n	10059858 <llc_mngm_csa2_update_remapping_table+0x14>
10059876:	7020      	strb	r0, [r4, #0]
10059878:	bd70      	pop	{r4, r5, r6, pc}

1005987a <llc_mngm_csa2_select_channel_for_task>:
1005987a:	b5f0      	push	{r4, r5, r6, r7, lr}
1005987c:	b08b      	sub	sp, #44	@ 0x2c
1005987e:	9305      	str	r3, [sp, #20]
10059880:	4617      	mov	r7, r2
10059882:	460d      	mov	r5, r1
10059884:	a909      	add	r1, sp, #36	@ 0x24
10059886:	f7ed ff7a 	bl	1004777e <BLEPLAT_CNTR_SmGetChannelMap>
1005988a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
1005988c:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005988e:	9006      	str	r0, [sp, #24]
10059890:	2800      	cmp	r0, #0
10059892:	d018      	beq.n	100598c6 <llc_mngm_csa2_select_channel_for_task+0x4c>
10059894:	9504      	str	r5, [sp, #16]
10059896:	9e12      	ldr	r6, [sp, #72]	@ 0x48
10059898:	2500      	movs	r5, #0
1005989a:	9806      	ldr	r0, [sp, #24]
1005989c:	42a8      	cmp	r0, r5
1005989e:	d010      	beq.n	100598c2 <llc_mngm_csa2_select_channel_for_task+0x48>
100598a0:	9804      	ldr	r0, [sp, #16]
100598a2:	9003      	str	r0, [sp, #12]
100598a4:	a809      	add	r0, sp, #36	@ 0x24
100598a6:	9002      	str	r0, [sp, #8]
100598a8:	a808      	add	r0, sp, #32
100598aa:	9001      	str	r0, [sp, #4]
100598ac:	a807      	add	r0, sp, #28
100598ae:	9000      	str	r0, [sp, #0]
100598b0:	b2eb      	uxtb	r3, r5
100598b2:	4620      	mov	r0, r4
100598b4:	4639      	mov	r1, r7
100598b6:	9a05      	ldr	r2, [sp, #20]
100598b8:	f000 f812 	bl	100598e0 <llc_mngm_csa2_select_channel>
100598bc:	5570      	strb	r0, [r6, r5]
100598be:	1c6d      	adds	r5, r5, #1
100598c0:	e7eb      	b.n	1005989a <llc_mngm_csa2_select_channel_for_task+0x20>
100598c2:	7830      	ldrb	r0, [r6, #0]
100598c4:	e00a      	b.n	100598dc <llc_mngm_csa2_select_channel_for_task+0x62>
100598c6:	9503      	str	r5, [sp, #12]
100598c8:	a809      	add	r0, sp, #36	@ 0x24
100598ca:	9002      	str	r0, [sp, #8]
100598cc:	2200      	movs	r2, #0
100598ce:	9201      	str	r2, [sp, #4]
100598d0:	9200      	str	r2, [sp, #0]
100598d2:	4620      	mov	r0, r4
100598d4:	4639      	mov	r1, r7
100598d6:	4613      	mov	r3, r2
100598d8:	f000 f802 	bl	100598e0 <llc_mngm_csa2_select_channel>
100598dc:	b00b      	add	sp, #44	@ 0x2c
100598de:	bdf0      	pop	{r4, r5, r6, r7, pc}

100598e0 <llc_mngm_csa2_select_channel>:
100598e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100598e2:	b089      	sub	sp, #36	@ 0x24
100598e4:	4615      	mov	r5, r2
100598e6:	aa08      	add	r2, sp, #32
100598e8:	2600      	movs	r6, #0
100598ea:	7016      	strb	r6, [r2, #0]
100598ec:	2d00      	cmp	r5, #0
100598ee:	9306      	str	r3, [sp, #24]
100598f0:	461a      	mov	r2, r3
100598f2:	d100      	bne.n	100598f6 <llc_mngm_csa2_select_channel+0x16>
100598f4:	462a      	mov	r2, r5
100598f6:	0c07      	lsrs	r7, r0, #16
100598f8:	4047      	eors	r7, r0
100598fa:	9811      	ldr	r0, [sp, #68]	@ 0x44
100598fc:	9007      	str	r0, [sp, #28]
100598fe:	2d00      	cmp	r5, #0
10059900:	d104      	bne.n	1005990c <llc_mngm_csa2_select_channel+0x2c>
10059902:	2300      	movs	r3, #0
10059904:	9806      	ldr	r0, [sp, #24]
10059906:	2801      	cmp	r0, #1
10059908:	461c      	mov	r4, r3
1005990a:	d838      	bhi.n	1005997e <llc_mngm_csa2_select_channel+0x9e>
1005990c:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005990e:	9005      	str	r0, [sp, #20]
10059910:	4079      	eors	r1, r7
10059912:	4051      	eors	r1, r2
10059914:	460c      	mov	r4, r1
10059916:	2e02      	cmp	r6, #2
10059918:	d807      	bhi.n	1005992a <llc_mngm_csa2_select_channel+0x4a>
1005991a:	b2a0      	uxth	r0, r4
1005991c:	f000 f842 	bl	100599a4 <llc_mngm_csa2_permutation>
10059920:	2111      	movs	r1, #17
10059922:	4341      	muls	r1, r0
10059924:	19cc      	adds	r4, r1, r7
10059926:	1c76      	adds	r6, r6, #1
10059928:	e7f5      	b.n	10059916 <llc_mngm_csa2_select_channel+0x36>
1005992a:	4620      	mov	r0, r4
1005992c:	4078      	eors	r0, r7
1005992e:	b286      	uxth	r6, r0
10059930:	4630      	mov	r0, r6
10059932:	f7ff ff77 	bl	10059824 <llc_mngm_mod_37>
10059936:	2824      	cmp	r0, #36	@ 0x24
10059938:	d815      	bhi.n	10059966 <llc_mngm_csa2_select_channel+0x86>
1005993a:	08c1      	lsrs	r1, r0, #3
1005993c:	9a05      	ldr	r2, [sp, #20]
1005993e:	5c52      	ldrb	r2, [r2, r1]
10059940:	00c9      	lsls	r1, r1, #3
10059942:	1a41      	subs	r1, r0, r1
10059944:	b2c9      	uxtb	r1, r1
10059946:	40ca      	lsrs	r2, r1
10059948:	07d1      	lsls	r1, r2, #31
1005994a:	d00c      	beq.n	10059966 <llc_mngm_csa2_select_channel+0x86>
1005994c:	a908      	add	r1, sp, #32
1005994e:	7008      	strb	r0, [r1, #0]
10059950:	9a07      	ldr	r2, [sp, #28]
10059952:	1c51      	adds	r1, r2, #1
10059954:	7812      	ldrb	r2, [r2, #0]
10059956:	2300      	movs	r3, #0
10059958:	429a      	cmp	r2, r3
1005995a:	d00d      	beq.n	10059978 <llc_mngm_csa2_select_channel+0x98>
1005995c:	5cce      	ldrb	r6, [r1, r3]
1005995e:	4286      	cmp	r6, r0
10059960:	d00b      	beq.n	1005997a <llc_mngm_csa2_select_channel+0x9a>
10059962:	1c5b      	adds	r3, r3, #1
10059964:	e7f8      	b.n	10059958 <llc_mngm_csa2_select_channel+0x78>
10059966:	9907      	ldr	r1, [sp, #28]
10059968:	7808      	ldrb	r0, [r1, #0]
1005996a:	4346      	muls	r6, r0
1005996c:	0c33      	lsrs	r3, r6, #16
1005996e:	18c8      	adds	r0, r1, r3
10059970:	7840      	ldrb	r0, [r0, #1]
10059972:	a908      	add	r1, sp, #32
10059974:	7008      	strb	r0, [r1, #0]
10059976:	e000      	b.n	1005997a <llc_mngm_csa2_select_channel+0x9a>
10059978:	2325      	movs	r3, #37	@ 0x25
1005997a:	2d00      	cmp	r5, #0
1005997c:	d10e      	bne.n	1005999c <llc_mngm_csa2_select_channel+0xbc>
1005997e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
10059980:	980e      	ldr	r0, [sp, #56]	@ 0x38
10059982:	ad08      	add	r5, sp, #32
10059984:	b2ba      	uxth	r2, r7
10059986:	9000      	str	r0, [sp, #0]
10059988:	9201      	str	r2, [sp, #4]
1005998a:	9807      	ldr	r0, [sp, #28]
1005998c:	9002      	str	r0, [sp, #8]
1005998e:	9503      	str	r5, [sp, #12]
10059990:	b2a2      	uxth	r2, r4
10059992:	b2db      	uxtb	r3, r3
10059994:	9806      	ldr	r0, [sp, #24]
10059996:	f000 f803 	bl	100599a0 <llc_mngm_csa2_select_subevent_channel_ucfg_weak>
1005999a:	7828      	ldrb	r0, [r5, #0]
1005999c:	b009      	add	sp, #36	@ 0x24
1005999e:	bdf0      	pop	{r4, r5, r6, r7, pc}

100599a0 <llc_mngm_csa2_select_subevent_channel_ucfg_weak>:
100599a0:	4770      	bx	lr
	...

100599a4 <llc_mngm_csa2_permutation>:
100599a4:	0041      	lsls	r1, r0, #1
100599a6:	4a0a      	ldr	r2, [pc, #40]	@ (100599d0 <__arm_cp.7_0>)
100599a8:	400a      	ands	r2, r1
100599aa:	0840      	lsrs	r0, r0, #1
100599ac:	4909      	ldr	r1, [pc, #36]	@ (100599d4 <__arm_cp.7_1>)
100599ae:	4001      	ands	r1, r0
100599b0:	1888      	adds	r0, r1, r2
100599b2:	0081      	lsls	r1, r0, #2
100599b4:	4a08      	ldr	r2, [pc, #32]	@ (100599d8 <__arm_cp.7_2>)
100599b6:	400a      	ands	r2, r1
100599b8:	0880      	lsrs	r0, r0, #2
100599ba:	4908      	ldr	r1, [pc, #32]	@ (100599dc <__arm_cp.7_3>)
100599bc:	4001      	ands	r1, r0
100599be:	1888      	adds	r0, r1, r2
100599c0:	0101      	lsls	r1, r0, #4
100599c2:	4a07      	ldr	r2, [pc, #28]	@ (100599e0 <__arm_cp.7_4>)
100599c4:	400a      	ands	r2, r1
100599c6:	0900      	lsrs	r0, r0, #4
100599c8:	4906      	ldr	r1, [pc, #24]	@ (100599e4 <__arm_cp.7_5>)
100599ca:	4001      	ands	r1, r0
100599cc:	1888      	adds	r0, r1, r2
100599ce:	4770      	bx	lr

100599d0 <__arm_cp.7_0>:
100599d0:	0001aaaa 	.word	0x0001aaaa

100599d4 <__arm_cp.7_1>:
100599d4:	00005555 	.word	0x00005555

100599d8 <__arm_cp.7_2>:
100599d8:	0007cccc 	.word	0x0007cccc

100599dc <__arm_cp.7_3>:
100599dc:	00003333 	.word	0x00003333

100599e0 <__arm_cp.7_4>:
100599e0:	0000f0f0 	.word	0x0000f0f0

100599e4 <__arm_cp.7_5>:
100599e4:	00000f0f 	.word	0x00000f0f

100599e8 <llc_wl_clear_filter_accept_list>:
100599e8:	b5b0      	push	{r4, r5, r7, lr}
100599ea:	2401      	movs	r4, #1
100599ec:	4620      	mov	r0, r4
100599ee:	f003 fe45 	bl	1005d67c <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>
100599f2:	4605      	mov	r5, r0
100599f4:	4620      	mov	r0, r4
100599f6:	f000 f875 	bl	10059ae4 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>
100599fa:	4328      	orrs	r0, r5
100599fc:	d10a      	bne.n	10059a14 <llc_wl_clear_filter_accept_list+0x2c>
100599fe:	4806      	ldr	r0, [pc, #24]	@ (10059a18 <__arm_cp.1_0>)
10059a00:	6800      	ldr	r0, [r0, #0]
10059a02:	219c      	movs	r1, #156	@ 0x9c
10059a04:	5840      	ldr	r0, [r0, r1]
10059a06:	300c      	adds	r0, #12
10059a08:	f009 f849 	bl	10062a9e <addr8_list_clear>
10059a0c:	f000 f85b 	bl	10059ac6 <llc_priv_clr_all_filter_accept_list_flags_in_resolving_list_ucfg_weak>
10059a10:	2000      	movs	r0, #0
10059a12:	bdb0      	pop	{r4, r5, r7, pc}
10059a14:	200c      	movs	r0, #12
10059a16:	bdb0      	pop	{r4, r5, r7, pc}

10059a18 <__arm_cp.1_0>:
10059a18:	200010f4 	.word	0x200010f4

10059a1c <llc_wl_add_device_to_filter_accept_list>:
10059a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
10059a1e:	b087      	sub	sp, #28
10059a20:	460c      	mov	r4, r1
10059a22:	4605      	mov	r5, r0
10059a24:	9106      	str	r1, [sp, #24]
10059a26:	9005      	str	r0, [sp, #20]
10059a28:	2601      	movs	r6, #1
10059a2a:	4630      	mov	r0, r6
10059a2c:	f003 fe26 	bl	1005d67c <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>
10059a30:	4607      	mov	r7, r0
10059a32:	4630      	mov	r0, r6
10059a34:	f000 f856 	bl	10059ae4 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>
10059a38:	4338      	orrs	r0, r7
10059a3a:	d11e      	bne.n	10059a7a <llc_wl_add_device_to_filter_accept_list+0x5e>
10059a3c:	b2e8      	uxtb	r0, r5
10059a3e:	28ff      	cmp	r0, #255	@ 0xff
10059a40:	d105      	bne.n	10059a4e <llc_wl_add_device_to_filter_accept_list+0x32>
10059a42:	9005      	str	r0, [sp, #20]
10059a44:	21ff      	movs	r1, #255	@ 0xff
10059a46:	0609      	lsls	r1, r1, #24
10059a48:	400c      	ands	r4, r1
10059a4a:	9406      	str	r4, [sp, #24]
10059a4c:	4605      	mov	r5, r0
10059a4e:	4811      	ldr	r0, [pc, #68]	@ (10059a94 <__arm_cp.2_0>)
10059a50:	6800      	ldr	r0, [r0, #0]
10059a52:	219c      	movs	r1, #156	@ 0x9c
10059a54:	5840      	ldr	r0, [r0, r1]
10059a56:	a903      	add	r1, sp, #12
10059a58:	9101      	str	r1, [sp, #4]
10059a5a:	a904      	add	r1, sp, #16
10059a5c:	9100      	str	r1, [sp, #0]
10059a5e:	300c      	adds	r0, #12
10059a60:	2600      	movs	r6, #0
10059a62:	4629      	mov	r1, r5
10059a64:	4622      	mov	r2, r4
10059a66:	4633      	mov	r3, r6
10059a68:	f008 ff9a 	bl	100629a0 <addr8_list_add>
10059a6c:	2800      	cmp	r0, #0
10059a6e:	d008      	beq.n	10059a82 <llc_wl_add_device_to_filter_accept_list+0x66>
10059a70:	a805      	add	r0, sp, #20
10059a72:	2101      	movs	r1, #1
10059a74:	f000 f826 	bl	10059ac4 <llc_priv_set_filter_accept_list_flag_in_resolving_list_ucfg_weak>
10059a78:	e000      	b.n	10059a7c <llc_wl_add_device_to_filter_accept_list+0x60>
10059a7a:	260c      	movs	r6, #12
10059a7c:	4630      	mov	r0, r6
10059a7e:	b007      	add	sp, #28
10059a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
10059a82:	a803      	add	r0, sp, #12
10059a84:	7800      	ldrb	r0, [r0, #0]
10059a86:	2800      	cmp	r0, #0
10059a88:	d001      	beq.n	10059a8e <llc_wl_add_device_to_filter_accept_list+0x72>
10059a8a:	2600      	movs	r6, #0
10059a8c:	e7f6      	b.n	10059a7c <llc_wl_add_device_to_filter_accept_list+0x60>
10059a8e:	2607      	movs	r6, #7
10059a90:	e7f4      	b.n	10059a7c <llc_wl_add_device_to_filter_accept_list+0x60>
10059a92:	46c0      	nop			@ (mov r8, r8)

10059a94 <__arm_cp.2_0>:
10059a94:	200010f4 	.word	0x200010f4

10059a98 <bis_csr_ucfg_weak>:
10059a98:	2000      	movs	r0, #0
10059a9a:	4770      	bx	lr

10059a9c <cis_csr_ucfg_weak>:
10059a9c:	2000      	movs	r0, #0
10059a9e:	4770      	bx	lr

10059aa0 <llc_isoal_mem_alloc_ucfg_weak>:
10059aa0:	4770      	bx	lr

10059aa2 <iso_rx_bn_pdu_event_int_cb_ucfg_weak>:
10059aa2:	2000      	movs	r0, #0
10059aa4:	4770      	bx	lr

10059aa6 <iso_terminate_event_int_cb_ucfg_weak>:
10059aa6:	2000      	movs	r0, #0
10059aa8:	4770      	bx	lr

10059aaa <iso_tx_bn_pdu_event_int_cb_ucfg_weak>:
10059aaa:	2000      	movs	r0, #0
10059aac:	4770      	bx	lr

10059aae <llc_iso_cmn_mem_alloc_ucfg_weak>:
10059aae:	4770      	bx	lr

10059ab0 <llc_padv_periodic_adv_sync_csr_ucfg_weak>:
10059ab0:	2000      	movs	r0, #0
10059ab2:	4770      	bx	lr

10059ab4 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>:
10059ab4:	2000      	movs	r0, #0
10059ab6:	4770      	bx	lr

10059ab8 <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>:
10059ab8:	4770      	bx	lr

10059aba <llc_priv_init_ucfg_weak>:
10059aba:	4770      	bx	lr

10059abc <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>:
10059abc:	4770      	bx	lr

10059abe <llc_priv_offline_rpa_resolution_ucfg_weak>:
10059abe:	4770      	bx	lr

10059ac0 <llc_priv_controller_privacy_csr_ucfg_weak>:
10059ac0:	2000      	movs	r0, #0
10059ac2:	4770      	bx	lr

10059ac4 <llc_priv_set_filter_accept_list_flag_in_resolving_list_ucfg_weak>:
10059ac4:	4770      	bx	lr

10059ac6 <llc_priv_clr_all_filter_accept_list_flags_in_resolving_list_ucfg_weak>:
10059ac6:	4770      	bx	lr

10059ac8 <llc_priv_start_privacy_timer_ucfg_weak>:
10059ac8:	4770      	bx	lr

10059aca <llc_priv_stop_privacy_timer_ucfg_weak>:
10059aca:	4770      	bx	lr

10059acc <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>:
10059acc:	4770      	bx	lr
	...

10059ad0 <llc_scan_get_cntxt_p>:
10059ad0:	4802      	ldr	r0, [pc, #8]	@ (10059adc <__arm_cp.0_0>)
10059ad2:	6800      	ldr	r0, [r0, #0]
10059ad4:	219c      	movs	r1, #156	@ 0x9c
10059ad6:	5840      	ldr	r0, [r0, r1]
10059ad8:	6840      	ldr	r0, [r0, #4]
10059ada:	4770      	bx	lr

10059adc <__arm_cp.0_0>:
10059adc:	200010f4 	.word	0x200010f4

10059ae0 <llc_scan_init_ucfg_weak>:
10059ae0:	4770      	bx	lr

10059ae2 <llc_scan_mem_allocate_ucfg_weak>:
10059ae2:	4770      	bx	lr

10059ae4 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>:
10059ae4:	b5b0      	push	{r4, r5, r7, lr}
10059ae6:	4605      	mov	r5, r0
10059ae8:	2400      	movs	r4, #0
10059aea:	f7fd fe0c 	bl	10057706 <scan_csr_ucfg_weak>
10059aee:	2801      	cmp	r0, #1
10059af0:	d10d      	bne.n	10059b0e <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
10059af2:	f7ff ffed 	bl	10059ad0 <llc_scan_get_cntxt_p>
10059af6:	21eb      	movs	r1, #235	@ 0xeb
10059af8:	5c41      	ldrb	r1, [r0, r1]
10059afa:	07c9      	lsls	r1, r1, #31
10059afc:	d007      	beq.n	10059b0e <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
10059afe:	2d00      	cmp	r5, #0
10059b00:	d004      	beq.n	10059b0c <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x28>
10059b02:	30ea      	adds	r0, #234	@ 0xea
10059b04:	7800      	ldrb	r0, [r0, #0]
10059b06:	2401      	movs	r4, #1
10059b08:	4004      	ands	r4, r0
10059b0a:	e000      	b.n	10059b0e <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
10059b0c:	2401      	movs	r4, #1
10059b0e:	4620      	mov	r0, r4
10059b10:	bdb0      	pop	{r4, r5, r7, pc}

10059b12 <llc_scan_stop_ucfg_weak>:
10059b12:	2000      	movs	r0, #0
10059b14:	4770      	bx	lr
	...

10059b18 <llc_subrate_init_acceptable>:
10059b18:	2100      	movs	r1, #0
10059b1a:	4a03      	ldr	r2, [pc, #12]	@ (10059b28 <__arm_cp.4_0>)
10059b1c:	62c1      	str	r1, [r0, #44]	@ 0x2c
10059b1e:	6302      	str	r2, [r0, #48]	@ 0x30
10059b20:	2119      	movs	r1, #25
10059b22:	01c9      	lsls	r1, r1, #7
10059b24:	8681      	strh	r1, [r0, #52]	@ 0x34
10059b26:	4770      	bx	lr

10059b28 <__arm_cp.4_0>:
10059b28:	00010001 	.word	0x00010001

10059b2c <llc_subrate_init_acceptable_per>:
10059b2c:	b580      	push	{r7, lr}
10059b2e:	4603      	mov	r3, r0
10059b30:	2049      	movs	r0, #73	@ 0x49
10059b32:	0080      	lsls	r0, r0, #2
10059b34:	1808      	adds	r0, r1, r0
10059b36:	332c      	adds	r3, #44	@ 0x2c
10059b38:	220a      	movs	r2, #10
10059b3a:	4619      	mov	r1, r3
10059b3c:	f7ec fa8a 	bl	10046054 <BLEPLAT_MemCpy>
10059b40:	bd80      	pop	{r7, pc}

10059b42 <llc_subrate_reset_params>:
10059b42:	2147      	movs	r1, #71	@ 0x47
10059b44:	0089      	lsls	r1, r1, #2
10059b46:	2200      	movs	r2, #0
10059b48:	5042      	str	r2, [r0, r1]
10059b4a:	1840      	adds	r0, r0, r1
10059b4c:	2101      	movs	r1, #1
10059b4e:	0409      	lsls	r1, r1, #16
10059b50:	6041      	str	r1, [r0, #4]
10059b52:	4770      	bx	lr

10059b54 <llc_subrate_new_sr_base_event_ucfg_weak>:
10059b54:	4770      	bx	lr

10059b56 <llc_subrate_update_cont_counter_ucfg_weak>:
10059b56:	4770      	bx	lr

10059b58 <llc_subrate_offline_processing_ucfg_weak>:
10059b58:	2000      	movs	r0, #0
10059b5a:	4770      	bx	lr

10059b5c <llc_convert_sca_to_ppm>:
10059b5c:	0740      	lsls	r0, r0, #29
10059b5e:	0f00      	lsrs	r0, r0, #28
10059b60:	4901      	ldr	r1, [pc, #4]	@ (10059b68 <__arm_cp.1_0>)
10059b62:	5a08      	ldrh	r0, [r1, r0]
10059b64:	4770      	bx	lr
10059b66:	46c0      	nop			@ (mov r8, r8)

10059b68 <__arm_cp.1_0>:
10059b68:	1006a040 	.word	0x1006a040

10059b6c <llc_convert_hci_phy_enum_to_hw_phy>:
10059b6c:	1e80      	subs	r0, r0, #2
10059b6e:	b2c0      	uxtb	r0, r0
10059b70:	2803      	cmp	r0, #3
10059b72:	d301      	bcc.n	10059b78 <llc_convert_hci_phy_enum_to_hw_phy+0xc>
10059b74:	2000      	movs	r0, #0
10059b76:	e002      	b.n	10059b7e <llc_convert_hci_phy_enum_to_hw_phy+0x12>
10059b78:	00c1      	lsls	r1, r0, #3
10059b7a:	4802      	ldr	r0, [pc, #8]	@ (10059b84 <__arm_cp.4_0>)
10059b7c:	40c8      	lsrs	r0, r1
10059b7e:	b2c0      	uxtb	r0, r0
10059b80:	4770      	bx	lr
10059b82:	46c0      	nop			@ (mov r8, r8)

10059b84 <__arm_cp.4_0>:
10059b84:	00060401 	.word	0x00060401

10059b88 <ll_cpe_get_cpid_from_opcode>:
10059b88:	282a      	cmp	r0, #42	@ 0x2a
10059b8a:	d804      	bhi.n	10059b96 <ll_cpe_get_cpid_from_opcode+0xe>
10059b8c:	2103      	movs	r1, #3
10059b8e:	4341      	muls	r1, r0
10059b90:	4802      	ldr	r0, [pc, #8]	@ (10059b9c <__arm_cp.0_0>)
10059b92:	5c40      	ldrb	r0, [r0, r1]
10059b94:	4770      	bx	lr
10059b96:	2016      	movs	r0, #22
10059b98:	4770      	bx	lr
10059b9a:	46c0      	nop			@ (mov r8, r8)

10059b9c <__arm_cp.0_0>:
10059b9c:	1006a050 	.word	0x1006a050

10059ba0 <ll_cpe_set_unknown_rsp_pending>:
10059ba0:	b5b0      	push	{r4, r5, r7, lr}
10059ba2:	4604      	mov	r4, r0
10059ba4:	f7fe fa80 	bl	100580a8 <llc_conn_get_cntxt_per_p>
10059ba8:	2100      	movs	r1, #0
10059baa:	f7fe fd13 	bl	100585d4 <llc_conn_get_ctrl_pdu_data_p>
10059bae:	4605      	mov	r5, r0
10059bb0:	4620      	mov	r0, r4
10059bb2:	f000 f80d 	bl	10059bd0 <LL_cpe_get_ctrl_flds_common_p>
10059bb6:	8801      	ldrh	r1, [r0, #0]
10059bb8:	4a04      	ldr	r2, [pc, #16]	@ (10059bcc <__arm_cp.1_0>)
10059bba:	400a      	ands	r2, r1
10059bbc:	8869      	ldrh	r1, [r5, #2]
10059bbe:	0609      	lsls	r1, r1, #24
10059bc0:	0cc9      	lsrs	r1, r1, #19
10059bc2:	1889      	adds	r1, r1, r2
10059bc4:	3110      	adds	r1, #16
10059bc6:	8001      	strh	r1, [r0, #0]
10059bc8:	bdb0      	pop	{r4, r5, r7, pc}
10059bca:	46c0      	nop			@ (mov r8, r8)

10059bcc <__arm_cp.1_0>:
10059bcc:	0000e00f 	.word	0x0000e00f

10059bd0 <LL_cpe_get_ctrl_flds_common_p>:
10059bd0:	b580      	push	{r7, lr}
10059bd2:	f7fe fa69 	bl	100580a8 <llc_conn_get_cntxt_per_p>
10059bd6:	30b0      	adds	r0, #176	@ 0xb0
10059bd8:	bd80      	pop	{r7, pc}

10059bda <LL_cpe_register_cpf>:
10059bda:	b5b0      	push	{r4, r5, r7, lr}
10059bdc:	460c      	mov	r4, r1
10059bde:	0085      	lsls	r5, r0, #2
10059be0:	f7fe fa58 	bl	10058094 <llc_conn_get_cntxt_p>
10059be4:	6880      	ldr	r0, [r0, #8]
10059be6:	5144      	str	r4, [r0, r5]
10059be8:	bdb0      	pop	{r4, r5, r7, pc}

10059bea <LL_cpe_get_active_status>:
10059bea:	b580      	push	{r7, lr}
10059bec:	f000 f804 	bl	10059bf8 <ll_cpe_get_ctrl_flds_per_sm_p>
10059bf0:	7801      	ldrb	r1, [r0, #0]
10059bf2:	2001      	movs	r0, #1
10059bf4:	4008      	ands	r0, r1
10059bf6:	bd80      	pop	{r7, pc}

10059bf8 <ll_cpe_get_ctrl_flds_per_sm_p>:
10059bf8:	b510      	push	{r4, lr}
10059bfa:	460c      	mov	r4, r1
10059bfc:	f7fe fa54 	bl	100580a8 <llc_conn_get_cntxt_per_p>
10059c00:	1900      	adds	r0, r0, r4
10059c02:	30a8      	adds	r0, #168	@ 0xa8
10059c04:	bd10      	pop	{r4, pc}

10059c06 <LL_cpe_set_active>:
10059c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10059c08:	461c      	mov	r4, r3
10059c0a:	4615      	mov	r5, r2
10059c0c:	460e      	mov	r6, r1
10059c0e:	4607      	mov	r7, r0
10059c10:	f7fe fa4a 	bl	100580a8 <llc_conn_get_cntxt_per_p>
10059c14:	1980      	adds	r0, r0, r6
10059c16:	21ac      	movs	r1, #172	@ 0xac
10059c18:	5445      	strb	r5, [r0, r1]
10059c1a:	4638      	mov	r0, r7
10059c1c:	4631      	mov	r1, r6
10059c1e:	f7ff ffeb 	bl	10059bf8 <ll_cpe_get_ctrl_flds_per_sm_p>
10059c22:	7801      	ldrb	r1, [r0, #0]
10059c24:	22de      	movs	r2, #222	@ 0xde
10059c26:	400a      	ands	r2, r1
10059c28:	07e1      	lsls	r1, r4, #31
10059c2a:	0e89      	lsrs	r1, r1, #26
10059c2c:	1889      	adds	r1, r1, r2
10059c2e:	1c49      	adds	r1, r1, #1
10059c30:	7001      	strb	r1, [r0, #0]
10059c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10059c34 <LL_cpe_clr_active>:
10059c34:	b570      	push	{r4, r5, r6, lr}
10059c36:	4616      	mov	r6, r2
10059c38:	460d      	mov	r5, r1
10059c3a:	4604      	mov	r4, r0
10059c3c:	f000 f814 	bl	10059c68 <ll_cpe_get_cpid_from_sm>
10059c40:	42b0      	cmp	r0, r6
10059c42:	d110      	bne.n	10059c66 <LL_cpe_clr_active+0x32>
10059c44:	4620      	mov	r0, r4
10059c46:	4629      	mov	r1, r5
10059c48:	f7ff ffd6 	bl	10059bf8 <ll_cpe_get_ctrl_flds_per_sm_p>
10059c4c:	2100      	movs	r1, #0
10059c4e:	7001      	strb	r1, [r0, #0]
10059c50:	2d01      	cmp	r5, #1
10059c52:	d001      	beq.n	10059c58 <LL_cpe_clr_active+0x24>
10059c54:	256c      	movs	r5, #108	@ 0x6c
10059c56:	e000      	b.n	10059c5a <LL_cpe_clr_active+0x26>
10059c58:	2570      	movs	r5, #112	@ 0x70
10059c5a:	4620      	mov	r0, r4
10059c5c:	f7fe fa24 	bl	100580a8 <llc_conn_get_cntxt_per_p>
10059c60:	217d      	movs	r1, #125	@ 0x7d
10059c62:	0449      	lsls	r1, r1, #17
10059c64:	5141      	str	r1, [r0, r5]
10059c66:	bd70      	pop	{r4, r5, r6, pc}

10059c68 <ll_cpe_get_cpid_from_sm>:
10059c68:	b510      	push	{r4, lr}
10059c6a:	460c      	mov	r4, r1
10059c6c:	f7fe fa1c 	bl	100580a8 <llc_conn_get_cntxt_per_p>
10059c70:	1900      	adds	r0, r0, r4
10059c72:	21ac      	movs	r1, #172	@ 0xac
10059c74:	5c40      	ldrb	r0, [r0, r1]
10059c76:	bd10      	pop	{r4, pc}

10059c78 <LL_cpe_set_blocked>:
10059c78:	b510      	push	{r4, lr}
10059c7a:	4614      	mov	r4, r2
10059c7c:	f7ff ffbc 	bl	10059bf8 <ll_cpe_get_ctrl_flds_per_sm_p>
10059c80:	2c02      	cmp	r4, #2
10059c82:	d805      	bhi.n	10059c90 <LL_cpe_set_blocked+0x18>
10059c84:	00e1      	lsls	r1, r4, #3
10059c86:	4a03      	ldr	r2, [pc, #12]	@ (10059c94 <__arm_cp.9_0>)
10059c88:	40ca      	lsrs	r2, r1
10059c8a:	7801      	ldrb	r1, [r0, #0]
10059c8c:	4311      	orrs	r1, r2
10059c8e:	7001      	strb	r1, [r0, #0]
10059c90:	bd10      	pop	{r4, pc}
10059c92:	46c0      	nop			@ (mov r8, r8)

10059c94 <__arm_cp.9_0>:
10059c94:	00080402 	.word	0x00080402

10059c98 <LL_cpe_set_prepare_tx_pdu>:
10059c98:	b580      	push	{r7, lr}
10059c9a:	f7ff ffad 	bl	10059bf8 <ll_cpe_get_ctrl_flds_per_sm_p>
10059c9e:	7801      	ldrb	r1, [r0, #0]
10059ca0:	2210      	movs	r2, #16
10059ca2:	430a      	orrs	r2, r1
10059ca4:	7002      	strb	r2, [r0, #0]
10059ca6:	2015      	movs	r0, #21
10059ca8:	f008 fc06 	bl	100624b8 <tsk_notify_idx>
10059cac:	f7e9 ff35 	bl	10043b1a <BLE_STACK_ProcessRequest>
10059cb0:	bd80      	pop	{r7, pc}

10059cb2 <LL_cpe_get_cntxt>:
10059cb2:	b510      	push	{r4, lr}
10059cb4:	460c      	mov	r4, r1
10059cb6:	f7fe f9f7 	bl	100580a8 <llc_conn_get_cntxt_per_p>
10059cba:	00a1      	lsls	r1, r4, #2
10059cbc:	1840      	adds	r0, r0, r1
10059cbe:	21a0      	movs	r1, #160	@ 0xa0
10059cc0:	5840      	ldr	r0, [r0, r1]
10059cc2:	bd10      	pop	{r4, pc}

10059cc4 <LL_cpe_set_tx_with_instant>:
10059cc4:	b5b0      	push	{r4, r5, r7, lr}
10059cc6:	4604      	mov	r4, r0
10059cc8:	f7ff ff96 	bl	10059bf8 <ll_cpe_get_ctrl_flds_per_sm_p>
10059ccc:	4605      	mov	r5, r0
10059cce:	4620      	mov	r0, r4
10059cd0:	f7fe f9ea 	bl	100580a8 <llc_conn_get_cntxt_per_p>
10059cd4:	7829      	ldrb	r1, [r5, #0]
10059cd6:	2240      	movs	r2, #64	@ 0x40
10059cd8:	430a      	orrs	r2, r1
10059cda:	702a      	strb	r2, [r5, #0]
10059cdc:	f7fe ff3b 	bl	10058b56 <llc_conn_set_tx_ctrl_pdu_has_instant>
10059ce0:	bdb0      	pop	{r4, r5, r7, pc}

10059ce2 <LL_cpe_set_rx_with_instant>:
10059ce2:	b5b0      	push	{r4, r5, r7, lr}
10059ce4:	4604      	mov	r4, r0
10059ce6:	f7ff ff87 	bl	10059bf8 <ll_cpe_get_ctrl_flds_per_sm_p>
10059cea:	4605      	mov	r5, r0
10059cec:	4620      	mov	r0, r4
10059cee:	f7fe f9db 	bl	100580a8 <llc_conn_get_cntxt_per_p>
10059cf2:	7829      	ldrb	r1, [r5, #0]
10059cf4:	2240      	movs	r2, #64	@ 0x40
10059cf6:	430a      	orrs	r2, r1
10059cf8:	702a      	strb	r2, [r5, #0]
10059cfa:	219a      	movs	r1, #154	@ 0x9a
10059cfc:	5a42      	ldrh	r2, [r0, r1]
10059cfe:	2301      	movs	r3, #1
10059d00:	4313      	orrs	r3, r2
10059d02:	5243      	strh	r3, [r0, r1]
10059d04:	bdb0      	pop	{r4, r5, r7, pc}
	...

10059d08 <LL_cpe_engine>:
10059d08:	b5f0      	push	{r4, r5, r6, r7, lr}
10059d0a:	b08d      	sub	sp, #52	@ 0x34
10059d0c:	4604      	mov	r4, r0
10059d0e:	a80c      	add	r0, sp, #48	@ 0x30
10059d10:	2700      	movs	r7, #0
10059d12:	8007      	strh	r7, [r0, #0]
10059d14:	4620      	mov	r0, r4
10059d16:	f7fe f9c7 	bl	100580a8 <llc_conn_get_cntxt_per_p>
10059d1a:	21ff      	movs	r1, #255	@ 0xff
10059d1c:	3112      	adds	r1, #18
10059d1e:	900b      	str	r0, [sp, #44]	@ 0x2c
10059d20:	5c40      	ldrb	r0, [r0, r1]
10059d22:	2800      	cmp	r0, #0
10059d24:	9406      	str	r4, [sp, #24]
10059d26:	d100      	bne.n	10059d2a <LL_cpe_engine+0x22>
10059d28:	e083      	b.n	10059e32 <LL_cpe_engine+0x12a>
10059d2a:	4620      	mov	r0, r4
10059d2c:	f000 fbc6 	bl	1005a4bc <ll_cpe_set_active>
10059d30:	4620      	mov	r0, r4
10059d32:	f7ff ff4d 	bl	10059bd0 <LL_cpe_get_ctrl_flds_common_p>
10059d36:	4606      	mov	r6, r0
10059d38:	4620      	mov	r0, r4
10059d3a:	f7fe f9b5 	bl	100580a8 <llc_conn_get_cntxt_per_p>
10059d3e:	4604      	mov	r4, r0
10059d40:	8835      	ldrh	r5, [r6, #0]
10059d42:	f7fe fc74 	bl	1005862e <llc_conn_get_tx_ctrl_pdu_state>
10059d46:	0729      	lsls	r1, r5, #28
10059d48:	d509      	bpl.n	10059d5e <LL_cpe_engine+0x56>
10059d4a:	2803      	cmp	r0, #3
10059d4c:	d107      	bne.n	10059d5e <LL_cpe_engine+0x56>
10059d4e:	2100      	movs	r1, #0
10059d50:	4620      	mov	r0, r4
10059d52:	f7fe ff07 	bl	10058b64 <llc_conn_set_tx_ctrl_pdu_state>
10059d56:	8830      	ldrh	r0, [r6, #0]
10059d58:	2108      	movs	r1, #8
10059d5a:	4388      	bics	r0, r1
10059d5c:	8030      	strh	r0, [r6, #0]
10059d5e:	9806      	ldr	r0, [sp, #24]
10059d60:	f000 fbb4 	bl	1005a4cc <ll_cpe_check_rx_pdu_can_be_processed>
10059d64:	2800      	cmp	r0, #0
10059d66:	d100      	bne.n	10059d6a <LL_cpe_engine+0x62>
10059d68:	e132      	b.n	10059fd0 <LL_cpe_engine+0x2c8>
10059d6a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10059d6c:	4606      	mov	r6, r0
10059d6e:	362c      	adds	r6, #44	@ 0x2c
10059d70:	4639      	mov	r1, r7
10059d72:	f7fe fc2f 	bl	100585d4 <llc_conn_get_ctrl_pdu_data_p>
10059d76:	7885      	ldrb	r5, [r0, #2]
10059d78:	9005      	str	r0, [sp, #20]
10059d7a:	7840      	ldrb	r0, [r0, #1]
10059d7c:	9008      	str	r0, [sp, #32]
10059d7e:	2101      	movs	r1, #1
10059d80:	9c06      	ldr	r4, [sp, #24]
10059d82:	4620      	mov	r0, r4
10059d84:	9104      	str	r1, [sp, #16]
10059d86:	463a      	mov	r2, r7
10059d88:	f000 fbb1 	bl	1005a4ee <ll_cpe_get_blocked_status>
10059d8c:	9009      	str	r0, [sp, #36]	@ 0x24
10059d8e:	4620      	mov	r0, r4
10059d90:	4639      	mov	r1, r7
10059d92:	463a      	mov	r2, r7
10059d94:	f000 fbab 	bl	1005a4ee <ll_cpe_get_blocked_status>
10059d98:	4603      	mov	r3, r0
10059d9a:	9607      	str	r6, [sp, #28]
10059d9c:	7830      	ldrb	r0, [r6, #0]
10059d9e:	1e84      	subs	r4, r0, #2
10059da0:	1e61      	subs	r1, r4, #1
10059da2:	4620      	mov	r0, r4
10059da4:	4188      	sbcs	r0, r1
10059da6:	950a      	str	r5, [sp, #40]	@ 0x28
10059da8:	2d2a      	cmp	r5, #42	@ 0x2a
10059daa:	d900      	bls.n	10059dae <LL_cpe_engine+0xa6>
10059dac:	e068      	b.n	10059e80 <LL_cpe_engine+0x178>
10059dae:	2103      	movs	r1, #3
10059db0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10059db2:	4351      	muls	r1, r2
10059db4:	4aa3      	ldr	r2, [pc, #652]	@ (1005a044 <__arm_cp.14_7>)
10059db6:	1851      	adds	r1, r2, r1
10059db8:	7849      	ldrb	r1, [r1, #1]
10059dba:	9a08      	ldr	r2, [sp, #32]
10059dbc:	4291      	cmp	r1, r2
10059dbe:	d000      	beq.n	10059dc2 <LL_cpe_engine+0xba>
10059dc0:	e05e      	b.n	10059e80 <LL_cpe_engine+0x178>
10059dc2:	990a      	ldr	r1, [sp, #40]	@ 0x28
10059dc4:	292a      	cmp	r1, #42	@ 0x2a
10059dc6:	d900      	bls.n	10059dca <LL_cpe_engine+0xc2>
10059dc8:	e05a      	b.n	10059e80 <LL_cpe_engine+0x178>
10059dca:	990a      	ldr	r1, [sp, #40]	@ 0x28
10059dcc:	0049      	lsls	r1, r1, #1
10059dce:	46c0      	nop			@ (mov r8, r8)
10059dd0:	4479      	add	r1, pc
10059dd2:	8889      	ldrh	r1, [r1, #4]
10059dd4:	0049      	lsls	r1, r1, #1
10059dd6:	448f      	add	pc, r1
10059dd8:	00540054 	.word	0x00540054
10059ddc:	0054002a 	.word	0x0054002a
10059de0:	03120312 	.word	0x03120312
10059de4:	002a002a 	.word	0x002a002a
10059de8:	002a0054 	.word	0x002a0054
10059dec:	002a0054 	.word	0x002a0054
10059df0:	002a002a 	.word	0x002a002a
10059df4:	00530312 	.word	0x00530312
10059df8:	002a0053 	.word	0x002a0053
10059dfc:	002a002a 	.word	0x002a002a
10059e00:	03190319 	.word	0x03190319
10059e04:	03640325 	.word	0x03640325
10059e08:	00530329 	.word	0x00530329
10059e0c:	031d031d 	.word	0x031d031d
10059e10:	002a032d 	.word	0x002a032d
10059e14:	0321002a 	.word	0x0321002a
10059e18:	03210331 	.word	0x03210331
10059e1c:	03150337 	.word	0x03150337
10059e20:	03150315 	.word	0x03150315
10059e24:	0341033b 	.word	0x0341033b
10059e28:	03500345 	.word	0x03500345
10059e2c:	0356      	.short	0x0356
10059e2e:	9804      	ldr	r0, [sp, #16]
10059e30:	e027      	b.n	10059e82 <LL_cpe_engine+0x17a>
10059e32:	4620      	mov	r0, r4
10059e34:	f7fe f938 	bl	100580a8 <llc_conn_get_cntxt_per_p>
10059e38:	4605      	mov	r5, r0
10059e3a:	202d      	movs	r0, #45	@ 0x2d
10059e3c:	5c28      	ldrb	r0, [r5, r0]
10059e3e:	2800      	cmp	r0, #0
10059e40:	d100      	bne.n	10059e44 <LL_cpe_engine+0x13c>
10059e42:	e09f      	b.n	10059f84 <LL_cpe_engine+0x27c>
10059e44:	900a      	str	r0, [sp, #40]	@ 0x28
10059e46:	462f      	mov	r7, r5
10059e48:	372c      	adds	r7, #44	@ 0x2c
10059e4a:	462e      	mov	r6, r5
10059e4c:	36d8      	adds	r6, #216	@ 0xd8
10059e4e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
10059e50:	463c      	mov	r4, r7
10059e52:	3454      	adds	r4, #84	@ 0x54
10059e54:	7d79      	ldrb	r1, [r7, #21]
10059e56:	910b      	str	r1, [sp, #44]	@ 0x2c
10059e58:	2800      	cmp	r0, #0
10059e5a:	d001      	beq.n	10059e60 <LL_cpe_engine+0x158>
10059e5c:	f7f8 fdf6 	bl	10052a4c <Acl_Tx_Cmpl_Pkt_Handler>
10059e60:	4620      	mov	r0, r4
10059e62:	f008 fd1b 	bl	1006289c <ACL_list_init>
10059e66:	ce03      	ldmia	r6!, {r0, r1}
10059e68:	f7fe fc5c 	bl	10058724 <llc_conn_list_remove_address>
10059e6c:	4876      	ldr	r0, [pc, #472]	@ (1005a048 <__arm_cp.14_8>)
10059e6e:	6800      	ldr	r0, [r0, #0]
10059e70:	212c      	movs	r1, #44	@ 0x2c
10059e72:	5c40      	ldrb	r0, [r0, r1]
10059e74:	07c0      	lsls	r0, r0, #31
10059e76:	0ec1      	lsrs	r1, r0, #27
10059e78:	8f6c      	ldrh	r4, [r5, #58]	@ 0x3a
10059e7a:	d149      	bne.n	10059f10 <LL_cpe_engine+0x208>
10059e7c:	2205      	movs	r2, #5
10059e7e:	e04e      	b.n	10059f1e <LL_cpe_engine+0x216>
10059e80:	4638      	mov	r0, r7
10059e82:	9909      	ldr	r1, [sp, #36]	@ 0x24
10059e84:	4319      	orrs	r1, r3
10059e86:	d000      	beq.n	10059e8a <LL_cpe_engine+0x182>
10059e88:	e0a2      	b.n	10059fd0 <LL_cpe_engine+0x2c8>
10059e8a:	2800      	cmp	r0, #0
10059e8c:	d100      	bne.n	10059e90 <LL_cpe_engine+0x188>
10059e8e:	e080      	b.n	10059f92 <LL_cpe_engine+0x28a>
10059e90:	9805      	ldr	r0, [sp, #20]
10059e92:	78c6      	ldrb	r6, [r0, #3]
10059e94:	2401      	movs	r4, #1
10059e96:	9f06      	ldr	r7, [sp, #24]
10059e98:	4638      	mov	r0, r7
10059e9a:	4621      	mov	r1, r4
10059e9c:	f000 fb40 	bl	1005a520 <ll_cpe_get_expected_opcode>
10059ea0:	9005      	str	r0, [sp, #20]
10059ea2:	4638      	mov	r0, r7
10059ea4:	4621      	mov	r1, r4
10059ea6:	f000 fb43 	bl	1005a530 <ll_cpe_get_state>
10059eaa:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
10059eac:	9004      	str	r0, [sp, #16]
10059eae:	4628      	mov	r0, r5
10059eb0:	9603      	str	r6, [sp, #12]
10059eb2:	4631      	mov	r1, r6
10059eb4:	463a      	mov	r2, r7
10059eb6:	9409      	str	r4, [sp, #36]	@ 0x24
10059eb8:	4623      	mov	r3, r4
10059eba:	f000 fb41 	bl	1005a540 <LL_cpe_rxctrlpdu_checkreject>
10059ebe:	1e41      	subs	r1, r0, #1
10059ec0:	4188      	sbcs	r0, r1
10059ec2:	9905      	ldr	r1, [sp, #20]
10059ec4:	1b49      	subs	r1, r1, r5
10059ec6:	424a      	negs	r2, r1
10059ec8:	414a      	adcs	r2, r1
10059eca:	4302      	orrs	r2, r0
10059ecc:	9804      	ldr	r0, [sp, #16]
10059ece:	1f00      	subs	r0, r0, #4
10059ed0:	4245      	negs	r5, r0
10059ed2:	4145      	adcs	r5, r0
10059ed4:	4015      	ands	r5, r2
10059ed6:	2400      	movs	r4, #0
10059ed8:	4638      	mov	r0, r7
10059eda:	4621      	mov	r1, r4
10059edc:	f000 fb20 	bl	1005a520 <ll_cpe_get_expected_opcode>
10059ee0:	4606      	mov	r6, r0
10059ee2:	9807      	ldr	r0, [sp, #28]
10059ee4:	7800      	ldrb	r0, [r0, #0]
10059ee6:	9007      	str	r0, [sp, #28]
10059ee8:	4638      	mov	r0, r7
10059eea:	4621      	mov	r1, r4
10059eec:	f000 fb20 	bl	1005a530 <ll_cpe_get_state>
10059ef0:	4607      	mov	r7, r0
10059ef2:	2801      	cmp	r0, #1
10059ef4:	d151      	bne.n	10059f9a <LL_cpe_engine+0x292>
10059ef6:	9807      	ldr	r0, [sp, #28]
10059ef8:	1e81      	subs	r1, r0, #2
10059efa:	1e48      	subs	r0, r1, #1
10059efc:	4181      	sbcs	r1, r0
10059efe:	980a      	ldr	r0, [sp, #40]	@ 0x28
10059f00:	4604      	mov	r4, r0
10059f02:	9a08      	ldr	r2, [sp, #32]
10059f04:	f000 fb44 	bl	1005a590 <valid_first_opcode>
10059f08:	2800      	cmp	r0, #0
10059f0a:	d047      	beq.n	10059f9c <LL_cpe_engine+0x294>
10059f0c:	2501      	movs	r5, #1
10059f0e:	e045      	b.n	10059f9c <LL_cpe_engine+0x294>
10059f10:	484e      	ldr	r0, [pc, #312]	@ (1005a04c <__arm_cp.14_9>)
10059f12:	6800      	ldr	r0, [r0, #0]
10059f14:	2236      	movs	r2, #54	@ 0x36
10059f16:	5c80      	ldrb	r0, [r0, r2]
10059f18:	06c0      	lsls	r0, r0, #27
10059f1a:	d51d      	bpl.n	10059f58 <LL_cpe_engine+0x250>
10059f1c:	2215      	movs	r2, #21
10059f1e:	206f      	movs	r0, #111	@ 0x6f
10059f20:	43c0      	mvns	r0, r0
10059f22:	4041      	eors	r1, r0
10059f24:	484a      	ldr	r0, [pc, #296]	@ (1005a050 <__arm_cp.14_10>)
10059f26:	6800      	ldr	r0, [r0, #0]
10059f28:	6900      	ldr	r0, [r0, #16]
10059f2a:	b2ce      	uxtb	r6, r1
10059f2c:	2302      	movs	r3, #2
10059f2e:	4631      	mov	r1, r6
10059f30:	f7f9 f802 	bl	10052f38 <aci_event_fifo_push_header>
10059f34:	2800      	cmp	r0, #0
10059f36:	d00f      	beq.n	10059f58 <LL_cpe_engine+0x250>
10059f38:	4601      	mov	r1, r0
10059f3a:	7204      	strb	r4, [r0, #8]
10059f3c:	980a      	ldr	r0, [sp, #40]	@ 0x28
10059f3e:	7288      	strb	r0, [r1, #10]
10059f40:	2000      	movs	r0, #0
10059f42:	71c8      	strb	r0, [r1, #7]
10059f44:	2004      	movs	r0, #4
10059f46:	7188      	strb	r0, [r1, #6]
10059f48:	2205      	movs	r2, #5
10059f4a:	714a      	strb	r2, [r1, #5]
10059f4c:	7108      	strb	r0, [r1, #4]
10059f4e:	0a20      	lsrs	r0, r4, #8
10059f50:	7248      	strb	r0, [r1, #9]
10059f52:	4630      	mov	r0, r6
10059f54:	f7f9 f88d 	bl	10053072 <aci_event_fifo_push>
10059f58:	4628      	mov	r0, r5
10059f5a:	f002 faad 	bl	1005c4b8 <LLC_authenticated_payload_timeout_reset>
10059f5e:	9c06      	ldr	r4, [sp, #24]
10059f60:	4620      	mov	r0, r4
10059f62:	f000 fc1d 	bl	1005a7a0 <ll_cpe_reset_state_machines>
10059f66:	4620      	mov	r0, r4
10059f68:	f7fe f96e 	bl	10058248 <llc_conn_per_init>
10059f6c:	4620      	mov	r0, r4
10059f6e:	f002 fafa 	bl	1005c566 <LL_past_initialize_connect_context_ucfg_weak>
10059f72:	4620      	mov	r0, r4
10059f74:	f00c f94c 	bl	10066210 <llc_pscan_wr_check_pawr_active_ucfg_weak>
10059f78:	2800      	cmp	r0, #0
10059f7a:	d003      	beq.n	10059f84 <LL_cpe_engine+0x27c>
10059f7c:	2001      	movs	r0, #1
10059f7e:	7038      	strb	r0, [r7, #0]
10059f80:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10059f82:	7578      	strb	r0, [r7, #21]
10059f84:	a80c      	add	r0, sp, #48	@ 0x30
10059f86:	7841      	ldrb	r1, [r0, #1]
10059f88:	2902      	cmp	r1, #2
10059f8a:	d000      	beq.n	10059f8e <LL_cpe_engine+0x286>
10059f8c:	e232      	b.n	1005a3f4 <__arm_cp.14_10+0x3a4>
10059f8e:	2001      	movs	r0, #1
10059f90:	e233      	b.n	1005a3fa <__arm_cp.14_10+0x3aa>
10059f92:	9806      	ldr	r0, [sp, #24]
10059f94:	f7ff fe04 	bl	10059ba0 <ll_cpe_set_unknown_rsp_pending>
10059f98:	e017      	b.n	10059fca <LL_cpe_engine+0x2c2>
10059f9a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
10059f9c:	9903      	ldr	r1, [sp, #12]
10059f9e:	2204      	movs	r2, #4
10059fa0:	407a      	eors	r2, r7
10059fa2:	4620      	mov	r0, r4
10059fa4:	4066      	eors	r6, r4
10059fa6:	4316      	orrs	r6, r2
10059fa8:	4274      	negs	r4, r6
10059faa:	4174      	adcs	r4, r6
10059fac:	2f04      	cmp	r7, #4
10059fae:	9e09      	ldr	r6, [sp, #36]	@ 0x24
10059fb0:	d000      	beq.n	10059fb4 <LL_cpe_engine+0x2ac>
10059fb2:	4626      	mov	r6, r4
10059fb4:	2300      	movs	r3, #0
10059fb6:	9a06      	ldr	r2, [sp, #24]
10059fb8:	f000 fac2 	bl	1005a540 <LL_cpe_rxctrlpdu_checkreject>
10059fbc:	2800      	cmp	r0, #0
10059fbe:	d100      	bne.n	10059fc2 <LL_cpe_engine+0x2ba>
10059fc0:	4626      	mov	r6, r4
10059fc2:	2e01      	cmp	r6, #1
10059fc4:	d004      	beq.n	10059fd0 <LL_cpe_engine+0x2c8>
10059fc6:	2d00      	cmp	r5, #0
10059fc8:	d102      	bne.n	10059fd0 <LL_cpe_engine+0x2c8>
10059fca:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10059fcc:	f7fe fa48 	bl	10058460 <llc_conn_clr_rx_ctrl_pdu_full>
10059fd0:	2000      	movs	r0, #0
10059fd2:	9005      	str	r0, [sp, #20]
10059fd4:	43c0      	mvns	r0, r0
10059fd6:	9f06      	ldr	r7, [sp, #24]
10059fd8:	2801      	cmp	r0, #1
10059fda:	d100      	bne.n	10059fde <LL_cpe_engine+0x2d6>
10059fdc:	e1ff      	b.n	1005a3de <__arm_cp.14_10+0x38e>
10059fde:	900a      	str	r0, [sp, #40]	@ 0x28
10059fe0:	1c40      	adds	r0, r0, #1
10059fe2:	900b      	str	r0, [sp, #44]	@ 0x2c
10059fe4:	4638      	mov	r0, r7
10059fe6:	f000 fc5c 	bl	1005a8a2 <ll_cpe_get_active>
10059fea:	2800      	cmp	r0, #0
10059fec:	d017      	beq.n	1005a01e <LL_cpe_engine+0x316>
10059fee:	4638      	mov	r0, r7
10059ff0:	f7ff fdee 	bl	10059bd0 <LL_cpe_get_ctrl_flds_common_p>
10059ff4:	4605      	mov	r5, r0
10059ff6:	8800      	ldrh	r0, [r0, #0]
10059ff8:	0780      	lsls	r0, r0, #30
10059ffa:	d500      	bpl.n	10059ffe <LL_cpe_engine+0x2f6>
10059ffc:	e1ed      	b.n	1005a3da <__arm_cp.14_10+0x38a>
10059ffe:	4638      	mov	r0, r7
1005a000:	f7fe f852 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005a004:	24b2      	movs	r4, #178	@ 0xb2
1005a006:	5d06      	ldrb	r6, [r0, r4]
1005a008:	2e00      	cmp	r6, #0
1005a00a:	d008      	beq.n	1005a01e <LL_cpe_engine+0x316>
1005a00c:	4638      	mov	r0, r7
1005a00e:	f7fe f84b 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005a012:	9009      	str	r0, [sp, #36]	@ 0x24
1005a014:	f7fe fb0b 	bl	1005862e <llc_conn_get_tx_ctrl_pdu_state>
1005a018:	2800      	cmp	r0, #0
1005a01a:	d100      	bne.n	1005a01e <LL_cpe_engine+0x316>
1005a01c:	e0e1      	b.n	1005a1e2 <__arm_cp.14_10+0x192>
1005a01e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005a020:	b2c6      	uxtb	r6, r0
1005a022:	4638      	mov	r0, r7
1005a024:	4631      	mov	r1, r6
1005a026:	f000 fa83 	bl	1005a530 <ll_cpe_get_state>
1005a02a:	4605      	mov	r5, r0
1005a02c:	2805      	cmp	r0, #5
1005a02e:	9608      	str	r6, [sp, #32]
1005a030:	9009      	str	r0, [sp, #36]	@ 0x24
1005a032:	d816      	bhi.n	1005a062 <__arm_cp.14_10+0x12>
1005a034:	447d      	add	r5, pc
1005a036:	792d      	ldrb	r5, [r5, #4]
1005a038:	006d      	lsls	r5, r5, #1
1005a03a:	44af      	add	pc, r5
1005a03c:	6544140b 	.word	0x6544140b
1005a040:	46c0b799 	.word	0x46c0b799

1005a044 <__arm_cp.14_7>:
1005a044:	1006a050 	.word	0x1006a050

1005a048 <__arm_cp.14_8>:
1005a048:	200010a0 	.word	0x200010a0

1005a04c <__arm_cp.14_9>:
1005a04c:	200010f4 	.word	0x200010f4

1005a050 <__arm_cp.14_10>:
1005a050:	200010a4 	.word	0x200010a4
1005a054:	4638      	mov	r0, r7
1005a056:	f000 fc24 	bl	1005a8a2 <ll_cpe_get_active>
1005a05a:	4604      	mov	r4, r0
1005a05c:	1e40      	subs	r0, r0, #1
1005a05e:	4184      	sbcs	r4, r0
1005a060:	e180      	b.n	1005a364 <__arm_cp.14_10+0x314>
1005a062:	462c      	mov	r4, r5
1005a064:	e17e      	b.n	1005a364 <__arm_cp.14_10+0x314>
1005a066:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005a068:	2800      	cmp	r0, #0
1005a06a:	d100      	bne.n	1005a06e <__arm_cp.14_10+0x1e>
1005a06c:	e0df      	b.n	1005a22e <__arm_cp.14_10+0x1de>
1005a06e:	4638      	mov	r0, r7
1005a070:	f000 fa2c 	bl	1005a4cc <ll_cpe_check_rx_pdu_can_be_processed>
1005a074:	2800      	cmp	r0, #0
1005a076:	d100      	bne.n	1005a07a <__arm_cp.14_10+0x2a>
1005a078:	e0d7      	b.n	1005a22a <__arm_cp.14_10+0x1da>
1005a07a:	2501      	movs	r5, #1
1005a07c:	4638      	mov	r0, r7
1005a07e:	4629      	mov	r1, r5
1005a080:	f000 fa56 	bl	1005a530 <ll_cpe_get_state>
1005a084:	4604      	mov	r4, r0
1005a086:	4638      	mov	r0, r7
1005a088:	f000 fc12 	bl	1005a8b0 <ll_cpe_get_rx_pdu_discarded_by_one_sm>
1005a08c:	2c04      	cmp	r4, #4
1005a08e:	d103      	bne.n	1005a098 <__arm_cp.14_10+0x48>
1005a090:	462c      	mov	r4, r5
1005a092:	2800      	cmp	r0, #0
1005a094:	d100      	bne.n	1005a098 <__arm_cp.14_10+0x48>
1005a096:	e165      	b.n	1005a364 <__arm_cp.14_10+0x314>
1005a098:	2100      	movs	r1, #0
1005a09a:	2401      	movs	r4, #1
1005a09c:	4638      	mov	r0, r7
1005a09e:	4622      	mov	r2, r4
1005a0a0:	f000 fc0e 	bl	1005a8c0 <ll_cpe_process_rx_pdu>
1005a0a4:	2800      	cmp	r0, #0
1005a0a6:	d100      	bne.n	1005a0aa <__arm_cp.14_10+0x5a>
1005a0a8:	e153      	b.n	1005a352 <__arm_cp.14_10+0x302>
1005a0aa:	2100      	movs	r1, #0
1005a0ac:	4638      	mov	r0, r7
1005a0ae:	f7ff fd9c 	bl	10059bea <LL_cpe_get_active_status>
1005a0b2:	2800      	cmp	r0, #0
1005a0b4:	d100      	bne.n	1005a0b8 <__arm_cp.14_10+0x68>
1005a0b6:	e152      	b.n	1005a35e <__arm_cp.14_10+0x30e>
1005a0b8:	2100      	movs	r1, #0
1005a0ba:	4638      	mov	r0, r7
1005a0bc:	f000 fcf6 	bl	1005aaac <ll_cpe_get_instant_active>
1005a0c0:	2800      	cmp	r0, #0
1005a0c2:	d171      	bne.n	1005a1a8 <__arm_cp.14_10+0x158>
1005a0c4:	e143      	b.n	1005a34e <__arm_cp.14_10+0x2fe>
1005a0c6:	4638      	mov	r0, r7
1005a0c8:	f7fd ffee 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005a0cc:	4604      	mov	r4, r0
1005a0ce:	4638      	mov	r0, r7
1005a0d0:	4631      	mov	r1, r6
1005a0d2:	f7ff fd91 	bl	10059bf8 <ll_cpe_get_ctrl_flds_per_sm_p>
1005a0d6:	7800      	ldrb	r0, [r0, #0]
1005a0d8:	06c7      	lsls	r7, r0, #27
1005a0da:	9407      	str	r4, [sp, #28]
1005a0dc:	4620      	mov	r0, r4
1005a0de:	f7fe faa6 	bl	1005862e <llc_conn_get_tx_ctrl_pdu_state>
1005a0e2:	2402      	movs	r4, #2
1005a0e4:	2f00      	cmp	r7, #0
1005a0e6:	d400      	bmi.n	1005a0ea <__arm_cp.14_10+0x9a>
1005a0e8:	e09d      	b.n	1005a226 <__arm_cp.14_10+0x1d6>
1005a0ea:	2800      	cmp	r0, #0
1005a0ec:	d000      	beq.n	1005a0f0 <__arm_cp.14_10+0xa0>
1005a0ee:	e09a      	b.n	1005a226 <__arm_cp.14_10+0x1d6>
1005a0f0:	2701      	movs	r7, #1
1005a0f2:	9d06      	ldr	r5, [sp, #24]
1005a0f4:	4628      	mov	r0, r5
1005a0f6:	4631      	mov	r1, r6
1005a0f8:	463a      	mov	r2, r7
1005a0fa:	f000 f9f8 	bl	1005a4ee <ll_cpe_get_blocked_status>
1005a0fe:	2800      	cmp	r0, #0
1005a100:	d100      	bne.n	1005a104 <__arm_cp.14_10+0xb4>
1005a102:	e0b6      	b.n	1005a272 <__arm_cp.14_10+0x222>
1005a104:	462f      	mov	r7, r5
1005a106:	e12d      	b.n	1005a364 <__arm_cp.14_10+0x314>
1005a108:	4638      	mov	r0, r7
1005a10a:	f7fd ffcd 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005a10e:	4605      	mov	r5, r0
1005a110:	f7fe fa8d 	bl	1005862e <llc_conn_get_tx_ctrl_pdu_state>
1005a114:	2803      	cmp	r0, #3
1005a116:	d000      	beq.n	1005a11a <__arm_cp.14_10+0xca>
1005a118:	e0ed      	b.n	1005a2f6 <__arm_cp.14_10+0x2a6>
1005a11a:	4638      	mov	r0, r7
1005a11c:	4631      	mov	r1, r6
1005a11e:	f7ff fda3 	bl	10059c68 <ll_cpe_get_cpid_from_sm>
1005a122:	f000 fd01 	bl	1005ab28 <LL_cpe_get_cpf>
1005a126:	4604      	mov	r4, r0
1005a128:	2600      	movs	r6, #0
1005a12a:	4638      	mov	r0, r7
1005a12c:	9908      	ldr	r1, [sp, #32]
1005a12e:	4632      	mov	r2, r6
1005a130:	4633      	mov	r3, r6
1005a132:	47a0      	blx	r4
1005a134:	4602      	mov	r2, r0
1005a136:	4638      	mov	r0, r7
1005a138:	9908      	ldr	r1, [sp, #32]
1005a13a:	f000 fd02 	bl	1005ab42 <ll_cpe_set_expected_opcode>
1005a13e:	4628      	mov	r0, r5
1005a140:	4631      	mov	r1, r6
1005a142:	9c08      	ldr	r4, [sp, #32]
1005a144:	f7fe fd0e 	bl	10058b64 <llc_conn_set_tx_ctrl_pdu_state>
1005a148:	4638      	mov	r0, r7
1005a14a:	4621      	mov	r1, r4
1005a14c:	f7ff fd4d 	bl	10059bea <LL_cpe_get_active_status>
1005a150:	2800      	cmp	r0, #0
1005a152:	d06a      	beq.n	1005a22a <__arm_cp.14_10+0x1da>
1005a154:	4638      	mov	r0, r7
1005a156:	4621      	mov	r1, r4
1005a158:	f000 fca8 	bl	1005aaac <ll_cpe_get_instant_active>
1005a15c:	2800      	cmp	r0, #0
1005a15e:	d160      	bne.n	1005a222 <__arm_cp.14_10+0x1d2>
1005a160:	4638      	mov	r0, r7
1005a162:	4621      	mov	r1, r4
1005a164:	f000 f9dc 	bl	1005a520 <ll_cpe_get_expected_opcode>
1005a168:	28ff      	cmp	r0, #255	@ 0xff
1005a16a:	d068      	beq.n	1005a23e <__arm_cp.14_10+0x1ee>
1005a16c:	2404      	movs	r4, #4
1005a16e:	e0f9      	b.n	1005a364 <__arm_cp.14_10+0x314>
1005a170:	4638      	mov	r0, r7
1005a172:	f000 f9ab 	bl	1005a4cc <ll_cpe_check_rx_pdu_can_be_processed>
1005a176:	2404      	movs	r4, #4
1005a178:	2800      	cmp	r0, #0
1005a17a:	d100      	bne.n	1005a17e <__arm_cp.14_10+0x12e>
1005a17c:	e0f2      	b.n	1005a364 <__arm_cp.14_10+0x314>
1005a17e:	2203      	movs	r2, #3
1005a180:	4638      	mov	r0, r7
1005a182:	4631      	mov	r1, r6
1005a184:	f000 fb9c 	bl	1005a8c0 <ll_cpe_process_rx_pdu>
1005a188:	2800      	cmp	r0, #0
1005a18a:	d05a      	beq.n	1005a242 <__arm_cp.14_10+0x1f2>
1005a18c:	4638      	mov	r0, r7
1005a18e:	4631      	mov	r1, r6
1005a190:	f7ff fd2b 	bl	10059bea <LL_cpe_get_active_status>
1005a194:	2800      	cmp	r0, #0
1005a196:	d100      	bne.n	1005a19a <__arm_cp.14_10+0x14a>
1005a198:	e0bb      	b.n	1005a312 <__arm_cp.14_10+0x2c2>
1005a19a:	4638      	mov	r0, r7
1005a19c:	4631      	mov	r1, r6
1005a19e:	f000 fc85 	bl	1005aaac <ll_cpe_get_instant_active>
1005a1a2:	2800      	cmp	r0, #0
1005a1a4:	d100      	bne.n	1005a1a8 <__arm_cp.14_10+0x158>
1005a1a6:	e0b6      	b.n	1005a316 <__arm_cp.14_10+0x2c6>
1005a1a8:	2405      	movs	r4, #5
1005a1aa:	e0d8      	b.n	1005a35e <__arm_cp.14_10+0x30e>
1005a1ac:	4638      	mov	r0, r7
1005a1ae:	f7fd ff7b 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005a1b2:	4604      	mov	r4, r0
1005a1b4:	f7fe fa24 	bl	10058600 <llc_conn_get_instant_reached>
1005a1b8:	2801      	cmp	r0, #1
1005a1ba:	d132      	bne.n	1005a222 <__arm_cp.14_10+0x1d2>
1005a1bc:	4638      	mov	r0, r7
1005a1be:	4631      	mov	r1, r6
1005a1c0:	f7ff fd52 	bl	10059c68 <ll_cpe_get_cpid_from_sm>
1005a1c4:	f000 fcb0 	bl	1005ab28 <LL_cpe_get_cpf>
1005a1c8:	2800      	cmp	r0, #0
1005a1ca:	9407      	str	r4, [sp, #28]
1005a1cc:	d100      	bne.n	1005a1d0 <__arm_cp.14_10+0x180>
1005a1ce:	e094      	b.n	1005a2fa <__arm_cp.14_10+0x2aa>
1005a1d0:	4605      	mov	r5, r0
1005a1d2:	4620      	mov	r0, r4
1005a1d4:	f7fe fa0f 	bl	100585f6 <llc_conn_get_instant_passed>
1005a1d8:	2801      	cmp	r0, #1
1005a1da:	d100      	bne.n	1005a1de <__arm_cp.14_10+0x18e>
1005a1dc:	e08f      	b.n	1005a2fe <__arm_cp.14_10+0x2ae>
1005a1de:	2207      	movs	r2, #7
1005a1e0:	e08e      	b.n	1005a300 <__arm_cp.14_10+0x2b0>
1005a1e2:	2101      	movs	r1, #1
1005a1e4:	910a      	str	r1, [sp, #40]	@ 0x28
1005a1e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005a1e8:	f7fe f9f4 	bl	100585d4 <llc_conn_get_ctrl_pdu_data_p>
1005a1ec:	49b2      	ldr	r1, [pc, #712]	@ (1005a4b8 <__arm_cp.14_1>)
1005a1ee:	8001      	strh	r1, [r0, #0]
1005a1f0:	0671      	lsls	r1, r6, #25
1005a1f2:	0c49      	lsrs	r1, r1, #17
1005a1f4:	1c89      	adds	r1, r1, #2
1005a1f6:	8041      	strh	r1, [r0, #2]
1005a1f8:	8828      	ldrh	r0, [r5, #0]
1005a1fa:	2102      	movs	r1, #2
1005a1fc:	4301      	orrs	r1, r0
1005a1fe:	8029      	strh	r1, [r5, #0]
1005a200:	4638      	mov	r0, r7
1005a202:	f7fd ff51 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005a206:	9d05      	ldr	r5, [sp, #20]
1005a208:	5505      	strb	r5, [r0, r4]
1005a20a:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005a20c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
1005a20e:	4621      	mov	r1, r4
1005a210:	f7fe fca8 	bl	10058b64 <llc_conn_set_tx_ctrl_pdu_state>
1005a214:	2204      	movs	r2, #4
1005a216:	4638      	mov	r0, r7
1005a218:	4621      	mov	r1, r4
1005a21a:	462b      	mov	r3, r5
1005a21c:	f7ff fcf3 	bl	10059c06 <LL_cpe_set_active>
1005a220:	e0db      	b.n	1005a3da <__arm_cp.14_10+0x38a>
1005a222:	2405      	movs	r4, #5
1005a224:	e09e      	b.n	1005a364 <__arm_cp.14_10+0x314>
1005a226:	9f06      	ldr	r7, [sp, #24]
1005a228:	e09c      	b.n	1005a364 <__arm_cp.14_10+0x314>
1005a22a:	2401      	movs	r4, #1
1005a22c:	e09a      	b.n	1005a364 <__arm_cp.14_10+0x314>
1005a22e:	2401      	movs	r4, #1
1005a230:	4638      	mov	r0, r7
1005a232:	4621      	mov	r1, r4
1005a234:	f7ff fcd9 	bl	10059bea <LL_cpe_get_active_status>
1005a238:	2800      	cmp	r0, #0
1005a23a:	d100      	bne.n	1005a23e <__arm_cp.14_10+0x1ee>
1005a23c:	e092      	b.n	1005a364 <__arm_cp.14_10+0x314>
1005a23e:	2402      	movs	r4, #2
1005a240:	e090      	b.n	1005a364 <__arm_cp.14_10+0x314>
1005a242:	4626      	mov	r6, r4
1005a244:	4638      	mov	r0, r7
1005a246:	f000 fb33 	bl	1005a8b0 <ll_cpe_get_rx_pdu_discarded_by_one_sm>
1005a24a:	4604      	mov	r4, r0
1005a24c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005a24e:	4241      	negs	r1, r0
1005a250:	4141      	adcs	r1, r0
1005a252:	4638      	mov	r0, r7
1005a254:	f000 f96c 	bl	1005a530 <ll_cpe_get_state>
1005a258:	2c00      	cmp	r4, #0
1005a25a:	d064      	beq.n	1005a326 <__arm_cp.14_10+0x2d6>
1005a25c:	4638      	mov	r0, r7
1005a25e:	f7fd ff23 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005a262:	2100      	movs	r1, #0
1005a264:	f7fe f9b6 	bl	100585d4 <llc_conn_get_ctrl_pdu_data_p>
1005a268:	4638      	mov	r0, r7
1005a26a:	f000 fc26 	bl	1005aaba <ll_cpe_clr_rx_pdu_discarded_by_one_sm>
1005a26e:	4634      	mov	r4, r6
1005a270:	e078      	b.n	1005a364 <__arm_cp.14_10+0x314>
1005a272:	9704      	str	r7, [sp, #16]
1005a274:	22ff      	movs	r2, #255	@ 0xff
1005a276:	4628      	mov	r0, r5
1005a278:	4631      	mov	r1, r6
1005a27a:	f000 fc26 	bl	1005aaca <ll_cpe_check_instant_blocked>
1005a27e:	2800      	cmp	r0, #0
1005a280:	462f      	mov	r7, r5
1005a282:	d16f      	bne.n	1005a364 <__arm_cp.14_10+0x314>
1005a284:	4638      	mov	r0, r7
1005a286:	4631      	mov	r1, r6
1005a288:	f7ff fcee 	bl	10059c68 <ll_cpe_get_cpid_from_sm>
1005a28c:	f000 fc4c 	bl	1005ab28 <LL_cpe_get_cpf>
1005a290:	4604      	mov	r4, r0
1005a292:	9807      	ldr	r0, [sp, #28]
1005a294:	9d04      	ldr	r5, [sp, #16]
1005a296:	4629      	mov	r1, r5
1005a298:	f7fe f99c 	bl	100585d4 <llc_conn_get_ctrl_pdu_data_p>
1005a29c:	4603      	mov	r3, r0
1005a29e:	2206      	movs	r2, #6
1005a2a0:	4638      	mov	r0, r7
1005a2a2:	4631      	mov	r1, r6
1005a2a4:	9303      	str	r3, [sp, #12]
1005a2a6:	47a0      	blx	r4
1005a2a8:	4638      	mov	r0, r7
1005a2aa:	4631      	mov	r1, r6
1005a2ac:	f7ff fc9d 	bl	10059bea <LL_cpe_get_active_status>
1005a2b0:	2800      	cmp	r0, #0
1005a2b2:	462c      	mov	r4, r5
1005a2b4:	d056      	beq.n	1005a364 <__arm_cp.14_10+0x314>
1005a2b6:	4638      	mov	r0, r7
1005a2b8:	4631      	mov	r1, r6
1005a2ba:	f7ff fc9d 	bl	10059bf8 <ll_cpe_get_ctrl_flds_per_sm_p>
1005a2be:	7801      	ldrb	r1, [r0, #0]
1005a2c0:	22ef      	movs	r2, #239	@ 0xef
1005a2c2:	400a      	ands	r2, r1
1005a2c4:	7002      	strb	r2, [r0, #0]
1005a2c6:	22ff      	movs	r2, #255	@ 0xff
1005a2c8:	4638      	mov	r0, r7
1005a2ca:	4631      	mov	r1, r6
1005a2cc:	f000 fc39 	bl	1005ab42 <ll_cpe_set_expected_opcode>
1005a2d0:	2401      	movs	r4, #1
1005a2d2:	9807      	ldr	r0, [sp, #28]
1005a2d4:	4621      	mov	r1, r4
1005a2d6:	f7fe fc45 	bl	10058b64 <llc_conn_set_tx_ctrl_pdu_state>
1005a2da:	9a03      	ldr	r2, [sp, #12]
1005a2dc:	7850      	ldrb	r0, [r2, #1]
1005a2de:	2108      	movs	r1, #8
1005a2e0:	1c80      	adds	r0, r0, #2
1005a2e2:	b2c0      	uxtb	r0, r0
1005a2e4:	9100      	str	r1, [sp, #0]
1005a2e6:	9001      	str	r0, [sp, #4]
1005a2e8:	9202      	str	r2, [sp, #8]
1005a2ea:	2000      	movs	r0, #0
1005a2ec:	4621      	mov	r1, r4
1005a2ee:	4622      	mov	r2, r4
1005a2f0:	4623      	mov	r3, r4
1005a2f2:	f7f8 fe1d 	bl	10052f30 <log_notify_stu_ucfg_weak>
1005a2f6:	2403      	movs	r4, #3
1005a2f8:	e034      	b.n	1005a364 <__arm_cp.14_10+0x314>
1005a2fa:	2405      	movs	r4, #5
1005a2fc:	e005      	b.n	1005a30a <__arm_cp.14_10+0x2ba>
1005a2fe:	2208      	movs	r2, #8
1005a300:	2300      	movs	r3, #0
1005a302:	4638      	mov	r0, r7
1005a304:	4631      	mov	r1, r6
1005a306:	47a8      	blx	r5
1005a308:	2401      	movs	r4, #1
1005a30a:	9807      	ldr	r0, [sp, #28]
1005a30c:	f7fe f894 	bl	10058438 <llc_conn_clr_instant_reached_passed>
1005a310:	e028      	b.n	1005a364 <__arm_cp.14_10+0x314>
1005a312:	2401      	movs	r4, #1
1005a314:	e023      	b.n	1005a35e <__arm_cp.14_10+0x30e>
1005a316:	4638      	mov	r0, r7
1005a318:	4631      	mov	r1, r6
1005a31a:	f000 f901 	bl	1005a520 <ll_cpe_get_expected_opcode>
1005a31e:	28ff      	cmp	r0, #255	@ 0xff
1005a320:	d015      	beq.n	1005a34e <__arm_cp.14_10+0x2fe>
1005a322:	2404      	movs	r4, #4
1005a324:	e01b      	b.n	1005a35e <__arm_cp.14_10+0x30e>
1005a326:	2804      	cmp	r0, #4
1005a328:	d004      	beq.n	1005a334 <__arm_cp.14_10+0x2e4>
1005a32a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005a32c:	2900      	cmp	r1, #0
1005a32e:	d095      	beq.n	1005a25c <__arm_cp.14_10+0x20c>
1005a330:	2801      	cmp	r0, #1
1005a332:	d193      	bne.n	1005a25c <__arm_cp.14_10+0x20c>
1005a334:	4638      	mov	r0, r7
1005a336:	f7ff fc4b 	bl	10059bd0 <LL_cpe_get_ctrl_flds_common_p>
1005a33a:	8801      	ldrh	r1, [r0, #0]
1005a33c:	2404      	movs	r4, #4
1005a33e:	4321      	orrs	r1, r4
1005a340:	8001      	strh	r1, [r0, #0]
1005a342:	2015      	movs	r0, #21
1005a344:	f008 f8b8 	bl	100624b8 <tsk_notify_idx>
1005a348:	f7e9 fbe7 	bl	10043b1a <BLE_STACK_ProcessRequest>
1005a34c:	e00a      	b.n	1005a364 <__arm_cp.14_10+0x314>
1005a34e:	2402      	movs	r4, #2
1005a350:	e005      	b.n	1005a35e <__arm_cp.14_10+0x30e>
1005a352:	4638      	mov	r0, r7
1005a354:	f7fd fea8 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005a358:	2100      	movs	r1, #0
1005a35a:	f7fe f93b 	bl	100585d4 <llc_conn_get_ctrl_pdu_data_p>
1005a35e:	4638      	mov	r0, r7
1005a360:	f000 fbab 	bl	1005aaba <ll_cpe_clr_rx_pdu_discarded_by_one_sm>
1005a364:	4638      	mov	r0, r7
1005a366:	f7ff fc33 	bl	10059bd0 <LL_cpe_get_ctrl_flds_common_p>
1005a36a:	4606      	mov	r6, r0
1005a36c:	8800      	ldrh	r0, [r0, #0]
1005a36e:	06c0      	lsls	r0, r0, #27
1005a370:	d527      	bpl.n	1005a3c2 <__arm_cp.14_10+0x372>
1005a372:	4638      	mov	r0, r7
1005a374:	f7fd fe98 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005a378:	4605      	mov	r5, r0
1005a37a:	f7fe f958 	bl	1005862e <llc_conn_get_tx_ctrl_pdu_state>
1005a37e:	9407      	str	r4, [sp, #28]
1005a380:	4604      	mov	r4, r0
1005a382:	2100      	movs	r1, #0
1005a384:	2201      	movs	r2, #1
1005a386:	4638      	mov	r0, r7
1005a388:	f000 f8b1 	bl	1005a4ee <ll_cpe_get_blocked_status>
1005a38c:	4320      	orrs	r0, r4
1005a38e:	9c07      	ldr	r4, [sp, #28]
1005a390:	d117      	bne.n	1005a3c2 <__arm_cp.14_10+0x372>
1005a392:	8837      	ldrh	r7, [r6, #0]
1005a394:	2401      	movs	r4, #1
1005a396:	4628      	mov	r0, r5
1005a398:	4621      	mov	r1, r4
1005a39a:	f7fe f91b 	bl	100585d4 <llc_conn_get_ctrl_pdu_data_p>
1005a39e:	4946      	ldr	r1, [pc, #280]	@ (1005a4b8 <__arm_cp.14_1>)
1005a3a0:	8001      	strh	r1, [r0, #0]
1005a3a2:	0979      	lsrs	r1, r7, #5
1005a3a4:	9f06      	ldr	r7, [sp, #24]
1005a3a6:	0209      	lsls	r1, r1, #8
1005a3a8:	1dc9      	adds	r1, r1, #7
1005a3aa:	8041      	strh	r1, [r0, #2]
1005a3ac:	8830      	ldrh	r0, [r6, #0]
1005a3ae:	2108      	movs	r1, #8
1005a3b0:	4301      	orrs	r1, r0
1005a3b2:	2010      	movs	r0, #16
1005a3b4:	4381      	bics	r1, r0
1005a3b6:	8031      	strh	r1, [r6, #0]
1005a3b8:	4628      	mov	r0, r5
1005a3ba:	4621      	mov	r1, r4
1005a3bc:	9c07      	ldr	r4, [sp, #28]
1005a3be:	f7fe fbd1 	bl	10058b64 <llc_conn_set_tx_ctrl_pdu_state>
1005a3c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005a3c4:	42a0      	cmp	r0, r4
1005a3c6:	d004      	beq.n	1005a3d2 <__arm_cp.14_10+0x382>
1005a3c8:	4638      	mov	r0, r7
1005a3ca:	9908      	ldr	r1, [sp, #32]
1005a3cc:	4622      	mov	r2, r4
1005a3ce:	f000 fa5f 	bl	1005a890 <ll_cpe_set_state>
1005a3d2:	a80c      	add	r0, sp, #48	@ 0x30
1005a3d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005a3d6:	1840      	adds	r0, r0, r1
1005a3d8:	7044      	strb	r4, [r0, #1]
1005a3da:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005a3dc:	e5fc      	b.n	10059fd8 <LL_cpe_engine+0x2d0>
1005a3de:	a80c      	add	r0, sp, #48	@ 0x30
1005a3e0:	7802      	ldrb	r2, [r0, #0]
1005a3e2:	2001      	movs	r0, #1
1005a3e4:	2a02      	cmp	r2, #2
1005a3e6:	d008      	beq.n	1005a3fa <__arm_cp.14_10+0x3aa>
1005a3e8:	a90c      	add	r1, sp, #48	@ 0x30
1005a3ea:	7849      	ldrb	r1, [r1, #1]
1005a3ec:	2902      	cmp	r1, #2
1005a3ee:	d004      	beq.n	1005a3fa <__arm_cp.14_10+0x3aa>
1005a3f0:	2a03      	cmp	r2, #3
1005a3f2:	d002      	beq.n	1005a3fa <__arm_cp.14_10+0x3aa>
1005a3f4:	1ec9      	subs	r1, r1, #3
1005a3f6:	4248      	negs	r0, r1
1005a3f8:	4148      	adcs	r0, r1
1005a3fa:	b00d      	add	sp, #52	@ 0x34
1005a3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005a3fe:	4260      	negs	r0, r4
1005a400:	4160      	adcs	r0, r4
1005a402:	e53e      	b.n	10059e82 <LL_cpe_engine+0x17a>
1005a404:	461c      	mov	r4, r3
1005a406:	f7fd f962 	bl	100576ce <pcl_csr_ucfg_weak>
1005a40a:	e046      	b.n	1005a49a <__arm_cp.14_10+0x44a>
1005a40c:	461c      	mov	r4, r3
1005a40e:	f7f7 f905 	bl	1005161c <data_length_extension_csr_ucfg>
1005a412:	e042      	b.n	1005a49a <__arm_cp.14_10+0x44a>
1005a414:	461c      	mov	r4, r3
1005a416:	f7fd f813 	bl	10057440 <cte_csr_ucfg_weak>
1005a41a:	e03e      	b.n	1005a49a <__arm_cp.14_10+0x44a>
1005a41c:	461d      	mov	r5, r3
1005a41e:	f7ff fb3d 	bl	10059a9c <cis_csr_ucfg_weak>
1005a422:	e022      	b.n	1005a46a <__arm_cp.14_10+0x41a>
1005a424:	461c      	mov	r4, r3
1005a426:	f7f7 f901 	bl	1005162c <phy_upd_csr_ucfg>
1005a42a:	e036      	b.n	1005a49a <__arm_cp.14_10+0x44a>
1005a42c:	461d      	mov	r5, r3
1005a42e:	f7f7 f8fd 	bl	1005162c <phy_upd_csr_ucfg>
1005a432:	e01a      	b.n	1005a46a <__arm_cp.14_10+0x41a>
1005a434:	461c      	mov	r4, r3
1005a436:	f7ff fb3b 	bl	10059ab0 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005a43a:	e027      	b.n	1005a48c <__arm_cp.14_10+0x43c>
1005a43c:	4265      	negs	r5, r4
1005a43e:	4165      	adcs	r5, r4
1005a440:	461c      	mov	r4, r3
1005a442:	f7ff fb2b 	bl	10059a9c <cis_csr_ucfg_weak>
1005a446:	e031      	b.n	1005a4ac <__arm_cp.14_10+0x45c>
1005a448:	461c      	mov	r4, r3
1005a44a:	f7ff fb27 	bl	10059a9c <cis_csr_ucfg_weak>
1005a44e:	e024      	b.n	1005a49a <__arm_cp.14_10+0x44a>
1005a450:	4265      	negs	r5, r4
1005a452:	4165      	adcs	r5, r4
1005a454:	461c      	mov	r4, r3
1005a456:	f7fd f95a 	bl	1005770e <subrate_csr_ucfg_weak>
1005a45a:	e027      	b.n	1005a4ac <__arm_cp.14_10+0x45c>
1005a45c:	461d      	mov	r5, r3
1005a45e:	f7fd f956 	bl	1005770e <subrate_csr_ucfg_weak>
1005a462:	e002      	b.n	1005a46a <__arm_cp.14_10+0x41a>
1005a464:	461d      	mov	r5, r3
1005a466:	f7fc fef6 	bl	10057256 <chc_csr_ucfg_weak>
1005a46a:	462b      	mov	r3, r5
1005a46c:	1e41      	subs	r1, r0, #1
1005a46e:	4188      	sbcs	r0, r1
1005a470:	1e61      	subs	r1, r4, #1
1005a472:	418c      	sbcs	r4, r1
1005a474:	4004      	ands	r4, r0
1005a476:	4620      	mov	r0, r4
1005a478:	e503      	b.n	10059e82 <LL_cpe_engine+0x17a>
1005a47a:	4265      	negs	r5, r4
1005a47c:	4165      	adcs	r5, r4
1005a47e:	461c      	mov	r4, r3
1005a480:	f7fc fee9 	bl	10057256 <chc_csr_ucfg_weak>
1005a484:	e012      	b.n	1005a4ac <__arm_cp.14_10+0x45c>
1005a486:	461c      	mov	r4, r3
1005a488:	f7ff fb14 	bl	10059ab4 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005a48c:	4623      	mov	r3, r4
1005a48e:	2800      	cmp	r0, #0
1005a490:	4638      	mov	r0, r7
1005a492:	d100      	bne.n	1005a496 <__arm_cp.14_10+0x446>
1005a494:	e4f5      	b.n	10059e82 <LL_cpe_engine+0x17a>
1005a496:	f7fd f936 	bl	10057706 <scan_csr_ucfg_weak>
1005a49a:	4623      	mov	r3, r4
1005a49c:	1e41      	subs	r1, r0, #1
1005a49e:	4188      	sbcs	r0, r1
1005a4a0:	e4ef      	b.n	10059e82 <LL_cpe_engine+0x17a>
1005a4a2:	4265      	negs	r5, r4
1005a4a4:	4165      	adcs	r5, r4
1005a4a6:	461c      	mov	r4, r3
1005a4a8:	f7f7 f8c0 	bl	1005162c <phy_upd_csr_ucfg>
1005a4ac:	4623      	mov	r3, r4
1005a4ae:	1e41      	subs	r1, r0, #1
1005a4b0:	4188      	sbcs	r0, r1
1005a4b2:	4028      	ands	r0, r5
1005a4b4:	e4e5      	b.n	10059e82 <LL_cpe_engine+0x17a>
1005a4b6:	46c0      	nop			@ (mov r8, r8)

1005a4b8 <__arm_cp.14_1>:
1005a4b8:	00000203 	.word	0x00000203

1005a4bc <ll_cpe_set_active>:
1005a4bc:	b580      	push	{r7, lr}
1005a4be:	f7ff fb87 	bl	10059bd0 <LL_cpe_get_ctrl_flds_common_p>
1005a4c2:	8801      	ldrh	r1, [r0, #0]
1005a4c4:	2201      	movs	r2, #1
1005a4c6:	430a      	orrs	r2, r1
1005a4c8:	8002      	strh	r2, [r0, #0]
1005a4ca:	bd80      	pop	{r7, pc}

1005a4cc <ll_cpe_check_rx_pdu_can_be_processed>:
1005a4cc:	b510      	push	{r4, lr}
1005a4ce:	f7fd fdeb 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005a4d2:	4604      	mov	r4, r0
1005a4d4:	f7fe f899 	bl	1005860a <llc_conn_get_rx_ctrl_pdu_full>
1005a4d8:	2800      	cmp	r0, #0
1005a4da:	d006      	beq.n	1005a4ea <ll_cpe_check_rx_pdu_can_be_processed+0x1e>
1005a4dc:	4620      	mov	r0, r4
1005a4de:	f7fe f8a6 	bl	1005862e <llc_conn_get_tx_ctrl_pdu_state>
1005a4e2:	1ec0      	subs	r0, r0, #3
1005a4e4:	1e41      	subs	r1, r0, #1
1005a4e6:	4188      	sbcs	r0, r1
1005a4e8:	bd10      	pop	{r4, pc}
1005a4ea:	2000      	movs	r0, #0
1005a4ec:	bd10      	pop	{r4, pc}

1005a4ee <ll_cpe_get_blocked_status>:
1005a4ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005a4f0:	4614      	mov	r4, r2
1005a4f2:	4607      	mov	r7, r0
1005a4f4:	424e      	negs	r6, r1
1005a4f6:	414e      	adcs	r6, r1
1005a4f8:	4631      	mov	r1, r6
1005a4fa:	f7ff fb76 	bl	10059bea <LL_cpe_get_active_status>
1005a4fe:	2500      	movs	r5, #0
1005a500:	2800      	cmp	r0, #0
1005a502:	d00b      	beq.n	1005a51c <ll_cpe_get_blocked_status+0x2e>
1005a504:	4638      	mov	r0, r7
1005a506:	4631      	mov	r1, r6
1005a508:	f7ff fb76 	bl	10059bf8 <ll_cpe_get_ctrl_flds_per_sm_p>
1005a50c:	2c02      	cmp	r4, #2
1005a50e:	d805      	bhi.n	1005a51c <ll_cpe_get_blocked_status+0x2e>
1005a510:	7800      	ldrb	r0, [r0, #0]
1005a512:	1c61      	adds	r1, r4, #1
1005a514:	b2c9      	uxtb	r1, r1
1005a516:	40c8      	lsrs	r0, r1
1005a518:	2501      	movs	r5, #1
1005a51a:	4005      	ands	r5, r0
1005a51c:	4628      	mov	r0, r5
1005a51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005a520 <ll_cpe_get_expected_opcode>:
1005a520:	b510      	push	{r4, lr}
1005a522:	460c      	mov	r4, r1
1005a524:	f7fd fdc0 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005a528:	1900      	adds	r0, r0, r4
1005a52a:	21ae      	movs	r1, #174	@ 0xae
1005a52c:	5c40      	ldrb	r0, [r0, r1]
1005a52e:	bd10      	pop	{r4, pc}

1005a530 <ll_cpe_get_state>:
1005a530:	b510      	push	{r4, lr}
1005a532:	460c      	mov	r4, r1
1005a534:	f7fd fdb8 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005a538:	1900      	adds	r0, r0, r4
1005a53a:	21aa      	movs	r1, #170	@ 0xaa
1005a53c:	5c40      	ldrb	r0, [r0, r1]
1005a53e:	bd10      	pop	{r4, pc}

1005a540 <LL_cpe_rxctrlpdu_checkreject>:
1005a540:	b5b0      	push	{r4, r5, r7, lr}
1005a542:	460c      	mov	r4, r1
1005a544:	4605      	mov	r5, r0
1005a546:	4610      	mov	r0, r2
1005a548:	4619      	mov	r1, r3
1005a54a:	f7ff fb8d 	bl	10059c68 <ll_cpe_get_cpid_from_sm>
1005a54e:	4601      	mov	r1, r0
1005a550:	2001      	movs	r0, #1
1005a552:	2d0d      	cmp	r5, #13
1005a554:	d102      	bne.n	1005a55c <LL_cpe_rxctrlpdu_checkreject+0x1c>
1005a556:	2901      	cmp	r1, #1
1005a558:	d100      	bne.n	1005a55c <LL_cpe_rxctrlpdu_checkreject+0x1c>
1005a55a:	bdb0      	pop	{r4, r5, r7, pc}
1005a55c:	2200      	movs	r2, #0
1005a55e:	2d11      	cmp	r5, #17
1005a560:	d001      	beq.n	1005a566 <LL_cpe_rxctrlpdu_checkreject+0x26>
1005a562:	2d07      	cmp	r5, #7
1005a564:	d110      	bne.n	1005a588 <LL_cpe_rxctrlpdu_checkreject+0x48>
1005a566:	2c2a      	cmp	r4, #42	@ 0x2a
1005a568:	d804      	bhi.n	1005a574 <LL_cpe_rxctrlpdu_checkreject+0x34>
1005a56a:	2303      	movs	r3, #3
1005a56c:	4363      	muls	r3, r4
1005a56e:	4d07      	ldr	r5, [pc, #28]	@ (1005a58c <__arm_cp.20_0>)
1005a570:	5ceb      	ldrb	r3, [r5, r3]
1005a572:	e000      	b.n	1005a576 <LL_cpe_rxctrlpdu_checkreject+0x36>
1005a574:	2316      	movs	r3, #22
1005a576:	4299      	cmp	r1, r3
1005a578:	d106      	bne.n	1005a588 <LL_cpe_rxctrlpdu_checkreject+0x48>
1005a57a:	2103      	movs	r1, #3
1005a57c:	4361      	muls	r1, r4
1005a57e:	4b03      	ldr	r3, [pc, #12]	@ (1005a58c <__arm_cp.20_0>)
1005a580:	1859      	adds	r1, r3, r1
1005a582:	7889      	ldrb	r1, [r1, #2]
1005a584:	2900      	cmp	r1, #0
1005a586:	d1e8      	bne.n	1005a55a <LL_cpe_rxctrlpdu_checkreject+0x1a>
1005a588:	4610      	mov	r0, r2
1005a58a:	bdb0      	pop	{r4, r5, r7, pc}

1005a58c <__arm_cp.20_0>:
1005a58c:	1006a050 	.word	0x1006a050

1005a590 <valid_first_opcode>:
1005a590:	b5b0      	push	{r4, r5, r7, lr}
1005a592:	2300      	movs	r3, #0
1005a594:	282a      	cmp	r0, #42	@ 0x2a
1005a596:	d863      	bhi.n	1005a660 <valid_first_opcode+0xd0>
1005a598:	2403      	movs	r4, #3
1005a59a:	4344      	muls	r4, r0
1005a59c:	4d34      	ldr	r5, [pc, #208]	@ (1005a670 <__arm_cp.21_0>)
1005a59e:	192c      	adds	r4, r5, r4
1005a5a0:	7864      	ldrb	r4, [r4, #1]
1005a5a2:	4294      	cmp	r4, r2
1005a5a4:	d15c      	bne.n	1005a660 <valid_first_opcode+0xd0>
1005a5a6:	282a      	cmp	r0, #42	@ 0x2a
1005a5a8:	d85a      	bhi.n	1005a660 <valid_first_opcode+0xd0>
1005a5aa:	0080      	lsls	r0, r0, #2
1005a5ac:	a201      	add	r2, pc, #4	@ (adr r2, 1005a5b4 <valid_first_opcode+0x24>)
1005a5ae:	5810      	ldr	r0, [r2, r0]
1005a5b0:	4687      	mov	pc, r0
1005a5b2:	46c0      	nop			@ (mov r8, r8)
1005a5b4:	1005a663 	.word	0x1005a663
1005a5b8:	1005a663 	.word	0x1005a663
1005a5bc:	1005a661 	.word	0x1005a661
1005a5c0:	1005a663 	.word	0x1005a663
1005a5c4:	1005a661 	.word	0x1005a661
1005a5c8:	1005a661 	.word	0x1005a661
1005a5cc:	1005a661 	.word	0x1005a661
1005a5d0:	1005a661 	.word	0x1005a661
1005a5d4:	1005a663 	.word	0x1005a663
1005a5d8:	1005a661 	.word	0x1005a661
1005a5dc:	1005a663 	.word	0x1005a663
1005a5e0:	1005a661 	.word	0x1005a661
1005a5e4:	1005a667 	.word	0x1005a667
1005a5e8:	1005a661 	.word	0x1005a661
1005a5ec:	1005a66b 	.word	0x1005a66b
1005a5f0:	1005a661 	.word	0x1005a661
1005a5f4:	1005a661 	.word	0x1005a661
1005a5f8:	1005a661 	.word	0x1005a661
1005a5fc:	1005a667 	.word	0x1005a667
1005a600:	1005a661 	.word	0x1005a661
1005a604:	1005a667 	.word	0x1005a667
1005a608:	1005a661 	.word	0x1005a661
1005a60c:	1005a667 	.word	0x1005a667
1005a610:	1005a661 	.word	0x1005a661
1005a614:	1005a661 	.word	0x1005a661
1005a618:	1005a661 	.word	0x1005a661
1005a61c:	1005a667 	.word	0x1005a667
1005a620:	1005a661 	.word	0x1005a661
1005a624:	1005a667 	.word	0x1005a667
1005a628:	1005a667 	.word	0x1005a667
1005a62c:	1005a661 	.word	0x1005a661
1005a630:	1005a663 	.word	0x1005a663
1005a634:	1005a661 	.word	0x1005a661
1005a638:	1005a661 	.word	0x1005a661
1005a63c:	1005a667 	.word	0x1005a667
1005a640:	1005a667 	.word	0x1005a667
1005a644:	1005a661 	.word	0x1005a661
1005a648:	1005a667 	.word	0x1005a667
1005a64c:	1005a667 	.word	0x1005a667
1005a650:	1005a667 	.word	0x1005a667
1005a654:	1005a667 	.word	0x1005a667
1005a658:	1005a667 	.word	0x1005a667
1005a65c:	1005a667 	.word	0x1005a667
1005a660:	4619      	mov	r1, r3
1005a662:	4608      	mov	r0, r1
1005a664:	bdb0      	pop	{r4, r5, r7, pc}
1005a666:	2101      	movs	r1, #1
1005a668:	e7fb      	b.n	1005a662 <valid_first_opcode+0xd2>
1005a66a:	4248      	negs	r0, r1
1005a66c:	4141      	adcs	r1, r0
1005a66e:	e7f8      	b.n	1005a662 <valid_first_opcode+0xd2>

1005a670 <__arm_cp.21_0>:
1005a670:	1006a050 	.word	0x1006a050

1005a674 <LL_cpe_init_length_update>:
1005a674:	b580      	push	{r7, lr}
1005a676:	2006      	movs	r0, #6
1005a678:	4901      	ldr	r1, [pc, #4]	@ (1005a680 <__arm_cp.22_0>)
1005a67a:	f7ff faae 	bl	10059bda <LL_cpe_register_cpf>
1005a67e:	bd80      	pop	{r7, pc}

1005a680 <__arm_cp.22_0>:
1005a680:	1005bbed 	.word	0x1005bbed

1005a684 <LL_cpe_init_phy_update>:
1005a684:	b580      	push	{r7, lr}
1005a686:	2007      	movs	r0, #7
1005a688:	4901      	ldr	r1, [pc, #4]	@ (1005a690 <__arm_cp.23_0>)
1005a68a:	f7ff faa6 	bl	10059bda <LL_cpe_register_cpf>
1005a68e:	bd80      	pop	{r7, pc}

1005a690 <__arm_cp.23_0>:
1005a690:	1005c99d 	.word	0x1005c99d

1005a694 <LL_cpe_init_conn_update>:
1005a694:	b580      	push	{r7, lr}
1005a696:	2000      	movs	r0, #0
1005a698:	4901      	ldr	r1, [pc, #4]	@ (1005a6a0 <__arm_cp.28_0>)
1005a69a:	f7ff fa9e 	bl	10059bda <LL_cpe_register_cpf>
1005a69e:	bd80      	pop	{r7, pc}

1005a6a0 <__arm_cp.28_0>:
1005a6a0:	1005acb5 	.word	0x1005acb5

1005a6a4 <LL_cpe_init_chmap_update>:
1005a6a4:	b580      	push	{r7, lr}
1005a6a6:	2002      	movs	r0, #2
1005a6a8:	4901      	ldr	r1, [pc, #4]	@ (1005a6b0 <__arm_cp.29_0>)
1005a6aa:	f7ff fa96 	bl	10059bda <LL_cpe_register_cpf>
1005a6ae:	bd80      	pop	{r7, pc}

1005a6b0 <__arm_cp.29_0>:
1005a6b0:	1005aba5 	.word	0x1005aba5

1005a6b4 <LL_cpe_init_cte_ucfg_weak>:
1005a6b4:	b580      	push	{r7, lr}
1005a6b6:	200a      	movs	r0, #10
1005a6b8:	2100      	movs	r1, #0
1005a6ba:	f7ff fa8e 	bl	10059bda <LL_cpe_register_cpf>
1005a6be:	bd80      	pop	{r7, pc}

1005a6c0 <LL_cpe_init_past_ucfg_weak>:
1005a6c0:	b580      	push	{r7, lr}
1005a6c2:	2009      	movs	r0, #9
1005a6c4:	2100      	movs	r1, #0
1005a6c6:	f7ff fa88 	bl	10059bda <LL_cpe_register_cpf>
1005a6ca:	bd80      	pop	{r7, pc}

1005a6cc <LL_cpe_init_pcl_ucfg_weak>:
1005a6cc:	b580      	push	{r7, lr}
1005a6ce:	200b      	movs	r0, #11
1005a6d0:	2100      	movs	r1, #0
1005a6d2:	f7ff fa82 	bl	10059bda <LL_cpe_register_cpf>
1005a6d6:	bd80      	pop	{r7, pc}

1005a6d8 <LL_cpe_init_chc_enable_ucfg_weak>:
1005a6d8:	b580      	push	{r7, lr}
1005a6da:	200c      	movs	r0, #12
1005a6dc:	2100      	movs	r1, #0
1005a6de:	f7ff fa7c 	bl	10059bda <LL_cpe_register_cpf>
1005a6e2:	bd80      	pop	{r7, pc}

1005a6e4 <LL_cpe_init_chc_reporting_ucfg_weak>:
1005a6e4:	b580      	push	{r7, lr}
1005a6e6:	200d      	movs	r0, #13
1005a6e8:	2100      	movs	r1, #0
1005a6ea:	f7ff fa76 	bl	10059bda <LL_cpe_register_cpf>
1005a6ee:	bd80      	pop	{r7, pc}

1005a6f0 <LL_cpe_init_subrate_ucfg_weak>:
1005a6f0:	b580      	push	{r7, lr}
1005a6f2:	2011      	movs	r0, #17
1005a6f4:	2100      	movs	r1, #0
1005a6f6:	f7ff fa70 	bl	10059bda <LL_cpe_register_cpf>
1005a6fa:	bd80      	pop	{r7, pc}

1005a6fc <LL_cpe_init_sca_upd_ucfg_weak>:
1005a6fc:	b580      	push	{r7, lr}
1005a6fe:	2012      	movs	r0, #18
1005a700:	2100      	movs	r1, #0
1005a702:	f7ff fa6a 	bl	10059bda <LL_cpe_register_cpf>
1005a706:	bd80      	pop	{r7, pc}

1005a708 <LL_cpe_init_cis_ucfg_weak>:
1005a708:	b510      	push	{r4, lr}
1005a70a:	200e      	movs	r0, #14
1005a70c:	2400      	movs	r4, #0
1005a70e:	4621      	mov	r1, r4
1005a710:	f7ff fa63 	bl	10059bda <LL_cpe_register_cpf>
1005a714:	2010      	movs	r0, #16
1005a716:	4621      	mov	r1, r4
1005a718:	f7ff fa5f 	bl	10059bda <LL_cpe_register_cpf>
1005a71c:	bd10      	pop	{r4, pc}
	...

1005a720 <LL_cpe_init>:
1005a720:	b5b0      	push	{r4, r5, r7, lr}
1005a722:	2001      	movs	r0, #1
1005a724:	4918      	ldr	r1, [pc, #96]	@ (1005a788 <__arm_cp.47_0>)
1005a726:	4c19      	ldr	r4, [pc, #100]	@ (1005a78c <__arm_cp.47_1>)
1005a728:	47a0      	blx	r4
1005a72a:	2003      	movs	r0, #3
1005a72c:	4918      	ldr	r1, [pc, #96]	@ (1005a790 <__arm_cp.47_2>)
1005a72e:	47a0      	blx	r4
1005a730:	2005      	movs	r0, #5
1005a732:	4918      	ldr	r1, [pc, #96]	@ (1005a794 <__arm_cp.47_3>)
1005a734:	47a0      	blx	r4
1005a736:	2008      	movs	r0, #8
1005a738:	4917      	ldr	r1, [pc, #92]	@ (1005a798 <__arm_cp.47_4>)
1005a73a:	47a0      	blx	r4
1005a73c:	f7f7 f86f 	bl	1005181e <LL_cpe_init_conn_update_ucfg>
1005a740:	f7f7 f874 	bl	1005182c <LL_cpe_init_chmap_update_ucfg>
1005a744:	f7f7 f85d 	bl	10051802 <LL_cpe_init_length_update_ucfg>
1005a748:	f7f7 f862 	bl	10051810 <LL_cpe_init_phy_update_ucfg>
1005a74c:	f7ff ffb8 	bl	1005a6c0 <LL_cpe_init_past_ucfg_weak>
1005a750:	f7ff ffb0 	bl	1005a6b4 <LL_cpe_init_cte_ucfg_weak>
1005a754:	f7ff ffba 	bl	1005a6cc <LL_cpe_init_pcl_ucfg_weak>
1005a758:	f7ff ffbe 	bl	1005a6d8 <LL_cpe_init_chc_enable_ucfg_weak>
1005a75c:	f7ff ffc2 	bl	1005a6e4 <LL_cpe_init_chc_reporting_ucfg_weak>
1005a760:	f7ff ffd2 	bl	1005a708 <LL_cpe_init_cis_ucfg_weak>
1005a764:	f7ff ffc4 	bl	1005a6f0 <LL_cpe_init_subrate_ucfg_weak>
1005a768:	f7ff ffc8 	bl	1005a6fc <LL_cpe_init_sca_upd_ucfg_weak>
1005a76c:	2400      	movs	r4, #0
1005a76e:	4d0b      	ldr	r5, [pc, #44]	@ (1005a79c <__arm_cp.47_5>)
1005a770:	6828      	ldr	r0, [r5, #0]
1005a772:	2134      	movs	r1, #52	@ 0x34
1005a774:	5c41      	ldrb	r1, [r0, r1]
1005a776:	b2e0      	uxtb	r0, r4
1005a778:	4288      	cmp	r0, r1
1005a77a:	d203      	bcs.n	1005a784 <LL_cpe_init+0x64>
1005a77c:	f000 f810 	bl	1005a7a0 <ll_cpe_reset_state_machines>
1005a780:	1c64      	adds	r4, r4, #1
1005a782:	e7f5      	b.n	1005a770 <LL_cpe_init+0x50>
1005a784:	bdb0      	pop	{r4, r5, r7, pc}
1005a786:	46c0      	nop			@ (mov r8, r8)

1005a788 <__arm_cp.47_0>:
1005a788:	1005b139 	.word	0x1005b139

1005a78c <__arm_cp.47_1>:
1005a78c:	10059bdb 	.word	0x10059bdb

1005a790 <__arm_cp.47_2>:
1005a790:	1005b925 	.word	0x1005b925

1005a794 <__arm_cp.47_3>:
1005a794:	1005d265 	.word	0x1005d265

1005a798 <__arm_cp.47_4>:
1005a798:	1005c4ed 	.word	0x1005c4ed

1005a79c <__arm_cp.47_5>:
1005a79c:	200010a0 	.word	0x200010a0

1005a7a0 <ll_cpe_reset_state_machines>:
1005a7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005a7a2:	2638      	movs	r6, #56	@ 0x38
1005a7a4:	4346      	muls	r6, r0
1005a7a6:	9000      	str	r0, [sp, #0]
1005a7a8:	f7fd fc7e 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005a7ac:	4605      	mov	r5, r0
1005a7ae:	4816      	ldr	r0, [pc, #88]	@ (1005a808 <__arm_cp.48_0>)
1005a7b0:	6800      	ldr	r0, [r0, #0]
1005a7b2:	219c      	movs	r1, #156	@ 0x9c
1005a7b4:	5842      	ldr	r2, [r0, r1]
1005a7b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
1005a7b8:	6892      	ldr	r2, [r2, #8]
1005a7ba:	1992      	adds	r2, r2, r6
1005a7bc:	23a0      	movs	r3, #160	@ 0xa0
1005a7be:	50ea      	str	r2, [r5, r3]
1005a7c0:	5840      	ldr	r0, [r0, r1]
1005a7c2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005a7c4:	68c0      	ldr	r0, [r0, #12]
1005a7c6:	1980      	adds	r0, r0, r6
1005a7c8:	462e      	mov	r6, r5
1005a7ca:	36a0      	adds	r6, #160	@ 0xa0
1005a7cc:	6070      	str	r0, [r6, #4]
1005a7ce:	27ae      	movs	r7, #174	@ 0xae
1005a7d0:	2fb0      	cmp	r7, #176	@ 0xb0
1005a7d2:	d00f      	beq.n	1005a7f4 <ll_cpe_reset_state_machines+0x54>
1005a7d4:	4638      	mov	r0, r7
1005a7d6:	38ae      	subs	r0, #174	@ 0xae
1005a7d8:	19e9      	adds	r1, r5, r7
1005a7da:	1f09      	subs	r1, r1, #4
1005a7dc:	2400      	movs	r4, #0
1005a7de:	700c      	strb	r4, [r1, #0]
1005a7e0:	b2c1      	uxtb	r1, r0
1005a7e2:	9800      	ldr	r0, [sp, #0]
1005a7e4:	f7ff fa08 	bl	10059bf8 <ll_cpe_get_ctrl_flds_per_sm_p>
1005a7e8:	7004      	strb	r4, [r0, #0]
1005a7ea:	20ff      	movs	r0, #255	@ 0xff
1005a7ec:	55e8      	strb	r0, [r5, r7]
1005a7ee:	74f4      	strb	r4, [r6, #19]
1005a7f0:	1c7f      	adds	r7, r7, #1
1005a7f2:	e7ed      	b.n	1005a7d0 <ll_cpe_reset_state_machines+0x30>
1005a7f4:	2400      	movs	r4, #0
1005a7f6:	74b4      	strb	r4, [r6, #18]
1005a7f8:	9800      	ldr	r0, [sp, #0]
1005a7fa:	f7ff f9e9 	bl	10059bd0 <LL_cpe_get_ctrl_flds_common_p>
1005a7fe:	8004      	strh	r4, [r0, #0]
1005a800:	4802      	ldr	r0, [pc, #8]	@ (1005a80c <__arm_cp.48_1>)
1005a802:	8768      	strh	r0, [r5, #58]	@ 0x3a
1005a804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005a806:	46c0      	nop			@ (mov r8, r8)

1005a808 <__arm_cp.48_0>:
1005a808:	200010f4 	.word	0x200010f4

1005a80c <__arm_cp.48_1>:
1005a80c:	0000ffff 	.word	0x0000ffff

1005a810 <LL_cpe_set_disconnect>:
1005a810:	b510      	push	{r4, lr}
1005a812:	2480      	movs	r4, #128	@ 0x80
1005a814:	430c      	orrs	r4, r1
1005a816:	f7fd fc47 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005a81a:	21b2      	movs	r1, #178	@ 0xb2
1005a81c:	5444      	strb	r4, [r0, r1]
1005a81e:	2015      	movs	r0, #21
1005a820:	f007 fe4a 	bl	100624b8 <tsk_notify_idx>
1005a824:	f7e9 f979 	bl	10043b1a <BLE_STACK_ProcessRequest>
1005a828:	bd10      	pop	{r4, pc}

1005a82a <LL_cpe_get_tx_terminate_in_progress>:
1005a82a:	b580      	push	{r7, lr}
1005a82c:	f7ff f9d0 	bl	10059bd0 <LL_cpe_get_ctrl_flds_common_p>
1005a830:	7800      	ldrb	r0, [r0, #0]
1005a832:	0780      	lsls	r0, r0, #30
1005a834:	0fc0      	lsrs	r0, r0, #31
1005a836:	bd80      	pop	{r7, pc}

1005a838 <LL_cpe_conn_exception_opcode_from_sm>:
1005a838:	b580      	push	{r7, lr}
1005a83a:	f7ff fa15 	bl	10059c68 <ll_cpe_get_cpid_from_sm>
1005a83e:	21fd      	movs	r1, #253	@ 0xfd
1005a840:	4008      	ands	r0, r1
1005a842:	4241      	negs	r1, r0
1005a844:	4148      	adcs	r0, r1
1005a846:	bd80      	pop	{r7, pc}

1005a848 <LL_cpe_conn_get_proc_id_from_sm>:
1005a848:	b580      	push	{r7, lr}
1005a84a:	f7ff fa0d 	bl	10059c68 <ll_cpe_get_cpid_from_sm>
1005a84e:	bd80      	pop	{r7, pc}

1005a850 <llc_cpe_calc_instant>:
1005a850:	b580      	push	{r7, lr}
1005a852:	f7fd fc29 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005a856:	2142      	movs	r1, #66	@ 0x42
1005a858:	5a41      	ldrh	r1, [r0, r1]
1005a85a:	2291      	movs	r2, #145	@ 0x91
1005a85c:	0052      	lsls	r2, r2, #1
1005a85e:	5a82      	ldrh	r2, [r0, r2]
1005a860:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
1005a862:	1c40      	adds	r0, r0, #1
1005a864:	4350      	muls	r0, r2
1005a866:	2206      	movs	r2, #6
1005a868:	4342      	muls	r2, r0
1005a86a:	1850      	adds	r0, r2, r1
1005a86c:	b280      	uxth	r0, r0
1005a86e:	bd80      	pop	{r7, pc}

1005a870 <llc_cpe_init_sm_ctxt>:
1005a870:	b5b0      	push	{r4, r5, r7, lr}
1005a872:	4604      	mov	r4, r0
1005a874:	f7ff fe22 	bl	1005a4bc <ll_cpe_set_active>
1005a878:	4620      	mov	r0, r4
1005a87a:	f7fd fc15 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005a87e:	21aa      	movs	r1, #170	@ 0xaa
1005a880:	2501      	movs	r5, #1
1005a882:	5445      	strb	r5, [r0, r1]
1005a884:	4620      	mov	r0, r4
1005a886:	f7fd fc0f 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005a88a:	21ab      	movs	r1, #171	@ 0xab
1005a88c:	5445      	strb	r5, [r0, r1]
1005a88e:	bdb0      	pop	{r4, r5, r7, pc}

1005a890 <ll_cpe_set_state>:
1005a890:	b5b0      	push	{r4, r5, r7, lr}
1005a892:	4614      	mov	r4, r2
1005a894:	460d      	mov	r5, r1
1005a896:	f7fd fc07 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005a89a:	1940      	adds	r0, r0, r5
1005a89c:	21aa      	movs	r1, #170	@ 0xaa
1005a89e:	5444      	strb	r4, [r0, r1]
1005a8a0:	bdb0      	pop	{r4, r5, r7, pc}

1005a8a2 <ll_cpe_get_active>:
1005a8a2:	b580      	push	{r7, lr}
1005a8a4:	f7ff f994 	bl	10059bd0 <LL_cpe_get_ctrl_flds_common_p>
1005a8a8:	8801      	ldrh	r1, [r0, #0]
1005a8aa:	2001      	movs	r0, #1
1005a8ac:	4008      	ands	r0, r1
1005a8ae:	bd80      	pop	{r7, pc}

1005a8b0 <ll_cpe_get_rx_pdu_discarded_by_one_sm>:
1005a8b0:	b580      	push	{r7, lr}
1005a8b2:	f7ff f98d 	bl	10059bd0 <LL_cpe_get_ctrl_flds_common_p>
1005a8b6:	7800      	ldrb	r0, [r0, #0]
1005a8b8:	0740      	lsls	r0, r0, #29
1005a8ba:	0fc0      	lsrs	r0, r0, #31
1005a8bc:	bd80      	pop	{r7, pc}
	...

1005a8c0 <ll_cpe_process_rx_pdu>:
1005a8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005a8c2:	b08f      	sub	sp, #60	@ 0x3c
1005a8c4:	9206      	str	r2, [sp, #24]
1005a8c6:	460d      	mov	r5, r1
1005a8c8:	4606      	mov	r6, r0
1005a8ca:	f7fd fbed 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005a8ce:	212c      	movs	r1, #44	@ 0x2c
1005a8d0:	5c41      	ldrb	r1, [r0, r1]
1005a8d2:	1ec9      	subs	r1, r1, #3
1005a8d4:	424a      	negs	r2, r1
1005a8d6:	414a      	adcs	r2, r1
1005a8d8:	9205      	str	r2, [sp, #20]
1005a8da:	2400      	movs	r4, #0
1005a8dc:	900a      	str	r0, [sp, #40]	@ 0x28
1005a8de:	4621      	mov	r1, r4
1005a8e0:	f7fd fe78 	bl	100585d4 <llc_conn_get_ctrl_pdu_data_p>
1005a8e4:	7841      	ldrb	r1, [r0, #1]
1005a8e6:	9104      	str	r1, [sp, #16]
1005a8e8:	9009      	str	r0, [sp, #36]	@ 0x24
1005a8ea:	8847      	ldrh	r7, [r0, #2]
1005a8ec:	4630      	mov	r0, r6
1005a8ee:	4629      	mov	r1, r5
1005a8f0:	f7ff fe16 	bl	1005a520 <ll_cpe_get_expected_opcode>
1005a8f4:	9003      	str	r0, [sp, #12]
1005a8f6:	4630      	mov	r0, r6
1005a8f8:	4629      	mov	r1, r5
1005a8fa:	9407      	str	r4, [sp, #28]
1005a8fc:	4622      	mov	r2, r4
1005a8fe:	f7ff fdf6 	bl	1005a4ee <ll_cpe_get_blocked_status>
1005a902:	900b      	str	r0, [sp, #44]	@ 0x2c
1005a904:	b2fa      	uxtb	r2, r7
1005a906:	4630      	mov	r0, r6
1005a908:	4629      	mov	r1, r5
1005a90a:	920e      	str	r2, [sp, #56]	@ 0x38
1005a90c:	f000 f8dd 	bl	1005aaca <ll_cpe_check_instant_blocked>
1005a910:	900c      	str	r0, [sp, #48]	@ 0x30
1005a912:	426c      	negs	r4, r5
1005a914:	9508      	str	r5, [sp, #32]
1005a916:	416c      	adcs	r4, r5
1005a918:	4630      	mov	r0, r6
1005a91a:	4621      	mov	r1, r4
1005a91c:	f7ff fe08 	bl	1005a530 <ll_cpe_get_state>
1005a920:	4605      	mov	r5, r0
1005a922:	960d      	str	r6, [sp, #52]	@ 0x34
1005a924:	4630      	mov	r0, r6
1005a926:	4621      	mov	r1, r4
1005a928:	f7ff fdfa 	bl	1005a520 <ll_cpe_get_expected_opcode>
1005a92c:	463a      	mov	r2, r7
1005a92e:	1ff9      	subs	r1, r7, #7
1005a930:	b2cb      	uxtb	r3, r1
1005a932:	2b0b      	cmp	r3, #11
1005a934:	d302      	bcc.n	1005a93c <ll_cpe_process_rx_pdu+0x7c>
1005a936:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005a938:	9f07      	ldr	r7, [sp, #28]
1005a93a:	e001      	b.n	1005a940 <ll_cpe_process_rx_pdu+0x80>
1005a93c:	2701      	movs	r7, #1
1005a93e:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005a940:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
1005a942:	2e01      	cmp	r6, #1
1005a944:	d103      	bne.n	1005a94e <ll_cpe_process_rx_pdu+0x8e>
1005a946:	2d04      	cmp	r5, #4
1005a948:	d147      	bne.n	1005a9da <ll_cpe_process_rx_pdu+0x11a>
1005a94a:	4288      	cmp	r0, r1
1005a94c:	d145      	bne.n	1005a9da <ll_cpe_process_rx_pdu+0x11a>
1005a94e:	4955      	ldr	r1, [pc, #340]	@ (1005aaa4 <__arm_cp.58_0>)
1005a950:	40d9      	lsrs	r1, r3
1005a952:	400f      	ands	r7, r1
1005a954:	0a16      	lsrs	r6, r2, #8
1005a956:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005a958:	2901      	cmp	r1, #1
1005a95a:	d11d      	bne.n	1005a998 <ll_cpe_process_rx_pdu+0xd8>
1005a95c:	900c      	str	r0, [sp, #48]	@ 0x30
1005a95e:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005a960:	4631      	mov	r1, r6
1005a962:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1005a964:	4632      	mov	r2, r6
1005a966:	4623      	mov	r3, r4
1005a968:	f7ff fdea 	bl	1005a540 <LL_cpe_rxctrlpdu_checkreject>
1005a96c:	2d04      	cmp	r5, #4
1005a96e:	d10c      	bne.n	1005a98a <ll_cpe_process_rx_pdu+0xca>
1005a970:	2101      	movs	r1, #1
1005a972:	404f      	eors	r7, r1
1005a974:	d101      	bne.n	1005a97a <ll_cpe_process_rx_pdu+0xba>
1005a976:	2800      	cmp	r0, #0
1005a978:	d007      	beq.n	1005a98a <ll_cpe_process_rx_pdu+0xca>
1005a97a:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005a97c:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005a97e:	1a40      	subs	r0, r0, r1
1005a980:	1e41      	subs	r1, r0, #1
1005a982:	4188      	sbcs	r0, r1
1005a984:	4007      	ands	r7, r0
1005a986:	2f01      	cmp	r7, #1
1005a988:	d16e      	bne.n	1005aa68 <ll_cpe_process_rx_pdu+0x1a8>
1005a98a:	4630      	mov	r0, r6
1005a98c:	4621      	mov	r1, r4
1005a98e:	f7ff f96b 	bl	10059c68 <ll_cpe_get_cpid_from_sm>
1005a992:	4605      	mov	r5, r0
1005a994:	2605      	movs	r6, #5
1005a996:	e026      	b.n	1005a9e6 <ll_cpe_process_rx_pdu+0x126>
1005a998:	2400      	movs	r4, #0
1005a99a:	9806      	ldr	r0, [sp, #24]
1005a99c:	2803      	cmp	r0, #3
1005a99e:	d049      	beq.n	1005aa34 <ll_cpe_process_rx_pdu+0x174>
1005a9a0:	2801      	cmp	r0, #1
1005a9a2:	d144      	bne.n	1005aa2e <ll_cpe_process_rx_pdu+0x16e>
1005a9a4:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
1005a9a6:	4630      	mov	r0, r6
1005a9a8:	9905      	ldr	r1, [sp, #20]
1005a9aa:	9a04      	ldr	r2, [sp, #16]
1005a9ac:	f7ff fdf0 	bl	1005a590 <valid_first_opcode>
1005a9b0:	2801      	cmp	r0, #1
1005a9b2:	d13c      	bne.n	1005aa2e <ll_cpe_process_rx_pdu+0x16e>
1005a9b4:	2401      	movs	r4, #1
1005a9b6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
1005a9b8:	4628      	mov	r0, r5
1005a9ba:	4621      	mov	r1, r4
1005a9bc:	f7ff f915 	bl	10059bea <LL_cpe_get_active_status>
1005a9c0:	4607      	mov	r7, r0
1005a9c2:	4628      	mov	r0, r5
1005a9c4:	4621      	mov	r1, r4
1005a9c6:	f000 f897 	bl	1005aaf8 <ll_cpe_get_instant_supported>
1005a9ca:	4605      	mov	r5, r0
1005a9cc:	4630      	mov	r0, r6
1005a9ce:	f000 f89b 	bl	1005ab08 <LL_cpe_is_opcode_supporting_instant>
1005a9d2:	2801      	cmp	r0, #1
1005a9d4:	d04a      	beq.n	1005aa6c <ll_cpe_process_rx_pdu+0x1ac>
1005a9d6:	4622      	mov	r2, r4
1005a9d8:	e049      	b.n	1005aa6e <ll_cpe_process_rx_pdu+0x1ae>
1005a9da:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005a9dc:	4621      	mov	r1, r4
1005a9de:	f7ff f943 	bl	10059c68 <ll_cpe_get_cpid_from_sm>
1005a9e2:	4605      	mov	r5, r0
1005a9e4:	2604      	movs	r6, #4
1005a9e6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005a9e8:	7878      	ldrb	r0, [r7, #1]
1005a9ea:	2110      	movs	r1, #16
1005a9ec:	1c80      	adds	r0, r0, #2
1005a9ee:	b2c0      	uxtb	r0, r0
1005a9f0:	9100      	str	r1, [sp, #0]
1005a9f2:	9001      	str	r0, [sp, #4]
1005a9f4:	9702      	str	r7, [sp, #8]
1005a9f6:	2401      	movs	r4, #1
1005a9f8:	2000      	movs	r0, #0
1005a9fa:	4621      	mov	r1, r4
1005a9fc:	4622      	mov	r2, r4
1005a9fe:	4603      	mov	r3, r0
1005aa00:	f7f8 fa96 	bl	10052f30 <log_notify_stu_ucfg_weak>
1005aa04:	4628      	mov	r0, r5
1005aa06:	f000 f88f 	bl	1005ab28 <LL_cpe_get_cpf>
1005aa0a:	2800      	cmp	r0, #0
1005aa0c:	d00c      	beq.n	1005aa28 <ll_cpe_process_rx_pdu+0x168>
1005aa0e:	4605      	mov	r5, r0
1005aa10:	4632      	mov	r2, r6
1005aa12:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1005aa14:	4630      	mov	r0, r6
1005aa16:	463b      	mov	r3, r7
1005aa18:	9f08      	ldr	r7, [sp, #32]
1005aa1a:	4639      	mov	r1, r7
1005aa1c:	47a8      	blx	r5
1005aa1e:	4602      	mov	r2, r0
1005aa20:	4630      	mov	r0, r6
1005aa22:	4639      	mov	r1, r7
1005aa24:	f000 f88d 	bl	1005ab42 <ll_cpe_set_expected_opcode>
1005aa28:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005aa2a:	f7fd fd19 	bl	10058460 <llc_conn_clr_rx_ctrl_pdu_full>
1005aa2e:	4620      	mov	r0, r4
1005aa30:	b00f      	add	sp, #60	@ 0x3c
1005aa32:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005aa34:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005aa36:	9d08      	ldr	r5, [sp, #32]
1005aa38:	4629      	mov	r1, r5
1005aa3a:	f7ff f915 	bl	10059c68 <ll_cpe_get_cpid_from_sm>
1005aa3e:	900c      	str	r0, [sp, #48]	@ 0x30
1005aa40:	2f00      	cmp	r7, #0
1005aa42:	d009      	beq.n	1005aa58 <ll_cpe_process_rx_pdu+0x198>
1005aa44:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005aa46:	4631      	mov	r1, r6
1005aa48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1005aa4a:	462b      	mov	r3, r5
1005aa4c:	f7ff fd78 	bl	1005a540 <LL_cpe_rxctrlpdu_checkreject>
1005aa50:	4604      	mov	r4, r0
1005aa52:	2801      	cmp	r0, #1
1005aa54:	d004      	beq.n	1005aa60 <ll_cpe_process_rx_pdu+0x1a0>
1005aa56:	e7ea      	b.n	1005aa2e <ll_cpe_process_rx_pdu+0x16e>
1005aa58:	9803      	ldr	r0, [sp, #12]
1005aa5a:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005aa5c:	4288      	cmp	r0, r1
1005aa5e:	d113      	bne.n	1005aa88 <ll_cpe_process_rx_pdu+0x1c8>
1005aa60:	2603      	movs	r6, #3
1005aa62:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005aa64:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
1005aa66:	e7bf      	b.n	1005a9e8 <ll_cpe_process_rx_pdu+0x128>
1005aa68:	2400      	movs	r4, #0
1005aa6a:	e7e0      	b.n	1005aa2e <ll_cpe_process_rx_pdu+0x16e>
1005aa6c:	2202      	movs	r2, #2
1005aa6e:	4067      	eors	r7, r4
1005aa70:	4065      	eors	r5, r4
1005aa72:	433d      	orrs	r5, r7
1005aa74:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005aa76:	d000      	beq.n	1005aa7a <ll_cpe_process_rx_pdu+0x1ba>
1005aa78:	4622      	mov	r2, r4
1005aa7a:	2e2a      	cmp	r6, #42	@ 0x2a
1005aa7c:	d80e      	bhi.n	1005aa9c <ll_cpe_process_rx_pdu+0x1dc>
1005aa7e:	2003      	movs	r0, #3
1005aa80:	4370      	muls	r0, r6
1005aa82:	4909      	ldr	r1, [pc, #36]	@ (1005aaa8 <__arm_cp.58_1>)
1005aa84:	5c0d      	ldrb	r5, [r1, r0]
1005aa86:	e00a      	b.n	1005aa9e <ll_cpe_process_rx_pdu+0x1de>
1005aa88:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005aa8a:	f7fd fdc4 	bl	10058616 <llc_conn_get_rx_acl_blocked>
1005aa8e:	2801      	cmp	r0, #1
1005aa90:	d1cd      	bne.n	1005aa2e <ll_cpe_process_rx_pdu+0x16e>
1005aa92:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005aa94:	2801      	cmp	r0, #1
1005aa96:	d1ca      	bne.n	1005aa2e <ll_cpe_process_rx_pdu+0x16e>
1005aa98:	2501      	movs	r5, #1
1005aa9a:	e77b      	b.n	1005a994 <ll_cpe_process_rx_pdu+0xd4>
1005aa9c:	2516      	movs	r5, #22
1005aa9e:	4616      	mov	r6, r2
1005aaa0:	e7a2      	b.n	1005a9e8 <ll_cpe_process_rx_pdu+0x128>
1005aaa2:	46c0      	nop			@ (mov r8, r8)

1005aaa4 <__arm_cp.58_0>:
1005aaa4:	00000441 	.word	0x00000441

1005aaa8 <__arm_cp.58_1>:
1005aaa8:	1006a050 	.word	0x1006a050

1005aaac <ll_cpe_get_instant_active>:
1005aaac:	b580      	push	{r7, lr}
1005aaae:	f7ff f8a3 	bl	10059bf8 <ll_cpe_get_ctrl_flds_per_sm_p>
1005aab2:	7800      	ldrb	r0, [r0, #0]
1005aab4:	0640      	lsls	r0, r0, #25
1005aab6:	0fc0      	lsrs	r0, r0, #31
1005aab8:	bd80      	pop	{r7, pc}

1005aaba <ll_cpe_clr_rx_pdu_discarded_by_one_sm>:
1005aaba:	b580      	push	{r7, lr}
1005aabc:	f7ff f888 	bl	10059bd0 <LL_cpe_get_ctrl_flds_common_p>
1005aac0:	8801      	ldrh	r1, [r0, #0]
1005aac2:	2204      	movs	r2, #4
1005aac4:	4391      	bics	r1, r2
1005aac6:	8001      	strh	r1, [r0, #0]
1005aac8:	bd80      	pop	{r7, pc}

1005aaca <ll_cpe_check_instant_blocked>:
1005aaca:	b5b0      	push	{r4, r5, r7, lr}
1005aacc:	460c      	mov	r4, r1
1005aace:	4605      	mov	r5, r0
1005aad0:	2aff      	cmp	r2, #255	@ 0xff
1005aad2:	d003      	beq.n	1005aadc <ll_cpe_check_instant_blocked+0x12>
1005aad4:	4610      	mov	r0, r2
1005aad6:	f000 f817 	bl	1005ab08 <LL_cpe_is_opcode_supporting_instant>
1005aada:	e003      	b.n	1005aae4 <ll_cpe_check_instant_blocked+0x1a>
1005aadc:	4628      	mov	r0, r5
1005aade:	4621      	mov	r1, r4
1005aae0:	f000 f80a 	bl	1005aaf8 <ll_cpe_get_instant_supported>
1005aae4:	2800      	cmp	r0, #0
1005aae6:	d005      	beq.n	1005aaf4 <ll_cpe_check_instant_blocked+0x2a>
1005aae8:	2202      	movs	r2, #2
1005aaea:	4628      	mov	r0, r5
1005aaec:	4621      	mov	r1, r4
1005aaee:	f7ff fcfe 	bl	1005a4ee <ll_cpe_get_blocked_status>
1005aaf2:	bdb0      	pop	{r4, r5, r7, pc}
1005aaf4:	2000      	movs	r0, #0
1005aaf6:	bdb0      	pop	{r4, r5, r7, pc}

1005aaf8 <ll_cpe_get_instant_supported>:
1005aaf8:	b580      	push	{r7, lr}
1005aafa:	f7ff f87d 	bl	10059bf8 <ll_cpe_get_ctrl_flds_per_sm_p>
1005aafe:	7800      	ldrb	r0, [r0, #0]
1005ab00:	0680      	lsls	r0, r0, #26
1005ab02:	0fc0      	lsrs	r0, r0, #31
1005ab04:	bd80      	pop	{r7, pc}
	...

1005ab08 <LL_cpe_is_opcode_supporting_instant>:
1005ab08:	b510      	push	{r4, lr}
1005ab0a:	4601      	mov	r1, r0
1005ab0c:	2000      	movs	r0, #0
1005ab0e:	a205      	add	r2, pc, #20	@ (adr r2, 1005ab24 <LL_cpe_is_opcode_supporting_instant+0x1c>)
1005ab10:	4603      	mov	r3, r0
1005ab12:	2b04      	cmp	r3, #4
1005ab14:	d004      	beq.n	1005ab20 <LL_cpe_is_opcode_supporting_instant+0x18>
1005ab16:	5cd4      	ldrb	r4, [r2, r3]
1005ab18:	1c5b      	adds	r3, r3, #1
1005ab1a:	428c      	cmp	r4, r1
1005ab1c:	d1f9      	bne.n	1005ab12 <LL_cpe_is_opcode_supporting_instant+0xa>
1005ab1e:	2001      	movs	r0, #1
1005ab20:	bd10      	pop	{r4, pc}
1005ab22:	46c0      	nop			@ (mov r8, r8)
1005ab24:	1f160001 	.word	0x1f160001

1005ab28 <LL_cpe_get_cpf>:
1005ab28:	b510      	push	{r4, lr}
1005ab2a:	4601      	mov	r1, r0
1005ab2c:	3914      	subs	r1, #20
1005ab2e:	2903      	cmp	r1, #3
1005ab30:	d201      	bcs.n	1005ab36 <LL_cpe_get_cpf+0xe>
1005ab32:	2000      	movs	r0, #0
1005ab34:	bd10      	pop	{r4, pc}
1005ab36:	0084      	lsls	r4, r0, #2
1005ab38:	f7fd faac 	bl	10058094 <llc_conn_get_cntxt_p>
1005ab3c:	6880      	ldr	r0, [r0, #8]
1005ab3e:	5900      	ldr	r0, [r0, r4]
1005ab40:	bd10      	pop	{r4, pc}

1005ab42 <ll_cpe_set_expected_opcode>:
1005ab42:	b5b0      	push	{r4, r5, r7, lr}
1005ab44:	4614      	mov	r4, r2
1005ab46:	460d      	mov	r5, r1
1005ab48:	f7fd faae 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005ab4c:	1940      	adds	r0, r0, r5
1005ab4e:	21ae      	movs	r1, #174	@ 0xae
1005ab50:	5444      	strb	r4, [r0, r1]
1005ab52:	bdb0      	pop	{r4, r5, r7, pc}

1005ab54 <LL_channel_map_update_param_check>:
1005ab54:	b5b0      	push	{r4, r5, r7, lr}
1005ab56:	4601      	mov	r1, r0
1005ab58:	7900      	ldrb	r0, [r0, #4]
1005ab5a:	281f      	cmp	r0, #31
1005ab5c:	d811      	bhi.n	1005ab82 <LL_channel_map_update_param_check+0x2e>
1005ab5e:	2000      	movs	r0, #0
1005ab60:	4602      	mov	r2, r0
1005ab62:	4603      	mov	r3, r0
1005ab64:	2a25      	cmp	r2, #37	@ 0x25
1005ab66:	d00f      	beq.n	1005ab88 <LL_channel_map_update_param_check+0x34>
1005ab68:	2407      	movs	r4, #7
1005ab6a:	4014      	ands	r4, r2
1005ab6c:	08d5      	lsrs	r5, r2, #3
1005ab6e:	5d4d      	ldrb	r5, [r1, r5]
1005ab70:	40e5      	lsrs	r5, r4
1005ab72:	07ec      	lsls	r4, r5, #31
1005ab74:	d003      	beq.n	1005ab7e <LL_channel_map_update_param_check+0x2a>
1005ab76:	1c5b      	adds	r3, r3, #1
1005ab78:	b2dc      	uxtb	r4, r3
1005ab7a:	2c02      	cmp	r4, #2
1005ab7c:	d003      	beq.n	1005ab86 <LL_channel_map_update_param_check+0x32>
1005ab7e:	1c52      	adds	r2, r2, #1
1005ab80:	e7f0      	b.n	1005ab64 <LL_channel_map_update_param_check+0x10>
1005ab82:	2000      	movs	r0, #0
1005ab84:	bdb0      	pop	{r4, r5, r7, pc}
1005ab86:	2001      	movs	r0, #1
1005ab88:	bdb0      	pop	{r4, r5, r7, pc}
	...

1005ab8c <LLC_channel_map_copy_to_cpf_context_ucfg_weak>:
1005ab8c:	b580      	push	{r7, lr}
1005ab8e:	4904      	ldr	r1, [pc, #16]	@ (1005aba0 <__arm_cp.1_0>)
1005ab90:	6809      	ldr	r1, [r1, #0]
1005ab92:	229c      	movs	r2, #156	@ 0x9c
1005ab94:	5889      	ldr	r1, [r1, r2]
1005ab96:	3148      	adds	r1, #72	@ 0x48
1005ab98:	2205      	movs	r2, #5
1005ab9a:	f7eb fa5b 	bl	10046054 <BLEPLAT_MemCpy>
1005ab9e:	bd80      	pop	{r7, pc}

1005aba0 <__arm_cp.1_0>:
1005aba0:	200010f4 	.word	0x200010f4

1005aba4 <LL_channel_map_update>:
1005aba4:	b5f0      	push	{r4, r5, r6, r7, lr}
1005aba6:	b085      	sub	sp, #20
1005aba8:	461e      	mov	r6, r3
1005abaa:	4617      	mov	r7, r2
1005abac:	4605      	mov	r5, r0
1005abae:	9103      	str	r1, [sp, #12]
1005abb0:	f7ff f87f 	bl	10059cb2 <LL_cpe_get_cntxt>
1005abb4:	4604      	mov	r4, r0
1005abb6:	4628      	mov	r0, r5
1005abb8:	f7fd fa76 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005abbc:	4602      	mov	r2, r0
1005abbe:	1e78      	subs	r0, r7, #1
1005abc0:	2806      	cmp	r0, #6
1005abc2:	d86c      	bhi.n	1005ac9e <LL_channel_map_update+0xfa>
1005abc4:	4478      	add	r0, pc
1005abc6:	7900      	ldrb	r0, [r0, #4]
1005abc8:	0040      	lsls	r0, r0, #1
1005abca:	4487      	add	pc, r0
1005abcc:	30680303 	.word	0x30680303
1005abd0:	005a3568 	.word	0x005a3568
1005abd4:	202c      	movs	r0, #44	@ 0x2c
1005abd6:	5c10      	ldrb	r0, [r2, r0]
1005abd8:	2803      	cmp	r0, #3
1005abda:	d160      	bne.n	1005ac9e <LL_channel_map_update+0xfa>
1005abdc:	9202      	str	r2, [sp, #8]
1005abde:	1cf0      	adds	r0, r6, #3
1005abe0:	4607      	mov	r7, r0
1005abe2:	f7ff ffb7 	bl	1005ab54 <LL_channel_map_update_param_check>
1005abe6:	2801      	cmp	r0, #1
1005abe8:	d151      	bne.n	1005ac8e <LL_channel_map_update+0xea>
1005abea:	7a30      	ldrb	r0, [r6, #8]
1005abec:	9001      	str	r0, [sp, #4]
1005abee:	7a76      	ldrb	r6, [r6, #9]
1005abf0:	2205      	movs	r2, #5
1005abf2:	4638      	mov	r0, r7
1005abf4:	4621      	mov	r1, r4
1005abf6:	f007 fde7 	bl	100627c8 <char_copy>
1005abfa:	0230      	lsls	r0, r6, #8
1005abfc:	9901      	ldr	r1, [sp, #4]
1005abfe:	1840      	adds	r0, r0, r1
1005ac00:	b282      	uxth	r2, r0
1005ac02:	9802      	ldr	r0, [sp, #8]
1005ac04:	4621      	mov	r1, r4
1005ac06:	f7fd ff63 	bl	10058ad0 <llc_conn_set_chmap_params>
1005ac0a:	2600      	movs	r6, #0
1005ac0c:	2702      	movs	r7, #2
1005ac0e:	4628      	mov	r0, r5
1005ac10:	4631      	mov	r1, r6
1005ac12:	463a      	mov	r2, r7
1005ac14:	f7ff f830 	bl	10059c78 <LL_cpe_set_blocked>
1005ac18:	2301      	movs	r3, #1
1005ac1a:	4628      	mov	r0, r5
1005ac1c:	4631      	mov	r1, r6
1005ac1e:	463a      	mov	r2, r7
1005ac20:	f7fe fff1 	bl	10059c06 <LL_cpe_set_active>
1005ac24:	4628      	mov	r0, r5
1005ac26:	9903      	ldr	r1, [sp, #12]
1005ac28:	f7ff f85b 	bl	10059ce2 <LL_cpe_set_rx_with_instant>
1005ac2c:	e037      	b.n	1005ac9e <LL_channel_map_update+0xfa>
1005ac2e:	78b0      	ldrb	r0, [r6, #2]
1005ac30:	2801      	cmp	r0, #1
1005ac32:	d030      	beq.n	1005ac96 <LL_channel_map_update+0xf2>
1005ac34:	212a      	movs	r1, #42	@ 0x2a
1005ac36:	e02f      	b.n	1005ac98 <LL_channel_map_update+0xf4>
1005ac38:	4628      	mov	r0, r5
1005ac3a:	9202      	str	r2, [sp, #8]
1005ac3c:	f7ff fe08 	bl	1005a850 <llc_cpe_calc_instant>
1005ac40:	af04      	add	r7, sp, #16
1005ac42:	8038      	strh	r0, [r7, #0]
1005ac44:	4620      	mov	r0, r4
1005ac46:	4629      	mov	r1, r5
1005ac48:	f7ff ffa0 	bl	1005ab8c <LLC_channel_map_copy_to_cpf_context_ucfg_weak>
1005ac4c:	2001      	movs	r0, #1
1005ac4e:	70b0      	strb	r0, [r6, #2]
1005ac50:	2008      	movs	r0, #8
1005ac52:	7070      	strb	r0, [r6, #1]
1005ac54:	2003      	movs	r0, #3
1005ac56:	7030      	strb	r0, [r6, #0]
1005ac58:	1cf1      	adds	r1, r6, #3
1005ac5a:	2205      	movs	r2, #5
1005ac5c:	4620      	mov	r0, r4
1005ac5e:	f007 fdb3 	bl	100627c8 <char_copy>
1005ac62:	3608      	adds	r6, #8
1005ac64:	2202      	movs	r2, #2
1005ac66:	4638      	mov	r0, r7
1005ac68:	4631      	mov	r1, r6
1005ac6a:	f007 fdad 	bl	100627c8 <char_copy>
1005ac6e:	883a      	ldrh	r2, [r7, #0]
1005ac70:	9802      	ldr	r0, [sp, #8]
1005ac72:	4621      	mov	r1, r4
1005ac74:	f7fd ff2c 	bl	10058ad0 <llc_conn_set_chmap_params>
1005ac78:	4628      	mov	r0, r5
1005ac7a:	9903      	ldr	r1, [sp, #12]
1005ac7c:	f7ff f822 	bl	10059cc4 <LL_cpe_set_tx_with_instant>
1005ac80:	e00d      	b.n	1005ac9e <LL_channel_map_update+0xfa>
1005ac82:	2202      	movs	r2, #2
1005ac84:	4628      	mov	r0, r5
1005ac86:	9903      	ldr	r1, [sp, #12]
1005ac88:	f7fe ffd4 	bl	10059c34 <LL_cpe_clr_active>
1005ac8c:	e007      	b.n	1005ac9e <LL_channel_map_update+0xfa>
1005ac8e:	4628      	mov	r0, r5
1005ac90:	f7fe ff86 	bl	10059ba0 <ll_cpe_set_unknown_rsp_pending>
1005ac94:	e003      	b.n	1005ac9e <LL_channel_map_update+0xfa>
1005ac96:	2123      	movs	r1, #35	@ 0x23
1005ac98:	4610      	mov	r0, r2
1005ac9a:	f7fe f87f 	bl	10058d9c <llc_conn_disconnect_link_from_cpf>
1005ac9e:	20ff      	movs	r0, #255	@ 0xff
1005aca0:	b005      	add	sp, #20
1005aca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005aca4 <LLC_channel_map_update_offline_processing_ucfg_weak>:
1005aca4:	2000      	movs	r0, #0
1005aca6:	4770      	bx	lr

1005aca8 <LLC_conn_init_chc_ctxt_ucfg_weak>:
1005aca8:	4770      	bx	lr

1005acaa <LLC_chc_ll_cntxt_init_ucfg_weak>:
1005acaa:	4770      	bx	lr

1005acac <LLC_chc_reporting_offline_processing_ucfg_weak>:
1005acac:	2000      	movs	r0, #0
1005acae:	4770      	bx	lr

1005acb0 <LL_cpf_cis_processing_ucfg_weak>:
1005acb0:	4770      	bx	lr
	...

1005acb4 <LL_cpf_conn_upd>:
1005acb4:	b5f0      	push	{r4, r5, r6, r7, lr}
1005acb6:	b091      	sub	sp, #68	@ 0x44
1005acb8:	461e      	mov	r6, r3
1005acba:	4614      	mov	r4, r2
1005acbc:	4605      	mov	r5, r0
1005acbe:	910c      	str	r1, [sp, #48]	@ 0x30
1005acc0:	f7fe fff7 	bl	10059cb2 <LL_cpe_get_cntxt>
1005acc4:	4607      	mov	r7, r0
1005acc6:	4628      	mov	r0, r5
1005acc8:	f7fd f9ee 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005accc:	4603      	mov	r3, r0
1005acce:	1e60      	subs	r0, r4, #1
1005acd0:	2807      	cmp	r0, #7
1005acd2:	d900      	bls.n	1005acd6 <LL_cpf_conn_upd+0x22>
1005acd4:	e0ce      	b.n	1005ae74 <LL_cpf_conn_upd+0x1c0>
1005acd6:	46c0      	nop			@ (mov r8, r8)
1005acd8:	4478      	add	r0, pc
1005acda:	7900      	ldrb	r0, [r0, #4]
1005acdc:	0040      	lsls	r0, r0, #1
1005acde:	4487      	add	pc, r0
1005ace0:	22c90303 	.word	0x22c90303
1005ace4:	c47c2fc9 	.word	0xc47c2fc9
1005ace8:	4618      	mov	r0, r3
1005acea:	302c      	adds	r0, #44	@ 0x2c
1005acec:	7800      	ldrb	r0, [r0, #0]
1005acee:	2803      	cmp	r0, #3
1005acf0:	d000      	beq.n	1005acf4 <LL_cpf_conn_upd+0x40>
1005acf2:	e0bf      	b.n	1005ae74 <LL_cpf_conn_upd+0x1c0>
1005acf4:	2091      	movs	r0, #145	@ 0x91
1005acf6:	0040      	lsls	r0, r0, #1
1005acf8:	930b      	str	r3, [sp, #44]	@ 0x2c
1005acfa:	1819      	adds	r1, r3, r0
1005acfc:	8973      	ldrh	r3, [r6, #10]
1005acfe:	8932      	ldrh	r2, [r6, #8]
1005ad00:	88f0      	ldrh	r0, [r6, #6]
1005ad02:	880c      	ldrh	r4, [r1, #0]
1005ad04:	2100      	movs	r1, #0
1005ad06:	9100      	str	r1, [sp, #0]
1005ad08:	9101      	str	r1, [sp, #4]
1005ad0a:	9402      	str	r4, [sp, #8]
1005ad0c:	900a      	str	r0, [sp, #40]	@ 0x28
1005ad0e:	4601      	mov	r1, r0
1005ad10:	9209      	str	r2, [sp, #36]	@ 0x24
1005ad12:	461c      	mov	r4, r3
1005ad14:	f000 f906 	bl	1005af24 <llc_conn_upd_params_check>
1005ad18:	2800      	cmp	r0, #0
1005ad1a:	d100      	bne.n	1005ad1e <LL_cpf_conn_upd+0x6a>
1005ad1c:	e0ad      	b.n	1005ae7a <LL_cpf_conn_upd+0x1c6>
1005ad1e:	4628      	mov	r0, r5
1005ad20:	f7fe ff3e 	bl	10059ba0 <ll_cpe_set_unknown_rsp_pending>
1005ad24:	e0a6      	b.n	1005ae74 <LL_cpf_conn_upd+0x1c0>
1005ad26:	78b0      	ldrb	r0, [r6, #2]
1005ad28:	2123      	movs	r1, #35	@ 0x23
1005ad2a:	280f      	cmp	r0, #15
1005ad2c:	460a      	mov	r2, r1
1005ad2e:	d000      	beq.n	1005ad32 <LL_cpf_conn_upd+0x7e>
1005ad30:	222a      	movs	r2, #42	@ 0x2a
1005ad32:	2800      	cmp	r0, #0
1005ad34:	d000      	beq.n	1005ad38 <LL_cpf_conn_upd+0x84>
1005ad36:	4611      	mov	r1, r2
1005ad38:	4618      	mov	r0, r3
1005ad3a:	f7fe f82f 	bl	10058d9c <llc_conn_disconnect_link_from_cpf>
1005ad3e:	e099      	b.n	1005ae74 <LL_cpf_conn_upd+0x1c0>
1005ad40:	930b      	str	r3, [sp, #44]	@ 0x2c
1005ad42:	1cb0      	adds	r0, r6, #2
1005ad44:	9008      	str	r0, [sp, #32]
1005ad46:	f7fd f9a5 	bl	10058094 <llc_conn_get_cntxt_p>
1005ad4a:	9009      	str	r0, [sp, #36]	@ 0x24
1005ad4c:	4628      	mov	r0, r5
1005ad4e:	f7ff fd7f 	bl	1005a850 <llc_cpe_calc_instant>
1005ad52:	4604      	mov	r4, r0
1005ad54:	2028      	movs	r0, #40	@ 0x28
1005ad56:	2101      	movs	r1, #1
1005ad58:	9107      	str	r1, [sp, #28]
1005ad5a:	5439      	strb	r1, [r7, r0]
1005ad5c:	8b38      	ldrh	r0, [r7, #24]
1005ad5e:	8b79      	ldrh	r1, [r7, #26]
1005ad60:	1808      	adds	r0, r1, r0
1005ad62:	0840      	lsrs	r0, r0, #1
1005ad64:	9010      	str	r0, [sp, #64]	@ 0x40
1005ad66:	8bb8      	ldrh	r0, [r7, #28]
1005ad68:	9006      	str	r0, [sp, #24]
1005ad6a:	8bf8      	ldrh	r0, [r7, #30]
1005ad6c:	9005      	str	r0, [sp, #20]
1005ad6e:	a80d      	add	r0, sp, #52	@ 0x34
1005ad70:	7105      	strb	r5, [r0, #4]
1005ad72:	a910      	add	r1, sp, #64	@ 0x40
1005ad74:	910f      	str	r1, [sp, #60]	@ 0x3c
1005ad76:	970d      	str	r7, [sp, #52]	@ 0x34
1005ad78:	f7f6 fd66 	bl	10051848 <LL_conn_upd_max_tx_time_coded_ucfg>
1005ad7c:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005ad7e:	8338      	strh	r0, [r7, #24]
1005ad80:	940a      	str	r4, [sp, #40]	@ 0x28
1005ad82:	0421      	lsls	r1, r4, #16
1005ad84:	9a05      	ldr	r2, [sp, #20]
1005ad86:	1889      	adds	r1, r1, r2
1005ad88:	9104      	str	r1, [sp, #16]
1005ad8a:	9c06      	ldr	r4, [sp, #24]
1005ad8c:	0423      	lsls	r3, r4, #16
1005ad8e:	4303      	orrs	r3, r0
1005ad90:	9808      	ldr	r0, [sp, #32]
1005ad92:	4962      	ldr	r1, [pc, #392]	@ (1005af1c <__arm_cp.0_2>)
1005ad94:	c00a      	stmia	r0!, {r1, r3}
1005ad96:	9904      	ldr	r1, [sp, #16]
1005ad98:	6001      	str	r1, [r0, #0]
1005ad9a:	4861      	ldr	r0, [pc, #388]	@ (1005af20 <__arm_cp.0_3>)
1005ad9c:	8030      	strh	r0, [r6, #0]
1005ad9e:	2003      	movs	r0, #3
1005ada0:	0240      	lsls	r0, r0, #9
1005ada2:	0311      	lsls	r1, r2, #12
1005ada4:	60fc      	str	r4, [r7, #12]
1005ada6:	6139      	str	r1, [r7, #16]
1005ada8:	9907      	ldr	r1, [sp, #28]
1005adaa:	0249      	lsls	r1, r1, #9
1005adac:	c703      	stmia	r7!, {r0, r1}
1005adae:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005adb0:	6800      	ldr	r0, [r0, #0]
1005adb2:	8b79      	ldrh	r1, [r7, #26]
1005adb4:	0209      	lsls	r1, r1, #8
1005adb6:	3f08      	subs	r7, #8
1005adb8:	4288      	cmp	r0, r1
1005adba:	d300      	bcc.n	1005adbe <LL_cpf_conn_upd+0x10a>
1005adbc:	4608      	mov	r0, r1
1005adbe:	6178      	str	r0, [r7, #20]
1005adc0:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005adc2:	0240      	lsls	r0, r0, #9
1005adc4:	60b8      	str	r0, [r7, #8]
1005adc6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005adc8:	4639      	mov	r1, r7
1005adca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1005adcc:	f7fd fe89 	bl	10058ae2 <llc_conn_set_conn_update_params>
1005add0:	4628      	mov	r0, r5
1005add2:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005add4:	f7fe ff76 	bl	10059cc4 <LL_cpe_set_tx_with_instant>
1005add8:	e04c      	b.n	1005ae74 <LL_cpf_conn_upd+0x1c0>
1005adda:	2028      	movs	r0, #40	@ 0x28
1005addc:	5c38      	ldrb	r0, [r7, r0]
1005adde:	2801      	cmp	r0, #1
1005ade0:	d143      	bne.n	1005ae6a <LL_cpf_conn_upd+0x1b6>
1005ade2:	461c      	mov	r4, r3
1005ade4:	a80d      	add	r0, sp, #52	@ 0x34
1005ade6:	7105      	strb	r5, [r0, #4]
1005ade8:	970d      	str	r7, [sp, #52]	@ 0x34
1005adea:	f7f6 fd39 	bl	10051860 <LL_conn_upd_data_length_change_event_ucfg>
1005adee:	4849      	ldr	r0, [pc, #292]	@ (1005af14 <__arm_cp.0_0>)
1005adf0:	6800      	ldr	r0, [r0, #0]
1005adf2:	213d      	movs	r1, #61	@ 0x3d
1005adf4:	5c41      	ldrb	r1, [r0, r1]
1005adf6:	0689      	lsls	r1, r1, #26
1005adf8:	d532      	bpl.n	1005ae60 <LL_cpf_conn_upd+0x1ac>
1005adfa:	303d      	adds	r0, #61	@ 0x3d
1005adfc:	7a40      	ldrb	r0, [r0, #9]
1005adfe:	0740      	lsls	r0, r0, #29
1005ae00:	d52e      	bpl.n	1005ae60 <LL_cpf_conn_upd+0x1ac>
1005ae02:	8bf8      	ldrh	r0, [r7, #30]
1005ae04:	900a      	str	r0, [sp, #40]	@ 0x28
1005ae06:	8bb8      	ldrh	r0, [r7, #28]
1005ae08:	9009      	str	r0, [sp, #36]	@ 0x24
1005ae0a:	8b3f      	ldrh	r7, [r7, #24]
1005ae0c:	8f64      	ldrh	r4, [r4, #58]	@ 0x3a
1005ae0e:	4842      	ldr	r0, [pc, #264]	@ (1005af18 <__arm_cp.0_1>)
1005ae10:	6800      	ldr	r0, [r0, #0]
1005ae12:	6900      	ldr	r0, [r0, #16]
1005ae14:	2180      	movs	r1, #128	@ 0x80
1005ae16:	2224      	movs	r2, #36	@ 0x24
1005ae18:	2604      	movs	r6, #4
1005ae1a:	4633      	mov	r3, r6
1005ae1c:	f7f8 f88c 	bl	10052f38 <aci_event_fifo_push_header>
1005ae20:	2800      	cmp	r0, #0
1005ae22:	d01d      	beq.n	1005ae60 <LL_cpf_conn_upd+0x1ac>
1005ae24:	4601      	mov	r1, r0
1005ae26:	300b      	adds	r0, #11
1005ae28:	724c      	strb	r4, [r1, #9]
1005ae2a:	7007      	strb	r7, [r0, #0]
1005ae2c:	970b      	str	r7, [sp, #44]	@ 0x2c
1005ae2e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005ae30:	734f      	strb	r7, [r1, #13]
1005ae32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1005ae34:	7103      	strb	r3, [r0, #4]
1005ae36:	2200      	movs	r2, #0
1005ae38:	720a      	strb	r2, [r1, #8]
1005ae3a:	2203      	movs	r2, #3
1005ae3c:	71ca      	strb	r2, [r1, #7]
1005ae3e:	220a      	movs	r2, #10
1005ae40:	718a      	strb	r2, [r1, #6]
1005ae42:	223e      	movs	r2, #62	@ 0x3e
1005ae44:	714a      	strb	r2, [r1, #5]
1005ae46:	710e      	strb	r6, [r1, #4]
1005ae48:	0a22      	lsrs	r2, r4, #8
1005ae4a:	728a      	strb	r2, [r1, #10]
1005ae4c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1005ae4e:	0a12      	lsrs	r2, r2, #8
1005ae50:	7042      	strb	r2, [r0, #1]
1005ae52:	0a3a      	lsrs	r2, r7, #8
1005ae54:	738a      	strb	r2, [r1, #14]
1005ae56:	0a1a      	lsrs	r2, r3, #8
1005ae58:	7142      	strb	r2, [r0, #5]
1005ae5a:	2080      	movs	r0, #128	@ 0x80
1005ae5c:	f7f8 f909 	bl	10053072 <aci_event_fifo_push>
1005ae60:	2100      	movs	r1, #0
1005ae62:	4628      	mov	r0, r5
1005ae64:	460a      	mov	r2, r1
1005ae66:	f001 f9c3 	bl	1005c1f0 <LLC_update_le_ping_params>
1005ae6a:	2200      	movs	r2, #0
1005ae6c:	4628      	mov	r0, r5
1005ae6e:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005ae70:	f7fe fee0 	bl	10059c34 <LL_cpe_clr_active>
1005ae74:	20ff      	movs	r0, #255	@ 0xff
1005ae76:	b011      	add	sp, #68	@ 0x44
1005ae78:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005ae7a:	78f0      	ldrb	r0, [r6, #3]
1005ae7c:	2800      	cmp	r0, #0
1005ae7e:	d100      	bne.n	1005ae82 <LL_cpf_conn_upd+0x1ce>
1005ae80:	e74d      	b.n	1005ad1e <LL_cpf_conn_upd+0x6a>
1005ae82:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005ae84:	1e49      	subs	r1, r1, #1
1005ae86:	2908      	cmp	r1, #8
1005ae88:	d300      	bcc.n	1005ae8c <LL_cpf_conn_upd+0x1d8>
1005ae8a:	2108      	movs	r1, #8
1005ae8c:	4281      	cmp	r1, r0
1005ae8e:	d200      	bcs.n	1005ae92 <LL_cpf_conn_upd+0x1de>
1005ae90:	e745      	b.n	1005ad1e <LL_cpf_conn_upd+0x6a>
1005ae92:	88b2      	ldrh	r2, [r6, #4]
1005ae94:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005ae96:	428a      	cmp	r2, r1
1005ae98:	d900      	bls.n	1005ae9c <LL_cpf_conn_upd+0x1e8>
1005ae9a:	e740      	b.n	1005ad1e <LL_cpf_conn_upd+0x6a>
1005ae9c:	83fc      	strh	r4, [r7, #30]
1005ae9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005aea0:	83b9      	strh	r1, [r7, #28]
1005aea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1005aea4:	833b      	strh	r3, [r7, #24]
1005aea6:	837b      	strh	r3, [r7, #26]
1005aea8:	0324      	lsls	r4, r4, #12
1005aeaa:	025b      	lsls	r3, r3, #9
1005aeac:	0252      	lsls	r2, r2, #9
1005aeae:	0240      	lsls	r0, r0, #9
1005aeb0:	c70d      	stmia	r7!, {r0, r2, r3}
1005aeb2:	6039      	str	r1, [r7, #0]
1005aeb4:	607c      	str	r4, [r7, #4]
1005aeb6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005aeb8:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
1005aeba:	2001      	movs	r0, #1
1005aebc:	3f0c      	subs	r7, #12
1005aebe:	429a      	cmp	r2, r3
1005aec0:	d107      	bne.n	1005aed2 <LL_cpf_conn_upd+0x21e>
1005aec2:	6e8a      	ldr	r2, [r1, #104]	@ 0x68
1005aec4:	4294      	cmp	r4, r2
1005aec6:	d104      	bne.n	1005aed2 <LL_cpf_conn_upd+0x21e>
1005aec8:	8f08      	ldrh	r0, [r1, #56]	@ 0x38
1005aeca:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005aecc:	1a08      	subs	r0, r1, r0
1005aece:	1e41      	subs	r1, r0, #1
1005aed0:	4188      	sbcs	r0, r1
1005aed2:	2128      	movs	r1, #40	@ 0x28
1005aed4:	5478      	strb	r0, [r7, r1]
1005aed6:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005aed8:	9010      	str	r0, [sp, #64]	@ 0x40
1005aeda:	a80d      	add	r0, sp, #52	@ 0x34
1005aedc:	7105      	strb	r5, [r0, #4]
1005aede:	a910      	add	r1, sp, #64	@ 0x40
1005aee0:	910f      	str	r1, [sp, #60]	@ 0x3c
1005aee2:	970d      	str	r7, [sp, #52]	@ 0x34
1005aee4:	f7f6 fcb0 	bl	10051848 <LL_conn_upd_max_tx_time_coded_ucfg>
1005aee8:	2202      	movs	r2, #2
1005aeea:	4628      	mov	r0, r5
1005aeec:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
1005aeee:	4621      	mov	r1, r4
1005aef0:	f7fe fec2 	bl	10059c78 <LL_cpe_set_blocked>
1005aef4:	2200      	movs	r2, #0
1005aef6:	2301      	movs	r3, #1
1005aef8:	4628      	mov	r0, r5
1005aefa:	4621      	mov	r1, r4
1005aefc:	f7fe fe83 	bl	10059c06 <LL_cpe_set_active>
1005af00:	89b2      	ldrh	r2, [r6, #12]
1005af02:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005af04:	4639      	mov	r1, r7
1005af06:	f7fd fdec 	bl	10058ae2 <llc_conn_set_conn_update_params>
1005af0a:	4628      	mov	r0, r5
1005af0c:	4621      	mov	r1, r4
1005af0e:	f7fe fee8 	bl	10059ce2 <LL_cpe_set_rx_with_instant>
1005af12:	e7af      	b.n	1005ae74 <LL_cpf_conn_upd+0x1c0>

1005af14 <__arm_cp.0_0>:
1005af14:	200010f4 	.word	0x200010f4

1005af18 <__arm_cp.0_1>:
1005af18:	200010a4 	.word	0x200010a4

1005af1c <__arm_cp.0_2>:
1005af1c:	00010300 	.word	0x00010300

1005af20 <__arm_cp.0_3>:
1005af20:	00000c03 	.word	0x00000c03

1005af24 <llc_conn_upd_params_check>:
1005af24:	b570      	push	{r4, r5, r6, lr}
1005af26:	4604      	mov	r4, r0
1005af28:	2012      	movs	r0, #18
1005af2a:	2c06      	cmp	r4, #6
1005af2c:	d31c      	bcc.n	1005af68 <llc_conn_upd_params_check+0x44>
1005af2e:	2519      	movs	r5, #25
1005af30:	01ed      	lsls	r5, r5, #7
1005af32:	42ac      	cmp	r4, r5
1005af34:	d818      	bhi.n	1005af68 <llc_conn_upd_params_check+0x44>
1005af36:	2906      	cmp	r1, #6
1005af38:	d316      	bcc.n	1005af68 <llc_conn_upd_params_check+0x44>
1005af3a:	42a9      	cmp	r1, r5
1005af3c:	d814      	bhi.n	1005af68 <llc_conn_upd_params_check+0x44>
1005af3e:	42a1      	cmp	r1, r4
1005af40:	d312      	bcc.n	1005af68 <llc_conn_upd_params_check+0x44>
1005af42:	0894      	lsrs	r4, r2, #2
1005af44:	2c7c      	cmp	r4, #124	@ 0x7c
1005af46:	d80f      	bhi.n	1005af68 <llc_conn_upd_params_check+0x44>
1005af48:	9c05      	ldr	r4, [sp, #20]
1005af4a:	9e04      	ldr	r6, [sp, #16]
1005af4c:	42b4      	cmp	r4, r6
1005af4e:	d30b      	bcc.n	1005af68 <llc_conn_upd_params_check+0x44>
1005af50:	2b0a      	cmp	r3, #10
1005af52:	d309      	bcc.n	1005af68 <llc_conn_upd_params_check+0x44>
1005af54:	42ab      	cmp	r3, r5
1005af56:	d807      	bhi.n	1005af68 <llc_conn_upd_params_check+0x44>
1005af58:	9806      	ldr	r0, [sp, #24]
1005af5a:	1c52      	adds	r2, r2, #1
1005af5c:	434a      	muls	r2, r1
1005af5e:	4342      	muls	r2, r0
1005af60:	0890      	lsrs	r0, r2, #2
1005af62:	4283      	cmp	r3, r0
1005af64:	d801      	bhi.n	1005af6a <llc_conn_upd_params_check+0x46>
1005af66:	2012      	movs	r0, #18
1005af68:	bd70      	pop	{r4, r5, r6, pc}
1005af6a:	2000      	movs	r0, #0
1005af6c:	bd70      	pop	{r4, r5, r6, pc}
	...

1005af70 <LL_conn_upd_max_tx_time_coded>:
1005af70:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005af72:	4606      	mov	r6, r0
1005af74:	6887      	ldr	r7, [r0, #8]
1005af76:	7904      	ldrb	r4, [r0, #4]
1005af78:	4620      	mov	r0, r4
1005af7a:	f7fd f895 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005af7e:	4605      	mov	r5, r0
1005af80:	4620      	mov	r0, r4
1005af82:	f7fd f8c5 	bl	10058110 <llc_conn_get_phy_upd_cntxt_per_p>
1005af86:	2800      	cmp	r0, #0
1005af88:	d044      	beq.n	1005b014 <LL_conn_upd_max_tx_time_coded+0xa4>
1005af8a:	7980      	ldrb	r0, [r0, #6]
1005af8c:	2804      	cmp	r0, #4
1005af8e:	d141      	bne.n	1005b014 <LL_conn_upd_max_tx_time_coded+0xa4>
1005af90:	0278      	lsls	r0, r7, #9
1005af92:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
1005af94:	4281      	cmp	r1, r0
1005af96:	d03d      	beq.n	1005b014 <LL_conn_upd_max_tx_time_coded+0xa4>
1005af98:	4628      	mov	r0, r5
1005af9a:	302c      	adds	r0, #44	@ 0x2c
1005af9c:	9502      	str	r5, [sp, #8]
1005af9e:	35b6      	adds	r5, #182	@ 0xb6
1005afa0:	6839      	ldr	r1, [r7, #0]
1005afa2:	223d      	movs	r2, #61	@ 0x3d
1005afa4:	0112      	lsls	r2, r2, #4
1005afa6:	886b      	ldrh	r3, [r5, #2]
1005afa8:	019b      	lsls	r3, r3, #6
1005afaa:	189a      	adds	r2, r3, r2
1005afac:	88eb      	ldrh	r3, [r5, #6]
1005afae:	429a      	cmp	r2, r3
1005afb0:	d800      	bhi.n	1005afb4 <LL_conn_upd_max_tx_time_coded+0x44>
1005afb2:	4613      	mov	r3, r2
1005afb4:	4a18      	ldr	r2, [pc, #96]	@ (1005b018 <__arm_cp.3_0>)
1005afb6:	434a      	muls	r2, r1
1005afb8:	4611      	mov	r1, r2
1005afba:	6836      	ldr	r6, [r6, #0]
1005afbc:	7800      	ldrb	r0, [r0, #0]
1005afbe:	2802      	cmp	r0, #2
1005afc0:	d10b      	bne.n	1005afda <LL_conn_upd_max_tx_time_coded+0x6a>
1005afc2:	4816      	ldr	r0, [pc, #88]	@ (1005b01c <__arm_cp.3_1>)
1005afc4:	1818      	adds	r0, r3, r0
1005afc6:	4281      	cmp	r1, r0
1005afc8:	d207      	bcs.n	1005afda <LL_conn_upd_max_tx_time_coded+0x6a>
1005afca:	9101      	str	r1, [sp, #4]
1005afcc:	4912      	ldr	r1, [pc, #72]	@ (1005b018 <__arm_cp.3_0>)
1005afce:	9300      	str	r3, [sp, #0]
1005afd0:	f7e6 f93a 	bl	10041248 <__udivsi3>
1005afd4:	9b00      	ldr	r3, [sp, #0]
1005afd6:	9901      	ldr	r1, [sp, #4]
1005afd8:	6038      	str	r0, [r7, #0]
1005afda:	8828      	ldrh	r0, [r5, #0]
1005afdc:	84f0      	strh	r0, [r6, #38]	@ 0x26
1005afde:	204b      	movs	r0, #75	@ 0x4b
1005afe0:	0080      	lsls	r0, r0, #2
1005afe2:	1818      	adds	r0, r3, r0
1005afe4:	1a09      	subs	r1, r1, r0
1005afe6:	d200      	bcs.n	1005afea <LL_conn_upd_max_tx_time_coded+0x7a>
1005afe8:	2100      	movs	r1, #0
1005afea:	8968      	ldrh	r0, [r5, #10]
1005afec:	8a2a      	ldrh	r2, [r5, #16]
1005afee:	4290      	cmp	r0, r2
1005aff0:	d300      	bcc.n	1005aff4 <LL_conn_upd_max_tx_time_coded+0x84>
1005aff2:	4610      	mov	r0, r2
1005aff4:	4281      	cmp	r1, r0
1005aff6:	9b02      	ldr	r3, [sp, #8]
1005aff8:	d800      	bhi.n	1005affc <LL_conn_upd_max_tx_time_coded+0x8c>
1005affa:	4608      	mov	r0, r1
1005affc:	b282      	uxth	r2, r0
1005affe:	21a9      	movs	r1, #169	@ 0xa9
1005b000:	0109      	lsls	r1, r1, #4
1005b002:	428a      	cmp	r2, r1
1005b004:	d800      	bhi.n	1005b008 <LL_conn_upd_max_tx_time_coded+0x98>
1005b006:	4608      	mov	r0, r1
1005b008:	84b0      	strh	r0, [r6, #36]	@ 0x24
1005b00a:	2101      	movs	r1, #1
1005b00c:	4620      	mov	r0, r4
1005b00e:	4632      	mov	r2, r6
1005b010:	f000 f806 	bl	1005b020 <LL_adjust_max_tx_data_frag_coded>
1005b014:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005b016:	46c0      	nop			@ (mov r8, r8)

1005b018 <__arm_cp.3_0>:
1005b018:	000004e2 	.word	0x000004e2

1005b01c <__arm_cp.3_1>:
1005b01c:	00000bbc 	.word	0x00000bbc

1005b020 <LL_adjust_max_tx_data_frag_coded>:
1005b020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005b022:	461c      	mov	r4, r3
1005b024:	4615      	mov	r5, r2
1005b026:	460e      	mov	r6, r1
1005b028:	461f      	mov	r7, r3
1005b02a:	37b4      	adds	r7, #180	@ 0xb4
1005b02c:	f7fd f870 	bl	10058110 <llc_conn_get_phy_upd_cntxt_per_p>
1005b030:	2800      	cmp	r0, #0
1005b032:	d002      	beq.n	1005b03a <LL_adjust_max_tx_data_frag_coded+0x1a>
1005b034:	8800      	ldrh	r0, [r0, #0]
1005b036:	2802      	cmp	r0, #2
1005b038:	d001      	beq.n	1005b03e <LL_adjust_max_tx_data_frag_coded+0x1e>
1005b03a:	2001      	movs	r0, #1
1005b03c:	e000      	b.n	1005b040 <LL_adjust_max_tx_data_frag_coded+0x20>
1005b03e:	2003      	movs	r0, #3
1005b040:	8ca9      	ldrh	r1, [r5, #36]	@ 0x24
1005b042:	4a0b      	ldr	r2, [pc, #44]	@ (1005b070 <__arm_cp.4_0>)
1005b044:	1889      	adds	r1, r1, r2
1005b046:	40c1      	lsrs	r1, r0
1005b048:	480a      	ldr	r0, [pc, #40]	@ (1005b074 <__arm_cp.4_1>)
1005b04a:	1808      	adds	r0, r1, r0
1005b04c:	08c0      	lsrs	r0, r0, #3
1005b04e:	b281      	uxth	r1, r0
1005b050:	8838      	ldrh	r0, [r7, #0]
1005b052:	4288      	cmp	r0, r1
1005b054:	d300      	bcc.n	1005b058 <LL_adjust_max_tx_data_frag_coded+0x38>
1005b056:	4608      	mov	r0, r1
1005b058:	2e00      	cmp	r6, #0
1005b05a:	d002      	beq.n	1005b062 <LL_adjust_max_tx_data_frag_coded+0x42>
1005b05c:	8ce9      	ldrh	r1, [r5, #38]	@ 0x26
1005b05e:	4281      	cmp	r1, r0
1005b060:	d300      	bcc.n	1005b064 <LL_adjust_max_tx_data_frag_coded+0x44>
1005b062:	4601      	mov	r1, r0
1005b064:	8079      	strh	r1, [r7, #2]
1005b066:	4620      	mov	r0, r4
1005b068:	f7fd fae8 	bl	1005863c <llc_conn_guard_time_for_close_conn_event>
1005b06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005b06e:	46c0      	nop			@ (mov r8, r8)

1005b070 <__arm_cp.4_0>:
1005b070:	fffffe88 	.word	0xfffffe88

1005b074 <__arm_cp.4_1>:
1005b074:	0007ffb5 	.word	0x0007ffb5

1005b078 <LL_conn_upd_data_length_change_event>:
1005b078:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005b07a:	6805      	ldr	r5, [r0, #0]
1005b07c:	7906      	ldrb	r6, [r0, #4]
1005b07e:	4630      	mov	r0, r6
1005b080:	f7fd f812 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005b084:	4607      	mov	r7, r0
1005b086:	4630      	mov	r0, r6
1005b088:	f7fd f842 	bl	10058110 <llc_conn_get_phy_upd_cntxt_per_p>
1005b08c:	2800      	cmp	r0, #0
1005b08e:	d047      	beq.n	1005b120 <LL_conn_upd_data_length_change_event+0xa8>
1005b090:	7980      	ldrb	r0, [r0, #6]
1005b092:	2804      	cmp	r0, #4
1005b094:	d144      	bne.n	1005b120 <LL_conn_upd_data_length_change_event+0xa8>
1005b096:	463c      	mov	r4, r7
1005b098:	34b4      	adds	r4, #180	@ 0xb4
1005b09a:	8ca8      	ldrh	r0, [r5, #36]	@ 0x24
1005b09c:	88e1      	ldrh	r1, [r4, #6]
1005b09e:	4281      	cmp	r1, r0
1005b0a0:	d03e      	beq.n	1005b120 <LL_conn_upd_data_length_change_event+0xa8>
1005b0a2:	80e0      	strh	r0, [r4, #6]
1005b0a4:	2100      	movs	r1, #0
1005b0a6:	4630      	mov	r0, r6
1005b0a8:	462a      	mov	r2, r5
1005b0aa:	463b      	mov	r3, r7
1005b0ac:	f7ff ffb8 	bl	1005b020 <LL_adjust_max_tx_data_frag_coded>
1005b0b0:	481c      	ldr	r0, [pc, #112]	@ (1005b124 <__arm_cp.6_0>)
1005b0b2:	6800      	ldr	r0, [r0, #0]
1005b0b4:	213d      	movs	r1, #61	@ 0x3d
1005b0b6:	5c41      	ldrb	r1, [r0, r1]
1005b0b8:	0689      	lsls	r1, r1, #26
1005b0ba:	d531      	bpl.n	1005b120 <LL_conn_upd_data_length_change_event+0xa8>
1005b0bc:	303d      	adds	r0, #61	@ 0x3d
1005b0be:	7a40      	ldrb	r0, [r0, #9]
1005b0c0:	0640      	lsls	r0, r0, #25
1005b0c2:	d52d      	bpl.n	1005b120 <LL_conn_upd_data_length_change_event+0xa8>
1005b0c4:	8926      	ldrh	r6, [r4, #8]
1005b0c6:	88a5      	ldrh	r5, [r4, #4]
1005b0c8:	88e0      	ldrh	r0, [r4, #6]
1005b0ca:	9001      	str	r0, [sp, #4]
1005b0cc:	8820      	ldrh	r0, [r4, #0]
1005b0ce:	9002      	str	r0, [sp, #8]
1005b0d0:	8f7f      	ldrh	r7, [r7, #58]	@ 0x3a
1005b0d2:	4815      	ldr	r0, [pc, #84]	@ (1005b128 <__arm_cp.6_1>)
1005b0d4:	6800      	ldr	r0, [r0, #0]
1005b0d6:	6900      	ldr	r0, [r0, #16]
1005b0d8:	2180      	movs	r1, #128	@ 0x80
1005b0da:	2226      	movs	r2, #38	@ 0x26
1005b0dc:	2404      	movs	r4, #4
1005b0de:	4623      	mov	r3, r4
1005b0e0:	f7f7 ff2a 	bl	10052f38 <aci_event_fifo_push_header>
1005b0e4:	2800      	cmp	r0, #0
1005b0e6:	d01b      	beq.n	1005b120 <LL_conn_upd_data_length_change_event+0xa8>
1005b0e8:	4601      	mov	r1, r0
1005b0ea:	7406      	strb	r6, [r0, #16]
1005b0ec:	7385      	strb	r5, [r0, #14]
1005b0ee:	9b01      	ldr	r3, [sp, #4]
1005b0f0:	7303      	strb	r3, [r0, #12]
1005b0f2:	9a02      	ldr	r2, [sp, #8]
1005b0f4:	7282      	strb	r2, [r0, #10]
1005b0f6:	7207      	strb	r7, [r0, #8]
1005b0f8:	2007      	movs	r0, #7
1005b0fa:	71c8      	strb	r0, [r1, #7]
1005b0fc:	200b      	movs	r0, #11
1005b0fe:	7188      	strb	r0, [r1, #6]
1005b100:	203e      	movs	r0, #62	@ 0x3e
1005b102:	7148      	strb	r0, [r1, #5]
1005b104:	710c      	strb	r4, [r1, #4]
1005b106:	0a30      	lsrs	r0, r6, #8
1005b108:	7448      	strb	r0, [r1, #17]
1005b10a:	0a28      	lsrs	r0, r5, #8
1005b10c:	73c8      	strb	r0, [r1, #15]
1005b10e:	0a18      	lsrs	r0, r3, #8
1005b110:	7348      	strb	r0, [r1, #13]
1005b112:	0a10      	lsrs	r0, r2, #8
1005b114:	72c8      	strb	r0, [r1, #11]
1005b116:	0a38      	lsrs	r0, r7, #8
1005b118:	7248      	strb	r0, [r1, #9]
1005b11a:	2080      	movs	r0, #128	@ 0x80
1005b11c:	f7f7 ffa9 	bl	10053072 <aci_event_fifo_push>
1005b120:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005b122:	46c0      	nop			@ (mov r8, r8)

1005b124 <__arm_cp.6_0>:
1005b124:	200010f4 	.word	0x200010f4

1005b128 <__arm_cp.6_1>:
1005b128:	200010a4 	.word	0x200010a4

1005b12c <llc_conn_init_cte_ctxt_ucfg_weak>:
1005b12c:	4770      	bx	lr

1005b12e <LLC_cte_request_procedure_ucfg_weak>:
1005b12e:	2000      	movs	r0, #0
1005b130:	4770      	bx	lr

1005b132 <LLC_connection_cte_response_pause_resume_ucfg_weak>:
1005b132:	4770      	bx	lr

1005b134 <LLC_connection_cte_response_disable_ucfg_weak>:
1005b134:	4770      	bx	lr

1005b136 <llc_cte_process_rx_cte_ucfg_weak>:
1005b136:	4770      	bx	lr

1005b138 <LL_encryption>:
1005b138:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b13a:	b08d      	sub	sp, #52	@ 0x34
1005b13c:	9309      	str	r3, [sp, #36]	@ 0x24
1005b13e:	4617      	mov	r7, r2
1005b140:	460d      	mov	r5, r1
1005b142:	4606      	mov	r6, r0
1005b144:	f7fe fdb5 	bl	10059cb2 <LL_cpe_get_cntxt>
1005b148:	4604      	mov	r4, r0
1005b14a:	9608      	str	r6, [sp, #32]
1005b14c:	4630      	mov	r0, r6
1005b14e:	f7fc ffab 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005b152:	4603      	mov	r3, r0
1005b154:	2f05      	cmp	r7, #5
1005b156:	d107      	bne.n	1005b168 <LL_encryption+0x30>
1005b158:	213d      	movs	r1, #61	@ 0x3d
1005b15a:	4618      	mov	r0, r3
1005b15c:	f7fd fe1e 	bl	10058d9c <llc_conn_disconnect_link_from_cpf>
1005b160:	27ff      	movs	r7, #255	@ 0xff
1005b162:	4638      	mov	r0, r7
1005b164:	b00d      	add	sp, #52	@ 0x34
1005b166:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005b168:	9407      	str	r4, [sp, #28]
1005b16a:	4622      	mov	r2, r4
1005b16c:	3228      	adds	r2, #40	@ 0x28
1005b16e:	461e      	mov	r6, r3
1005b170:	362c      	adds	r6, #44	@ 0x2c
1005b172:	7830      	ldrb	r0, [r6, #0]
1005b174:	2802      	cmp	r0, #2
1005b176:	d129      	bne.n	1005b1cc <LL_encryption+0x94>
1005b178:	7810      	ldrb	r0, [r2, #0]
1005b17a:	1e40      	subs	r0, r0, #1
1005b17c:	27ff      	movs	r7, #255	@ 0xff
1005b17e:	280b      	cmp	r0, #11
1005b180:	d8ef      	bhi.n	1005b162 <LL_encryption+0x2a>
1005b182:	0040      	lsls	r0, r0, #1
1005b184:	4478      	add	r0, pc
1005b186:	8880      	ldrh	r0, [r0, #4]
1005b188:	0040      	lsls	r0, r0, #1
1005b18a:	4487      	add	pc, r0
1005b18c:	00a4000b 	.word	0x00a4000b
1005b190:	00c200a7 	.word	0x00c200a7
1005b194:	00d000cc 	.word	0x00d000cc
1005b198:	01370133 	.word	0x01370133
1005b19c:	016f015f 	.word	0x016f015f
1005b1a0:	0181017e 	.word	0x0181017e
1005b1a4:	200a      	movs	r0, #10
1005b1a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005b1a8:	7088      	strb	r0, [r1, #2]
1005b1aa:	27ff      	movs	r7, #255	@ 0xff
1005b1ac:	4638      	mov	r0, r7
1005b1ae:	3004      	adds	r0, #4
1005b1b0:	8008      	strh	r0, [r1, #0]
1005b1b2:	2101      	movs	r1, #1
1005b1b4:	9808      	ldr	r0, [sp, #32]
1005b1b6:	4615      	mov	r5, r2
1005b1b8:	460a      	mov	r2, r1
1005b1ba:	461c      	mov	r4, r3
1005b1bc:	f7fe fd5c 	bl	10059c78 <LL_cpe_set_blocked>
1005b1c0:	4620      	mov	r0, r4
1005b1c2:	f7fd fcc1 	bl	10058b48 <llc_conn_set_tx_acl_blocked>
1005b1c6:	2002      	movs	r0, #2
1005b1c8:	7028      	strb	r0, [r5, #0]
1005b1ca:	e7ca      	b.n	1005b162 <LL_encryption+0x2a>
1005b1cc:	2f01      	cmp	r7, #1
1005b1ce:	d12e      	bne.n	1005b22e <LL_encryption+0xf6>
1005b1d0:	2000      	movs	r0, #0
1005b1d2:	7050      	strb	r0, [r2, #1]
1005b1d4:	9206      	str	r2, [sp, #24]
1005b1d6:	2500      	movs	r5, #0
1005b1d8:	461e      	mov	r6, r3
1005b1da:	4618      	mov	r0, r3
1005b1dc:	4629      	mov	r1, r5
1005b1de:	f7fd f9ff 	bl	100585e0 <llc_conn_get_enc_on>
1005b1e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005b1e4:	7889      	ldrb	r1, [r1, #2]
1005b1e6:	2903      	cmp	r1, #3
1005b1e8:	d157      	bne.n	1005b29a <LL_encryption+0x162>
1005b1ea:	2800      	cmp	r0, #0
1005b1ec:	4633      	mov	r3, r6
1005b1ee:	9f07      	ldr	r7, [sp, #28]
1005b1f0:	d1b2      	bne.n	1005b158 <LL_encryption+0x20>
1005b1f2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005b1f4:	1ce0      	adds	r0, r4, #3
1005b1f6:	4639      	mov	r1, r7
1005b1f8:	3130      	adds	r1, #48	@ 0x30
1005b1fa:	2208      	movs	r2, #8
1005b1fc:	9205      	str	r2, [sp, #20]
1005b1fe:	4b19      	ldr	r3, [pc, #100]	@ (1005b264 <LL_encryption+0x12c>)
1005b200:	4798      	blx	r3
1005b202:	4620      	mov	r0, r4
1005b204:	300b      	adds	r0, #11
1005b206:	4639      	mov	r1, r7
1005b208:	312e      	adds	r1, #46	@ 0x2e
1005b20a:	2202      	movs	r2, #2
1005b20c:	4b15      	ldr	r3, [pc, #84]	@ (1005b264 <LL_encryption+0x12c>)
1005b20e:	4798      	blx	r3
1005b210:	4620      	mov	r0, r4
1005b212:	300d      	adds	r0, #13
1005b214:	4639      	mov	r1, r7
1005b216:	9a05      	ldr	r2, [sp, #20]
1005b218:	4b12      	ldr	r3, [pc, #72]	@ (1005b264 <LL_encryption+0x12c>)
1005b21a:	4798      	blx	r3
1005b21c:	3415      	adds	r4, #21
1005b21e:	3720      	adds	r7, #32
1005b220:	2204      	movs	r2, #4
1005b222:	4620      	mov	r0, r4
1005b224:	4639      	mov	r1, r7
1005b226:	4b0f      	ldr	r3, [pc, #60]	@ (1005b264 <LL_encryption+0x12c>)
1005b228:	4798      	blx	r3
1005b22a:	2005      	movs	r0, #5
1005b22c:	e03b      	b.n	1005b2a6 <LL_encryption+0x16e>
1005b22e:	7850      	ldrb	r0, [r2, #1]
1005b230:	27ff      	movs	r7, #255	@ 0xff
1005b232:	280d      	cmp	r0, #13
1005b234:	d895      	bhi.n	1005b162 <LL_encryption+0x2a>
1005b236:	9705      	str	r7, [sp, #20]
1005b238:	2111      	movs	r1, #17
1005b23a:	0109      	lsls	r1, r1, #4
1005b23c:	185f      	adds	r7, r3, r1
1005b23e:	0040      	lsls	r0, r0, #1
1005b240:	4478      	add	r0, pc
1005b242:	8880      	ldrh	r0, [r0, #4]
1005b244:	0040      	lsls	r0, r0, #1
1005b246:	4487      	add	pc, r0
1005b248:	0010000f 	.word	0x0010000f
1005b24c:	016d0165 	.word	0x016d0165
1005b250:	019b0176 	.word	0x019b0176
1005b254:	022001d6 	.word	0x022001d6
1005b258:	024001e9 	.word	0x024001e9
1005b25c:	01fe01ed 	.word	0x01fe01ed
1005b260:	02340214 	.word	0x02340214
1005b264:	100627c9 	.word	0x100627c9
1005b268:	e7b4      	b.n	1005b1d4 <LL_encryption+0x9c>
1005b26a:	200b      	movs	r0, #11
1005b26c:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005b26e:	7088      	strb	r0, [r1, #2]
1005b270:	2002      	movs	r0, #2
1005b272:	7050      	strb	r0, [r2, #1]
1005b274:	27ff      	movs	r7, #255	@ 0xff
1005b276:	4638      	mov	r0, r7
1005b278:	3004      	adds	r0, #4
1005b27a:	8008      	strh	r0, [r1, #0]
1005b27c:	2400      	movs	r4, #0
1005b27e:	2201      	movs	r2, #1
1005b280:	9808      	ldr	r0, [sp, #32]
1005b282:	4621      	mov	r1, r4
1005b284:	461d      	mov	r5, r3
1005b286:	f7fe fcf7 	bl	10059c78 <LL_cpe_set_blocked>
1005b28a:	4628      	mov	r0, r5
1005b28c:	f7fd fc5c 	bl	10058b48 <llc_conn_set_tx_acl_blocked>
1005b290:	4628      	mov	r0, r5
1005b292:	4621      	mov	r1, r4
1005b294:	f7fd fc47 	bl	10058b26 <llc_conn_set_stop_enc>
1005b298:	e763      	b.n	1005b162 <LL_encryption+0x2a>
1005b29a:	2801      	cmp	r0, #1
1005b29c:	4633      	mov	r3, r6
1005b29e:	d000      	beq.n	1005b2a2 <LL_encryption+0x16a>
1005b2a0:	e75a      	b.n	1005b158 <LL_encryption+0x20>
1005b2a2:	2501      	movs	r5, #1
1005b2a4:	4628      	mov	r0, r5
1005b2a6:	9f06      	ldr	r7, [sp, #24]
1005b2a8:	7078      	strb	r0, [r7, #1]
1005b2aa:	713d      	strb	r5, [r7, #4]
1005b2ac:	2400      	movs	r4, #0
1005b2ae:	9d08      	ldr	r5, [sp, #32]
1005b2b0:	4628      	mov	r0, r5
1005b2b2:	4621      	mov	r1, r4
1005b2b4:	4622      	mov	r2, r4
1005b2b6:	f7fe fcdf 	bl	10059c78 <LL_cpe_set_blocked>
1005b2ba:	4630      	mov	r0, r6
1005b2bc:	f7fd fc1a 	bl	10058af4 <llc_conn_set_rx_acl_blocked>
1005b2c0:	4628      	mov	r0, r5
1005b2c2:	4621      	mov	r1, r4
1005b2c4:	f7fe fce8 	bl	10059c98 <LL_cpe_set_prepare_tx_pdu>
1005b2c8:	2201      	movs	r2, #1
1005b2ca:	4628      	mov	r0, r5
1005b2cc:	4621      	mov	r1, r4
1005b2ce:	4623      	mov	r3, r4
1005b2d0:	f7fe fc99 	bl	10059c06 <LL_cpe_set_active>
1005b2d4:	e744      	b.n	1005b160 <LL_encryption+0x28>
1005b2d6:	2003      	movs	r0, #3
1005b2d8:	7010      	strb	r0, [r2, #0]
1005b2da:	e121      	b.n	1005b520 <LL_encryption+0x3e8>
1005b2dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005b2de:	7880      	ldrb	r0, [r0, #2]
1005b2e0:	280b      	cmp	r0, #11
1005b2e2:	d000      	beq.n	1005b2e6 <LL_encryption+0x1ae>
1005b2e4:	e738      	b.n	1005b158 <LL_encryption+0x20>
1005b2e6:	2004      	movs	r0, #4
1005b2e8:	7010      	strb	r0, [r2, #0]
1005b2ea:	2102      	movs	r1, #2
1005b2ec:	4618      	mov	r0, r3
1005b2ee:	461d      	mov	r5, r3
1005b2f0:	f7fd fc19 	bl	10058b26 <llc_conn_set_stop_enc>
1005b2f4:	2401      	movs	r4, #1
1005b2f6:	9e08      	ldr	r6, [sp, #32]
1005b2f8:	4630      	mov	r0, r6
1005b2fa:	4621      	mov	r1, r4
1005b2fc:	f7fe fccc 	bl	10059c98 <LL_cpe_set_prepare_tx_pdu>
1005b300:	2200      	movs	r2, #0
1005b302:	4630      	mov	r0, r6
1005b304:	4621      	mov	r1, r4
1005b306:	f7fe fcb7 	bl	10059c78 <LL_cpe_set_blocked>
1005b30a:	4628      	mov	r0, r5
1005b30c:	f7fd fbf2 	bl	10058af4 <llc_conn_set_rx_acl_blocked>
1005b310:	e727      	b.n	1005b162 <LL_encryption+0x2a>
1005b312:	200b      	movs	r0, #11
1005b314:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005b316:	7088      	strb	r0, [r1, #2]
1005b318:	2005      	movs	r0, #5
1005b31a:	7010      	strb	r0, [r2, #0]
1005b31c:	27ff      	movs	r7, #255	@ 0xff
1005b31e:	4638      	mov	r0, r7
1005b320:	3004      	adds	r0, #4
1005b322:	8008      	strh	r0, [r1, #0]
1005b324:	e71d      	b.n	1005b162 <LL_encryption+0x2a>
1005b326:	2006      	movs	r0, #6
1005b328:	7010      	strb	r0, [r2, #0]
1005b32a:	2101      	movs	r1, #1
1005b32c:	e1d6      	b.n	1005b6dc <LL_encryption+0x5a4>
1005b32e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005b330:	1ca0      	adds	r0, r4, #2
1005b332:	9001      	str	r0, [sp, #4]
1005b334:	9705      	str	r7, [sp, #20]
1005b336:	2700      	movs	r7, #0
1005b338:	4dfd      	ldr	r5, [pc, #1012]	@ (1005b730 <LL_encryption+0x5f8>)
1005b33a:	4638      	mov	r0, r7
1005b33c:	9304      	str	r3, [sp, #16]
1005b33e:	4616      	mov	r6, r2
1005b340:	47a8      	blx	r5
1005b342:	9002      	str	r0, [sp, #8]
1005b344:	900b      	str	r0, [sp, #44]	@ 0x2c
1005b346:	4638      	mov	r0, r7
1005b348:	47a8      	blx	r5
1005b34a:	900c      	str	r0, [sp, #48]	@ 0x30
1005b34c:	4638      	mov	r0, r7
1005b34e:	9f05      	ldr	r7, [sp, #20]
1005b350:	47a8      	blx	r5
1005b352:	9003      	str	r0, [sp, #12]
1005b354:	49fc      	ldr	r1, [pc, #1008]	@ (1005b748 <__arm_cp.0_10>)
1005b356:	8021      	strh	r1, [r4, #0]
1005b358:	900a      	str	r0, [sp, #40]	@ 0x28
1005b35a:	4635      	mov	r5, r6
1005b35c:	7a30      	ldrb	r0, [r6, #8]
1005b35e:	0200      	lsls	r0, r0, #8
1005b360:	7a71      	ldrb	r1, [r6, #9]
1005b362:	0409      	lsls	r1, r1, #16
1005b364:	1840      	adds	r0, r0, r1
1005b366:	7ab1      	ldrb	r1, [r6, #10]
1005b368:	9606      	str	r6, [sp, #24]
1005b36a:	0609      	lsls	r1, r1, #24
1005b36c:	1840      	adds	r0, r0, r1
1005b36e:	1cc0      	adds	r0, r0, #3
1005b370:	9c01      	ldr	r4, [sp, #4]
1005b372:	6020      	str	r0, [r4, #0]
1005b374:	9e07      	ldr	r6, [sp, #28]
1005b376:	4630      	mov	r0, r6
1005b378:	3033      	adds	r0, #51	@ 0x33
1005b37a:	f000 fa25 	bl	1005b7c8 <le4ByteToInt32>
1005b37e:	6060      	str	r0, [r4, #4]
1005b380:	9802      	ldr	r0, [sp, #8]
1005b382:	0600      	lsls	r0, r0, #24
1005b384:	8df1      	ldrh	r1, [r6, #46]	@ 0x2e
1005b386:	0209      	lsls	r1, r1, #8
1005b388:	1808      	adds	r0, r1, r0
1005b38a:	7be9      	ldrb	r1, [r5, #15]
1005b38c:	1840      	adds	r0, r0, r1
1005b38e:	60a0      	str	r0, [r4, #8]
1005b390:	4625      	mov	r5, r4
1005b392:	ac0b      	add	r4, sp, #44	@ 0x2c
1005b394:	1c60      	adds	r0, r4, #1
1005b396:	f000 fa17 	bl	1005b7c8 <le4ByteToInt32>
1005b39a:	60e8      	str	r0, [r5, #12]
1005b39c:	9803      	ldr	r0, [sp, #12]
1005b39e:	0600      	lsls	r0, r0, #24
1005b3a0:	7961      	ldrb	r1, [r4, #5]
1005b3a2:	1840      	adds	r0, r0, r1
1005b3a4:	79a1      	ldrb	r1, [r4, #6]
1005b3a6:	0209      	lsls	r1, r1, #8
1005b3a8:	1840      	adds	r0, r0, r1
1005b3aa:	79e1      	ldrb	r1, [r4, #7]
1005b3ac:	0409      	lsls	r1, r1, #16
1005b3ae:	1840      	adds	r0, r0, r1
1005b3b0:	6128      	str	r0, [r5, #16]
1005b3b2:	462a      	mov	r2, r5
1005b3b4:	ad0a      	add	r5, sp, #40	@ 0x28
1005b3b6:	7868      	ldrb	r0, [r5, #1]
1005b3b8:	78a9      	ldrb	r1, [r5, #2]
1005b3ba:	0209      	lsls	r1, r1, #8
1005b3bc:	1808      	adds	r0, r1, r0
1005b3be:	78e9      	ldrb	r1, [r5, #3]
1005b3c0:	0409      	lsls	r1, r1, #16
1005b3c2:	1840      	adds	r0, r0, r1
1005b3c4:	6150      	str	r0, [r2, #20]
1005b3c6:	2208      	movs	r2, #8
1005b3c8:	4620      	mov	r0, r4
1005b3ca:	4631      	mov	r1, r6
1005b3cc:	f007 f9fc 	bl	100627c8 <char_copy>
1005b3d0:	3620      	adds	r6, #32
1005b3d2:	2204      	movs	r2, #4
1005b3d4:	4628      	mov	r0, r5
1005b3d6:	4631      	mov	r1, r6
1005b3d8:	f007 f9f6 	bl	100627c8 <char_copy>
1005b3dc:	2007      	movs	r0, #7
1005b3de:	9906      	ldr	r1, [sp, #24]
1005b3e0:	7008      	strb	r0, [r1, #0]
1005b3e2:	2101      	movs	r1, #1
1005b3e4:	9808      	ldr	r0, [sp, #32]
1005b3e6:	460a      	mov	r2, r1
1005b3e8:	f7fe fc46 	bl	10059c78 <LL_cpe_set_blocked>
1005b3ec:	9804      	ldr	r0, [sp, #16]
1005b3ee:	f7fd fbab 	bl	10058b48 <llc_conn_set_tx_acl_blocked>
1005b3f2:	e6b6      	b.n	1005b162 <LL_encryption+0x2a>
1005b3f4:	2008      	movs	r0, #8
1005b3f6:	7010      	strb	r0, [r2, #0]
1005b3f8:	2704      	movs	r7, #4
1005b3fa:	e6b2      	b.n	1005b162 <LL_encryption+0x2a>
1005b3fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005b3fe:	7880      	ldrb	r0, [r0, #2]
1005b400:	2811      	cmp	r0, #17
1005b402:	d061      	beq.n	1005b4c8 <LL_encryption+0x390>
1005b404:	2807      	cmp	r0, #7
1005b406:	d05f      	beq.n	1005b4c8 <LL_encryption+0x390>
1005b408:	280d      	cmp	r0, #13
1005b40a:	d05d      	beq.n	1005b4c8 <LL_encryption+0x390>
1005b40c:	2804      	cmp	r0, #4
1005b40e:	9c07      	ldr	r4, [sp, #28]
1005b410:	d000      	beq.n	1005b414 <LL_encryption+0x2dc>
1005b412:	e6a1      	b.n	1005b158 <LL_encryption+0x20>
1005b414:	2009      	movs	r0, #9
1005b416:	7010      	strb	r0, [r2, #0]
1005b418:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005b41a:	1cf8      	adds	r0, r7, #3
1005b41c:	4621      	mov	r1, r4
1005b41e:	3108      	adds	r1, #8
1005b420:	2208      	movs	r2, #8
1005b422:	461d      	mov	r5, r3
1005b424:	f007 f9d0 	bl	100627c8 <char_copy>
1005b428:	370b      	adds	r7, #11
1005b42a:	4621      	mov	r1, r4
1005b42c:	3124      	adds	r1, #36	@ 0x24
1005b42e:	2204      	movs	r2, #4
1005b430:	4638      	mov	r0, r7
1005b432:	f007 f9c9 	bl	100627c8 <char_copy>
1005b436:	6734      	str	r4, [r6, #112]	@ 0x70
1005b438:	2101      	movs	r1, #1
1005b43a:	2200      	movs	r2, #0
1005b43c:	9808      	ldr	r0, [sp, #32]
1005b43e:	f7fe fc1b 	bl	10059c78 <LL_cpe_set_blocked>
1005b442:	4628      	mov	r0, r5
1005b444:	f7fd fb56 	bl	10058af4 <llc_conn_set_rx_acl_blocked>
1005b448:	2705      	movs	r7, #5
1005b44a:	e68a      	b.n	1005b162 <LL_encryption+0x2a>
1005b44c:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005b44e:	7880      	ldrb	r0, [r0, #2]
1005b450:	2811      	cmp	r0, #17
1005b452:	d046      	beq.n	1005b4e2 <LL_encryption+0x3aa>
1005b454:	280d      	cmp	r0, #13
1005b456:	d044      	beq.n	1005b4e2 <LL_encryption+0x3aa>
1005b458:	2805      	cmp	r0, #5
1005b45a:	d000      	beq.n	1005b45e <LL_encryption+0x326>
1005b45c:	e67c      	b.n	1005b158 <LL_encryption+0x20>
1005b45e:	4614      	mov	r4, r2
1005b460:	2101      	movs	r1, #1
1005b462:	9808      	ldr	r0, [sp, #32]
1005b464:	f7fe fc18 	bl	10059c98 <LL_cpe_set_prepare_tx_pdu>
1005b468:	200a      	movs	r0, #10
1005b46a:	e00c      	b.n	1005b486 <LL_encryption+0x34e>
1005b46c:	2006      	movs	r0, #6
1005b46e:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005b470:	7088      	strb	r0, [r1, #2]
1005b472:	27ff      	movs	r7, #255	@ 0xff
1005b474:	4638      	mov	r0, r7
1005b476:	3004      	adds	r0, #4
1005b478:	8008      	strh	r0, [r1, #0]
1005b47a:	2102      	movs	r1, #2
1005b47c:	4618      	mov	r0, r3
1005b47e:	4614      	mov	r4, r2
1005b480:	f7fd fb40 	bl	10058b04 <llc_conn_set_start_enc>
1005b484:	200b      	movs	r0, #11
1005b486:	7020      	strb	r0, [r4, #0]
1005b488:	e66b      	b.n	1005b162 <LL_encryption+0x2a>
1005b48a:	200c      	movs	r0, #12
1005b48c:	7010      	strb	r0, [r2, #0]
1005b48e:	e0c7      	b.n	1005b620 <LL_encryption+0x4e8>
1005b490:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005b492:	7880      	ldrb	r0, [r0, #2]
1005b494:	2806      	cmp	r0, #6
1005b496:	d000      	beq.n	1005b49a <LL_encryption+0x362>
1005b498:	e65e      	b.n	1005b158 <LL_encryption+0x20>
1005b49a:	2000      	movs	r0, #0
1005b49c:	4615      	mov	r5, r2
1005b49e:	7010      	strb	r0, [r2, #0]
1005b4a0:	48c4      	ldr	r0, [pc, #784]	@ (1005b7b4 <__arm_cp.0_0>)
1005b4a2:	6800      	ldr	r0, [r0, #0]
1005b4a4:	212c      	movs	r1, #44	@ 0x2c
1005b4a6:	5c40      	ldrb	r0, [r0, r1]
1005b4a8:	07c0      	lsls	r0, r0, #31
1005b4aa:	0ec1      	lsrs	r1, r0, #27
1005b4ac:	206f      	movs	r0, #111	@ 0x6f
1005b4ae:	43c0      	mvns	r0, r0
1005b4b0:	4048      	eors	r0, r1
1005b4b2:	461c      	mov	r4, r3
1005b4b4:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005b4b6:	7929      	ldrb	r1, [r5, #4]
1005b4b8:	b2c0      	uxtb	r0, r0
1005b4ba:	2901      	cmp	r1, #1
1005b4bc:	d000      	beq.n	1005b4c0 <LL_encryption+0x388>
1005b4be:	e111      	b.n	1005b6e4 <LL_encryption+0x5ac>
1005b4c0:	4611      	mov	r1, r2
1005b4c2:	f000 f9bf 	bl	1005b844 <hci_encryption_key_refresh_complete_event_push>
1005b4c6:	e111      	b.n	1005b6ec <LL_encryption+0x5b4>
1005b4c8:	48ba      	ldr	r0, [pc, #744]	@ (1005b7b4 <__arm_cp.0_0>)
1005b4ca:	6800      	ldr	r0, [r0, #0]
1005b4cc:	212c      	movs	r1, #44	@ 0x2c
1005b4ce:	5c40      	ldrb	r0, [r0, r1]
1005b4d0:	0100      	lsls	r0, r0, #4
1005b4d2:	43c0      	mvns	r0, r0
1005b4d4:	2180      	movs	r1, #128	@ 0x80
1005b4d6:	4301      	orrs	r1, r0
1005b4d8:	2090      	movs	r0, #144	@ 0x90
1005b4da:	4008      	ands	r0, r1
1005b4dc:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005b4de:	211a      	movs	r1, #26
1005b4e0:	e00b      	b.n	1005b4fa <LL_encryption+0x3c2>
1005b4e2:	48b4      	ldr	r0, [pc, #720]	@ (1005b7b4 <__arm_cp.0_0>)
1005b4e4:	6800      	ldr	r0, [r0, #0]
1005b4e6:	212c      	movs	r1, #44	@ 0x2c
1005b4e8:	5c40      	ldrb	r0, [r0, r1]
1005b4ea:	0100      	lsls	r0, r0, #4
1005b4ec:	43c0      	mvns	r0, r0
1005b4ee:	2180      	movs	r1, #128	@ 0x80
1005b4f0:	4301      	orrs	r1, r0
1005b4f2:	2090      	movs	r0, #144	@ 0x90
1005b4f4:	4008      	ands	r0, r1
1005b4f6:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005b4f8:	2106      	movs	r1, #6
1005b4fa:	461c      	mov	r4, r3
1005b4fc:	2300      	movs	r3, #0
1005b4fe:	f000 f96f 	bl	1005b7e0 <hci_encryption_change_event_push>
1005b502:	4620      	mov	r0, r4
1005b504:	f7fc ffb3 	bl	1005846e <llc_conn_clr_tx_acl_blocked>
1005b508:	4620      	mov	r0, r4
1005b50a:	f7fc ff9f 	bl	1005844c <llc_conn_clr_rx_acl_blocked>
1005b50e:	2101      	movs	r1, #1
1005b510:	9808      	ldr	r0, [sp, #32]
1005b512:	e0f4      	b.n	1005b6fe <LL_encryption+0x5c6>
1005b514:	2003      	movs	r0, #3
1005b516:	7050      	strb	r0, [r2, #1]
1005b518:	2101      	movs	r1, #1
1005b51a:	4618      	mov	r0, r3
1005b51c:	f7fd fb03 	bl	10058b26 <llc_conn_set_stop_enc>
1005b520:	270b      	movs	r7, #11
1005b522:	e61e      	b.n	1005b162 <LL_encryption+0x2a>
1005b524:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005b526:	7880      	ldrb	r0, [r0, #2]
1005b528:	280b      	cmp	r0, #11
1005b52a:	d000      	beq.n	1005b52e <LL_encryption+0x3f6>
1005b52c:	e614      	b.n	1005b158 <LL_encryption+0x20>
1005b52e:	2004      	movs	r0, #4
1005b530:	7050      	strb	r0, [r2, #1]
1005b532:	2703      	movs	r7, #3
1005b534:	e615      	b.n	1005b162 <LL_encryption+0x2a>
1005b536:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005b538:	7880      	ldrb	r0, [r0, #2]
1005b53a:	2803      	cmp	r0, #3
1005b53c:	9f05      	ldr	r7, [sp, #20]
1005b53e:	9e07      	ldr	r6, [sp, #28]
1005b540:	d000      	beq.n	1005b544 <LL_encryption+0x40c>
1005b542:	e609      	b.n	1005b158 <LL_encryption+0x20>
1005b544:	2005      	movs	r0, #5
1005b546:	7050      	strb	r0, [r2, #1]
1005b548:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005b54a:	1ce0      	adds	r0, r4, #3
1005b54c:	4631      	mov	r1, r6
1005b54e:	3130      	adds	r1, #48	@ 0x30
1005b550:	2508      	movs	r5, #8
1005b552:	462a      	mov	r2, r5
1005b554:	4b9b      	ldr	r3, [pc, #620]	@ (1005b7c4 <__arm_cp.0_4>)
1005b556:	4798      	blx	r3
1005b558:	4620      	mov	r0, r4
1005b55a:	300b      	adds	r0, #11
1005b55c:	4631      	mov	r1, r6
1005b55e:	312e      	adds	r1, #46	@ 0x2e
1005b560:	2202      	movs	r2, #2
1005b562:	4b98      	ldr	r3, [pc, #608]	@ (1005b7c4 <__arm_cp.0_4>)
1005b564:	4798      	blx	r3
1005b566:	4620      	mov	r0, r4
1005b568:	300d      	adds	r0, #13
1005b56a:	4631      	mov	r1, r6
1005b56c:	462a      	mov	r2, r5
1005b56e:	4d95      	ldr	r5, [pc, #596]	@ (1005b7c4 <__arm_cp.0_4>)
1005b570:	47a8      	blx	r5
1005b572:	3415      	adds	r4, #21
1005b574:	3620      	adds	r6, #32
1005b576:	2204      	movs	r2, #4
1005b578:	4620      	mov	r0, r4
1005b57a:	4631      	mov	r1, r6
1005b57c:	47a8      	blx	r5
1005b57e:	e0ac      	b.n	1005b6da <LL_encryption+0x5a2>
1005b580:	2400      	movs	r4, #0
1005b582:	9403      	str	r4, [sp, #12]
1005b584:	4d8e      	ldr	r5, [pc, #568]	@ (1005b7c0 <__arm_cp.0_3>)
1005b586:	4620      	mov	r0, r4
1005b588:	9304      	str	r3, [sp, #16]
1005b58a:	9206      	str	r2, [sp, #24]
1005b58c:	47a8      	blx	r5
1005b58e:	900b      	str	r0, [sp, #44]	@ 0x2c
1005b590:	4620      	mov	r0, r4
1005b592:	47a8      	blx	r5
1005b594:	900c      	str	r0, [sp, #48]	@ 0x30
1005b596:	4620      	mov	r0, r4
1005b598:	47a8      	blx	r5
1005b59a:	2604      	movs	r6, #4
1005b59c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005b59e:	70a6      	strb	r6, [r4, #2]
1005b5a0:	210d      	movs	r1, #13
1005b5a2:	7061      	strb	r1, [r4, #1]
1005b5a4:	2103      	movs	r1, #3
1005b5a6:	7021      	strb	r1, [r4, #0]
1005b5a8:	900a      	str	r0, [sp, #40]	@ 0x28
1005b5aa:	1ce1      	adds	r1, r4, #3
1005b5ac:	ad0b      	add	r5, sp, #44	@ 0x2c
1005b5ae:	2208      	movs	r2, #8
1005b5b0:	9202      	str	r2, [sp, #8]
1005b5b2:	4b84      	ldr	r3, [pc, #528]	@ (1005b7c4 <__arm_cp.0_4>)
1005b5b4:	4628      	mov	r0, r5
1005b5b6:	4798      	blx	r3
1005b5b8:	340b      	adds	r4, #11
1005b5ba:	af0a      	add	r7, sp, #40	@ 0x28
1005b5bc:	4638      	mov	r0, r7
1005b5be:	4621      	mov	r1, r4
1005b5c0:	4632      	mov	r2, r6
1005b5c2:	4b80      	ldr	r3, [pc, #512]	@ (1005b7c4 <__arm_cp.0_4>)
1005b5c4:	4798      	blx	r3
1005b5c6:	9c07      	ldr	r4, [sp, #28]
1005b5c8:	4621      	mov	r1, r4
1005b5ca:	3108      	adds	r1, #8
1005b5cc:	4628      	mov	r0, r5
1005b5ce:	9a02      	ldr	r2, [sp, #8]
1005b5d0:	4d7c      	ldr	r5, [pc, #496]	@ (1005b7c4 <__arm_cp.0_4>)
1005b5d2:	47a8      	blx	r5
1005b5d4:	3424      	adds	r4, #36	@ 0x24
1005b5d6:	4638      	mov	r0, r7
1005b5d8:	4621      	mov	r1, r4
1005b5da:	4632      	mov	r2, r6
1005b5dc:	47a8      	blx	r5
1005b5de:	2006      	movs	r0, #6
1005b5e0:	9906      	ldr	r1, [sp, #24]
1005b5e2:	7048      	strb	r0, [r1, #1]
1005b5e4:	2201      	movs	r2, #1
1005b5e6:	9808      	ldr	r0, [sp, #32]
1005b5e8:	9903      	ldr	r1, [sp, #12]
1005b5ea:	f7fe fb45 	bl	10059c78 <LL_cpe_set_blocked>
1005b5ee:	9804      	ldr	r0, [sp, #16]
1005b5f0:	f7fd faaa 	bl	10058b48 <llc_conn_set_tx_acl_blocked>
1005b5f4:	e0db      	b.n	1005b7ae <__arm_cp.0_10+0x66>
1005b5f6:	4870      	ldr	r0, [pc, #448]	@ (1005b7b8 <__arm_cp.0_1>)
1005b5f8:	6800      	ldr	r0, [r0, #0]
1005b5fa:	213d      	movs	r1, #61	@ 0x3d
1005b5fc:	5c41      	ldrb	r1, [r0, r1]
1005b5fe:	0689      	lsls	r1, r1, #26
1005b600:	d504      	bpl.n	1005b60c <LL_encryption+0x4d4>
1005b602:	303d      	adds	r0, #61	@ 0x3d
1005b604:	7a40      	ldrb	r0, [r0, #9]
1005b606:	06c0      	lsls	r0, r0, #27
1005b608:	d500      	bpl.n	1005b60c <LL_encryption+0x4d4>
1005b60a:	e093      	b.n	1005b734 <LL_encryption+0x5fc>
1005b60c:	2100      	movs	r1, #0
1005b60e:	9808      	ldr	r0, [sp, #32]
1005b610:	4614      	mov	r4, r2
1005b612:	f7fe fb41 	bl	10059c98 <LL_cpe_set_prepare_tx_pdu>
1005b616:	4620      	mov	r0, r4
1005b618:	270d      	movs	r7, #13
1005b61a:	e0c7      	b.n	1005b7ac <__arm_cp.0_10+0x64>
1005b61c:	2009      	movs	r0, #9
1005b61e:	7050      	strb	r0, [r2, #1]
1005b620:	2706      	movs	r7, #6
1005b622:	e59e      	b.n	1005b162 <LL_encryption+0x2a>
1005b624:	2006      	movs	r0, #6
1005b626:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005b628:	7088      	strb	r0, [r1, #2]
1005b62a:	200b      	movs	r0, #11
1005b62c:	7050      	strb	r0, [r2, #1]
1005b62e:	25ff      	movs	r5, #255	@ 0xff
1005b630:	4628      	mov	r0, r5
1005b632:	3004      	adds	r0, #4
1005b634:	8008      	strh	r0, [r1, #0]
1005b636:	2401      	movs	r4, #1
1005b638:	4618      	mov	r0, r3
1005b63a:	4621      	mov	r1, r4
1005b63c:	f7fd fa62 	bl	10058b04 <llc_conn_set_start_enc>
1005b640:	703c      	strb	r4, [r7, #0]
1005b642:	462f      	mov	r7, r5
1005b644:	e58d      	b.n	1005b162 <LL_encryption+0x2a>
1005b646:	2400      	movs	r4, #0
1005b648:	7054      	strb	r4, [r2, #1]
1005b64a:	485a      	ldr	r0, [pc, #360]	@ (1005b7b4 <__arm_cp.0_0>)
1005b64c:	6800      	ldr	r0, [r0, #0]
1005b64e:	212c      	movs	r1, #44	@ 0x2c
1005b650:	5c40      	ldrb	r0, [r0, r1]
1005b652:	07c0      	lsls	r0, r0, #31
1005b654:	0ec1      	lsrs	r1, r0, #27
1005b656:	206f      	movs	r0, #111	@ 0x6f
1005b658:	43c0      	mvns	r0, r0
1005b65a:	4048      	eors	r0, r1
1005b65c:	4611      	mov	r1, r2
1005b65e:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005b660:	7909      	ldrb	r1, [r1, #4]
1005b662:	b2c0      	uxtb	r0, r0
1005b664:	2901      	cmp	r1, #1
1005b666:	d14e      	bne.n	1005b706 <LL_encryption+0x5ce>
1005b668:	4611      	mov	r1, r2
1005b66a:	461e      	mov	r6, r3
1005b66c:	f000 f8ea 	bl	1005b844 <hci_encryption_key_refresh_complete_event_push>
1005b670:	e04e      	b.n	1005b710 <LL_encryption+0x5d8>
1005b672:	4618      	mov	r0, r3
1005b674:	4615      	mov	r5, r2
1005b676:	f7fc fefa 	bl	1005846e <llc_conn_clr_tx_acl_blocked>
1005b67a:	2400      	movs	r4, #0
1005b67c:	2201      	movs	r2, #1
1005b67e:	9808      	ldr	r0, [sp, #32]
1005b680:	4621      	mov	r1, r4
1005b682:	f7fe fad7 	bl	10059c34 <LL_cpe_clr_active>
1005b686:	706c      	strb	r4, [r5, #1]
1005b688:	e091      	b.n	1005b7ae <__arm_cp.0_10+0x66>
1005b68a:	78d0      	ldrb	r0, [r2, #3]
1005b68c:	2801      	cmp	r0, #1
1005b68e:	d110      	bne.n	1005b6b2 <LL_encryption+0x57a>
1005b690:	2005      	movs	r0, #5
1005b692:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005b694:	7088      	strb	r0, [r1, #2]
1005b696:	9807      	ldr	r0, [sp, #28]
1005b698:	6730      	str	r0, [r6, #112]	@ 0x70
1005b69a:	27ff      	movs	r7, #255	@ 0xff
1005b69c:	4638      	mov	r0, r7
1005b69e:	3004      	adds	r0, #4
1005b6a0:	8008      	strh	r0, [r1, #0]
1005b6a2:	2100      	movs	r1, #0
1005b6a4:	4618      	mov	r0, r3
1005b6a6:	4614      	mov	r4, r2
1005b6a8:	f7fd fa2c 	bl	10058b04 <llc_conn_set_start_enc>
1005b6ac:	2008      	movs	r0, #8
1005b6ae:	7060      	strb	r0, [r4, #1]
1005b6b0:	e557      	b.n	1005b162 <LL_encryption+0x2a>
1005b6b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005b6b4:	4619      	mov	r1, r3
1005b6b6:	461c      	mov	r4, r3
1005b6b8:	4615      	mov	r5, r2
1005b6ba:	f000 f8f5 	bl	1005b8a8 <llc_enc_prepare_reject>
1005b6be:	200c      	movs	r0, #12
1005b6c0:	7068      	strb	r0, [r5, #1]
1005b6c2:	4620      	mov	r0, r4
1005b6c4:	f7fc fec2 	bl	1005844c <llc_conn_clr_rx_acl_blocked>
1005b6c8:	e071      	b.n	1005b7ae <__arm_cp.0_10+0x66>
1005b6ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005b6cc:	7880      	ldrb	r0, [r0, #2]
1005b6ce:	2806      	cmp	r0, #6
1005b6d0:	9f05      	ldr	r7, [sp, #20]
1005b6d2:	d000      	beq.n	1005b6d6 <LL_encryption+0x59e>
1005b6d4:	e540      	b.n	1005b158 <LL_encryption+0x20>
1005b6d6:	200a      	movs	r0, #10
1005b6d8:	7050      	strb	r0, [r2, #1]
1005b6da:	2100      	movs	r1, #0
1005b6dc:	9808      	ldr	r0, [sp, #32]
1005b6de:	f7fe fadb 	bl	10059c98 <LL_cpe_set_prepare_tx_pdu>
1005b6e2:	e53e      	b.n	1005b162 <LL_encryption+0x2a>
1005b6e4:	2100      	movs	r1, #0
1005b6e6:	2301      	movs	r3, #1
1005b6e8:	f000 f87a 	bl	1005b7e0 <hci_encryption_change_event_push>
1005b6ec:	9d08      	ldr	r5, [sp, #32]
1005b6ee:	4620      	mov	r0, r4
1005b6f0:	f7fc febd 	bl	1005846e <llc_conn_clr_tx_acl_blocked>
1005b6f4:	4620      	mov	r0, r4
1005b6f6:	f7fc fea9 	bl	1005844c <llc_conn_clr_rx_acl_blocked>
1005b6fa:	2101      	movs	r1, #1
1005b6fc:	4628      	mov	r0, r5
1005b6fe:	460a      	mov	r2, r1
1005b700:	f7fe fa98 	bl	10059c34 <LL_cpe_clr_active>
1005b704:	e52d      	b.n	1005b162 <LL_encryption+0x2a>
1005b706:	2100      	movs	r1, #0
1005b708:	461e      	mov	r6, r3
1005b70a:	2301      	movs	r3, #1
1005b70c:	f000 f868 	bl	1005b7e0 <hci_encryption_change_event_push>
1005b710:	4630      	mov	r0, r6
1005b712:	9e08      	ldr	r6, [sp, #32]
1005b714:	703c      	strb	r4, [r7, #0]
1005b716:	4604      	mov	r4, r0
1005b718:	f7fc fea9 	bl	1005846e <llc_conn_clr_tx_acl_blocked>
1005b71c:	4620      	mov	r0, r4
1005b71e:	f7fc fe95 	bl	1005844c <llc_conn_clr_rx_acl_blocked>
1005b722:	2201      	movs	r2, #1
1005b724:	4630      	mov	r0, r6
1005b726:	4629      	mov	r1, r5
1005b728:	f7fe fa84 	bl	10059c34 <LL_cpe_clr_active>
1005b72c:	e03f      	b.n	1005b7ae <__arm_cp.0_10+0x66>
1005b72e:	46c0      	nop			@ (mov r8, r8)
1005b730:	10062af5 	.word	0x10062af5
1005b734:	481f      	ldr	r0, [pc, #124]	@ (1005b7b4 <__arm_cp.0_0>)
1005b736:	6800      	ldr	r0, [r0, #0]
1005b738:	212c      	movs	r1, #44	@ 0x2c
1005b73a:	5c40      	ldrb	r0, [r0, r1]
1005b73c:	07c0      	lsls	r0, r0, #31
1005b73e:	0ec0      	lsrs	r0, r0, #27
1005b740:	9206      	str	r2, [sp, #24]
1005b742:	d003      	beq.n	1005b74c <__arm_cp.0_10+0x4>
1005b744:	2219      	movs	r2, #25
1005b746:	e002      	b.n	1005b74e <__arm_cp.0_10+0x6>

1005b748 <__arm_cp.0_10>:
1005b748:	00001703 	.word	0x00001703
1005b74c:	220a      	movs	r2, #10
1005b74e:	9d07      	ldr	r5, [sp, #28]
1005b750:	216f      	movs	r1, #111	@ 0x6f
1005b752:	43c9      	mvns	r1, r1
1005b754:	4048      	eors	r0, r1
1005b756:	b2c1      	uxtb	r1, r0
1005b758:	8de8      	ldrh	r0, [r5, #46]	@ 0x2e
1005b75a:	9007      	str	r0, [sp, #28]
1005b75c:	8f5c      	ldrh	r4, [r3, #58]	@ 0x3a
1005b75e:	4817      	ldr	r0, [pc, #92]	@ (1005b7bc <__arm_cp.0_2>)
1005b760:	6800      	ldr	r0, [r0, #0]
1005b762:	6900      	ldr	r0, [r0, #16]
1005b764:	2304      	movs	r3, #4
1005b766:	9109      	str	r1, [sp, #36]	@ 0x24
1005b768:	9308      	str	r3, [sp, #32]
1005b76a:	f7f7 fbe5 	bl	10052f38 <aci_event_fifo_push_header>
1005b76e:	2707      	movs	r7, #7
1005b770:	2800      	cmp	r0, #0
1005b772:	d01a      	beq.n	1005b7aa <__arm_cp.0_10+0x62>
1005b774:	4606      	mov	r6, r0
1005b776:	7204      	strb	r4, [r0, #8]
1005b778:	0a20      	lsrs	r0, r4, #8
1005b77a:	7270      	strb	r0, [r6, #9]
1005b77c:	4630      	mov	r0, r6
1005b77e:	300a      	adds	r0, #10
1005b780:	3530      	adds	r5, #48	@ 0x30
1005b782:	2208      	movs	r2, #8
1005b784:	4629      	mov	r1, r5
1005b786:	f7ea fc65 	bl	10046054 <BLEPLAT_MemCpy>
1005b78a:	9907      	ldr	r1, [sp, #28]
1005b78c:	0a08      	lsrs	r0, r1, #8
1005b78e:	74f0      	strb	r0, [r6, #19]
1005b790:	74b1      	strb	r1, [r6, #18]
1005b792:	2005      	movs	r0, #5
1005b794:	71f0      	strb	r0, [r6, #7]
1005b796:	200d      	movs	r0, #13
1005b798:	71b0      	strb	r0, [r6, #6]
1005b79a:	203e      	movs	r0, #62	@ 0x3e
1005b79c:	7170      	strb	r0, [r6, #5]
1005b79e:	9808      	ldr	r0, [sp, #32]
1005b7a0:	7130      	strb	r0, [r6, #4]
1005b7a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005b7a4:	4631      	mov	r1, r6
1005b7a6:	f7f7 fc64 	bl	10053072 <aci_event_fifo_push>
1005b7aa:	9806      	ldr	r0, [sp, #24]
1005b7ac:	7047      	strb	r7, [r0, #1]
1005b7ae:	9f05      	ldr	r7, [sp, #20]
1005b7b0:	e4d7      	b.n	1005b162 <LL_encryption+0x2a>
1005b7b2:	46c0      	nop			@ (mov r8, r8)

1005b7b4 <__arm_cp.0_0>:
1005b7b4:	200010a0 	.word	0x200010a0

1005b7b8 <__arm_cp.0_1>:
1005b7b8:	200010f4 	.word	0x200010f4

1005b7bc <__arm_cp.0_2>:
1005b7bc:	200010a4 	.word	0x200010a4

1005b7c0 <__arm_cp.0_3>:
1005b7c0:	10062af5 	.word	0x10062af5

1005b7c4 <__arm_cp.0_4>:
1005b7c4:	100627c9 	.word	0x100627c9

1005b7c8 <le4ByteToInt32>:
1005b7c8:	7801      	ldrb	r1, [r0, #0]
1005b7ca:	7842      	ldrb	r2, [r0, #1]
1005b7cc:	0212      	lsls	r2, r2, #8
1005b7ce:	1851      	adds	r1, r2, r1
1005b7d0:	7882      	ldrb	r2, [r0, #2]
1005b7d2:	0412      	lsls	r2, r2, #16
1005b7d4:	1889      	adds	r1, r1, r2
1005b7d6:	78c0      	ldrb	r0, [r0, #3]
1005b7d8:	0600      	lsls	r0, r0, #24
1005b7da:	1808      	adds	r0, r1, r0
1005b7dc:	4770      	bx	lr
	...

1005b7e0 <hci_encryption_change_event_push>:
1005b7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005b7e2:	461e      	mov	r6, r3
1005b7e4:	4615      	mov	r5, r2
1005b7e6:	460f      	mov	r7, r1
1005b7e8:	4604      	mov	r4, r0
1005b7ea:	06c0      	lsls	r0, r0, #27
1005b7ec:	d406      	bmi.n	1005b7fc <hci_encryption_change_event_push+0x1c>
1005b7ee:	4813      	ldr	r0, [pc, #76]	@ (1005b83c <__arm_cp.2_0>)
1005b7f0:	6800      	ldr	r0, [r0, #0]
1005b7f2:	2136      	movs	r1, #54	@ 0x36
1005b7f4:	5640      	ldrsb	r0, [r0, r1]
1005b7f6:	2800      	cmp	r0, #0
1005b7f8:	d404      	bmi.n	1005b804 <hci_encryption_change_event_push+0x24>
1005b7fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005b7fc:	20bf      	movs	r0, #191	@ 0xbf
1005b7fe:	4004      	ands	r4, r0
1005b800:	2206      	movs	r2, #6
1005b802:	e000      	b.n	1005b806 <hci_encryption_change_event_push+0x26>
1005b804:	2216      	movs	r2, #22
1005b806:	480e      	ldr	r0, [pc, #56]	@ (1005b840 <__arm_cp.2_1>)
1005b808:	6800      	ldr	r0, [r0, #0]
1005b80a:	0761      	lsls	r1, r4, #29
1005b80c:	0ec9      	lsrs	r1, r1, #27
1005b80e:	1840      	adds	r0, r0, r1
1005b810:	6900      	ldr	r0, [r0, #16]
1005b812:	2302      	movs	r3, #2
1005b814:	4621      	mov	r1, r4
1005b816:	f7f7 fb8f 	bl	10052f38 <aci_event_fifo_push_header>
1005b81a:	2800      	cmp	r0, #0
1005b81c:	d0ed      	beq.n	1005b7fa <hci_encryption_change_event_push+0x1a>
1005b81e:	4601      	mov	r1, r0
1005b820:	7205      	strb	r5, [r0, #8]
1005b822:	7286      	strb	r6, [r0, #10]
1005b824:	71c7      	strb	r7, [r0, #7]
1005b826:	2004      	movs	r0, #4
1005b828:	7188      	strb	r0, [r1, #6]
1005b82a:	2208      	movs	r2, #8
1005b82c:	714a      	strb	r2, [r1, #5]
1005b82e:	7108      	strb	r0, [r1, #4]
1005b830:	0a28      	lsrs	r0, r5, #8
1005b832:	7248      	strb	r0, [r1, #9]
1005b834:	4620      	mov	r0, r4
1005b836:	f7f7 fc1c 	bl	10053072 <aci_event_fifo_push>
1005b83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005b83c <__arm_cp.2_0>:
1005b83c:	200010f4 	.word	0x200010f4

1005b840 <__arm_cp.2_1>:
1005b840:	200010a4 	.word	0x200010a4

1005b844 <hci_encryption_key_refresh_complete_event_push>:
1005b844:	b5b0      	push	{r4, r5, r7, lr}
1005b846:	460d      	mov	r5, r1
1005b848:	4604      	mov	r4, r0
1005b84a:	06c0      	lsls	r0, r0, #27
1005b84c:	d406      	bmi.n	1005b85c <hci_encryption_key_refresh_complete_event_push+0x18>
1005b84e:	4814      	ldr	r0, [pc, #80]	@ (1005b8a0 <__arm_cp.3_0>)
1005b850:	6800      	ldr	r0, [r0, #0]
1005b852:	213b      	movs	r1, #59	@ 0x3b
1005b854:	5640      	ldrsb	r0, [r0, r1]
1005b856:	2800      	cmp	r0, #0
1005b858:	d404      	bmi.n	1005b864 <hci_encryption_key_refresh_complete_event_push+0x20>
1005b85a:	bdb0      	pop	{r4, r5, r7, pc}
1005b85c:	20bf      	movs	r0, #191	@ 0xbf
1005b85e:	4004      	ands	r4, r0
1005b860:	2207      	movs	r2, #7
1005b862:	e000      	b.n	1005b866 <hci_encryption_key_refresh_complete_event_push+0x22>
1005b864:	2217      	movs	r2, #23
1005b866:	480f      	ldr	r0, [pc, #60]	@ (1005b8a4 <__arm_cp.3_1>)
1005b868:	6800      	ldr	r0, [r0, #0]
1005b86a:	0761      	lsls	r1, r4, #29
1005b86c:	0ec9      	lsrs	r1, r1, #27
1005b86e:	1840      	adds	r0, r0, r1
1005b870:	6900      	ldr	r0, [r0, #16]
1005b872:	2302      	movs	r3, #2
1005b874:	4621      	mov	r1, r4
1005b876:	f7f7 fb5f 	bl	10052f38 <aci_event_fifo_push_header>
1005b87a:	2800      	cmp	r0, #0
1005b87c:	d0ed      	beq.n	1005b85a <hci_encryption_key_refresh_complete_event_push+0x16>
1005b87e:	4601      	mov	r1, r0
1005b880:	7205      	strb	r5, [r0, #8]
1005b882:	2000      	movs	r0, #0
1005b884:	71c8      	strb	r0, [r1, #7]
1005b886:	2003      	movs	r0, #3
1005b888:	7188      	strb	r0, [r1, #6]
1005b88a:	2030      	movs	r0, #48	@ 0x30
1005b88c:	7148      	strb	r0, [r1, #5]
1005b88e:	2004      	movs	r0, #4
1005b890:	7108      	strb	r0, [r1, #4]
1005b892:	0a28      	lsrs	r0, r5, #8
1005b894:	7248      	strb	r0, [r1, #9]
1005b896:	4620      	mov	r0, r4
1005b898:	f7f7 fbeb 	bl	10053072 <aci_event_fifo_push>
1005b89c:	bdb0      	pop	{r4, r5, r7, pc}
1005b89e:	46c0      	nop			@ (mov r8, r8)

1005b8a0 <__arm_cp.3_0>:
1005b8a0:	200010f4 	.word	0x200010f4

1005b8a4 <__arm_cp.3_1>:
1005b8a4:	200010a4 	.word	0x200010a4

1005b8a8 <llc_enc_prepare_reject>:
1005b8a8:	2203      	movs	r2, #3
1005b8aa:	7002      	strb	r2, [r0, #0]
1005b8ac:	2397      	movs	r3, #151	@ 0x97
1005b8ae:	005b      	lsls	r3, r3, #1
1005b8b0:	5cc9      	ldrb	r1, [r1, r3]
1005b8b2:	0749      	lsls	r1, r1, #29
1005b8b4:	d403      	bmi.n	1005b8be <llc_enc_prepare_reject+0x16>
1005b8b6:	2306      	movs	r3, #6
1005b8b8:	210d      	movs	r1, #13
1005b8ba:	2202      	movs	r2, #2
1005b8bc:	e003      	b.n	1005b8c6 <llc_enc_prepare_reject+0x1e>
1005b8be:	2106      	movs	r1, #6
1005b8c0:	7101      	strb	r1, [r0, #4]
1005b8c2:	2111      	movs	r1, #17
1005b8c4:	4613      	mov	r3, r2
1005b8c6:	70c3      	strb	r3, [r0, #3]
1005b8c8:	7081      	strb	r1, [r0, #2]
1005b8ca:	7042      	strb	r2, [r0, #1]
1005b8cc:	4770      	bx	lr

1005b8ce <LL_Get_LTK>:
1005b8ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005b8d0:	4614      	mov	r4, r2
1005b8d2:	4606      	mov	r6, r0
1005b8d4:	4608      	mov	r0, r1
1005b8d6:	f7fc fbf5 	bl	100580c4 <llc_conn_get_cntxt_per_p_from_handle>
1005b8da:	2130      	movs	r1, #48	@ 0x30
1005b8dc:	5641      	ldrsb	r1, [r0, r1]
1005b8de:	2900      	cmp	r1, #0
1005b8e0:	d405      	bmi.n	1005b8ee <LL_Get_LTK+0x20>
1005b8e2:	302c      	adds	r0, #44	@ 0x2c
1005b8e4:	7800      	ldrb	r0, [r0, #0]
1005b8e6:	2802      	cmp	r0, #2
1005b8e8:	d103      	bne.n	1005b8f2 <LL_Get_LTK+0x24>
1005b8ea:	2512      	movs	r5, #18
1005b8ec:	e018      	b.n	1005b920 <LL_Get_LTK+0x52>
1005b8ee:	2502      	movs	r5, #2
1005b8f0:	e016      	b.n	1005b920 <LL_Get_LTK+0x52>
1005b8f2:	b2cf      	uxtb	r7, r1
1005b8f4:	2500      	movs	r5, #0
1005b8f6:	4638      	mov	r0, r7
1005b8f8:	4629      	mov	r1, r5
1005b8fa:	f7fe f9cd 	bl	10059c98 <LL_cpe_set_prepare_tx_pdu>
1005b8fe:	4638      	mov	r0, r7
1005b900:	4629      	mov	r1, r5
1005b902:	f7fe f9d6 	bl	10059cb2 <LL_cpe_get_cntxt>
1005b906:	4601      	mov	r1, r0
1005b908:	302b      	adds	r0, #43	@ 0x2b
1005b90a:	2e00      	cmp	r6, #0
1005b90c:	d001      	beq.n	1005b912 <LL_Get_LTK+0x44>
1005b90e:	7005      	strb	r5, [r0, #0]
1005b910:	e006      	b.n	1005b920 <LL_Get_LTK+0x52>
1005b912:	2201      	movs	r2, #1
1005b914:	7002      	strb	r2, [r0, #0]
1005b916:	3110      	adds	r1, #16
1005b918:	2210      	movs	r2, #16
1005b91a:	4620      	mov	r0, r4
1005b91c:	f006 ff54 	bl	100627c8 <char_copy>
1005b920:	4628      	mov	r0, r5
1005b922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005b924 <LL_feature_exchange>:
1005b924:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b926:	b085      	sub	sp, #20
1005b928:	461c      	mov	r4, r3
1005b92a:	4615      	mov	r5, r2
1005b92c:	460e      	mov	r6, r1
1005b92e:	4607      	mov	r7, r0
1005b930:	f7fe f9bf 	bl	10059cb2 <LL_cpe_get_cntxt>
1005b934:	9003      	str	r0, [sp, #12]
1005b936:	9702      	str	r7, [sp, #8]
1005b938:	4638      	mov	r0, r7
1005b93a:	f7fc fbb5 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005b93e:	4607      	mov	r7, r0
1005b940:	20ff      	movs	r0, #255	@ 0xff
1005b942:	2d06      	cmp	r5, #6
1005b944:	d900      	bls.n	1005b948 <LL_feature_exchange+0x24>
1005b946:	e099      	b.n	1005ba7c <LL_feature_exchange+0x158>
1005b948:	9604      	str	r6, [sp, #16]
1005b94a:	2197      	movs	r1, #151	@ 0x97
1005b94c:	0049      	lsls	r1, r1, #1
1005b94e:	187b      	adds	r3, r7, r1
1005b950:	463e      	mov	r6, r7
1005b952:	362c      	adds	r6, #44	@ 0x2c
1005b954:	447d      	add	r5, pc
1005b956:	792d      	ldrb	r5, [r5, #4]
1005b958:	006d      	lsls	r5, r5, #1
1005b95a:	44af      	add	pc, r5
1005b95c:	298f0803 	.word	0x298f0803
1005b960:	004a8f8f 	.word	0x004a8f8f
1005b964:	9904      	ldr	r1, [sp, #16]
1005b966:	2901      	cmp	r1, #1
1005b968:	d160      	bne.n	1005ba2c <LL_feature_exchange+0x108>
1005b96a:	2009      	movs	r0, #9
1005b96c:	e086      	b.n	1005ba7c <LL_feature_exchange+0x158>
1005b96e:	78a1      	ldrb	r1, [r4, #2]
1005b970:	290e      	cmp	r1, #14
1005b972:	d002      	beq.n	1005b97a <LL_feature_exchange+0x56>
1005b974:	2908      	cmp	r1, #8
1005b976:	d000      	beq.n	1005b97a <LL_feature_exchange+0x56>
1005b978:	e080      	b.n	1005ba7c <LL_feature_exchange+0x158>
1005b97a:	1ce4      	adds	r4, r4, #3
1005b97c:	9903      	ldr	r1, [sp, #12]
1005b97e:	3108      	adds	r1, #8
1005b980:	4605      	mov	r5, r0
1005b982:	2208      	movs	r2, #8
1005b984:	4620      	mov	r0, r4
1005b986:	461e      	mov	r6, r3
1005b988:	f006 ff1e 	bl	100627c8 <char_copy>
1005b98c:	2205      	movs	r2, #5
1005b98e:	4630      	mov	r0, r6
1005b990:	4621      	mov	r1, r4
1005b992:	f7ea fb5f 	bl	10046054 <BLEPLAT_MemCpy>
1005b996:	9e02      	ldr	r6, [sp, #8]
1005b998:	4630      	mov	r0, r6
1005b99a:	9c04      	ldr	r4, [sp, #16]
1005b99c:	4621      	mov	r1, r4
1005b99e:	f7fe f97b 	bl	10059c98 <LL_cpe_set_prepare_tx_pdu>
1005b9a2:	2203      	movs	r2, #3
1005b9a4:	2300      	movs	r3, #0
1005b9a6:	4630      	mov	r0, r6
1005b9a8:	4621      	mov	r1, r4
1005b9aa:	f7fe f92c 	bl	10059c06 <LL_cpe_set_active>
1005b9ae:	e01e      	b.n	1005b9ee <LL_feature_exchange+0xca>
1005b9b0:	78a1      	ldrb	r1, [r4, #2]
1005b9b2:	2907      	cmp	r1, #7
1005b9b4:	d046      	beq.n	1005ba44 <LL_feature_exchange+0x120>
1005b9b6:	2909      	cmp	r1, #9
1005b9b8:	d160      	bne.n	1005ba7c <LL_feature_exchange+0x158>
1005b9ba:	4605      	mov	r5, r0
1005b9bc:	1ce4      	adds	r4, r4, #3
1005b9be:	2205      	movs	r2, #5
1005b9c0:	4618      	mov	r0, r3
1005b9c2:	4621      	mov	r1, r4
1005b9c4:	f7ea fb46 	bl	10046054 <BLEPLAT_MemCpy>
1005b9c8:	9803      	ldr	r0, [sp, #12]
1005b9ca:	7c40      	ldrb	r0, [r0, #17]
1005b9cc:	2800      	cmp	r0, #0
1005b9ce:	d005      	beq.n	1005b9dc <LL_feature_exchange+0xb8>
1005b9d0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
1005b9d2:	2080      	movs	r0, #128	@ 0x80
1005b9d4:	2100      	movs	r1, #0
1005b9d6:	4623      	mov	r3, r4
1005b9d8:	f008 f938 	bl	10063c4c <hci_le_read_remote_features_complete_event_push_noinline>
1005b9dc:	6e30      	ldr	r0, [r6, #96]	@ 0x60
1005b9de:	2110      	movs	r1, #16
1005b9e0:	4301      	orrs	r1, r0
1005b9e2:	6631      	str	r1, [r6, #96]	@ 0x60
1005b9e4:	2203      	movs	r2, #3
1005b9e6:	9802      	ldr	r0, [sp, #8]
1005b9e8:	9904      	ldr	r1, [sp, #16]
1005b9ea:	f7fe f923 	bl	10059c34 <LL_cpe_clr_active>
1005b9ee:	4628      	mov	r0, r5
1005b9f0:	e044      	b.n	1005ba7c <LL_feature_exchange+0x158>
1005b9f2:	9002      	str	r0, [sp, #8]
1005b9f4:	2009      	movs	r0, #9
1005b9f6:	9001      	str	r0, [sp, #4]
1005b9f8:	7060      	strb	r0, [r4, #1]
1005b9fa:	2003      	movs	r0, #3
1005b9fc:	7020      	strb	r0, [r4, #0]
1005b9fe:	1ce7      	adds	r7, r4, #3
1005ba00:	4638      	mov	r0, r7
1005ba02:	f000 f83d 	bl	1005ba80 <LL_Get_Supported_Features>
1005ba06:	79a0      	ldrb	r0, [r4, #6]
1005ba08:	21f7      	movs	r1, #247	@ 0xf7
1005ba0a:	4001      	ands	r1, r0
1005ba0c:	71a1      	strb	r1, [r4, #6]
1005ba0e:	2508      	movs	r5, #8
1005ba10:	4638      	mov	r0, r7
1005ba12:	9f03      	ldr	r7, [sp, #12]
1005ba14:	4639      	mov	r1, r7
1005ba16:	462a      	mov	r2, r5
1005ba18:	f006 fed6 	bl	100627c8 <char_copy>
1005ba1c:	9804      	ldr	r0, [sp, #16]
1005ba1e:	2801      	cmp	r0, #1
1005ba20:	d108      	bne.n	1005ba34 <LL_feature_exchange+0x110>
1005ba22:	7830      	ldrb	r0, [r6, #0]
1005ba24:	2802      	cmp	r0, #2
1005ba26:	d126      	bne.n	1005ba76 <LL_feature_exchange+0x152>
1005ba28:	70a5      	strb	r5, [r4, #2]
1005ba2a:	e026      	b.n	1005ba7a <LL_feature_exchange+0x156>
1005ba2c:	4604      	mov	r4, r0
1005ba2e:	2203      	movs	r2, #3
1005ba30:	9802      	ldr	r0, [sp, #8]
1005ba32:	e01c      	b.n	1005ba6e <LL_feature_exchange+0x14a>
1005ba34:	9801      	ldr	r0, [sp, #4]
1005ba36:	70a0      	strb	r0, [r4, #2]
1005ba38:	78e0      	ldrb	r0, [r4, #3]
1005ba3a:	7a39      	ldrb	r1, [r7, #8]
1005ba3c:	4001      	ands	r1, r0
1005ba3e:	70e1      	strb	r1, [r4, #3]
1005ba40:	7439      	strb	r1, [r7, #16]
1005ba42:	e01a      	b.n	1005ba7a <LL_feature_exchange+0x156>
1005ba44:	7831      	ldrb	r1, [r6, #0]
1005ba46:	2903      	cmp	r1, #3
1005ba48:	d118      	bne.n	1005ba7c <LL_feature_exchange+0x158>
1005ba4a:	4604      	mov	r4, r0
1005ba4c:	7818      	ldrb	r0, [r3, #0]
1005ba4e:	21f7      	movs	r1, #247	@ 0xf7
1005ba50:	4001      	ands	r1, r0
1005ba52:	7019      	strb	r1, [r3, #0]
1005ba54:	9b03      	ldr	r3, [sp, #12]
1005ba56:	7c58      	ldrb	r0, [r3, #17]
1005ba58:	2800      	cmp	r0, #0
1005ba5a:	d005      	beq.n	1005ba68 <LL_feature_exchange+0x144>
1005ba5c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
1005ba5e:	3308      	adds	r3, #8
1005ba60:	2080      	movs	r0, #128	@ 0x80
1005ba62:	211a      	movs	r1, #26
1005ba64:	f008 f8f2 	bl	10063c4c <hci_le_read_remote_features_complete_event_push_noinline>
1005ba68:	2203      	movs	r2, #3
1005ba6a:	9802      	ldr	r0, [sp, #8]
1005ba6c:	9904      	ldr	r1, [sp, #16]
1005ba6e:	f7fe f8e1 	bl	10059c34 <LL_cpe_clr_active>
1005ba72:	4620      	mov	r0, r4
1005ba74:	e002      	b.n	1005ba7c <LL_feature_exchange+0x158>
1005ba76:	200e      	movs	r0, #14
1005ba78:	70a0      	strb	r0, [r4, #2]
1005ba7a:	9802      	ldr	r0, [sp, #8]
1005ba7c:	b005      	add	sp, #20
1005ba7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005ba80 <LL_Get_Supported_Features>:
1005ba80:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005ba82:	9000      	str	r0, [sp, #0]
1005ba84:	f7f5 fdca 	bl	1005161c <data_length_extension_csr_ucfg>
1005ba88:	4605      	mov	r5, r0
1005ba8a:	f7fe f819 	bl	10059ac0 <llc_priv_controller_privacy_csr_ucfg_weak>
1005ba8e:	b2c0      	uxtb	r0, r0
1005ba90:	21c0      	movs	r1, #192	@ 0xc0
1005ba92:	4341      	muls	r1, r0
1005ba94:	0628      	lsls	r0, r5, #24
1005ba96:	0cc5      	lsrs	r5, r0, #19
1005ba98:	430d      	orrs	r5, r1
1005ba9a:	2009      	movs	r0, #9
1005ba9c:	0206      	lsls	r6, r0, #8
1005ba9e:	f7f5 fdc5 	bl	1005162c <phy_upd_csr_ucfg>
1005baa2:	b2c7      	uxtb	r7, r0
1005baa4:	4377      	muls	r7, r6
1005baa6:	432f      	orrs	r7, r5
1005baa8:	f002 fd75 	bl	1005e596 <ext_adv_scan_enabled_ucfg_weak>
1005baac:	0305      	lsls	r5, r0, #12
1005baae:	433d      	orrs	r5, r7
1005bab0:	4e2c      	ldr	r6, [pc, #176]	@ (1005bb64 <__arm_cp.1_0>)
1005bab2:	47b0      	blx	r6
1005bab4:	b2c0      	uxtb	r0, r0
1005bab6:	4f2c      	ldr	r7, [pc, #176]	@ (1005bb68 <__arm_cp.1_1>)
1005bab8:	4347      	muls	r7, r0
1005baba:	432f      	orrs	r7, r5
1005babc:	200d      	movs	r0, #13
1005babe:	0685      	lsls	r5, r0, #26
1005bac0:	f7fd ffec 	bl	10059a9c <cis_csr_ucfg_weak>
1005bac4:	b2c4      	uxtb	r4, r0
1005bac6:	436c      	muls	r4, r5
1005bac8:	433c      	orrs	r4, r7
1005baca:	2073      	movs	r0, #115	@ 0x73
1005bacc:	0445      	lsls	r5, r0, #17
1005bace:	f7fb fcb7 	bl	10057440 <cte_csr_ucfg_weak>
1005bad2:	b2c7      	uxtb	r7, r0
1005bad4:	436f      	muls	r7, r5
1005bad6:	4327      	orrs	r7, r4
1005bad8:	f7fb fcb2 	bl	10057440 <cte_csr_ucfg_weak>
1005badc:	4605      	mov	r5, r0
1005bade:	47b0      	blx	r6
1005bae0:	4028      	ands	r0, r5
1005bae2:	b2c0      	uxtb	r0, r0
1005bae4:	2503      	movs	r5, #3
1005bae6:	04ec      	lsls	r4, r5, #19
1005bae8:	4344      	muls	r4, r0
1005baea:	433c      	orrs	r4, r7
1005baec:	f7fd ffd4 	bl	10059a98 <bis_csr_ucfg_weak>
1005baf0:	0780      	lsls	r0, r0, #30
1005baf2:	4247      	negs	r7, r0
1005baf4:	4327      	orrs	r7, r4
1005baf6:	f002 fd45 	bl	1005e584 <llc_get_channel_sel_algo2_enabled>
1005bafa:	0380      	lsls	r0, r0, #14
1005bafc:	4338      	orrs	r0, r7
1005bafe:	491b      	ldr	r1, [pc, #108]	@ (1005bb6c <__arm_cp.1_2>)
1005bb00:	4301      	orrs	r1, r0
1005bb02:	9101      	str	r1, [sp, #4]
1005bb04:	f7fb fde3 	bl	100576ce <pcl_csr_ucfg_weak>
1005bb08:	b2c0      	uxtb	r0, r0
1005bb0a:	240e      	movs	r4, #14
1005bb0c:	4344      	muls	r4, r0
1005bb0e:	f7fb fba2 	bl	10057256 <chc_csr_ucfg_weak>
1005bb12:	0600      	lsls	r0, r0, #24
1005bb14:	0c47      	lsrs	r7, r0, #17
1005bb16:	4327      	orrs	r7, r4
1005bb18:	47b0      	blx	r6
1005bb1a:	21f9      	movs	r1, #249	@ 0xf9
1005bb1c:	0109      	lsls	r1, r1, #4
1005bb1e:	0104      	lsls	r4, r0, #4
1005bb20:	400c      	ands	r4, r1
1005bb22:	433c      	orrs	r4, r7
1005bb24:	022e      	lsls	r6, r5, #8
1005bb26:	f002 fd36 	bl	1005e596 <ext_adv_scan_enabled_ucfg_weak>
1005bb2a:	4605      	mov	r5, r0
1005bb2c:	4375      	muls	r5, r6
1005bb2e:	4325      	orrs	r5, r4
1005bb30:	2001      	movs	r0, #1
1005bb32:	02c4      	lsls	r4, r0, #11
1005bb34:	f7fb fde7 	bl	10057706 <scan_csr_ucfg_weak>
1005bb38:	0600      	lsls	r0, r0, #24
1005bb3a:	0b00      	lsrs	r0, r0, #12
1005bb3c:	1904      	adds	r4, r0, r4
1005bb3e:	f7fd ffb9 	bl	10059ab4 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005bb42:	b2c0      	uxtb	r0, r0
1005bb44:	4360      	muls	r0, r4
1005bb46:	4328      	orrs	r0, r5
1005bb48:	2161      	movs	r1, #97	@ 0x61
1005bb4a:	4301      	orrs	r1, r0
1005bb4c:	4808      	ldr	r0, [pc, #32]	@ (1005bb70 <__arm_cp.1_3>)
1005bb4e:	6800      	ldr	r0, [r0, #0]
1005bb50:	6a00      	ldr	r0, [r0, #32]
1005bb52:	4008      	ands	r0, r1
1005bb54:	9002      	str	r0, [sp, #8]
1005bb56:	a901      	add	r1, sp, #4
1005bb58:	2208      	movs	r2, #8
1005bb5a:	9800      	ldr	r0, [sp, #0]
1005bb5c:	f7ea fa7a 	bl	10046054 <BLEPLAT_MemCpy>
1005bb60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005bb62:	46c0      	nop			@ (mov r8, r8)

1005bb64 <__arm_cp.1_0>:
1005bb64:	10059ab1 	.word	0x10059ab1

1005bb68 <__arm_cp.1_1>:
1005bb68:	03002000 	.word	0x03002000

1005bb6c <__arm_cp.1_2>:
1005bb6c:	0800001d 	.word	0x0800001d

1005bb70 <__arm_cp.1_3>:
1005bb70:	200010f4 	.word	0x200010f4

1005bb74 <LL_Read_Remote_Used_Features>:
1005bb74:	b570      	push	{r4, r5, r6, lr}
1005bb76:	4604      	mov	r4, r0
1005bb78:	4608      	mov	r0, r1
1005bb7a:	f7fc faa3 	bl	100580c4 <llc_conn_get_cntxt_per_p_from_handle>
1005bb7e:	2800      	cmp	r0, #0
1005bb80:	d01c      	beq.n	1005bbbc <LL_Read_Remote_Used_Features+0x48>
1005bb82:	4606      	mov	r6, r0
1005bb84:	362c      	adds	r6, #44	@ 0x2c
1005bb86:	7831      	ldrb	r1, [r6, #0]
1005bb88:	2903      	cmp	r1, #3
1005bb8a:	d107      	bne.n	1005bb9c <LL_Read_Remote_Used_Features+0x28>
1005bb8c:	2197      	movs	r1, #151	@ 0x97
1005bb8e:	0049      	lsls	r1, r1, #1
1005bb90:	1840      	adds	r0, r0, r1
1005bb92:	7800      	ldrb	r0, [r0, #0]
1005bb94:	0700      	lsls	r0, r0, #28
1005bb96:	d401      	bmi.n	1005bb9c <LL_Read_Remote_Used_Features+0x28>
1005bb98:	241a      	movs	r4, #26
1005bb9a:	e024      	b.n	1005bbe6 <LL_Read_Remote_Used_Features+0x72>
1005bb9c:	7930      	ldrb	r0, [r6, #4]
1005bb9e:	2101      	movs	r1, #1
1005bba0:	f7fe f823 	bl	10059bea <LL_cpe_get_active_status>
1005bba4:	2800      	cmp	r0, #0
1005bba6:	d00d      	beq.n	1005bbc4 <LL_Read_Remote_Used_Features+0x50>
1005bba8:	2c00      	cmp	r4, #0
1005bbaa:	d109      	bne.n	1005bbc0 <LL_Read_Remote_Used_Features+0x4c>
1005bbac:	7930      	ldrb	r0, [r6, #4]
1005bbae:	2101      	movs	r1, #1
1005bbb0:	f7fe fe4a 	bl	1005a848 <LL_cpe_conn_get_proc_id_from_sm>
1005bbb4:	2803      	cmp	r0, #3
1005bbb6:	d103      	bne.n	1005bbc0 <LL_Read_Remote_Used_Features+0x4c>
1005bbb8:	2400      	movs	r4, #0
1005bbba:	e014      	b.n	1005bbe6 <LL_Read_Remote_Used_Features+0x72>
1005bbbc:	2402      	movs	r4, #2
1005bbbe:	e012      	b.n	1005bbe6 <LL_Read_Remote_Used_Features+0x72>
1005bbc0:	243a      	movs	r4, #58	@ 0x3a
1005bbc2:	e010      	b.n	1005bbe6 <LL_Read_Remote_Used_Features+0x72>
1005bbc4:	7930      	ldrb	r0, [r6, #4]
1005bbc6:	2501      	movs	r5, #1
1005bbc8:	4629      	mov	r1, r5
1005bbca:	f7fe f872 	bl	10059cb2 <LL_cpe_get_cntxt>
1005bbce:	7444      	strb	r4, [r0, #17]
1005bbd0:	7930      	ldrb	r0, [r6, #4]
1005bbd2:	4629      	mov	r1, r5
1005bbd4:	f7fe f860 	bl	10059c98 <LL_cpe_set_prepare_tx_pdu>
1005bbd8:	7930      	ldrb	r0, [r6, #4]
1005bbda:	2203      	movs	r2, #3
1005bbdc:	2400      	movs	r4, #0
1005bbde:	4629      	mov	r1, r5
1005bbe0:	4623      	mov	r3, r4
1005bbe2:	f7fe f810 	bl	10059c06 <LL_cpe_set_active>
1005bbe6:	4620      	mov	r0, r4
1005bbe8:	bd70      	pop	{r4, r5, r6, pc}
	...

1005bbec <LL_length_update>:
1005bbec:	b5f0      	push	{r4, r5, r6, r7, lr}
1005bbee:	b085      	sub	sp, #20
1005bbf0:	461d      	mov	r5, r3
1005bbf2:	4617      	mov	r7, r2
1005bbf4:	4606      	mov	r6, r0
1005bbf6:	9104      	str	r1, [sp, #16]
1005bbf8:	f7fe f85b 	bl	10059cb2 <LL_cpe_get_cntxt>
1005bbfc:	4604      	mov	r4, r0
1005bbfe:	9603      	str	r6, [sp, #12]
1005bc00:	4630      	mov	r0, r6
1005bc02:	f7fc fa51 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005bc06:	4606      	mov	r6, r0
1005bc08:	20ff      	movs	r0, #255	@ 0xff
1005bc0a:	2f06      	cmp	r7, #6
1005bc0c:	d900      	bls.n	1005bc10 <LL_length_update+0x24>
1005bc0e:	e0e6      	b.n	1005bdde <LL_length_update+0x1f2>
1005bc10:	9402      	str	r4, [sp, #8]
1005bc12:	4634      	mov	r4, r6
1005bc14:	34b4      	adds	r4, #180	@ 0xb4
1005bc16:	46c0      	nop			@ (mov r8, r8)
1005bc18:	447f      	add	r7, pc
1005bc1a:	793f      	ldrb	r7, [r7, #4]
1005bc1c:	007f      	lsls	r7, r7, #1
1005bc1e:	44bf      	add	pc, r7
1005bc20:	2ade0903 	.word	0x2ade0903
1005bc24:	004edede 	.word	0x004edede
1005bc28:	9904      	ldr	r1, [sp, #16]
1005bc2a:	2900      	cmp	r1, #0
1005bc2c:	d100      	bne.n	1005bc30 <LL_length_update+0x44>
1005bc2e:	e095      	b.n	1005bd5c <LL_length_update+0x170>
1005bc30:	2015      	movs	r0, #21
1005bc32:	e0d4      	b.n	1005bdde <LL_length_update+0x1f2>
1005bc34:	78a9      	ldrb	r1, [r5, #2]
1005bc36:	2914      	cmp	r1, #20
1005bc38:	d000      	beq.n	1005bc3c <LL_length_update+0x50>
1005bc3a:	e0d0      	b.n	1005bdde <LL_length_update+0x1f2>
1005bc3c:	4604      	mov	r4, r0
1005bc3e:	4628      	mov	r0, r5
1005bc40:	9902      	ldr	r1, [sp, #8]
1005bc42:	f000 f9bb 	bl	1005bfbc <LL_length_check_remote_data_and_set_cpf_context>
1005bc46:	2800      	cmp	r0, #0
1005bc48:	d100      	bne.n	1005bc4c <LL_length_update+0x60>
1005bc4a:	e0b6      	b.n	1005bdba <LL_length_update+0x1ce>
1005bc4c:	9d03      	ldr	r5, [sp, #12]
1005bc4e:	4628      	mov	r0, r5
1005bc50:	f7fc fa2a 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005bc54:	218c      	movs	r1, #140	@ 0x8c
1005bc56:	5842      	ldr	r2, [r0, r1]
1005bc58:	2320      	movs	r3, #32
1005bc5a:	4313      	orrs	r3, r2
1005bc5c:	5043      	str	r3, [r0, r1]
1005bc5e:	4628      	mov	r0, r5
1005bc60:	9e04      	ldr	r6, [sp, #16]
1005bc62:	4631      	mov	r1, r6
1005bc64:	f7fe f818 	bl	10059c98 <LL_cpe_set_prepare_tx_pdu>
1005bc68:	2206      	movs	r2, #6
1005bc6a:	2300      	movs	r3, #0
1005bc6c:	4628      	mov	r0, r5
1005bc6e:	4631      	mov	r1, r6
1005bc70:	f7fd ffc9 	bl	10059c06 <LL_cpe_set_active>
1005bc74:	e0a4      	b.n	1005bdc0 <LL_length_update+0x1d4>
1005bc76:	78a9      	ldrb	r1, [r5, #2]
1005bc78:	2907      	cmp	r1, #7
1005bc7a:	d100      	bne.n	1005bc7e <LL_length_update+0x92>
1005bc7c:	e086      	b.n	1005bd8c <LL_length_update+0x1a0>
1005bc7e:	2915      	cmp	r1, #21
1005bc80:	d000      	beq.n	1005bc84 <LL_length_update+0x98>
1005bc82:	e0ac      	b.n	1005bdde <LL_length_update+0x1f2>
1005bc84:	9001      	str	r0, [sp, #4]
1005bc86:	4628      	mov	r0, r5
1005bc88:	9f02      	ldr	r7, [sp, #8]
1005bc8a:	4639      	mov	r1, r7
1005bc8c:	f000 f996 	bl	1005bfbc <LL_length_check_remote_data_and_set_cpf_context>
1005bc90:	2800      	cmp	r0, #0
1005bc92:	d100      	bne.n	1005bc96 <LL_length_update+0xaa>
1005bc94:	e096      	b.n	1005bdc4 <LL_length_update+0x1d8>
1005bc96:	4638      	mov	r0, r7
1005bc98:	4631      	mov	r1, r6
1005bc9a:	f000 f8af 	bl	1005bdfc <LL_Compute_Data_PDU_Length_params>
1005bc9e:	4638      	mov	r0, r7
1005bca0:	4631      	mov	r1, r6
1005bca2:	f000 f8f7 	bl	1005be94 <LL_Data_Length_Change_Event>
1005bca6:	2801      	cmp	r0, #1
1005bca8:	d000      	beq.n	1005bcac <LL_length_update+0xc0>
1005bcaa:	e092      	b.n	1005bdd2 <LL_length_update+0x1e6>
1005bcac:	88a3      	ldrh	r3, [r4, #4]
1005bcae:	88e2      	ldrh	r2, [r4, #6]
1005bcb0:	8821      	ldrh	r1, [r4, #0]
1005bcb2:	8f70      	ldrh	r0, [r6, #58]	@ 0x3a
1005bcb4:	8924      	ldrh	r4, [r4, #8]
1005bcb6:	9400      	str	r4, [sp, #0]
1005bcb8:	f000 f944 	bl	1005bf44 <hci_le_data_length_change_event_push>
1005bcbc:	e089      	b.n	1005bdd2 <LL_length_update+0x1e6>
1005bcbe:	9001      	str	r0, [sp, #4]
1005bcc0:	9803      	ldr	r0, [sp, #12]
1005bcc2:	f7fc f9f1 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005bcc6:	218c      	movs	r1, #140	@ 0x8c
1005bcc8:	5840      	ldr	r0, [r0, r1]
1005bcca:	2620      	movs	r6, #32
1005bccc:	4006      	ands	r6, r0
1005bcce:	9804      	ldr	r0, [sp, #16]
1005bcd0:	2801      	cmp	r0, #1
1005bcd2:	d112      	bne.n	1005bcfa <LL_length_update+0x10e>
1005bcd4:	2e00      	cmp	r6, #0
1005bcd6:	d010      	beq.n	1005bcfa <LL_length_update+0x10e>
1005bcd8:	2100      	movs	r1, #0
1005bcda:	9c03      	ldr	r4, [sp, #12]
1005bcdc:	4620      	mov	r0, r4
1005bcde:	f7fd ffe8 	bl	10059cb2 <LL_cpe_get_cntxt>
1005bce2:	9a02      	ldr	r2, [sp, #8]
1005bce4:	8891      	ldrh	r1, [r2, #4]
1005bce6:	8081      	strh	r1, [r0, #4]
1005bce8:	88d1      	ldrh	r1, [r2, #6]
1005bcea:	80c1      	strh	r1, [r0, #6]
1005bcec:	4620      	mov	r0, r4
1005bcee:	f000 f87b 	bl	1005bde8 <LL_conn_clr_length_req_received>
1005bcf2:	2101      	movs	r1, #1
1005bcf4:	2206      	movs	r2, #6
1005bcf6:	4620      	mov	r0, r4
1005bcf8:	e06e      	b.n	1005bdd8 <LL_length_update+0x1ec>
1005bcfa:	2009      	movs	r0, #9
1005bcfc:	4629      	mov	r1, r5
1005bcfe:	7068      	strb	r0, [r5, #1]
1005bd00:	2003      	movs	r0, #3
1005bd02:	7028      	strb	r0, [r5, #0]
1005bd04:	9804      	ldr	r0, [sp, #16]
1005bd06:	2801      	cmp	r0, #1
1005bd08:	9f02      	ldr	r7, [sp, #8]
1005bd0a:	d00e      	beq.n	1005bd2a <LL_length_update+0x13e>
1005bd0c:	f7fc f9c2 	bl	10058094 <llc_conn_get_cntxt_p>
1005bd10:	8b01      	ldrh	r1, [r0, #24]
1005bd12:	8039      	strh	r1, [r7, #0]
1005bd14:	8b40      	ldrh	r0, [r0, #26]
1005bd16:	8078      	strh	r0, [r7, #2]
1005bd18:	2e00      	cmp	r6, #0
1005bd1a:	d006      	beq.n	1005bd2a <LL_length_update+0x13e>
1005bd1c:	8960      	ldrh	r0, [r4, #10]
1005bd1e:	80b8      	strh	r0, [r7, #4]
1005bd20:	89a0      	ldrh	r0, [r4, #12]
1005bd22:	80f8      	strh	r0, [r7, #6]
1005bd24:	9803      	ldr	r0, [sp, #12]
1005bd26:	f000 f85f 	bl	1005bde8 <LL_conn_clr_length_req_received>
1005bd2a:	462e      	mov	r6, r5
1005bd2c:	1ce9      	adds	r1, r5, #3
1005bd2e:	2502      	movs	r5, #2
1005bd30:	4c2c      	ldr	r4, [pc, #176]	@ (1005bde4 <__arm_cp.0_0>)
1005bd32:	4638      	mov	r0, r7
1005bd34:	462a      	mov	r2, r5
1005bd36:	47a0      	blx	r4
1005bd38:	1cb8      	adds	r0, r7, #2
1005bd3a:	1d71      	adds	r1, r6, #5
1005bd3c:	462a      	mov	r2, r5
1005bd3e:	47a0      	blx	r4
1005bd40:	1d38      	adds	r0, r7, #4
1005bd42:	1df1      	adds	r1, r6, #7
1005bd44:	462a      	mov	r2, r5
1005bd46:	47a0      	blx	r4
1005bd48:	1db8      	adds	r0, r7, #6
1005bd4a:	4631      	mov	r1, r6
1005bd4c:	3109      	adds	r1, #9
1005bd4e:	462a      	mov	r2, r5
1005bd50:	47a0      	blx	r4
1005bd52:	9804      	ldr	r0, [sp, #16]
1005bd54:	2801      	cmp	r0, #1
1005bd56:	d12d      	bne.n	1005bdb4 <LL_length_update+0x1c8>
1005bd58:	2014      	movs	r0, #20
1005bd5a:	e02c      	b.n	1005bdb6 <LL_length_update+0x1ca>
1005bd5c:	9001      	str	r0, [sp, #4]
1005bd5e:	9f02      	ldr	r7, [sp, #8]
1005bd60:	4638      	mov	r0, r7
1005bd62:	4631      	mov	r1, r6
1005bd64:	f000 f84a 	bl	1005bdfc <LL_Compute_Data_PDU_Length_params>
1005bd68:	4638      	mov	r0, r7
1005bd6a:	4631      	mov	r1, r6
1005bd6c:	f000 f892 	bl	1005be94 <LL_Data_Length_Change_Event>
1005bd70:	2801      	cmp	r0, #1
1005bd72:	d107      	bne.n	1005bd84 <LL_length_update+0x198>
1005bd74:	88a3      	ldrh	r3, [r4, #4]
1005bd76:	88e2      	ldrh	r2, [r4, #6]
1005bd78:	8821      	ldrh	r1, [r4, #0]
1005bd7a:	8f70      	ldrh	r0, [r6, #58]	@ 0x3a
1005bd7c:	8924      	ldrh	r4, [r4, #8]
1005bd7e:	9400      	str	r4, [sp, #0]
1005bd80:	f000 f8e0 	bl	1005bf44 <hci_le_data_length_change_event_push>
1005bd84:	2100      	movs	r1, #0
1005bd86:	2206      	movs	r2, #6
1005bd88:	9803      	ldr	r0, [sp, #12]
1005bd8a:	e025      	b.n	1005bdd8 <LL_length_update+0x1ec>
1005bd8c:	2197      	movs	r1, #151	@ 0x97
1005bd8e:	0049      	lsls	r1, r1, #1
1005bd90:	1873      	adds	r3, r6, r1
1005bd92:	7819      	ldrb	r1, [r3, #0]
1005bd94:	4606      	mov	r6, r0
1005bd96:	22df      	movs	r2, #223	@ 0xdf
1005bd98:	400a      	ands	r2, r1
1005bd9a:	701a      	strb	r2, [r3, #0]
1005bd9c:	9902      	ldr	r1, [sp, #8]
1005bd9e:	8b08      	ldrh	r0, [r1, #24]
1005bda0:	8160      	strh	r0, [r4, #10]
1005bda2:	8b48      	ldrh	r0, [r1, #26]
1005bda4:	81a0      	strh	r0, [r4, #12]
1005bda6:	2206      	movs	r2, #6
1005bda8:	9803      	ldr	r0, [sp, #12]
1005bdaa:	9904      	ldr	r1, [sp, #16]
1005bdac:	f7fd ff42 	bl	10059c34 <LL_cpe_clr_active>
1005bdb0:	4630      	mov	r0, r6
1005bdb2:	e014      	b.n	1005bdde <LL_length_update+0x1f2>
1005bdb4:	2015      	movs	r0, #21
1005bdb6:	70b0      	strb	r0, [r6, #2]
1005bdb8:	e010      	b.n	1005bddc <LL_length_update+0x1f0>
1005bdba:	9803      	ldr	r0, [sp, #12]
1005bdbc:	f7fd fef0 	bl	10059ba0 <ll_cpe_set_unknown_rsp_pending>
1005bdc0:	4620      	mov	r0, r4
1005bdc2:	e00c      	b.n	1005bdde <LL_length_update+0x1f2>
1005bdc4:	9803      	ldr	r0, [sp, #12]
1005bdc6:	f7fd feeb 	bl	10059ba0 <ll_cpe_set_unknown_rsp_pending>
1005bdca:	8b38      	ldrh	r0, [r7, #24]
1005bdcc:	8160      	strh	r0, [r4, #10]
1005bdce:	8b78      	ldrh	r0, [r7, #26]
1005bdd0:	81a0      	strh	r0, [r4, #12]
1005bdd2:	2206      	movs	r2, #6
1005bdd4:	9803      	ldr	r0, [sp, #12]
1005bdd6:	9904      	ldr	r1, [sp, #16]
1005bdd8:	f7fd ff2c 	bl	10059c34 <LL_cpe_clr_active>
1005bddc:	9801      	ldr	r0, [sp, #4]
1005bdde:	b005      	add	sp, #20
1005bde0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005bde2:	46c0      	nop			@ (mov r8, r8)

1005bde4 <__arm_cp.0_0>:
1005bde4:	100627c9 	.word	0x100627c9

1005bde8 <LL_conn_clr_length_req_received>:
1005bde8:	b580      	push	{r7, lr}
1005bdea:	f7fc f95d 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005bdee:	218c      	movs	r1, #140	@ 0x8c
1005bdf0:	5842      	ldr	r2, [r0, r1]
1005bdf2:	2320      	movs	r3, #32
1005bdf4:	439a      	bics	r2, r3
1005bdf6:	5042      	str	r2, [r0, r1]
1005bdf8:	bd80      	pop	{r7, pc}
	...

1005bdfc <LL_Compute_Data_PDU_Length_params>:
1005bdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005bdfe:	460d      	mov	r5, r1
1005be00:	4604      	mov	r4, r0
1005be02:	8800      	ldrh	r0, [r0, #0]
1005be04:	89a1      	ldrh	r1, [r4, #12]
1005be06:	4288      	cmp	r0, r1
1005be08:	d300      	bcc.n	1005be0c <LL_Compute_Data_PDU_Length_params+0x10>
1005be0a:	4608      	mov	r0, r1
1005be0c:	8260      	strh	r0, [r4, #18]
1005be0e:	88a0      	ldrh	r0, [r4, #4]
1005be10:	8921      	ldrh	r1, [r4, #8]
1005be12:	4288      	cmp	r0, r1
1005be14:	d300      	bcc.n	1005be18 <LL_Compute_Data_PDU_Length_params+0x1c>
1005be16:	4608      	mov	r0, r1
1005be18:	8220      	strh	r0, [r4, #16]
1005be1a:	8867      	ldrh	r7, [r4, #2]
1005be1c:	89e0      	ldrh	r0, [r4, #14]
1005be1e:	4287      	cmp	r7, r0
1005be20:	d300      	bcc.n	1005be24 <LL_Compute_Data_PDU_Length_params+0x28>
1005be22:	4607      	mov	r7, r0
1005be24:	82e7      	strh	r7, [r4, #22]
1005be26:	88e6      	ldrh	r6, [r4, #6]
1005be28:	8960      	ldrh	r0, [r4, #10]
1005be2a:	4286      	cmp	r6, r0
1005be2c:	d300      	bcc.n	1005be30 <LL_Compute_Data_PDU_Length_params+0x34>
1005be2e:	4606      	mov	r6, r0
1005be30:	82a6      	strh	r6, [r4, #20]
1005be32:	2030      	movs	r0, #48	@ 0x30
1005be34:	5c28      	ldrb	r0, [r5, r0]
1005be36:	f7fc f96b 	bl	10058110 <llc_conn_get_phy_upd_cntxt_per_p>
1005be3a:	2800      	cmp	r0, #0
1005be3c:	d026      	beq.n	1005be8c <LL_Compute_Data_PDU_Length_params+0x90>
1005be3e:	21a9      	movs	r1, #169	@ 0xa9
1005be40:	0109      	lsls	r1, r1, #4
1005be42:	79c2      	ldrb	r2, [r0, #7]
1005be44:	2a04      	cmp	r2, #4
1005be46:	d103      	bne.n	1005be50 <LL_Compute_Data_PDU_Length_params+0x54>
1005be48:	428f      	cmp	r7, r1
1005be4a:	d800      	bhi.n	1005be4e <LL_Compute_Data_PDU_Length_params+0x52>
1005be4c:	460f      	mov	r7, r1
1005be4e:	82e7      	strh	r7, [r4, #22]
1005be50:	7980      	ldrb	r0, [r0, #6]
1005be52:	2804      	cmp	r0, #4
1005be54:	d11a      	bne.n	1005be8c <LL_Compute_Data_PDU_Length_params+0x90>
1005be56:	203d      	movs	r0, #61	@ 0x3d
1005be58:	0100      	lsls	r0, r0, #4
1005be5a:	8a62      	ldrh	r2, [r4, #18]
1005be5c:	0192      	lsls	r2, r2, #6
1005be5e:	1812      	adds	r2, r2, r0
1005be60:	8ae0      	ldrh	r0, [r4, #22]
1005be62:	4282      	cmp	r2, r0
1005be64:	d800      	bhi.n	1005be68 <LL_Compute_Data_PDU_Length_params+0x6c>
1005be66:	4610      	mov	r0, r2
1005be68:	224b      	movs	r2, #75	@ 0x4b
1005be6a:	0092      	lsls	r2, r2, #2
1005be6c:	1880      	adds	r0, r0, r2
1005be6e:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
1005be70:	4b07      	ldr	r3, [pc, #28]	@ (1005be90 <__arm_cp.2_0>)
1005be72:	4353      	muls	r3, r2
1005be74:	0a1a      	lsrs	r2, r3, #8
1005be76:	1a10      	subs	r0, r2, r0
1005be78:	d200      	bcs.n	1005be7c <LL_Compute_Data_PDU_Length_params+0x80>
1005be7a:	2000      	movs	r0, #0
1005be7c:	42b0      	cmp	r0, r6
1005be7e:	d800      	bhi.n	1005be82 <LL_Compute_Data_PDU_Length_params+0x86>
1005be80:	4606      	mov	r6, r0
1005be82:	b2b0      	uxth	r0, r6
1005be84:	4288      	cmp	r0, r1
1005be86:	d800      	bhi.n	1005be8a <LL_Compute_Data_PDU_Length_params+0x8e>
1005be88:	4608      	mov	r0, r1
1005be8a:	82a0      	strh	r0, [r4, #20]
1005be8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005be8e:	46c0      	nop			@ (mov r8, r8)

1005be90 <__arm_cp.2_0>:
1005be90:	00000271 	.word	0x00000271

1005be94 <LL_Data_Length_Change_Event>:
1005be94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005be96:	460c      	mov	r4, r1
1005be98:	21b8      	movs	r1, #184	@ 0xb8
1005be9a:	5a65      	ldrh	r5, [r4, r1]
1005be9c:	8a03      	ldrh	r3, [r0, #16]
1005be9e:	8a42      	ldrh	r2, [r0, #18]
1005bea0:	4621      	mov	r1, r4
1005bea2:	3130      	adds	r1, #48	@ 0x30
1005bea4:	4626      	mov	r6, r4
1005bea6:	36b4      	adds	r6, #180	@ 0xb4
1005bea8:	42aa      	cmp	r2, r5
1005beaa:	d10c      	bne.n	1005bec6 <LL_Data_Length_Change_Event+0x32>
1005beac:	8835      	ldrh	r5, [r6, #0]
1005beae:	42ab      	cmp	r3, r5
1005beb0:	d109      	bne.n	1005bec6 <LL_Data_Length_Change_Event+0x32>
1005beb2:	8935      	ldrh	r5, [r6, #8]
1005beb4:	8ac7      	ldrh	r7, [r0, #22]
1005beb6:	42af      	cmp	r7, r5
1005beb8:	d105      	bne.n	1005bec6 <LL_Data_Length_Change_Event+0x32>
1005beba:	88f5      	ldrh	r5, [r6, #6]
1005bebc:	8a87      	ldrh	r7, [r0, #20]
1005bebe:	42af      	cmp	r7, r5
1005bec0:	d101      	bne.n	1005bec6 <LL_Data_Length_Change_Event+0x32>
1005bec2:	2500      	movs	r5, #0
1005bec4:	e010      	b.n	1005bee8 <LL_Data_Length_Change_Event+0x54>
1005bec6:	8033      	strh	r3, [r6, #0]
1005bec8:	80b2      	strh	r2, [r6, #4]
1005beca:	8ac2      	ldrh	r2, [r0, #22]
1005becc:	8132      	strh	r2, [r6, #8]
1005bece:	8a82      	ldrh	r2, [r0, #20]
1005bed0:	80f2      	strh	r2, [r6, #6]
1005bed2:	8882      	ldrh	r2, [r0, #4]
1005bed4:	8172      	strh	r2, [r6, #10]
1005bed6:	8842      	ldrh	r2, [r0, #2]
1005bed8:	81f2      	strh	r2, [r6, #14]
1005beda:	88c2      	ldrh	r2, [r0, #6]
1005bedc:	81b2      	strh	r2, [r6, #12]
1005bede:	8942      	ldrh	r2, [r0, #10]
1005bee0:	8272      	strh	r2, [r6, #18]
1005bee2:	89c0      	ldrh	r0, [r0, #14]
1005bee4:	8230      	strh	r0, [r6, #16]
1005bee6:	2501      	movs	r5, #1
1005bee8:	7808      	ldrb	r0, [r1, #0]
1005beea:	f7fc f911 	bl	10058110 <llc_conn_get_phy_upd_cntxt_per_p>
1005beee:	2800      	cmp	r0, #0
1005bef0:	d004      	beq.n	1005befc <LL_Data_Length_Change_Event+0x68>
1005bef2:	7981      	ldrb	r1, [r0, #6]
1005bef4:	2904      	cmp	r1, #4
1005bef6:	d005      	beq.n	1005bf04 <LL_Data_Length_Change_Event+0x70>
1005bef8:	2901      	cmp	r1, #1
1005befa:	d108      	bne.n	1005bf0e <LL_Data_Length_Change_Event+0x7a>
1005befc:	88f0      	ldrh	r0, [r6, #6]
1005befe:	08c0      	lsrs	r0, r0, #3
1005bf00:	380e      	subs	r0, #14
1005bf02:	e010      	b.n	1005bf26 <LL_Data_Length_Change_Event+0x92>
1005bf04:	8800      	ldrh	r0, [r0, #0]
1005bf06:	2802      	cmp	r0, #2
1005bf08:	d005      	beq.n	1005bf16 <LL_Data_Length_Change_Event+0x82>
1005bf0a:	2001      	movs	r0, #1
1005bf0c:	e004      	b.n	1005bf18 <LL_Data_Length_Change_Event+0x84>
1005bf0e:	88f0      	ldrh	r0, [r6, #6]
1005bf10:	0880      	lsrs	r0, r0, #2
1005bf12:	380f      	subs	r0, #15
1005bf14:	e007      	b.n	1005bf26 <LL_Data_Length_Change_Event+0x92>
1005bf16:	2003      	movs	r0, #3
1005bf18:	88f1      	ldrh	r1, [r6, #6]
1005bf1a:	4a08      	ldr	r2, [pc, #32]	@ (1005bf3c <__arm_cp.3_0>)
1005bf1c:	1889      	adds	r1, r1, r2
1005bf1e:	40c1      	lsrs	r1, r0
1005bf20:	4807      	ldr	r0, [pc, #28]	@ (1005bf40 <__arm_cp.3_1>)
1005bf22:	1808      	adds	r0, r1, r0
1005bf24:	08c0      	lsrs	r0, r0, #3
1005bf26:	b282      	uxth	r2, r0
1005bf28:	8831      	ldrh	r1, [r6, #0]
1005bf2a:	4291      	cmp	r1, r2
1005bf2c:	d300      	bcc.n	1005bf30 <LL_Data_Length_Change_Event+0x9c>
1005bf2e:	4601      	mov	r1, r0
1005bf30:	8071      	strh	r1, [r6, #2]
1005bf32:	4620      	mov	r0, r4
1005bf34:	f7fc fb82 	bl	1005863c <llc_conn_guard_time_for_close_conn_event>
1005bf38:	4628      	mov	r0, r5
1005bf3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005bf3c <__arm_cp.3_0>:
1005bf3c:	fffffe88 	.word	0xfffffe88

1005bf40 <__arm_cp.3_1>:
1005bf40:	0007ffb5 	.word	0x0007ffb5

1005bf44 <hci_le_data_length_change_event_push>:
1005bf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005bf46:	460d      	mov	r5, r1
1005bf48:	4604      	mov	r4, r0
1005bf4a:	481a      	ldr	r0, [pc, #104]	@ (1005bfb4 <__arm_cp.4_0>)
1005bf4c:	6800      	ldr	r0, [r0, #0]
1005bf4e:	213d      	movs	r1, #61	@ 0x3d
1005bf50:	5c41      	ldrb	r1, [r0, r1]
1005bf52:	0689      	lsls	r1, r1, #26
1005bf54:	d52c      	bpl.n	1005bfb0 <hci_le_data_length_change_event_push+0x6c>
1005bf56:	303d      	adds	r0, #61	@ 0x3d
1005bf58:	7a40      	ldrb	r0, [r0, #9]
1005bf5a:	0640      	lsls	r0, r0, #25
1005bf5c:	d528      	bpl.n	1005bfb0 <hci_le_data_length_change_event_push+0x6c>
1005bf5e:	461f      	mov	r7, r3
1005bf60:	4616      	mov	r6, r2
1005bf62:	4815      	ldr	r0, [pc, #84]	@ (1005bfb8 <__arm_cp.4_1>)
1005bf64:	6800      	ldr	r0, [r0, #0]
1005bf66:	6900      	ldr	r0, [r0, #16]
1005bf68:	2180      	movs	r1, #128	@ 0x80
1005bf6a:	2226      	movs	r2, #38	@ 0x26
1005bf6c:	2304      	movs	r3, #4
1005bf6e:	9300      	str	r3, [sp, #0]
1005bf70:	f7f6 ffe2 	bl	10052f38 <aci_event_fifo_push_header>
1005bf74:	2800      	cmp	r0, #0
1005bf76:	d01b      	beq.n	1005bfb0 <hci_le_data_length_change_event_push+0x6c>
1005bf78:	4601      	mov	r1, r0
1005bf7a:	9806      	ldr	r0, [sp, #24]
1005bf7c:	7408      	strb	r0, [r1, #16]
1005bf7e:	738f      	strb	r7, [r1, #14]
1005bf80:	730e      	strb	r6, [r1, #12]
1005bf82:	728d      	strb	r5, [r1, #10]
1005bf84:	720c      	strb	r4, [r1, #8]
1005bf86:	2207      	movs	r2, #7
1005bf88:	71ca      	strb	r2, [r1, #7]
1005bf8a:	220b      	movs	r2, #11
1005bf8c:	718a      	strb	r2, [r1, #6]
1005bf8e:	223e      	movs	r2, #62	@ 0x3e
1005bf90:	714a      	strb	r2, [r1, #5]
1005bf92:	9a00      	ldr	r2, [sp, #0]
1005bf94:	710a      	strb	r2, [r1, #4]
1005bf96:	0a00      	lsrs	r0, r0, #8
1005bf98:	7448      	strb	r0, [r1, #17]
1005bf9a:	0a38      	lsrs	r0, r7, #8
1005bf9c:	73c8      	strb	r0, [r1, #15]
1005bf9e:	0a30      	lsrs	r0, r6, #8
1005bfa0:	7348      	strb	r0, [r1, #13]
1005bfa2:	0a28      	lsrs	r0, r5, #8
1005bfa4:	72c8      	strb	r0, [r1, #11]
1005bfa6:	0a20      	lsrs	r0, r4, #8
1005bfa8:	7248      	strb	r0, [r1, #9]
1005bfaa:	2080      	movs	r0, #128	@ 0x80
1005bfac:	f7f7 f861 	bl	10053072 <aci_event_fifo_push>
1005bfb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005bfb2:	46c0      	nop			@ (mov r8, r8)

1005bfb4 <__arm_cp.4_0>:
1005bfb4:	200010f4 	.word	0x200010f4

1005bfb8 <__arm_cp.4_1>:
1005bfb8:	200010a4 	.word	0x200010a4

1005bfbc <LL_length_check_remote_data_and_set_cpf_context>:
1005bfbc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005bfbe:	9100      	str	r1, [sp, #0]
1005bfc0:	4606      	mov	r6, r0
1005bfc2:	1cc0      	adds	r0, r0, #3
1005bfc4:	ad02      	add	r5, sp, #8
1005bfc6:	2702      	movs	r7, #2
1005bfc8:	4c20      	ldr	r4, [pc, #128]	@ (1005c04c <__arm_cp.5_0>)
1005bfca:	4629      	mov	r1, r5
1005bfcc:	463a      	mov	r2, r7
1005bfce:	47a0      	blx	r4
1005bfd0:	1d70      	adds	r0, r6, #5
1005bfd2:	1ca9      	adds	r1, r5, #2
1005bfd4:	463a      	mov	r2, r7
1005bfd6:	47a0      	blx	r4
1005bfd8:	1df0      	adds	r0, r6, #7
1005bfda:	ac01      	add	r4, sp, #4
1005bfdc:	4621      	mov	r1, r4
1005bfde:	463a      	mov	r2, r7
1005bfe0:	4b1a      	ldr	r3, [pc, #104]	@ (1005c04c <__arm_cp.5_0>)
1005bfe2:	4798      	blx	r3
1005bfe4:	3609      	adds	r6, #9
1005bfe6:	1ca1      	adds	r1, r4, #2
1005bfe8:	4630      	mov	r0, r6
1005bfea:	463a      	mov	r2, r7
1005bfec:	4b17      	ldr	r3, [pc, #92]	@ (1005c04c <__arm_cp.5_0>)
1005bfee:	4798      	blx	r3
1005bff0:	8829      	ldrh	r1, [r5, #0]
1005bff2:	2212      	movs	r2, #18
1005bff4:	29fb      	cmp	r1, #251	@ 0xfb
1005bff6:	d80e      	bhi.n	1005c016 <LL_length_check_remote_data_and_set_cpf_context+0x5a>
1005bff8:	291b      	cmp	r1, #27
1005bffa:	d30c      	bcc.n	1005c016 <LL_length_check_remote_data_and_set_cpf_context+0x5a>
1005bffc:	a802      	add	r0, sp, #8
1005bffe:	8840      	ldrh	r0, [r0, #2]
1005c000:	4b13      	ldr	r3, [pc, #76]	@ (1005c050 <__arm_cp.5_1>)
1005c002:	4298      	cmp	r0, r3
1005c004:	d807      	bhi.n	1005c016 <LL_length_check_remote_data_and_set_cpf_context+0x5a>
1005c006:	22ff      	movs	r2, #255	@ 0xff
1005c008:	3248      	adds	r2, #72	@ 0x48
1005c00a:	1c52      	adds	r2, r2, #1
1005c00c:	4290      	cmp	r0, r2
1005c00e:	d301      	bcc.n	1005c014 <LL_length_check_remote_data_and_set_cpf_context+0x58>
1005c010:	2200      	movs	r2, #0
1005c012:	e000      	b.n	1005c016 <LL_length_check_remote_data_and_set_cpf_context+0x5a>
1005c014:	2212      	movs	r2, #18
1005c016:	a801      	add	r0, sp, #4
1005c018:	8803      	ldrh	r3, [r0, #0]
1005c01a:	2000      	movs	r0, #0
1005c01c:	2bfb      	cmp	r3, #251	@ 0xfb
1005c01e:	d813      	bhi.n	1005c048 <LL_length_check_remote_data_and_set_cpf_context+0x8c>
1005c020:	2b1b      	cmp	r3, #27
1005c022:	d311      	bcc.n	1005c048 <LL_length_check_remote_data_and_set_cpf_context+0x8c>
1005c024:	ac01      	add	r4, sp, #4
1005c026:	8864      	ldrh	r4, [r4, #2]
1005c028:	4d09      	ldr	r5, [pc, #36]	@ (1005c050 <__arm_cp.5_1>)
1005c02a:	42ac      	cmp	r4, r5
1005c02c:	d80c      	bhi.n	1005c048 <LL_length_check_remote_data_and_set_cpf_context+0x8c>
1005c02e:	08e5      	lsrs	r5, r4, #3
1005c030:	2d29      	cmp	r5, #41	@ 0x29
1005c032:	d309      	bcc.n	1005c048 <LL_length_check_remote_data_and_set_cpf_context+0x8c>
1005c034:	2a00      	cmp	r2, #0
1005c036:	d107      	bne.n	1005c048 <LL_length_check_remote_data_and_set_cpf_context+0x8c>
1005c038:	9a00      	ldr	r2, [sp, #0]
1005c03a:	8111      	strh	r1, [r2, #8]
1005c03c:	81d4      	strh	r4, [r2, #14]
1005c03e:	8193      	strh	r3, [r2, #12]
1005c040:	a802      	add	r0, sp, #8
1005c042:	8840      	ldrh	r0, [r0, #2]
1005c044:	8150      	strh	r0, [r2, #10]
1005c046:	2001      	movs	r0, #1
1005c048:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005c04a:	46c0      	nop			@ (mov r8, r8)

1005c04c <__arm_cp.5_0>:
1005c04c:	100627c9 	.word	0x100627c9

1005c050 <__arm_cp.5_1>:
1005c050:	00004290 	.word	0x00004290

1005c054 <Data_Len_Update_Offline_Processing>:
1005c054:	b5b0      	push	{r4, r5, r7, lr}
1005c056:	4605      	mov	r5, r0
1005c058:	2400      	movs	r4, #0
1005c05a:	0748      	lsls	r0, r1, #29
1005c05c:	d50e      	bpl.n	1005c07c <Data_Len_Update_Offline_Processing+0x28>
1005c05e:	f7fc f819 	bl	10058094 <llc_conn_get_cntxt_p>
1005c062:	68c1      	ldr	r1, [r0, #12]
1005c064:	8f68      	ldrh	r0, [r5, #58]	@ 0x3a
1005c066:	f000 f80b 	bl	1005c080 <LL_Set_Data_Length>
1005c06a:	283a      	cmp	r0, #58	@ 0x3a
1005c06c:	d101      	bne.n	1005c072 <Data_Len_Update_Offline_Processing+0x1e>
1005c06e:	2401      	movs	r4, #1
1005c070:	e004      	b.n	1005c07c <Data_Len_Update_Offline_Processing+0x28>
1005c072:	208c      	movs	r0, #140	@ 0x8c
1005c074:	5829      	ldr	r1, [r5, r0]
1005c076:	2204      	movs	r2, #4
1005c078:	4391      	bics	r1, r2
1005c07a:	5029      	str	r1, [r5, r0]
1005c07c:	4620      	mov	r0, r4
1005c07e:	bdb0      	pop	{r4, r5, r7, pc}

1005c080 <LL_Set_Data_Length>:
1005c080:	b5f0      	push	{r4, r5, r6, r7, lr}
1005c082:	b085      	sub	sp, #20
1005c084:	9104      	str	r1, [sp, #16]
1005c086:	f7fc f81d 	bl	100580c4 <llc_conn_get_cntxt_per_p_from_handle>
1005c08a:	2800      	cmp	r0, #0
1005c08c:	d008      	beq.n	1005c0a0 <LL_Set_Data_Length+0x20>
1005c08e:	4604      	mov	r4, r0
1005c090:	2097      	movs	r0, #151	@ 0x97
1005c092:	0040      	lsls	r0, r0, #1
1005c094:	1820      	adds	r0, r4, r0
1005c096:	7800      	ldrb	r0, [r0, #0]
1005c098:	0680      	lsls	r0, r0, #26
1005c09a:	d403      	bmi.n	1005c0a4 <LL_Set_Data_Length+0x24>
1005c09c:	251a      	movs	r5, #26
1005c09e:	e07e      	b.n	1005c19e <LL_Set_Data_Length+0x11e>
1005c0a0:	2502      	movs	r5, #2
1005c0a2:	e07c      	b.n	1005c19e <LL_Set_Data_Length+0x11e>
1005c0a4:	a804      	add	r0, sp, #16
1005c0a6:	2101      	movs	r1, #1
1005c0a8:	f000 f87e 	bl	1005c1a8 <LL_Length_update_param_check>
1005c0ac:	4605      	mov	r5, r0
1005c0ae:	2800      	cmp	r0, #0
1005c0b0:	d175      	bne.n	1005c19e <LL_Set_Data_Length+0x11e>
1005c0b2:	4620      	mov	r0, r4
1005c0b4:	30b4      	adds	r0, #180	@ 0xb4
1005c0b6:	8801      	ldrh	r1, [r0, #0]
1005c0b8:	aa04      	add	r2, sp, #16
1005c0ba:	8812      	ldrh	r2, [r2, #0]
1005c0bc:	428a      	cmp	r2, r1
1005c0be:	d106      	bne.n	1005c0ce <LL_Set_Data_Length+0x4e>
1005c0c0:	88c0      	ldrh	r0, [r0, #6]
1005c0c2:	a904      	add	r1, sp, #16
1005c0c4:	8849      	ldrh	r1, [r1, #2]
1005c0c6:	4281      	cmp	r1, r0
1005c0c8:	d101      	bne.n	1005c0ce <LL_Set_Data_Length+0x4e>
1005c0ca:	2500      	movs	r5, #0
1005c0cc:	e067      	b.n	1005c19e <LL_Set_Data_Length+0x11e>
1005c0ce:	3430      	adds	r4, #48	@ 0x30
1005c0d0:	7824      	ldrb	r4, [r4, #0]
1005c0d2:	9d04      	ldr	r5, [sp, #16]
1005c0d4:	4620      	mov	r0, r4
1005c0d6:	f7fb ffe7 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005c0da:	4607      	mov	r7, r0
1005c0dc:	2101      	movs	r1, #1
1005c0de:	4620      	mov	r0, r4
1005c0e0:	f7fd fd83 	bl	10059bea <LL_cpe_get_active_status>
1005c0e4:	2800      	cmp	r0, #0
1005c0e6:	d001      	beq.n	1005c0ec <LL_Set_Data_Length+0x6c>
1005c0e8:	253a      	movs	r5, #58	@ 0x3a
1005c0ea:	e058      	b.n	1005c19e <LL_Set_Data_Length+0x11e>
1005c0ec:	9502      	str	r5, [sp, #8]
1005c0ee:	0c28      	lsrs	r0, r5, #16
1005c0f0:	9003      	str	r0, [sp, #12]
1005c0f2:	463d      	mov	r5, r7
1005c0f4:	35be      	adds	r5, #190	@ 0xbe
1005c0f6:	f7fb ffcd 	bl	10058094 <llc_conn_get_cntxt_p>
1005c0fa:	9001      	str	r0, [sp, #4]
1005c0fc:	8b40      	ldrh	r0, [r0, #26]
1005c0fe:	9000      	str	r0, [sp, #0]
1005c100:	2101      	movs	r1, #1
1005c102:	4620      	mov	r0, r4
1005c104:	f7fd fdd5 	bl	10059cb2 <LL_cpe_get_cntxt>
1005c108:	4606      	mov	r6, r0
1005c10a:	f7f5 fa8f 	bl	1005162c <phy_upd_csr_ucfg>
1005c10e:	2801      	cmp	r0, #1
1005c110:	d12a      	bne.n	1005c168 <LL_Set_Data_Length+0xe8>
1005c112:	20ff      	movs	r0, #255	@ 0xff
1005c114:	3030      	adds	r0, #48	@ 0x30
1005c116:	1838      	adds	r0, r7, r0
1005c118:	7800      	ldrb	r0, [r0, #0]
1005c11a:	0700      	lsls	r0, r0, #28
1005c11c:	d416      	bmi.n	1005c14c <LL_Set_Data_Length+0xcc>
1005c11e:	4f21      	ldr	r7, [pc, #132]	@ (1005c1a4 <__arm_cp.7_0>)
1005c120:	3708      	adds	r7, #8
1005c122:	f7fb f98d 	bl	10057440 <cte_csr_ucfg_weak>
1005c126:	2801      	cmp	r0, #1
1005c128:	4638      	mov	r0, r7
1005c12a:	d000      	beq.n	1005c12e <LL_Set_Data_Length+0xae>
1005c12c:	481d      	ldr	r0, [pc, #116]	@ (1005c1a4 <__arm_cp.7_0>)
1005c12e:	9903      	ldr	r1, [sp, #12]
1005c130:	4288      	cmp	r0, r1
1005c132:	d800      	bhi.n	1005c136 <LL_Set_Data_Length+0xb6>
1005c134:	9003      	str	r0, [sp, #12]
1005c136:	f7fb f983 	bl	10057440 <cte_csr_ucfg_weak>
1005c13a:	2801      	cmp	r0, #1
1005c13c:	d000      	beq.n	1005c140 <LL_Set_Data_Length+0xc0>
1005c13e:	4f19      	ldr	r7, [pc, #100]	@ (1005c1a4 <__arm_cp.7_0>)
1005c140:	9b00      	ldr	r3, [sp, #0]
1005c142:	42bb      	cmp	r3, r7
1005c144:	9801      	ldr	r0, [sp, #4]
1005c146:	d311      	bcc.n	1005c16c <LL_Set_Data_Length+0xec>
1005c148:	463b      	mov	r3, r7
1005c14a:	e00f      	b.n	1005c16c <LL_Set_Data_Length+0xec>
1005c14c:	4620      	mov	r0, r4
1005c14e:	f7fb ffdf 	bl	10058110 <llc_conn_get_phy_upd_cntxt_per_p>
1005c152:	2800      	cmp	r0, #0
1005c154:	d008      	beq.n	1005c168 <LL_Set_Data_Length+0xe8>
1005c156:	7980      	ldrb	r0, [r0, #6]
1005c158:	2804      	cmp	r0, #4
1005c15a:	d105      	bne.n	1005c168 <LL_Set_Data_Length+0xe8>
1005c15c:	20a9      	movs	r0, #169	@ 0xa9
1005c15e:	0100      	lsls	r0, r0, #4
1005c160:	9903      	ldr	r1, [sp, #12]
1005c162:	4281      	cmp	r1, r0
1005c164:	d800      	bhi.n	1005c168 <LL_Set_Data_Length+0xe8>
1005c166:	9003      	str	r0, [sp, #12]
1005c168:	9801      	ldr	r0, [sp, #4]
1005c16a:	9b00      	ldr	r3, [sp, #0]
1005c16c:	9a03      	ldr	r2, [sp, #12]
1005c16e:	80f2      	strh	r2, [r6, #6]
1005c170:	9902      	ldr	r1, [sp, #8]
1005c172:	80b1      	strh	r1, [r6, #4]
1005c174:	8073      	strh	r3, [r6, #2]
1005c176:	8b00      	ldrh	r0, [r0, #24]
1005c178:	8030      	strh	r0, [r6, #0]
1005c17a:	8828      	ldrh	r0, [r5, #0]
1005c17c:	8029      	strh	r1, [r5, #0]
1005c17e:	8330      	strh	r0, [r6, #24]
1005c180:	8868      	ldrh	r0, [r5, #2]
1005c182:	806a      	strh	r2, [r5, #2]
1005c184:	8370      	strh	r0, [r6, #26]
1005c186:	2601      	movs	r6, #1
1005c188:	4620      	mov	r0, r4
1005c18a:	4631      	mov	r1, r6
1005c18c:	f7fd fd84 	bl	10059c98 <LL_cpe_set_prepare_tx_pdu>
1005c190:	2206      	movs	r2, #6
1005c192:	2500      	movs	r5, #0
1005c194:	4620      	mov	r0, r4
1005c196:	4631      	mov	r1, r6
1005c198:	462b      	mov	r3, r5
1005c19a:	f7fd fd34 	bl	10059c06 <LL_cpe_set_active>
1005c19e:	4628      	mov	r0, r5
1005c1a0:	b005      	add	sp, #20
1005c1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005c1a4 <__arm_cp.7_0>:
1005c1a4:	00000848 	.word	0x00000848

1005c1a8 <LL_Length_update_param_check>:
1005c1a8:	b5b0      	push	{r4, r5, r7, lr}
1005c1aa:	4605      	mov	r5, r0
1005c1ac:	8800      	ldrh	r0, [r0, #0]
1005c1ae:	2412      	movs	r4, #18
1005c1b0:	28fb      	cmp	r0, #251	@ 0xfb
1005c1b2:	d819      	bhi.n	1005c1e8 <LL_Length_update_param_check+0x40>
1005c1b4:	281b      	cmp	r0, #27
1005c1b6:	d317      	bcc.n	1005c1e8 <LL_Length_update_param_check+0x40>
1005c1b8:	8868      	ldrh	r0, [r5, #2]
1005c1ba:	4a0c      	ldr	r2, [pc, #48]	@ (1005c1ec <__arm_cp.11_0>)
1005c1bc:	4290      	cmp	r0, r2
1005c1be:	d813      	bhi.n	1005c1e8 <LL_Length_update_param_check+0x40>
1005c1c0:	08c0      	lsrs	r0, r0, #3
1005c1c2:	2829      	cmp	r0, #41	@ 0x29
1005c1c4:	d310      	bcc.n	1005c1e8 <LL_Length_update_param_check+0x40>
1005c1c6:	2400      	movs	r4, #0
1005c1c8:	2900      	cmp	r1, #0
1005c1ca:	d00d      	beq.n	1005c1e8 <LL_Length_update_param_check+0x40>
1005c1cc:	f7fb ff62 	bl	10058094 <llc_conn_get_cntxt_p>
1005c1d0:	8829      	ldrh	r1, [r5, #0]
1005c1d2:	8a82      	ldrh	r2, [r0, #20]
1005c1d4:	4291      	cmp	r1, r2
1005c1d6:	d300      	bcc.n	1005c1da <LL_Length_update_param_check+0x32>
1005c1d8:	4611      	mov	r1, r2
1005c1da:	8029      	strh	r1, [r5, #0]
1005c1dc:	8869      	ldrh	r1, [r5, #2]
1005c1de:	8ac0      	ldrh	r0, [r0, #22]
1005c1e0:	4281      	cmp	r1, r0
1005c1e2:	d300      	bcc.n	1005c1e6 <LL_Length_update_param_check+0x3e>
1005c1e4:	4601      	mov	r1, r0
1005c1e6:	8069      	strh	r1, [r5, #2]
1005c1e8:	4620      	mov	r0, r4
1005c1ea:	bdb0      	pop	{r4, r5, r7, pc}

1005c1ec <__arm_cp.11_0>:
1005c1ec:	00004290 	.word	0x00004290

1005c1f0 <LLC_update_le_ping_params>:
1005c1f0:	b5b0      	push	{r4, r5, r7, lr}
1005c1f2:	4615      	mov	r5, r2
1005c1f4:	460c      	mov	r4, r1
1005c1f6:	f7fb ff57 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005c1fa:	2185      	movs	r1, #133	@ 0x85
1005c1fc:	0049      	lsls	r1, r1, #1
1005c1fe:	5a43      	ldrh	r3, [r0, r1]
1005c200:	2d00      	cmp	r5, #0
1005c202:	461a      	mov	r2, r3
1005c204:	d000      	beq.n	1005c208 <LLC_update_le_ping_params+0x18>
1005c206:	4622      	mov	r2, r4
1005c208:	1841      	adds	r1, r0, r1
1005c20a:	8b0c      	ldrh	r4, [r1, #24]
1005c20c:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
1005c20e:	4365      	muls	r5, r4
1005c210:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
1005c212:	300a      	adds	r0, #10
1005c214:	4368      	muls	r0, r5
1005c216:	0b00      	lsrs	r0, r0, #12
1005c218:	b284      	uxth	r4, r0
1005c21a:	1d64      	adds	r4, r4, #5
1005c21c:	4294      	cmp	r4, r2
1005c21e:	d300      	bcc.n	1005c222 <LLC_update_le_ping_params+0x32>
1005c220:	4622      	mov	r2, r4
1005c222:	b294      	uxth	r4, r2
1005c224:	42a3      	cmp	r3, r4
1005c226:	d00b      	beq.n	1005c240 <LLC_update_le_ping_params+0x50>
1005c228:	8048      	strh	r0, [r1, #2]
1005c22a:	800a      	strh	r2, [r1, #0]
1005c22c:	7908      	ldrb	r0, [r1, #4]
1005c22e:	2801      	cmp	r0, #1
1005c230:	d006      	beq.n	1005c240 <LLC_update_le_ping_params+0x50>
1005c232:	2002      	movs	r0, #2
1005c234:	7108      	strb	r0, [r1, #4]
1005c236:	2012      	movs	r0, #18
1005c238:	f006 f93e 	bl	100624b8 <tsk_notify_idx>
1005c23c:	f7e7 fc6d 	bl	10043b1a <BLE_STACK_ProcessRequest>
1005c240:	bdb0      	pop	{r4, r5, r7, pc}
	...

1005c244 <LLC_init_le_ping_params>:
1005c244:	b5b0      	push	{r4, r5, r7, lr}
1005c246:	2185      	movs	r1, #133	@ 0x85
1005c248:	004a      	lsls	r2, r1, #1
1005c24a:	1881      	adds	r1, r0, r2
1005c24c:	8b0b      	ldrh	r3, [r1, #24]
1005c24e:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
1005c250:	435c      	muls	r4, r3
1005c252:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
1005c254:	330a      	adds	r3, #10
1005c256:	4363      	muls	r3, r4
1005c258:	0b1b      	lsrs	r3, r3, #12
1005c25a:	b29c      	uxth	r4, r3
1005c25c:	4d07      	ldr	r5, [pc, #28]	@ (1005c27c <__arm_cp.3_0>)
1005c25e:	42ac      	cmp	r4, r5
1005c260:	d800      	bhi.n	1005c264 <LLC_init_le_ping_params+0x20>
1005c262:	462c      	mov	r4, r5
1005c264:	1d64      	adds	r4, r4, #5
1005c266:	5284      	strh	r4, [r0, r2]
1005c268:	2001      	movs	r0, #1
1005c26a:	7108      	strb	r0, [r1, #4]
1005c26c:	804b      	strh	r3, [r1, #2]
1005c26e:	2012      	movs	r0, #18
1005c270:	f006 f922 	bl	100624b8 <tsk_notify_idx>
1005c274:	f7e7 fc51 	bl	10043b1a <BLE_STACK_ProcessRequest>
1005c278:	bdb0      	pop	{r4, r5, r7, pc}
1005c27a:	46c0      	nop			@ (mov r8, r8)

1005c27c <__arm_cp.3_0>:
1005c27c:	00000bb3 	.word	0x00000bb3

1005c280 <LLC_authenticated_payload_timeout_processing>:
1005c280:	b5f0      	push	{r4, r5, r6, r7, lr}
1005c282:	b089      	sub	sp, #36	@ 0x24
1005c284:	2400      	movs	r4, #0
1005c286:	4620      	mov	r0, r4
1005c288:	f7fb ff0e 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005c28c:	9000      	str	r0, [sp, #0]
1005c28e:	2001      	movs	r0, #1
1005c290:	9008      	str	r0, [sp, #32]
1005c292:	4843      	ldr	r0, [pc, #268]	@ (1005c3a0 <__arm_cp.5_0>)
1005c294:	6800      	ldr	r0, [r0, #0]
1005c296:	2134      	movs	r1, #52	@ 0x34
1005c298:	5c40      	ldrb	r0, [r0, r1]
1005c29a:	4284      	cmp	r4, r0
1005c29c:	d300      	bcc.n	1005c2a0 <LLC_authenticated_payload_timeout_processing+0x20>
1005c29e:	e07d      	b.n	1005c39c <LLC_authenticated_payload_timeout_processing+0x11c>
1005c2a0:	204d      	movs	r0, #77	@ 0x4d
1005c2a2:	0080      	lsls	r0, r0, #2
1005c2a4:	9405      	str	r4, [sp, #20]
1005c2a6:	4360      	muls	r0, r4
1005c2a8:	9900      	ldr	r1, [sp, #0]
1005c2aa:	180c      	adds	r4, r1, r0
1005c2ac:	202c      	movs	r0, #44	@ 0x2c
1005c2ae:	5c20      	ldrb	r0, [r4, r0]
1005c2b0:	21fe      	movs	r1, #254	@ 0xfe
1005c2b2:	4001      	ands	r1, r0
1005c2b4:	2902      	cmp	r1, #2
1005c2b6:	d16e      	bne.n	1005c396 <LLC_authenticated_payload_timeout_processing+0x116>
1005c2b8:	2101      	movs	r1, #1
1005c2ba:	9e00      	ldr	r6, [sp, #0]
1005c2bc:	4630      	mov	r0, r6
1005c2be:	9107      	str	r1, [sp, #28]
1005c2c0:	f7fc f98e 	bl	100585e0 <llc_conn_get_enc_on>
1005c2c4:	4605      	mov	r5, r0
1005c2c6:	2100      	movs	r1, #0
1005c2c8:	4630      	mov	r0, r6
1005c2ca:	9101      	str	r1, [sp, #4]
1005c2cc:	f7fc f988 	bl	100585e0 <llc_conn_get_enc_on>
1005c2d0:	1e41      	subs	r1, r0, #1
1005c2d2:	4188      	sbcs	r0, r1
1005c2d4:	2d00      	cmp	r5, #0
1005c2d6:	9908      	ldr	r1, [sp, #32]
1005c2d8:	9104      	str	r1, [sp, #16]
1005c2da:	d100      	bne.n	1005c2de <LLC_authenticated_payload_timeout_processing+0x5e>
1005c2dc:	9004      	str	r0, [sp, #16]
1005c2de:	2043      	movs	r0, #67	@ 0x43
1005c2e0:	0080      	lsls	r0, r0, #2
1005c2e2:	1820      	adds	r0, r4, r0
1005c2e4:	9003      	str	r0, [sp, #12]
1005c2e6:	2085      	movs	r0, #133	@ 0x85
1005c2e8:	0040      	lsls	r0, r0, #1
1005c2ea:	1820      	adds	r0, r4, r0
1005c2ec:	9002      	str	r0, [sp, #8]
1005c2ee:	2087      	movs	r0, #135	@ 0x87
1005c2f0:	0040      	lsls	r0, r0, #1
1005c2f2:	1823      	adds	r3, r4, r0
1005c2f4:	9f08      	ldr	r7, [sp, #32]
1005c2f6:	9306      	str	r3, [sp, #24]
1005c2f8:	781c      	ldrb	r4, [r3, #0]
1005c2fa:	26f0      	movs	r6, #240	@ 0xf0
1005c2fc:	4026      	ands	r6, r4
1005c2fe:	250f      	movs	r5, #15
1005c300:	4025      	ands	r5, r4
1005c302:	2d03      	cmp	r5, #3
1005c304:	d01f      	beq.n	1005c346 <LLC_authenticated_payload_timeout_processing+0xc6>
1005c306:	2d02      	cmp	r5, #2
1005c308:	d00b      	beq.n	1005c322 <LLC_authenticated_payload_timeout_processing+0xa2>
1005c30a:	2d01      	cmp	r5, #1
1005c30c:	d12b      	bne.n	1005c366 <LLC_authenticated_payload_timeout_processing+0xe6>
1005c30e:	9804      	ldr	r0, [sp, #16]
1005c310:	2800      	cmp	r0, #0
1005c312:	d02c      	beq.n	1005c36e <LLC_authenticated_payload_timeout_processing+0xee>
1005c314:	2012      	movs	r0, #18
1005c316:	2101      	movs	r1, #1
1005c318:	f006 f8e0 	bl	100624dc <tsk_wait_resource_idx>
1005c31c:	9b06      	ldr	r3, [sp, #24]
1005c31e:	2502      	movs	r5, #2
1005c320:	e025      	b.n	1005c36e <LLC_authenticated_payload_timeout_processing+0xee>
1005c322:	9803      	ldr	r0, [sp, #12]
1005c324:	8800      	ldrh	r0, [r0, #0]
1005c326:	9902      	ldr	r1, [sp, #8]
1005c328:	8809      	ldrh	r1, [r1, #0]
1005c32a:	1a08      	subs	r0, r1, r0
1005c32c:	230a      	movs	r3, #10
1005c32e:	4343      	muls	r3, r0
1005c330:	481c      	ldr	r0, [pc, #112]	@ (1005c3a4 <__arm_cp.5_1>)
1005c332:	6800      	ldr	r0, [r0, #0]
1005c334:	9905      	ldr	r1, [sp, #20]
1005c336:	b2c9      	uxtb	r1, r1
1005c338:	30b0      	adds	r0, #176	@ 0xb0
1005c33a:	2201      	movs	r2, #1
1005c33c:	f006 f965 	bl	1006260a <CST_start>
1005c340:	9b06      	ldr	r3, [sp, #24]
1005c342:	2503      	movs	r5, #3
1005c344:	e013      	b.n	1005c36e <LLC_authenticated_payload_timeout_processing+0xee>
1005c346:	06a0      	lsls	r0, r4, #26
1005c348:	d511      	bpl.n	1005c36e <LLC_authenticated_payload_timeout_processing+0xee>
1005c34a:	9804      	ldr	r0, [sp, #16]
1005c34c:	2800      	cmp	r0, #0
1005c34e:	d00c      	beq.n	1005c36a <LLC_authenticated_payload_timeout_processing+0xea>
1005c350:	9805      	ldr	r0, [sp, #20]
1005c352:	b2c0      	uxtb	r0, r0
1005c354:	f000 f828 	bl	1005c3a8 <LLC_authenticated_payload_timeout_start_le_ping>
1005c358:	2800      	cmp	r0, #0
1005c35a:	d001      	beq.n	1005c360 <LLC_authenticated_payload_timeout_processing+0xe0>
1005c35c:	26d0      	movs	r6, #208	@ 0xd0
1005c35e:	4026      	ands	r6, r4
1005c360:	9808      	ldr	r0, [sp, #32]
1005c362:	9b06      	ldr	r3, [sp, #24]
1005c364:	e004      	b.n	1005c370 <LLC_authenticated_payload_timeout_processing+0xf0>
1005c366:	9801      	ldr	r0, [sp, #4]
1005c368:	e002      	b.n	1005c370 <LLC_authenticated_payload_timeout_processing+0xf0>
1005c36a:	26d0      	movs	r6, #208	@ 0xd0
1005c36c:	4026      	ands	r6, r4
1005c36e:	9808      	ldr	r0, [sp, #32]
1005c370:	f3ef 8110 	mrs	r1, PRIMASK
1005c374:	b672      	cpsid	i
1005c376:	7819      	ldrb	r1, [r3, #0]
1005c378:	428c      	cmp	r4, r1
1005c37a:	d103      	bne.n	1005c384 <LLC_authenticated_payload_timeout_processing+0x104>
1005c37c:	432e      	orrs	r6, r5
1005c37e:	701e      	strb	r6, [r3, #0]
1005c380:	2100      	movs	r1, #0
1005c382:	e002      	b.n	1005c38a <LLC_authenticated_payload_timeout_processing+0x10a>
1005c384:	9907      	ldr	r1, [sp, #28]
1005c386:	400f      	ands	r7, r1
1005c388:	4639      	mov	r1, r7
1005c38a:	1e4a      	subs	r2, r1, #1
1005c38c:	4191      	sbcs	r1, r2
1005c38e:	b662      	cpsie	i
1005c390:	2700      	movs	r7, #0
1005c392:	4208      	tst	r0, r1
1005c394:	d1b0      	bne.n	1005c2f8 <LLC_authenticated_payload_timeout_processing+0x78>
1005c396:	9c05      	ldr	r4, [sp, #20]
1005c398:	1c64      	adds	r4, r4, #1
1005c39a:	e77a      	b.n	1005c292 <LLC_authenticated_payload_timeout_processing+0x12>
1005c39c:	b009      	add	sp, #36	@ 0x24
1005c39e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005c3a0 <__arm_cp.5_0>:
1005c3a0:	200010a0 	.word	0x200010a0

1005c3a4 <__arm_cp.5_1>:
1005c3a4:	200010f4 	.word	0x200010f4

1005c3a8 <LLC_authenticated_payload_timeout_start_le_ping>:
1005c3a8:	b570      	push	{r4, r5, r6, lr}
1005c3aa:	4605      	mov	r5, r0
1005c3ac:	2101      	movs	r1, #1
1005c3ae:	f7fd fc1c 	bl	10059bea <LL_cpe_get_active_status>
1005c3b2:	4604      	mov	r4, r0
1005c3b4:	2801      	cmp	r0, #1
1005c3b6:	d104      	bne.n	1005c3c2 <LLC_authenticated_payload_timeout_start_le_ping+0x1a>
1005c3b8:	2012      	movs	r0, #18
1005c3ba:	2101      	movs	r1, #1
1005c3bc:	f006 f88e 	bl	100624dc <tsk_wait_resource_idx>
1005c3c0:	e00a      	b.n	1005c3d8 <LLC_authenticated_payload_timeout_start_le_ping+0x30>
1005c3c2:	2601      	movs	r6, #1
1005c3c4:	4628      	mov	r0, r5
1005c3c6:	4631      	mov	r1, r6
1005c3c8:	f7fd fc66 	bl	10059c98 <LL_cpe_set_prepare_tx_pdu>
1005c3cc:	2208      	movs	r2, #8
1005c3ce:	2300      	movs	r3, #0
1005c3d0:	4628      	mov	r0, r5
1005c3d2:	4631      	mov	r1, r6
1005c3d4:	f7fd fc17 	bl	10059c06 <LL_cpe_set_active>
1005c3d8:	4260      	negs	r0, r4
1005c3da:	4160      	adcs	r0, r4
1005c3dc:	bd70      	pop	{r4, r5, r6, pc}
	...

1005c3e0 <LLC_authenticated_payload_timeout_cb>:
1005c3e0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005c3e2:	4604      	mov	r4, r0
1005c3e4:	f7fb fe60 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005c3e8:	4605      	mov	r5, r0
1005c3ea:	202c      	movs	r0, #44	@ 0x2c
1005c3ec:	5c28      	ldrb	r0, [r5, r0]
1005c3ee:	21fe      	movs	r1, #254	@ 0xfe
1005c3f0:	4001      	ands	r1, r0
1005c3f2:	2902      	cmp	r1, #2
1005c3f4:	d15b      	bne.n	1005c4ae <LLC_authenticated_payload_timeout_cb+0xce>
1005c3f6:	9402      	str	r4, [sp, #8]
1005c3f8:	2085      	movs	r0, #133	@ 0x85
1005c3fa:	0040      	lsls	r0, r0, #1
1005c3fc:	182f      	adds	r7, r5, r0
1005c3fe:	793a      	ldrb	r2, [r7, #4]
1005c400:	06d0      	lsls	r0, r2, #27
1005c402:	d419      	bmi.n	1005c438 <LLC_authenticated_payload_timeout_cb+0x58>
1005c404:	24f0      	movs	r4, #240	@ 0xf0
1005c406:	9201      	str	r2, [sp, #4]
1005c408:	4014      	ands	r4, r2
1005c40a:	2101      	movs	r1, #1
1005c40c:	4628      	mov	r0, r5
1005c40e:	f7fc f8e7 	bl	100585e0 <llc_conn_get_enc_on>
1005c412:	4606      	mov	r6, r0
1005c414:	2100      	movs	r1, #0
1005c416:	4628      	mov	r0, r5
1005c418:	f7fc f8e2 	bl	100585e0 <llc_conn_get_enc_on>
1005c41c:	4330      	orrs	r0, r6
1005c41e:	d006      	beq.n	1005c42e <LLC_authenticated_payload_timeout_cb+0x4e>
1005c420:	9802      	ldr	r0, [sp, #8]
1005c422:	f7ff ffc1 	bl	1005c3a8 <LLC_authenticated_payload_timeout_start_le_ping>
1005c426:	2801      	cmp	r0, #1
1005c428:	d001      	beq.n	1005c42e <LLC_authenticated_payload_timeout_cb+0x4e>
1005c42a:	2020      	movs	r0, #32
1005c42c:	4304      	orrs	r4, r0
1005c42e:	9a01      	ldr	r2, [sp, #4]
1005c430:	2610      	movs	r6, #16
1005c432:	4326      	orrs	r6, r4
1005c434:	8878      	ldrh	r0, [r7, #2]
1005c436:	e027      	b.n	1005c488 <LLC_authenticated_payload_timeout_cb+0xa8>
1005c438:	26c0      	movs	r6, #192	@ 0xc0
1005c43a:	481d      	ldr	r0, [pc, #116]	@ (1005c4b0 <__arm_cp.7_0>)
1005c43c:	6800      	ldr	r0, [r0, #0]
1005c43e:	2140      	movs	r1, #64	@ 0x40
1005c440:	5640      	ldrsb	r0, [r0, r1]
1005c442:	2800      	cmp	r0, #0
1005c444:	d51c      	bpl.n	1005c480 <LLC_authenticated_payload_timeout_cb+0xa0>
1005c446:	8f68      	ldrh	r0, [r5, #58]	@ 0x3a
1005c448:	9001      	str	r0, [sp, #4]
1005c44a:	481a      	ldr	r0, [pc, #104]	@ (1005c4b4 <__arm_cp.7_1>)
1005c44c:	6800      	ldr	r0, [r0, #0]
1005c44e:	6980      	ldr	r0, [r0, #24]
1005c450:	2142      	movs	r1, #66	@ 0x42
1005c452:	4614      	mov	r4, r2
1005c454:	2223      	movs	r2, #35	@ 0x23
1005c456:	2502      	movs	r5, #2
1005c458:	462b      	mov	r3, r5
1005c45a:	f7f6 fd6d 	bl	10052f38 <aci_event_fifo_push_header>
1005c45e:	4622      	mov	r2, r4
1005c460:	2800      	cmp	r0, #0
1005c462:	d00d      	beq.n	1005c480 <LLC_authenticated_payload_timeout_cb+0xa0>
1005c464:	4601      	mov	r1, r0
1005c466:	9a01      	ldr	r2, [sp, #4]
1005c468:	71c2      	strb	r2, [r0, #7]
1005c46a:	7185      	strb	r5, [r0, #6]
1005c46c:	2057      	movs	r0, #87	@ 0x57
1005c46e:	7148      	strb	r0, [r1, #5]
1005c470:	2004      	movs	r0, #4
1005c472:	7108      	strb	r0, [r1, #4]
1005c474:	0a10      	lsrs	r0, r2, #8
1005c476:	7208      	strb	r0, [r1, #8]
1005c478:	2042      	movs	r0, #66	@ 0x42
1005c47a:	f7f6 fdfa 	bl	10053072 <aci_event_fifo_push>
1005c47e:	4622      	mov	r2, r4
1005c480:	4016      	ands	r6, r2
1005c482:	8878      	ldrh	r0, [r7, #2]
1005c484:	8839      	ldrh	r1, [r7, #0]
1005c486:	1a08      	subs	r0, r1, r0
1005c488:	230a      	movs	r3, #10
1005c48a:	4343      	muls	r3, r0
1005c48c:	f3ef 8010 	mrs	r0, PRIMASK
1005c490:	b672      	cpsid	i
1005c492:	7938      	ldrb	r0, [r7, #4]
1005c494:	4282      	cmp	r2, r0
1005c496:	9902      	ldr	r1, [sp, #8]
1005c498:	d102      	bne.n	1005c4a0 <LLC_authenticated_payload_timeout_cb+0xc0>
1005c49a:	2003      	movs	r0, #3
1005c49c:	4306      	orrs	r6, r0
1005c49e:	713e      	strb	r6, [r7, #4]
1005c4a0:	b662      	cpsie	i
1005c4a2:	4803      	ldr	r0, [pc, #12]	@ (1005c4b0 <__arm_cp.7_0>)
1005c4a4:	6800      	ldr	r0, [r0, #0]
1005c4a6:	30b0      	adds	r0, #176	@ 0xb0
1005c4a8:	2201      	movs	r2, #1
1005c4aa:	f006 f8ae 	bl	1006260a <CST_start>
1005c4ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005c4b0 <__arm_cp.7_0>:
1005c4b0:	200010f4 	.word	0x200010f4

1005c4b4 <__arm_cp.7_1>:
1005c4b4:	200010a4 	.word	0x200010a4

1005c4b8 <LLC_authenticated_payload_timeout_reset>:
1005c4b8:	b510      	push	{r4, lr}
1005c4ba:	4604      	mov	r4, r0
1005c4bc:	2087      	movs	r0, #135	@ 0x87
1005c4be:	0040      	lsls	r0, r0, #1
1005c4c0:	5c20      	ldrb	r0, [r4, r0]
1005c4c2:	2801      	cmp	r0, #1
1005c4c4:	d00e      	beq.n	1005c4e4 <LLC_authenticated_payload_timeout_reset+0x2c>
1005c4c6:	4620      	mov	r0, r4
1005c4c8:	3030      	adds	r0, #48	@ 0x30
1005c4ca:	7801      	ldrb	r1, [r0, #0]
1005c4cc:	4806      	ldr	r0, [pc, #24]	@ (1005c4e8 <__arm_cp.8_0>)
1005c4ce:	6800      	ldr	r0, [r0, #0]
1005c4d0:	30b0      	adds	r0, #176	@ 0xb0
1005c4d2:	f006 f864 	bl	1006259e <CST_stop>
1005c4d6:	2085      	movs	r0, #133	@ 0x85
1005c4d8:	0040      	lsls	r0, r0, #1
1005c4da:	2100      	movs	r1, #0
1005c4dc:	5221      	strh	r1, [r4, r0]
1005c4de:	1820      	adds	r0, r4, r0
1005c4e0:	8041      	strh	r1, [r0, #2]
1005c4e2:	7101      	strb	r1, [r0, #4]
1005c4e4:	bd10      	pop	{r4, pc}
1005c4e6:	46c0      	nop			@ (mov r8, r8)

1005c4e8 <__arm_cp.8_0>:
1005c4e8:	200010f4 	.word	0x200010f4

1005c4ec <LLC_le_ping>:
1005c4ec:	b570      	push	{r4, r5, r6, lr}
1005c4ee:	24ff      	movs	r4, #255	@ 0xff
1005c4f0:	2a06      	cmp	r2, #6
1005c4f2:	d835      	bhi.n	1005c560 <LLC_le_ping+0x74>
1005c4f4:	4605      	mov	r5, r0
1005c4f6:	0090      	lsls	r0, r2, #2
1005c4f8:	a201      	add	r2, pc, #4	@ (adr r2, 1005c500 <LLC_le_ping+0x14>)
1005c4fa:	5810      	ldr	r0, [r2, r0]
1005c4fc:	4687      	mov	pc, r0
1005c4fe:	46c0      	nop			@ (mov r8, r8)
1005c500:	1005c51d 	.word	0x1005c51d
1005c504:	1005c525 	.word	0x1005c525
1005c508:	1005c561 	.word	0x1005c561
1005c50c:	1005c53d 	.word	0x1005c53d
1005c510:	1005c561 	.word	0x1005c561
1005c514:	1005c561 	.word	0x1005c561
1005c518:	1005c541 	.word	0x1005c541
1005c51c:	2901      	cmp	r1, #1
1005c51e:	d117      	bne.n	1005c550 <LLC_le_ping+0x64>
1005c520:	2413      	movs	r4, #19
1005c522:	e01d      	b.n	1005c560 <LLC_le_ping+0x74>
1005c524:	2600      	movs	r6, #0
1005c526:	4628      	mov	r0, r5
1005c528:	4631      	mov	r1, r6
1005c52a:	f7fd fbb5 	bl	10059c98 <LL_cpe_set_prepare_tx_pdu>
1005c52e:	2208      	movs	r2, #8
1005c530:	4628      	mov	r0, r5
1005c532:	4631      	mov	r1, r6
1005c534:	4633      	mov	r3, r6
1005c536:	f7fd fb66 	bl	10059c06 <LL_cpe_set_active>
1005c53a:	e011      	b.n	1005c560 <LLC_le_ping+0x74>
1005c53c:	2101      	movs	r1, #1
1005c53e:	e008      	b.n	1005c552 <LLC_le_ping+0x66>
1005c540:	2001      	movs	r0, #1
1005c542:	7058      	strb	r0, [r3, #1]
1005c544:	2003      	movs	r0, #3
1005c546:	7018      	strb	r0, [r3, #0]
1005c548:	2901      	cmp	r1, #1
1005c54a:	d007      	beq.n	1005c55c <LLC_le_ping+0x70>
1005c54c:	2013      	movs	r0, #19
1005c54e:	e006      	b.n	1005c55e <LLC_le_ping+0x72>
1005c550:	2100      	movs	r1, #0
1005c552:	2208      	movs	r2, #8
1005c554:	4628      	mov	r0, r5
1005c556:	f7fd fb6d 	bl	10059c34 <LL_cpe_clr_active>
1005c55a:	e001      	b.n	1005c560 <LLC_le_ping+0x74>
1005c55c:	2012      	movs	r0, #18
1005c55e:	7098      	strb	r0, [r3, #2]
1005c560:	4620      	mov	r0, r4
1005c562:	bd70      	pop	{r4, r5, r6, pc}

1005c564 <llc_past_mem_allocate_ucfg_weak>:
1005c564:	4770      	bx	lr

1005c566 <LL_past_initialize_connect_context_ucfg_weak>:
1005c566:	4770      	bx	lr

1005c568 <LL_past_default_params_ucfg_weak>:
1005c568:	4770      	bx	lr

1005c56a <llc_conn_init_pcl_ctxt_ucfg_weak>:
1005c56a:	4770      	bx	lr

1005c56c <LLC_pcl_hal_cntxt_init_ucfg_weak>:
1005c56c:	4770      	bx	lr

1005c56e <LLC_pcl_incr_rx_packets_ucfg_weak>:
1005c56e:	4770      	bx	lr

1005c570 <LLC_pcl_update_avg_rssi_ucfg_weak>:
1005c570:	4770      	bx	lr
	...

1005c574 <LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak>:
1005c574:	b580      	push	{r7, lr}
1005c576:	f7fb fd97 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005c57a:	2141      	movs	r1, #65	@ 0x41
1005c57c:	5c40      	ldrb	r0, [r0, r1]
1005c57e:	4903      	ldr	r1, [pc, #12]	@ (1005c58c <__arm_cp.22_0>)
1005c580:	6809      	ldr	r1, [r1, #0]
1005c582:	7a49      	ldrb	r1, [r1, #9]
1005c584:	f7eb fb98 	bl	10047cb8 <BLEPLAT_CNTR_SmSetTxPwr>
1005c588:	bd80      	pop	{r7, pc}
1005c58a:	46c0      	nop			@ (mov r8, r8)

1005c58c <__arm_cp.22_0>:
1005c58c:	200010f4 	.word	0x200010f4

1005c590 <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>:
1005c590:	4770      	bx	lr

1005c592 <LLC_pcl_offline_processing_ucfg_weak>:
1005c592:	2000      	movs	r0, #0
1005c594:	4770      	bx	lr

1005c596 <LL_phy_update_read_phy>:
1005c596:	b5b0      	push	{r4, r5, r7, lr}
1005c598:	4614      	mov	r4, r2
1005c59a:	460d      	mov	r5, r1
1005c59c:	f7fb fffe 	bl	1005859c <llc_conn_get_conn_idx>
1005c5a0:	b240      	sxtb	r0, r0
1005c5a2:	2800      	cmp	r0, #0
1005c5a4:	d40f      	bmi.n	1005c5c6 <LL_phy_update_read_phy+0x30>
1005c5a6:	b2c0      	uxtb	r0, r0
1005c5a8:	f7fb fdb2 	bl	10058110 <llc_conn_get_phy_upd_cntxt_per_p>
1005c5ac:	7982      	ldrb	r2, [r0, #6]
1005c5ae:	2103      	movs	r1, #3
1005c5b0:	0753      	lsls	r3, r2, #29
1005c5b2:	d500      	bpl.n	1005c5b6 <LL_phy_update_read_phy+0x20>
1005c5b4:	460a      	mov	r2, r1
1005c5b6:	702a      	strb	r2, [r5, #0]
1005c5b8:	79c0      	ldrb	r0, [r0, #7]
1005c5ba:	0742      	lsls	r2, r0, #29
1005c5bc:	d500      	bpl.n	1005c5c0 <LL_phy_update_read_phy+0x2a>
1005c5be:	4608      	mov	r0, r1
1005c5c0:	7020      	strb	r0, [r4, #0]
1005c5c2:	2000      	movs	r0, #0
1005c5c4:	bdb0      	pop	{r4, r5, r7, pc}
1005c5c6:	2002      	movs	r0, #2
1005c5c8:	bdb0      	pop	{r4, r5, r7, pc}

1005c5ca <LL_phy_update_set_default_phy>:
1005c5ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005c5cc:	4614      	mov	r4, r2
1005c5ce:	460e      	mov	r6, r1
1005c5d0:	4605      	mov	r5, r0
1005c5d2:	2701      	movs	r7, #1
1005c5d4:	4007      	ands	r7, r0
1005c5d6:	d104      	bne.n	1005c5e2 <LL_phy_update_set_default_phy+0x18>
1005c5d8:	2011      	movs	r0, #17
1005c5da:	2e07      	cmp	r6, #7
1005c5dc:	d81b      	bhi.n	1005c616 <LL_phy_update_set_default_phy+0x4c>
1005c5de:	2e00      	cmp	r6, #0
1005c5e0:	d019      	beq.n	1005c616 <LL_phy_update_set_default_phy+0x4c>
1005c5e2:	2002      	movs	r0, #2
1005c5e4:	4005      	ands	r5, r0
1005c5e6:	d104      	bne.n	1005c5f2 <LL_phy_update_set_default_phy+0x28>
1005c5e8:	2011      	movs	r0, #17
1005c5ea:	2c07      	cmp	r4, #7
1005c5ec:	d813      	bhi.n	1005c616 <LL_phy_update_set_default_phy+0x4c>
1005c5ee:	2c00      	cmp	r4, #0
1005c5f0:	d011      	beq.n	1005c616 <LL_phy_update_set_default_phy+0x4c>
1005c5f2:	f7fb fd4f 	bl	10058094 <llc_conn_get_cntxt_p>
1005c5f6:	3022      	adds	r0, #34	@ 0x22
1005c5f8:	2f00      	cmp	r7, #0
1005c5fa:	d102      	bne.n	1005c602 <LL_phy_update_set_default_phy+0x38>
1005c5fc:	2107      	movs	r1, #7
1005c5fe:	400e      	ands	r6, r1
1005c600:	e000      	b.n	1005c604 <LL_phy_update_set_default_phy+0x3a>
1005c602:	7806      	ldrb	r6, [r0, #0]
1005c604:	7006      	strb	r6, [r0, #0]
1005c606:	2d00      	cmp	r5, #0
1005c608:	d102      	bne.n	1005c610 <LL_phy_update_set_default_phy+0x46>
1005c60a:	2107      	movs	r1, #7
1005c60c:	400c      	ands	r4, r1
1005c60e:	e000      	b.n	1005c612 <LL_phy_update_set_default_phy+0x48>
1005c610:	7844      	ldrb	r4, [r0, #1]
1005c612:	7044      	strb	r4, [r0, #1]
1005c614:	2000      	movs	r0, #0
1005c616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005c618 <LL_phy_update_set_phy>:
1005c618:	b5f0      	push	{r4, r5, r6, r7, lr}
1005c61a:	b08b      	sub	sp, #44	@ 0x2c
1005c61c:	460e      	mov	r6, r1
1005c61e:	4605      	mov	r5, r0
1005c620:	b280      	uxth	r0, r0
1005c622:	f7fb fd4f 	bl	100580c4 <llc_conn_get_cntxt_per_p_from_handle>
1005c626:	2800      	cmp	r0, #0
1005c628:	d011      	beq.n	1005c64e <LL_phy_update_set_phy+0x36>
1005c62a:	4604      	mov	r4, r0
1005c62c:	20ff      	movs	r0, #255	@ 0xff
1005c62e:	3030      	adds	r0, #48	@ 0x30
1005c630:	1820      	adds	r0, r4, r0
1005c632:	7800      	ldrb	r0, [r0, #0]
1005c634:	2109      	movs	r1, #9
1005c636:	4208      	tst	r0, r1
1005c638:	d00b      	beq.n	1005c652 <LL_phy_update_set_phy+0x3a>
1005c63a:	3430      	adds	r4, #48	@ 0x30
1005c63c:	7820      	ldrb	r0, [r4, #0]
1005c63e:	2701      	movs	r7, #1
1005c640:	4639      	mov	r1, r7
1005c642:	f7fd fad2 	bl	10059bea <LL_cpe_get_active_status>
1005c646:	2800      	cmp	r0, #0
1005c648:	d006      	beq.n	1005c658 <LL_phy_update_set_phy+0x40>
1005c64a:	203a      	movs	r0, #58	@ 0x3a
1005c64c:	e002      	b.n	1005c654 <LL_phy_update_set_phy+0x3c>
1005c64e:	2002      	movs	r0, #2
1005c650:	e000      	b.n	1005c654 <LL_phy_update_set_phy+0x3c>
1005c652:	201a      	movs	r0, #26
1005c654:	b00b      	add	sp, #44	@ 0x2c
1005c656:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005c658:	0a31      	lsrs	r1, r6, #8
1005c65a:	07f3      	lsls	r3, r6, #31
1005c65c:	d105      	bne.n	1005c66a <LL_phy_update_set_phy+0x52>
1005c65e:	b2ca      	uxtb	r2, r1
1005c660:	2011      	movs	r0, #17
1005c662:	2a07      	cmp	r2, #7
1005c664:	d8f6      	bhi.n	1005c654 <LL_phy_update_set_phy+0x3c>
1005c666:	2a00      	cmp	r2, #0
1005c668:	d0f4      	beq.n	1005c654 <LL_phy_update_set_phy+0x3c>
1005c66a:	0c32      	lsrs	r2, r6, #16
1005c66c:	07b0      	lsls	r0, r6, #30
1005c66e:	9006      	str	r0, [sp, #24]
1005c670:	d407      	bmi.n	1005c682 <LL_phy_update_set_phy+0x6a>
1005c672:	461e      	mov	r6, r3
1005c674:	b2d3      	uxtb	r3, r2
1005c676:	2011      	movs	r0, #17
1005c678:	2b07      	cmp	r3, #7
1005c67a:	d8eb      	bhi.n	1005c654 <LL_phy_update_set_phy+0x3c>
1005c67c:	2b00      	cmp	r3, #0
1005c67e:	4633      	mov	r3, r6
1005c680:	d0e8      	beq.n	1005c654 <LL_phy_update_set_phy+0x3c>
1005c682:	0c2d      	lsrs	r5, r5, #16
1005c684:	2d02      	cmp	r5, #2
1005c686:	d901      	bls.n	1005c68c <LL_phy_update_set_phy+0x74>
1005c688:	2011      	movs	r0, #17
1005c68a:	e7e3      	b.n	1005c654 <LL_phy_update_set_phy+0x3c>
1005c68c:	9304      	str	r3, [sp, #16]
1005c68e:	2007      	movs	r0, #7
1005c690:	4001      	ands	r1, r0
1005c692:	ab08      	add	r3, sp, #32
1005c694:	9302      	str	r3, [sp, #8]
1005c696:	7019      	strb	r1, [r3, #0]
1005c698:	9003      	str	r0, [sp, #12]
1005c69a:	4002      	ands	r2, r0
1005c69c:	ae07      	add	r6, sp, #28
1005c69e:	7032      	strb	r2, [r6, #0]
1005c6a0:	7824      	ldrb	r4, [r4, #0]
1005c6a2:	f7fb fcf7 	bl	10058094 <llc_conn_get_cntxt_p>
1005c6a6:	4601      	mov	r1, r0
1005c6a8:	9806      	ldr	r0, [sp, #24]
1005c6aa:	2800      	cmp	r0, #0
1005c6ac:	d501      	bpl.n	1005c6b2 <LL_phy_update_set_phy+0x9a>
1005c6ae:	460e      	mov	r6, r1
1005c6b0:	3623      	adds	r6, #35	@ 0x23
1005c6b2:	9106      	str	r1, [sp, #24]
1005c6b4:	4620      	mov	r0, r4
1005c6b6:	f7fb fcf7 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005c6ba:	9005      	str	r0, [sp, #20]
1005c6bc:	9401      	str	r4, [sp, #4]
1005c6be:	4620      	mov	r0, r4
1005c6c0:	f7fb fd26 	bl	10058110 <llc_conn_get_phy_upd_cntxt_per_p>
1005c6c4:	7834      	ldrb	r4, [r6, #0]
1005c6c6:	9904      	ldr	r1, [sp, #16]
1005c6c8:	2900      	cmp	r1, #0
1005c6ca:	9902      	ldr	r1, [sp, #8]
1005c6cc:	d001      	beq.n	1005c6d2 <LL_phy_update_set_phy+0xba>
1005c6ce:	9906      	ldr	r1, [sp, #24]
1005c6d0:	3122      	adds	r1, #34	@ 0x22
1005c6d2:	780a      	ldrb	r2, [r1, #0]
1005c6d4:	7082      	strb	r2, [r0, #2]
1005c6d6:	70c4      	strb	r4, [r0, #3]
1005c6d8:	9903      	ldr	r1, [sp, #12]
1005c6da:	400d      	ands	r5, r1
1005c6dc:	d000      	beq.n	1005c6e0 <LL_phy_update_set_phy+0xc8>
1005c6de:	8005      	strh	r5, [r0, #0]
1005c6e0:	2504      	movs	r5, #4
1005c6e2:	07e1      	lsls	r1, r4, #31
1005c6e4:	4629      	mov	r1, r5
1005c6e6:	d000      	beq.n	1005c6ea <LL_phy_update_set_phy+0xd2>
1005c6e8:	4639      	mov	r1, r7
1005c6ea:	9206      	str	r2, [sp, #24]
1005c6ec:	2202      	movs	r2, #2
1005c6ee:	07a3      	lsls	r3, r4, #30
1005c6f0:	d500      	bpl.n	1005c6f4 <LL_phy_update_set_phy+0xdc>
1005c6f2:	4611      	mov	r1, r2
1005c6f4:	9204      	str	r2, [sp, #16]
1005c6f6:	79c6      	ldrb	r6, [r0, #7]
1005c6f8:	42b1      	cmp	r1, r6
1005c6fa:	d100      	bne.n	1005c6fe <LL_phy_update_set_phy+0xe6>
1005c6fc:	460c      	mov	r4, r1
1005c6fe:	9a06      	ldr	r2, [sp, #24]
1005c700:	07d3      	lsls	r3, r2, #31
1005c702:	d000      	beq.n	1005c706 <LL_phy_update_set_phy+0xee>
1005c704:	463d      	mov	r5, r7
1005c706:	0793      	lsls	r3, r2, #30
1005c708:	d500      	bpl.n	1005c70c <LL_phy_update_set_phy+0xf4>
1005c70a:	9d04      	ldr	r5, [sp, #16]
1005c70c:	9403      	str	r4, [sp, #12]
1005c70e:	9004      	str	r0, [sp, #16]
1005c710:	7987      	ldrb	r7, [r0, #6]
1005c712:	42bd      	cmp	r5, r7
1005c714:	9a05      	ldr	r2, [sp, #20]
1005c716:	d100      	bne.n	1005c71a <LL_phy_update_set_phy+0x102>
1005c718:	9506      	str	r5, [sp, #24]
1005c71a:	4614      	mov	r4, r2
1005c71c:	342c      	adds	r4, #44	@ 0x2c
1005c71e:	42b1      	cmp	r1, r6
1005c720:	d117      	bne.n	1005c752 <LL_phy_update_set_phy+0x13a>
1005c722:	42bd      	cmp	r5, r7
1005c724:	d115      	bne.n	1005c752 <LL_phy_update_set_phy+0x13a>
1005c726:	2003      	movs	r0, #3
1005c728:	0771      	lsls	r1, r6, #29
1005c72a:	d500      	bpl.n	1005c72e <LL_phy_update_set_phy+0x116>
1005c72c:	4606      	mov	r6, r0
1005c72e:	8f52      	ldrh	r2, [r2, #58]	@ 0x3a
1005c730:	9600      	str	r6, [sp, #0]
1005c732:	0779      	lsls	r1, r7, #29
1005c734:	d500      	bpl.n	1005c738 <LL_phy_update_set_phy+0x120>
1005c736:	4607      	mov	r7, r0
1005c738:	2002      	movs	r0, #2
1005c73a:	2100      	movs	r1, #0
1005c73c:	463b      	mov	r3, r7
1005c73e:	f000 fd13 	bl	1005d168 <hci_le_phy_update_complete_event_push>
1005c742:	2f03      	cmp	r7, #3
1005c744:	d157      	bne.n	1005c7f6 <LL_phy_update_set_phy+0x1de>
1005c746:	9804      	ldr	r0, [sp, #16]
1005c748:	8800      	ldrh	r0, [r0, #0]
1005c74a:	2801      	cmp	r0, #1
1005c74c:	d04f      	beq.n	1005c7ee <LL_phy_update_set_phy+0x1d6>
1005c74e:	2104      	movs	r1, #4
1005c750:	e04e      	b.n	1005c7f0 <LL_phy_update_set_phy+0x1d8>
1005c752:	32b6      	adds	r2, #182	@ 0xb6
1005c754:	2101      	movs	r1, #1
1005c756:	9d01      	ldr	r5, [sp, #4]
1005c758:	4628      	mov	r0, r5
1005c75a:	9105      	str	r1, [sp, #20]
1005c75c:	4616      	mov	r6, r2
1005c75e:	f7fd faa8 	bl	10059cb2 <LL_cpe_get_cntxt>
1005c762:	4607      	mov	r7, r0
1005c764:	8830      	ldrh	r0, [r6, #0]
1005c766:	81f8      	strh	r0, [r7, #14]
1005c768:	a809      	add	r0, sp, #36	@ 0x24
1005c76a:	7105      	strb	r5, [r0, #4]
1005c76c:	9709      	str	r7, [sp, #36]	@ 0x24
1005c76e:	f7f5 f892 	bl	10051896 <LL_phy_upd_compute_data_PDU_length_params_ucfg>
1005c772:	7820      	ldrb	r0, [r4, #0]
1005c774:	2803      	cmp	r0, #3
1005c776:	d125      	bne.n	1005c7c4 <LL_phy_update_set_phy+0x1ac>
1005c778:	9d05      	ldr	r5, [sp, #20]
1005c77a:	9b04      	ldr	r3, [sp, #16]
1005c77c:	799a      	ldrb	r2, [r3, #6]
1005c77e:	2004      	movs	r0, #4
1005c780:	2a04      	cmp	r2, #4
1005c782:	4601      	mov	r1, r0
1005c784:	9c03      	ldr	r4, [sp, #12]
1005c786:	9e06      	ldr	r6, [sp, #24]
1005c788:	d00b      	beq.n	1005c7a2 <LL_phy_update_set_phy+0x18a>
1005c78a:	0771      	lsls	r1, r6, #29
1005c78c:	4601      	mov	r1, r0
1005c78e:	d408      	bmi.n	1005c7a2 <LL_phy_update_set_phy+0x18a>
1005c790:	2a01      	cmp	r2, #1
1005c792:	462a      	mov	r2, r5
1005c794:	4629      	mov	r1, r5
1005c796:	d000      	beq.n	1005c79a <LL_phy_update_set_phy+0x182>
1005c798:	4631      	mov	r1, r6
1005c79a:	07c9      	lsls	r1, r1, #31
1005c79c:	4611      	mov	r1, r2
1005c79e:	d100      	bne.n	1005c7a2 <LL_phy_update_set_phy+0x18a>
1005c7a0:	2102      	movs	r1, #2
1005c7a2:	79da      	ldrb	r2, [r3, #7]
1005c7a4:	9700      	str	r7, [sp, #0]
1005c7a6:	2a04      	cmp	r2, #4
1005c7a8:	462a      	mov	r2, r5
1005c7aa:	d001      	beq.n	1005c7b0 <LL_phy_update_set_phy+0x198>
1005c7ac:	4020      	ands	r0, r4
1005c7ae:	0882      	lsrs	r2, r0, #2
1005c7b0:	2301      	movs	r3, #1
1005c7b2:	9d01      	ldr	r5, [sp, #4]
1005c7b4:	4628      	mov	r0, r5
1005c7b6:	f000 fd0d 	bl	1005d1d4 <LL_adjust_max_tx_data_frag>
1005c7ba:	4628      	mov	r0, r5
1005c7bc:	4631      	mov	r1, r6
1005c7be:	f7fe fcb8 	bl	1005b132 <LLC_connection_cte_response_pause_resume_ucfg_weak>
1005c7c2:	e004      	b.n	1005c7ce <LL_phy_update_set_phy+0x1b6>
1005c7c4:	2000      	movs	r0, #0
1005c7c6:	7438      	strb	r0, [r7, #16]
1005c7c8:	9c03      	ldr	r4, [sp, #12]
1005c7ca:	9e06      	ldr	r6, [sp, #24]
1005c7cc:	9d01      	ldr	r5, [sp, #4]
1005c7ce:	753c      	strb	r4, [r7, #20]
1005c7d0:	74fe      	strb	r6, [r7, #19]
1005c7d2:	2000      	movs	r0, #0
1005c7d4:	7478      	strb	r0, [r7, #17]
1005c7d6:	2401      	movs	r4, #1
1005c7d8:	4628      	mov	r0, r5
1005c7da:	4621      	mov	r1, r4
1005c7dc:	f7fd fa5c 	bl	10059c98 <LL_cpe_set_prepare_tx_pdu>
1005c7e0:	2207      	movs	r2, #7
1005c7e2:	4628      	mov	r0, r5
1005c7e4:	4621      	mov	r1, r4
1005c7e6:	4623      	mov	r3, r4
1005c7e8:	f7fd fa0d 	bl	10059c06 <LL_cpe_set_active>
1005c7ec:	e00f      	b.n	1005c80e <LL_phy_update_set_phy+0x1f6>
1005c7ee:	2106      	movs	r1, #6
1005c7f0:	7d60      	ldrb	r0, [r4, #21]
1005c7f2:	f7eb fa4c 	bl	10047c8e <BLEPLAT_CNTR_SmSetTxPhy>
1005c7f6:	2e03      	cmp	r6, #3
1005c7f8:	d109      	bne.n	1005c80e <LL_phy_update_set_phy+0x1f6>
1005c7fa:	9804      	ldr	r0, [sp, #16]
1005c7fc:	8800      	ldrh	r0, [r0, #0]
1005c7fe:	2801      	cmp	r0, #1
1005c800:	d001      	beq.n	1005c806 <LL_phy_update_set_phy+0x1ee>
1005c802:	2104      	movs	r1, #4
1005c804:	e000      	b.n	1005c808 <LL_phy_update_set_phy+0x1f0>
1005c806:	2106      	movs	r1, #6
1005c808:	7d60      	ldrb	r0, [r4, #21]
1005c80a:	f7eb f9d4 	bl	10047bb6 <BLEPLAT_CNTR_SmSetRxPhy>
1005c80e:	2000      	movs	r0, #0
1005c810:	e720      	b.n	1005c654 <LL_phy_update_set_phy+0x3c>
	...

1005c814 <LL_phy_update_init>:
1005c814:	b580      	push	{r7, lr}
1005c816:	f7fb fc3d 	bl	10058094 <llc_conn_get_cntxt_p>
1005c81a:	4902      	ldr	r1, [pc, #8]	@ (1005c824 <__arm_cp.3_0>)
1005c81c:	6201      	str	r1, [r0, #32]
1005c81e:	2000      	movs	r0, #0
1005c820:	bd80      	pop	{r7, pc}
1005c822:	46c0      	nop			@ (mov r8, r8)

1005c824 <__arm_cp.3_0>:
1005c824:	07070002 	.word	0x07070002

1005c828 <LL_phy_update_init_per_st_data>:
1005c828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005c82a:	4605      	mov	r5, r0
1005c82c:	f7fb fc70 	bl	10058110 <llc_conn_get_phy_upd_cntxt_per_p>
1005c830:	2800      	cmp	r0, #0
1005c832:	d027      	beq.n	1005c884 <LL_phy_update_init_per_st_data+0x5c>
1005c834:	4604      	mov	r4, r0
1005c836:	f7fb fc2d 	bl	10058094 <llc_conn_get_cntxt_p>
1005c83a:	4606      	mov	r6, r0
1005c83c:	4628      	mov	r0, r5
1005c83e:	f7fb fc33 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005c842:	4605      	mov	r5, r0
1005c844:	2100      	movs	r1, #0
1005c846:	220e      	movs	r2, #14
1005c848:	4620      	mov	r0, r4
1005c84a:	f7e9 fc13 	bl	10046074 <BLEPLAT_MemSet>
1005c84e:	8c70      	ldrh	r0, [r6, #34]	@ 0x22
1005c850:	8060      	strh	r0, [r4, #2]
1005c852:	8c30      	ldrh	r0, [r6, #32]
1005c854:	8020      	strh	r0, [r4, #0]
1005c856:	2741      	movs	r7, #65	@ 0x41
1005c858:	9500      	str	r5, [sp, #0]
1005c85a:	5de8      	ldrb	r0, [r5, r7]
1005c85c:	f7eb f864 	bl	10047928 <BLEPLAT_CNTR_SmGetTxPhy>
1005c860:	2501      	movs	r5, #1
1005c862:	2804      	cmp	r0, #4
1005c864:	d101      	bne.n	1005c86a <LL_phy_update_init_per_st_data+0x42>
1005c866:	4606      	mov	r6, r0
1005c868:	e001      	b.n	1005c86e <LL_phy_update_init_per_st_data+0x46>
1005c86a:	462e      	mov	r6, r5
1005c86c:	4086      	lsls	r6, r0
1005c86e:	9800      	ldr	r0, [sp, #0]
1005c870:	5dc0      	ldrb	r0, [r0, r7]
1005c872:	f7eb f848 	bl	10047906 <BLEPLAT_CNTR_SmGetRxPhy>
1005c876:	71a6      	strb	r6, [r4, #6]
1005c878:	2804      	cmp	r0, #4
1005c87a:	d101      	bne.n	1005c880 <LL_phy_update_init_per_st_data+0x58>
1005c87c:	4605      	mov	r5, r0
1005c87e:	e000      	b.n	1005c882 <LL_phy_update_init_per_st_data+0x5a>
1005c880:	4085      	lsls	r5, r0
1005c882:	71e5      	strb	r5, [r4, #7]
1005c884:	2000      	movs	r0, #0
1005c886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005c888 <LL_phy_upd_compute_data_PDU_length_params>:
1005c888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005c88a:	6804      	ldr	r4, [r0, #0]
1005c88c:	7900      	ldrb	r0, [r0, #4]
1005c88e:	f7fb fc0b 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005c892:	21c2      	movs	r1, #194	@ 0xc2
1005c894:	5a43      	ldrh	r3, [r0, r1]
1005c896:	21c4      	movs	r1, #196	@ 0xc4
1005c898:	4605      	mov	r5, r0
1005c89a:	5a41      	ldrh	r1, [r0, r1]
1005c89c:	428b      	cmp	r3, r1
1005c89e:	d300      	bcc.n	1005c8a2 <LL_phy_upd_compute_data_PDU_length_params+0x1a>
1005c8a0:	460b      	mov	r3, r1
1005c8a2:	80e3      	strh	r3, [r4, #6]
1005c8a4:	21c0      	movs	r1, #192	@ 0xc0
1005c8a6:	4628      	mov	r0, r5
1005c8a8:	5a69      	ldrh	r1, [r5, r1]
1005c8aa:	22c6      	movs	r2, #198	@ 0xc6
1005c8ac:	5aaa      	ldrh	r2, [r5, r2]
1005c8ae:	4291      	cmp	r1, r2
1005c8b0:	d300      	bcc.n	1005c8b4 <LL_phy_upd_compute_data_PDU_length_params+0x2c>
1005c8b2:	4611      	mov	r1, r2
1005c8b4:	80a1      	strh	r1, [r4, #4]
1005c8b6:	22a9      	movs	r2, #169	@ 0xa9
1005c8b8:	0112      	lsls	r2, r2, #4
1005c8ba:	4293      	cmp	r3, r2
1005c8bc:	d800      	bhi.n	1005c8c0 <LL_phy_upd_compute_data_PDU_length_params+0x38>
1005c8be:	4613      	mov	r3, r2
1005c8c0:	81a3      	strh	r3, [r4, #12]
1005c8c2:	4628      	mov	r0, r5
1005c8c4:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
1005c8c6:	4d14      	ldr	r5, [pc, #80]	@ (1005c918 <__arm_cp.5_0>)
1005c8c8:	435d      	muls	r5, r3
1005c8ca:	0a2b      	lsrs	r3, r5, #8
1005c8cc:	9300      	str	r3, [sp, #0]
1005c8ce:	30b8      	adds	r0, #184	@ 0xb8
1005c8d0:	2508      	movs	r5, #8
1005c8d2:	2d0c      	cmp	r5, #12
1005c8d4:	d01f      	beq.n	1005c916 <LL_phy_upd_compute_data_PDU_length_params+0x8e>
1005c8d6:	2d08      	cmp	r5, #8
1005c8d8:	d001      	beq.n	1005c8de <LL_phy_upd_compute_data_PDU_length_params+0x56>
1005c8da:	260c      	movs	r6, #12
1005c8dc:	e000      	b.n	1005c8e0 <LL_phy_upd_compute_data_PDU_length_params+0x58>
1005c8de:	2606      	movs	r6, #6
1005c8e0:	5ba6      	ldrh	r6, [r4, r6]
1005c8e2:	273d      	movs	r7, #61	@ 0x3d
1005c8e4:	013f      	lsls	r7, r7, #4
1005c8e6:	8803      	ldrh	r3, [r0, #0]
1005c8e8:	019b      	lsls	r3, r3, #6
1005c8ea:	19df      	adds	r7, r3, r7
1005c8ec:	42b7      	cmp	r7, r6
1005c8ee:	d800      	bhi.n	1005c8f2 <LL_phy_upd_compute_data_PDU_length_params+0x6a>
1005c8f0:	463e      	mov	r6, r7
1005c8f2:	234b      	movs	r3, #75	@ 0x4b
1005c8f4:	009b      	lsls	r3, r3, #2
1005c8f6:	18f3      	adds	r3, r6, r3
1005c8f8:	9e00      	ldr	r6, [sp, #0]
1005c8fa:	1af6      	subs	r6, r6, r3
1005c8fc:	d200      	bcs.n	1005c900 <LL_phy_upd_compute_data_PDU_length_params+0x78>
1005c8fe:	2600      	movs	r6, #0
1005c900:	428e      	cmp	r6, r1
1005c902:	460f      	mov	r7, r1
1005c904:	d800      	bhi.n	1005c908 <LL_phy_upd_compute_data_PDU_length_params+0x80>
1005c906:	4637      	mov	r7, r6
1005c908:	b2be      	uxth	r6, r7
1005c90a:	4296      	cmp	r6, r2
1005c90c:	d800      	bhi.n	1005c910 <LL_phy_upd_compute_data_PDU_length_params+0x88>
1005c90e:	4616      	mov	r6, r2
1005c910:	5366      	strh	r6, [r4, r5]
1005c912:	1cad      	adds	r5, r5, #2
1005c914:	e7dd      	b.n	1005c8d2 <LL_phy_upd_compute_data_PDU_length_params+0x4a>
1005c916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005c918 <__arm_cp.5_0>:
1005c918:	00000271 	.word	0x00000271

1005c91c <LL_phy_upd_pending>:
1005c91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005c91e:	4605      	mov	r5, r0
1005c920:	f7fb fbc2 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005c924:	4604      	mov	r4, r0
1005c926:	4628      	mov	r0, r5
1005c928:	f7fb fbf2 	bl	10058110 <llc_conn_get_phy_upd_cntxt_per_p>
1005c92c:	219a      	movs	r1, #154	@ 0x9a
1005c92e:	5a66      	ldrh	r6, [r4, r1]
1005c930:	b271      	sxtb	r1, r6
1005c932:	2900      	cmp	r1, #0
1005c934:	d52e      	bpl.n	1005c994 <LL_phy_upd_pending+0x78>
1005c936:	4627      	mov	r7, r4
1005c938:	372c      	adds	r7, #44	@ 0x2c
1005c93a:	7839      	ldrb	r1, [r7, #0]
1005c93c:	2902      	cmp	r1, #2
1005c93e:	d106      	bne.n	1005c94e <LL_phy_upd_pending+0x32>
1005c940:	7a01      	ldrb	r1, [r0, #8]
1005c942:	2900      	cmp	r1, #0
1005c944:	d100      	bne.n	1005c948 <LL_phy_upd_pending+0x2c>
1005c946:	7981      	ldrb	r1, [r0, #6]
1005c948:	7181      	strb	r1, [r0, #6]
1005c94a:	7a45      	ldrb	r5, [r0, #9]
1005c94c:	e005      	b.n	1005c95a <LL_phy_upd_pending+0x3e>
1005c94e:	7a41      	ldrb	r1, [r0, #9]
1005c950:	2900      	cmp	r1, #0
1005c952:	d100      	bne.n	1005c956 <LL_phy_upd_pending+0x3a>
1005c954:	7981      	ldrb	r1, [r0, #6]
1005c956:	7181      	strb	r1, [r0, #6]
1005c958:	7a05      	ldrb	r5, [r0, #8]
1005c95a:	2d00      	cmp	r5, #0
1005c95c:	d100      	bne.n	1005c960 <LL_phy_upd_pending+0x44>
1005c95e:	79c5      	ldrb	r5, [r0, #7]
1005c960:	71c5      	strb	r5, [r0, #7]
1005c962:	2904      	cmp	r1, #4
1005c964:	d104      	bne.n	1005c970 <LL_phy_upd_pending+0x54>
1005c966:	8800      	ldrh	r0, [r0, #0]
1005c968:	2801      	cmp	r0, #1
1005c96a:	d003      	beq.n	1005c974 <LL_phy_upd_pending+0x58>
1005c96c:	2104      	movs	r1, #4
1005c96e:	e002      	b.n	1005c976 <LL_phy_upd_pending+0x5a>
1005c970:	0849      	lsrs	r1, r1, #1
1005c972:	e000      	b.n	1005c976 <LL_phy_upd_pending+0x5a>
1005c974:	2106      	movs	r1, #6
1005c976:	349a      	adds	r4, #154	@ 0x9a
1005c978:	7d78      	ldrb	r0, [r7, #21]
1005c97a:	f7eb f988 	bl	10047c8e <BLEPLAT_CNTR_SmSetTxPhy>
1005c97e:	2d04      	cmp	r5, #4
1005c980:	d000      	beq.n	1005c984 <LL_phy_upd_pending+0x68>
1005c982:	086d      	lsrs	r5, r5, #1
1005c984:	7d78      	ldrb	r0, [r7, #21]
1005c986:	4629      	mov	r1, r5
1005c988:	f7eb f915 	bl	10047bb6 <BLEPLAT_CNTR_SmSetRxPhy>
1005c98c:	8820      	ldrh	r0, [r4, #0]
1005c98e:	2180      	movs	r1, #128	@ 0x80
1005c990:	4388      	bics	r0, r1
1005c992:	8020      	strh	r0, [r4, #0]
1005c994:	b2f0      	uxtb	r0, r6
1005c996:	09c0      	lsrs	r0, r0, #7
1005c998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1005c99c <LL_phy_update>:
1005c99c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005c99e:	b087      	sub	sp, #28
1005c9a0:	461e      	mov	r6, r3
1005c9a2:	4617      	mov	r7, r2
1005c9a4:	460d      	mov	r5, r1
1005c9a6:	4604      	mov	r4, r0
1005c9a8:	f7fd f983 	bl	10059cb2 <LL_cpe_get_cntxt>
1005c9ac:	9003      	str	r0, [sp, #12]
1005c9ae:	9404      	str	r4, [sp, #16]
1005c9b0:	4620      	mov	r0, r4
1005c9b2:	f7fb fb79 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005c9b6:	23ff      	movs	r3, #255	@ 0xff
1005c9b8:	2f07      	cmp	r7, #7
1005c9ba:	d900      	bls.n	1005c9be <LL_phy_update+0x22>
1005c9bc:	e18d      	b.n	1005ccda <LL_phy_update+0x33e>
1005c9be:	9502      	str	r5, [sp, #8]
1005c9c0:	4605      	mov	r5, r0
1005c9c2:	352c      	adds	r5, #44	@ 0x2c
1005c9c4:	4604      	mov	r4, r0
1005c9c6:	3498      	adds	r4, #152	@ 0x98
1005c9c8:	007f      	lsls	r7, r7, #1
1005c9ca:	46c0      	nop			@ (mov r8, r8)
1005c9cc:	447f      	add	r7, pc
1005c9ce:	88bf      	ldrh	r7, [r7, #4]
1005c9d0:	007f      	lsls	r7, r7, #1
1005c9d2:	44bf      	add	pc, r7
1005c9d4:	001c0007 	.word	0x001c0007
1005c9d8:	004d0041 	.word	0x004d0041
1005c9dc:	01820067 	.word	0x01820067
1005c9e0:	006e0026 	.word	0x006e0026
1005c9e4:	7828      	ldrb	r0, [r5, #0]
1005c9e6:	9902      	ldr	r1, [sp, #8]
1005c9e8:	2901      	cmp	r1, #1
1005c9ea:	d000      	beq.n	1005c9ee <LL_phy_update+0x52>
1005c9ec:	e0b5      	b.n	1005cb5a <LL_phy_update+0x1be>
1005c9ee:	2802      	cmp	r0, #2
1005c9f0:	d000      	beq.n	1005c9f4 <LL_phy_update+0x58>
1005c9f2:	e103      	b.n	1005cbfc <LL_phy_update+0x260>
1005c9f4:	9e03      	ldr	r6, [sp, #12]
1005c9f6:	7c30      	ldrb	r0, [r6, #16]
1005c9f8:	2803      	cmp	r0, #3
1005c9fa:	d100      	bne.n	1005c9fe <LL_phy_update+0x62>
1005c9fc:	e158      	b.n	1005ccb0 <LL_phy_update+0x314>
1005c9fe:	2801      	cmp	r0, #1
1005ca00:	d000      	beq.n	1005ca04 <LL_phy_update+0x68>
1005ca02:	e16a      	b.n	1005ccda <LL_phy_update+0x33e>
1005ca04:	2002      	movs	r0, #2
1005ca06:	9903      	ldr	r1, [sp, #12]
1005ca08:	7408      	strb	r0, [r1, #16]
1005ca0a:	2317      	movs	r3, #23
1005ca0c:	e165      	b.n	1005ccda <LL_phy_update+0x33e>
1005ca0e:	78f0      	ldrb	r0, [r6, #3]
1005ca10:	a905      	add	r1, sp, #20
1005ca12:	7088      	strb	r0, [r1, #2]
1005ca14:	7930      	ldrb	r0, [r6, #4]
1005ca16:	70c8      	strb	r0, [r1, #3]
1005ca18:	9804      	ldr	r0, [sp, #16]
1005ca1a:	461c      	mov	r4, r3
1005ca1c:	f000 fac8 	bl	1005cfb0 <LL_process_phy_req_rcpt>
1005ca20:	e15a      	b.n	1005ccd8 <LL_phy_update+0x33c>
1005ca22:	7828      	ldrb	r0, [r5, #0]
1005ca24:	9902      	ldr	r1, [sp, #8]
1005ca26:	2901      	cmp	r1, #1
1005ca28:	d171      	bne.n	1005cb0e <LL_phy_update+0x172>
1005ca2a:	2802      	cmp	r0, #2
1005ca2c:	9903      	ldr	r1, [sp, #12]
1005ca2e:	d000      	beq.n	1005ca32 <LL_phy_update+0x96>
1005ca30:	e0ce      	b.n	1005cbd0 <LL_phy_update+0x234>
1005ca32:	7c08      	ldrb	r0, [r1, #16]
1005ca34:	2802      	cmp	r0, #2
1005ca36:	d100      	bne.n	1005ca3a <LL_phy_update+0x9e>
1005ca38:	e152      	b.n	1005cce0 <LL_phy_update+0x344>
1005ca3a:	2800      	cmp	r0, #0
1005ca3c:	d000      	beq.n	1005ca40 <LL_phy_update+0xa4>
1005ca3e:	e14c      	b.n	1005ccda <LL_phy_update+0x33e>
1005ca40:	2016      	movs	r0, #22
1005ca42:	70b0      	strb	r0, [r6, #2]
1005ca44:	2003      	movs	r0, #3
1005ca46:	7070      	strb	r0, [r6, #1]
1005ca48:	7030      	strb	r0, [r6, #0]
1005ca4a:	7cc8      	ldrb	r0, [r1, #19]
1005ca4c:	70f0      	strb	r0, [r6, #3]
1005ca4e:	7d08      	ldrb	r0, [r1, #20]
1005ca50:	7130      	strb	r0, [r6, #4]
1005ca52:	2001      	movs	r0, #1
1005ca54:	7408      	strb	r0, [r1, #16]
1005ca56:	e140      	b.n	1005ccda <LL_phy_update+0x33e>
1005ca58:	78f1      	ldrb	r1, [r6, #3]
1005ca5a:	a805      	add	r0, sp, #20
1005ca5c:	7081      	strb	r1, [r0, #2]
1005ca5e:	7931      	ldrb	r1, [r6, #4]
1005ca60:	70c1      	strb	r1, [r0, #3]
1005ca62:	7d65      	ldrb	r5, [r4, #21]
1005ca64:	461e      	mov	r6, r3
1005ca66:	2d07      	cmp	r5, #7
1005ca68:	d100      	bne.n	1005ca6c <LL_phy_update+0xd0>
1005ca6a:	e090      	b.n	1005cb8e <LL_phy_update+0x1f2>
1005ca6c:	2102      	movs	r1, #2
1005ca6e:	e08f      	b.n	1005cb90 <LL_phy_update+0x1f4>
1005ca70:	78b0      	ldrb	r0, [r6, #2]
1005ca72:	2807      	cmp	r0, #7
1005ca74:	d100      	bne.n	1005ca78 <LL_phy_update+0xdc>
1005ca76:	e0d2      	b.n	1005cc1e <LL_phy_update+0x282>
1005ca78:	2811      	cmp	r0, #17
1005ca7a:	9f04      	ldr	r7, [sp, #16]
1005ca7c:	d100      	bne.n	1005ca80 <LL_phy_update+0xe4>
1005ca7e:	e0e7      	b.n	1005cc50 <LL_phy_update+0x2b4>
1005ca80:	2818      	cmp	r0, #24
1005ca82:	d100      	bne.n	1005ca86 <LL_phy_update+0xea>
1005ca84:	e0fa      	b.n	1005cc7c <LL_phy_update+0x2e0>
1005ca86:	2817      	cmp	r0, #23
1005ca88:	d000      	beq.n	1005ca8c <LL_phy_update+0xf0>
1005ca8a:	e126      	b.n	1005ccda <LL_phy_update+0x33e>
1005ca8c:	a905      	add	r1, sp, #20
1005ca8e:	2000      	movs	r0, #0
1005ca90:	7108      	strb	r0, [r1, #4]
1005ca92:	78f0      	ldrb	r0, [r6, #3]
1005ca94:	7088      	strb	r0, [r1, #2]
1005ca96:	7930      	ldrb	r0, [r6, #4]
1005ca98:	70c8      	strb	r0, [r1, #3]
1005ca9a:	4638      	mov	r0, r7
1005ca9c:	461c      	mov	r4, r3
1005ca9e:	f000 f9cf 	bl	1005ce40 <LL_compute_phy_upd_ind>
1005caa2:	e119      	b.n	1005ccd8 <LL_phy_update+0x33c>
1005caa4:	78b1      	ldrb	r1, [r6, #2]
1005caa6:	461c      	mov	r4, r3
1005caa8:	2916      	cmp	r1, #22
1005caaa:	d100      	bne.n	1005caae <LL_phy_update+0x112>
1005caac:	e085      	b.n	1005cbba <LL_phy_update+0x21e>
1005caae:	212a      	movs	r1, #42	@ 0x2a
1005cab0:	e084      	b.n	1005cbbc <LL_phy_update+0x220>
1005cab2:	9301      	str	r3, [sp, #4]
1005cab4:	9f04      	ldr	r7, [sp, #16]
1005cab6:	4638      	mov	r0, r7
1005cab8:	9e03      	ldr	r6, [sp, #12]
1005caba:	4631      	mov	r1, r6
1005cabc:	f000 f9a3 	bl	1005ce06 <LL_reset_max_tx_data_frag>
1005cac0:	7d69      	ldrb	r1, [r5, #21]
1005cac2:	4638      	mov	r0, r7
1005cac4:	f7fe fb36 	bl	1005b134 <LLC_connection_cte_response_disable_ucfg_weak>
1005cac8:	8871      	ldrh	r1, [r6, #2]
1005caca:	8830      	ldrh	r0, [r6, #0]
1005cacc:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
1005cace:	4290      	cmp	r0, r2
1005cad0:	d102      	bne.n	1005cad8 <LL_phy_update+0x13c>
1005cad2:	8ca2      	ldrh	r2, [r4, #36]	@ 0x24
1005cad4:	4291      	cmp	r1, r2
1005cad6:	d00a      	beq.n	1005caee <LL_phy_update+0x152>
1005cad8:	84a1      	strh	r1, [r4, #36]	@ 0x24
1005cada:	8460      	strh	r0, [r4, #34]	@ 0x22
1005cadc:	f3ef 8010 	mrs	r0, PRIMASK
1005cae0:	b672      	cpsid	i
1005cae2:	2001      	movs	r0, #1
1005cae4:	0240      	lsls	r0, r0, #9
1005cae6:	8861      	ldrh	r1, [r4, #2]
1005cae8:	4301      	orrs	r1, r0
1005caea:	8061      	strh	r1, [r4, #2]
1005caec:	b662      	cpsie	i
1005caee:	f3ef 8010 	mrs	r0, PRIMASK
1005caf2:	b672      	cpsid	i
1005caf4:	2001      	movs	r0, #1
1005caf6:	0200      	lsls	r0, r0, #8
1005caf8:	8861      	ldrh	r1, [r4, #2]
1005cafa:	4301      	orrs	r1, r0
1005cafc:	8061      	strh	r1, [r4, #2]
1005cafe:	b662      	cpsie	i
1005cb00:	2207      	movs	r2, #7
1005cb02:	4638      	mov	r0, r7
1005cb04:	9902      	ldr	r1, [sp, #8]
1005cb06:	f7fd f895 	bl	10059c34 <LL_cpe_clr_active>
1005cb0a:	9b01      	ldr	r3, [sp, #4]
1005cb0c:	e0e5      	b.n	1005ccda <LL_phy_update+0x33e>
1005cb0e:	2802      	cmp	r0, #2
1005cb10:	9903      	ldr	r1, [sp, #12]
1005cb12:	d166      	bne.n	1005cbe2 <LL_phy_update+0x246>
1005cb14:	7c08      	ldrb	r0, [r1, #16]
1005cb16:	2805      	cmp	r0, #5
1005cb18:	d100      	bne.n	1005cb1c <LL_phy_update+0x180>
1005cb1a:	e100      	b.n	1005cd1e <LL_phy_update+0x382>
1005cb1c:	2800      	cmp	r0, #0
1005cb1e:	d000      	beq.n	1005cb22 <LL_phy_update+0x186>
1005cb20:	e0db      	b.n	1005ccda <LL_phy_update+0x33e>
1005cb22:	9301      	str	r3, [sp, #4]
1005cb24:	9f04      	ldr	r7, [sp, #16]
1005cb26:	4638      	mov	r0, r7
1005cb28:	f7fb faf2 	bl	10058110 <llc_conn_get_phy_upd_cntxt_per_p>
1005cb2c:	2118      	movs	r1, #24
1005cb2e:	70b1      	strb	r1, [r6, #2]
1005cb30:	2105      	movs	r1, #5
1005cb32:	7071      	strb	r1, [r6, #1]
1005cb34:	2503      	movs	r5, #3
1005cb36:	7035      	strb	r5, [r6, #0]
1005cb38:	7a01      	ldrb	r1, [r0, #8]
1005cb3a:	70f1      	strb	r1, [r6, #3]
1005cb3c:	7a40      	ldrb	r0, [r0, #9]
1005cb3e:	7130      	strb	r0, [r6, #4]
1005cb40:	1d71      	adds	r1, r6, #5
1005cb42:	2202      	movs	r2, #2
1005cb44:	4620      	mov	r0, r4
1005cb46:	f005 fe3f 	bl	100627c8 <char_copy>
1005cb4a:	9803      	ldr	r0, [sp, #12]
1005cb4c:	7405      	strb	r5, [r0, #16]
1005cb4e:	8820      	ldrh	r0, [r4, #0]
1005cb50:	2800      	cmp	r0, #0
1005cb52:	d0da      	beq.n	1005cb0a <LL_phy_update+0x16e>
1005cb54:	4638      	mov	r0, r7
1005cb56:	9902      	ldr	r1, [sp, #8]
1005cb58:	e0de      	b.n	1005cd18 <LL_phy_update+0x37c>
1005cb5a:	2802      	cmp	r0, #2
1005cb5c:	d14a      	bne.n	1005cbf4 <LL_phy_update+0x258>
1005cb5e:	9e03      	ldr	r6, [sp, #12]
1005cb60:	7c30      	ldrb	r0, [r6, #16]
1005cb62:	2803      	cmp	r0, #3
1005cb64:	d000      	beq.n	1005cb68 <LL_phy_update+0x1cc>
1005cb66:	e09f      	b.n	1005cca8 <LL_phy_update+0x30c>
1005cb68:	461c      	mov	r4, r3
1005cb6a:	7c70      	ldrb	r0, [r6, #17]
1005cb6c:	a905      	add	r1, sp, #20
1005cb6e:	7108      	strb	r0, [r1, #4]
1005cb70:	9d04      	ldr	r5, [sp, #16]
1005cb72:	4628      	mov	r0, r5
1005cb74:	4632      	mov	r2, r6
1005cb76:	f000 f8f0 	bl	1005cd5a <LL_process_phy_upd_ind>
1005cb7a:	2800      	cmp	r0, #0
1005cb7c:	d100      	bne.n	1005cb80 <LL_phy_update+0x1e4>
1005cb7e:	e0ab      	b.n	1005ccd8 <LL_phy_update+0x33c>
1005cb80:	4628      	mov	r0, r5
1005cb82:	4631      	mov	r1, r6
1005cb84:	f000 f93f 	bl	1005ce06 <LL_reset_max_tx_data_frag>
1005cb88:	2207      	movs	r2, #7
1005cb8a:	4628      	mov	r0, r5
1005cb8c:	e074      	b.n	1005cc78 <LL_phy_update+0x2dc>
1005cb8e:	2101      	movs	r1, #1
1005cb90:	9f04      	ldr	r7, [sp, #16]
1005cb92:	7181      	strb	r1, [r0, #6]
1005cb94:	2100      	movs	r1, #0
1005cb96:	4638      	mov	r0, r7
1005cb98:	f7fd f88b 	bl	10059cb2 <LL_cpe_get_cntxt>
1005cb9c:	4604      	mov	r4, r0
1005cb9e:	4638      	mov	r0, r7
1005cba0:	f7fb fa82 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005cba4:	212c      	movs	r1, #44	@ 0x2c
1005cba6:	5c40      	ldrb	r0, [r0, r1]
1005cba8:	2802      	cmp	r0, #2
1005cbaa:	d10a      	bne.n	1005cbc2 <LL_phy_update+0x226>
1005cbac:	20ff      	movs	r0, #255	@ 0xff
1005cbae:	3006      	adds	r0, #6
1005cbb0:	8220      	strh	r0, [r4, #16]
1005cbb2:	2d07      	cmp	r5, #7
1005cbb4:	d024      	beq.n	1005cc00 <LL_phy_update+0x264>
1005cbb6:	202a      	movs	r0, #42	@ 0x2a
1005cbb8:	e023      	b.n	1005cc02 <LL_phy_update+0x266>
1005cbba:	2123      	movs	r1, #35	@ 0x23
1005cbbc:	f7fc f8ee 	bl	10058d9c <llc_conn_disconnect_link_from_cpf>
1005cbc0:	e08a      	b.n	1005ccd8 <LL_phy_update+0x33c>
1005cbc2:	2d07      	cmp	r5, #7
1005cbc4:	d129      	bne.n	1005cc1a <LL_phy_update+0x27e>
1005cbc6:	a905      	add	r1, sp, #20
1005cbc8:	4638      	mov	r0, r7
1005cbca:	f000 f9f1 	bl	1005cfb0 <LL_process_phy_req_rcpt>
1005cbce:	e024      	b.n	1005cc1a <LL_phy_update+0x27e>
1005cbd0:	2016      	movs	r0, #22
1005cbd2:	70b0      	strb	r0, [r6, #2]
1005cbd4:	2003      	movs	r0, #3
1005cbd6:	7070      	strb	r0, [r6, #1]
1005cbd8:	7030      	strb	r0, [r6, #0]
1005cbda:	7cc8      	ldrb	r0, [r1, #19]
1005cbdc:	70f0      	strb	r0, [r6, #3]
1005cbde:	7d08      	ldrb	r0, [r1, #20]
1005cbe0:	e0a5      	b.n	1005cd2e <LL_phy_update+0x392>
1005cbe2:	2017      	movs	r0, #23
1005cbe4:	70b0      	strb	r0, [r6, #2]
1005cbe6:	2003      	movs	r0, #3
1005cbe8:	7070      	strb	r0, [r6, #1]
1005cbea:	7030      	strb	r0, [r6, #0]
1005cbec:	7d48      	ldrb	r0, [r1, #21]
1005cbee:	70f0      	strb	r0, [r6, #3]
1005cbf0:	7d88      	ldrb	r0, [r1, #22]
1005cbf2:	e09c      	b.n	1005cd2e <LL_phy_update+0x392>
1005cbf4:	2202      	movs	r2, #2
1005cbf6:	9804      	ldr	r0, [sp, #16]
1005cbf8:	f7fd f83e 	bl	10059c78 <LL_cpe_set_blocked>
1005cbfc:	2318      	movs	r3, #24
1005cbfe:	e06c      	b.n	1005ccda <LL_phy_update+0x33e>
1005cc00:	2023      	movs	r0, #35	@ 0x23
1005cc02:	74a0      	strb	r0, [r4, #18]
1005cc04:	2400      	movs	r4, #0
1005cc06:	4638      	mov	r0, r7
1005cc08:	4621      	mov	r1, r4
1005cc0a:	f7fd f845 	bl	10059c98 <LL_cpe_set_prepare_tx_pdu>
1005cc0e:	2207      	movs	r2, #7
1005cc10:	2301      	movs	r3, #1
1005cc12:	4638      	mov	r0, r7
1005cc14:	4621      	mov	r1, r4
1005cc16:	f7fc fff6 	bl	10059c06 <LL_cpe_set_active>
1005cc1a:	4633      	mov	r3, r6
1005cc1c:	e05d      	b.n	1005ccda <LL_phy_update+0x33e>
1005cc1e:	461c      	mov	r4, r3
1005cc20:	a905      	add	r1, sp, #20
1005cc22:	2007      	movs	r0, #7
1005cc24:	7088      	strb	r0, [r1, #2]
1005cc26:	2000      	movs	r0, #0
1005cc28:	7048      	strb	r0, [r1, #1]
1005cc2a:	78f0      	ldrb	r0, [r6, #3]
1005cc2c:	7008      	strb	r0, [r1, #0]
1005cc2e:	9f03      	ldr	r7, [sp, #12]
1005cc30:	7c78      	ldrb	r0, [r7, #17]
1005cc32:	70c8      	strb	r0, [r1, #3]
1005cc34:	9e04      	ldr	r6, [sp, #16]
1005cc36:	4630      	mov	r0, r6
1005cc38:	f000 f992 	bl	1005cf60 <LL_process_unknown_rsp_reject_ind_rcpt>
1005cc3c:	7828      	ldrb	r0, [r5, #0]
1005cc3e:	2803      	cmp	r0, #3
1005cc40:	d103      	bne.n	1005cc4a <LL_phy_update+0x2ae>
1005cc42:	4630      	mov	r0, r6
1005cc44:	4639      	mov	r1, r7
1005cc46:	f000 f8de 	bl	1005ce06 <LL_reset_max_tx_data_frag>
1005cc4a:	2207      	movs	r2, #7
1005cc4c:	4630      	mov	r0, r6
1005cc4e:	e013      	b.n	1005cc78 <LL_phy_update+0x2dc>
1005cc50:	a905      	add	r1, sp, #20
1005cc52:	2011      	movs	r0, #17
1005cc54:	7088      	strb	r0, [r1, #2]
1005cc56:	78f0      	ldrb	r0, [r6, #3]
1005cc58:	7008      	strb	r0, [r1, #0]
1005cc5a:	7930      	ldrb	r0, [r6, #4]
1005cc5c:	7048      	strb	r0, [r1, #1]
1005cc5e:	9d03      	ldr	r5, [sp, #12]
1005cc60:	7c68      	ldrb	r0, [r5, #17]
1005cc62:	70c8      	strb	r0, [r1, #3]
1005cc64:	4638      	mov	r0, r7
1005cc66:	461c      	mov	r4, r3
1005cc68:	f000 f97a 	bl	1005cf60 <LL_process_unknown_rsp_reject_ind_rcpt>
1005cc6c:	4638      	mov	r0, r7
1005cc6e:	4629      	mov	r1, r5
1005cc70:	f000 f8c9 	bl	1005ce06 <LL_reset_max_tx_data_frag>
1005cc74:	2207      	movs	r2, #7
1005cc76:	4638      	mov	r0, r7
1005cc78:	9902      	ldr	r1, [sp, #8]
1005cc7a:	e02b      	b.n	1005ccd4 <LL_phy_update+0x338>
1005cc7c:	9301      	str	r3, [sp, #4]
1005cc7e:	1cf0      	adds	r0, r6, #3
1005cc80:	ae05      	add	r6, sp, #20
1005cc82:	2205      	movs	r2, #5
1005cc84:	4631      	mov	r1, r6
1005cc86:	f005 fd9f 	bl	100627c8 <char_copy>
1005cc8a:	9d03      	ldr	r5, [sp, #12]
1005cc8c:	7c68      	ldrb	r0, [r5, #17]
1005cc8e:	7130      	strb	r0, [r6, #4]
1005cc90:	4638      	mov	r0, r7
1005cc92:	4631      	mov	r1, r6
1005cc94:	462a      	mov	r2, r5
1005cc96:	f000 f860 	bl	1005cd5a <LL_process_phy_upd_ind>
1005cc9a:	2800      	cmp	r0, #0
1005cc9c:	d049      	beq.n	1005cd32 <LL_phy_update+0x396>
1005cc9e:	4638      	mov	r0, r7
1005cca0:	4629      	mov	r1, r5
1005cca2:	f000 f8b0 	bl	1005ce06 <LL_reset_max_tx_data_frag>
1005cca6:	e72b      	b.n	1005cb00 <LL_phy_update+0x164>
1005cca8:	2207      	movs	r2, #7
1005ccaa:	9804      	ldr	r0, [sp, #16]
1005ccac:	461c      	mov	r4, r3
1005ccae:	e011      	b.n	1005ccd4 <LL_phy_update+0x338>
1005ccb0:	461c      	mov	r4, r3
1005ccb2:	7c70      	ldrb	r0, [r6, #17]
1005ccb4:	a905      	add	r1, sp, #20
1005ccb6:	7108      	strb	r0, [r1, #4]
1005ccb8:	9d04      	ldr	r5, [sp, #16]
1005ccba:	4628      	mov	r0, r5
1005ccbc:	4632      	mov	r2, r6
1005ccbe:	f000 f84c 	bl	1005cd5a <LL_process_phy_upd_ind>
1005ccc2:	2800      	cmp	r0, #0
1005ccc4:	d046      	beq.n	1005cd54 <LL_phy_update+0x3b8>
1005ccc6:	4628      	mov	r0, r5
1005ccc8:	4631      	mov	r1, r6
1005ccca:	f000 f89c 	bl	1005ce06 <LL_reset_max_tx_data_frag>
1005ccce:	2101      	movs	r1, #1
1005ccd0:	2207      	movs	r2, #7
1005ccd2:	4628      	mov	r0, r5
1005ccd4:	f7fc ffae 	bl	10059c34 <LL_cpe_clr_active>
1005ccd8:	4623      	mov	r3, r4
1005ccda:	4618      	mov	r0, r3
1005ccdc:	b007      	add	sp, #28
1005ccde:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005cce0:	9301      	str	r3, [sp, #4]
1005cce2:	9f04      	ldr	r7, [sp, #16]
1005cce4:	4638      	mov	r0, r7
1005cce6:	f7fb fa13 	bl	10058110 <llc_conn_get_phy_upd_cntxt_per_p>
1005ccea:	2118      	movs	r1, #24
1005ccec:	70b1      	strb	r1, [r6, #2]
1005ccee:	2105      	movs	r1, #5
1005ccf0:	7071      	strb	r1, [r6, #1]
1005ccf2:	2503      	movs	r5, #3
1005ccf4:	7035      	strb	r5, [r6, #0]
1005ccf6:	7a01      	ldrb	r1, [r0, #8]
1005ccf8:	70f1      	strb	r1, [r6, #3]
1005ccfa:	7a40      	ldrb	r0, [r0, #9]
1005ccfc:	7130      	strb	r0, [r6, #4]
1005ccfe:	1d71      	adds	r1, r6, #5
1005cd00:	2202      	movs	r2, #2
1005cd02:	4620      	mov	r0, r4
1005cd04:	f005 fd60 	bl	100627c8 <char_copy>
1005cd08:	9803      	ldr	r0, [sp, #12]
1005cd0a:	7405      	strb	r5, [r0, #16]
1005cd0c:	8820      	ldrh	r0, [r4, #0]
1005cd0e:	2800      	cmp	r0, #0
1005cd10:	d100      	bne.n	1005cd14 <LL_phy_update+0x378>
1005cd12:	e6fa      	b.n	1005cb0a <LL_phy_update+0x16e>
1005cd14:	2101      	movs	r1, #1
1005cd16:	4638      	mov	r0, r7
1005cd18:	f7fc ffd4 	bl	10059cc4 <LL_cpe_set_tx_with_instant>
1005cd1c:	e015      	b.n	1005cd4a <LL_phy_update+0x3ae>
1005cd1e:	2016      	movs	r0, #22
1005cd20:	70f0      	strb	r0, [r6, #3]
1005cd22:	2011      	movs	r0, #17
1005cd24:	70b0      	strb	r0, [r6, #2]
1005cd26:	2003      	movs	r0, #3
1005cd28:	7070      	strb	r0, [r6, #1]
1005cd2a:	7030      	strb	r0, [r6, #0]
1005cd2c:	7c88      	ldrb	r0, [r1, #18]
1005cd2e:	7130      	strb	r0, [r6, #4]
1005cd30:	e7d3      	b.n	1005ccda <LL_phy_update+0x33e>
1005cd32:	9d02      	ldr	r5, [sp, #8]
1005cd34:	2d01      	cmp	r5, #1
1005cd36:	d104      	bne.n	1005cd42 <LL_phy_update+0x3a6>
1005cd38:	2101      	movs	r1, #1
1005cd3a:	2202      	movs	r2, #2
1005cd3c:	4638      	mov	r0, r7
1005cd3e:	f7fc ff9b 	bl	10059c78 <LL_cpe_set_blocked>
1005cd42:	4638      	mov	r0, r7
1005cd44:	4629      	mov	r1, r5
1005cd46:	f7fc ffcc 	bl	10059ce2 <LL_cpe_set_rx_with_instant>
1005cd4a:	8860      	ldrh	r0, [r4, #2]
1005cd4c:	2180      	movs	r1, #128	@ 0x80
1005cd4e:	4301      	orrs	r1, r0
1005cd50:	8061      	strh	r1, [r4, #2]
1005cd52:	e6da      	b.n	1005cb0a <LL_phy_update+0x16e>
1005cd54:	2004      	movs	r0, #4
1005cd56:	7430      	strb	r0, [r6, #16]
1005cd58:	e7be      	b.n	1005ccd8 <LL_phy_update+0x33c>

1005cd5a <LL_process_phy_upd_ind>:
1005cd5a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005cd5c:	9201      	str	r2, [sp, #4]
1005cd5e:	460c      	mov	r4, r1
1005cd60:	4606      	mov	r6, r0
1005cd62:	f7fb f9a1 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005cd66:	4607      	mov	r7, r0
1005cd68:	4630      	mov	r0, r6
1005cd6a:	f7fb f9d1 	bl	10058110 <llc_conn_get_phy_upd_cntxt_per_p>
1005cd6e:	4605      	mov	r5, r0
1005cd70:	202c      	movs	r0, #44	@ 0x2c
1005cd72:	9702      	str	r7, [sp, #8]
1005cd74:	5c39      	ldrb	r1, [r7, r0]
1005cd76:	2903      	cmp	r1, #3
1005cd78:	d111      	bne.n	1005cd9e <LL_process_phy_upd_ind+0x44>
1005cd7a:	7827      	ldrb	r7, [r4, #0]
1005cd7c:	2001      	movs	r0, #1
1005cd7e:	2f04      	cmp	r7, #4
1005cd80:	d82e      	bhi.n	1005cde0 <LL_process_phy_upd_ind+0x86>
1005cd82:	2f03      	cmp	r7, #3
1005cd84:	d02c      	beq.n	1005cde0 <LL_process_phy_upd_ind+0x86>
1005cd86:	7862      	ldrb	r2, [r4, #1]
1005cd88:	2a04      	cmp	r2, #4
1005cd8a:	d829      	bhi.n	1005cde0 <LL_process_phy_upd_ind+0x86>
1005cd8c:	2a03      	cmp	r2, #3
1005cd8e:	d027      	beq.n	1005cde0 <LL_process_phy_upd_ind+0x86>
1005cd90:	9b02      	ldr	r3, [sp, #8]
1005cd92:	3398      	adds	r3, #152	@ 0x98
1005cd94:	726a      	strb	r2, [r5, #9]
1005cd96:	722f      	strb	r7, [r5, #8]
1005cd98:	8862      	ldrh	r2, [r4, #2]
1005cd9a:	801a      	strh	r2, [r3, #0]
1005cd9c:	e000      	b.n	1005cda0 <LL_process_phy_upd_ind+0x46>
1005cd9e:	7a2f      	ldrb	r7, [r5, #8]
1005cda0:	2f00      	cmp	r7, #0
1005cda2:	d102      	bne.n	1005cdaa <LL_process_phy_upd_ind+0x50>
1005cda4:	7a6a      	ldrb	r2, [r5, #9]
1005cda6:	2a00      	cmp	r2, #0
1005cda8:	d016      	beq.n	1005cdd8 <LL_process_phy_upd_ind+0x7e>
1005cdaa:	2000      	movs	r0, #0
1005cdac:	2903      	cmp	r1, #3
1005cdae:	d117      	bne.n	1005cde0 <LL_process_phy_upd_ind+0x86>
1005cdb0:	7a69      	ldrb	r1, [r5, #9]
1005cdb2:	2900      	cmp	r1, #0
1005cdb4:	d014      	beq.n	1005cde0 <LL_process_phy_upd_ind+0x86>
1005cdb6:	79ea      	ldrb	r2, [r5, #7]
1005cdb8:	9b01      	ldr	r3, [sp, #4]
1005cdba:	9300      	str	r3, [sp, #0]
1005cdbc:	403a      	ands	r2, r7
1005cdbe:	0752      	lsls	r2, r2, #29
1005cdc0:	0fd2      	lsrs	r2, r2, #31
1005cdc2:	4604      	mov	r4, r0
1005cdc4:	2301      	movs	r3, #1
1005cdc6:	4630      	mov	r0, r6
1005cdc8:	f000 fa04 	bl	1005d1d4 <LL_adjust_max_tx_data_frag>
1005cdcc:	7a69      	ldrb	r1, [r5, #9]
1005cdce:	4630      	mov	r0, r6
1005cdd0:	f7fe f9af 	bl	1005b132 <LLC_connection_cte_response_pause_resume_ucfg_weak>
1005cdd4:	4620      	mov	r0, r4
1005cdd6:	e003      	b.n	1005cde0 <LL_process_phy_upd_ind+0x86>
1005cdd8:	7921      	ldrb	r1, [r4, #4]
1005cdda:	2001      	movs	r0, #1
1005cddc:	2900      	cmp	r1, #0
1005cdde:	d000      	beq.n	1005cde2 <LL_process_phy_upd_ind+0x88>
1005cde0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005cde2:	4604      	mov	r4, r0
1005cde4:	79e9      	ldrb	r1, [r5, #7]
1005cde6:	2003      	movs	r0, #3
1005cde8:	074a      	lsls	r2, r1, #29
1005cdea:	d500      	bpl.n	1005cdee <LL_process_phy_upd_ind+0x94>
1005cdec:	4601      	mov	r1, r0
1005cdee:	9a02      	ldr	r2, [sp, #8]
1005cdf0:	8f52      	ldrh	r2, [r2, #58]	@ 0x3a
1005cdf2:	79ab      	ldrb	r3, [r5, #6]
1005cdf4:	9100      	str	r1, [sp, #0]
1005cdf6:	0759      	lsls	r1, r3, #29
1005cdf8:	d500      	bpl.n	1005cdfc <LL_process_phy_upd_ind+0xa2>
1005cdfa:	4603      	mov	r3, r0
1005cdfc:	2080      	movs	r0, #128	@ 0x80
1005cdfe:	2100      	movs	r1, #0
1005ce00:	f000 f9b2 	bl	1005d168 <hci_le_phy_update_complete_event_push>
1005ce04:	e7e6      	b.n	1005cdd4 <LL_process_phy_upd_ind+0x7a>

1005ce06 <LL_reset_max_tx_data_frag>:
1005ce06:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005ce08:	460d      	mov	r5, r1
1005ce0a:	4604      	mov	r4, r0
1005ce0c:	f7fb f980 	bl	10058110 <llc_conn_get_phy_upd_cntxt_per_p>
1005ce10:	2800      	cmp	r0, #0
1005ce12:	d007      	beq.n	1005ce24 <LL_reset_max_tx_data_frag+0x1e>
1005ce14:	7981      	ldrb	r1, [r0, #6]
1005ce16:	79c0      	ldrb	r0, [r0, #7]
1005ce18:	2804      	cmp	r0, #4
1005ce1a:	d107      	bne.n	1005ce2c <LL_reset_max_tx_data_frag+0x26>
1005ce1c:	4628      	mov	r0, r5
1005ce1e:	300c      	adds	r0, #12
1005ce20:	2201      	movs	r2, #1
1005ce22:	e005      	b.n	1005ce30 <LL_reset_max_tx_data_frag+0x2a>
1005ce24:	1da8      	adds	r0, r5, #6
1005ce26:	2200      	movs	r2, #0
1005ce28:	2101      	movs	r1, #1
1005ce2a:	e001      	b.n	1005ce30 <LL_reset_max_tx_data_frag+0x2a>
1005ce2c:	1da8      	adds	r0, r5, #6
1005ce2e:	2200      	movs	r2, #0
1005ce30:	8800      	ldrh	r0, [r0, #0]
1005ce32:	8068      	strh	r0, [r5, #2]
1005ce34:	9500      	str	r5, [sp, #0]
1005ce36:	2300      	movs	r3, #0
1005ce38:	4620      	mov	r0, r4
1005ce3a:	f000 f9cb 	bl	1005d1d4 <LL_adjust_max_tx_data_frag>
1005ce3e:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1005ce40 <LL_compute_phy_upd_ind>:
1005ce40:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005ce42:	460d      	mov	r5, r1
1005ce44:	4604      	mov	r4, r0
1005ce46:	f7fb f963 	bl	10058110 <llc_conn_get_phy_upd_cntxt_per_p>
1005ce4a:	4606      	mov	r6, r0
1005ce4c:	7928      	ldrb	r0, [r5, #4]
1005ce4e:	2801      	cmp	r0, #1
1005ce50:	9002      	str	r0, [sp, #8]
1005ce52:	d114      	bne.n	1005ce7e <LL_compute_phy_upd_ind+0x3e>
1005ce54:	2500      	movs	r5, #0
1005ce56:	4620      	mov	r0, r4
1005ce58:	4629      	mov	r1, r5
1005ce5a:	f7fc ff2a 	bl	10059cb2 <LL_cpe_get_cntxt>
1005ce5e:	4607      	mov	r7, r0
1005ce60:	7d02      	ldrb	r2, [r0, #20]
1005ce62:	7cc3      	ldrb	r3, [r0, #19]
1005ce64:	4293      	cmp	r3, r2
1005ce66:	9501      	str	r5, [sp, #4]
1005ce68:	d105      	bne.n	1005ce76 <LL_compute_phy_upd_ind+0x36>
1005ce6a:	2b03      	cmp	r3, #3
1005ce6c:	d302      	bcc.n	1005ce74 <LL_compute_phy_upd_ind+0x34>
1005ce6e:	2b04      	cmp	r3, #4
1005ce70:	9d01      	ldr	r5, [sp, #4]
1005ce72:	d100      	bne.n	1005ce76 <LL_compute_phy_upd_ind+0x36>
1005ce74:	2501      	movs	r5, #1
1005ce76:	78f0      	ldrb	r0, [r6, #3]
1005ce78:	4018      	ands	r0, r3
1005ce7a:	78b3      	ldrb	r3, [r6, #2]
1005ce7c:	e014      	b.n	1005cea8 <LL_compute_phy_upd_ind+0x68>
1005ce7e:	2101      	movs	r1, #1
1005ce80:	4620      	mov	r0, r4
1005ce82:	9101      	str	r1, [sp, #4]
1005ce84:	f7fc ff15 	bl	10059cb2 <LL_cpe_get_cntxt>
1005ce88:	4607      	mov	r7, r0
1005ce8a:	78ab      	ldrb	r3, [r5, #2]
1005ce8c:	7543      	strb	r3, [r0, #21]
1005ce8e:	78ea      	ldrb	r2, [r5, #3]
1005ce90:	7582      	strb	r2, [r0, #22]
1005ce92:	2500      	movs	r5, #0
1005ce94:	4293      	cmp	r3, r2
1005ce96:	d104      	bne.n	1005cea2 <LL_compute_phy_upd_ind+0x62>
1005ce98:	2b03      	cmp	r3, #3
1005ce9a:	d301      	bcc.n	1005cea0 <LL_compute_phy_upd_ind+0x60>
1005ce9c:	2b04      	cmp	r3, #4
1005ce9e:	d100      	bne.n	1005cea2 <LL_compute_phy_upd_ind+0x62>
1005cea0:	2501      	movs	r5, #1
1005cea2:	7d38      	ldrb	r0, [r7, #20]
1005cea4:	4018      	ands	r0, r3
1005cea6:	7cfb      	ldrb	r3, [r7, #19]
1005cea8:	4013      	ands	r3, r2
1005ceaa:	2d00      	cmp	r5, #0
1005ceac:	d002      	beq.n	1005ceb4 <LL_compute_phy_upd_ind+0x74>
1005ceae:	4283      	cmp	r3, r0
1005ceb0:	4603      	mov	r3, r0
1005ceb2:	d107      	bne.n	1005cec4 <LL_compute_phy_upd_ind+0x84>
1005ceb4:	2100      	movs	r1, #0
1005ceb6:	2b00      	cmp	r3, #0
1005ceb8:	460a      	mov	r2, r1
1005ceba:	d00a      	beq.n	1005ced2 <LL_compute_phy_upd_ind+0x92>
1005cebc:	07da      	lsls	r2, r3, #31
1005cebe:	d004      	beq.n	1005ceca <LL_compute_phy_upd_ind+0x8a>
1005cec0:	2201      	movs	r2, #1
1005cec2:	e003      	b.n	1005cecc <LL_compute_phy_upd_ind+0x8c>
1005cec4:	2200      	movs	r2, #0
1005cec6:	4611      	mov	r1, r2
1005cec8:	e00d      	b.n	1005cee6 <LL_compute_phy_upd_ind+0xa6>
1005ceca:	2204      	movs	r2, #4
1005cecc:	079b      	lsls	r3, r3, #30
1005cece:	d500      	bpl.n	1005ced2 <LL_compute_phy_upd_ind+0x92>
1005ced0:	2202      	movs	r2, #2
1005ced2:	2800      	cmp	r0, #0
1005ced4:	d007      	beq.n	1005cee6 <LL_compute_phy_upd_ind+0xa6>
1005ced6:	07c1      	lsls	r1, r0, #31
1005ced8:	d001      	beq.n	1005cede <LL_compute_phy_upd_ind+0x9e>
1005ceda:	2101      	movs	r1, #1
1005cedc:	e000      	b.n	1005cee0 <LL_compute_phy_upd_ind+0xa0>
1005cede:	2104      	movs	r1, #4
1005cee0:	0780      	lsls	r0, r0, #30
1005cee2:	d500      	bpl.n	1005cee6 <LL_compute_phy_upd_ind+0xa6>
1005cee4:	2102      	movs	r1, #2
1005cee6:	79b3      	ldrb	r3, [r6, #6]
1005cee8:	2000      	movs	r0, #0
1005ceea:	429a      	cmp	r2, r3
1005ceec:	4603      	mov	r3, r0
1005ceee:	d000      	beq.n	1005cef2 <LL_compute_phy_upd_ind+0xb2>
1005cef0:	4613      	mov	r3, r2
1005cef2:	7233      	strb	r3, [r6, #8]
1005cef4:	79f2      	ldrb	r2, [r6, #7]
1005cef6:	4291      	cmp	r1, r2
1005cef8:	d000      	beq.n	1005cefc <LL_compute_phy_upd_ind+0xbc>
1005cefa:	4608      	mov	r0, r1
1005cefc:	7270      	strb	r0, [r6, #9]
1005cefe:	4620      	mov	r0, r4
1005cf00:	f7fb f8d2 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005cf04:	4605      	mov	r5, r0
1005cf06:	7a70      	ldrb	r0, [r6, #9]
1005cf08:	2800      	cmp	r0, #0
1005cf0a:	d102      	bne.n	1005cf12 <LL_compute_phy_upd_ind+0xd2>
1005cf0c:	7a30      	ldrb	r0, [r6, #8]
1005cf0e:	2800      	cmp	r0, #0
1005cf10:	d015      	beq.n	1005cf3e <LL_compute_phy_upd_ind+0xfe>
1005cf12:	4620      	mov	r0, r4
1005cf14:	f7fd fc9c 	bl	1005a850 <llc_cpe_calc_instant>
1005cf18:	2198      	movs	r1, #152	@ 0x98
1005cf1a:	5268      	strh	r0, [r5, r1]
1005cf1c:	7a31      	ldrb	r1, [r6, #8]
1005cf1e:	2900      	cmp	r1, #0
1005cf20:	d010      	beq.n	1005cf44 <LL_compute_phy_upd_ind+0x104>
1005cf22:	79f0      	ldrb	r0, [r6, #7]
1005cf24:	9700      	str	r7, [sp, #0]
1005cf26:	4008      	ands	r0, r1
1005cf28:	0740      	lsls	r0, r0, #29
1005cf2a:	0fc2      	lsrs	r2, r0, #31
1005cf2c:	2301      	movs	r3, #1
1005cf2e:	4620      	mov	r0, r4
1005cf30:	f000 f950 	bl	1005d1d4 <LL_adjust_max_tx_data_frag>
1005cf34:	7a31      	ldrb	r1, [r6, #8]
1005cf36:	4620      	mov	r0, r4
1005cf38:	f7fe f8fb 	bl	1005b132 <LLC_connection_cte_response_pause_resume_ucfg_weak>
1005cf3c:	e002      	b.n	1005cf44 <LL_compute_phy_upd_ind+0x104>
1005cf3e:	2098      	movs	r0, #152	@ 0x98
1005cf40:	2100      	movs	r1, #0
1005cf42:	5229      	strh	r1, [r5, r0]
1005cf44:	9802      	ldr	r0, [sp, #8]
1005cf46:	2801      	cmp	r0, #1
1005cf48:	d009      	beq.n	1005cf5e <LL_compute_phy_upd_ind+0x11e>
1005cf4a:	4620      	mov	r0, r4
1005cf4c:	9d01      	ldr	r5, [sp, #4]
1005cf4e:	4629      	mov	r1, r5
1005cf50:	f7fc fea2 	bl	10059c98 <LL_cpe_set_prepare_tx_pdu>
1005cf54:	2202      	movs	r2, #2
1005cf56:	4620      	mov	r0, r4
1005cf58:	4629      	mov	r1, r5
1005cf5a:	f7fc fe8d 	bl	10059c78 <LL_cpe_set_blocked>
1005cf5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005cf60 <LL_process_unknown_rsp_reject_ind_rcpt>:
1005cf60:	b57c      	push	{r2, r3, r4, r5, r6, lr}
1005cf62:	460d      	mov	r5, r1
1005cf64:	4606      	mov	r6, r0
1005cf66:	f7fb f8d3 	bl	10058110 <llc_conn_get_phy_upd_cntxt_per_p>
1005cf6a:	4604      	mov	r4, r0
1005cf6c:	4630      	mov	r0, r6
1005cf6e:	f7fb f89b 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005cf72:	78a9      	ldrb	r1, [r5, #2]
1005cf74:	2907      	cmp	r1, #7
1005cf76:	d107      	bne.n	1005cf88 <LL_process_unknown_rsp_reject_ind_rcpt+0x28>
1005cf78:	21ff      	movs	r1, #255	@ 0xff
1005cf7a:	3130      	adds	r1, #48	@ 0x30
1005cf7c:	5c42      	ldrb	r2, [r0, r1]
1005cf7e:	23f6      	movs	r3, #246	@ 0xf6
1005cf80:	4013      	ands	r3, r2
1005cf82:	5443      	strb	r3, [r0, r1]
1005cf84:	211a      	movs	r1, #26
1005cf86:	e000      	b.n	1005cf8a <LL_process_unknown_rsp_reject_ind_rcpt+0x2a>
1005cf88:	7869      	ldrb	r1, [r5, #1]
1005cf8a:	78ea      	ldrb	r2, [r5, #3]
1005cf8c:	2a00      	cmp	r2, #0
1005cf8e:	d000      	beq.n	1005cf92 <LL_process_unknown_rsp_reject_ind_rcpt+0x32>
1005cf90:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
1005cf92:	79e6      	ldrb	r6, [r4, #7]
1005cf94:	2503      	movs	r5, #3
1005cf96:	0772      	lsls	r2, r6, #29
1005cf98:	d500      	bpl.n	1005cf9c <LL_process_unknown_rsp_reject_ind_rcpt+0x3c>
1005cf9a:	462e      	mov	r6, r5
1005cf9c:	8f42      	ldrh	r2, [r0, #58]	@ 0x3a
1005cf9e:	79a3      	ldrb	r3, [r4, #6]
1005cfa0:	9600      	str	r6, [sp, #0]
1005cfa2:	0758      	lsls	r0, r3, #29
1005cfa4:	d500      	bpl.n	1005cfa8 <LL_process_unknown_rsp_reject_ind_rcpt+0x48>
1005cfa6:	462b      	mov	r3, r5
1005cfa8:	2080      	movs	r0, #128	@ 0x80
1005cfaa:	f000 f8dd 	bl	1005d168 <hci_le_phy_update_complete_event_push>
1005cfae:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

1005cfb0 <LL_process_phy_req_rcpt>:
1005cfb0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005cfb2:	b085      	sub	sp, #20
1005cfb4:	460f      	mov	r7, r1
1005cfb6:	4604      	mov	r4, r0
1005cfb8:	f7fb f876 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005cfbc:	4605      	mov	r5, r0
1005cfbe:	2100      	movs	r1, #0
1005cfc0:	4620      	mov	r0, r4
1005cfc2:	9102      	str	r1, [sp, #8]
1005cfc4:	f7fc fe75 	bl	10059cb2 <LL_cpe_get_cntxt>
1005cfc8:	4606      	mov	r6, r0
1005cfca:	2001      	movs	r0, #1
1005cfcc:	9001      	str	r0, [sp, #4]
1005cfce:	7470      	strb	r0, [r6, #17]
1005cfd0:	78b8      	ldrb	r0, [r7, #2]
1005cfd2:	74f0      	strb	r0, [r6, #19]
1005cfd4:	78f8      	ldrb	r0, [r7, #3]
1005cfd6:	7530      	strb	r0, [r6, #20]
1005cfd8:	20b6      	movs	r0, #182	@ 0xb6
1005cfda:	5a28      	ldrh	r0, [r5, r0]
1005cfdc:	81f0      	strh	r0, [r6, #14]
1005cfde:	a803      	add	r0, sp, #12
1005cfe0:	7104      	strb	r4, [r0, #4]
1005cfe2:	9603      	str	r6, [sp, #12]
1005cfe4:	f7f4 fc57 	bl	10051896 <LL_phy_upd_compute_data_PDU_length_params_ucfg>
1005cfe8:	202c      	movs	r0, #44	@ 0x2c
1005cfea:	5c28      	ldrb	r0, [r5, r0]
1005cfec:	352c      	adds	r5, #44	@ 0x2c
1005cfee:	2802      	cmp	r0, #2
1005cff0:	d108      	bne.n	1005d004 <LL_process_phy_req_rcpt+0x54>
1005cff2:	7c70      	ldrb	r0, [r6, #17]
1005cff4:	7138      	strb	r0, [r7, #4]
1005cff6:	4620      	mov	r0, r4
1005cff8:	4639      	mov	r1, r7
1005cffa:	f7ff ff21 	bl	1005ce40 <LL_compute_phy_upd_ind>
1005cffe:	9802      	ldr	r0, [sp, #8]
1005d000:	7430      	strb	r0, [r6, #16]
1005d002:	e025      	b.n	1005d050 <LL_process_phy_req_rcpt+0xa0>
1005d004:	4620      	mov	r0, r4
1005d006:	f7fb f883 	bl	10058110 <llc_conn_get_phy_upd_cntxt_per_p>
1005d00a:	7881      	ldrb	r1, [r0, #2]
1005d00c:	7571      	strb	r1, [r6, #21]
1005d00e:	78c7      	ldrb	r7, [r0, #3]
1005d010:	75b7      	strb	r7, [r6, #22]
1005d012:	7d33      	ldrb	r3, [r6, #20]
1005d014:	400b      	ands	r3, r1
1005d016:	b2db      	uxtb	r3, r3
1005d018:	2b00      	cmp	r3, #0
1005d01a:	d019      	beq.n	1005d050 <LL_process_phy_req_rcpt+0xa0>
1005d01c:	7981      	ldrb	r1, [r0, #6]
1005d01e:	428b      	cmp	r3, r1
1005d020:	d016      	beq.n	1005d050 <LL_process_phy_req_rcpt+0xa0>
1005d022:	07d9      	lsls	r1, r3, #31
1005d024:	d002      	beq.n	1005d02c <LL_process_phy_req_rcpt+0x7c>
1005d026:	9a01      	ldr	r2, [sp, #4]
1005d028:	4611      	mov	r1, r2
1005d02a:	e001      	b.n	1005d030 <LL_process_phy_req_rcpt+0x80>
1005d02c:	2102      	movs	r1, #2
1005d02e:	9a01      	ldr	r2, [sp, #4]
1005d030:	075b      	lsls	r3, r3, #29
1005d032:	d500      	bpl.n	1005d036 <LL_process_phy_req_rcpt+0x86>
1005d034:	2104      	movs	r1, #4
1005d036:	7cf3      	ldrb	r3, [r6, #19]
1005d038:	401f      	ands	r7, r3
1005d03a:	077b      	lsls	r3, r7, #29
1005d03c:	d403      	bmi.n	1005d046 <LL_process_phy_req_rcpt+0x96>
1005d03e:	79c0      	ldrb	r0, [r0, #7]
1005d040:	1f00      	subs	r0, r0, #4
1005d042:	4242      	negs	r2, r0
1005d044:	4142      	adcs	r2, r0
1005d046:	9600      	str	r6, [sp, #0]
1005d048:	2301      	movs	r3, #1
1005d04a:	4620      	mov	r0, r4
1005d04c:	f000 f8c2 	bl	1005d1d4 <LL_adjust_max_tx_data_frag>
1005d050:	2600      	movs	r6, #0
1005d052:	4620      	mov	r0, r4
1005d054:	4631      	mov	r1, r6
1005d056:	f7fc fe1f 	bl	10059c98 <LL_cpe_set_prepare_tx_pdu>
1005d05a:	2207      	movs	r2, #7
1005d05c:	2301      	movs	r3, #1
1005d05e:	4620      	mov	r0, r4
1005d060:	4631      	mov	r1, r6
1005d062:	f7fc fdd0 	bl	10059c06 <LL_cpe_set_active>
1005d066:	7828      	ldrb	r0, [r5, #0]
1005d068:	2802      	cmp	r0, #2
1005d06a:	d104      	bne.n	1005d076 <LL_process_phy_req_rcpt+0xc6>
1005d06c:	2100      	movs	r1, #0
1005d06e:	2202      	movs	r2, #2
1005d070:	4620      	mov	r0, r4
1005d072:	f7fc fe01 	bl	10059c78 <LL_cpe_set_blocked>
1005d076:	b005      	add	sp, #20
1005d078:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1005d07c <LL_phy_upd_evt_pending_check_isr>:
1005d07c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005d07e:	b087      	sub	sp, #28
1005d080:	4605      	mov	r5, r0
1005d082:	f7fb f811 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005d086:	4604      	mov	r4, r0
1005d088:	4628      	mov	r0, r5
1005d08a:	f7fb f841 	bl	10058110 <llc_conn_get_phy_upd_cntxt_per_p>
1005d08e:	4605      	mov	r5, r0
1005d090:	209a      	movs	r0, #154	@ 0x9a
1005d092:	5a26      	ldrh	r6, [r4, r0]
1005d094:	05b0      	lsls	r0, r6, #22
1005d096:	4627      	mov	r7, r4
1005d098:	379a      	adds	r7, #154	@ 0x9a
1005d09a:	2800      	cmp	r0, #0
1005d09c:	d545      	bpl.n	1005d12a <LL_phy_upd_evt_pending_check_isr+0xae>
1005d09e:	482e      	ldr	r0, [pc, #184]	@ (1005d158 <__arm_cp.15_0>)
1005d0a0:	6800      	ldr	r0, [r0, #0]
1005d0a2:	213d      	movs	r1, #61	@ 0x3d
1005d0a4:	5c41      	ldrb	r1, [r0, r1]
1005d0a6:	0689      	lsls	r1, r1, #26
1005d0a8:	d53b      	bpl.n	1005d122 <LL_phy_upd_evt_pending_check_isr+0xa6>
1005d0aa:	303d      	adds	r0, #61	@ 0x3d
1005d0ac:	7a40      	ldrb	r0, [r0, #9]
1005d0ae:	0640      	lsls	r0, r0, #25
1005d0b0:	d537      	bpl.n	1005d122 <LL_phy_upd_evt_pending_check_isr+0xa6>
1005d0b2:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
1005d0b4:	9002      	str	r0, [sp, #8]
1005d0b6:	8bf8      	ldrh	r0, [r7, #30]
1005d0b8:	9003      	str	r0, [sp, #12]
1005d0ba:	8c38      	ldrh	r0, [r7, #32]
1005d0bc:	9004      	str	r0, [sp, #16]
1005d0be:	8b78      	ldrh	r0, [r7, #26]
1005d0c0:	9005      	str	r0, [sp, #20]
1005d0c2:	8f60      	ldrh	r0, [r4, #58]	@ 0x3a
1005d0c4:	9006      	str	r0, [sp, #24]
1005d0c6:	4825      	ldr	r0, [pc, #148]	@ (1005d15c <__arm_cp.15_1>)
1005d0c8:	6800      	ldr	r0, [r0, #0]
1005d0ca:	6900      	ldr	r0, [r0, #16]
1005d0cc:	2180      	movs	r1, #128	@ 0x80
1005d0ce:	2226      	movs	r2, #38	@ 0x26
1005d0d0:	2304      	movs	r3, #4
1005d0d2:	9301      	str	r3, [sp, #4]
1005d0d4:	f7f5 ff30 	bl	10052f38 <aci_event_fifo_push_header>
1005d0d8:	2800      	cmp	r0, #0
1005d0da:	d022      	beq.n	1005d122 <LL_phy_upd_evt_pending_check_isr+0xa6>
1005d0dc:	4601      	mov	r1, r0
1005d0de:	9a02      	ldr	r2, [sp, #8]
1005d0e0:	7402      	strb	r2, [r0, #16]
1005d0e2:	9b03      	ldr	r3, [sp, #12]
1005d0e4:	7383      	strb	r3, [r0, #14]
1005d0e6:	9804      	ldr	r0, [sp, #16]
1005d0e8:	7308      	strb	r0, [r1, #12]
1005d0ea:	9805      	ldr	r0, [sp, #20]
1005d0ec:	7288      	strb	r0, [r1, #10]
1005d0ee:	9806      	ldr	r0, [sp, #24]
1005d0f0:	7208      	strb	r0, [r1, #8]
1005d0f2:	2007      	movs	r0, #7
1005d0f4:	71c8      	strb	r0, [r1, #7]
1005d0f6:	200b      	movs	r0, #11
1005d0f8:	7188      	strb	r0, [r1, #6]
1005d0fa:	203e      	movs	r0, #62	@ 0x3e
1005d0fc:	7148      	strb	r0, [r1, #5]
1005d0fe:	9801      	ldr	r0, [sp, #4]
1005d100:	7108      	strb	r0, [r1, #4]
1005d102:	0a10      	lsrs	r0, r2, #8
1005d104:	7448      	strb	r0, [r1, #17]
1005d106:	0a18      	lsrs	r0, r3, #8
1005d108:	73c8      	strb	r0, [r1, #15]
1005d10a:	9804      	ldr	r0, [sp, #16]
1005d10c:	0a00      	lsrs	r0, r0, #8
1005d10e:	7348      	strb	r0, [r1, #13]
1005d110:	9805      	ldr	r0, [sp, #20]
1005d112:	0a00      	lsrs	r0, r0, #8
1005d114:	72c8      	strb	r0, [r1, #11]
1005d116:	9806      	ldr	r0, [sp, #24]
1005d118:	0a00      	lsrs	r0, r0, #8
1005d11a:	7248      	strb	r0, [r1, #9]
1005d11c:	2080      	movs	r0, #128	@ 0x80
1005d11e:	f7f5 ffa8 	bl	10053072 <aci_event_fifo_push>
1005d122:	8838      	ldrh	r0, [r7, #0]
1005d124:	490e      	ldr	r1, [pc, #56]	@ (1005d160 <__arm_cp.15_2>)
1005d126:	4001      	ands	r1, r0
1005d128:	8039      	strh	r1, [r7, #0]
1005d12a:	05f0      	lsls	r0, r6, #23
1005d12c:	d512      	bpl.n	1005d154 <LL_phy_upd_evt_pending_check_isr+0xd8>
1005d12e:	79e9      	ldrb	r1, [r5, #7]
1005d130:	2003      	movs	r0, #3
1005d132:	074a      	lsls	r2, r1, #29
1005d134:	d500      	bpl.n	1005d138 <LL_phy_upd_evt_pending_check_isr+0xbc>
1005d136:	4601      	mov	r1, r0
1005d138:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
1005d13a:	79ab      	ldrb	r3, [r5, #6]
1005d13c:	9100      	str	r1, [sp, #0]
1005d13e:	0759      	lsls	r1, r3, #29
1005d140:	d500      	bpl.n	1005d144 <LL_phy_upd_evt_pending_check_isr+0xc8>
1005d142:	4603      	mov	r3, r0
1005d144:	2080      	movs	r0, #128	@ 0x80
1005d146:	2100      	movs	r1, #0
1005d148:	f000 f80e 	bl	1005d168 <hci_le_phy_update_complete_event_push>
1005d14c:	8838      	ldrh	r0, [r7, #0]
1005d14e:	4905      	ldr	r1, [pc, #20]	@ (1005d164 <__arm_cp.15_3>)
1005d150:	4001      	ands	r1, r0
1005d152:	8039      	strh	r1, [r7, #0]
1005d154:	b007      	add	sp, #28
1005d156:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005d158 <__arm_cp.15_0>:
1005d158:	200010f4 	.word	0x200010f4

1005d15c <__arm_cp.15_1>:
1005d15c:	200010a4 	.word	0x200010a4

1005d160 <__arm_cp.15_2>:
1005d160:	0000fdff 	.word	0x0000fdff

1005d164 <__arm_cp.15_3>:
1005d164:	0000feff 	.word	0x0000feff

1005d168 <hci_le_phy_update_complete_event_push>:
1005d168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d16a:	4604      	mov	r4, r0
1005d16c:	06c0      	lsls	r0, r0, #27
1005d16e:	d42c      	bmi.n	1005d1ca <hci_le_phy_update_complete_event_push+0x62>
1005d170:	460f      	mov	r7, r1
1005d172:	4816      	ldr	r0, [pc, #88]	@ (1005d1cc <__arm_cp.16_0>)
1005d174:	6800      	ldr	r0, [r0, #0]
1005d176:	213d      	movs	r1, #61	@ 0x3d
1005d178:	5c41      	ldrb	r1, [r0, r1]
1005d17a:	0689      	lsls	r1, r1, #26
1005d17c:	d525      	bpl.n	1005d1ca <hci_le_phy_update_complete_event_push+0x62>
1005d17e:	303d      	adds	r0, #61	@ 0x3d
1005d180:	7a80      	ldrb	r0, [r0, #10]
1005d182:	0700      	lsls	r0, r0, #28
1005d184:	d521      	bpl.n	1005d1ca <hci_le_phy_update_complete_event_push+0x62>
1005d186:	461e      	mov	r6, r3
1005d188:	4615      	mov	r5, r2
1005d18a:	4811      	ldr	r0, [pc, #68]	@ (1005d1d0 <__arm_cp.16_1>)
1005d18c:	6800      	ldr	r0, [r0, #0]
1005d18e:	0761      	lsls	r1, r4, #29
1005d190:	0ec9      	lsrs	r1, r1, #27
1005d192:	1840      	adds	r0, r0, r1
1005d194:	6900      	ldr	r0, [r0, #16]
1005d196:	2227      	movs	r2, #39	@ 0x27
1005d198:	2303      	movs	r3, #3
1005d19a:	4621      	mov	r1, r4
1005d19c:	f7f5 fecc 	bl	10052f38 <aci_event_fifo_push_header>
1005d1a0:	2800      	cmp	r0, #0
1005d1a2:	d012      	beq.n	1005d1ca <hci_le_phy_update_complete_event_push+0x62>
1005d1a4:	4601      	mov	r1, r0
1005d1a6:	9806      	ldr	r0, [sp, #24]
1005d1a8:	724d      	strb	r5, [r1, #9]
1005d1aa:	7308      	strb	r0, [r1, #12]
1005d1ac:	72ce      	strb	r6, [r1, #11]
1005d1ae:	720f      	strb	r7, [r1, #8]
1005d1b0:	200c      	movs	r0, #12
1005d1b2:	71c8      	strb	r0, [r1, #7]
1005d1b4:	2006      	movs	r0, #6
1005d1b6:	7188      	strb	r0, [r1, #6]
1005d1b8:	203e      	movs	r0, #62	@ 0x3e
1005d1ba:	7148      	strb	r0, [r1, #5]
1005d1bc:	2004      	movs	r0, #4
1005d1be:	7108      	strb	r0, [r1, #4]
1005d1c0:	0a28      	lsrs	r0, r5, #8
1005d1c2:	7288      	strb	r0, [r1, #10]
1005d1c4:	4620      	mov	r0, r4
1005d1c6:	f7f5 ff54 	bl	10053072 <aci_event_fifo_push>
1005d1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005d1cc <__arm_cp.16_0>:
1005d1cc:	200010f4 	.word	0x200010f4

1005d1d0 <__arm_cp.16_1>:
1005d1d0:	200010a4 	.word	0x200010a4

1005d1d4 <LL_adjust_max_tx_data_frag>:
1005d1d4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005d1d6:	9302      	str	r3, [sp, #8]
1005d1d8:	9201      	str	r2, [sp, #4]
1005d1da:	460e      	mov	r6, r1
1005d1dc:	4605      	mov	r5, r0
1005d1de:	f7fa ff63 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005d1e2:	4604      	mov	r4, r0
1005d1e4:	4607      	mov	r7, r0
1005d1e6:	34b4      	adds	r4, #180	@ 0xb4
1005d1e8:	4628      	mov	r0, r5
1005d1ea:	f7fa ff91 	bl	10058110 <llc_conn_get_phy_upd_cntxt_per_p>
1005d1ee:	9908      	ldr	r1, [sp, #32]
1005d1f0:	2e04      	cmp	r6, #4
1005d1f2:	d106      	bne.n	1005d202 <LL_adjust_max_tx_data_frag+0x2e>
1005d1f4:	2800      	cmp	r0, #0
1005d1f6:	d004      	beq.n	1005d202 <LL_adjust_max_tx_data_frag+0x2e>
1005d1f8:	9a01      	ldr	r2, [sp, #4]
1005d1fa:	2a00      	cmp	r2, #0
1005d1fc:	d00c      	beq.n	1005d218 <LL_adjust_max_tx_data_frag+0x44>
1005d1fe:	220a      	movs	r2, #10
1005d200:	e00b      	b.n	1005d21a <LL_adjust_max_tx_data_frag+0x46>
1005d202:	8888      	ldrh	r0, [r1, #4]
1005d204:	8008      	strh	r0, [r1, #0]
1005d206:	2e01      	cmp	r6, #1
1005d208:	d102      	bne.n	1005d210 <LL_adjust_max_tx_data_frag+0x3c>
1005d20a:	08c0      	lsrs	r0, r0, #3
1005d20c:	380e      	subs	r0, #14
1005d20e:	e001      	b.n	1005d214 <LL_adjust_max_tx_data_frag+0x40>
1005d210:	0880      	lsrs	r0, r0, #2
1005d212:	380f      	subs	r0, #15
1005d214:	9e02      	ldr	r6, [sp, #8]
1005d216:	e00f      	b.n	1005d238 <LL_adjust_max_tx_data_frag+0x64>
1005d218:	2208      	movs	r2, #8
1005d21a:	9e02      	ldr	r6, [sp, #8]
1005d21c:	5a8a      	ldrh	r2, [r1, r2]
1005d21e:	800a      	strh	r2, [r1, #0]
1005d220:	8800      	ldrh	r0, [r0, #0]
1005d222:	2802      	cmp	r0, #2
1005d224:	d001      	beq.n	1005d22a <LL_adjust_max_tx_data_frag+0x56>
1005d226:	2001      	movs	r0, #1
1005d228:	e000      	b.n	1005d22c <LL_adjust_max_tx_data_frag+0x58>
1005d22a:	2003      	movs	r0, #3
1005d22c:	4b0b      	ldr	r3, [pc, #44]	@ (1005d25c <__arm_cp.20_0>)
1005d22e:	18d2      	adds	r2, r2, r3
1005d230:	40c2      	lsrs	r2, r0
1005d232:	480b      	ldr	r0, [pc, #44]	@ (1005d260 <__arm_cp.20_1>)
1005d234:	1810      	adds	r0, r2, r0
1005d236:	08c0      	lsrs	r0, r0, #3
1005d238:	b283      	uxth	r3, r0
1005d23a:	8822      	ldrh	r2, [r4, #0]
1005d23c:	429a      	cmp	r2, r3
1005d23e:	d300      	bcc.n	1005d242 <LL_adjust_max_tx_data_frag+0x6e>
1005d240:	4602      	mov	r2, r0
1005d242:	2e00      	cmp	r6, #0
1005d244:	d003      	beq.n	1005d24e <LL_adjust_max_tx_data_frag+0x7a>
1005d246:	b293      	uxth	r3, r2
1005d248:	89c8      	ldrh	r0, [r1, #14]
1005d24a:	4298      	cmp	r0, r3
1005d24c:	d300      	bcc.n	1005d250 <LL_adjust_max_tx_data_frag+0x7c>
1005d24e:	4610      	mov	r0, r2
1005d250:	8060      	strh	r0, [r4, #2]
1005d252:	4638      	mov	r0, r7
1005d254:	f7fb f9f2 	bl	1005863c <llc_conn_guard_time_for_close_conn_event>
1005d258:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005d25a:	46c0      	nop			@ (mov r8, r8)

1005d25c <__arm_cp.20_0>:
1005d25c:	fffffe88 	.word	0xfffffe88

1005d260 <__arm_cp.20_1>:
1005d260:	0007ffb5 	.word	0x0007ffb5

1005d264 <LL_version_exchange>:
1005d264:	b5f0      	push	{r4, r5, r6, r7, lr}
1005d266:	b087      	sub	sp, #28
1005d268:	461f      	mov	r7, r3
1005d26a:	4616      	mov	r6, r2
1005d26c:	460c      	mov	r4, r1
1005d26e:	4605      	mov	r5, r0
1005d270:	f7fc fd1f 	bl	10059cb2 <LL_cpe_get_cntxt>
1005d274:	9004      	str	r0, [sp, #16]
1005d276:	4628      	mov	r0, r5
1005d278:	f7fa ff16 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005d27c:	22ff      	movs	r2, #255	@ 0xff
1005d27e:	2e06      	cmp	r6, #6
1005d280:	d900      	bls.n	1005d284 <LL_version_exchange+0x20>
1005d282:	e0b2      	b.n	1005d3ea <LL_version_exchange+0x186>
1005d284:	4603      	mov	r3, r0
1005d286:	46c0      	nop			@ (mov r8, r8)
1005d288:	447e      	add	r6, pc
1005d28a:	7936      	ldrb	r6, [r6, #4]
1005d28c:	0076      	lsls	r6, r6, #1
1005d28e:	44b7      	add	pc, r6
1005d290:	3aac0e03 	.word	0x3aac0e03
1005d294:	0053acac 	.word	0x0053acac
1005d298:	2c01      	cmp	r4, #1
1005d29a:	d15c      	bne.n	1005d356 <LL_version_exchange+0xf2>
1005d29c:	208c      	movs	r0, #140	@ 0x8c
1005d29e:	5818      	ldr	r0, [r3, r0]
1005d2a0:	0601      	lsls	r1, r0, #24
1005d2a2:	338c      	adds	r3, #140	@ 0x8c
1005d2a4:	2900      	cmp	r1, #0
1005d2a6:	9904      	ldr	r1, [sp, #16]
1005d2a8:	d460      	bmi.n	1005d36c <LL_version_exchange+0x108>
1005d2aa:	220c      	movs	r2, #12
1005d2ac:	e06c      	b.n	1005d388 <LL_version_exchange+0x124>
1005d2ae:	9302      	str	r3, [sp, #8]
1005d2b0:	9203      	str	r2, [sp, #12]
1005d2b2:	4628      	mov	r0, r5
1005d2b4:	f000 f8d4 	bl	1005d460 <LL_conn_get_version_exchange_cached>
1005d2b8:	2800      	cmp	r0, #0
1005d2ba:	d000      	beq.n	1005d2be <LL_version_exchange+0x5a>
1005d2bc:	e094      	b.n	1005d3e8 <LL_version_exchange+0x184>
1005d2be:	1cf8      	adds	r0, r7, #3
1005d2c0:	2205      	movs	r2, #5
1005d2c2:	9201      	str	r2, [sp, #4]
1005d2c4:	9e04      	ldr	r6, [sp, #16]
1005d2c6:	4631      	mov	r1, r6
1005d2c8:	f005 fa7e 	bl	100627c8 <char_copy>
1005d2cc:	9f02      	ldr	r7, [sp, #8]
1005d2ce:	4639      	mov	r1, r7
1005d2d0:	313c      	adds	r1, #60	@ 0x3c
1005d2d2:	4630      	mov	r0, r6
1005d2d4:	9a01      	ldr	r2, [sp, #4]
1005d2d6:	f005 fa77 	bl	100627c8 <char_copy>
1005d2da:	208c      	movs	r0, #140	@ 0x8c
1005d2dc:	5838      	ldr	r0, [r7, r0]
1005d2de:	0642      	lsls	r2, r0, #25
1005d2e0:	4639      	mov	r1, r7
1005d2e2:	318c      	adds	r1, #140	@ 0x8c
1005d2e4:	2a00      	cmp	r2, #0
1005d2e6:	d46e      	bmi.n	1005d3c6 <LL_version_exchange+0x162>
1005d2e8:	2201      	movs	r2, #1
1005d2ea:	0212      	lsls	r2, r2, #8
1005d2ec:	4310      	orrs	r0, r2
1005d2ee:	6008      	str	r0, [r1, #0]
1005d2f0:	4628      	mov	r0, r5
1005d2f2:	4621      	mov	r1, r4
1005d2f4:	f7fc fcd0 	bl	10059c98 <LL_cpe_set_prepare_tx_pdu>
1005d2f8:	2205      	movs	r2, #5
1005d2fa:	2300      	movs	r3, #0
1005d2fc:	4628      	mov	r0, r5
1005d2fe:	4621      	mov	r1, r4
1005d300:	f7fc fc81 	bl	10059c06 <LL_cpe_set_active>
1005d304:	e070      	b.n	1005d3e8 <LL_version_exchange+0x184>
1005d306:	78b8      	ldrb	r0, [r7, #2]
1005d308:	280c      	cmp	r0, #12
1005d30a:	d16e      	bne.n	1005d3ea <LL_version_exchange+0x186>
1005d30c:	1cf8      	adds	r0, r7, #3
1005d30e:	2605      	movs	r6, #5
1005d310:	9f04      	ldr	r7, [sp, #16]
1005d312:	4639      	mov	r1, r7
1005d314:	9203      	str	r2, [sp, #12]
1005d316:	4632      	mov	r2, r6
1005d318:	9302      	str	r3, [sp, #8]
1005d31a:	f005 fa55 	bl	100627c8 <char_copy>
1005d31e:	4628      	mov	r0, r5
1005d320:	4621      	mov	r1, r4
1005d322:	4632      	mov	r2, r6
1005d324:	f7fc fc86 	bl	10059c34 <LL_cpe_clr_active>
1005d328:	9802      	ldr	r0, [sp, #8]
1005d32a:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
1005d32c:	4639      	mov	r1, r7
1005d32e:	f000 f86f 	bl	1005d410 <hci_read_remote_version_information_complete_event_push>
1005d332:	4628      	mov	r0, r5
1005d334:	4639      	mov	r1, r7
1005d336:	e055      	b.n	1005d3e4 <LL_version_exchange+0x180>
1005d338:	4616      	mov	r6, r2
1005d33a:	a806      	add	r0, sp, #24
1005d33c:	2130      	movs	r1, #48	@ 0x30
1005d33e:	8001      	strh	r1, [r0, #0]
1005d340:	2c01      	cmp	r4, #1
1005d342:	d12a      	bne.n	1005d39a <LL_version_exchange+0x136>
1005d344:	208c      	movs	r0, #140	@ 0x8c
1005d346:	5818      	ldr	r0, [r3, r0]
1005d348:	05c1      	lsls	r1, r0, #23
1005d34a:	d421      	bmi.n	1005d390 <LL_version_exchange+0x12c>
1005d34c:	338c      	adds	r3, #140	@ 0x8c
1005d34e:	2140      	movs	r1, #64	@ 0x40
1005d350:	4308      	orrs	r0, r1
1005d352:	6018      	str	r0, [r3, #0]
1005d354:	e021      	b.n	1005d39a <LL_version_exchange+0x136>
1005d356:	4616      	mov	r6, r2
1005d358:	2205      	movs	r2, #5
1005d35a:	4628      	mov	r0, r5
1005d35c:	4621      	mov	r1, r4
1005d35e:	f7fc fc69 	bl	10059c34 <LL_cpe_clr_active>
1005d362:	4628      	mov	r0, r5
1005d364:	9904      	ldr	r1, [sp, #16]
1005d366:	f000 f843 	bl	1005d3f0 <LL_conn_version_exchange_set_cached>
1005d36a:	e02a      	b.n	1005d3c2 <LL_version_exchange+0x15e>
1005d36c:	4628      	mov	r0, r5
1005d36e:	461c      	mov	r4, r3
1005d370:	f000 f83e 	bl	1005d3f0 <LL_conn_version_exchange_set_cached>
1005d374:	2101      	movs	r1, #1
1005d376:	2205      	movs	r2, #5
1005d378:	4628      	mov	r0, r5
1005d37a:	f7fc fc5b 	bl	10059c34 <LL_cpe_clr_active>
1005d37e:	4623      	mov	r3, r4
1005d380:	6820      	ldr	r0, [r4, #0]
1005d382:	2180      	movs	r1, #128	@ 0x80
1005d384:	4388      	bics	r0, r1
1005d386:	22ff      	movs	r2, #255	@ 0xff
1005d388:	2140      	movs	r1, #64	@ 0x40
1005d38a:	4388      	bics	r0, r1
1005d38c:	6018      	str	r0, [r3, #0]
1005d38e:	e02c      	b.n	1005d3ea <LL_version_exchange+0x186>
1005d390:	2101      	movs	r1, #1
1005d392:	2205      	movs	r2, #5
1005d394:	4628      	mov	r0, r5
1005d396:	f7fc fc4d 	bl	10059c34 <LL_cpe_clr_active>
1005d39a:	200d      	movs	r0, #13
1005d39c:	70f8      	strb	r0, [r7, #3]
1005d39e:	200c      	movs	r0, #12
1005d3a0:	70b8      	strb	r0, [r7, #2]
1005d3a2:	2006      	movs	r0, #6
1005d3a4:	7078      	strb	r0, [r7, #1]
1005d3a6:	2003      	movs	r0, #3
1005d3a8:	7038      	strb	r0, [r7, #0]
1005d3aa:	1d39      	adds	r1, r7, #4
1005d3ac:	a806      	add	r0, sp, #24
1005d3ae:	2402      	movs	r4, #2
1005d3b0:	4622      	mov	r2, r4
1005d3b2:	f005 fa09 	bl	100627c8 <char_copy>
1005d3b6:	a805      	add	r0, sp, #20
1005d3b8:	8004      	strh	r4, [r0, #0]
1005d3ba:	1db9      	adds	r1, r7, #6
1005d3bc:	4622      	mov	r2, r4
1005d3be:	f005 fa03 	bl	100627c8 <char_copy>
1005d3c2:	4632      	mov	r2, r6
1005d3c4:	e011      	b.n	1005d3ea <LL_version_exchange+0x186>
1005d3c6:	2280      	movs	r2, #128	@ 0x80
1005d3c8:	4310      	orrs	r0, r2
1005d3ca:	6008      	str	r0, [r1, #0]
1005d3cc:	2205      	movs	r2, #5
1005d3ce:	4628      	mov	r0, r5
1005d3d0:	4621      	mov	r1, r4
1005d3d2:	463c      	mov	r4, r7
1005d3d4:	f7fc fc2e 	bl	10059c34 <LL_cpe_clr_active>
1005d3d8:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
1005d3da:	4631      	mov	r1, r6
1005d3dc:	f000 f818 	bl	1005d410 <hci_read_remote_version_information_complete_event_push>
1005d3e0:	4628      	mov	r0, r5
1005d3e2:	4631      	mov	r1, r6
1005d3e4:	f000 f804 	bl	1005d3f0 <LL_conn_version_exchange_set_cached>
1005d3e8:	9a03      	ldr	r2, [sp, #12]
1005d3ea:	4610      	mov	r0, r2
1005d3ec:	b007      	add	sp, #28
1005d3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005d3f0 <LL_conn_version_exchange_set_cached>:
1005d3f0:	b510      	push	{r4, lr}
1005d3f2:	460c      	mov	r4, r1
1005d3f4:	f7fa fe58 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005d3f8:	4601      	mov	r1, r0
1005d3fa:	208c      	movs	r0, #140	@ 0x8c
1005d3fc:	580a      	ldr	r2, [r1, r0]
1005d3fe:	2308      	movs	r3, #8
1005d400:	4313      	orrs	r3, r2
1005d402:	500b      	str	r3, [r1, r0]
1005d404:	313c      	adds	r1, #60	@ 0x3c
1005d406:	2205      	movs	r2, #5
1005d408:	4620      	mov	r0, r4
1005d40a:	f005 f9dd 	bl	100627c8 <char_copy>
1005d40e:	bd10      	pop	{r4, pc}

1005d410 <hci_read_remote_version_information_complete_event_push>:
1005d410:	b570      	push	{r4, r5, r6, lr}
1005d412:	460c      	mov	r4, r1
1005d414:	4605      	mov	r5, r0
1005d416:	4810      	ldr	r0, [pc, #64]	@ (1005d458 <__arm_cp.2_0>)
1005d418:	6800      	ldr	r0, [r0, #0]
1005d41a:	2137      	movs	r1, #55	@ 0x37
1005d41c:	5c40      	ldrb	r0, [r0, r1]
1005d41e:	0700      	lsls	r0, r0, #28
1005d420:	d519      	bpl.n	1005d456 <hci_read_remote_version_information_complete_event_push+0x46>
1005d422:	480e      	ldr	r0, [pc, #56]	@ (1005d45c <__arm_cp.2_1>)
1005d424:	6800      	ldr	r0, [r0, #0]
1005d426:	6980      	ldr	r0, [r0, #24]
1005d428:	2102      	movs	r1, #2
1005d42a:	2221      	movs	r2, #33	@ 0x21
1005d42c:	2303      	movs	r3, #3
1005d42e:	f7f5 fd83 	bl	10052f38 <aci_event_fifo_push_header>
1005d432:	2800      	cmp	r0, #0
1005d434:	d00f      	beq.n	1005d456 <hci_read_remote_version_information_complete_event_push+0x46>
1005d436:	4606      	mov	r6, r0
1005d438:	1d00      	adds	r0, r0, #4
1005d43a:	4629      	mov	r1, r5
1005d43c:	4622      	mov	r2, r4
1005d43e:	f7f6 f89d 	bl	1005357c <hci_read_remote_version_information_complete_event_copy>
1005d442:	2008      	movs	r0, #8
1005d444:	71b0      	strb	r0, [r6, #6]
1005d446:	200c      	movs	r0, #12
1005d448:	7170      	strb	r0, [r6, #5]
1005d44a:	2004      	movs	r0, #4
1005d44c:	7130      	strb	r0, [r6, #4]
1005d44e:	2002      	movs	r0, #2
1005d450:	4631      	mov	r1, r6
1005d452:	f7f5 fe0e 	bl	10053072 <aci_event_fifo_push>
1005d456:	bd70      	pop	{r4, r5, r6, pc}

1005d458 <__arm_cp.2_0>:
1005d458:	200010f4 	.word	0x200010f4

1005d45c <__arm_cp.2_1>:
1005d45c:	200010a4 	.word	0x200010a4

1005d460 <LL_conn_get_version_exchange_cached>:
1005d460:	b580      	push	{r7, lr}
1005d462:	f7fa fe21 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005d466:	218c      	movs	r1, #140	@ 0x8c
1005d468:	5840      	ldr	r0, [r0, r1]
1005d46a:	0700      	lsls	r0, r0, #28
1005d46c:	0fc0      	lsrs	r0, r0, #31
1005d46e:	bd80      	pop	{r7, pc}

1005d470 <llc_cte_get_ctxt>:
1005d470:	4802      	ldr	r0, [pc, #8]	@ (1005d47c <__arm_cp.2_0>)
1005d472:	6800      	ldr	r0, [r0, #0]
1005d474:	219c      	movs	r1, #156	@ 0x9c
1005d476:	5840      	ldr	r0, [r0, r1]
1005d478:	6d00      	ldr	r0, [r0, #80]	@ 0x50
1005d47a:	4770      	bx	lr

1005d47c <__arm_cp.2_0>:
1005d47c:	200010f4 	.word	0x200010f4

1005d480 <llc_cte_init_ucfg_weak>:
1005d480:	4770      	bx	lr

1005d482 <llc_cte_mem_allocate_ucfg_weak>:
1005d482:	4770      	bx	lr

1005d484 <llc_cte_timer_error_ucfg_weak>:
1005d484:	4770      	bx	lr

1005d486 <llc_cte_timer_stop_ucfg_weak>:
1005d486:	2000      	movs	r0, #0
1005d488:	4770      	bx	lr
	...

1005d48c <LL_dtm_init>:
1005d48c:	b5b0      	push	{r4, r5, r7, lr}
1005d48e:	480e      	ldr	r0, [pc, #56]	@ (1005d4c8 <__arm_cp.0_0>)
1005d490:	6800      	ldr	r0, [r0, #0]
1005d492:	21ac      	movs	r1, #172	@ 0xac
1005d494:	5844      	ldr	r4, [r0, r1]
1005d496:	20ff      	movs	r0, #255	@ 0xff
1005d498:	77a0      	strb	r0, [r4, #30]
1005d49a:	2500      	movs	r5, #0
1005d49c:	77e5      	strb	r5, [r4, #31]
1005d49e:	f7f9 ffcf 	bl	10057440 <cte_csr_ucfg_weak>
1005d4a2:	2801      	cmp	r0, #1
1005d4a4:	d10f      	bne.n	1005d4c6 <LL_dtm_init+0x3a>
1005d4a6:	f7ff ffe3 	bl	1005d470 <llc_cte_get_ctxt>
1005d4aa:	2224      	movs	r2, #36	@ 0x24
1005d4ac:	4907      	ldr	r1, [pc, #28]	@ (1005d4cc <__arm_cp.0_1>)
1005d4ae:	5c8a      	ldrb	r2, [r1, r2]
1005d4b0:	2a00      	cmp	r2, #0
1005d4b2:	462a      	mov	r2, r5
1005d4b4:	d000      	beq.n	1005d4b8 <LL_dtm_init+0x2c>
1005d4b6:	6802      	ldr	r2, [r0, #0]
1005d4b8:	62a2      	str	r2, [r4, #40]	@ 0x28
1005d4ba:	2223      	movs	r2, #35	@ 0x23
1005d4bc:	5c89      	ldrb	r1, [r1, r2]
1005d4be:	2900      	cmp	r1, #0
1005d4c0:	d000      	beq.n	1005d4c4 <LL_dtm_init+0x38>
1005d4c2:	6845      	ldr	r5, [r0, #4]
1005d4c4:	62e5      	str	r5, [r4, #44]	@ 0x2c
1005d4c6:	bdb0      	pop	{r4, r5, r7, pc}

1005d4c8 <__arm_cp.0_0>:
1005d4c8:	200010f4 	.word	0x200010f4

1005d4cc <__arm_cp.0_1>:
1005d4cc:	20001108 	.word	0x20001108

1005d4d0 <LL_eadv_switchbackupdata_data_struc>:
1005d4d0:	b510      	push	{r4, lr}
1005d4d2:	7c01      	ldrb	r1, [r0, #16]
1005d4d4:	2902      	cmp	r1, #2
1005d4d6:	d109      	bne.n	1005d4ec <LL_eadv_switchbackupdata_data_struc+0x1c>
1005d4d8:	2401      	movs	r4, #1
1005d4da:	7404      	strb	r4, [r0, #16]
1005d4dc:	6801      	ldr	r1, [r0, #0]
1005d4de:	6882      	ldr	r2, [r0, #8]
1005d4e0:	68c3      	ldr	r3, [r0, #12]
1005d4e2:	c00c      	stmia	r0!, {r2, r3}
1005d4e4:	20a1      	movs	r0, #161	@ 0xa1
1005d4e6:	f006 fc49 	bl	10063d7c <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1005d4ea:	e000      	b.n	1005d4ee <LL_eadv_switchbackupdata_data_struc+0x1e>
1005d4ec:	2400      	movs	r4, #0
1005d4ee:	4620      	mov	r0, r4
1005d4f0:	bd10      	pop	{r4, pc}

1005d4f2 <LL_eadv_Blue_Tx>:
1005d4f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d4f4:	461e      	mov	r6, r3
1005d4f6:	4617      	mov	r7, r2
1005d4f8:	460d      	mov	r5, r1
1005d4fa:	4604      	mov	r4, r0
1005d4fc:	f7e9 ff94 	bl	10047428 <BLEPLAT_CNTR_PacketInitTo0>
1005d500:	4620      	mov	r0, r4
1005d502:	f7e9 ff9f 	bl	10047444 <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1005d506:	4620      	mov	r0, r4
1005d508:	f7ea f81b 	bl	10047542 <BLEPLAT_CNTR_PacketSetKeepsemareq>
1005d50c:	4620      	mov	r0, r4
1005d50e:	4621      	mov	r1, r4
1005d510:	f7ea f824 	bl	1004755c <BLEPLAT_CNTR_PacketSetNextPtr>
1005d514:	4620      	mov	r0, r4
1005d516:	4639      	mov	r1, r7
1005d518:	f7e9 ffbb 	bl	10047492 <BLEPLAT_CNTR_PacketSetDataPtr>
1005d51c:	4620      	mov	r0, r4
1005d51e:	4631      	mov	r1, r6
1005d520:	f7ea f876 	bl	10047610 <BLEPLAT_CNTR_PacketSetTimeout>
1005d524:	9f06      	ldr	r7, [sp, #24]
1005d526:	2e00      	cmp	r6, #0
1005d528:	d002      	beq.n	1005d530 <LL_eadv_Blue_Tx+0x3e>
1005d52a:	4620      	mov	r0, r4
1005d52c:	f7ea f87f 	bl	1004762e <BLEPLAT_CNTR_PacketSetTimer2Active>
1005d530:	4620      	mov	r0, r4
1005d532:	f7e9 ff53 	bl	100473dc <BLEPLAT_CNTR_PacketClrIncChan>
1005d536:	4620      	mov	r0, r4
1005d538:	f7e9 ffd2 	bl	100474e0 <BLEPLAT_CNTR_PacketSetIntDone>
1005d53c:	4620      	mov	r0, r4
1005d53e:	f7ea f89c 	bl	1004767a <BLEPLAT_CNTR_PacketSetTxReady>
1005d542:	4620      	mov	r0, r4
1005d544:	2f81      	cmp	r7, #129	@ 0x81
1005d546:	d109      	bne.n	1005d55c <LL_eadv_Blue_Tx+0x6a>
1005d548:	4629      	mov	r1, r5
1005d54a:	f7ea f823 	bl	10047594 <BLEPLAT_CNTR_PacketSetNextSlot>
1005d54e:	4620      	mov	r0, r4
1005d550:	f7ea f844 	bl	100475dc <BLEPLAT_CNTR_PacketSetPllTrig>
1005d554:	4620      	mov	r0, r4
1005d556:	f7ea f876 	bl	10047646 <BLEPLAT_CNTR_PacketSetTimerTrigDone>
1005d55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005d55c:	f7ea f880 	bl	10047660 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1005d560:	4620      	mov	r0, r4
1005d562:	f7ea f80a 	bl	1004757a <BLEPLAT_CNTR_PacketSetNextRxMode>
1005d566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005d568 <LL_eadv_Blue_Rx>:
1005d568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d56a:	461e      	mov	r6, r3
1005d56c:	4617      	mov	r7, r2
1005d56e:	460d      	mov	r5, r1
1005d570:	4604      	mov	r4, r0
1005d572:	f7e9 ff59 	bl	10047428 <BLEPLAT_CNTR_PacketInitTo0>
1005d576:	4620      	mov	r0, r4
1005d578:	f7e9 ff64 	bl	10047444 <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1005d57c:	4620      	mov	r0, r4
1005d57e:	f7e9 ffe0 	bl	10047542 <BLEPLAT_CNTR_PacketSetKeepsemareq>
1005d582:	4620      	mov	r0, r4
1005d584:	4621      	mov	r1, r4
1005d586:	f7e9 ffe9 	bl	1004755c <BLEPLAT_CNTR_PacketSetNextPtr>
1005d58a:	4620      	mov	r0, r4
1005d58c:	4639      	mov	r1, r7
1005d58e:	f7e9 ff80 	bl	10047492 <BLEPLAT_CNTR_PacketSetDataPtr>
1005d592:	4620      	mov	r0, r4
1005d594:	4631      	mov	r1, r6
1005d596:	f7ea f83b 	bl	10047610 <BLEPLAT_CNTR_PacketSetTimeout>
1005d59a:	9f07      	ldr	r7, [sp, #28]
1005d59c:	2e00      	cmp	r6, #0
1005d59e:	d002      	beq.n	1005d5a6 <LL_eadv_Blue_Rx+0x3e>
1005d5a0:	4620      	mov	r0, r4
1005d5a2:	f7ea f844 	bl	1004762e <BLEPLAT_CNTR_PacketSetTimer2Active>
1005d5a6:	4620      	mov	r0, r4
1005d5a8:	f7e9 ffff 	bl	100475aa <BLEPLAT_CNTR_PacketSetNextTxMode>
1005d5ac:	4620      	mov	r0, r4
1005d5ae:	f7e9 ff15 	bl	100473dc <BLEPLAT_CNTR_PacketClrIncChan>
1005d5b2:	4620      	mov	r0, r4
1005d5b4:	f7e9 ff94 	bl	100474e0 <BLEPLAT_CNTR_PacketSetIntDone>
1005d5b8:	4620      	mov	r0, r4
1005d5ba:	f7ea f851 	bl	10047660 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1005d5be:	4620      	mov	r0, r4
1005d5c0:	f7e9 ff9a 	bl	100474f8 <BLEPLAT_CNTR_PacketSetIntRcvOk>
1005d5c4:	4620      	mov	r0, r4
1005d5c6:	f7ea f816 	bl	100475f6 <BLEPLAT_CNTR_PacketSetRxReady>
1005d5ca:	2f81      	cmp	r7, #129	@ 0x81
1005d5cc:	d107      	bne.n	1005d5de <LL_eadv_Blue_Rx+0x76>
1005d5ce:	4620      	mov	r0, r4
1005d5d0:	4629      	mov	r1, r5
1005d5d2:	f7e9 ffdf 	bl	10047594 <BLEPLAT_CNTR_PacketSetNextSlot>
1005d5d6:	4620      	mov	r0, r4
1005d5d8:	f7e9 ff0c 	bl	100473f4 <BLEPLAT_CNTR_PacketClrPllTrig>
1005d5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005d5de:	4620      	mov	r0, r4
1005d5e0:	f7e9 fffc 	bl	100475dc <BLEPLAT_CNTR_PacketSetPllTrig>
1005d5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1005d5e8 <LL_eadv_BLUE_SM>:
1005d5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d5ea:	461d      	mov	r5, r3
1005d5ec:	4616      	mov	r6, r2
1005d5ee:	460f      	mov	r7, r1
1005d5f0:	4604      	mov	r4, r0
1005d5f2:	f7ea f9cf 	bl	10047994 <BLEPLAT_CNTR_SmInitTo0>
1005d5f6:	4911      	ldr	r1, [pc, #68]	@ (1005d63c <__arm_cp.10_0>)
1005d5f8:	4620      	mov	r0, r4
1005d5fa:	f7ea f9e9 	bl	100479d0 <BLEPLAT_CNTR_SmSetAccessAddr>
1005d5fe:	4910      	ldr	r1, [pc, #64]	@ (1005d640 <__arm_cp.10_1>)
1005d600:	4620      	mov	r0, r4
1005d602:	f7ea fa28 	bl	10047a56 <BLEPLAT_CNTR_SmSetCrcInit>
1005d606:	4620      	mov	r0, r4
1005d608:	4639      	mov	r1, r7
1005d60a:	f7ea fb55 	bl	10047cb8 <BLEPLAT_CNTR_SmSetTxPwr>
1005d60e:	4620      	mov	r0, r4
1005d610:	4631      	mov	r1, r6
1005d612:	f7ea fb2a 	bl	10047c6a <BLEPLAT_CNTR_SmSetTxPacketPtr>
1005d616:	4620      	mov	r0, r4
1005d618:	4629      	mov	r1, r5
1005d61a:	f7ea faba 	bl	10047b92 <BLEPLAT_CNTR_SmSetRxPacketPtr>
1005d61e:	9806      	ldr	r0, [sp, #24]
1005d620:	2881      	cmp	r0, #129	@ 0x81
1005d622:	d103      	bne.n	1005d62c <LL_eadv_BLUE_SM+0x44>
1005d624:	4620      	mov	r0, r4
1005d626:	f7ea fb11 	bl	10047c4c <BLEPLAT_CNTR_SmSetTxMode>
1005d62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005d62c:	4620      	mov	r0, r4
1005d62e:	f7ea faa1 	bl	10047b74 <BLEPLAT_CNTR_SmSetRxMode>
1005d632:	2101      	movs	r1, #1
1005d634:	4620      	mov	r0, r4
1005d636:	f7ea fa35 	bl	10047aa4 <BLEPLAT_CNTR_SmSetHopIncr>
1005d63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005d63c <__arm_cp.10_0>:
1005d63c:	8e89bed6 	.word	0x8e89bed6

1005d640 <__arm_cp.10_1>:
1005d640:	00555555 	.word	0x00555555

1005d644 <llc_get_advertising_set_index>:
1005d644:	b570      	push	{r4, r5, r6, lr}
1005d646:	4604      	mov	r4, r0
1005d648:	f001 fa70 	bl	1005eb2c <llc_get_linkms_cntxt_p>
1005d64c:	214d      	movs	r1, #77	@ 0x4d
1005d64e:	5c41      	ldrb	r1, [r0, r1]
1005d650:	4d09      	ldr	r5, [pc, #36]	@ (1005d678 <__arm_cp.12_0>)
1005d652:	2200      	movs	r2, #0
1005d654:	23be      	movs	r3, #190	@ 0xbe
1005d656:	4291      	cmp	r1, r2
1005d658:	d00b      	beq.n	1005d672 <llc_get_advertising_set_index+0x2e>
1005d65a:	6806      	ldr	r6, [r0, #0]
1005d65c:	5af6      	ldrh	r6, [r6, r3]
1005d65e:	42a6      	cmp	r6, r4
1005d660:	4616      	mov	r6, r2
1005d662:	d000      	beq.n	1005d666 <llc_get_advertising_set_index+0x22>
1005d664:	462e      	mov	r6, r5
1005d666:	2501      	movs	r5, #1
1005d668:	022d      	lsls	r5, r5, #8
1005d66a:	195b      	adds	r3, r3, r5
1005d66c:	1c52      	adds	r2, r2, #1
1005d66e:	4635      	mov	r5, r6
1005d670:	e7f1      	b.n	1005d656 <llc_get_advertising_set_index+0x12>
1005d672:	b2a8      	uxth	r0, r5
1005d674:	bd70      	pop	{r4, r5, r6, pc}
1005d676:	46c0      	nop			@ (mov r8, r8)

1005d678 <__arm_cp.12_0>:
1005d678:	0000ffff 	.word	0x0000ffff

1005d67c <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>:
1005d67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d67e:	4604      	mov	r4, r0
1005d680:	f001 fa54 	bl	1005eb2c <llc_get_linkms_cntxt_p>
1005d684:	4601      	mov	r1, r0
1005d686:	204d      	movs	r0, #77	@ 0x4d
1005d688:	5c08      	ldrb	r0, [r1, r0]
1005d68a:	0202      	lsls	r2, r0, #8
1005d68c:	2000      	movs	r0, #0
1005d68e:	4b0d      	ldr	r3, [pc, #52]	@ (1005d6c4 <__arm_cp.17_0>)
1005d690:	4605      	mov	r5, r0
1005d692:	42aa      	cmp	r2, r5
1005d694:	d013      	beq.n	1005d6be <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x42>
1005d696:	680e      	ldr	r6, [r1, #0]
1005d698:	1976      	adds	r6, r6, r5
1005d69a:	27be      	movs	r7, #190	@ 0xbe
1005d69c:	5bf7      	ldrh	r7, [r6, r7]
1005d69e:	429f      	cmp	r7, r3
1005d6a0:	d003      	beq.n	1005d6aa <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x2e>
1005d6a2:	27ce      	movs	r7, #206	@ 0xce
1005d6a4:	5df7      	ldrb	r7, [r6, r7]
1005d6a6:	2f01      	cmp	r7, #1
1005d6a8:	d003      	beq.n	1005d6b2 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x36>
1005d6aa:	2601      	movs	r6, #1
1005d6ac:	0236      	lsls	r6, r6, #8
1005d6ae:	19ad      	adds	r5, r5, r6
1005d6b0:	e7ef      	b.n	1005d692 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x16>
1005d6b2:	2c00      	cmp	r4, #0
1005d6b4:	d004      	beq.n	1005d6c0 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x44>
1005d6b6:	20c3      	movs	r0, #195	@ 0xc3
1005d6b8:	5c30      	ldrb	r0, [r6, r0]
1005d6ba:	1e41      	subs	r1, r0, #1
1005d6bc:	4188      	sbcs	r0, r1
1005d6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005d6c0:	2001      	movs	r0, #1
1005d6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005d6c4 <__arm_cp.17_0>:
1005d6c4:	0000ffff 	.word	0x0000ffff

1005d6c8 <llc_eadv_generate_new_rpa_for_one_adv_set>:
1005d6c8:	b5b0      	push	{r4, r5, r7, lr}
1005d6ca:	4604      	mov	r4, r0
1005d6cc:	20d6      	movs	r0, #214	@ 0xd6
1005d6ce:	5c20      	ldrb	r0, [r4, r0]
1005d6d0:	0780      	lsls	r0, r0, #30
1005d6d2:	d401      	bmi.n	1005d6d8 <llc_eadv_generate_new_rpa_for_one_adv_set+0x10>
1005d6d4:	2000      	movs	r0, #0
1005d6d6:	bdb0      	pop	{r4, r5, r7, pc}
1005d6d8:	4625      	mov	r5, r4
1005d6da:	3584      	adds	r5, #132	@ 0x84
1005d6dc:	4628      	mov	r0, r5
1005d6de:	f7fc f9f5 	bl	10059acc <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>
1005d6e2:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1005d6e4:	4628      	mov	r0, r5
1005d6e6:	f7fc f9e9 	bl	10059abc <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>
1005d6ea:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
1005d6ec:	3008      	adds	r0, #8
1005d6ee:	2100      	movs	r1, #0
1005d6f0:	f7fc f9e2 	bl	10059ab8 <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>
1005d6f4:	6f60      	ldr	r0, [r4, #116]	@ 0x74
1005d6f6:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1005d6f8:	6761      	str	r1, [r4, #116]	@ 0x74
1005d6fa:	67a0      	str	r0, [r4, #120]	@ 0x78
1005d6fc:	2001      	movs	r0, #1
1005d6fe:	bdb0      	pop	{r4, r5, r7, pc}

1005d700 <EADV_init>:
1005d700:	b5f0      	push	{r4, r5, r6, r7, lr}
1005d702:	b085      	sub	sp, #20
1005d704:	9204      	str	r2, [sp, #16]
1005d706:	460e      	mov	r6, r1
1005d708:	4605      	mov	r5, r0
1005d70a:	244d      	movs	r4, #77	@ 0x4d
1005d70c:	f001 fa0e 	bl	1005eb2c <llc_get_linkms_cntxt_p>
1005d710:	5505      	strb	r5, [r0, r4]
1005d712:	6006      	str	r6, [r0, #0]
1005d714:	9003      	str	r0, [sp, #12]
1005d716:	304d      	adds	r0, #77	@ 0x4d
1005d718:	2101      	movs	r1, #1
1005d71a:	9002      	str	r0, [sp, #8]
1005d71c:	7041      	strb	r1, [r0, #1]
1005d71e:	9101      	str	r1, [sp, #4]
1005d720:	04cb      	lsls	r3, r1, #19
1005d722:	2600      	movs	r6, #0
1005d724:	277c      	movs	r7, #124	@ 0x7c
1005d726:	9a04      	ldr	r2, [sp, #16]
1005d728:	b2e8      	uxtb	r0, r5
1005d72a:	4286      	cmp	r6, r0
1005d72c:	d226      	bcs.n	1005d77c <EADV_init+0x7c>
1005d72e:	9803      	ldr	r0, [sp, #12]
1005d730:	6800      	ldr	r0, [r0, #0]
1005d732:	51c3      	str	r3, [r0, r7]
1005d734:	19c5      	adds	r5, r0, r7
1005d736:	2054      	movs	r0, #84	@ 0x54
1005d738:	4911      	ldr	r1, [pc, #68]	@ (1005d780 <__arm_cp.19_0>)
1005d73a:	5229      	strh	r1, [r5, r0]
1005d73c:	2452      	movs	r4, #82	@ 0x52
1005d73e:	2000      	movs	r0, #0
1005d740:	5328      	strh	r0, [r5, r4]
1005d742:	2442      	movs	r4, #66	@ 0x42
1005d744:	5329      	strh	r1, [r5, r4]
1005d746:	245e      	movs	r4, #94	@ 0x5e
1005d748:	5528      	strb	r0, [r5, r4]
1005d74a:	245c      	movs	r4, #92	@ 0x5c
1005d74c:	21ff      	movs	r1, #255	@ 0xff
1005d74e:	5529      	strb	r1, [r5, r4]
1005d750:	215a      	movs	r1, #90	@ 0x5a
1005d752:	5468      	strb	r0, [r5, r1]
1005d754:	2146      	movs	r1, #70	@ 0x46
1005d756:	2407      	movs	r4, #7
1005d758:	526c      	strh	r4, [r5, r1]
1005d75a:	6128      	str	r0, [r5, #16]
1005d75c:	6168      	str	r0, [r5, #20]
1005d75e:	606b      	str	r3, [r5, #4]
1005d760:	9904      	ldr	r1, [sp, #16]
1005d762:	2900      	cmp	r1, #0
1005d764:	d002      	beq.n	1005d76c <EADV_init+0x6c>
1005d766:	6550      	str	r0, [r2, #84]	@ 0x54
1005d768:	3d2c      	subs	r5, #44	@ 0x2c
1005d76a:	602a      	str	r2, [r5, #0]
1005d76c:	9801      	ldr	r0, [sp, #4]
1005d76e:	0200      	lsls	r0, r0, #8
1005d770:	183f      	adds	r7, r7, r0
1005d772:	325c      	adds	r2, #92	@ 0x5c
1005d774:	9802      	ldr	r0, [sp, #8]
1005d776:	7805      	ldrb	r5, [r0, #0]
1005d778:	1c76      	adds	r6, r6, #1
1005d77a:	e7d5      	b.n	1005d728 <EADV_init+0x28>
1005d77c:	b005      	add	sp, #20
1005d77e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005d780 <__arm_cp.19_0>:
1005d780:	0000ffff 	.word	0x0000ffff

1005d784 <LL_LE_Set_Advertising_Parameters>:
1005d784:	b570      	push	{r4, r5, r6, lr}
1005d786:	4604      	mov	r4, r0
1005d788:	f001 f9d0 	bl	1005eb2c <llc_get_linkms_cntxt_p>
1005d78c:	4605      	mov	r5, r0
1005d78e:	4e30      	ldr	r6, [pc, #192]	@ (1005d850 <__arm_cp.20_0>)
1005d790:	4630      	mov	r0, r6
1005d792:	f7ff ff57 	bl	1005d644 <llc_get_advertising_set_index>
1005d796:	492f      	ldr	r1, [pc, #188]	@ (1005d854 <__arm_cp.20_1>)
1005d798:	4288      	cmp	r0, r1
1005d79a:	d112      	bne.n	1005d7c2 <LL_LE_Set_Advertising_Parameters+0x3e>
1005d79c:	f000 f860 	bl	1005d860 <LL_Context_ReturnFree>
1005d7a0:	28ff      	cmp	r0, #255	@ 0xff
1005d7a2:	d034      	beq.n	1005d80e <LL_LE_Set_Advertising_Parameters+0x8a>
1005d7a4:	0200      	lsls	r0, r0, #8
1005d7a6:	6829      	ldr	r1, [r5, #0]
1005d7a8:	1808      	adds	r0, r1, r0
1005d7aa:	21be      	movs	r1, #190	@ 0xbe
1005d7ac:	5246      	strh	r6, [r0, r1]
1005d7ae:	214c      	movs	r1, #76	@ 0x4c
1005d7b0:	2200      	movs	r2, #0
1005d7b2:	5442      	strb	r2, [r0, r1]
1005d7b4:	2138      	movs	r1, #56	@ 0x38
1005d7b6:	5442      	strb	r2, [r0, r1]
1005d7b8:	63c2      	str	r2, [r0, #60]	@ 0x3c
1005d7ba:	6402      	str	r2, [r0, #64]	@ 0x40
1005d7bc:	6282      	str	r2, [r0, #40]	@ 0x28
1005d7be:	62c2      	str	r2, [r0, #44]	@ 0x2c
1005d7c0:	e008      	b.n	1005d7d4 <LL_LE_Set_Advertising_Parameters+0x50>
1005d7c2:	0200      	lsls	r0, r0, #8
1005d7c4:	6829      	ldr	r1, [r5, #0]
1005d7c6:	1808      	adds	r0, r1, r0
1005d7c8:	21ce      	movs	r1, #206	@ 0xce
1005d7ca:	5c41      	ldrb	r1, [r0, r1]
1005d7cc:	2901      	cmp	r1, #1
1005d7ce:	d101      	bne.n	1005d7d4 <LL_LE_Set_Advertising_Parameters+0x50>
1005d7d0:	250c      	movs	r5, #12
1005d7d2:	e03a      	b.n	1005d84a <LL_LE_Set_Advertising_Parameters+0xc6>
1005d7d4:	7961      	ldrb	r1, [r4, #5]
1005d7d6:	22c2      	movs	r2, #194	@ 0xc2
1005d7d8:	5481      	strb	r1, [r0, r2]
1005d7da:	4606      	mov	r6, r0
1005d7dc:	36c2      	adds	r6, #194	@ 0xc2
1005d7de:	2500      	movs	r5, #0
1005d7e0:	72f5      	strb	r5, [r6, #11]
1005d7e2:	2101      	movs	r1, #1
1005d7e4:	70f1      	strb	r1, [r6, #3]
1005d7e6:	79a1      	ldrb	r1, [r4, #6]
1005d7e8:	7071      	strb	r1, [r6, #1]
1005d7ea:	8821      	ldrh	r1, [r4, #0]
1005d7ec:	0209      	lsls	r1, r1, #8
1005d7ee:	67c1      	str	r1, [r0, #124]	@ 0x7c
1005d7f0:	4601      	mov	r1, r0
1005d7f2:	3184      	adds	r1, #132	@ 0x84
1005d7f4:	7922      	ldrb	r2, [r4, #4]
1005d7f6:	2a04      	cmp	r2, #4
1005d7f8:	d815      	bhi.n	1005d826 <LL_LE_Set_Advertising_Parameters+0xa2>
1005d7fa:	46c0      	nop			@ (mov r8, r8)
1005d7fc:	447a      	add	r2, pc
1005d7fe:	7912      	ldrb	r2, [r2, #4]
1005d800:	0052      	lsls	r2, r2, #1
1005d802:	4497      	add	pc, r2
1005d804:	0c0a0602 	.word	0x0c0a0602
1005d808:	000e      	.short	0x000e
1005d80a:	20f3      	movs	r0, #243	@ 0xf3
1005d80c:	e00a      	b.n	1005d824 <LL_LE_Set_Advertising_Parameters+0xa0>
1005d80e:	2507      	movs	r5, #7
1005d810:	e01b      	b.n	1005d84a <LL_LE_Set_Advertising_Parameters+0xc6>
1005d812:	4a11      	ldr	r2, [pc, #68]	@ (1005d858 <__arm_cp.20_2>)
1005d814:	67c2      	str	r2, [r0, #124]	@ 0x7c
1005d816:	20fd      	movs	r0, #253	@ 0xfd
1005d818:	e004      	b.n	1005d824 <LL_LE_Set_Advertising_Parameters+0xa0>
1005d81a:	20f2      	movs	r0, #242	@ 0xf2
1005d81c:	e002      	b.n	1005d824 <LL_LE_Set_Advertising_Parameters+0xa0>
1005d81e:	20f0      	movs	r0, #240	@ 0xf0
1005d820:	e000      	b.n	1005d824 <LL_LE_Set_Advertising_Parameters+0xa0>
1005d822:	20f5      	movs	r0, #245	@ 0xf5
1005d824:	8688      	strh	r0, [r1, #52]	@ 0x34
1005d826:	7a20      	ldrb	r0, [r4, #8]
1005d828:	79e2      	ldrb	r2, [r4, #7]
1005d82a:	600d      	str	r5, [r1, #0]
1005d82c:	604d      	str	r5, [r1, #4]
1005d82e:	7532      	strb	r2, [r6, #20]
1005d830:	7570      	strb	r0, [r6, #21]
1005d832:	7a20      	ldrb	r0, [r4, #8]
1005d834:	7008      	strb	r0, [r1, #0]
1005d836:	1c48      	adds	r0, r1, #1
1005d838:	3409      	adds	r4, #9
1005d83a:	2206      	movs	r2, #6
1005d83c:	4621      	mov	r1, r4
1005d83e:	f7e8 fc09 	bl	10046054 <BLEPLAT_MemCpy>
1005d842:	4806      	ldr	r0, [pc, #24]	@ (1005d85c <__arm_cp.20_3>)
1005d844:	6800      	ldr	r0, [r0, #0]
1005d846:	7a40      	ldrb	r0, [r0, #9]
1005d848:	70b0      	strb	r0, [r6, #2]
1005d84a:	4628      	mov	r0, r5
1005d84c:	bd70      	pop	{r4, r5, r6, pc}
1005d84e:	46c0      	nop			@ (mov r8, r8)

1005d850 <__arm_cp.20_0>:
1005d850:	0000fffc 	.word	0x0000fffc

1005d854 <__arm_cp.20_1>:
1005d854:	0000ffff 	.word	0x0000ffff

1005d858 <__arm_cp.20_2>:
1005d858:	000005dc 	.word	0x000005dc

1005d85c <__arm_cp.20_3>:
1005d85c:	200010f4 	.word	0x200010f4

1005d860 <LL_Context_ReturnFree>:
1005d860:	b510      	push	{r4, lr}
1005d862:	f001 f963 	bl	1005eb2c <llc_get_linkms_cntxt_p>
1005d866:	214d      	movs	r1, #77	@ 0x4d
1005d868:	5c42      	ldrb	r2, [r0, r1]
1005d86a:	2100      	movs	r1, #0
1005d86c:	23be      	movs	r3, #190	@ 0xbe
1005d86e:	428a      	cmp	r2, r1
1005d870:	d008      	beq.n	1005d884 <LL_Context_ReturnFree+0x24>
1005d872:	6804      	ldr	r4, [r0, #0]
1005d874:	5ae4      	ldrh	r4, [r4, r3]
1005d876:	0b24      	lsrs	r4, r4, #12
1005d878:	d105      	bne.n	1005d886 <LL_Context_ReturnFree+0x26>
1005d87a:	2401      	movs	r4, #1
1005d87c:	0224      	lsls	r4, r4, #8
1005d87e:	191b      	adds	r3, r3, r4
1005d880:	1c49      	adds	r1, r1, #1
1005d882:	e7f4      	b.n	1005d86e <LL_Context_ReturnFree+0xe>
1005d884:	21ff      	movs	r1, #255	@ 0xff
1005d886:	b2c8      	uxtb	r0, r1
1005d888:	bd10      	pop	{r4, pc}
	...

1005d88c <LL_LE_Set_Advertise_Enable>:
1005d88c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005d88e:	4604      	mov	r4, r0
1005d890:	f000 f816 	bl	1005d8c0 <LL_LE_Set_Advertising_Parameters_Default>
1005d894:	2300      	movs	r3, #0
1005d896:	9300      	str	r3, [sp, #0]
1005d898:	2101      	movs	r1, #1
1005d89a:	4d07      	ldr	r5, [pc, #28]	@ (1005d8b8 <__arm_cp.22_0>)
1005d89c:	4620      	mov	r0, r4
1005d89e:	462a      	mov	r2, r5
1005d8a0:	f000 f82c 	bl	1005d8fc <LL_Set_Extented_Advertising_Enable>
1005d8a4:	4604      	mov	r4, r0
1005d8a6:	4805      	ldr	r0, [pc, #20]	@ (1005d8bc <__arm_cp.22_1>)
1005d8a8:	6801      	ldr	r1, [r0, #0]
1005d8aa:	3156      	adds	r1, #86	@ 0x56
1005d8ac:	4628      	mov	r0, r5
1005d8ae:	f000 f98f 	bl	1005dbd0 <LL_Set_Extented_Advertising_Set_Random_Address>
1005d8b2:	4620      	mov	r0, r4
1005d8b4:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1005d8b6:	46c0      	nop			@ (mov r8, r8)

1005d8b8 <__arm_cp.22_0>:
1005d8b8:	0000fffc 	.word	0x0000fffc

1005d8bc <__arm_cp.22_1>:
1005d8bc:	200010f4 	.word	0x200010f4

1005d8c0 <LL_LE_Set_Advertising_Parameters_Default>:
1005d8c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1005d8c2:	480c      	ldr	r0, [pc, #48]	@ (1005d8f4 <__arm_cp.23_0>)
1005d8c4:	f7ff febe 	bl	1005d644 <llc_get_advertising_set_index>
1005d8c8:	490b      	ldr	r1, [pc, #44]	@ (1005d8f8 <__arm_cp.23_1>)
1005d8ca:	4288      	cmp	r0, r1
1005d8cc:	d110      	bne.n	1005d8f0 <LL_LE_Set_Advertising_Parameters_Default+0x30>
1005d8ce:	466c      	mov	r4, sp
1005d8d0:	2100      	movs	r1, #0
1005d8d2:	7221      	strb	r1, [r4, #8]
1005d8d4:	2001      	movs	r0, #1
1005d8d6:	02c0      	lsls	r0, r0, #11
1005d8d8:	8020      	strh	r0, [r4, #0]
1005d8da:	2007      	movs	r0, #7
1005d8dc:	0200      	lsls	r0, r0, #8
1005d8de:	9001      	str	r0, [sp, #4]
1005d8e0:	4620      	mov	r0, r4
1005d8e2:	3009      	adds	r0, #9
1005d8e4:	2206      	movs	r2, #6
1005d8e6:	f7e8 fbc5 	bl	10046074 <BLEPLAT_MemSet>
1005d8ea:	4620      	mov	r0, r4
1005d8ec:	f7ff ff4a 	bl	1005d784 <LL_LE_Set_Advertising_Parameters>
1005d8f0:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
1005d8f2:	46c0      	nop			@ (mov r8, r8)

1005d8f4 <__arm_cp.23_0>:
1005d8f4:	0000fffc 	.word	0x0000fffc

1005d8f8 <__arm_cp.23_1>:
1005d8f8:	0000ffff 	.word	0x0000ffff

1005d8fc <LL_Set_Extented_Advertising_Enable>:
1005d8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1005d8fe:	b08f      	sub	sp, #60	@ 0x3c
1005d900:	930e      	str	r3, [sp, #56]	@ 0x38
1005d902:	4617      	mov	r7, r2
1005d904:	460d      	mov	r5, r1
1005d906:	4606      	mov	r6, r0
1005d908:	4305      	orrs	r5, r0
1005d90a:	f001 f90f 	bl	1005eb2c <llc_get_linkms_cntxt_p>
1005d90e:	4604      	mov	r4, r0
1005d910:	2d00      	cmp	r5, #0
1005d912:	d007      	beq.n	1005d924 <LL_Set_Extented_Advertising_Enable+0x28>
1005d914:	4638      	mov	r0, r7
1005d916:	f7ff fe95 	bl	1005d644 <llc_get_advertising_set_index>
1005d91a:	49a7      	ldr	r1, [pc, #668]	@ (1005dbb8 <__arm_cp.24_1>)
1005d91c:	4288      	cmp	r0, r1
1005d91e:	d118      	bne.n	1005d952 <LL_Set_Extented_Advertising_Enable+0x56>
1005d920:	2042      	movs	r0, #66	@ 0x42
1005d922:	e04a      	b.n	1005d9ba <LL_Set_Extented_Advertising_Enable+0xbe>
1005d924:	4625      	mov	r5, r4
1005d926:	354d      	adds	r5, #77	@ 0x4d
1005d928:	2600      	movs	r6, #0
1005d92a:	4637      	mov	r7, r6
1005d92c:	960e      	str	r6, [sp, #56]	@ 0x38
1005d92e:	7828      	ldrb	r0, [r5, #0]
1005d930:	4286      	cmp	r6, r0
1005d932:	d20c      	bcs.n	1005d94e <LL_Set_Extented_Advertising_Enable+0x52>
1005d934:	6820      	ldr	r0, [r4, #0]
1005d936:	19c0      	adds	r0, r0, r7
1005d938:	21ce      	movs	r1, #206	@ 0xce
1005d93a:	5c41      	ldrb	r1, [r0, r1]
1005d93c:	2901      	cmp	r1, #1
1005d93e:	d101      	bne.n	1005d944 <LL_Set_Extented_Advertising_Enable+0x48>
1005d940:	f000 f992 	bl	1005dc68 <EADV_stop>
1005d944:	2001      	movs	r0, #1
1005d946:	0200      	lsls	r0, r0, #8
1005d948:	183f      	adds	r7, r7, r0
1005d94a:	1c76      	adds	r6, r6, #1
1005d94c:	e7ef      	b.n	1005d92e <LL_Set_Extented_Advertising_Enable+0x32>
1005d94e:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005d950:	e033      	b.n	1005d9ba <LL_Set_Extented_Advertising_Enable+0xbe>
1005d952:	0201      	lsls	r1, r0, #8
1005d954:	6822      	ldr	r2, [r4, #0]
1005d956:	1854      	adds	r4, r2, r1
1005d958:	21ce      	movs	r1, #206	@ 0xce
1005d95a:	5c61      	ldrb	r1, [r4, r1]
1005d95c:	2e01      	cmp	r6, #1
1005d95e:	d124      	bne.n	1005d9aa <LL_Set_Extented_Advertising_Enable+0xae>
1005d960:	0200      	lsls	r0, r0, #8
1005d962:	1815      	adds	r5, r2, r0
1005d964:	20d6      	movs	r0, #214	@ 0xd6
1005d966:	5c28      	ldrb	r0, [r5, r0]
1005d968:	2701      	movs	r7, #1
1005d96a:	4038      	ands	r0, r7
1005d96c:	2900      	cmp	r1, #0
1005d96e:	d026      	beq.n	1005d9be <LL_Set_Extented_Advertising_Enable+0xc2>
1005d970:	2800      	cmp	r0, #0
1005d972:	d00a      	beq.n	1005d98a <LL_Set_Extented_Advertising_Enable+0x8e>
1005d974:	208c      	movs	r0, #140	@ 0x8c
1005d976:	5828      	ldr	r0, [r5, r0]
1005d978:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1005d97a:	462a      	mov	r2, r5
1005d97c:	328c      	adds	r2, #140	@ 0x8c
1005d97e:	6852      	ldr	r2, [r2, #4]
1005d980:	c105      	stmia	r1!, {r0, r2}
1005d982:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1005d984:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1005d986:	6769      	str	r1, [r5, #116]	@ 0x74
1005d988:	67a8      	str	r0, [r5, #120]	@ 0x78
1005d98a:	2094      	movs	r0, #148	@ 0x94
1005d98c:	5828      	ldr	r0, [r5, r0]
1005d98e:	2600      	movs	r6, #0
1005d990:	2800      	cmp	r0, #0
1005d992:	d008      	beq.n	1005d9a6 <LL_Set_Extented_Advertising_Enable+0xaa>
1005d994:	3594      	adds	r5, #148	@ 0x94
1005d996:	207d      	movs	r0, #125	@ 0x7d
1005d998:	0144      	lsls	r4, r0, #5
1005d99a:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005d99c:	4344      	muls	r4, r0
1005d99e:	f7e8 fc45 	bl	1004622c <BLEPLAT_GetCurrentSysTime>
1005d9a2:	1820      	adds	r0, r4, r0
1005d9a4:	6028      	str	r0, [r5, #0]
1005d9a6:	4630      	mov	r0, r6
1005d9a8:	e007      	b.n	1005d9ba <LL_Set_Extented_Advertising_Enable+0xbe>
1005d9aa:	2000      	movs	r0, #0
1005d9ac:	2901      	cmp	r1, #1
1005d9ae:	d104      	bne.n	1005d9ba <LL_Set_Extented_Advertising_Enable+0xbe>
1005d9b0:	4605      	mov	r5, r0
1005d9b2:	4620      	mov	r0, r4
1005d9b4:	f000 f958 	bl	1005dc68 <EADV_stop>
1005d9b8:	4628      	mov	r0, r5
1005d9ba:	b00f      	add	sp, #60	@ 0x3c
1005d9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005d9be:	2800      	cmp	r0, #0
1005d9c0:	d007      	beq.n	1005d9d2 <LL_Set_Extented_Advertising_Enable+0xd6>
1005d9c2:	208c      	movs	r0, #140	@ 0x8c
1005d9c4:	5828      	ldr	r0, [r5, r0]
1005d9c6:	2800      	cmp	r0, #0
1005d9c8:	d103      	bne.n	1005d9d2 <LL_Set_Extented_Advertising_Enable+0xd6>
1005d9ca:	2090      	movs	r0, #144	@ 0x90
1005d9cc:	5828      	ldr	r0, [r5, r0]
1005d9ce:	2800      	cmp	r0, #0
1005d9d0:	d006      	beq.n	1005d9e0 <LL_Set_Extented_Advertising_Enable+0xe4>
1005d9d2:	20b8      	movs	r0, #184	@ 0xb8
1005d9d4:	5a28      	ldrh	r0, [r5, r0]
1005d9d6:	07c1      	lsls	r1, r0, #31
1005d9d8:	d004      	beq.n	1005d9e4 <LL_Set_Extented_Advertising_Enable+0xe8>
1005d9da:	8de9      	ldrh	r1, [r5, #46]	@ 0x2e
1005d9dc:	29f5      	cmp	r1, #245	@ 0xf5
1005d9de:	d901      	bls.n	1005d9e4 <LL_Set_Extented_Advertising_Enable+0xe8>
1005d9e0:	2012      	movs	r0, #18
1005d9e2:	e7ea      	b.n	1005d9ba <LL_Set_Extented_Advertising_Enable+0xbe>
1005d9e4:	2312      	movs	r3, #18
1005d9e6:	4601      	mov	r1, r0
1005d9e8:	461a      	mov	r2, r3
1005d9ea:	4019      	ands	r1, r3
1005d9ec:	2902      	cmp	r1, #2
1005d9ee:	d103      	bne.n	1005d9f8 <LL_Set_Extented_Advertising_Enable+0xfc>
1005d9f0:	2142      	movs	r1, #66	@ 0x42
1005d9f2:	5a69      	ldrh	r1, [r5, r1]
1005d9f4:	2900      	cmp	r1, #0
1005d9f6:	d040      	beq.n	1005da7a <LL_Set_Extented_Advertising_Enable+0x17e>
1005d9f8:	0700      	lsls	r0, r0, #28
1005d9fa:	d50f      	bpl.n	1005da1c <LL_Set_Extented_Advertising_Enable+0x120>
1005d9fc:	486d      	ldr	r0, [pc, #436]	@ (1005dbb4 <__arm_cp.24_0>)
1005d9fe:	21be      	movs	r1, #190	@ 0xbe
1005da00:	5a69      	ldrh	r1, [r5, r1]
1005da02:	4281      	cmp	r1, r0
1005da04:	d001      	beq.n	1005da0a <LL_Set_Extented_Advertising_Enable+0x10e>
1005da06:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005da08:	e000      	b.n	1005da0c <LL_Set_Extented_Advertising_Enable+0x110>
1005da0a:	2080      	movs	r0, #128	@ 0x80
1005da0c:	2880      	cmp	r0, #128	@ 0x80
1005da0e:	d901      	bls.n	1005da14 <LL_Set_Extented_Advertising_Enable+0x118>
1005da10:	4610      	mov	r0, r2
1005da12:	e7d2      	b.n	1005d9ba <LL_Set_Extented_Advertising_Enable+0xbe>
1005da14:	900e      	str	r0, [sp, #56]	@ 0x38
1005da16:	2800      	cmp	r0, #0
1005da18:	4610      	mov	r0, r2
1005da1a:	d0ce      	beq.n	1005d9ba <LL_Set_Extented_Advertising_Enable+0xbe>
1005da1c:	9814      	ldr	r0, [sp, #80]	@ 0x50
1005da1e:	21ba      	movs	r1, #186	@ 0xba
1005da20:	5268      	strh	r0, [r5, r1]
1005da22:	267d      	movs	r6, #125	@ 0x7d
1005da24:	0171      	lsls	r1, r6, #5
1005da26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005da28:	4351      	muls	r1, r2
1005da2a:	2294      	movs	r2, #148	@ 0x94
1005da2c:	50a9      	str	r1, [r5, r2]
1005da2e:	2800      	cmp	r0, #0
1005da30:	d001      	beq.n	1005da36 <LL_Set_Extented_Advertising_Enable+0x13a>
1005da32:	21cf      	movs	r1, #207	@ 0xcf
1005da34:	546f      	strb	r7, [r5, r1]
1005da36:	21bc      	movs	r1, #188	@ 0xbc
1005da38:	5268      	strh	r0, [r5, r1]
1005da3a:	4620      	mov	r0, r4
1005da3c:	f7f3 ff7e 	bl	1005193c <EADV_start_request_radio_tasks_ucfg>
1005da40:	2800      	cmp	r0, #0
1005da42:	d1ba      	bne.n	1005d9ba <LL_Set_Extented_Advertising_Enable+0xbe>
1005da44:	4629      	mov	r1, r5
1005da46:	31d6      	adds	r1, #214	@ 0xd6
1005da48:	4628      	mov	r0, r5
1005da4a:	3064      	adds	r0, #100	@ 0x64
1005da4c:	462a      	mov	r2, r5
1005da4e:	3254      	adds	r2, #84	@ 0x54
1005da50:	676a      	str	r2, [r5, #116]	@ 0x74
1005da52:	67a8      	str	r0, [r5, #120]	@ 0x78
1005da54:	462b      	mov	r3, r5
1005da56:	3378      	adds	r3, #120	@ 0x78
1005da58:	7809      	ldrb	r1, [r1, #0]
1005da5a:	07c9      	lsls	r1, r1, #31
1005da5c:	930d      	str	r3, [sp, #52]	@ 0x34
1005da5e:	d10e      	bne.n	1005da7e <LL_Set_Extented_Advertising_Enable+0x182>
1005da60:	2100      	movs	r1, #0
1005da62:	6001      	str	r1, [r0, #0]
1005da64:	66a9      	str	r1, [r5, #104]	@ 0x68
1005da66:	4855      	ldr	r0, [pc, #340]	@ (1005dbbc <__arm_cp.24_2>)
1005da68:	6801      	ldr	r1, [r0, #0]
1005da6a:	4620      	mov	r0, r4
1005da6c:	3065      	adds	r0, #101	@ 0x65
1005da6e:	2206      	movs	r2, #6
1005da70:	f7e8 faf0 	bl	10046054 <BLEPLAT_MemCpy>
1005da74:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005da76:	6800      	ldr	r0, [r0, #0]
1005da78:	e008      	b.n	1005da8c <LL_Set_Extented_Advertising_Enable+0x190>
1005da7a:	200c      	movs	r0, #12
1005da7c:	e79d      	b.n	1005d9ba <LL_Set_Extented_Advertising_Enable+0xbe>
1005da7e:	218c      	movs	r1, #140	@ 0x8c
1005da80:	5869      	ldr	r1, [r5, r1]
1005da82:	462a      	mov	r2, r5
1005da84:	328c      	adds	r2, #140	@ 0x8c
1005da86:	6852      	ldr	r2, [r2, #4]
1005da88:	c006      	stmia	r0!, {r1, r2}
1005da8a:	3808      	subs	r0, #8
1005da8c:	4629      	mov	r1, r5
1005da8e:	3194      	adds	r1, #148	@ 0x94
1005da90:	910e      	str	r1, [sp, #56]	@ 0x38
1005da92:	2184      	movs	r1, #132	@ 0x84
1005da94:	5869      	ldr	r1, [r5, r1]
1005da96:	462a      	mov	r2, r5
1005da98:	3284      	adds	r2, #132	@ 0x84
1005da9a:	6852      	ldr	r2, [r2, #4]
1005da9c:	6081      	str	r1, [r0, #8]
1005da9e:	60c2      	str	r2, [r0, #12]
1005daa0:	4620      	mov	r0, r4
1005daa2:	f7ff fe11 	bl	1005d6c8 <llc_eadv_generate_new_rpa_for_one_adv_set>
1005daa6:	2800      	cmp	r0, #0
1005daa8:	960c      	str	r6, [sp, #48]	@ 0x30
1005daaa:	d002      	beq.n	1005dab2 <LL_Set_Extented_Advertising_Enable+0x1b6>
1005daac:	f7fc f80c 	bl	10059ac8 <llc_priv_start_privacy_timer_ucfg_weak>
1005dab0:	e006      	b.n	1005dac0 <LL_Set_Extented_Advertising_Enable+0x1c4>
1005dab2:	4628      	mov	r0, r5
1005dab4:	3074      	adds	r0, #116	@ 0x74
1005dab6:	6801      	ldr	r1, [r0, #0]
1005dab8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1005daba:	681a      	ldr	r2, [r3, #0]
1005dabc:	6002      	str	r2, [r0, #0]
1005dabe:	6019      	str	r1, [r3, #0]
1005dac0:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005dac2:	4626      	mov	r6, r4
1005dac4:	36ce      	adds	r6, #206	@ 0xce
1005dac6:	4628      	mov	r0, r5
1005dac8:	30b8      	adds	r0, #184	@ 0xb8
1005daca:	900d      	str	r0, [sp, #52]	@ 0x34
1005dacc:	6808      	ldr	r0, [r1, #0]
1005dace:	2800      	cmp	r0, #0
1005dad0:	d005      	beq.n	1005dade <LL_Set_Extented_Advertising_Enable+0x1e2>
1005dad2:	f7e8 fbab 	bl	1004622c <BLEPLAT_GetCurrentSysTime>
1005dad6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005dad8:	6811      	ldr	r1, [r2, #0]
1005dada:	1808      	adds	r0, r1, r0
1005dadc:	6010      	str	r0, [r2, #0]
1005dade:	7037      	strb	r7, [r6, #0]
1005dae0:	20c4      	movs	r0, #196	@ 0xc4
1005dae2:	5c29      	ldrb	r1, [r5, r0]
1005dae4:	27d0      	movs	r7, #208	@ 0xd0
1005dae6:	5de8      	ldrb	r0, [r5, r7]
1005dae8:	2281      	movs	r2, #129	@ 0x81
1005daea:	920e      	str	r2, [sp, #56]	@ 0x38
1005daec:	9200      	str	r2, [sp, #0]
1005daee:	462e      	mov	r6, r5
1005daf0:	3614      	adds	r6, #20
1005daf2:	4622      	mov	r2, r4
1005daf4:	4633      	mov	r3, r6
1005daf6:	f7ff fd77 	bl	1005d5e8 <LL_eadv_BLUE_SM>
1005dafa:	5de8      	ldrb	r0, [r5, r7]
1005dafc:	2125      	movs	r1, #37	@ 0x25
1005dafe:	f7e9 ffbc 	bl	10047a7a <BLEPLAT_CNTR_SmSetDataLength>
1005db02:	462f      	mov	r7, r5
1005db04:	37d0      	adds	r7, #208	@ 0xd0
1005db06:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005db08:	8800      	ldrh	r0, [r0, #0]
1005db0a:	06c0      	lsls	r0, r0, #27
1005db0c:	d403      	bmi.n	1005db16 <LL_Set_Extented_Advertising_Enable+0x21a>
1005db0e:	4620      	mov	r0, r4
1005db10:	f000 fd40 	bl	1005e594 <LL_eadv_start_extended_ucfg_weak>
1005db14:	e042      	b.n	1005db9c <LL_Set_Extented_Advertising_Enable+0x2a0>
1005db16:	f7e8 fb89 	bl	1004622c <BLEPLAT_GetCurrentSysTime>
1005db1a:	219c      	movs	r1, #156	@ 0x9c
1005db1c:	910b      	str	r1, [sp, #44]	@ 0x2c
1005db1e:	5068      	str	r0, [r5, r1]
1005db20:	f000 ffee 	bl	1005eb00 <LL_get_tx_common_buffer_p>
1005db24:	9009      	str	r0, [sp, #36]	@ 0x24
1005db26:	f000 fff3 	bl	1005eb10 <LL_get_rx_common_buffer_p>
1005db2a:	900a      	str	r0, [sp, #40]	@ 0x28
1005db2c:	7838      	ldrb	r0, [r7, #0]
1005db2e:	9008      	str	r0, [sp, #32]
1005db30:	2094      	movs	r0, #148	@ 0x94
1005db32:	2100      	movs	r1, #0
1005db34:	910d      	str	r1, [sp, #52]	@ 0x34
1005db36:	460a      	mov	r2, r1
1005db38:	f7e9 fb04 	bl	10047144 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005db3c:	4603      	mov	r3, r0
1005db3e:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005db40:	9000      	str	r0, [sp, #0]
1005db42:	4620      	mov	r0, r4
1005db44:	9908      	ldr	r1, [sp, #32]
1005db46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1005db48:	f7ff fcd3 	bl	1005d4f2 <LL_eadv_Blue_Tx>
1005db4c:	7838      	ldrb	r0, [r7, #0]
1005db4e:	9009      	str	r0, [sp, #36]	@ 0x24
1005db50:	2096      	movs	r0, #150	@ 0x96
1005db52:	2101      	movs	r1, #1
1005db54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1005db56:	f7e9 faf5 	bl	10047144 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005db5a:	4603      	mov	r3, r0
1005db5c:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005db5e:	9000      	str	r0, [sp, #0]
1005db60:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005db62:	9001      	str	r0, [sp, #4]
1005db64:	4630      	mov	r0, r6
1005db66:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005db68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1005db6a:	f7ff fcfd 	bl	1005d568 <LL_eadv_Blue_Rx>
1005db6e:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
1005db70:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005db72:	582a      	ldr	r2, [r5, r0]
1005db74:	7838      	ldrb	r0, [r7, #0]
1005db76:	4b12      	ldr	r3, [pc, #72]	@ (1005dbc0 <__arm_cp.24_3>)
1005db78:	9307      	str	r3, [sp, #28]
1005db7a:	4b12      	ldr	r3, [pc, #72]	@ (1005dbc4 <__arm_cp.24_4>)
1005db7c:	9306      	str	r3, [sp, #24]
1005db7e:	4b12      	ldr	r3, [pc, #72]	@ (1005dbc8 <__arm_cp.24_5>)
1005db80:	9305      	str	r3, [sp, #20]
1005db82:	4b12      	ldr	r3, [pc, #72]	@ (1005dbcc <__arm_cp.24_6>)
1005db84:	9304      	str	r3, [sp, #16]
1005db86:	2314      	movs	r3, #20
1005db88:	9303      	str	r3, [sp, #12]
1005db8a:	231f      	movs	r3, #31
1005db8c:	ae00      	add	r6, sp, #0
1005db8e:	c60e      	stmia	r6!, {r1, r2, r3}
1005db90:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005db92:	00cb      	lsls	r3, r1, #3
1005db94:	4621      	mov	r1, r4
1005db96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005db98:	f001 f84a 	bl	1005ec30 <LL_sched_enable_taskslot>
1005db9c:	249c      	movs	r4, #156	@ 0x9c
1005db9e:	5929      	ldr	r1, [r5, r4]
1005dba0:	7838      	ldrb	r0, [r7, #0]
1005dba2:	f001 f821 	bl	1005ebe8 <LL_sched_set_anchor>
1005dba6:	5928      	ldr	r0, [r5, r4]
1005dba8:	7839      	ldrb	r1, [r7, #0]
1005dbaa:	f001 fad1 	bl	1005f150 <LL_sched_check_and_call_sched>
1005dbae:	2000      	movs	r0, #0
1005dbb0:	e703      	b.n	1005d9ba <LL_Set_Extented_Advertising_Enable+0xbe>
1005dbb2:	46c0      	nop			@ (mov r8, r8)

1005dbb4 <__arm_cp.24_0>:
1005dbb4:	0000fffc 	.word	0x0000fffc

1005dbb8 <__arm_cp.24_1>:
1005dbb8:	0000ffff 	.word	0x0000ffff

1005dbbc <__arm_cp.24_2>:
1005dbbc:	200010a0 	.word	0x200010a0

1005dbc0 <__arm_cp.24_3>:
1005dbc0:	1005de15 	.word	0x1005de15

1005dbc4 <__arm_cp.24_4>:
1005dbc4:	1005e279 	.word	0x1005e279

1005dbc8 <__arm_cp.24_5>:
1005dbc8:	1005e0e9 	.word	0x1005e0e9

1005dbcc <__arm_cp.24_6>:
1005dbcc:	1005de1d 	.word	0x1005de1d

1005dbd0 <LL_Set_Extented_Advertising_Set_Random_Address>:
1005dbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005dbd2:	460c      	mov	r4, r1
1005dbd4:	4606      	mov	r6, r0
1005dbd6:	f000 ffa9 	bl	1005eb2c <llc_get_linkms_cntxt_p>
1005dbda:	4607      	mov	r7, r0
1005dbdc:	4630      	mov	r0, r6
1005dbde:	f7ff fd31 	bl	1005d644 <llc_get_advertising_set_index>
1005dbe2:	4605      	mov	r5, r0
1005dbe4:	4816      	ldr	r0, [pc, #88]	@ (1005dc40 <__arm_cp.25_0>)
1005dbe6:	4285      	cmp	r5, r0
1005dbe8:	d027      	beq.n	1005dc3a <LL_Set_Extented_Advertising_Set_Random_Address+0x6a>
1005dbea:	0228      	lsls	r0, r5, #8
1005dbec:	683f      	ldr	r7, [r7, #0]
1005dbee:	1838      	adds	r0, r7, r0
1005dbf0:	21be      	movs	r1, #190	@ 0xbe
1005dbf2:	5246      	strh	r6, [r0, r1]
1005dbf4:	21b8      	movs	r1, #184	@ 0xb8
1005dbf6:	5c40      	ldrb	r0, [r0, r1]
1005dbf8:	07c0      	lsls	r0, r0, #31
1005dbfa:	d007      	beq.n	1005dc0c <LL_Set_Extented_Advertising_Set_Random_Address+0x3c>
1005dbfc:	0228      	lsls	r0, r5, #8
1005dbfe:	1838      	adds	r0, r7, r0
1005dc00:	21ce      	movs	r1, #206	@ 0xce
1005dc02:	5c40      	ldrb	r0, [r0, r1]
1005dc04:	2801      	cmp	r0, #1
1005dc06:	d101      	bne.n	1005dc0c <LL_Set_Extented_Advertising_Set_Random_Address+0x3c>
1005dc08:	250c      	movs	r5, #12
1005dc0a:	e017      	b.n	1005dc3c <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1005dc0c:	480d      	ldr	r0, [pc, #52]	@ (1005dc44 <__arm_cp.25_1>)
1005dc0e:	6800      	ldr	r0, [r0, #0]
1005dc10:	3056      	adds	r0, #86	@ 0x56
1005dc12:	2606      	movs	r6, #6
1005dc14:	4621      	mov	r1, r4
1005dc16:	4632      	mov	r2, r6
1005dc18:	f7e8 fa1c 	bl	10046054 <BLEPLAT_MemCpy>
1005dc1c:	0228      	lsls	r0, r5, #8
1005dc1e:	1838      	adds	r0, r7, r0
1005dc20:	218c      	movs	r1, #140	@ 0x8c
1005dc22:	2201      	movs	r2, #1
1005dc24:	5042      	str	r2, [r0, r1]
1005dc26:	4601      	mov	r1, r0
1005dc28:	318c      	adds	r1, #140	@ 0x8c
1005dc2a:	2500      	movs	r5, #0
1005dc2c:	604d      	str	r5, [r1, #4]
1005dc2e:	308d      	adds	r0, #141	@ 0x8d
1005dc30:	4621      	mov	r1, r4
1005dc32:	4632      	mov	r2, r6
1005dc34:	f7e8 fa0e 	bl	10046054 <BLEPLAT_MemCpy>
1005dc38:	e000      	b.n	1005dc3c <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1005dc3a:	2512      	movs	r5, #18
1005dc3c:	4628      	mov	r0, r5
1005dc3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005dc40 <__arm_cp.25_0>:
1005dc40:	0000ffff 	.word	0x0000ffff

1005dc44 <__arm_cp.25_1>:
1005dc44:	200010f4 	.word	0x200010f4

1005dc48 <LL_eadv_update_did>:
1005dc48:	b510      	push	{r4, lr}
1005dc4a:	4604      	mov	r4, r0
1005dc4c:	2000      	movs	r0, #0
1005dc4e:	f004 ff4a 	bl	10062ae6 <Hal_Get_Random_Number>
1005dc52:	4904      	ldr	r1, [pc, #16]	@ (1005dc64 <__arm_cp.27_0>)
1005dc54:	4001      	ands	r1, r0
1005dc56:	8820      	ldrh	r0, [r4, #0]
1005dc58:	1a40      	subs	r0, r0, r1
1005dc5a:	4242      	negs	r2, r0
1005dc5c:	4142      	adcs	r2, r0
1005dc5e:	404a      	eors	r2, r1
1005dc60:	8022      	strh	r2, [r4, #0]
1005dc62:	bd10      	pop	{r4, pc}

1005dc64 <__arm_cp.27_0>:
1005dc64:	00000fff 	.word	0x00000fff

1005dc68 <EADV_stop>:
1005dc68:	b5b0      	push	{r4, r5, r7, lr}
1005dc6a:	4604      	mov	r4, r0
1005dc6c:	f3ef 8010 	mrs	r0, PRIMASK
1005dc70:	b672      	cpsid	i
1005dc72:	4625      	mov	r5, r4
1005dc74:	35ce      	adds	r5, #206	@ 0xce
1005dc76:	78a8      	ldrb	r0, [r5, #2]
1005dc78:	f000 ffc8 	bl	1005ec0c <LL_sched_set_cancel_request>
1005dc7c:	20d1      	movs	r0, #209	@ 0xd1
1005dc7e:	5c20      	ldrb	r0, [r4, r0]
1005dc80:	f000 ffc4 	bl	1005ec0c <LL_sched_set_cancel_request>
1005dc84:	b662      	cpsie	i
1005dc86:	78a8      	ldrb	r0, [r5, #2]
1005dc88:	f001 fa72 	bl	1005f170 <LL_sched_check_and_wait_sched>
1005dc8c:	20ce      	movs	r0, #206	@ 0xce
1005dc8e:	2100      	movs	r1, #0
1005dc90:	5221      	strh	r1, [r4, r0]
1005dc92:	7aa8      	ldrb	r0, [r5, #10]
1005dc94:	28ff      	cmp	r0, #255	@ 0xff
1005dc96:	d001      	beq.n	1005dc9c <EADV_stop+0x34>
1005dc98:	f7fb f851 	bl	10058d3e <llc_conn_release_conn_idx>
1005dc9c:	20ff      	movs	r0, #255	@ 0xff
1005dc9e:	72a8      	strb	r0, [r5, #10]
1005dca0:	7a28      	ldrb	r0, [r5, #8]
1005dca2:	0780      	lsls	r0, r0, #30
1005dca4:	d501      	bpl.n	1005dcaa <EADV_stop+0x42>
1005dca6:	f7fb ff10 	bl	10059aca <llc_priv_stop_privacy_timer_ucfg_weak>
1005dcaa:	bdb0      	pop	{r4, r5, r7, pc}

1005dcac <LL_Set_Advertising_Set_Random_Address>:
1005dcac:	b510      	push	{r4, lr}
1005dcae:	4604      	mov	r4, r0
1005dcb0:	f7f9 fd29 	bl	10057706 <scan_csr_ucfg_weak>
1005dcb4:	2801      	cmp	r0, #1
1005dcb6:	d105      	bne.n	1005dcc4 <LL_Set_Advertising_Set_Random_Address+0x18>
1005dcb8:	f7fb ff0a 	bl	10059ad0 <llc_scan_get_cntxt_p>
1005dcbc:	21eb      	movs	r1, #235	@ 0xeb
1005dcbe:	5c40      	ldrb	r0, [r0, r1]
1005dcc0:	07c0      	lsls	r0, r0, #31
1005dcc2:	d106      	bne.n	1005dcd2 <LL_Set_Advertising_Set_Random_Address+0x26>
1005dcc4:	f7ff fdfc 	bl	1005d8c0 <LL_LE_Set_Advertising_Parameters_Default>
1005dcc8:	4803      	ldr	r0, [pc, #12]	@ (1005dcd8 <__arm_cp.29_0>)
1005dcca:	4621      	mov	r1, r4
1005dccc:	f7ff ff80 	bl	1005dbd0 <LL_Set_Extented_Advertising_Set_Random_Address>
1005dcd0:	bd10      	pop	{r4, pc}
1005dcd2:	200c      	movs	r0, #12
1005dcd4:	bd10      	pop	{r4, pc}
1005dcd6:	46c0      	nop			@ (mov r8, r8)

1005dcd8 <__arm_cp.29_0>:
1005dcd8:	0000fffc 	.word	0x0000fffc

1005dcdc <ll_set_advertising_data_ptr>:
1005dcdc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005dcde:	9301      	str	r3, [sp, #4]
1005dce0:	4614      	mov	r4, r2
1005dce2:	9102      	str	r1, [sp, #8]
1005dce4:	4605      	mov	r5, r0
1005dce6:	f000 ff21 	bl	1005eb2c <llc_get_linkms_cntxt_p>
1005dcea:	4607      	mov	r7, r0
1005dcec:	4834      	ldr	r0, [pc, #208]	@ (1005ddc0 <__arm_cp.33_0>)
1005dcee:	4285      	cmp	r5, r0
1005dcf0:	d101      	bne.n	1005dcf6 <ll_set_advertising_data_ptr+0x1a>
1005dcf2:	201f      	movs	r0, #31
1005dcf4:	e007      	b.n	1005dd06 <ll_set_advertising_data_ptr+0x2a>
1005dcf6:	2001      	movs	r0, #1
1005dcf8:	2102      	movs	r1, #2
1005dcfa:	f7f9 fb1f 	bl	1005733c <hci_get_set_legacy_ext_flag>
1005dcfe:	4606      	mov	r6, r0
1005dd00:	2800      	cmp	r0, #0
1005dd02:	d111      	bne.n	1005dd28 <ll_set_advertising_data_ptr+0x4c>
1005dd04:	482f      	ldr	r0, [pc, #188]	@ (1005ddc4 <__arm_cp.33_1>)
1005dd06:	2612      	movs	r6, #18
1005dd08:	42a0      	cmp	r0, r4
1005dd0a:	d30d      	bcc.n	1005dd28 <ll_set_advertising_data_ptr+0x4c>
1005dd0c:	9600      	str	r6, [sp, #0]
1005dd0e:	4628      	mov	r0, r5
1005dd10:	f7ff fc98 	bl	1005d644 <llc_get_advertising_set_index>
1005dd14:	0200      	lsls	r0, r0, #8
1005dd16:	6839      	ldr	r1, [r7, #0]
1005dd18:	180f      	adds	r7, r1, r0
1005dd1a:	4620      	mov	r0, r4
1005dd1c:	4639      	mov	r1, r7
1005dd1e:	f000 fc37 	bl	1005e590 <llc_eadv_max_supported_data_check_ucfg_weak>
1005dd22:	4606      	mov	r6, r0
1005dd24:	2800      	cmp	r0, #0
1005dd26:	d001      	beq.n	1005dd2c <ll_set_advertising_data_ptr+0x50>
1005dd28:	4630      	mov	r0, r6
1005dd2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005dd2c:	20ce      	movs	r0, #206	@ 0xce
1005dd2e:	5c39      	ldrb	r1, [r7, r0]
1005dd30:	2038      	movs	r0, #56	@ 0x38
1005dd32:	5c38      	ldrb	r0, [r7, r0]
1005dd34:	9a02      	ldr	r2, [sp, #8]
1005dd36:	2a04      	cmp	r2, #4
1005dd38:	d111      	bne.n	1005dd5e <ll_set_advertising_data_ptr+0x82>
1005dd3a:	2900      	cmp	r1, #0
1005dd3c:	d03d      	beq.n	1005ddba <ll_set_advertising_data_ptr+0xde>
1005dd3e:	2800      	cmp	r0, #0
1005dd40:	9e00      	ldr	r6, [sp, #0]
1005dd42:	d0f1      	beq.n	1005dd28 <ll_set_advertising_data_ptr+0x4c>
1005dd44:	481e      	ldr	r0, [pc, #120]	@ (1005ddc0 <__arm_cp.33_0>)
1005dd46:	4285      	cmp	r5, r0
1005dd48:	d1ee      	bne.n	1005dd28 <ll_set_advertising_data_ptr+0x4c>
1005dd4a:	8df8      	ldrh	r0, [r7, #46]	@ 0x2e
1005dd4c:	2800      	cmp	r0, #0
1005dd4e:	d0eb      	beq.n	1005dd28 <ll_set_advertising_data_ptr+0x4c>
1005dd50:	20b8      	movs	r0, #184	@ 0xb8
1005dd52:	5a38      	ldrh	r0, [r7, r0]
1005dd54:	2110      	movs	r1, #16
1005dd56:	4001      	ands	r1, r0
1005dd58:	4321      	orrs	r1, r4
1005dd5a:	d1e5      	bne.n	1005dd28 <ll_set_advertising_data_ptr+0x4c>
1005dd5c:	e00d      	b.n	1005dd7a <ll_set_advertising_data_ptr+0x9e>
1005dd5e:	463d      	mov	r5, r7
1005dd60:	3538      	adds	r5, #56	@ 0x38
1005dd62:	2900      	cmp	r1, #0
1005dd64:	d016      	beq.n	1005dd94 <ll_set_advertising_data_ptr+0xb8>
1005dd66:	2a03      	cmp	r2, #3
1005dd68:	d107      	bne.n	1005dd7a <ll_set_advertising_data_ptr+0x9e>
1005dd6a:	2002      	movs	r0, #2
1005dd6c:	7028      	strb	r0, [r5, #0]
1005dd6e:	86fc      	strh	r4, [r7, #54]	@ 0x36
1005dd70:	2000      	movs	r0, #0
1005dd72:	86b8      	strh	r0, [r7, #52]	@ 0x34
1005dd74:	9801      	ldr	r0, [sp, #4]
1005dd76:	6338      	str	r0, [r7, #48]	@ 0x30
1005dd78:	e003      	b.n	1005dd82 <ll_set_advertising_data_ptr+0xa6>
1005dd7a:	4638      	mov	r0, r7
1005dd7c:	30b6      	adds	r0, #182	@ 0xb6
1005dd7e:	f7ff ff63 	bl	1005dc48 <LL_eadv_update_did>
1005dd82:	20da      	movs	r0, #218	@ 0xda
1005dd84:	5c38      	ldrb	r0, [r7, r0]
1005dd86:	2600      	movs	r6, #0
1005dd88:	07c0      	lsls	r0, r0, #31
1005dd8a:	d0cd      	beq.n	1005dd28 <ll_set_advertising_data_ptr+0x4c>
1005dd8c:	4638      	mov	r0, r7
1005dd8e:	f7ff fc9b 	bl	1005d6c8 <llc_eadv_generate_new_rpa_for_one_adv_set>
1005dd92:	e7c9      	b.n	1005dd28 <ll_set_advertising_data_ptr+0x4c>
1005dd94:	9702      	str	r7, [sp, #8]
1005dd96:	463e      	mov	r6, r7
1005dd98:	3628      	adds	r6, #40	@ 0x28
1005dd9a:	2800      	cmp	r0, #0
1005dd9c:	9f01      	ldr	r7, [sp, #4]
1005dd9e:	d004      	beq.n	1005ddaa <ll_set_advertising_data_ptr+0xce>
1005dda0:	6831      	ldr	r1, [r6, #0]
1005dda2:	20a1      	movs	r0, #161	@ 0xa1
1005dda4:	463a      	mov	r2, r7
1005dda6:	f005 ffe9 	bl	10063d7c <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1005ddaa:	6037      	str	r7, [r6, #0]
1005ddac:	2001      	movs	r0, #1
1005ddae:	7028      	strb	r0, [r5, #0]
1005ddb0:	9802      	ldr	r0, [sp, #8]
1005ddb2:	85c4      	strh	r4, [r0, #46]	@ 0x2e
1005ddb4:	2600      	movs	r6, #0
1005ddb6:	8586      	strh	r6, [r0, #44]	@ 0x2c
1005ddb8:	e7b6      	b.n	1005dd28 <ll_set_advertising_data_ptr+0x4c>
1005ddba:	9e00      	ldr	r6, [sp, #0]
1005ddbc:	e7b4      	b.n	1005dd28 <ll_set_advertising_data_ptr+0x4c>
1005ddbe:	46c0      	nop			@ (mov r8, r8)

1005ddc0 <__arm_cp.33_0>:
1005ddc0:	0000fffc 	.word	0x0000fffc

1005ddc4 <__arm_cp.33_1>:
1005ddc4:	00000672 	.word	0x00000672

1005ddc8 <ll_set_legacy_advertising_data_ptr>:
1005ddc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005ddca:	460c      	mov	r4, r1
1005ddcc:	4605      	mov	r5, r0
1005ddce:	f000 fead 	bl	1005eb2c <llc_get_linkms_cntxt_p>
1005ddd2:	4607      	mov	r7, r0
1005ddd4:	f7ff fd74 	bl	1005d8c0 <LL_LE_Set_Advertising_Parameters_Default>
1005ddd8:	4e0c      	ldr	r6, [pc, #48]	@ (1005de0c <__arm_cp.36_0>)
1005ddda:	4630      	mov	r0, r6
1005dddc:	f7ff fc32 	bl	1005d644 <llc_get_advertising_set_index>
1005dde0:	490b      	ldr	r1, [pc, #44]	@ (1005de10 <__arm_cp.36_1>)
1005dde2:	4288      	cmp	r0, r1
1005dde4:	d108      	bne.n	1005ddf8 <ll_set_legacy_advertising_data_ptr+0x30>
1005dde6:	f7ff fd3b 	bl	1005d860 <LL_Context_ReturnFree>
1005ddea:	28ff      	cmp	r0, #255	@ 0xff
1005ddec:	d00b      	beq.n	1005de06 <ll_set_legacy_advertising_data_ptr+0x3e>
1005ddee:	0200      	lsls	r0, r0, #8
1005ddf0:	6839      	ldr	r1, [r7, #0]
1005ddf2:	1808      	adds	r0, r1, r0
1005ddf4:	21be      	movs	r1, #190	@ 0xbe
1005ddf6:	5246      	strh	r6, [r0, r1]
1005ddf8:	2103      	movs	r1, #3
1005ddfa:	4630      	mov	r0, r6
1005ddfc:	462a      	mov	r2, r5
1005ddfe:	4623      	mov	r3, r4
1005de00:	f7ff ff6c 	bl	1005dcdc <ll_set_advertising_data_ptr>
1005de04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005de06:	2001      	movs	r0, #1
1005de08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005de0a:	46c0      	nop			@ (mov r8, r8)

1005de0c <__arm_cp.36_0>:
1005de0c:	0000fffc 	.word	0x0000fffc

1005de10 <__arm_cp.36_1>:
1005de10:	0000ffff 	.word	0x0000ffff

1005de14 <ADV_cancelslot>:
1005de14:	21d0      	movs	r1, #208	@ 0xd0
1005de16:	22ff      	movs	r2, #255	@ 0xff
1005de18:	5442      	strb	r2, [r0, r1]
1005de1a:	4770      	bx	lr

1005de1c <ADV_skiproutine>:
1005de1c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005de1e:	b08d      	sub	sp, #52	@ 0x34
1005de20:	4607      	mov	r7, r0
1005de22:	20d0      	movs	r0, #208	@ 0xd0
1005de24:	5c38      	ldrb	r0, [r7, r0]
1005de26:	232c      	movs	r3, #44	@ 0x2c
1005de28:	4358      	muls	r0, r3
1005de2a:	4a5f      	ldr	r2, [pc, #380]	@ (1005dfa8 <__arm_cp.40_0>)
1005de2c:	6812      	ldr	r2, [r2, #0]
1005de2e:	1810      	adds	r0, r2, r0
1005de30:	7d80      	ldrb	r0, [r0, #22]
1005de32:	463c      	mov	r4, r7
1005de34:	3494      	adds	r4, #148	@ 0x94
1005de36:	463a      	mov	r2, r7
1005de38:	32b4      	adds	r2, #180	@ 0xb4
1005de3a:	9203      	str	r2, [sp, #12]
1005de3c:	463a      	mov	r2, r7
1005de3e:	32d6      	adds	r2, #214	@ 0xd6
1005de40:	9202      	str	r2, [sp, #8]
1005de42:	2814      	cmp	r0, #20
1005de44:	9301      	str	r3, [sp, #4]
1005de46:	d10a      	bne.n	1005de5e <ADV_skiproutine+0x42>
1005de48:	f7e8 f9f0 	bl	1004622c <BLEPLAT_GetCurrentSysTime>
1005de4c:	4605      	mov	r5, r0
1005de4e:	f000 feab 	bl	1005eba8 <LL_sched_engine_return_actual_scheduler_margin>
1005de52:	9b03      	ldr	r3, [sp, #12]
1005de54:	1828      	adds	r0, r5, r0
1005de56:	3032      	adds	r0, #50	@ 0x32
1005de58:	60a0      	str	r0, [r4, #8]
1005de5a:	2501      	movs	r5, #1
1005de5c:	e01b      	b.n	1005de96 <ADV_skiproutine+0x7a>
1005de5e:	68a2      	ldr	r2, [r4, #8]
1005de60:	1856      	adds	r6, r2, r1
1005de62:	2500      	movs	r5, #0
1005de64:	4630      	mov	r0, r6
1005de66:	4611      	mov	r1, r2
1005de68:	f000 fe9a 	bl	1005eba0 <LL_sched_time_t1_ge_t2>
1005de6c:	2800      	cmp	r0, #0
1005de6e:	d005      	beq.n	1005de7c <ADV_skiproutine+0x60>
1005de70:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
1005de72:	68a1      	ldr	r1, [r4, #8]
1005de74:	180a      	adds	r2, r1, r0
1005de76:	60a2      	str	r2, [r4, #8]
1005de78:	1c6d      	adds	r5, r5, #1
1005de7a:	e7f3      	b.n	1005de64 <ADV_skiproutine+0x48>
1005de7c:	9b03      	ldr	r3, [sp, #12]
1005de7e:	8898      	ldrh	r0, [r3, #4]
1005de80:	0700      	lsls	r0, r0, #28
1005de82:	d408      	bmi.n	1005de96 <ADV_skiproutine+0x7a>
1005de84:	2001      	movs	r0, #1
1005de86:	f004 fe35 	bl	10062af4 <Hal_Get_Random_Number32>
1005de8a:	9b03      	ldr	r3, [sp, #12]
1005de8c:	4947      	ldr	r1, [pc, #284]	@ (1005dfac <__arm_cp.40_1>)
1005de8e:	4001      	ands	r1, r0
1005de90:	68a0      	ldr	r0, [r4, #8]
1005de92:	1840      	adds	r0, r0, r1
1005de94:	60a0      	str	r0, [r4, #8]
1005de96:	8898      	ldrh	r0, [r3, #4]
1005de98:	2103      	movs	r1, #3
1005de9a:	4001      	ands	r1, r0
1005de9c:	1e48      	subs	r0, r1, #1
1005de9e:	4181      	sbcs	r1, r0
1005dea0:	0048      	lsls	r0, r1, #1
1005dea2:	8018      	strh	r0, [r3, #0]
1005dea4:	7b98      	ldrb	r0, [r3, #14]
1005dea6:	2201      	movs	r2, #1
1005dea8:	4601      	mov	r1, r0
1005deaa:	9200      	str	r2, [sp, #0]
1005deac:	4011      	ands	r1, r2
1005deae:	0782      	lsls	r2, r0, #30
1005deb0:	0fd2      	lsrs	r2, r2, #31
1005deb2:	1889      	adds	r1, r1, r2
1005deb4:	0740      	lsls	r0, r0, #29
1005deb6:	0fc0      	lsrs	r0, r0, #31
1005deb8:	1808      	adds	r0, r1, r0
1005deba:	1e40      	subs	r0, r0, #1
1005debc:	7798      	strb	r0, [r3, #30]
1005debe:	4638      	mov	r0, r7
1005dec0:	f000 f87a 	bl	1005dfb8 <UTIL_u8GetNextAdvChannel>
1005dec4:	4601      	mov	r1, r0
1005dec6:	9803      	ldr	r0, [sp, #12]
1005dec8:	7f00      	ldrb	r0, [r0, #28]
1005deca:	f7e9 fe00 	bl	10047ace <BLEPLAT_CNTR_SmSetRemapChan>
1005dece:	9803      	ldr	r0, [sp, #12]
1005ded0:	7f00      	ldrb	r0, [r0, #28]
1005ded2:	f7e9 febb 	bl	10047c4c <BLEPLAT_CNTR_SmSetTxMode>
1005ded6:	2600      	movs	r6, #0
1005ded8:	9802      	ldr	r0, [sp, #8]
1005deda:	7146      	strb	r6, [r0, #5]
1005dedc:	4638      	mov	r0, r7
1005dede:	3028      	adds	r0, #40	@ 0x28
1005dee0:	f7ff faf6 	bl	1005d4d0 <LL_eadv_switchbackupdata_data_struc>
1005dee4:	4638      	mov	r0, r7
1005dee6:	303c      	adds	r0, #60	@ 0x3c
1005dee8:	f7ff faf2 	bl	1005d4d0 <LL_eadv_switchbackupdata_data_struc>
1005deec:	9b03      	ldr	r3, [sp, #12]
1005deee:	68a1      	ldr	r1, [r4, #8]
1005def0:	6820      	ldr	r0, [r4, #0]
1005def2:	88da      	ldrh	r2, [r3, #6]
1005def4:	2a00      	cmp	r2, #0
1005def6:	d102      	bne.n	1005defe <ADV_skiproutine+0xe2>
1005def8:	7eda      	ldrb	r2, [r3, #27]
1005defa:	2a01      	cmp	r2, #1
1005defc:	d003      	beq.n	1005df06 <ADV_skiproutine+0xea>
1005defe:	4288      	cmp	r0, r1
1005df00:	da4a      	bge.n	1005df98 <ADV_skiproutine+0x17c>
1005df02:	2800      	cmp	r0, #0
1005df04:	d048      	beq.n	1005df98 <ADV_skiproutine+0x17c>
1005df06:	7e98      	ldrb	r0, [r3, #26]
1005df08:	2800      	cmp	r0, #0
1005df0a:	d045      	beq.n	1005df98 <ADV_skiproutine+0x17c>
1005df0c:	8898      	ldrh	r0, [r3, #4]
1005df0e:	0700      	lsls	r0, r0, #28
1005df10:	d51e      	bpl.n	1005df50 <ADV_skiproutine+0x134>
1005df12:	a90b      	add	r1, sp, #44	@ 0x2c
1005df14:	808e      	strh	r6, [r1, #4]
1005df16:	960b      	str	r6, [sp, #44]	@ 0x2c
1005df18:	a804      	add	r0, sp, #16
1005df1a:	9a00      	ldr	r2, [sp, #0]
1005df1c:	7642      	strb	r2, [r0, #25]
1005df1e:	223c      	movs	r2, #60	@ 0x3c
1005df20:	7682      	strb	r2, [r0, #26]
1005df22:	22ff      	movs	r2, #255	@ 0xff
1005df24:	7582      	strb	r2, [r0, #22]
1005df26:	81c6      	strh	r6, [r0, #14]
1005df28:	4a21      	ldr	r2, [pc, #132]	@ (1005dfb0 <__arm_cp.40_2>)
1005df2a:	8282      	strh	r2, [r0, #20]
1005df2c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
1005df2e:	7a13      	ldrb	r3, [r2, #8]
1005df30:	7603      	strb	r3, [r0, #24]
1005df32:	8186      	strh	r6, [r0, #12]
1005df34:	75c6      	strb	r6, [r0, #23]
1005df36:	9105      	str	r1, [sp, #20]
1005df38:	3209      	adds	r2, #9
1005df3a:	9204      	str	r2, [sp, #16]
1005df3c:	9608      	str	r6, [sp, #32]
1005df3e:	9106      	str	r1, [sp, #24]
1005df40:	f7fa fc64 	bl	1005880c <llc_conn_push_connection_complete_event>
1005df44:	9802      	ldr	r0, [sp, #8]
1005df46:	7800      	ldrb	r0, [r0, #0]
1005df48:	0780      	lsls	r0, r0, #30
1005df4a:	d501      	bpl.n	1005df50 <ADV_skiproutine+0x134>
1005df4c:	f7fb fdbd 	bl	10059aca <llc_priv_stop_privacy_timer_ucfg_weak>
1005df50:	2002      	movs	r0, #2
1005df52:	f7f9 fa01 	bl	10057358 <hci_check_legacy_ext_flag>
1005df56:	2801      	cmp	r0, #1
1005df58:	d119      	bne.n	1005df8e <ADV_skiproutine+0x172>
1005df5a:	9b03      	ldr	r3, [sp, #12]
1005df5c:	88da      	ldrh	r2, [r3, #6]
1005df5e:	2a00      	cmp	r2, #0
1005df60:	d001      	beq.n	1005df66 <ADV_skiproutine+0x14a>
1005df62:	203c      	movs	r0, #60	@ 0x3c
1005df64:	e000      	b.n	1005df68 <ADV_skiproutine+0x14c>
1005df66:	2043      	movs	r0, #67	@ 0x43
1005df68:	9000      	str	r0, [sp, #0]
1005df6a:	4812      	ldr	r0, [pc, #72]	@ (1005dfb4 <__arm_cp.40_3>)
1005df6c:	6800      	ldr	r0, [r0, #0]
1005df6e:	9901      	ldr	r1, [sp, #4]
1005df70:	5c40      	ldrb	r0, [r0, r1]
1005df72:	0100      	lsls	r0, r0, #4
1005df74:	43c0      	mvns	r0, r0
1005df76:	4619      	mov	r1, r3
1005df78:	23a1      	movs	r3, #161	@ 0xa1
1005df7a:	4303      	orrs	r3, r0
1005df7c:	20b1      	movs	r0, #177	@ 0xb1
1005df7e:	4018      	ands	r0, r3
1005df80:	7a0b      	ldrb	r3, [r1, #8]
1005df82:	1a9a      	subs	r2, r3, r2
1005df84:	b2d3      	uxtb	r3, r2
1005df86:	7a8a      	ldrb	r2, [r1, #10]
1005df88:	9900      	ldr	r1, [sp, #0]
1005df8a:	f000 f85d 	bl	1005e048 <hci_le_advertising_set_terminated_event_push>
1005df8e:	4638      	mov	r0, r7
1005df90:	f000 f894 	bl	1005e0bc <EADV_stop_isr>
1005df94:	68a1      	ldr	r1, [r4, #8]
1005df96:	9b03      	ldr	r3, [sp, #12]
1005df98:	7f18      	ldrb	r0, [r3, #28]
1005df9a:	f000 fe25 	bl	1005ebe8 <LL_sched_set_anchor>
1005df9e:	9802      	ldr	r0, [sp, #8]
1005dfa0:	7146      	strb	r6, [r0, #5]
1005dfa2:	4628      	mov	r0, r5
1005dfa4:	b00d      	add	sp, #52	@ 0x34
1005dfa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005dfa8 <__arm_cp.40_0>:
1005dfa8:	200010fc 	.word	0x200010fc

1005dfac <__arm_cp.40_1>:
1005dfac:	00000fff 	.word	0x00000fff

1005dfb0 <__arm_cp.40_2>:
1005dfb0:	0000ffff 	.word	0x0000ffff

1005dfb4 <__arm_cp.40_3>:
1005dfb4:	200010a0 	.word	0x200010a0

1005dfb8 <UTIL_u8GetNextAdvChannel>:
1005dfb8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005dfba:	4604      	mov	r4, r0
1005dfbc:	20c2      	movs	r0, #194	@ 0xc2
1005dfbe:	5c27      	ldrb	r7, [r4, r0]
1005dfc0:	2501      	movs	r5, #1
1005dfc2:	403d      	ands	r5, r7
1005dfc4:	07ba      	lsls	r2, r7, #30
1005dfc6:	0fd0      	lsrs	r0, r2, #31
1005dfc8:	1828      	adds	r0, r5, r0
1005dfca:	0779      	lsls	r1, r7, #29
1005dfcc:	0fc9      	lsrs	r1, r1, #31
1005dfce:	1840      	adds	r0, r0, r1
1005dfd0:	1e40      	subs	r0, r0, #1
1005dfd2:	b2c0      	uxtb	r0, r0
1005dfd4:	34c2      	adds	r4, #194	@ 0xc2
1005dfd6:	7c26      	ldrb	r6, [r4, #16]
1005dfd8:	42b0      	cmp	r0, r6
1005dfda:	d10f      	bne.n	1005dffc <UTIL_u8GetNextAdvChannel+0x44>
1005dfdc:	9201      	str	r2, [sp, #4]
1005dfde:	2001      	movs	r0, #1
1005dfe0:	9002      	str	r0, [sp, #8]
1005dfe2:	f004 fd80 	bl	10062ae6 <Hal_Get_Random_Number>
1005dfe6:	2e01      	cmp	r6, #1
1005dfe8:	d00a      	beq.n	1005e000 <UTIL_u8GetNextAdvChannel+0x48>
1005dfea:	2e02      	cmp	r6, #2
1005dfec:	d10e      	bne.n	1005e00c <UTIL_u8GetNextAdvChannel+0x54>
1005dfee:	b2c0      	uxtb	r0, r0
1005dff0:	2106      	movs	r1, #6
1005dff2:	f7e3 f9af 	bl	10041354 <__aeabi_uidivmod>
1005dff6:	a012      	add	r0, pc, #72	@ (adr r0, 1005e040 <UTIL_u8GetNextAdvChannel+0x88>)
1005dff8:	5c40      	ldrb	r0, [r0, r1]
1005dffa:	e012      	b.n	1005e022 <UTIL_u8GetNextAdvChannel+0x6a>
1005dffc:	7c60      	ldrb	r0, [r4, #17]
1005dffe:	e011      	b.n	1005e024 <UTIL_u8GetNextAdvChannel+0x6c>
1005e000:	9902      	ldr	r1, [sp, #8]
1005e002:	4008      	ands	r0, r1
1005e004:	2d00      	cmp	r5, #0
1005e006:	d104      	bne.n	1005e012 <UTIL_u8GetNextAdvChannel+0x5a>
1005e008:	a10c      	add	r1, pc, #48	@ (adr r1, 1005e03c <UTIL_u8GetNextAdvChannel+0x84>)
1005e00a:	e008      	b.n	1005e01e <UTIL_u8GetNextAdvChannel+0x66>
1005e00c:	08b8      	lsrs	r0, r7, #2
1005e00e:	1a38      	subs	r0, r7, r0
1005e010:	e007      	b.n	1005e022 <UTIL_u8GetNextAdvChannel+0x6a>
1005e012:	9901      	ldr	r1, [sp, #4]
1005e014:	2900      	cmp	r1, #0
1005e016:	d401      	bmi.n	1005e01c <UTIL_u8GetNextAdvChannel+0x64>
1005e018:	a107      	add	r1, pc, #28	@ (adr r1, 1005e038 <UTIL_u8GetNextAdvChannel+0x80>)
1005e01a:	e000      	b.n	1005e01e <UTIL_u8GetNextAdvChannel+0x66>
1005e01c:	a105      	add	r1, pc, #20	@ (adr r1, 1005e034 <UTIL_u8GetNextAdvChannel+0x7c>)
1005e01e:	1808      	adds	r0, r1, r0
1005e020:	7800      	ldrb	r0, [r0, #0]
1005e022:	7460      	strb	r0, [r4, #17]
1005e024:	0071      	lsls	r1, r6, #1
1005e026:	b2c2      	uxtb	r2, r0
1005e028:	40ca      	lsrs	r2, r1
1005e02a:	2003      	movs	r0, #3
1005e02c:	4010      	ands	r0, r2
1005e02e:	3024      	adds	r0, #36	@ 0x24
1005e030:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005e032:	46c0      	nop			@ (mov r8, r8)
1005e034:	00000906 	.word	0x00000906
1005e038:	00000d07 	.word	0x00000d07
1005e03c:	00000e0b 	.word	0x00000e0b
1005e040:	2d271e1b 	.word	0x2d271e1b
1005e044:	00003936 	.word	0x00003936

1005e048 <hci_le_advertising_set_terminated_event_push>:
1005e048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005e04a:	461f      	mov	r7, r3
1005e04c:	4616      	mov	r6, r2
1005e04e:	460d      	mov	r5, r1
1005e050:	4604      	mov	r4, r0
1005e052:	06c0      	lsls	r0, r0, #27
1005e054:	d40b      	bmi.n	1005e06e <hci_le_advertising_set_terminated_event_push+0x26>
1005e056:	4817      	ldr	r0, [pc, #92]	@ (1005e0b4 <__arm_cp.42_0>)
1005e058:	6800      	ldr	r0, [r0, #0]
1005e05a:	213d      	movs	r1, #61	@ 0x3d
1005e05c:	5c41      	ldrb	r1, [r0, r1]
1005e05e:	0689      	lsls	r1, r1, #26
1005e060:	d527      	bpl.n	1005e0b2 <hci_le_advertising_set_terminated_event_push+0x6a>
1005e062:	303d      	adds	r0, #61	@ 0x3d
1005e064:	7ac0      	ldrb	r0, [r0, #11]
1005e066:	0780      	lsls	r0, r0, #30
1005e068:	d523      	bpl.n	1005e0b2 <hci_le_advertising_set_terminated_event_push+0x6a>
1005e06a:	221f      	movs	r2, #31
1005e06c:	e002      	b.n	1005e074 <hci_le_advertising_set_terminated_event_push+0x2c>
1005e06e:	20bf      	movs	r0, #191	@ 0xbf
1005e070:	4004      	ands	r4, r0
1005e072:	2211      	movs	r2, #17
1005e074:	4810      	ldr	r0, [pc, #64]	@ (1005e0b8 <__arm_cp.42_1>)
1005e076:	6800      	ldr	r0, [r0, #0]
1005e078:	0761      	lsls	r1, r4, #29
1005e07a:	0ec9      	lsrs	r1, r1, #27
1005e07c:	1840      	adds	r0, r0, r1
1005e07e:	6900      	ldr	r0, [r0, #16]
1005e080:	2303      	movs	r3, #3
1005e082:	4621      	mov	r1, r4
1005e084:	f7f4 ff58 	bl	10052f38 <aci_event_fifo_push_header>
1005e088:	2800      	cmp	r0, #0
1005e08a:	d012      	beq.n	1005e0b2 <hci_le_advertising_set_terminated_event_push+0x6a>
1005e08c:	4601      	mov	r1, r0
1005e08e:	200f      	movs	r0, #15
1005e090:	72c8      	strb	r0, [r1, #11]
1005e092:	20ff      	movs	r0, #255	@ 0xff
1005e094:	7288      	strb	r0, [r1, #10]
1005e096:	730f      	strb	r7, [r1, #12]
1005e098:	724e      	strb	r6, [r1, #9]
1005e09a:	720d      	strb	r5, [r1, #8]
1005e09c:	2012      	movs	r0, #18
1005e09e:	71c8      	strb	r0, [r1, #7]
1005e0a0:	2006      	movs	r0, #6
1005e0a2:	7188      	strb	r0, [r1, #6]
1005e0a4:	203e      	movs	r0, #62	@ 0x3e
1005e0a6:	7148      	strb	r0, [r1, #5]
1005e0a8:	2004      	movs	r0, #4
1005e0aa:	7108      	strb	r0, [r1, #4]
1005e0ac:	4620      	mov	r0, r4
1005e0ae:	f7f4 ffe0 	bl	10053072 <aci_event_fifo_push>
1005e0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005e0b4 <__arm_cp.42_0>:
1005e0b4:	200010f4 	.word	0x200010f4

1005e0b8 <__arm_cp.42_1>:
1005e0b8:	200010a4 	.word	0x200010a4

1005e0bc <EADV_stop_isr>:
1005e0bc:	b5b0      	push	{r4, r5, r7, lr}
1005e0be:	4604      	mov	r4, r0
1005e0c0:	20d1      	movs	r0, #209	@ 0xd1
1005e0c2:	5c20      	ldrb	r0, [r4, r0]
1005e0c4:	f000 fda2 	bl	1005ec0c <LL_sched_set_cancel_request>
1005e0c8:	4625      	mov	r5, r4
1005e0ca:	35ce      	adds	r5, #206	@ 0xce
1005e0cc:	78a8      	ldrb	r0, [r5, #2]
1005e0ce:	f000 fd9d 	bl	1005ec0c <LL_sched_set_cancel_request>
1005e0d2:	20ce      	movs	r0, #206	@ 0xce
1005e0d4:	2100      	movs	r1, #0
1005e0d6:	5221      	strh	r1, [r4, r0]
1005e0d8:	7aa8      	ldrb	r0, [r5, #10]
1005e0da:	28ff      	cmp	r0, #255	@ 0xff
1005e0dc:	d001      	beq.n	1005e0e2 <EADV_stop_isr+0x26>
1005e0de:	f7fa fe2e 	bl	10058d3e <llc_conn_release_conn_idx>
1005e0e2:	20ff      	movs	r0, #255	@ 0xff
1005e0e4:	72a8      	strb	r0, [r5, #10]
1005e0e6:	bdb0      	pop	{r4, r5, r7, pc}

1005e0e8 <ADV_createslot>:
1005e0e8:	b570      	push	{r4, r5, r6, lr}
1005e0ea:	4604      	mov	r4, r0
1005e0ec:	20c5      	movs	r0, #197	@ 0xc5
1005e0ee:	5c20      	ldrb	r0, [r4, r0]
1005e0f0:	f7fb fd3c 	bl	10059b6c <llc_convert_hci_phy_enum_to_hw_phy>
1005e0f4:	4605      	mov	r5, r0
1005e0f6:	4626      	mov	r6, r4
1005e0f8:	36c5      	adds	r6, #197	@ 0xc5
1005e0fa:	7af0      	ldrb	r0, [r6, #11]
1005e0fc:	4629      	mov	r1, r5
1005e0fe:	f7e9 fdc6 	bl	10047c8e <BLEPLAT_CNTR_SmSetTxPhy>
1005e102:	7af0      	ldrb	r0, [r6, #11]
1005e104:	4629      	mov	r1, r5
1005e106:	f7e9 fd56 	bl	10047bb6 <BLEPLAT_CNTR_SmSetRxPhy>
1005e10a:	f7e9 f892 	bl	10047232 <BLEPLAT_CNTR_GlobEnableBlue>
1005e10e:	f000 fcf7 	bl	1005eb00 <LL_get_tx_common_buffer_p>
1005e112:	4602      	mov	r2, r0
1005e114:	7db0      	ldrb	r0, [r6, #22]
1005e116:	4621      	mov	r1, r4
1005e118:	f000 f801 	bl	1005e11e <EADV_vPrepareAdvOrRspLegacyPacket>
1005e11c:	bd70      	pop	{r4, r5, r6, pc}

1005e11e <EADV_vPrepareAdvOrRspLegacyPacket>:
1005e11e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005e120:	4614      	mov	r4, r2
1005e122:	460d      	mov	r5, r1
1005e124:	4606      	mov	r6, r0
1005e126:	460f      	mov	r7, r1
1005e128:	37b8      	adds	r7, #184	@ 0xb8
1005e12a:	2004      	movs	r0, #4
1005e12c:	2e00      	cmp	r6, #0
1005e12e:	4601      	mov	r1, r0
1005e130:	d10d      	bne.n	1005e14e <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1005e132:	8839      	ldrh	r1, [r7, #0]
1005e134:	074a      	lsls	r2, r1, #29
1005e136:	d407      	bmi.n	1005e148 <EADV_vPrepareAdvOrRspLegacyPacket+0x2a>
1005e138:	2203      	movs	r2, #3
1005e13a:	4011      	ands	r1, r2
1005e13c:	424a      	negs	r2, r1
1005e13e:	414a      	adcs	r2, r1
1005e140:	2902      	cmp	r1, #2
1005e142:	d003      	beq.n	1005e14c <EADV_vPrepareAdvOrRspLegacyPacket+0x2e>
1005e144:	0051      	lsls	r1, r2, #1
1005e146:	e002      	b.n	1005e14e <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1005e148:	2101      	movs	r1, #1
1005e14a:	e000      	b.n	1005e14e <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1005e14c:	2106      	movs	r1, #6
1005e14e:	7021      	strb	r1, [r4, #0]
1005e150:	2e00      	cmp	r6, #0
1005e152:	d107      	bne.n	1005e164 <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
1005e154:	8839      	ldrh	r1, [r7, #0]
1005e156:	4001      	ands	r1, r0
1005e158:	d104      	bne.n	1005e164 <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
1005e15a:	202e      	movs	r0, #46	@ 0x2e
1005e15c:	5c28      	ldrb	r0, [r5, r0]
1005e15e:	1d80      	adds	r0, r0, #6
1005e160:	7060      	strb	r0, [r4, #1]
1005e162:	e00f      	b.n	1005e184 <EADV_vPrepareAdvOrRspLegacyPacket+0x66>
1005e164:	2e00      	cmp	r6, #0
1005e166:	d004      	beq.n	1005e172 <EADV_vPrepareAdvOrRspLegacyPacket+0x54>
1005e168:	4628      	mov	r0, r5
1005e16a:	3042      	adds	r0, #66	@ 0x42
1005e16c:	7800      	ldrb	r0, [r0, #0]
1005e16e:	1d80      	adds	r0, r0, #6
1005e170:	e000      	b.n	1005e174 <EADV_vPrepareAdvOrRspLegacyPacket+0x56>
1005e172:	200c      	movs	r0, #12
1005e174:	7060      	strb	r0, [r4, #1]
1005e176:	4620      	mov	r0, r4
1005e178:	3008      	adds	r0, #8
1005e17a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005e17c:	3109      	adds	r1, #9
1005e17e:	2206      	movs	r2, #6
1005e180:	f7e7 ff68 	bl	10046054 <BLEPLAT_MemCpy>
1005e184:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005e186:	1ca0      	adds	r0, r4, #2
1005e188:	1c49      	adds	r1, r1, #1
1005e18a:	2206      	movs	r2, #6
1005e18c:	f7e7 ff62 	bl	10046054 <BLEPLAT_MemCpy>
1005e190:	7820      	ldrb	r0, [r4, #0]
1005e192:	212f      	movs	r1, #47	@ 0x2f
1005e194:	4001      	ands	r1, r0
1005e196:	7021      	strb	r1, [r4, #0]
1005e198:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1005e19a:	7800      	ldrb	r0, [r0, #0]
1005e19c:	07c0      	lsls	r0, r0, #31
1005e19e:	0e40      	lsrs	r0, r0, #25
1005e1a0:	1840      	adds	r0, r0, r1
1005e1a2:	7020      	strb	r0, [r4, #0]
1005e1a4:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005e1a6:	7a09      	ldrb	r1, [r1, #8]
1005e1a8:	01c9      	lsls	r1, r1, #7
1005e1aa:	1808      	adds	r0, r1, r0
1005e1ac:	7020      	strb	r0, [r4, #0]
1005e1ae:	f000 f9e9 	bl	1005e584 <llc_get_channel_sel_algo2_enabled>
1005e1b2:	7821      	ldrb	r1, [r4, #0]
1005e1b4:	0140      	lsls	r0, r0, #5
1005e1b6:	4308      	orrs	r0, r1
1005e1b8:	7020      	strb	r0, [r4, #0]
1005e1ba:	4271      	negs	r1, r6
1005e1bc:	4171      	adcs	r1, r6
1005e1be:	8838      	ldrh	r0, [r7, #0]
1005e1c0:	2204      	movs	r2, #4
1005e1c2:	4002      	ands	r2, r0
1005e1c4:	0890      	lsrs	r0, r2, #2
1005e1c6:	4008      	ands	r0, r1
1005e1c8:	d101      	bne.n	1005e1ce <EADV_vPrepareAdvOrRspLegacyPacket+0xb0>
1005e1ca:	2708      	movs	r7, #8
1005e1cc:	e000      	b.n	1005e1d0 <EADV_vPrepareAdvOrRspLegacyPacket+0xb2>
1005e1ce:	270e      	movs	r7, #14
1005e1d0:	2800      	cmp	r0, #0
1005e1d2:	d001      	beq.n	1005e1d8 <EADV_vPrepareAdvOrRspLegacyPacket+0xba>
1005e1d4:	200c      	movs	r0, #12
1005e1d6:	e011      	b.n	1005e1fc <EADV_vPrepareAdvOrRspLegacyPacket+0xde>
1005e1d8:	2e00      	cmp	r6, #0
1005e1da:	d001      	beq.n	1005e1e0 <EADV_vPrepareAdvOrRspLegacyPacket+0xc2>
1005e1dc:	203c      	movs	r0, #60	@ 0x3c
1005e1de:	e000      	b.n	1005e1e2 <EADV_vPrepareAdvOrRspLegacyPacket+0xc4>
1005e1e0:	2028      	movs	r0, #40	@ 0x28
1005e1e2:	5829      	ldr	r1, [r5, r0]
1005e1e4:	2e00      	cmp	r6, #0
1005e1e6:	d001      	beq.n	1005e1ec <EADV_vPrepareAdvOrRspLegacyPacket+0xce>
1005e1e8:	2042      	movs	r0, #66	@ 0x42
1005e1ea:	e000      	b.n	1005e1ee <EADV_vPrepareAdvOrRspLegacyPacket+0xd0>
1005e1ec:	202e      	movs	r0, #46	@ 0x2e
1005e1ee:	5a2d      	ldrh	r5, [r5, r0]
1005e1f0:	19e0      	adds	r0, r4, r7
1005e1f2:	462a      	mov	r2, r5
1005e1f4:	f7e7 ff2e 	bl	10046054 <BLEPLAT_MemCpy>
1005e1f8:	1978      	adds	r0, r7, r5
1005e1fa:	1e80      	subs	r0, r0, #2
1005e1fc:	7060      	strb	r0, [r4, #1]
1005e1fe:	2000      	movs	r0, #0
1005e200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1005e204 <ADV_ISR_connect_request_received>:
1005e204:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e206:	b085      	sub	sp, #20
1005e208:	4616      	mov	r6, r2
1005e20a:	460d      	mov	r5, r1
1005e20c:	4604      	mov	r4, r0
1005e20e:	f7e9 f8f1 	bl	100473f4 <BLEPLAT_CNTR_PacketClrPllTrig>
1005e212:	f7e8 f84c 	bl	100462ae <BLEPLAT_ClearRadioTimerValue>
1005e216:	2003      	movs	r0, #3
1005e218:	43c0      	mvns	r0, r0
1005e21a:	1cc1      	adds	r1, r0, #3
1005e21c:	4668      	mov	r0, sp
1005e21e:	8101      	strh	r1, [r0, #8]
1005e220:	2101      	movs	r1, #1
1005e222:	8201      	strh	r1, [r0, #16]
1005e224:	7341      	strb	r1, [r0, #13]
1005e226:	21be      	movs	r1, #190	@ 0xbe
1005e228:	5a61      	ldrh	r1, [r4, r1]
1005e22a:	7281      	strb	r1, [r0, #10]
1005e22c:	4627      	mov	r7, r4
1005e22e:	37be      	adds	r7, #190	@ 0xbe
1005e230:	7eba      	ldrb	r2, [r7, #26]
1005e232:	72c2      	strb	r2, [r0, #11]
1005e234:	7cba      	ldrb	r2, [r7, #18]
1005e236:	7382      	strb	r2, [r0, #14]
1005e238:	4a0e      	ldr	r2, [pc, #56]	@ (1005e274 <__arm_cp.47_0>)
1005e23a:	1a89      	subs	r1, r1, r2
1005e23c:	1e4a      	subs	r2, r1, #1
1005e23e:	4191      	sbcs	r1, r2
1005e240:	73c1      	strb	r1, [r0, #15]
1005e242:	7301      	strb	r1, [r0, #12]
1005e244:	9601      	str	r6, [sp, #4]
1005e246:	9500      	str	r5, [sp, #0]
1005e248:	f7fa fdb4 	bl	10058db4 <llc_conn_go_to_connect>
1005e24c:	4620      	mov	r0, r4
1005e24e:	3028      	adds	r0, #40	@ 0x28
1005e250:	f7ff f93e 	bl	1005d4d0 <LL_eadv_switchbackupdata_data_struc>
1005e254:	343c      	adds	r4, #60	@ 0x3c
1005e256:	4620      	mov	r0, r4
1005e258:	f7ff f93a 	bl	1005d4d0 <LL_eadv_switchbackupdata_data_struc>
1005e25c:	2000      	movs	r0, #0
1005e25e:	7438      	strb	r0, [r7, #16]
1005e260:	7cb8      	ldrb	r0, [r7, #18]
1005e262:	f000 fd43 	bl	1005ecec <LL_sched_engine>
1005e266:	7e38      	ldrb	r0, [r7, #24]
1005e268:	0780      	lsls	r0, r0, #30
1005e26a:	d501      	bpl.n	1005e270 <ADV_ISR_connect_request_received+0x6c>
1005e26c:	f7fb fc2d 	bl	10059aca <llc_priv_stop_privacy_timer_ucfg_weak>
1005e270:	b005      	add	sp, #20
1005e272:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005e274 <__arm_cp.47_0>:
1005e274:	0000fffc 	.word	0x0000fffc

1005e278 <ADV_ISR>:
1005e278:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e27a:	b08d      	sub	sp, #52	@ 0x34
1005e27c:	4605      	mov	r5, r0
1005e27e:	f000 fc47 	bl	1005eb10 <LL_get_rx_common_buffer_p>
1005e282:	9005      	str	r0, [sp, #20]
1005e284:	4c85      	ldr	r4, [pc, #532]	@ (1005e49c <__arm_cp.48_0>)
1005e286:	6820      	ldr	r0, [r4, #0]
1005e288:	f7e9 f86d 	bl	10047366 <BLEPLAT_CNTR_IntGetIntStatusRxOk>
1005e28c:	4606      	mov	r6, r0
1005e28e:	6820      	ldr	r0, [r4, #0]
1005e290:	f7e9 f880 	bl	10047394 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
1005e294:	4607      	mov	r7, r0
1005e296:	20d0      	movs	r0, #208	@ 0xd0
1005e298:	5c28      	ldrb	r0, [r5, r0]
1005e29a:	212c      	movs	r1, #44	@ 0x2c
1005e29c:	4341      	muls	r1, r0
1005e29e:	4a80      	ldr	r2, [pc, #512]	@ (1005e4a0 <__arm_cp.48_1>)
1005e2a0:	6812      	ldr	r2, [r2, #0]
1005e2a2:	1851      	adds	r1, r2, r1
1005e2a4:	7d89      	ldrb	r1, [r1, #22]
1005e2a6:	2914      	cmp	r1, #20
1005e2a8:	d103      	bne.n	1005e2b2 <ADV_ISR+0x3a>
1005e2aa:	210a      	movs	r1, #10
1005e2ac:	2203      	movs	r2, #3
1005e2ae:	f000 fee3 	bl	1005f078 <LL_sched_set_priority>
1005e2b2:	462c      	mov	r4, r5
1005e2b4:	34b4      	adds	r4, #180	@ 0xb4
1005e2b6:	4628      	mov	r0, r5
1005e2b8:	30db      	adds	r0, #219	@ 0xdb
1005e2ba:	9004      	str	r0, [sp, #16]
1005e2bc:	2e00      	cmp	r6, #0
1005e2be:	d038      	beq.n	1005e332 <ADV_ISR+0xba>
1005e2c0:	9506      	str	r5, [sp, #24]
1005e2c2:	2700      	movs	r7, #0
1005e2c4:	970c      	str	r7, [sp, #48]	@ 0x30
1005e2c6:	970b      	str	r7, [sp, #44]	@ 0x2c
1005e2c8:	9d05      	ldr	r5, [sp, #20]
1005e2ca:	7828      	ldrb	r0, [r5, #0]
1005e2cc:	09c0      	lsrs	r0, r0, #7
1005e2ce:	a90b      	add	r1, sp, #44	@ 0x2c
1005e2d0:	7008      	strb	r0, [r1, #0]
1005e2d2:	4874      	ldr	r0, [pc, #464]	@ (1005e4a4 <__arm_cp.48_2>)
1005e2d4:	6800      	ldr	r0, [r0, #0]
1005e2d6:	22d8      	movs	r2, #216	@ 0xd8
1005e2d8:	5c80      	ldrb	r0, [r0, r2]
1005e2da:	9003      	str	r0, [sp, #12]
1005e2dc:	1c48      	adds	r0, r1, #1
1005e2de:	4629      	mov	r1, r5
1005e2e0:	3108      	adds	r1, #8
1005e2e2:	2606      	movs	r6, #6
1005e2e4:	4632      	mov	r2, r6
1005e2e6:	f7e7 feb5 	bl	10046054 <BLEPLAT_MemCpy>
1005e2ea:	970a      	str	r7, [sp, #40]	@ 0x28
1005e2ec:	9709      	str	r7, [sp, #36]	@ 0x24
1005e2ee:	7828      	ldrb	r0, [r5, #0]
1005e2f0:	0640      	lsls	r0, r0, #25
1005e2f2:	0fc0      	lsrs	r0, r0, #31
1005e2f4:	a909      	add	r1, sp, #36	@ 0x24
1005e2f6:	7008      	strb	r0, [r1, #0]
1005e2f8:	1c48      	adds	r0, r1, #1
1005e2fa:	1ca9      	adds	r1, r5, #2
1005e2fc:	4632      	mov	r2, r6
1005e2fe:	f7e7 fea9 	bl	10046054 <BLEPLAT_MemCpy>
1005e302:	7828      	ldrb	r0, [r5, #0]
1005e304:	260f      	movs	r6, #15
1005e306:	4006      	ands	r6, r0
1005e308:	2e05      	cmp	r6, #5
1005e30a:	d101      	bne.n	1005e310 <ADV_ISR+0x98>
1005e30c:	f7e7 ffcf 	bl	100462ae <BLEPLAT_ClearRadioTimerValue>
1005e310:	7be3      	ldrb	r3, [r4, #15]
1005e312:	7922      	ldrb	r2, [r4, #4]
1005e314:	9702      	str	r7, [sp, #8]
1005e316:	ad07      	add	r5, sp, #28
1005e318:	9501      	str	r5, [sp, #4]
1005e31a:	9806      	ldr	r0, [sp, #24]
1005e31c:	3084      	adds	r0, #132	@ 0x84
1005e31e:	9000      	str	r0, [sp, #0]
1005e320:	a809      	add	r0, sp, #36	@ 0x24
1005e322:	4631      	mov	r1, r6
1005e324:	f007 febe 	bl	100660a4 <llc_check_sreq_or_creq_tx_addr_ucfg_weak>
1005e328:	0841      	lsrs	r1, r0, #1
1005e32a:	297e      	cmp	r1, #126	@ 0x7e
1005e32c:	d807      	bhi.n	1005e33e <ADV_ISR+0xc6>
1005e32e:	4601      	mov	r1, r0
1005e330:	e006      	b.n	1005e340 <ADV_ISR+0xc8>
1005e332:	2601      	movs	r6, #1
1005e334:	2f00      	cmp	r7, #0
1005e336:	d14f      	bne.n	1005e3d8 <ADV_ISR+0x160>
1005e338:	2700      	movs	r7, #0
1005e33a:	8027      	strh	r7, [r4, #0]
1005e33c:	e051      	b.n	1005e3e2 <ADV_ISR+0x16a>
1005e33e:	2101      	movs	r1, #1
1005e340:	7029      	strb	r1, [r5, #0]
1005e342:	9d06      	ldr	r5, [sp, #24]
1005e344:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005e346:	680a      	ldr	r2, [r1, #0]
1005e348:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1005e34a:	429a      	cmp	r2, r3
1005e34c:	d12d      	bne.n	1005e3aa <ADV_ISR+0x132>
1005e34e:	6849      	ldr	r1, [r1, #4]
1005e350:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1005e352:	4291      	cmp	r1, r2
1005e354:	d129      	bne.n	1005e3aa <ADV_ISR+0x132>
1005e356:	4607      	mov	r7, r0
1005e358:	3fff      	subs	r7, #255	@ 0xff
1005e35a:	1e79      	subs	r1, r7, #1
1005e35c:	418f      	sbcs	r7, r1
1005e35e:	2e03      	cmp	r6, #3
1005e360:	d123      	bne.n	1005e3aa <ADV_ISR+0x132>
1005e362:	28ff      	cmp	r0, #255	@ 0xff
1005e364:	d021      	beq.n	1005e3aa <ADV_ISR+0x132>
1005e366:	88a0      	ldrh	r0, [r4, #4]
1005e368:	2701      	movs	r7, #1
1005e36a:	0780      	lsls	r0, r0, #30
1005e36c:	d51d      	bpl.n	1005e3aa <ADV_ISR+0x132>
1005e36e:	9803      	ldr	r0, [sp, #12]
1005e370:	2801      	cmp	r0, #1
1005e372:	d11a      	bne.n	1005e3aa <ADV_ISR+0x132>
1005e374:	4628      	mov	r0, r5
1005e376:	f7e9 f83d 	bl	100473f4 <BLEPLAT_CNTR_PacketClrPllTrig>
1005e37a:	7e60      	ldrb	r0, [r4, #25]
1005e37c:	2801      	cmp	r0, #1
1005e37e:	d109      	bne.n	1005e394 <ADV_ISR+0x11c>
1005e380:	8960      	ldrh	r0, [r4, #10]
1005e382:	4949      	ldr	r1, [pc, #292]	@ (1005e4a8 <__arm_cp.48_3>)
1005e384:	4288      	cmp	r0, r1
1005e386:	d005      	beq.n	1005e394 <ADV_ISR+0x11c>
1005e388:	aa07      	add	r2, sp, #28
1005e38a:	7811      	ldrb	r1, [r2, #0]
1005e38c:	b2c0      	uxtb	r0, r0
1005e38e:	1c52      	adds	r2, r2, #1
1005e390:	f000 f88e 	bl	1005e4b0 <hci_le_scan_request_received_event_push>
1005e394:	7f20      	ldrb	r0, [r4, #28]
1005e396:	f7e9 fc59 	bl	10047c4c <BLEPLAT_CNTR_SmSetTxMode>
1005e39a:	2001      	movs	r0, #1
1005e39c:	9904      	ldr	r1, [sp, #16]
1005e39e:	7008      	strb	r0, [r1, #0]
1005e3a0:	4628      	mov	r0, r5
1005e3a2:	f7ff fea1 	bl	1005e0e8 <ADV_createslot>
1005e3a6:	2600      	movs	r6, #0
1005e3a8:	e01b      	b.n	1005e3e2 <ADV_ISR+0x16a>
1005e3aa:	88a0      	ldrh	r0, [r4, #4]
1005e3ac:	07c0      	lsls	r0, r0, #31
1005e3ae:	d015      	beq.n	1005e3dc <ADV_ISR+0x164>
1005e3b0:	2e05      	cmp	r6, #5
1005e3b2:	d113      	bne.n	1005e3dc <ADV_ISR+0x164>
1005e3b4:	9908      	ldr	r1, [sp, #32]
1005e3b6:	9807      	ldr	r0, [sp, #28]
1005e3b8:	f7fa f9c8 	bl	1005874c <llc_conn_list_search_address>
1005e3bc:	4241      	negs	r1, r0
1005e3be:	4141      	adcs	r1, r0
1005e3c0:	4039      	ands	r1, r7
1005e3c2:	2901      	cmp	r1, #1
1005e3c4:	d10a      	bne.n	1005e3dc <ADV_ISR+0x164>
1005e3c6:	9803      	ldr	r0, [sp, #12]
1005e3c8:	2801      	cmp	r0, #1
1005e3ca:	d107      	bne.n	1005e3dc <ADV_ISR+0x164>
1005e3cc:	aa07      	add	r2, sp, #28
1005e3ce:	4628      	mov	r0, r5
1005e3d0:	9905      	ldr	r1, [sp, #20]
1005e3d2:	f7f3 faa3 	bl	1005191c <ADV_ISR_connect_request_received_ucfg>
1005e3d6:	2601      	movs	r6, #1
1005e3d8:	2700      	movs	r7, #0
1005e3da:	e002      	b.n	1005e3e2 <ADV_ISR+0x16a>
1005e3dc:	2700      	movs	r7, #0
1005e3de:	8027      	strh	r7, [r4, #0]
1005e3e0:	2601      	movs	r6, #1
1005e3e2:	8821      	ldrh	r1, [r4, #0]
1005e3e4:	7fa0      	ldrb	r0, [r4, #30]
1005e3e6:	2800      	cmp	r0, #0
1005e3e8:	d022      	beq.n	1005e430 <ADV_ISR+0x1b8>
1005e3ea:	2900      	cmp	r1, #0
1005e3ec:	d122      	bne.n	1005e434 <ADV_ISR+0x1bc>
1005e3ee:	1e40      	subs	r0, r0, #1
1005e3f0:	77a0      	strb	r0, [r4, #30]
1005e3f2:	88a0      	ldrh	r0, [r4, #4]
1005e3f4:	2103      	movs	r1, #3
1005e3f6:	4001      	ands	r1, r0
1005e3f8:	1e48      	subs	r0, r1, #1
1005e3fa:	4181      	sbcs	r1, r0
1005e3fc:	0048      	lsls	r0, r1, #1
1005e3fe:	8020      	strh	r0, [r4, #0]
1005e400:	4628      	mov	r0, r5
1005e402:	f7ff fdd9 	bl	1005dfb8 <UTIL_u8GetNextAdvChannel>
1005e406:	4601      	mov	r1, r0
1005e408:	7f20      	ldrb	r0, [r4, #28]
1005e40a:	f7e9 fb60 	bl	10047ace <BLEPLAT_CNTR_SmSetRemapChan>
1005e40e:	7f20      	ldrb	r0, [r4, #28]
1005e410:	f7e9 fc1c 	bl	10047c4c <BLEPLAT_CNTR_SmSetTxMode>
1005e414:	4628      	mov	r0, r5
1005e416:	f7e9 f8e1 	bl	100475dc <BLEPLAT_CNTR_PacketSetPllTrig>
1005e41a:	f7e7 ff48 	bl	100462ae <BLEPLAT_ClearRadioTimerValue>
1005e41e:	2000      	movs	r0, #0
1005e420:	9904      	ldr	r1, [sp, #16]
1005e422:	7008      	strb	r0, [r1, #0]
1005e424:	4628      	mov	r0, r5
1005e426:	f7ff fe5f 	bl	1005e0e8 <ADV_createslot>
1005e42a:	f7e7 ff58 	bl	100462de <BLEPLAT_SetRadioCloseTimeout>
1005e42e:	e02a      	b.n	1005e486 <ADV_ISR+0x20e>
1005e430:	2900      	cmp	r1, #0
1005e432:	d019      	beq.n	1005e468 <ADV_ISR+0x1f0>
1005e434:	4819      	ldr	r0, [pc, #100]	@ (1005e49c <__arm_cp.48_0>)
1005e436:	6800      	ldr	r0, [r0, #0]
1005e438:	f7e8 ffac 	bl	10047394 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
1005e43c:	2800      	cmp	r0, #0
1005e43e:	d022      	beq.n	1005e486 <ADV_ISR+0x20e>
1005e440:	4628      	mov	r0, r5
1005e442:	f7e9 f8cb 	bl	100475dc <BLEPLAT_CNTR_PacketSetPllTrig>
1005e446:	7c60      	ldrb	r0, [r4, #17]
1005e448:	2801      	cmp	r0, #1
1005e44a:	d001      	beq.n	1005e450 <ADV_ISR+0x1d8>
1005e44c:	4917      	ldr	r1, [pc, #92]	@ (1005e4ac <__arm_cp.48_4>)
1005e44e:	e000      	b.n	1005e452 <ADV_ISR+0x1da>
1005e450:	2146      	movs	r1, #70	@ 0x46
1005e452:	3514      	adds	r5, #20
1005e454:	4628      	mov	r0, r5
1005e456:	f7e9 f922 	bl	1004769e <BLEPLAT_CNTR_SetRcvLen>
1005e45a:	8820      	ldrh	r0, [r4, #0]
1005e45c:	1e40      	subs	r0, r0, #1
1005e45e:	8020      	strh	r0, [r4, #0]
1005e460:	f7e8 fee7 	bl	10047232 <BLEPLAT_CNTR_GlobEnableBlue>
1005e464:	2600      	movs	r6, #0
1005e466:	e00e      	b.n	1005e486 <ADV_ISR+0x20e>
1005e468:	f7e7 ff21 	bl	100462ae <BLEPLAT_ClearRadioTimerValue>
1005e46c:	4628      	mov	r0, r5
1005e46e:	f7e9 f8b5 	bl	100475dc <BLEPLAT_CNTR_PacketSetPllTrig>
1005e472:	88e0      	ldrh	r0, [r4, #6]
1005e474:	1e40      	subs	r0, r0, #1
1005e476:	80e0      	strh	r0, [r4, #6]
1005e478:	2100      	movs	r1, #0
1005e47a:	4628      	mov	r0, r5
1005e47c:	f7ff fcce 	bl	1005de1c <ADV_skiproutine>
1005e480:	7f20      	ldrb	r0, [r4, #28]
1005e482:	f000 fc33 	bl	1005ecec <LL_sched_engine>
1005e486:	2f00      	cmp	r7, #0
1005e488:	d002      	beq.n	1005e490 <ADV_ISR+0x218>
1005e48a:	8820      	ldrh	r0, [r4, #0]
1005e48c:	1e40      	subs	r0, r0, #1
1005e48e:	8020      	strh	r0, [r4, #0]
1005e490:	f7f4 fd4f 	bl	10052f32 <log_notify_us_flush_ucfg_weak>
1005e494:	4630      	mov	r0, r6
1005e496:	b00d      	add	sp, #52	@ 0x34
1005e498:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005e49a:	46c0      	nop			@ (mov r8, r8)

1005e49c <__arm_cp.48_0>:
1005e49c:	200010f0 	.word	0x200010f0

1005e4a0 <__arm_cp.48_1>:
1005e4a0:	200010fc 	.word	0x200010fc

1005e4a4 <__arm_cp.48_2>:
1005e4a4:	200010f4 	.word	0x200010f4

1005e4a8 <__arm_cp.48_3>:
1005e4a8:	0000fffc 	.word	0x0000fffc

1005e4ac <__arm_cp.48_4>:
1005e4ac:	000002ee 	.word	0x000002ee

1005e4b0 <hci_le_scan_request_received_event_push>:
1005e4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005e4b2:	460e      	mov	r6, r1
1005e4b4:	4605      	mov	r5, r0
1005e4b6:	4815      	ldr	r0, [pc, #84]	@ (1005e50c <__arm_cp.49_0>)
1005e4b8:	6800      	ldr	r0, [r0, #0]
1005e4ba:	213d      	movs	r1, #61	@ 0x3d
1005e4bc:	5c41      	ldrb	r1, [r0, r1]
1005e4be:	0689      	lsls	r1, r1, #26
1005e4c0:	d522      	bpl.n	1005e508 <hci_le_scan_request_received_event_push+0x58>
1005e4c2:	303d      	adds	r0, #61	@ 0x3d
1005e4c4:	7ac0      	ldrb	r0, [r0, #11]
1005e4c6:	0740      	lsls	r0, r0, #29
1005e4c8:	d51e      	bpl.n	1005e508 <hci_le_scan_request_received_event_push+0x58>
1005e4ca:	4614      	mov	r4, r2
1005e4cc:	4810      	ldr	r0, [pc, #64]	@ (1005e510 <__arm_cp.49_1>)
1005e4ce:	6800      	ldr	r0, [r0, #0]
1005e4d0:	6940      	ldr	r0, [r0, #20]
1005e4d2:	21a1      	movs	r1, #161	@ 0xa1
1005e4d4:	222b      	movs	r2, #43	@ 0x2b
1005e4d6:	2303      	movs	r3, #3
1005e4d8:	f7f4 fd2e 	bl	10052f38 <aci_event_fifo_push_header>
1005e4dc:	2800      	cmp	r0, #0
1005e4de:	d013      	beq.n	1005e508 <hci_le_scan_request_received_event_push+0x58>
1005e4e0:	4607      	mov	r7, r0
1005e4e2:	7246      	strb	r6, [r0, #9]
1005e4e4:	7205      	strb	r5, [r0, #8]
1005e4e6:	300a      	adds	r0, #10
1005e4e8:	2206      	movs	r2, #6
1005e4ea:	4621      	mov	r1, r4
1005e4ec:	f7e7 fdb2 	bl	10046054 <BLEPLAT_MemCpy>
1005e4f0:	2013      	movs	r0, #19
1005e4f2:	71f8      	strb	r0, [r7, #7]
1005e4f4:	2009      	movs	r0, #9
1005e4f6:	71b8      	strb	r0, [r7, #6]
1005e4f8:	203e      	movs	r0, #62	@ 0x3e
1005e4fa:	7178      	strb	r0, [r7, #5]
1005e4fc:	2004      	movs	r0, #4
1005e4fe:	7138      	strb	r0, [r7, #4]
1005e500:	20a1      	movs	r0, #161	@ 0xa1
1005e502:	4639      	mov	r1, r7
1005e504:	f7f4 fdb5 	bl	10053072 <aci_event_fifo_push>
1005e508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005e50a:	46c0      	nop			@ (mov r8, r8)

1005e50c <__arm_cp.49_0>:
1005e50c:	200010f4 	.word	0x200010f4

1005e510 <__arm_cp.49_1>:
1005e510:	200010a4 	.word	0x200010a4

1005e514 <EADV_start_request_radio_tasks>:
1005e514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005e516:	4604      	mov	r4, r0
1005e518:	20d8      	movs	r0, #216	@ 0xd8
1005e51a:	21ff      	movs	r1, #255	@ 0xff
1005e51c:	5421      	strb	r1, [r4, r0]
1005e51e:	20b8      	movs	r0, #184	@ 0xb8
1005e520:	5a25      	ldrh	r5, [r4, r0]
1005e522:	2701      	movs	r7, #1
1005e524:	402f      	ands	r7, r5
1005e526:	4626      	mov	r6, r4
1005e528:	36d8      	adds	r6, #216	@ 0xd8
1005e52a:	2f00      	cmp	r7, #0
1005e52c:	d004      	beq.n	1005e538 <EADV_start_request_radio_tasks+0x24>
1005e52e:	f7fa ffcf 	bl	100594d0 <llc_conn_reserve_conn_idx>
1005e532:	7030      	strb	r0, [r6, #0]
1005e534:	28ff      	cmp	r0, #255	@ 0xff
1005e536:	d022      	beq.n	1005e57e <EADV_start_request_radio_tasks+0x6a>
1005e538:	34b8      	adds	r4, #184	@ 0xb8
1005e53a:	f000 fddb 	bl	1005f0f4 <LL_sched_reserve_taskslot>
1005e53e:	7620      	strb	r0, [r4, #24]
1005e540:	28ff      	cmp	r0, #255	@ 0xff
1005e542:	d013      	beq.n	1005e56c <EADV_start_request_radio_tasks+0x58>
1005e544:	2100      	movs	r1, #0
1005e546:	06e8      	lsls	r0, r5, #27
1005e548:	d41a      	bmi.n	1005e580 <EADV_start_request_radio_tasks+0x6c>
1005e54a:	460d      	mov	r5, r1
1005e54c:	f000 fdd2 	bl	1005f0f4 <LL_sched_reserve_taskslot>
1005e550:	4629      	mov	r1, r5
1005e552:	7660      	strb	r0, [r4, #25]
1005e554:	28ff      	cmp	r0, #255	@ 0xff
1005e556:	d113      	bne.n	1005e580 <EADV_start_request_radio_tasks+0x6c>
1005e558:	2f00      	cmp	r7, #0
1005e55a:	d002      	beq.n	1005e562 <EADV_start_request_radio_tasks+0x4e>
1005e55c:	7830      	ldrb	r0, [r6, #0]
1005e55e:	f7fa fbee 	bl	10058d3e <llc_conn_release_conn_idx>
1005e562:	7e20      	ldrb	r0, [r4, #24]
1005e564:	f000 fde8 	bl	1005f138 <LL_sched_release_taskslot>
1005e568:	2107      	movs	r1, #7
1005e56a:	e009      	b.n	1005e580 <EADV_start_request_radio_tasks+0x6c>
1005e56c:	2107      	movs	r1, #7
1005e56e:	2f00      	cmp	r7, #0
1005e570:	d006      	beq.n	1005e580 <EADV_start_request_radio_tasks+0x6c>
1005e572:	7830      	ldrb	r0, [r6, #0]
1005e574:	460c      	mov	r4, r1
1005e576:	f7fa fbe2 	bl	10058d3e <llc_conn_release_conn_idx>
1005e57a:	4621      	mov	r1, r4
1005e57c:	e000      	b.n	1005e580 <EADV_start_request_radio_tasks+0x6c>
1005e57e:	210c      	movs	r1, #12
1005e580:	4608      	mov	r0, r1
1005e582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005e584 <llc_get_channel_sel_algo2_enabled>:
1005e584:	b580      	push	{r7, lr}
1005e586:	f000 fad1 	bl	1005eb2c <llc_get_linkms_cntxt_p>
1005e58a:	214e      	movs	r1, #78	@ 0x4e
1005e58c:	5c40      	ldrb	r0, [r0, r1]
1005e58e:	bd80      	pop	{r7, pc}

1005e590 <llc_eadv_max_supported_data_check_ucfg_weak>:
1005e590:	2000      	movs	r0, #0
1005e592:	4770      	bx	lr

1005e594 <LL_eadv_start_extended_ucfg_weak>:
1005e594:	4770      	bx	lr

1005e596 <ext_adv_scan_enabled_ucfg_weak>:
1005e596:	2000      	movs	r0, #0
1005e598:	4770      	bx	lr

1005e59a <BLE_STACK_EndOfRadioActivityCb>:
1005e59a:	4770      	bx	lr

1005e59c <BLE_STACK_RadioHandler>:
1005e59c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e59e:	b083      	sub	sp, #12
1005e5a0:	4604      	mov	r4, r0
1005e5a2:	484c      	ldr	r0, [pc, #304]	@ (1005e6d4 <__arm_cp.1_0>)
1005e5a4:	6004      	str	r4, [r0, #0]
1005e5a6:	4620      	mov	r0, r4
1005e5a8:	f7e8 feb9 	bl	1004731e <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>
1005e5ac:	4605      	mov	r5, r0
1005e5ae:	4620      	mov	r0, r4
1005e5b0:	f7e8 fe85 	bl	100472be <BLEPLAT_CNTR_IntGetIntStatusDone>
1005e5b4:	4606      	mov	r6, r0
1005e5b6:	4668      	mov	r0, sp
1005e5b8:	f7e7 fe82 	bl	100462c0 <BLEPLAT_GetAnchorPoint>
1005e5bc:	9900      	ldr	r1, [sp, #0]
1005e5be:	1a09      	subs	r1, r1, r0
1005e5c0:	0b4b      	lsrs	r3, r1, #13
1005e5c2:	4945      	ldr	r1, [pc, #276]	@ (1005e6d8 <__arm_cp.1_1>)
1005e5c4:	680a      	ldr	r2, [r1, #0]
1005e5c6:	4611      	mov	r1, r2
1005e5c8:	31d8      	adds	r1, #216	@ 0xd8
1005e5ca:	2b00      	cmp	r3, #0
1005e5cc:	d102      	bne.n	1005e5d4 <BLE_STACK_RadioHandler+0x38>
1005e5ce:	6010      	str	r0, [r2, #0]
1005e5d0:	2001      	movs	r0, #1
1005e5d2:	e000      	b.n	1005e5d6 <BLE_STACK_RadioHandler+0x3a>
1005e5d4:	2000      	movs	r0, #0
1005e5d6:	7008      	strb	r0, [r1, #0]
1005e5d8:	4840      	ldr	r0, [pc, #256]	@ (1005e6dc <__arm_cp.1_2>)
1005e5da:	6800      	ldr	r0, [r0, #0]
1005e5dc:	7b44      	ldrb	r4, [r0, #13]
1005e5de:	2100      	movs	r1, #0
1005e5e0:	2cff      	cmp	r4, #255	@ 0xff
1005e5e2:	d00a      	beq.n	1005e5fa <BLE_STACK_RadioHandler+0x5e>
1005e5e4:	202c      	movs	r0, #44	@ 0x2c
1005e5e6:	4360      	muls	r0, r4
1005e5e8:	4a3d      	ldr	r2, [pc, #244]	@ (1005e6e0 <__arm_cp.1_3>)
1005e5ea:	6812      	ldr	r2, [r2, #0]
1005e5ec:	1810      	adds	r0, r2, r0
1005e5ee:	7c82      	ldrb	r2, [r0, #18]
1005e5f0:	2a00      	cmp	r2, #0
1005e5f2:	d002      	beq.n	1005e5fa <BLE_STACK_RadioHandler+0x5e>
1005e5f4:	6a41      	ldr	r1, [r0, #36]	@ 0x24
1005e5f6:	68c0      	ldr	r0, [r0, #12]
1005e5f8:	e7ff      	b.n	1005e5fa <BLE_STACK_RadioHandler+0x5e>
1005e5fa:	2701      	movs	r7, #1
1005e5fc:	2e00      	cmp	r6, #0
1005e5fe:	d003      	beq.n	1005e608 <BLE_STACK_RadioHandler+0x6c>
1005e600:	2d00      	cmp	r5, #0
1005e602:	d101      	bne.n	1005e608 <BLE_STACK_RadioHandler+0x6c>
1005e604:	2900      	cmp	r1, #0
1005e606:	e011      	b.n	1005e62c <BLE_STACK_RadioHandler+0x90>
1005e608:	2d00      	cmp	r5, #0
1005e60a:	d015      	beq.n	1005e638 <BLE_STACK_RadioHandler+0x9c>
1005e60c:	4a35      	ldr	r2, [pc, #212]	@ (1005e6e4 <__arm_cp.1_4>)
1005e60e:	1a8b      	subs	r3, r1, r2
1005e610:	425a      	negs	r2, r3
1005e612:	415a      	adcs	r2, r3
1005e614:	4b34      	ldr	r3, [pc, #208]	@ (1005e6e8 <__arm_cp.1_5>)
1005e616:	1acd      	subs	r5, r1, r3
1005e618:	426b      	negs	r3, r5
1005e61a:	416b      	adcs	r3, r5
1005e61c:	4d33      	ldr	r5, [pc, #204]	@ (1005e6ec <__arm_cp.1_6>)
1005e61e:	1b4e      	subs	r6, r1, r5
1005e620:	4275      	negs	r5, r6
1005e622:	4175      	adcs	r5, r6
1005e624:	2900      	cmp	r1, #0
1005e626:	d007      	beq.n	1005e638 <BLE_STACK_RadioHandler+0x9c>
1005e628:	4313      	orrs	r3, r2
1005e62a:	431d      	orrs	r5, r3
1005e62c:	4e2a      	ldr	r6, [pc, #168]	@ (1005e6d8 <__arm_cp.1_1>)
1005e62e:	4d29      	ldr	r5, [pc, #164]	@ (1005e6d4 <__arm_cp.1_0>)
1005e630:	d004      	beq.n	1005e63c <BLE_STACK_RadioHandler+0xa0>
1005e632:	4788      	blx	r1
1005e634:	2700      	movs	r7, #0
1005e636:	e001      	b.n	1005e63c <BLE_STACK_RadioHandler+0xa0>
1005e638:	4e27      	ldr	r6, [pc, #156]	@ (1005e6d8 <__arm_cp.1_1>)
1005e63a:	4d26      	ldr	r5, [pc, #152]	@ (1005e6d4 <__arm_cp.1_0>)
1005e63c:	6828      	ldr	r0, [r5, #0]
1005e63e:	f7e8 fe62 	bl	10047306 <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>
1005e642:	2800      	cmp	r0, #0
1005e644:	d001      	beq.n	1005e64a <BLE_STACK_RadioHandler+0xae>
1005e646:	2504      	movs	r5, #4
1005e648:	e020      	b.n	1005e68c <BLE_STACK_RadioHandler+0xf0>
1005e64a:	6828      	ldr	r0, [r5, #0]
1005e64c:	f7e8 fe16 	bl	1004727c <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>
1005e650:	2800      	cmp	r0, #0
1005e652:	d001      	beq.n	1005e658 <BLE_STACK_RadioHandler+0xbc>
1005e654:	2501      	movs	r5, #1
1005e656:	e019      	b.n	1005e68c <BLE_STACK_RadioHandler+0xf0>
1005e658:	6828      	ldr	r0, [r5, #0]
1005e65a:	f7e8 fe1b 	bl	10047294 <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>
1005e65e:	2800      	cmp	r0, #0
1005e660:	d001      	beq.n	1005e666 <BLE_STACK_RadioHandler+0xca>
1005e662:	2502      	movs	r5, #2
1005e664:	e012      	b.n	1005e68c <BLE_STACK_RadioHandler+0xf0>
1005e666:	6828      	ldr	r0, [r5, #0]
1005e668:	f7e8 fe65 	bl	10047336 <BLEPLAT_CNTR_IntGetIntStatusTxError1>
1005e66c:	4629      	mov	r1, r5
1005e66e:	2505      	movs	r5, #5
1005e670:	2800      	cmp	r0, #0
1005e672:	d10b      	bne.n	1005e68c <BLE_STACK_RadioHandler+0xf0>
1005e674:	6808      	ldr	r0, [r1, #0]
1005e676:	f7e8 fe6a 	bl	1004734e <BLEPLAT_CNTR_IntGetIntStatusTxError3>
1005e67a:	2800      	cmp	r0, #0
1005e67c:	d106      	bne.n	1005e68c <BLE_STACK_RadioHandler+0xf0>
1005e67e:	4815      	ldr	r0, [pc, #84]	@ (1005e6d4 <__arm_cp.1_0>)
1005e680:	6800      	ldr	r0, [r0, #0]
1005e682:	f7e8 fded 	bl	10047260 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>
1005e686:	2800      	cmp	r0, #0
1005e688:	d020      	beq.n	1005e6cc <BLE_STACK_RadioHandler+0x130>
1005e68a:	2500      	movs	r5, #0
1005e68c:	2001      	movs	r0, #1
1005e68e:	40a8      	lsls	r0, r5
1005e690:	4917      	ldr	r1, [pc, #92]	@ (1005e6f0 <__arm_cp.1_7>)
1005e692:	6809      	ldr	r1, [r1, #0]
1005e694:	680a      	ldr	r2, [r1, #0]
1005e696:	4302      	orrs	r2, r0
1005e698:	600a      	str	r2, [r1, #0]
1005e69a:	2000      	movs	r0, #0
1005e69c:	f003 ff0c 	bl	100624b8 <tsk_notify_idx>
1005e6a0:	f7e5 fa3b 	bl	10043b1a <BLE_STACK_ProcessRequest>
1005e6a4:	f7e7 fe03 	bl	100462ae <BLEPLAT_ClearRadioTimerValue>
1005e6a8:	4620      	mov	r0, r4
1005e6aa:	f000 fb1f 	bl	1005ecec <LL_sched_engine>
1005e6ae:	6834      	ldr	r4, [r6, #0]
1005e6b0:	7d60      	ldrb	r0, [r4, #21]
1005e6b2:	2801      	cmp	r0, #1
1005e6b4:	d108      	bne.n	1005e6c8 <BLE_STACK_RadioHandler+0x12c>
1005e6b6:	7c21      	ldrb	r1, [r4, #16]
1005e6b8:	200f      	movs	r0, #15
1005e6ba:	4008      	ands	r0, r1
1005e6bc:	68e2      	ldr	r2, [r4, #12]
1005e6be:	0909      	lsrs	r1, r1, #4
1005e6c0:	f7ff ff6b 	bl	1005e59a <BLE_STACK_EndOfRadioActivityCb>
1005e6c4:	2000      	movs	r0, #0
1005e6c6:	7560      	strb	r0, [r4, #21]
1005e6c8:	b003      	add	sp, #12
1005e6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005e6cc:	2f00      	cmp	r7, #0
1005e6ce:	d1e9      	bne.n	1005e6a4 <BLE_STACK_RadioHandler+0x108>
1005e6d0:	e7ed      	b.n	1005e6ae <BLE_STACK_RadioHandler+0x112>
1005e6d2:	46c0      	nop			@ (mov r8, r8)

1005e6d4 <__arm_cp.1_0>:
1005e6d4:	200010f0 	.word	0x200010f0

1005e6d8 <__arm_cp.1_1>:
1005e6d8:	200010f4 	.word	0x200010f4

1005e6dc <__arm_cp.1_2>:
1005e6dc:	200010f8 	.word	0x200010f8

1005e6e0 <__arm_cp.1_3>:
1005e6e0:	200010fc 	.word	0x200010fc

1005e6e4 <__arm_cp.1_4>:
1005e6e4:	10066215 	.word	0x10066215

1005e6e8 <__arm_cp.1_5>:
1005e6e8:	100661b9 	.word	0x100661b9

1005e6ec <__arm_cp.1_6>:
1005e6ec:	10066219 	.word	0x10066219

1005e6f0 <__arm_cp.1_7>:
1005e6f0:	200010a4 	.word	0x200010a4

1005e6f4 <LL_link_calculate_window_widening_from_ppm>:
1005e6f4:	22ff      	movs	r2, #255	@ 0xff
1005e6f6:	320e      	adds	r2, #14
1005e6f8:	4342      	muls	r2, r0
1005e6fa:	0a10      	lsrs	r0, r2, #8
1005e6fc:	0889      	lsrs	r1, r1, #2
1005e6fe:	4341      	muls	r1, r0
1005e700:	0c88      	lsrs	r0, r1, #18
1005e702:	1c40      	adds	r0, r0, #1
1005e704:	4770      	bx	lr
	...

1005e708 <LL_link_calc_packetlength>:
1005e708:	2804      	cmp	r0, #4
1005e70a:	d005      	beq.n	1005e718 <LL_link_calc_packetlength+0x10>
1005e70c:	2801      	cmp	r0, #1
1005e70e:	d106      	bne.n	1005e71e <LL_link_calc_packetlength+0x16>
1005e710:	20ff      	movs	r0, #255	@ 0xff
1005e712:	30a4      	adds	r0, #164	@ 0xa4
1005e714:	4a07      	ldr	r2, [pc, #28]	@ (1005e734 <__arm_cp.7_2>)
1005e716:	e004      	b.n	1005e722 <LL_link_calc_packetlength+0x1a>
1005e718:	4a04      	ldr	r2, [pc, #16]	@ (1005e72c <__arm_cp.7_0>)
1005e71a:	4805      	ldr	r0, [pc, #20]	@ (1005e730 <__arm_cp.7_1>)
1005e71c:	e001      	b.n	1005e722 <LL_link_calc_packetlength+0x1a>
1005e71e:	4a06      	ldr	r2, [pc, #24]	@ (1005e738 <__arm_cp.7_3>)
1005e720:	4806      	ldr	r0, [pc, #24]	@ (1005e73c <__arm_cp.7_4>)
1005e722:	4341      	muls	r1, r0
1005e724:	1888      	adds	r0, r1, r2
1005e726:	0a00      	lsrs	r0, r0, #8
1005e728:	4770      	bx	lr
1005e72a:	46c0      	nop			@ (mov r8, r8)

1005e72c <__arm_cp.7_0>:
1005e72c:	000126e9 	.word	0x000126e9

1005e730 <__arm_cp.7_1>:
1005e730:	00001a38 	.word	0x00001a38

1005e734 <__arm_cp.7_2>:
1005e734:	00001206 	.word	0x00001206

1005e738 <__arm_cp.7_3>:
1005e738:	000020c6 	.word	0x000020c6

1005e73c <__arm_cp.7_4>:
1005e73c:	00000347 	.word	0x00000347

1005e740 <LL_link_get_own_sca_ppm>:
1005e740:	4801      	ldr	r0, [pc, #4]	@ (1005e748 <__arm_cp.8_0>)
1005e742:	6800      	ldr	r0, [r0, #0]
1005e744:	8b00      	ldrh	r0, [r0, #24]
1005e746:	4770      	bx	lr

1005e748 <__arm_cp.8_0>:
1005e748:	200010f4 	.word	0x200010f4

1005e74c <llc_timers_callback_wrapper>:
1005e74c:	b580      	push	{r7, lr}
1005e74e:	6940      	ldr	r0, [r0, #20]
1005e750:	4901      	ldr	r1, [pc, #4]	@ (1005e758 <__arm_cp.4_0>)
1005e752:	f003 ffe8 	bl	10062726 <cst_sharedCallback>
1005e756:	bd80      	pop	{r7, pc}

1005e758 <__arm_cp.4_0>:
1005e758:	1005e75d 	.word	0x1005e75d

1005e75c <llc_timers_callback>:
1005e75c:	b580      	push	{r7, lr}
1005e75e:	4903      	ldr	r1, [pc, #12]	@ (1005e76c <__arm_cp.5_0>)
1005e760:	7ac9      	ldrb	r1, [r1, #11]
1005e762:	4281      	cmp	r1, r0
1005e764:	d901      	bls.n	1005e76a <llc_timers_callback+0xe>
1005e766:	f7fd fe3b 	bl	1005c3e0 <LLC_authenticated_payload_timeout_cb>
1005e76a:	bd80      	pop	{r7, pc}

1005e76c <__arm_cp.5_0>:
1005e76c:	20001108 	.word	0x20001108

1005e770 <LL_init_ucfg_weak>:
1005e770:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e772:	b091      	sub	sp, #68	@ 0x44
1005e774:	9306      	str	r3, [sp, #24]
1005e776:	4614      	mov	r4, r2
1005e778:	910d      	str	r1, [sp, #52]	@ 0x34
1005e77a:	900b      	str	r0, [sp, #44]	@ 0x2c
1005e77c:	48b8      	ldr	r0, [pc, #736]	@ (1005ea60 <__arm_cp.6_0>)
1005e77e:	7ac1      	ldrb	r1, [r0, #11]
1005e780:	910c      	str	r1, [sp, #48]	@ 0x30
1005e782:	7f01      	ldrb	r1, [r0, #28]
1005e784:	9109      	str	r1, [sp, #36]	@ 0x24
1005e786:	7ec1      	ldrb	r1, [r0, #27]
1005e788:	910a      	str	r1, [sp, #40]	@ 0x28
1005e78a:	7e81      	ldrb	r1, [r0, #26]
1005e78c:	9108      	str	r1, [sp, #32]
1005e78e:	7fc7      	ldrb	r7, [r0, #31]
1005e790:	2501      	movs	r5, #1
1005e792:	21e8      	movs	r1, #232	@ 0xe8
1005e794:	4628      	mov	r0, r5
1005e796:	f000 fe89 	bl	1005f4ac <csmem_mem_0_assign>
1005e79a:	4eb2      	ldr	r6, [pc, #712]	@ (1005ea64 <__arm_cp.6_1>)
1005e79c:	6030      	str	r0, [r6, #0]
1005e79e:	2158      	movs	r1, #88	@ 0x58
1005e7a0:	4628      	mov	r0, r5
1005e7a2:	f000 fe83 	bl	1005f4ac <csmem_mem_0_assign>
1005e7a6:	6831      	ldr	r1, [r6, #0]
1005e7a8:	229c      	movs	r2, #156	@ 0x9c
1005e7aa:	9207      	str	r2, [sp, #28]
1005e7ac:	5088      	str	r0, [r1, r2]
1005e7ae:	4638      	mov	r0, r7
1005e7b0:	f007 fca0 	bl	100660f4 <llc_wl_mem_allocate>
1005e7b4:	2107      	movs	r1, #7
1005e7b6:	4039      	ands	r1, r7
1005e7b8:	9806      	ldr	r0, [sp, #24]
1005e7ba:	f007 fcad 	bl	10066118 <llc_priv_mem_allocate>
1005e7be:	981c      	ldr	r0, [sp, #112]	@ 0x70
1005e7c0:	9000      	str	r0, [sp, #0]
1005e7c2:	ab19      	add	r3, sp, #100	@ 0x64
1005e7c4:	cb0e      	ldmia	r3, {r1, r2, r3}
1005e7c6:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005e7c8:	9106      	str	r1, [sp, #24]
1005e7ca:	930d      	str	r3, [sp, #52]	@ 0x34
1005e7cc:	f7f9 fda4 	bl	10058318 <llc_conn_mem_allocate>
1005e7d0:	2c01      	cmp	r4, #1
1005e7d2:	d000      	beq.n	1005e7d6 <LL_init_ucfg_weak+0x66>
1005e7d4:	9508      	str	r5, [sp, #32]
1005e7d6:	2000      	movs	r0, #0
1005e7d8:	2c01      	cmp	r4, #1
1005e7da:	d000      	beq.n	1005e7de <LL_init_ucfg_weak+0x6e>
1005e7dc:	900a      	str	r0, [sp, #40]	@ 0x28
1005e7de:	2c01      	cmp	r4, #1
1005e7e0:	4fa0      	ldr	r7, [pc, #640]	@ (1005ea64 <__arm_cp.6_1>)
1005e7e2:	d000      	beq.n	1005e7e6 <LL_init_ucfg_weak+0x76>
1005e7e4:	9009      	str	r0, [sp, #36]	@ 0x24
1005e7e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
1005e7e8:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005e7ea:	2801      	cmp	r0, #1
1005e7ec:	9205      	str	r2, [sp, #20]
1005e7ee:	d118      	bne.n	1005e822 <LL_init_ucfg_weak+0xb2>
1005e7f0:	2029      	movs	r0, #41	@ 0x29
1005e7f2:	499b      	ldr	r1, [pc, #620]	@ (1005ea60 <__arm_cp.6_0>)
1005e7f4:	5c08      	ldrb	r0, [r1, r0]
1005e7f6:	1e41      	subs	r1, r0, #1
1005e7f8:	4188      	sbcs	r0, r1
1005e7fa:	4310      	orrs	r0, r2
1005e7fc:	d001      	beq.n	1005e802 <LL_init_ucfg_weak+0x92>
1005e7fe:	2530      	movs	r5, #48	@ 0x30
1005e800:	e000      	b.n	1005e804 <LL_init_ucfg_weak+0x94>
1005e802:	2520      	movs	r5, #32
1005e804:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
1005e806:	4630      	mov	r0, r6
1005e808:	4629      	mov	r1, r5
1005e80a:	f000 fe4f 	bl	1005f4ac <csmem_mem_0_assign>
1005e80e:	6839      	ldr	r1, [r7, #0]
1005e810:	2294      	movs	r2, #148	@ 0x94
1005e812:	5088      	str	r0, [r1, r2]
1005e814:	4630      	mov	r0, r6
1005e816:	4629      	mov	r1, r5
1005e818:	f000 fe48 	bl	1005f4ac <csmem_mem_0_assign>
1005e81c:	6839      	ldr	r1, [r7, #0]
1005e81e:	2298      	movs	r2, #152	@ 0x98
1005e820:	5088      	str	r0, [r1, r2]
1005e822:	262c      	movs	r6, #44	@ 0x2c
1005e824:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005e826:	4631      	mov	r1, r6
1005e828:	f000 fe40 	bl	1005f4ac <csmem_mem_0_assign>
1005e82c:	6839      	ldr	r1, [r7, #0]
1005e82e:	22a4      	movs	r2, #164	@ 0xa4
1005e830:	5088      	str	r0, [r1, r2]
1005e832:	2041      	movs	r0, #65	@ 0x41
1005e834:	0082      	lsls	r2, r0, #2
1005e836:	2c01      	cmp	r4, #1
1005e838:	9402      	str	r4, [sp, #8]
1005e83a:	d10a      	bne.n	1005e852 <LL_init_ucfg_weak+0xe2>
1005e83c:	4611      	mov	r1, r2
1005e83e:	3120      	adds	r1, #32
1005e840:	2001      	movs	r0, #1
1005e842:	4614      	mov	r4, r2
1005e844:	f000 fe32 	bl	1005f4ac <csmem_mem_0_assign>
1005e848:	6839      	ldr	r1, [r7, #0]
1005e84a:	228c      	movs	r2, #140	@ 0x8c
1005e84c:	5088      	str	r0, [r1, r2]
1005e84e:	4621      	mov	r1, r4
1005e850:	e038      	b.n	1005e8c4 <LL_init_ucfg_weak+0x154>
1005e852:	2125      	movs	r1, #37	@ 0x25
1005e854:	4882      	ldr	r0, [pc, #520]	@ (1005ea60 <__arm_cp.6_0>)
1005e856:	910c      	str	r1, [sp, #48]	@ 0x30
1005e858:	5c41      	ldrb	r1, [r0, r1]
1005e85a:	4610      	mov	r0, r2
1005e85c:	3020      	adds	r0, #32
1005e85e:	2900      	cmp	r1, #0
1005e860:	9201      	str	r2, [sp, #4]
1005e862:	d001      	beq.n	1005e868 <LL_init_ucfg_weak+0xf8>
1005e864:	4601      	mov	r1, r0
1005e866:	e000      	b.n	1005e86a <LL_init_ucfg_weak+0xfa>
1005e868:	2144      	movs	r1, #68	@ 0x44
1005e86a:	2726      	movs	r7, #38	@ 0x26
1005e86c:	4a7c      	ldr	r2, [pc, #496]	@ (1005ea60 <__arm_cp.6_0>)
1005e86e:	5dd2      	ldrb	r2, [r2, r7]
1005e870:	2a00      	cmp	r2, #0
1005e872:	d000      	beq.n	1005e876 <LL_init_ucfg_weak+0x106>
1005e874:	4601      	mov	r1, r0
1005e876:	2529      	movs	r5, #41	@ 0x29
1005e878:	4a79      	ldr	r2, [pc, #484]	@ (1005ea60 <__arm_cp.6_0>)
1005e87a:	5d52      	ldrb	r2, [r2, r5]
1005e87c:	2a00      	cmp	r2, #0
1005e87e:	d000      	beq.n	1005e882 <LL_init_ucfg_weak+0x112>
1005e880:	4601      	mov	r1, r0
1005e882:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1005e884:	2a01      	cmp	r2, #1
1005e886:	d100      	bne.n	1005e88a <LL_init_ucfg_weak+0x11a>
1005e888:	4601      	mov	r1, r0
1005e88a:	2001      	movs	r0, #1
1005e88c:	f000 fe0e 	bl	1005f4ac <csmem_mem_0_assign>
1005e890:	4974      	ldr	r1, [pc, #464]	@ (1005ea64 <__arm_cp.6_1>)
1005e892:	6809      	ldr	r1, [r1, #0]
1005e894:	228c      	movs	r2, #140	@ 0x8c
1005e896:	5088      	str	r0, [r1, r2]
1005e898:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005e89a:	2801      	cmp	r0, #1
1005e89c:	9c01      	ldr	r4, [sp, #4]
1005e89e:	4621      	mov	r1, r4
1005e8a0:	d010      	beq.n	1005e8c4 <LL_init_ucfg_weak+0x154>
1005e8a2:	486f      	ldr	r0, [pc, #444]	@ (1005ea60 <__arm_cp.6_0>)
1005e8a4:	5d40      	ldrb	r0, [r0, r5]
1005e8a6:	2800      	cmp	r0, #0
1005e8a8:	4621      	mov	r1, r4
1005e8aa:	d10b      	bne.n	1005e8c4 <LL_init_ucfg_weak+0x154>
1005e8ac:	486c      	ldr	r0, [pc, #432]	@ (1005ea60 <__arm_cp.6_0>)
1005e8ae:	5dc0      	ldrb	r0, [r0, r7]
1005e8b0:	2800      	cmp	r0, #0
1005e8b2:	4621      	mov	r1, r4
1005e8b4:	d106      	bne.n	1005e8c4 <LL_init_ucfg_weak+0x154>
1005e8b6:	486a      	ldr	r0, [pc, #424]	@ (1005ea60 <__arm_cp.6_0>)
1005e8b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005e8ba:	5c40      	ldrb	r0, [r0, r1]
1005e8bc:	2800      	cmp	r0, #0
1005e8be:	d000      	beq.n	1005e8c2 <LL_init_ucfg_weak+0x152>
1005e8c0:	4626      	mov	r6, r4
1005e8c2:	4631      	mov	r1, r6
1005e8c4:	9818      	ldr	r0, [sp, #96]	@ 0x60
1005e8c6:	900b      	str	r0, [sp, #44]	@ 0x2c
1005e8c8:	9816      	ldr	r0, [sp, #88]	@ 0x58
1005e8ca:	9003      	str	r0, [sp, #12]
1005e8cc:	2601      	movs	r6, #1
1005e8ce:	4d66      	ldr	r5, [pc, #408]	@ (1005ea68 <__arm_cp.6_2>)
1005e8d0:	4630      	mov	r0, r6
1005e8d2:	47a8      	blx	r5
1005e8d4:	4f63      	ldr	r7, [pc, #396]	@ (1005ea64 <__arm_cp.6_1>)
1005e8d6:	6839      	ldr	r1, [r7, #0]
1005e8d8:	2290      	movs	r2, #144	@ 0x90
1005e8da:	5088      	str	r0, [r1, r2]
1005e8dc:	2110      	movs	r1, #16
1005e8de:	4630      	mov	r0, r6
1005e8e0:	47a8      	blx	r5
1005e8e2:	6839      	ldr	r1, [r7, #0]
1005e8e4:	22a0      	movs	r2, #160	@ 0xa0
1005e8e6:	9204      	str	r2, [sp, #16]
1005e8e8:	5088      	str	r0, [r1, r2]
1005e8ea:	2104      	movs	r1, #4
1005e8ec:	4630      	mov	r0, r6
1005e8ee:	47a8      	blx	r5
1005e8f0:	6839      	ldr	r1, [r7, #0]
1005e8f2:	22a8      	movs	r2, #168	@ 0xa8
1005e8f4:	5088      	str	r0, [r1, r2]
1005e8f6:	2134      	movs	r1, #52	@ 0x34
1005e8f8:	960c      	str	r6, [sp, #48]	@ 0x30
1005e8fa:	4630      	mov	r0, r6
1005e8fc:	47a8      	blx	r5
1005e8fe:	6839      	ldr	r1, [r7, #0]
1005e900:	22ac      	movs	r2, #172	@ 0xac
1005e902:	5088      	str	r0, [r1, r2]
1005e904:	9808      	ldr	r0, [sp, #32]
1005e906:	b2c7      	uxtb	r7, r0
1005e908:	1f21      	subs	r1, r4, #4
1005e90a:	4638      	mov	r0, r7
1005e90c:	47a8      	blx	r5
1005e90e:	4605      	mov	r5, r0
1005e910:	9c02      	ldr	r4, [sp, #8]
1005e912:	2c01      	cmp	r4, #1
1005e914:	d105      	bne.n	1005e922 <LL_init_ucfg_weak+0x1b2>
1005e916:	215c      	movs	r1, #92	@ 0x5c
1005e918:	4638      	mov	r0, r7
1005e91a:	f000 fdc7 	bl	1005f4ac <csmem_mem_0_assign>
1005e91e:	4602      	mov	r2, r0
1005e920:	e000      	b.n	1005e924 <LL_init_ucfg_weak+0x1b4>
1005e922:	2200      	movs	r2, #0
1005e924:	4638      	mov	r0, r7
1005e926:	4629      	mov	r1, r5
1005e928:	f7fe feea 	bl	1005d700 <EADV_init>
1005e92c:	ab10      	add	r3, sp, #64	@ 0x40
1005e92e:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005e930:	70d8      	strb	r0, [r3, #3]
1005e932:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005e934:	7098      	strb	r0, [r3, #2]
1005e936:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1005e938:	705e      	strb	r6, [r3, #1]
1005e93a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005e93c:	7018      	strb	r0, [r3, #0]
1005e93e:	4620      	mov	r0, r4
1005e940:	9d05      	ldr	r5, [sp, #20]
1005e942:	4629      	mov	r1, r5
1005e944:	463a      	mov	r2, r7
1005e946:	f007 fbe5 	bl	10066114 <llc_padv_mem_allocate_ucfg_weak>
1005e94a:	9f03      	ldr	r7, [sp, #12]
1005e94c:	4638      	mov	r0, r7
1005e94e:	4621      	mov	r1, r4
1005e950:	f7fb f8c7 	bl	10059ae2 <llc_scan_mem_allocate_ucfg_weak>
1005e954:	4638      	mov	r0, r7
1005e956:	4621      	mov	r1, r4
1005e958:	462a      	mov	r2, r5
1005e95a:	f007 fc3e 	bl	100661da <llc_pscan_mem_allocate_ucfg_weak>
1005e95e:	4638      	mov	r0, r7
1005e960:	4621      	mov	r1, r4
1005e962:	462a      	mov	r2, r5
1005e964:	4633      	mov	r3, r6
1005e966:	f7fd fdfd 	bl	1005c564 <llc_past_mem_allocate_ucfg_weak>
1005e96a:	9600      	str	r6, [sp, #0]
1005e96c:	463e      	mov	r6, r7
1005e96e:	4638      	mov	r0, r7
1005e970:	4621      	mov	r1, r4
1005e972:	462a      	mov	r2, r5
1005e974:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1005e976:	f007 fc33 	bl	100661e0 <llc_pscan_wr_mem_allocate_ucfg_weak>
1005e97a:	f7fb f898 	bl	10059aae <llc_iso_cmn_mem_alloc_ucfg_weak>
1005e97e:	2c01      	cmp	r4, #1
1005e980:	d107      	bne.n	1005e992 <LL_init_ucfg_weak+0x222>
1005e982:	2d01      	cmp	r5, #1
1005e984:	d105      	bne.n	1005e992 <LL_init_ucfg_weak+0x222>
1005e986:	f006 fd15 	bl	100653b4 <llc_big_brc_mem_alloc_ucfg_weak>
1005e98a:	2e01      	cmp	r6, #1
1005e98c:	d101      	bne.n	1005e992 <LL_init_ucfg_weak+0x222>
1005e98e:	f006 fd12 	bl	100653b6 <llc_big_sync_mem_alloc_ucfg_weak>
1005e992:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005e994:	2801      	cmp	r0, #1
1005e996:	4f33      	ldr	r7, [pc, #204]	@ (1005ea64 <__arm_cp.6_1>)
1005e998:	d101      	bne.n	1005e99e <LL_init_ucfg_weak+0x22e>
1005e99a:	f006 fd0d 	bl	100653b8 <llc_cig_cmn_mem_alloc_ucfg_weak>
1005e99e:	f7fb f87f 	bl	10059aa0 <llc_isoal_mem_alloc_ucfg_weak>
1005e9a2:	9806      	ldr	r0, [sp, #24]
1005e9a4:	4631      	mov	r1, r6
1005e9a6:	4622      	mov	r2, r4
1005e9a8:	462b      	mov	r3, r5
1005e9aa:	f7fe fd6a 	bl	1005d482 <llc_cte_mem_allocate_ucfg_weak>
1005e9ae:	4e2c      	ldr	r6, [pc, #176]	@ (1005ea60 <__arm_cp.6_0>)
1005e9b0:	7af0      	ldrb	r0, [r6, #11]
1005e9b2:	1c41      	adds	r1, r0, #1
1005e9b4:	4d2d      	ldr	r5, [pc, #180]	@ (1005ea6c <__arm_cp.6_3>)
1005e9b6:	4628      	mov	r0, r5
1005e9b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1005e9ba:	f000 fd65 	bl	1005f488 <csmem_mem_assign>
1005e9be:	6839      	ldr	r1, [r7, #0]
1005e9c0:	22d0      	movs	r2, #208	@ 0xd0
1005e9c2:	5088      	str	r0, [r1, r2]
1005e9c4:	7af1      	ldrb	r1, [r6, #11]
1005e9c6:	2202      	movs	r2, #2
1005e9c8:	4628      	mov	r0, r5
1005e9ca:	f000 fd5d 	bl	1005f488 <csmem_mem_assign>
1005e9ce:	6839      	ldr	r1, [r7, #0]
1005e9d0:	460a      	mov	r2, r1
1005e9d2:	32a0      	adds	r2, #160	@ 0xa0
1005e9d4:	6350      	str	r0, [r2, #52]	@ 0x34
1005e9d6:	9804      	ldr	r0, [sp, #16]
1005e9d8:	5808      	ldr	r0, [r1, r0]
1005e9da:	6078      	str	r0, [r7, #4]
1005e9dc:	6850      	ldr	r0, [r2, #4]
1005e9de:	60b8      	str	r0, [r7, #8]
1005e9e0:	4620      	mov	r0, r4
1005e9e2:	f7fb f87d 	bl	10059ae0 <llc_scan_init_ucfg_weak>
1005e9e6:	f007 fbf7 	bl	100661d8 <llc_pscan_init_ucfg_weak>
1005e9ea:	f000 f8e3 	bl	1005ebb4 <LL_sched_init>
1005e9ee:	f7fe fd4d 	bl	1005d48c <LL_dtm_init>
1005e9f2:	f007 fb90 	bl	10066116 <llc_padv_init_ucfg_weak>
1005e9f6:	f7fe fd43 	bl	1005d480 <llc_cte_init_ucfg_weak>
1005e9fa:	f7f8 fc2f 	bl	1005725c <HCI_Init>
1005e9fe:	f7e7 fbf6 	bl	100461ee <BLEPLAT_GetDefaultPALevel>
1005ea02:	6839      	ldr	r1, [r7, #0]
1005ea04:	2400      	movs	r4, #0
1005ea06:	728c      	strb	r4, [r1, #10]
1005ea08:	7248      	strb	r0, [r1, #9]
1005ea0a:	4620      	mov	r0, r4
1005ea0c:	f7e7 fbf7 	bl	100461fe <BLEPLAT_SetHighPower>
1005ea10:	f7f3 ff58 	bl	100528c4 <ble_HAL_Init>
1005ea14:	6838      	ldr	r0, [r7, #0]
1005ea16:	6e40      	ldr	r0, [r0, #100]	@ 0x64
1005ea18:	f7fd fda8 	bl	1005c56c <LLC_pcl_hal_cntxt_init_ucfg_weak>
1005ea1c:	6838      	ldr	r0, [r7, #0]
1005ea1e:	9d07      	ldr	r5, [sp, #28]
1005ea20:	5940      	ldr	r0, [r0, r5]
1005ea22:	300c      	adds	r0, #12
1005ea24:	f004 f83b 	bl	10062a9e <addr8_list_clear>
1005ea28:	463e      	mov	r6, r7
1005ea2a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
1005ea2c:	4638      	mov	r0, r7
1005ea2e:	f7fb f844 	bl	10059aba <llc_priv_init_ucfg_weak>
1005ea32:	6830      	ldr	r0, [r6, #0]
1005ea34:	5941      	ldr	r1, [r0, r5]
1005ea36:	2240      	movs	r2, #64	@ 0x40
1005ea38:	548c      	strb	r4, [r1, r2]
1005ea3a:	4a09      	ldr	r2, [pc, #36]	@ (1005ea60 <__arm_cp.6_0>)
1005ea3c:	8b12      	ldrh	r2, [r2, #24]
1005ea3e:	8302      	strh	r2, [r0, #24]
1005ea40:	201f      	movs	r0, #31
1005ea42:	900f      	str	r0, [sp, #60]	@ 0x3c
1005ea44:	43e0      	mvns	r0, r4
1005ea46:	900e      	str	r0, [sp, #56]	@ 0x38
1005ea48:	3148      	adds	r1, #72	@ 0x48
1005ea4a:	a80e      	add	r0, sp, #56	@ 0x38
1005ea4c:	2205      	movs	r2, #5
1005ea4e:	f003 febb 	bl	100627c8 <char_copy>
1005ea52:	6830      	ldr	r0, [r6, #0]
1005ea54:	5940      	ldr	r0, [r0, r5]
1005ea56:	02f9      	lsls	r1, r7, #11
1005ea58:	2254      	movs	r2, #84	@ 0x54
1005ea5a:	5281      	strh	r1, [r0, r2]
1005ea5c:	b011      	add	sp, #68	@ 0x44
1005ea5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005ea60 <__arm_cp.6_0>:
1005ea60:	20001108 	.word	0x20001108

1005ea64 <__arm_cp.6_1>:
1005ea64:	200010f4 	.word	0x200010f4

1005ea68 <__arm_cp.6_2>:
1005ea68:	1005f4ad 	.word	0x1005f4ad

1005ea6c <__arm_cp.6_3>:
1005ea6c:	20001104 	.word	0x20001104

1005ea70 <LL_init>:
1005ea70:	b5b0      	push	{r4, r5, r7, lr}
1005ea72:	b088      	sub	sp, #32
1005ea74:	9c12      	ldr	r4, [sp, #72]	@ 0x48
1005ea76:	9406      	str	r4, [sp, #24]
1005ea78:	9c11      	ldr	r4, [sp, #68]	@ 0x44
1005ea7a:	9405      	str	r4, [sp, #20]
1005ea7c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
1005ea7e:	9504      	str	r5, [sp, #16]
1005ea80:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1005ea82:	9503      	str	r5, [sp, #12]
1005ea84:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1005ea86:	9502      	str	r5, [sp, #8]
1005ea88:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
1005ea8a:	9501      	str	r5, [sp, #4]
1005ea8c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
1005ea8e:	9500      	str	r5, [sp, #0]
1005ea90:	f7ff fe6e 	bl	1005e770 <LL_init_ucfg_weak>
1005ea94:	2c01      	cmp	r4, #1
1005ea96:	d112      	bne.n	1005eabe <LL_init+0x4e>
1005ea98:	f007 fba0 	bl	100661dc <llc_pscan_wr_init_ucfg_weak>
1005ea9c:	f7f9 fb4c 	bl	10058138 <llc_conn_init>
1005eaa0:	f7f2 fecb 	bl	1005183a <LL_cpe_init_ucfg>
1005eaa4:	4807      	ldr	r0, [pc, #28]	@ (1005eac4 <__arm_cp.7_0>)
1005eaa6:	7ac1      	ldrb	r1, [r0, #11]
1005eaa8:	4807      	ldr	r0, [pc, #28]	@ (1005eac8 <__arm_cp.7_1>)
1005eaaa:	6800      	ldr	r0, [r0, #0]
1005eaac:	30b0      	adds	r0, #176	@ 0xb0
1005eaae:	4a07      	ldr	r2, [pc, #28]	@ (1005eacc <__arm_cp.7_2>)
1005eab0:	2305      	movs	r3, #5
1005eab2:	f003 fd5f 	bl	10062574 <CST_init>
1005eab6:	f7f3 ff85 	bl	100529c4 <Acl_Init>
1005eaba:	f7fc f8f6 	bl	1005acaa <LLC_chc_ll_cntxt_init_ucfg_weak>
1005eabe:	b008      	add	sp, #32
1005eac0:	bdb0      	pop	{r4, r5, r7, pc}
1005eac2:	46c0      	nop			@ (mov r8, r8)

1005eac4 <__arm_cp.7_0>:
1005eac4:	20001108 	.word	0x20001108

1005eac8 <__arm_cp.7_1>:
1005eac8:	200010f4 	.word	0x200010f4

1005eacc <__arm_cp.7_2>:
1005eacc:	1005e74d 	.word	0x1005e74d

1005ead0 <Is_Address_Initialized>:
1005ead0:	2100      	movs	r1, #0
1005ead2:	460a      	mov	r2, r1
1005ead4:	2906      	cmp	r1, #6
1005ead6:	d005      	beq.n	1005eae4 <Is_Address_Initialized+0x14>
1005ead8:	5c43      	ldrb	r3, [r0, r1]
1005eada:	2b00      	cmp	r3, #0
1005eadc:	d000      	beq.n	1005eae0 <Is_Address_Initialized+0x10>
1005eade:	2201      	movs	r2, #1
1005eae0:	1c49      	adds	r1, r1, #1
1005eae2:	e7f7      	b.n	1005ead4 <Is_Address_Initialized+0x4>
1005eae4:	b2d0      	uxtb	r0, r2
1005eae6:	4770      	bx	lr

1005eae8 <get_rf_rx_path_compensation_db>:
1005eae8:	4804      	ldr	r0, [pc, #16]	@ (1005eafc <__arm_cp.10_0>)
1005eaea:	6800      	ldr	r0, [r0, #0]
1005eaec:	215e      	movs	r1, #94	@ 0x5e
1005eaee:	5e40      	ldrsh	r0, [r0, r1]
1005eaf0:	210d      	movs	r1, #13
1005eaf2:	4341      	muls	r1, r0
1005eaf4:	3140      	adds	r1, #64	@ 0x40
1005eaf6:	11c8      	asrs	r0, r1, #7
1005eaf8:	4770      	bx	lr
1005eafa:	46c0      	nop			@ (mov r8, r8)

1005eafc <__arm_cp.10_0>:
1005eafc:	200010f4 	.word	0x200010f4

1005eb00 <LL_get_tx_common_buffer_p>:
1005eb00:	4802      	ldr	r0, [pc, #8]	@ (1005eb0c <__arm_cp.11_0>)
1005eb02:	6800      	ldr	r0, [r0, #0]
1005eb04:	218c      	movs	r1, #140	@ 0x8c
1005eb06:	5840      	ldr	r0, [r0, r1]
1005eb08:	4770      	bx	lr
1005eb0a:	46c0      	nop			@ (mov r8, r8)

1005eb0c <__arm_cp.11_0>:
1005eb0c:	200010f4 	.word	0x200010f4

1005eb10 <LL_get_rx_common_buffer_p>:
1005eb10:	4802      	ldr	r0, [pc, #8]	@ (1005eb1c <__arm_cp.12_0>)
1005eb12:	6800      	ldr	r0, [r0, #0]
1005eb14:	2190      	movs	r1, #144	@ 0x90
1005eb16:	5840      	ldr	r0, [r0, r1]
1005eb18:	4770      	bx	lr
1005eb1a:	46c0      	nop			@ (mov r8, r8)

1005eb1c <__arm_cp.12_0>:
1005eb1c:	200010f4 	.word	0x200010f4

1005eb20 <LL_get_control_pdu_size>:
1005eb20:	2800      	cmp	r0, #0
1005eb22:	d001      	beq.n	1005eb28 <LL_get_control_pdu_size+0x8>
1005eb24:	2030      	movs	r0, #48	@ 0x30
1005eb26:	4770      	bx	lr
1005eb28:	2020      	movs	r0, #32
1005eb2a:	4770      	bx	lr

1005eb2c <llc_get_linkms_cntxt_p>:
1005eb2c:	4802      	ldr	r0, [pc, #8]	@ (1005eb38 <__arm_cp.15_0>)
1005eb2e:	6800      	ldr	r0, [r0, #0]
1005eb30:	219c      	movs	r1, #156	@ 0x9c
1005eb32:	5840      	ldr	r0, [r0, r1]
1005eb34:	4770      	bx	lr
1005eb36:	46c0      	nop			@ (mov r8, r8)

1005eb38 <__arm_cp.15_0>:
1005eb38:	200010f4 	.word	0x200010f4

1005eb3c <llc_get_next_free_conn_handle>:
1005eb3c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005eb3e:	4815      	ldr	r0, [pc, #84]	@ (1005eb94 <__arm_cp.16_0>)
1005eb40:	6800      	ldr	r0, [r0, #0]
1005eb42:	219c      	movs	r1, #156	@ 0x9c
1005eb44:	9102      	str	r1, [sp, #8]
1005eb46:	5841      	ldr	r1, [r0, r1]
1005eb48:	2054      	movs	r0, #84	@ 0x54
1005eb4a:	9001      	str	r0, [sp, #4]
1005eb4c:	5a08      	ldrh	r0, [r1, r0]
1005eb4e:	6bcf      	ldr	r7, [r1, #60]	@ 0x3c
1005eb50:	4c12      	ldr	r4, [pc, #72]	@ (1005eb9c <__arm_cp.16_2>)
1005eb52:	1c45      	adds	r5, r0, #1
1005eb54:	b2a9      	uxth	r1, r5
1005eb56:	0a09      	lsrs	r1, r1, #8
1005eb58:	290e      	cmp	r1, #14
1005eb5a:	d901      	bls.n	1005eb60 <llc_get_next_free_conn_handle+0x24>
1005eb5c:	490e      	ldr	r1, [pc, #56]	@ (1005eb98 <__arm_cp.16_1>)
1005eb5e:	1845      	adds	r5, r0, r1
1005eb60:	2f00      	cmp	r7, #0
1005eb62:	d00f      	beq.n	1005eb84 <llc_get_next_free_conn_handle+0x48>
1005eb64:	2600      	movs	r6, #0
1005eb66:	6820      	ldr	r0, [r4, #0]
1005eb68:	2134      	movs	r1, #52	@ 0x34
1005eb6a:	5c41      	ldrb	r1, [r0, r1]
1005eb6c:	b2f0      	uxtb	r0, r6
1005eb6e:	4288      	cmp	r0, r1
1005eb70:	d208      	bcs.n	1005eb84 <llc_get_next_free_conn_handle+0x48>
1005eb72:	f7f9 fa99 	bl	100580a8 <llc_conn_get_cntxt_per_p>
1005eb76:	1c76      	adds	r6, r6, #1
1005eb78:	b2a9      	uxth	r1, r5
1005eb7a:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
1005eb7c:	4281      	cmp	r1, r0
1005eb7e:	d1f2      	bne.n	1005eb66 <llc_get_next_free_conn_handle+0x2a>
1005eb80:	4628      	mov	r0, r5
1005eb82:	e7e6      	b.n	1005eb52 <llc_get_next_free_conn_handle+0x16>
1005eb84:	4803      	ldr	r0, [pc, #12]	@ (1005eb94 <__arm_cp.16_0>)
1005eb86:	6800      	ldr	r0, [r0, #0]
1005eb88:	9902      	ldr	r1, [sp, #8]
1005eb8a:	5840      	ldr	r0, [r0, r1]
1005eb8c:	9901      	ldr	r1, [sp, #4]
1005eb8e:	5245      	strh	r5, [r0, r1]
1005eb90:	b2a8      	uxth	r0, r5
1005eb92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005eb94 <__arm_cp.16_0>:
1005eb94:	200010f4 	.word	0x200010f4

1005eb98 <__arm_cp.16_1>:
1005eb98:	fffff102 	.word	0xfffff102

1005eb9c <__arm_cp.16_2>:
1005eb9c:	200010a0 	.word	0x200010a0

1005eba0 <LL_sched_time_t1_ge_t2>:
1005eba0:	43c0      	mvns	r0, r0
1005eba2:	1840      	adds	r0, r0, r1
1005eba4:	0fc0      	lsrs	r0, r0, #31
1005eba6:	4770      	bx	lr

1005eba8 <LL_sched_engine_return_actual_scheduler_margin>:
1005eba8:	4801      	ldr	r0, [pc, #4]	@ (1005ebb0 <__arm_cp.2_0>)
1005ebaa:	6800      	ldr	r0, [r0, #0]
1005ebac:	6880      	ldr	r0, [r0, #8]
1005ebae:	4770      	bx	lr

1005ebb0 <__arm_cp.2_0>:
1005ebb0:	200010f8 	.word	0x200010f8

1005ebb4 <LL_sched_init>:
1005ebb4:	4809      	ldr	r0, [pc, #36]	@ (1005ebdc <__arm_cp.4_0>)
1005ebb6:	7ac0      	ldrb	r0, [r0, #11]
1005ebb8:	4909      	ldr	r1, [pc, #36]	@ (1005ebe0 <__arm_cp.4_1>)
1005ebba:	6809      	ldr	r1, [r1, #0]
1005ebbc:	3112      	adds	r1, #18
1005ebbe:	2800      	cmp	r0, #0
1005ebc0:	d004      	beq.n	1005ebcc <LL_sched_init+0x18>
1005ebc2:	2200      	movs	r2, #0
1005ebc4:	800a      	strh	r2, [r1, #0]
1005ebc6:	312c      	adds	r1, #44	@ 0x2c
1005ebc8:	1e40      	subs	r0, r0, #1
1005ebca:	e7f8      	b.n	1005ebbe <LL_sched_init+0xa>
1005ebcc:	4805      	ldr	r0, [pc, #20]	@ (1005ebe4 <__arm_cp.4_2>)
1005ebce:	6800      	ldr	r0, [r0, #0]
1005ebd0:	2100      	movs	r1, #0
1005ebd2:	73c1      	strb	r1, [r0, #15]
1005ebd4:	21ff      	movs	r1, #255	@ 0xff
1005ebd6:	0209      	lsls	r1, r1, #8
1005ebd8:	8181      	strh	r1, [r0, #12]
1005ebda:	4770      	bx	lr

1005ebdc <__arm_cp.4_0>:
1005ebdc:	20001108 	.word	0x20001108

1005ebe0 <__arm_cp.4_1>:
1005ebe0:	200010fc 	.word	0x200010fc

1005ebe4 <__arm_cp.4_2>:
1005ebe4:	200010f8 	.word	0x200010f8

1005ebe8 <LL_sched_set_anchor>:
1005ebe8:	222c      	movs	r2, #44	@ 0x2c
1005ebea:	4342      	muls	r2, r0
1005ebec:	4801      	ldr	r0, [pc, #4]	@ (1005ebf4 <__arm_cp.5_0>)
1005ebee:	6800      	ldr	r0, [r0, #0]
1005ebf0:	5081      	str	r1, [r0, r2]
1005ebf2:	4770      	bx	lr

1005ebf4 <__arm_cp.5_0>:
1005ebf4:	200010fc 	.word	0x200010fc

1005ebf8 <LL_sched_set_taskslot_length_anchor>:
1005ebf8:	232c      	movs	r3, #44	@ 0x2c
1005ebfa:	4343      	muls	r3, r0
1005ebfc:	4802      	ldr	r0, [pc, #8]	@ (1005ec08 <__arm_cp.6_0>)
1005ebfe:	6800      	ldr	r0, [r0, #0]
1005ec00:	50c2      	str	r2, [r0, r3]
1005ec02:	18c0      	adds	r0, r0, r3
1005ec04:	6041      	str	r1, [r0, #4]
1005ec06:	4770      	bx	lr

1005ec08 <__arm_cp.6_0>:
1005ec08:	200010fc 	.word	0x200010fc

1005ec0c <LL_sched_set_cancel_request>:
1005ec0c:	28ff      	cmp	r0, #255	@ 0xff
1005ec0e:	d00b      	beq.n	1005ec28 <LL_sched_set_cancel_request+0x1c>
1005ec10:	212c      	movs	r1, #44	@ 0x2c
1005ec12:	4341      	muls	r1, r0
1005ec14:	4805      	ldr	r0, [pc, #20]	@ (1005ec2c <__arm_cp.9_0>)
1005ec16:	6800      	ldr	r0, [r0, #0]
1005ec18:	1840      	adds	r0, r0, r1
1005ec1a:	7c81      	ldrb	r1, [r0, #18]
1005ec1c:	2908      	cmp	r1, #8
1005ec1e:	d001      	beq.n	1005ec24 <LL_sched_set_cancel_request+0x18>
1005ec20:	2110      	movs	r1, #16
1005ec22:	e000      	b.n	1005ec26 <LL_sched_set_cancel_request+0x1a>
1005ec24:	2120      	movs	r1, #32
1005ec26:	7481      	strb	r1, [r0, #18]
1005ec28:	4770      	bx	lr
1005ec2a:	46c0      	nop			@ (mov r8, r8)

1005ec2c <__arm_cp.9_0>:
1005ec2c:	200010fc 	.word	0x200010fc

1005ec30 <LL_sched_enable_taskslot>:
1005ec30:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ec32:	b088      	sub	sp, #32
1005ec34:	9307      	str	r3, [sp, #28]
1005ec36:	272c      	movs	r7, #44	@ 0x2c
1005ec38:	4347      	muls	r7, r0
1005ec3a:	481a      	ldr	r0, [pc, #104]	@ (1005eca4 <__arm_cp.10_0>)
1005ec3c:	6806      	ldr	r6, [r0, #0]
1005ec3e:	19f0      	adds	r0, r6, r7
1005ec40:	7c84      	ldrb	r4, [r0, #18]
1005ec42:	2c01      	cmp	r4, #1
1005ec44:	d12b      	bne.n	1005ec9e <LL_sched_enable_taskslot+0x6e>
1005ec46:	4603      	mov	r3, r0
1005ec48:	3312      	adds	r3, #18
1005ec4a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
1005ec4c:	9506      	str	r5, [sp, #24]
1005ec4e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
1005ec50:	9505      	str	r5, [sp, #20]
1005ec52:	9d12      	ldr	r5, [sp, #72]	@ 0x48
1005ec54:	9503      	str	r5, [sp, #12]
1005ec56:	9d11      	ldr	r5, [sp, #68]	@ 0x44
1005ec58:	9502      	str	r5, [sp, #8]
1005ec5a:	9104      	str	r1, [sp, #16]
1005ec5c:	9910      	ldr	r1, [sp, #64]	@ 0x40
1005ec5e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1005ec60:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
1005ec62:	9400      	str	r4, [sp, #0]
1005ec64:	9201      	str	r2, [sp, #4]
1005ec66:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1005ec68:	9c07      	ldr	r4, [sp, #28]
1005ec6a:	6044      	str	r4, [r0, #4]
1005ec6c:	6082      	str	r2, [r0, #8]
1005ec6e:	9a00      	ldr	r2, [sp, #0]
1005ec70:	51f2      	str	r2, [r6, r7]
1005ec72:	221f      	movs	r2, #31
1005ec74:	4015      	ands	r5, r2
1005ec76:	7545      	strb	r5, [r0, #21]
1005ec78:	4011      	ands	r1, r2
1005ec7a:	7581      	strb	r1, [r0, #22]
1005ec7c:	2101      	movs	r1, #1
1005ec7e:	7501      	strb	r1, [r0, #20]
1005ec80:	9a01      	ldr	r2, [sp, #4]
1005ec82:	74c2      	strb	r2, [r0, #19]
1005ec84:	8201      	strh	r1, [r0, #16]
1005ec86:	9902      	ldr	r1, [sp, #8]
1005ec88:	61c1      	str	r1, [r0, #28]
1005ec8a:	9903      	ldr	r1, [sp, #12]
1005ec8c:	6201      	str	r1, [r0, #32]
1005ec8e:	9905      	ldr	r1, [sp, #20]
1005ec90:	6241      	str	r1, [r0, #36]	@ 0x24
1005ec92:	9906      	ldr	r1, [sp, #24]
1005ec94:	6281      	str	r1, [r0, #40]	@ 0x28
1005ec96:	9904      	ldr	r1, [sp, #16]
1005ec98:	60c1      	str	r1, [r0, #12]
1005ec9a:	2002      	movs	r0, #2
1005ec9c:	7018      	strb	r0, [r3, #0]
1005ec9e:	b008      	add	sp, #32
1005eca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005eca2:	46c0      	nop			@ (mov r8, r8)

1005eca4 <__arm_cp.10_0>:
1005eca4:	200010fc 	.word	0x200010fc

1005eca8 <LL_sched_is_scheduler_call_pending>:
1005eca8:	b580      	push	{r7, lr}
1005ecaa:	490a      	ldr	r1, [pc, #40]	@ (1005ecd4 <__arm_cp.11_0>)
1005ecac:	6809      	ldr	r1, [r1, #0]
1005ecae:	7b0a      	ldrb	r2, [r1, #12]
1005ecb0:	2a01      	cmp	r2, #1
1005ecb2:	d106      	bne.n	1005ecc2 <LL_sched_is_scheduler_call_pending+0x1a>
1005ecb4:	7bca      	ldrb	r2, [r1, #15]
1005ecb6:	2a03      	cmp	r2, #3
1005ecb8:	d105      	bne.n	1005ecc6 <LL_sched_is_scheduler_call_pending+0x1e>
1005ecba:	2000      	movs	r0, #0
1005ecbc:	f7fa ff29 	bl	10059b12 <llc_scan_stop_ucfg_weak>
1005ecc0:	bd80      	pop	{r7, pc}
1005ecc2:	2000      	movs	r0, #0
1005ecc4:	bd80      	pop	{r7, pc}
1005ecc6:	6809      	ldr	r1, [r1, #0]
1005ecc8:	1a08      	subs	r0, r1, r0
1005ecca:	4903      	ldr	r1, [pc, #12]	@ (1005ecd8 <__arm_cp.11_1>)
1005eccc:	1840      	adds	r0, r0, r1
1005ecce:	0fc0      	lsrs	r0, r0, #31
1005ecd0:	bd80      	pop	{r7, pc}
1005ecd2:	46c0      	nop			@ (mov r8, r8)

1005ecd4 <__arm_cp.11_0>:
1005ecd4:	200010f8 	.word	0x200010f8

1005ecd8 <__arm_cp.11_1>:
1005ecd8:	fffffe0b 	.word	0xfffffe0b

1005ecdc <LL_sched_anchorstretch>:
1005ecdc:	4902      	ldr	r1, [pc, #8]	@ (1005ece8 <__arm_cp.12_0>)
1005ecde:	6809      	ldr	r1, [r1, #0]
1005ece0:	684a      	ldr	r2, [r1, #4]
1005ece2:	6002      	str	r2, [r0, #0]
1005ece4:	7b88      	ldrb	r0, [r1, #14]
1005ece6:	4770      	bx	lr

1005ece8 <__arm_cp.12_0>:
1005ece8:	200010f8 	.word	0x200010f8

1005ecec <LL_sched_engine>:
1005ecec:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ecee:	b0b3      	sub	sp, #204	@ 0xcc
1005ecf0:	4607      	mov	r7, r0
1005ecf2:	48dc      	ldr	r0, [pc, #880]	@ (1005f064 <__arm_cp.13_0>)
1005ecf4:	6800      	ldr	r0, [r0, #0]
1005ecf6:	900b      	str	r0, [sp, #44]	@ 0x2c
1005ecf8:	2001      	movs	r0, #1
1005ecfa:	9001      	str	r0, [sp, #4]
1005ecfc:	9009      	str	r0, [sp, #36]	@ 0x24
1005ecfe:	2100      	movs	r1, #0
1005ed00:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005ed02:	7381      	strb	r1, [r0, #14]
1005ed04:	48d8      	ldr	r0, [pc, #864]	@ (1005f068 <__arm_cp.13_1>)
1005ed06:	6803      	ldr	r3, [r0, #0]
1005ed08:	910a      	str	r1, [sp, #40]	@ 0x28
1005ed0a:	7219      	strb	r1, [r3, #8]
1005ed0c:	20ff      	movs	r0, #255	@ 0xff
1005ed0e:	9008      	str	r0, [sp, #32]
1005ed10:	3002      	adds	r0, #2
1005ed12:	8298      	strh	r0, [r3, #20]
1005ed14:	7c18      	ldrb	r0, [r3, #16]
1005ed16:	21f0      	movs	r1, #240	@ 0xf0
1005ed18:	4001      	ands	r1, r0
1005ed1a:	090a      	lsrs	r2, r1, #4
1005ed1c:	1888      	adds	r0, r1, r2
1005ed1e:	7418      	strb	r0, [r3, #16]
1005ed20:	8a59      	ldrh	r1, [r3, #18]
1005ed22:	40d1      	lsrs	r1, r2
1005ed24:	07c9      	lsls	r1, r1, #31
1005ed26:	49d1      	ldr	r1, [pc, #836]	@ (1005f06c <__arm_cp.13_2>)
1005ed28:	6809      	ldr	r1, [r1, #0]
1005ed2a:	9107      	str	r1, [sp, #28]
1005ed2c:	9305      	str	r3, [sp, #20]
1005ed2e:	d006      	beq.n	1005ed3e <LL_sched_engine+0x52>
1005ed30:	2000      	movs	r0, #0
1005ed32:	f003 fbc1 	bl	100624b8 <tsk_notify_idx>
1005ed36:	f7e4 fef0 	bl	10043b1a <BLE_STACK_ProcessRequest>
1005ed3a:	9b05      	ldr	r3, [sp, #20]
1005ed3c:	7c18      	ldrb	r0, [r3, #16]
1005ed3e:	210f      	movs	r1, #15
1005ed40:	9102      	str	r1, [sp, #8]
1005ed42:	4008      	ands	r0, r1
1005ed44:	7418      	strb	r0, [r3, #16]
1005ed46:	2196      	movs	r1, #150	@ 0x96
1005ed48:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005ed4a:	4341      	muls	r1, r0
1005ed4c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005ed4e:	9112      	str	r1, [sp, #72]	@ 0x48
1005ed50:	6081      	str	r1, [r0, #8]
1005ed52:	2001      	movs	r0, #1
1005ed54:	9004      	str	r0, [sp, #16]
1005ed56:	43c0      	mvns	r0, r0
1005ed58:	b279      	sxtb	r1, r7
1005ed5a:	4281      	cmp	r1, r0
1005ed5c:	dc10      	bgt.n	1005ed80 <LL_sched_engine+0x94>
1005ed5e:	207f      	movs	r0, #127	@ 0x7f
1005ed60:	4007      	ands	r7, r0
1005ed62:	252c      	movs	r5, #44	@ 0x2c
1005ed64:	437d      	muls	r5, r7
1005ed66:	9c07      	ldr	r4, [sp, #28]
1005ed68:	1960      	adds	r0, r4, r5
1005ed6a:	900a      	str	r0, [sp, #40]	@ 0x28
1005ed6c:	5966      	ldr	r6, [r4, r5]
1005ed6e:	f7e7 fa5d 	bl	1004622c <BLEPLAT_GetCurrentSysTime>
1005ed72:	1a30      	subs	r0, r6, r0
1005ed74:	49be      	ldr	r1, [pc, #760]	@ (1005f070 <__arm_cp.13_3>)
1005ed76:	1840      	adds	r0, r0, r1
1005ed78:	d500      	bpl.n	1005ed7c <LL_sched_engine+0x90>
1005ed7a:	e0ef      	b.n	1005ef5c <LL_sched_engine+0x270>
1005ed7c:	4638      	mov	r0, r7
1005ed7e:	e004      	b.n	1005ed8a <LL_sched_engine+0x9e>
1005ed80:	b2f8      	uxtb	r0, r7
1005ed82:	28ff      	cmp	r0, #255	@ 0xff
1005ed84:	d00e      	beq.n	1005eda4 <LL_sched_engine+0xb8>
1005ed86:	2100      	movs	r1, #0
1005ed88:	910a      	str	r1, [sp, #40]	@ 0x28
1005ed8a:	212c      	movs	r1, #44	@ 0x2c
1005ed8c:	4341      	muls	r1, r0
1005ed8e:	9807      	ldr	r0, [sp, #28]
1005ed90:	1840      	adds	r0, r0, r1
1005ed92:	2101      	movs	r1, #1
1005ed94:	7501      	strb	r1, [r0, #20]
1005ed96:	7c81      	ldrb	r1, [r0, #18]
1005ed98:	2908      	cmp	r1, #8
1005ed9a:	d102      	bne.n	1005eda2 <LL_sched_engine+0xb6>
1005ed9c:	3012      	adds	r0, #18
1005ed9e:	2104      	movs	r1, #4
1005eda0:	7001      	strb	r1, [r0, #0]
1005eda2:	9708      	str	r7, [sp, #32]
1005eda4:	f7e7 fa42 	bl	1004622c <BLEPLAT_GetCurrentSysTime>
1005eda8:	9912      	ldr	r1, [sp, #72]	@ 0x48
1005edaa:	180c      	adds	r4, r1, r0
1005edac:	48af      	ldr	r0, [pc, #700]	@ (1005f06c <__arm_cp.13_2>)
1005edae:	6807      	ldr	r7, [r0, #0]
1005edb0:	3728      	adds	r7, #40	@ 0x28
1005edb2:	2500      	movs	r5, #0
1005edb4:	4628      	mov	r0, r5
1005edb6:	49af      	ldr	r1, [pc, #700]	@ (1005f074 <__arm_cp.13_4>)
1005edb8:	7aca      	ldrb	r2, [r1, #11]
1005edba:	4295      	cmp	r5, r2
1005edbc:	d23a      	bcs.n	1005ee34 <LL_sched_engine+0x148>
1005edbe:	463e      	mov	r6, r7
1005edc0:	3e16      	subs	r6, #22
1005edc2:	7831      	ldrb	r1, [r6, #0]
1005edc4:	070a      	lsls	r2, r1, #28
1005edc6:	0f52      	lsrs	r2, r2, #29
1005edc8:	d01e      	beq.n	1005ee08 <LL_sched_engine+0x11c>
1005edca:	2104      	movs	r1, #4
1005edcc:	7031      	strb	r1, [r6, #0]
1005edce:	4639      	mov	r1, r7
1005edd0:	3928      	subs	r1, #40	@ 0x28
1005edd2:	6809      	ldr	r1, [r1, #0]
1005edd4:	43ca      	mvns	r2, r1
1005edd6:	18a2      	adds	r2, r4, r2
1005edd8:	d429      	bmi.n	1005ee2e <LL_sched_engine+0x142>
1005edda:	1a61      	subs	r1, r4, r1
1005eddc:	4638      	mov	r0, r7
1005edde:	381c      	subs	r0, #28
1005ede0:	6800      	ldr	r0, [r0, #0]
1005ede2:	463a      	mov	r2, r7
1005ede4:	3a0c      	subs	r2, #12
1005ede6:	6812      	ldr	r2, [r2, #0]
1005ede8:	4790      	blx	r2
1005edea:	4639      	mov	r1, r7
1005edec:	3918      	subs	r1, #24
1005edee:	880a      	ldrh	r2, [r1, #0]
1005edf0:	1812      	adds	r2, r2, r0
1005edf2:	800a      	strh	r2, [r1, #0]
1005edf4:	4639      	mov	r1, r7
1005edf6:	3914      	subs	r1, #20
1005edf8:	780a      	ldrb	r2, [r1, #0]
1005edfa:	1880      	adds	r0, r0, r2
1005edfc:	287f      	cmp	r0, #127	@ 0x7f
1005edfe:	d300      	bcc.n	1005ee02 <LL_sched_engine+0x116>
1005ee00:	207f      	movs	r0, #127	@ 0x7f
1005ee02:	7008      	strb	r0, [r1, #0]
1005ee04:	7831      	ldrb	r1, [r6, #0]
1005ee06:	2001      	movs	r0, #1
1005ee08:	0689      	lsls	r1, r1, #26
1005ee0a:	0f89      	lsrs	r1, r1, #30
1005ee0c:	d00f      	beq.n	1005ee2e <LL_sched_engine+0x142>
1005ee0e:	6839      	ldr	r1, [r7, #0]
1005ee10:	2900      	cmp	r1, #0
1005ee12:	d006      	beq.n	1005ee22 <LL_sched_engine+0x136>
1005ee14:	4638      	mov	r0, r7
1005ee16:	381c      	subs	r0, #28
1005ee18:	6800      	ldr	r0, [r0, #0]
1005ee1a:	4788      	blx	r1
1005ee1c:	7830      	ldrb	r0, [r6, #0]
1005ee1e:	2801      	cmp	r0, #1
1005ee20:	d004      	beq.n	1005ee2c <LL_sched_engine+0x140>
1005ee22:	2000      	movs	r0, #0
1005ee24:	7030      	strb	r0, [r6, #0]
1005ee26:	4639      	mov	r1, r7
1005ee28:	3915      	subs	r1, #21
1005ee2a:	7008      	strb	r0, [r1, #0]
1005ee2c:	2001      	movs	r0, #1
1005ee2e:	372c      	adds	r7, #44	@ 0x2c
1005ee30:	1c6d      	adds	r5, r5, #1
1005ee32:	e7c0      	b.n	1005edb6 <LL_sched_engine+0xca>
1005ee34:	2800      	cmp	r0, #0
1005ee36:	d1b5      	bne.n	1005eda4 <LL_sched_engine+0xb8>
1005ee38:	488c      	ldr	r0, [pc, #560]	@ (1005f06c <__arm_cp.13_2>)
1005ee3a:	6800      	ldr	r0, [r0, #0]
1005ee3c:	4603      	mov	r3, r0
1005ee3e:	3312      	adds	r3, #18
1005ee40:	2400      	movs	r4, #0
1005ee42:	4621      	mov	r1, r4
1005ee44:	42a2      	cmp	r2, r4
1005ee46:	d009      	beq.n	1005ee5c <LL_sched_engine+0x170>
1005ee48:	781d      	ldrb	r5, [r3, #0]
1005ee4a:	2d04      	cmp	r5, #4
1005ee4c:	d103      	bne.n	1005ee56 <LL_sched_engine+0x16a>
1005ee4e:	b2cd      	uxtb	r5, r1
1005ee50:	ae13      	add	r6, sp, #76	@ 0x4c
1005ee52:	5574      	strb	r4, [r6, r5]
1005ee54:	1c49      	adds	r1, r1, #1
1005ee56:	332c      	adds	r3, #44	@ 0x2c
1005ee58:	1c64      	adds	r4, r4, #1
1005ee5a:	e7f3      	b.n	1005ee44 <LL_sched_engine+0x158>
1005ee5c:	060a      	lsls	r2, r1, #24
1005ee5e:	d074      	beq.n	1005ef4a <LL_sched_engine+0x25e>
1005ee60:	b2ca      	uxtb	r2, r1
1005ee62:	920e      	str	r2, [sp, #56]	@ 0x38
1005ee64:	2200      	movs	r2, #0
1005ee66:	9206      	str	r2, [sp, #24]
1005ee68:	460c      	mov	r4, r1
1005ee6a:	9203      	str	r2, [sp, #12]
1005ee6c:	4616      	mov	r6, r2
1005ee6e:	910d      	str	r1, [sp, #52]	@ 0x34
1005ee70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005ee72:	4296      	cmp	r6, r2
1005ee74:	d06e      	beq.n	1005ef54 <LL_sched_engine+0x268>
1005ee76:	9612      	str	r6, [sp, #72]	@ 0x48
1005ee78:	9410      	str	r4, [sp, #64]	@ 0x40
1005ee7a:	b2e3      	uxtb	r3, r4
1005ee7c:	2700      	movs	r7, #0
1005ee7e:	462c      	mov	r4, r5
1005ee80:	463e      	mov	r6, r7
1005ee82:	42bb      	cmp	r3, r7
1005ee84:	d00d      	beq.n	1005eea2 <LL_sched_engine+0x1b6>
1005ee86:	aa13      	add	r2, sp, #76	@ 0x4c
1005ee88:	5dd2      	ldrb	r2, [r2, r7]
1005ee8a:	252c      	movs	r5, #44	@ 0x2c
1005ee8c:	4355      	muls	r5, r2
1005ee8e:	5945      	ldr	r5, [r0, r5]
1005ee90:	2f00      	cmp	r7, #0
1005ee92:	d002      	beq.n	1005ee9a <LL_sched_engine+0x1ae>
1005ee94:	43f2      	mvns	r2, r6
1005ee96:	18aa      	adds	r2, r5, r2
1005ee98:	d501      	bpl.n	1005ee9e <LL_sched_engine+0x1b2>
1005ee9a:	463c      	mov	r4, r7
1005ee9c:	462e      	mov	r6, r5
1005ee9e:	1c7f      	adds	r7, r7, #1
1005eea0:	e7ef      	b.n	1005ee82 <LL_sched_engine+0x196>
1005eea2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
1005eea4:	1b4a      	subs	r2, r1, r5
1005eea6:	b2d2      	uxtb	r2, r2
1005eea8:	1e51      	subs	r1, r2, #1
1005eeaa:	aa13      	add	r2, sp, #76	@ 0x4c
1005eeac:	5c53      	ldrb	r3, [r2, r1]
1005eeae:	b2e4      	uxtb	r4, r4
1005eeb0:	5d17      	ldrb	r7, [r2, r4]
1005eeb2:	5457      	strb	r7, [r2, r1]
1005eeb4:	5513      	strb	r3, [r2, r4]
1005eeb6:	910f      	str	r1, [sp, #60]	@ 0x3c
1005eeb8:	b2cb      	uxtb	r3, r1
1005eeba:	5cd3      	ldrb	r3, [r2, r3]
1005eebc:	2d00      	cmp	r5, #0
1005eebe:	d02e      	beq.n	1005ef1e <LL_sched_engine+0x232>
1005eec0:	461d      	mov	r5, r3
1005eec2:	9911      	ldr	r1, [sp, #68]	@ 0x44
1005eec4:	b2ca      	uxtb	r2, r1
1005eec6:	ac13      	add	r4, sp, #76	@ 0x4c
1005eec8:	5ca4      	ldrb	r4, [r4, r2]
1005eeca:	272c      	movs	r7, #44	@ 0x2c
1005eecc:	437c      	muls	r4, r7
1005eece:	5902      	ldr	r2, [r0, r4]
1005eed0:	1b91      	subs	r1, r2, r6
1005eed2:	1904      	adds	r4, r0, r4
1005eed4:	6863      	ldr	r3, [r4, #4]
1005eed6:	18c9      	adds	r1, r1, r3
1005eed8:	3195      	adds	r1, #149	@ 0x95
1005eeda:	d44a      	bmi.n	1005ef72 <LL_sched_engine+0x286>
1005eedc:	43d1      	mvns	r1, r2
1005eede:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1005eee0:	1851      	adds	r1, r2, r1
1005eee2:	d449      	bmi.n	1005ef78 <LL_sched_engine+0x28c>
1005eee4:	436f      	muls	r7, r5
1005eee6:	19c1      	adds	r1, r0, r7
1005eee8:	7d8a      	ldrb	r2, [r1, #22]
1005eeea:	7d0b      	ldrb	r3, [r1, #20]
1005eeec:	4093      	lsls	r3, r2
1005eeee:	7d49      	ldrb	r1, [r1, #21]
1005eef0:	2601      	movs	r6, #1
1005eef2:	4632      	mov	r2, r6
1005eef4:	408a      	lsls	r2, r1
1005eef6:	429a      	cmp	r2, r3
1005eef8:	d800      	bhi.n	1005eefc <LL_sched_engine+0x210>
1005eefa:	4613      	mov	r3, r2
1005eefc:	7da1      	ldrb	r1, [r4, #22]
1005eefe:	7d27      	ldrb	r7, [r4, #20]
1005ef00:	408f      	lsls	r7, r1
1005ef02:	7d61      	ldrb	r1, [r4, #21]
1005ef04:	408e      	lsls	r6, r1
1005ef06:	42be      	cmp	r6, r7
1005ef08:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1005ef0a:	d800      	bhi.n	1005ef0e <LL_sched_engine+0x222>
1005ef0c:	4637      	mov	r7, r6
1005ef0e:	429f      	cmp	r7, r3
1005ef10:	462b      	mov	r3, r5
1005ef12:	990d      	ldr	r1, [sp, #52]	@ 0x34
1005ef14:	9c10      	ldr	r4, [sp, #64]	@ 0x40
1005ef16:	d300      	bcc.n	1005ef1a <LL_sched_engine+0x22e>
1005ef18:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1005ef1a:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1005ef1c:	e011      	b.n	1005ef42 <LL_sched_engine+0x256>
1005ef1e:	990d      	ldr	r1, [sp, #52]	@ 0x34
1005ef20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005ef22:	2a01      	cmp	r2, #1
1005ef24:	d101      	bne.n	1005ef2a <LL_sched_engine+0x23e>
1005ef26:	2202      	movs	r2, #2
1005ef28:	9206      	str	r2, [sp, #24]
1005ef2a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
1005ef2c:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1005ef2e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1005ef30:	222c      	movs	r2, #44	@ 0x2c
1005ef32:	435a      	muls	r2, r3
1005ef34:	5883      	ldr	r3, [r0, r2]
1005ef36:	1882      	adds	r2, r0, r2
1005ef38:	6852      	ldr	r2, [r2, #4]
1005ef3a:	189a      	adds	r2, r3, r2
1005ef3c:	3296      	adds	r2, #150	@ 0x96
1005ef3e:	920c      	str	r2, [sp, #48]	@ 0x30
1005ef40:	462b      	mov	r3, r5
1005ef42:	1e64      	subs	r4, r4, #1
1005ef44:	1c76      	adds	r6, r6, #1
1005ef46:	9311      	str	r3, [sp, #68]	@ 0x44
1005ef48:	e792      	b.n	1005ee70 <LL_sched_engine+0x184>
1005ef4a:	2000      	movs	r0, #0
1005ef4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005ef4e:	6048      	str	r0, [r1, #4]
1005ef50:	7388      	strb	r0, [r1, #14]
1005ef52:	e02d      	b.n	1005efb0 <LL_sched_engine+0x2c4>
1005ef54:	9a03      	ldr	r2, [sp, #12]
1005ef56:	4616      	mov	r6, r2
1005ef58:	9b06      	ldr	r3, [sp, #24]
1005ef5a:	e013      	b.n	1005ef84 <LL_sched_engine+0x298>
1005ef5c:	1960      	adds	r0, r4, r5
1005ef5e:	7c80      	ldrb	r0, [r0, #18]
1005ef60:	2810      	cmp	r0, #16
1005ef62:	d100      	bne.n	1005ef66 <LL_sched_engine+0x27a>
1005ef64:	e70a      	b.n	1005ed7c <LL_sched_engine+0x90>
1005ef66:	2820      	cmp	r0, #32
1005ef68:	d100      	bne.n	1005ef6c <LL_sched_engine+0x280>
1005ef6a:	e707      	b.n	1005ed7c <LL_sched_engine+0x90>
1005ef6c:	2400      	movs	r4, #0
1005ef6e:	463d      	mov	r5, r7
1005ef70:	e021      	b.n	1005efb6 <LL_sched_engine+0x2ca>
1005ef72:	3e96      	subs	r6, #150	@ 0x96
1005ef74:	9b04      	ldr	r3, [sp, #16]
1005ef76:	e004      	b.n	1005ef82 <LL_sched_engine+0x296>
1005ef78:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005ef7a:	1e40      	subs	r0, r0, #1
1005ef7c:	9011      	str	r0, [sp, #68]	@ 0x44
1005ef7e:	2600      	movs	r6, #0
1005ef80:	4633      	mov	r3, r6
1005ef82:	9a03      	ldr	r2, [sp, #12]
1005ef84:	9811      	ldr	r0, [sp, #68]	@ 0x44
1005ef86:	b2c0      	uxtb	r0, r0
1005ef88:	a913      	add	r1, sp, #76	@ 0x4c
1005ef8a:	5c0d      	ldrb	r5, [r1, r0]
1005ef8c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005ef8e:	6042      	str	r2, [r0, #4]
1005ef90:	7383      	strb	r3, [r0, #14]
1005ef92:	2dff      	cmp	r5, #255	@ 0xff
1005ef94:	d00c      	beq.n	1005efb0 <LL_sched_engine+0x2c4>
1005ef96:	202c      	movs	r0, #44	@ 0x2c
1005ef98:	4368      	muls	r0, r5
1005ef9a:	9907      	ldr	r1, [sp, #28]
1005ef9c:	1809      	adds	r1, r1, r0
1005ef9e:	b2d8      	uxtb	r0, r3
1005efa0:	2801      	cmp	r0, #1
1005efa2:	910a      	str	r1, [sp, #40]	@ 0x28
1005efa4:	d105      	bne.n	1005efb2 <LL_sched_engine+0x2c6>
1005efa6:	6808      	ldr	r0, [r1, #0]
1005efa8:	1a30      	subs	r0, r6, r0
1005efaa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005efac:	6048      	str	r0, [r1, #4]
1005efae:	e000      	b.n	1005efb2 <LL_sched_engine+0x2c6>
1005efb0:	25ff      	movs	r5, #255	@ 0xff
1005efb2:	9c01      	ldr	r4, [sp, #4]
1005efb4:	9f08      	ldr	r7, [sp, #32]
1005efb6:	f7e8 f92d 	bl	10047214 <BLEPLAT_CNTR_ClearSemareq>
1005efba:	482a      	ldr	r0, [pc, #168]	@ (1005f064 <__arm_cp.13_0>)
1005efbc:	6800      	ldr	r0, [r0, #0]
1005efbe:	2dff      	cmp	r5, #255	@ 0xff
1005efc0:	d02f      	beq.n	1005f022 <LL_sched_engine+0x336>
1005efc2:	9711      	str	r7, [sp, #68]	@ 0x44
1005efc4:	9412      	str	r4, [sp, #72]	@ 0x48
1005efc6:	4604      	mov	r4, r0
1005efc8:	2008      	movs	r0, #8
1005efca:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
1005efcc:	74b8      	strb	r0, [r7, #18]
1005efce:	f7fe fa5a 	bl	1005d486 <llc_cte_timer_stop_ucfg_weak>
1005efd2:	7365      	strb	r5, [r4, #13]
1005efd4:	6a3a      	ldr	r2, [r7, #32]
1005efd6:	68f8      	ldr	r0, [r7, #12]
1005efd8:	6879      	ldr	r1, [r7, #4]
1005efda:	4790      	blx	r2
1005efdc:	683e      	ldr	r6, [r7, #0]
1005efde:	940b      	str	r4, [sp, #44]	@ 0x2c
1005efe0:	6026      	str	r6, [r4, #0]
1005efe2:	4628      	mov	r0, r5
1005efe4:	f7e8 f92c 	bl	10047240 <BLEPLAT_CNTR_GlobWriteSlot>
1005efe8:	f7e8 f923 	bl	10047232 <BLEPLAT_CNTR_GlobEnableBlue>
1005efec:	9812      	ldr	r0, [sp, #72]	@ 0x48
1005efee:	2800      	cmp	r0, #0
1005eff0:	d023      	beq.n	1005f03a <LL_sched_engine+0x34e>
1005eff2:	7cf8      	ldrb	r0, [r7, #19]
1005eff4:	09c1      	lsrs	r1, r0, #7
1005eff6:	2201      	movs	r2, #1
1005eff8:	4630      	mov	r0, r6
1005effa:	f7e7 f93e 	bl	1004627a <BLEPLAT_SetRadioTimerValue>
1005effe:	2800      	cmp	r0, #0
1005f000:	d01d      	beq.n	1005f03e <LL_sched_engine+0x352>
1005f002:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005f004:	0040      	lsls	r0, r0, #1
1005f006:	9009      	str	r0, [sp, #36]	@ 0x24
1005f008:	2810      	cmp	r0, #16
1005f00a:	9f11      	ldr	r7, [sp, #68]	@ 0x44
1005f00c:	d200      	bcs.n	1005f010 <LL_sched_engine+0x324>
1005f00e:	e676      	b.n	1005ecfe <LL_sched_engine+0x12>
1005f010:	f7fe fa38 	bl	1005d484 <llc_cte_timer_error_ucfg_weak>
1005f014:	20a1      	movs	r0, #161	@ 0xa1
1005f016:	2106      	movs	r1, #6
1005f018:	2200      	movs	r2, #0
1005f01a:	4613      	mov	r3, r2
1005f01c:	f004 fe74 	bl	10063d08 <aci_hal_fw_error_event_push_noinline>
1005f020:	e009      	b.n	1005f036 <LL_sched_engine+0x34a>
1005f022:	4604      	mov	r4, r0
1005f024:	f7e7 f943 	bl	100462ae <BLEPLAT_ClearRadioTimerValue>
1005f028:	f7e8 f8fc 	bl	10047224 <BLEPLAT_CNTR_GlobDisableBlue>
1005f02c:	2000      	movs	r0, #0
1005f02e:	73e0      	strb	r0, [r4, #15]
1005f030:	20ff      	movs	r0, #255	@ 0xff
1005f032:	0200      	lsls	r0, r0, #8
1005f034:	81a0      	strh	r0, [r4, #12]
1005f036:	9904      	ldr	r1, [sp, #16]
1005f038:	e00f      	b.n	1005f05a <LL_sched_engine+0x36e>
1005f03a:	f7e7 f950 	bl	100462de <BLEPLAT_SetRadioCloseTimeout>
1005f03e:	9b04      	ldr	r3, [sp, #16]
1005f040:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005f042:	730b      	strb	r3, [r1, #12]
1005f044:	7cf8      	ldrb	r0, [r7, #19]
1005f046:	73c8      	strb	r0, [r1, #15]
1005f048:	9a05      	ldr	r2, [sp, #20]
1005f04a:	60d6      	str	r6, [r2, #12]
1005f04c:	7c11      	ldrb	r1, [r2, #16]
1005f04e:	9c02      	ldr	r4, [sp, #8]
1005f050:	4021      	ands	r1, r4
1005f052:	0100      	lsls	r0, r0, #4
1005f054:	1808      	adds	r0, r1, r0
1005f056:	4619      	mov	r1, r3
1005f058:	7410      	strb	r0, [r2, #16]
1005f05a:	4803      	ldr	r0, [pc, #12]	@ (1005f068 <__arm_cp.13_1>)
1005f05c:	6800      	ldr	r0, [r0, #0]
1005f05e:	7201      	strb	r1, [r0, #8]
1005f060:	b033      	add	sp, #204	@ 0xcc
1005f062:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005f064 <__arm_cp.13_0>:
1005f064:	200010f8 	.word	0x200010f8

1005f068 <__arm_cp.13_1>:
1005f068:	200010f4 	.word	0x200010f4

1005f06c <__arm_cp.13_2>:
1005f06c:	200010fc 	.word	0x200010fc

1005f070 <__arm_cp.13_3>:
1005f070:	fffffed4 	.word	0xfffffed4

1005f074 <__arm_cp.13_4>:
1005f074:	20001108 	.word	0x20001108

1005f078 <LL_sched_set_priority>:
1005f078:	b510      	push	{r4, lr}
1005f07a:	231f      	movs	r3, #31
1005f07c:	401a      	ands	r2, r3
1005f07e:	242c      	movs	r4, #44	@ 0x2c
1005f080:	4344      	muls	r4, r0
1005f082:	4803      	ldr	r0, [pc, #12]	@ (1005f090 <__arm_cp.14_0>)
1005f084:	6800      	ldr	r0, [r0, #0]
1005f086:	1900      	adds	r0, r0, r4
1005f088:	7582      	strb	r2, [r0, #22]
1005f08a:	4019      	ands	r1, r3
1005f08c:	7541      	strb	r1, [r0, #21]
1005f08e:	bd10      	pop	{r4, pc}

1005f090 <__arm_cp.14_0>:
1005f090:	200010fc 	.word	0x200010fc

1005f094 <LL_sched_set_params>:
1005f094:	b5b0      	push	{r4, r5, r7, lr}
1005f096:	242c      	movs	r4, #44	@ 0x2c
1005f098:	4344      	muls	r4, r0
1005f09a:	480b      	ldr	r0, [pc, #44]	@ (1005f0c8 <__arm_cp.15_0>)
1005f09c:	6800      	ldr	r0, [r0, #0]
1005f09e:	9d05      	ldr	r5, [sp, #20]
1005f0a0:	5105      	str	r5, [r0, r4]
1005f0a2:	1900      	adds	r0, r0, r4
1005f0a4:	9c04      	ldr	r4, [sp, #16]
1005f0a6:	6084      	str	r4, [r0, #8]
1005f0a8:	60c1      	str	r1, [r0, #12]
1005f0aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005f0ac:	6281      	str	r1, [r0, #40]	@ 0x28
1005f0ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005f0b0:	6241      	str	r1, [r0, #36]	@ 0x24
1005f0b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005f0b4:	6201      	str	r1, [r0, #32]
1005f0b6:	9908      	ldr	r1, [sp, #32]
1005f0b8:	61c1      	str	r1, [r0, #28]
1005f0ba:	9907      	ldr	r1, [sp, #28]
1005f0bc:	7581      	strb	r1, [r0, #22]
1005f0be:	9906      	ldr	r1, [sp, #24]
1005f0c0:	7541      	strb	r1, [r0, #21]
1005f0c2:	74c2      	strb	r2, [r0, #19]
1005f0c4:	6043      	str	r3, [r0, #4]
1005f0c6:	bdb0      	pop	{r4, r5, r7, pc}

1005f0c8 <__arm_cp.15_0>:
1005f0c8:	200010fc 	.word	0x200010fc

1005f0cc <LL_sched_delete_taskslot>:
1005f0cc:	212c      	movs	r1, #44	@ 0x2c
1005f0ce:	4341      	muls	r1, r0
1005f0d0:	4802      	ldr	r0, [pc, #8]	@ (1005f0dc <__arm_cp.19_0>)
1005f0d2:	6800      	ldr	r0, [r0, #0]
1005f0d4:	1840      	adds	r0, r0, r1
1005f0d6:	2110      	movs	r1, #16
1005f0d8:	8241      	strh	r1, [r0, #18]
1005f0da:	4770      	bx	lr

1005f0dc <__arm_cp.19_0>:
1005f0dc:	200010fc 	.word	0x200010fc

1005f0e0 <LL_sched_set_per_state>:
1005f0e0:	222c      	movs	r2, #44	@ 0x2c
1005f0e2:	4342      	muls	r2, r0
1005f0e4:	4802      	ldr	r0, [pc, #8]	@ (1005f0f0 <__arm_cp.21_0>)
1005f0e6:	6800      	ldr	r0, [r0, #0]
1005f0e8:	1880      	adds	r0, r0, r2
1005f0ea:	7481      	strb	r1, [r0, #18]
1005f0ec:	4770      	bx	lr
1005f0ee:	46c0      	nop			@ (mov r8, r8)

1005f0f0 <__arm_cp.21_0>:
1005f0f0:	200010fc 	.word	0x200010fc

1005f0f4 <LL_sched_reserve_taskslot>:
1005f0f4:	b510      	push	{r4, lr}
1005f0f6:	480e      	ldr	r0, [pc, #56]	@ (1005f130 <__arm_cp.22_0>)
1005f0f8:	6801      	ldr	r1, [r0, #0]
1005f0fa:	3128      	adds	r1, #40	@ 0x28
1005f0fc:	2000      	movs	r0, #0
1005f0fe:	4a0d      	ldr	r2, [pc, #52]	@ (1005f134 <__arm_cp.22_1>)
1005f100:	7ad3      	ldrb	r3, [r2, #11]
1005f102:	4298      	cmp	r0, r3
1005f104:	d20b      	bcs.n	1005f11e <LL_sched_reserve_taskslot+0x2a>
1005f106:	f3ef 8310 	mrs	r3, PRIMASK
1005f10a:	b672      	cpsid	i
1005f10c:	460b      	mov	r3, r1
1005f10e:	3b16      	subs	r3, #22
1005f110:	781c      	ldrb	r4, [r3, #0]
1005f112:	2c00      	cmp	r4, #0
1005f114:	d005      	beq.n	1005f122 <LL_sched_reserve_taskslot+0x2e>
1005f116:	b662      	cpsie	i
1005f118:	312c      	adds	r1, #44	@ 0x2c
1005f11a:	1c40      	adds	r0, r0, #1
1005f11c:	e7f0      	b.n	1005f100 <LL_sched_reserve_taskslot+0xc>
1005f11e:	20ff      	movs	r0, #255	@ 0xff
1005f120:	e004      	b.n	1005f12c <LL_sched_reserve_taskslot+0x38>
1005f122:	2200      	movs	r2, #0
1005f124:	600a      	str	r2, [r1, #0]
1005f126:	2101      	movs	r1, #1
1005f128:	7019      	strb	r1, [r3, #0]
1005f12a:	b662      	cpsie	i
1005f12c:	b2c0      	uxtb	r0, r0
1005f12e:	bd10      	pop	{r4, pc}

1005f130 <__arm_cp.22_0>:
1005f130:	200010fc 	.word	0x200010fc

1005f134 <__arm_cp.22_1>:
1005f134:	20001108 	.word	0x20001108

1005f138 <LL_sched_release_taskslot>:
1005f138:	28ff      	cmp	r0, #255	@ 0xff
1005f13a:	d006      	beq.n	1005f14a <LL_sched_release_taskslot+0x12>
1005f13c:	212c      	movs	r1, #44	@ 0x2c
1005f13e:	4341      	muls	r1, r0
1005f140:	4802      	ldr	r0, [pc, #8]	@ (1005f14c <__arm_cp.23_0>)
1005f142:	6800      	ldr	r0, [r0, #0]
1005f144:	1840      	adds	r0, r0, r1
1005f146:	2100      	movs	r1, #0
1005f148:	8241      	strh	r1, [r0, #18]
1005f14a:	4770      	bx	lr

1005f14c <__arm_cp.23_0>:
1005f14c:	200010fc 	.word	0x200010fc

1005f150 <LL_sched_check_and_call_sched>:
1005f150:	b510      	push	{r4, lr}
1005f152:	460c      	mov	r4, r1
1005f154:	f3ef 8110 	mrs	r1, PRIMASK
1005f158:	b672      	cpsid	i
1005f15a:	f7ff fda5 	bl	1005eca8 <LL_sched_is_scheduler_call_pending>
1005f15e:	b662      	cpsie	i
1005f160:	2800      	cmp	r0, #0
1005f162:	d000      	beq.n	1005f166 <LL_sched_check_and_call_sched+0x16>
1005f164:	bd10      	pop	{r4, pc}
1005f166:	4620      	mov	r0, r4
1005f168:	f7ff fdc0 	bl	1005ecec <LL_sched_engine>
1005f16c:	bd10      	pop	{r4, pc}
	...

1005f170 <LL_sched_check_and_wait_sched>:
1005f170:	b5b0      	push	{r4, r5, r7, lr}
1005f172:	4604      	mov	r4, r0
1005f174:	4813      	ldr	r0, [pc, #76]	@ (1005f1c4 <__arm_cp.25_0>)
1005f176:	7ac0      	ldrb	r0, [r0, #11]
1005f178:	42a0      	cmp	r0, r4
1005f17a:	d922      	bls.n	1005f1c2 <LL_sched_check_and_wait_sched+0x52>
1005f17c:	f3ef 8010 	mrs	r0, PRIMASK
1005f180:	b672      	cpsid	i
1005f182:	25ff      	movs	r5, #255	@ 0xff
1005f184:	35ec      	adds	r5, #236	@ 0xec
1005f186:	f7e7 f851 	bl	1004622c <BLEPLAT_GetCurrentSysTime>
1005f18a:	1940      	adds	r0, r0, r5
1005f18c:	f7ff fd8c 	bl	1005eca8 <LL_sched_is_scheduler_call_pending>
1005f190:	4a0d      	ldr	r2, [pc, #52]	@ (1005f1c8 <__arm_cp.25_1>)
1005f192:	6813      	ldr	r3, [r2, #0]
1005f194:	2100      	movs	r1, #0
1005f196:	7219      	strb	r1, [r3, #8]
1005f198:	b662      	cpsie	i
1005f19a:	2801      	cmp	r0, #1
1005f19c:	d10c      	bne.n	1005f1b8 <LL_sched_check_and_wait_sched+0x48>
1005f19e:	6810      	ldr	r0, [r2, #0]
1005f1a0:	6041      	str	r1, [r0, #4]
1005f1a2:	4a0a      	ldr	r2, [pc, #40]	@ (1005f1cc <__arm_cp.25_2>)
1005f1a4:	6843      	ldr	r3, [r0, #4]
1005f1a6:	4293      	cmp	r3, r2
1005f1a8:	d80b      	bhi.n	1005f1c2 <LL_sched_check_and_wait_sched+0x52>
1005f1aa:	7a03      	ldrb	r3, [r0, #8]
1005f1ac:	2b00      	cmp	r3, #0
1005f1ae:	d107      	bne.n	1005f1c0 <LL_sched_check_and_wait_sched+0x50>
1005f1b0:	6843      	ldr	r3, [r0, #4]
1005f1b2:	1c5b      	adds	r3, r3, #1
1005f1b4:	6043      	str	r3, [r0, #4]
1005f1b6:	e7f5      	b.n	1005f1a4 <LL_sched_check_and_wait_sched+0x34>
1005f1b8:	4620      	mov	r0, r4
1005f1ba:	f7ff fd97 	bl	1005ecec <LL_sched_engine>
1005f1be:	bdb0      	pop	{r4, r5, r7, pc}
1005f1c0:	7201      	strb	r1, [r0, #8]
1005f1c2:	bdb0      	pop	{r4, r5, r7, pc}

1005f1c4 <__arm_cp.25_0>:
1005f1c4:	20001108 	.word	0x20001108

1005f1c8 <__arm_cp.25_1>:
1005f1c8:	200010f4 	.word	0x200010f4

1005f1cc <__arm_cp.25_2>:
1005f1cc:	0004e1ff 	.word	0x0004e1ff

1005f1d0 <MBM_init>:
1005f1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005f1d2:	4c18      	ldr	r4, [pc, #96]	@ (1005f234 <__arm_cp.1_0>)
1005f1d4:	2501      	movs	r5, #1
1005f1d6:	2204      	movs	r2, #4
1005f1d8:	4e17      	ldr	r6, [pc, #92]	@ (1005f238 <__arm_cp.1_1>)
1005f1da:	4620      	mov	r0, r4
1005f1dc:	4629      	mov	r1, r5
1005f1de:	47b0      	blx	r6
1005f1e0:	4f16      	ldr	r7, [pc, #88]	@ (1005f23c <__arm_cp.1_2>)
1005f1e2:	6038      	str	r0, [r7, #0]
1005f1e4:	2210      	movs	r2, #16
1005f1e6:	4620      	mov	r0, r4
1005f1e8:	4629      	mov	r1, r5
1005f1ea:	47b0      	blx	r6
1005f1ec:	6839      	ldr	r1, [r7, #0]
1005f1ee:	6008      	str	r0, [r1, #0]
1005f1f0:	220c      	movs	r2, #12
1005f1f2:	4620      	mov	r0, r4
1005f1f4:	4629      	mov	r1, r5
1005f1f6:	47b0      	blx	r6
1005f1f8:	6839      	ldr	r1, [r7, #0]
1005f1fa:	6809      	ldr	r1, [r1, #0]
1005f1fc:	60c8      	str	r0, [r1, #12]
1005f1fe:	4d10      	ldr	r5, [pc, #64]	@ (1005f240 <__arm_cp.1_3>)
1005f200:	89e9      	ldrh	r1, [r5, #14]
1005f202:	2224      	movs	r2, #36	@ 0x24
1005f204:	4620      	mov	r0, r4
1005f206:	47b0      	blx	r6
1005f208:	4601      	mov	r1, r0
1005f20a:	6838      	ldr	r0, [r7, #0]
1005f20c:	6802      	ldr	r2, [r0, #0]
1005f20e:	68d0      	ldr	r0, [r2, #12]
1005f210:	6081      	str	r1, [r0, #8]
1005f212:	2100      	movs	r1, #0
1005f214:	2908      	cmp	r1, #8
1005f216:	d003      	beq.n	1005f220 <MBM_init+0x50>
1005f218:	2300      	movs	r3, #0
1005f21a:	5253      	strh	r3, [r2, r1]
1005f21c:	1c89      	adds	r1, r1, #2
1005f21e:	e7f9      	b.n	1005f214 <MBM_init+0x44>
1005f220:	89e9      	ldrh	r1, [r5, #14]
1005f222:	80d1      	strh	r1, [r2, #6]
1005f224:	2100      	movs	r1, #0
1005f226:	8111      	strh	r1, [r2, #8]
1005f228:	89e9      	ldrh	r1, [r5, #14]
1005f22a:	8041      	strh	r1, [r0, #2]
1005f22c:	f000 f948 	bl	1005f4c0 <Mem_Buff_init>
1005f230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005f232:	46c0      	nop			@ (mov r8, r8)

1005f234 <__arm_cp.1_0>:
1005f234:	20001104 	.word	0x20001104

1005f238 <__arm_cp.1_1>:
1005f238:	1005f489 	.word	0x1005f489

1005f23c <__arm_cp.1_2>:
1005f23c:	20001100 	.word	0x20001100

1005f240 <__arm_cp.1_3>:
1005f240:	20001108 	.word	0x20001108

1005f244 <MBM_get>:
1005f244:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005f246:	4a1a      	ldr	r2, [pc, #104]	@ (1005f2b0 <__arm_cp.2_0>)
1005f248:	6812      	ldr	r2, [r2, #0]
1005f24a:	6813      	ldr	r3, [r2, #0]
1005f24c:	f3ef 8210 	mrs	r2, PRIMASK
1005f250:	b672      	cpsid	i
1005f252:	2206      	movs	r2, #6
1005f254:	5e9c      	ldrsh	r4, [r3, r2]
1005f256:	17e2      	asrs	r2, r4, #31
1005f258:	4627      	mov	r7, r4
1005f25a:	4397      	bics	r7, r2
1005f25c:	0040      	lsls	r0, r0, #1
1005f25e:	9000      	str	r0, [sp, #0]
1005f260:	5e18      	ldrsh	r0, [r3, r0]
1005f262:	4a14      	ldr	r2, [pc, #80]	@ (1005f2b4 <__arm_cp.2_1>)
1005f264:	9102      	str	r1, [sp, #8]
1005f266:	1889      	adds	r1, r1, r2
1005f268:	0949      	lsrs	r1, r1, #5
1005f26a:	1c4d      	adds	r5, r1, #1
1005f26c:	2801      	cmp	r0, #1
1005f26e:	9501      	str	r5, [sp, #4]
1005f270:	db05      	blt.n	1005f27e <MBM_get+0x3a>
1005f272:	1b42      	subs	r2, r0, r5
1005f274:	4256      	negs	r6, r2
1005f276:	b212      	sxth	r2, r2
1005f278:	13d5      	asrs	r5, r2, #15
1005f27a:	4035      	ands	r5, r6
1005f27c:	183f      	adds	r7, r7, r0
1005f27e:	68d8      	ldr	r0, [r3, #12]
1005f280:	2200      	movs	r2, #0
1005f282:	5e86      	ldrsh	r6, [r0, r2]
1005f284:	b209      	sxth	r1, r1
1005f286:	428e      	cmp	r6, r1
1005f288:	dd0e      	ble.n	1005f2a8 <MBM_get+0x64>
1005f28a:	b23e      	sxth	r6, r7
1005f28c:	428e      	cmp	r6, r1
1005f28e:	dd0b      	ble.n	1005f2a8 <MBM_get+0x64>
1005f290:	9900      	ldr	r1, [sp, #0]
1005f292:	1859      	adds	r1, r3, r1
1005f294:	1b62      	subs	r2, r4, r5
1005f296:	80da      	strh	r2, [r3, #6]
1005f298:	880a      	ldrh	r2, [r1, #0]
1005f29a:	9b01      	ldr	r3, [sp, #4]
1005f29c:	1ad2      	subs	r2, r2, r3
1005f29e:	800a      	strh	r2, [r1, #0]
1005f2a0:	9902      	ldr	r1, [sp, #8]
1005f2a2:	f000 f943 	bl	1005f52c <Mem_Buff_get>
1005f2a6:	4602      	mov	r2, r0
1005f2a8:	b662      	cpsie	i
1005f2aa:	4610      	mov	r0, r2
1005f2ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f2ae:	46c0      	nop			@ (mov r8, r8)

1005f2b0 <__arm_cp.2_0>:
1005f2b0:	20001100 	.word	0x20001100

1005f2b4 <__arm_cp.2_1>:
1005f2b4:	001fffff 	.word	0x001fffff

1005f2b8 <MBM_release>:
1005f2b8:	b5b0      	push	{r4, r5, r7, lr}
1005f2ba:	460d      	mov	r5, r1
1005f2bc:	4604      	mov	r4, r0
1005f2be:	f000 f95b 	bl	1005f578 <Mem_Buff_get_chain_count>
1005f2c2:	4601      	mov	r1, r0
1005f2c4:	4628      	mov	r0, r5
1005f2c6:	f000 f80b 	bl	1005f2e0 <MBM_release_balance>
1005f2ca:	4804      	ldr	r0, [pc, #16]	@ (1005f2dc <__arm_cp.3_0>)
1005f2cc:	6800      	ldr	r0, [r0, #0]
1005f2ce:	6800      	ldr	r0, [r0, #0]
1005f2d0:	68c0      	ldr	r0, [r0, #12]
1005f2d2:	4621      	mov	r1, r4
1005f2d4:	f000 f90f 	bl	1005f4f6 <Mem_Buff_release>
1005f2d8:	bdb0      	pop	{r4, r5, r7, pc}
1005f2da:	46c0      	nop			@ (mov r8, r8)

1005f2dc <__arm_cp.3_0>:
1005f2dc:	20001100 	.word	0x20001100

1005f2e0 <MBM_release_balance>:
1005f2e0:	b510      	push	{r4, lr}
1005f2e2:	4a0b      	ldr	r2, [pc, #44]	@ (1005f310 <__arm_cp.4_0>)
1005f2e4:	6812      	ldr	r2, [r2, #0]
1005f2e6:	6812      	ldr	r2, [r2, #0]
1005f2e8:	f3ef 8310 	mrs	r3, PRIMASK
1005f2ec:	b672      	cpsid	i
1005f2ee:	0043      	lsls	r3, r0, #1
1005f2f0:	5ed0      	ldrsh	r0, [r2, r3]
1005f2f2:	1844      	adds	r4, r0, r1
1005f2f4:	52d4      	strh	r4, [r2, r3]
1005f2f6:	b20b      	sxth	r3, r1
1005f2f8:	18c3      	adds	r3, r0, r3
1005f2fa:	2b01      	cmp	r3, #1
1005f2fc:	db02      	blt.n	1005f304 <MBM_release_balance+0x24>
1005f2fe:	4243      	negs	r3, r0
1005f300:	0bc1      	lsrs	r1, r0, #15
1005f302:	4019      	ands	r1, r3
1005f304:	88d0      	ldrh	r0, [r2, #6]
1005f306:	1808      	adds	r0, r1, r0
1005f308:	80d0      	strh	r0, [r2, #6]
1005f30a:	b662      	cpsie	i
1005f30c:	bd10      	pop	{r4, pc}
1005f30e:	46c0      	nop			@ (mov r8, r8)

1005f310 <__arm_cp.4_0>:
1005f310:	20001100 	.word	0x20001100

1005f314 <MBM_get_available_mem_buffers>:
1005f314:	4908      	ldr	r1, [pc, #32]	@ (1005f338 <__arm_cp.5_0>)
1005f316:	6809      	ldr	r1, [r1, #0]
1005f318:	680a      	ldr	r2, [r1, #0]
1005f31a:	f3ef 8110 	mrs	r1, PRIMASK
1005f31e:	b672      	cpsid	i
1005f320:	2106      	movs	r1, #6
1005f322:	5e51      	ldrsh	r1, [r2, r1]
1005f324:	17cb      	asrs	r3, r1, #31
1005f326:	4399      	bics	r1, r3
1005f328:	0040      	lsls	r0, r0, #1
1005f32a:	5e10      	ldrsh	r0, [r2, r0]
1005f32c:	2800      	cmp	r0, #0
1005f32e:	dd00      	ble.n	1005f332 <MBM_get_available_mem_buffers+0x1e>
1005f330:	1809      	adds	r1, r1, r0
1005f332:	b288      	uxth	r0, r1
1005f334:	b662      	cpsie	i
1005f336:	4770      	bx	lr

1005f338 <__arm_cp.5_0>:
1005f338:	20001100 	.word	0x20001100

1005f33c <MBM_resize>:
1005f33c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005f33e:	2481      	movs	r4, #129	@ 0x81
1005f340:	2800      	cmp	r0, #0
1005f342:	d032      	beq.n	1005f3aa <MBM_resize+0x6e>
1005f344:	4606      	mov	r6, r0
1005f346:	9102      	str	r1, [sp, #8]
1005f348:	9401      	str	r4, [sp, #4]
1005f34a:	4819      	ldr	r0, [pc, #100]	@ (1005f3b0 <__arm_cp.6_0>)
1005f34c:	6800      	ldr	r0, [r0, #0]
1005f34e:	6800      	ldr	r0, [r0, #0]
1005f350:	9000      	str	r0, [sp, #0]
1005f352:	1e50      	subs	r0, r2, #1
1005f354:	211f      	movs	r1, #31
1005f356:	4301      	orrs	r1, r0
1005f358:	1c4c      	adds	r4, r1, #1
1005f35a:	b2a7      	uxth	r7, r4
1005f35c:	4630      	mov	r0, r6
1005f35e:	f000 f913 	bl	1005f588 <Mem_Buff_get_chain_size>
1005f362:	4605      	mov	r5, r0
1005f364:	4287      	cmp	r7, r0
1005f366:	d90c      	bls.n	1005f382 <MBM_resize+0x46>
1005f368:	1b60      	subs	r0, r4, r5
1005f36a:	b281      	uxth	r1, r0
1005f36c:	9802      	ldr	r0, [sp, #8]
1005f36e:	f7ff ff69 	bl	1005f244 <MBM_get>
1005f372:	2800      	cmp	r0, #0
1005f374:	9c01      	ldr	r4, [sp, #4]
1005f376:	d018      	beq.n	1005f3aa <MBM_resize+0x6e>
1005f378:	4601      	mov	r1, r0
1005f37a:	4630      	mov	r0, r6
1005f37c:	f000 fa29 	bl	1005f7d2 <Mem_Buff_append>
1005f380:	e012      	b.n	1005f3a8 <MBM_resize+0x6c>
1005f382:	42af      	cmp	r7, r5
1005f384:	d210      	bcs.n	1005f3a8 <MBM_resize+0x6c>
1005f386:	9800      	ldr	r0, [sp, #0]
1005f388:	68c0      	ldr	r0, [r0, #12]
1005f38a:	4631      	mov	r1, r6
1005f38c:	463a      	mov	r2, r7
1005f38e:	f000 f907 	bl	1005f5a0 <Mem_Buff_resize>
1005f392:	4604      	mov	r4, r0
1005f394:	1e78      	subs	r0, r7, #1
1005f396:	0940      	lsrs	r0, r0, #5
1005f398:	1e69      	subs	r1, r5, #1
1005f39a:	0949      	lsrs	r1, r1, #5
1005f39c:	1a08      	subs	r0, r1, r0
1005f39e:	b281      	uxth	r1, r0
1005f3a0:	9802      	ldr	r0, [sp, #8]
1005f3a2:	f7ff ff9d 	bl	1005f2e0 <MBM_release_balance>
1005f3a6:	e000      	b.n	1005f3aa <MBM_resize+0x6e>
1005f3a8:	2400      	movs	r4, #0
1005f3aa:	4620      	mov	r0, r4
1005f3ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f3ae:	46c0      	nop			@ (mov r8, r8)

1005f3b0 <__arm_cp.6_0>:
1005f3b0:	20001100 	.word	0x20001100

1005f3b4 <MBM_reserve>:
1005f3b4:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005f3b6:	460c      	mov	r4, r1
1005f3b8:	4601      	mov	r1, r0
1005f3ba:	481c      	ldr	r0, [pc, #112]	@ (1005f42c <__arm_cp.7_0>)
1005f3bc:	6800      	ldr	r0, [r0, #0]
1005f3be:	6805      	ldr	r5, [r0, #0]
1005f3c0:	8928      	ldrh	r0, [r5, #8]
1005f3c2:	68ea      	ldr	r2, [r5, #12]
1005f3c4:	8852      	ldrh	r2, [r2, #2]
1005f3c6:	1a13      	subs	r3, r2, r0
1005f3c8:	42a3      	cmp	r3, r4
1005f3ca:	da26      	bge.n	1005f41a <MBM_reserve+0x66>
1005f3cc:	1aa1      	subs	r1, r4, r2
1005f3ce:	1808      	adds	r0, r1, r0
1005f3d0:	a901      	add	r1, sp, #4
1005f3d2:	8008      	strh	r0, [r1, #0]
1005f3d4:	4816      	ldr	r0, [pc, #88]	@ (1005f430 <__arm_cp.7_1>)
1005f3d6:	6800      	ldr	r0, [r0, #0]
1005f3d8:	6980      	ldr	r0, [r0, #24]
1005f3da:	2142      	movs	r1, #66	@ 0x42
1005f3dc:	2240      	movs	r2, #64	@ 0x40
1005f3de:	2303      	movs	r3, #3
1005f3e0:	f7f3 fdaa 	bl	10052f38 <aci_event_fifo_push_header>
1005f3e4:	2800      	cmp	r0, #0
1005f3e6:	d017      	beq.n	1005f418 <MBM_reserve+0x64>
1005f3e8:	4604      	mov	r4, r0
1005f3ea:	2202      	movs	r2, #2
1005f3ec:	72c2      	strb	r2, [r0, #11]
1005f3ee:	2009      	movs	r0, #9
1005f3f0:	72a0      	strb	r0, [r4, #10]
1005f3f2:	4620      	mov	r0, r4
1005f3f4:	300c      	adds	r0, #12
1005f3f6:	a901      	add	r1, sp, #4
1005f3f8:	f7e6 fe2c 	bl	10046054 <BLEPLAT_MemCpy>
1005f3fc:	2000      	movs	r0, #0
1005f3fe:	7260      	strb	r0, [r4, #9]
1005f400:	2106      	movs	r1, #6
1005f402:	7221      	strb	r1, [r4, #8]
1005f404:	71e0      	strb	r0, [r4, #7]
1005f406:	71a1      	strb	r1, [r4, #6]
1005f408:	20ff      	movs	r0, #255	@ 0xff
1005f40a:	7160      	strb	r0, [r4, #5]
1005f40c:	2082      	movs	r0, #130	@ 0x82
1005f40e:	7120      	strb	r0, [r4, #4]
1005f410:	2042      	movs	r0, #66	@ 0x42
1005f412:	4621      	mov	r1, r4
1005f414:	f7f3 fe2d 	bl	10053072 <aci_event_fifo_push>
1005f418:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1005f41a:	2003      	movs	r0, #3
1005f41c:	4622      	mov	r2, r4
1005f41e:	f000 f809 	bl	1005f434 <MBM_move_class>
1005f422:	8928      	ldrh	r0, [r5, #8]
1005f424:	1900      	adds	r0, r0, r4
1005f426:	8128      	strh	r0, [r5, #8]
1005f428:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1005f42a:	46c0      	nop			@ (mov r8, r8)

1005f42c <__arm_cp.7_0>:
1005f42c:	20001100 	.word	0x20001100

1005f430 <__arm_cp.7_1>:
1005f430:	200010a4 	.word	0x200010a4

1005f434 <MBM_move_class>:
1005f434:	b510      	push	{r4, lr}
1005f436:	4b08      	ldr	r3, [pc, #32]	@ (1005f458 <__arm_cp.8_0>)
1005f438:	681b      	ldr	r3, [r3, #0]
1005f43a:	681b      	ldr	r3, [r3, #0]
1005f43c:	f3ef 8410 	mrs	r4, PRIMASK
1005f440:	b672      	cpsid	i
1005f442:	0040      	lsls	r0, r0, #1
1005f444:	5a1c      	ldrh	r4, [r3, r0]
1005f446:	1aa4      	subs	r4, r4, r2
1005f448:	521c      	strh	r4, [r3, r0]
1005f44a:	0048      	lsls	r0, r1, #1
1005f44c:	5a19      	ldrh	r1, [r3, r0]
1005f44e:	1889      	adds	r1, r1, r2
1005f450:	5219      	strh	r1, [r3, r0]
1005f452:	b662      	cpsie	i
1005f454:	bd10      	pop	{r4, pc}
1005f456:	46c0      	nop			@ (mov r8, r8)

1005f458 <__arm_cp.8_0>:
1005f458:	20001100 	.word	0x20001100

1005f45c <MBM_unreserve>:
1005f45c:	b5b0      	push	{r4, r5, r7, lr}
1005f45e:	460c      	mov	r4, r1
1005f460:	4905      	ldr	r1, [pc, #20]	@ (1005f478 <__arm_cp.9_0>)
1005f462:	6809      	ldr	r1, [r1, #0]
1005f464:	680d      	ldr	r5, [r1, #0]
1005f466:	2103      	movs	r1, #3
1005f468:	4622      	mov	r2, r4
1005f46a:	f7ff ffe3 	bl	1005f434 <MBM_move_class>
1005f46e:	8928      	ldrh	r0, [r5, #8]
1005f470:	1b00      	subs	r0, r0, r4
1005f472:	8128      	strh	r0, [r5, #8]
1005f474:	bdb0      	pop	{r4, r5, r7, pc}
1005f476:	46c0      	nop			@ (mov r8, r8)

1005f478 <__arm_cp.9_0>:
1005f478:	20001100 	.word	0x20001100

1005f47c <csmem_init>:
1005f47c:	4801      	ldr	r0, [pc, #4]	@ (1005f484 <__arm_cp.0_0>)
1005f47e:	6841      	ldr	r1, [r0, #4]
1005f480:	6001      	str	r1, [r0, #0]
1005f482:	4770      	bx	lr

1005f484 <__arm_cp.0_0>:
1005f484:	20001104 	.word	0x20001104

1005f488 <csmem_mem_assign>:
1005f488:	b570      	push	{r4, r5, r6, lr}
1005f48a:	4614      	mov	r4, r2
1005f48c:	4605      	mov	r5, r0
1005f48e:	434c      	muls	r4, r1
1005f490:	6800      	ldr	r0, [r0, #0]
1005f492:	1e40      	subs	r0, r0, #1
1005f494:	2103      	movs	r1, #3
1005f496:	4301      	orrs	r1, r0
1005f498:	1c4e      	adds	r6, r1, #1
1005f49a:	2100      	movs	r1, #0
1005f49c:	4630      	mov	r0, r6
1005f49e:	4622      	mov	r2, r4
1005f4a0:	f7e6 fde8 	bl	10046074 <BLEPLAT_MemSet>
1005f4a4:	1930      	adds	r0, r6, r4
1005f4a6:	6028      	str	r0, [r5, #0]
1005f4a8:	4630      	mov	r0, r6
1005f4aa:	bd70      	pop	{r4, r5, r6, pc}

1005f4ac <csmem_mem_0_assign>:
1005f4ac:	b580      	push	{r7, lr}
1005f4ae:	460a      	mov	r2, r1
1005f4b0:	4601      	mov	r1, r0
1005f4b2:	4802      	ldr	r0, [pc, #8]	@ (1005f4bc <__arm_cp.3_0>)
1005f4b4:	f7ff ffe8 	bl	1005f488 <csmem_mem_assign>
1005f4b8:	bd80      	pop	{r7, pc}
1005f4ba:	46c0      	nop			@ (mov r8, r8)

1005f4bc <__arm_cp.3_0>:
1005f4bc:	20001104 	.word	0x20001104

1005f4c0 <Mem_Buff_init>:
1005f4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f4c2:	b081      	sub	sp, #4
1005f4c4:	4605      	mov	r5, r0
1005f4c6:	8840      	ldrh	r0, [r0, #2]
1005f4c8:	2486      	movs	r4, #134	@ 0x86
1005f4ca:	2800      	cmp	r0, #0
1005f4cc:	d010      	beq.n	1005f4f0 <Mem_Buff_init+0x30>
1005f4ce:	68ae      	ldr	r6, [r5, #8]
1005f4d0:	2e00      	cmp	r6, #0
1005f4d2:	d00d      	beq.n	1005f4f0 <Mem_Buff_init+0x30>
1005f4d4:	2400      	movs	r4, #0
1005f4d6:	606c      	str	r4, [r5, #4]
1005f4d8:	802c      	strh	r4, [r5, #0]
1005f4da:	4627      	mov	r7, r4
1005f4dc:	6034      	str	r4, [r6, #0]
1005f4de:	4628      	mov	r0, r5
1005f4e0:	4631      	mov	r1, r6
1005f4e2:	f000 f808 	bl	1005f4f6 <Mem_Buff_release>
1005f4e6:	3624      	adds	r6, #36	@ 0x24
1005f4e8:	1c7f      	adds	r7, r7, #1
1005f4ea:	8868      	ldrh	r0, [r5, #2]
1005f4ec:	4287      	cmp	r7, r0
1005f4ee:	d3f5      	bcc.n	1005f4dc <Mem_Buff_init+0x1c>
1005f4f0:	4620      	mov	r0, r4
1005f4f2:	b001      	add	sp, #4
1005f4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005f4f6 <Mem_Buff_release>:
1005f4f6:	b510      	push	{r4, lr}
1005f4f8:	2900      	cmp	r1, #0
1005f4fa:	d015      	beq.n	1005f528 <Mem_Buff_release+0x32>
1005f4fc:	2200      	movs	r2, #0
1005f4fe:	460c      	mov	r4, r1
1005f500:	4623      	mov	r3, r4
1005f502:	1c52      	adds	r2, r2, #1
1005f504:	6824      	ldr	r4, [r4, #0]
1005f506:	2c00      	cmp	r4, #0
1005f508:	d1fa      	bne.n	1005f500 <Mem_Buff_release+0xa>
1005f50a:	f3ef 8410 	mrs	r4, PRIMASK
1005f50e:	b672      	cpsid	i
1005f510:	6844      	ldr	r4, [r0, #4]
1005f512:	6041      	str	r1, [r0, #4]
1005f514:	601c      	str	r4, [r3, #0]
1005f516:	8801      	ldrh	r1, [r0, #0]
1005f518:	1889      	adds	r1, r1, r2
1005f51a:	8001      	strh	r1, [r0, #0]
1005f51c:	b662      	cpsie	i
1005f51e:	2000      	movs	r0, #0
1005f520:	f002 fff2 	bl	10062508 <tsk_signal_resource_idx>
1005f524:	f7e4 faf9 	bl	10043b1a <BLE_STACK_ProcessRequest>
1005f528:	bd10      	pop	{r4, pc}
	...

1005f52c <Mem_Buff_get>:
1005f52c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f52e:	4a11      	ldr	r2, [pc, #68]	@ (1005f574 <__arm_cp.2_0>)
1005f530:	1889      	adds	r1, r1, r2
1005f532:	0949      	lsrs	r1, r1, #5
1005f534:	1c4a      	adds	r2, r1, #1
1005f536:	b294      	uxth	r4, r2
1005f538:	f3ef 8110 	mrs	r1, PRIMASK
1005f53c:	b672      	cpsid	i
1005f53e:	2100      	movs	r1, #0
1005f540:	2c00      	cmp	r4, #0
1005f542:	d013      	beq.n	1005f56c <Mem_Buff_get+0x40>
1005f544:	8803      	ldrh	r3, [r0, #0]
1005f546:	429c      	cmp	r4, r3
1005f548:	d810      	bhi.n	1005f56c <Mem_Buff_get+0x40>
1005f54a:	1e64      	subs	r4, r4, #1
1005f54c:	6841      	ldr	r1, [r0, #4]
1005f54e:	460d      	mov	r5, r1
1005f550:	d006      	beq.n	1005f560 <Mem_Buff_get+0x34>
1005f552:	2600      	movs	r6, #0
1005f554:	460d      	mov	r5, r1
1005f556:	682d      	ldr	r5, [r5, #0]
1005f558:	1c76      	adds	r6, r6, #1
1005f55a:	b2b7      	uxth	r7, r6
1005f55c:	42bc      	cmp	r4, r7
1005f55e:	d8fa      	bhi.n	1005f556 <Mem_Buff_get+0x2a>
1005f560:	682c      	ldr	r4, [r5, #0]
1005f562:	6044      	str	r4, [r0, #4]
1005f564:	2400      	movs	r4, #0
1005f566:	602c      	str	r4, [r5, #0]
1005f568:	1a9a      	subs	r2, r3, r2
1005f56a:	8002      	strh	r2, [r0, #0]
1005f56c:	b662      	cpsie	i
1005f56e:	4608      	mov	r0, r1
1005f570:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005f572:	46c0      	nop			@ (mov r8, r8)

1005f574 <__arm_cp.2_0>:
1005f574:	001fffff 	.word	0x001fffff

1005f578 <Mem_Buff_get_chain_count>:
1005f578:	2100      	movs	r1, #0
1005f57a:	2800      	cmp	r0, #0
1005f57c:	d002      	beq.n	1005f584 <Mem_Buff_get_chain_count+0xc>
1005f57e:	6800      	ldr	r0, [r0, #0]
1005f580:	1c49      	adds	r1, r1, #1
1005f582:	e7fa      	b.n	1005f57a <Mem_Buff_get_chain_count+0x2>
1005f584:	b288      	uxth	r0, r1
1005f586:	4770      	bx	lr

1005f588 <Mem_Buff_get_chain_size>:
1005f588:	2800      	cmp	r0, #0
1005f58a:	d006      	beq.n	1005f59a <Mem_Buff_get_chain_size+0x12>
1005f58c:	2100      	movs	r1, #0
1005f58e:	6800      	ldr	r0, [r0, #0]
1005f590:	1c49      	adds	r1, r1, #1
1005f592:	2800      	cmp	r0, #0
1005f594:	d1fb      	bne.n	1005f58e <Mem_Buff_get_chain_size+0x6>
1005f596:	0148      	lsls	r0, r1, #5
1005f598:	e000      	b.n	1005f59c <Mem_Buff_get_chain_size+0x14>
1005f59a:	2000      	movs	r0, #0
1005f59c:	b280      	uxth	r0, r0
1005f59e:	4770      	bx	lr

1005f5a0 <Mem_Buff_resize>:
1005f5a0:	b570      	push	{r4, r5, r6, lr}
1005f5a2:	2400      	movs	r4, #0
1005f5a4:	2900      	cmp	r1, #0
1005f5a6:	d00a      	beq.n	1005f5be <Mem_Buff_resize+0x1e>
1005f5a8:	2600      	movs	r6, #0
1005f5aa:	460d      	mov	r5, r1
1005f5ac:	6809      	ldr	r1, [r1, #0]
1005f5ae:	4633      	mov	r3, r6
1005f5b0:	3320      	adds	r3, #32
1005f5b2:	b29e      	uxth	r6, r3
1005f5b4:	4296      	cmp	r6, r2
1005f5b6:	d20e      	bcs.n	1005f5d6 <Mem_Buff_resize+0x36>
1005f5b8:	2900      	cmp	r1, #0
1005f5ba:	d1f6      	bne.n	1005f5aa <Mem_Buff_resize+0xa>
1005f5bc:	e001      	b.n	1005f5c2 <Mem_Buff_resize+0x22>
1005f5be:	4623      	mov	r3, r4
1005f5c0:	4625      	mov	r5, r4
1005f5c2:	1ad1      	subs	r1, r2, r3
1005f5c4:	b289      	uxth	r1, r1
1005f5c6:	f7ff ffb1 	bl	1005f52c <Mem_Buff_get>
1005f5ca:	6028      	str	r0, [r5, #0]
1005f5cc:	2800      	cmp	r0, #0
1005f5ce:	d10a      	bne.n	1005f5e6 <Mem_Buff_resize+0x46>
1005f5d0:	2079      	movs	r0, #121	@ 0x79
1005f5d2:	43c4      	mvns	r4, r0
1005f5d4:	e007      	b.n	1005f5e6 <Mem_Buff_resize+0x46>
1005f5d6:	2900      	cmp	r1, #0
1005f5d8:	d004      	beq.n	1005f5e4 <Mem_Buff_resize+0x44>
1005f5da:	f7ff ff8c 	bl	1005f4f6 <Mem_Buff_release>
1005f5de:	2400      	movs	r4, #0
1005f5e0:	602c      	str	r4, [r5, #0]
1005f5e2:	e000      	b.n	1005f5e6 <Mem_Buff_resize+0x46>
1005f5e4:	2400      	movs	r4, #0
1005f5e6:	b2e0      	uxtb	r0, r4
1005f5e8:	bd70      	pop	{r4, r5, r6, pc}

1005f5ea <Mem_Buff_get_buff_off>:
1005f5ea:	2900      	cmp	r1, #0
1005f5ec:	d008      	beq.n	1005f600 <Mem_Buff_get_buff_off+0x16>
1005f5ee:	2800      	cmp	r0, #0
1005f5f0:	d009      	beq.n	1005f606 <Mem_Buff_get_buff_off+0x1c>
1005f5f2:	b28b      	uxth	r3, r1
1005f5f4:	2b20      	cmp	r3, #32
1005f5f6:	d304      	bcc.n	1005f602 <Mem_Buff_get_buff_off+0x18>
1005f5f8:	6800      	ldr	r0, [r0, #0]
1005f5fa:	3920      	subs	r1, #32
1005f5fc:	040b      	lsls	r3, r1, #16
1005f5fe:	d1f6      	bne.n	1005f5ee <Mem_Buff_get_buff_off+0x4>
1005f600:	2100      	movs	r1, #0
1005f602:	8011      	strh	r1, [r2, #0]
1005f604:	4770      	bx	lr
1005f606:	2000      	movs	r0, #0
1005f608:	4770      	bx	lr

1005f60a <Mem_Buff_write>:
1005f60a:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f60c:	b081      	sub	sp, #4
1005f60e:	4606      	mov	r6, r0
1005f610:	0950      	lsrs	r0, r2, #5
1005f612:	0604      	lsls	r4, r0, #24
1005f614:	d004      	beq.n	1005f620 <Mem_Buff_write+0x16>
1005f616:	2e00      	cmp	r6, #0
1005f618:	d02d      	beq.n	1005f676 <Mem_Buff_write+0x6c>
1005f61a:	6836      	ldr	r6, [r6, #0]
1005f61c:	1e40      	subs	r0, r0, #1
1005f61e:	e7f8      	b.n	1005f612 <Mem_Buff_write+0x8>
1005f620:	461c      	mov	r4, r3
1005f622:	1e5b      	subs	r3, r3, #1
1005f624:	4620      	mov	r0, r4
1005f626:	4198      	sbcs	r0, r3
1005f628:	2c00      	cmp	r4, #0
1005f62a:	d01f      	beq.n	1005f66c <Mem_Buff_write+0x62>
1005f62c:	2e00      	cmp	r6, #0
1005f62e:	d01d      	beq.n	1005f66c <Mem_Buff_write+0x62>
1005f630:	201f      	movs	r0, #31
1005f632:	4002      	ands	r2, r0
1005f634:	2020      	movs	r0, #32
1005f636:	1a85      	subs	r5, r0, r2
1005f638:	b2a8      	uxth	r0, r5
1005f63a:	b2a3      	uxth	r3, r4
1005f63c:	4298      	cmp	r0, r3
1005f63e:	d300      	bcc.n	1005f642 <Mem_Buff_write+0x38>
1005f640:	4625      	mov	r5, r4
1005f642:	9500      	str	r5, [sp, #0]
1005f644:	b2af      	uxth	r7, r5
1005f646:	18b0      	adds	r0, r6, r2
1005f648:	1d00      	adds	r0, r0, #4
1005f64a:	463a      	mov	r2, r7
1005f64c:	460d      	mov	r5, r1
1005f64e:	f7e6 fd01 	bl	10046054 <BLEPLAT_MemCpy>
1005f652:	9800      	ldr	r0, [sp, #0]
1005f654:	1a24      	subs	r4, r4, r0
1005f656:	b2a1      	uxth	r1, r4
1005f658:	1e4a      	subs	r2, r1, #1
1005f65a:	4608      	mov	r0, r1
1005f65c:	4190      	sbcs	r0, r2
1005f65e:	2900      	cmp	r1, #0
1005f660:	d004      	beq.n	1005f66c <Mem_Buff_write+0x62>
1005f662:	19e9      	adds	r1, r5, r7
1005f664:	6836      	ldr	r6, [r6, #0]
1005f666:	2200      	movs	r2, #0
1005f668:	2e00      	cmp	r6, #0
1005f66a:	d1e3      	bne.n	1005f634 <Mem_Buff_write+0x2a>
1005f66c:	2800      	cmp	r0, #0
1005f66e:	d003      	beq.n	1005f678 <Mem_Buff_write+0x6e>
1005f670:	207e      	movs	r0, #126	@ 0x7e
1005f672:	43c0      	mvns	r0, r0
1005f674:	e000      	b.n	1005f678 <Mem_Buff_write+0x6e>
1005f676:	2081      	movs	r0, #129	@ 0x81
1005f678:	b2c0      	uxtb	r0, r0
1005f67a:	b001      	add	sp, #4
1005f67c:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005f67e <Mem_Buff_read>:
1005f67e:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f680:	b081      	sub	sp, #4
1005f682:	460d      	mov	r5, r1
1005f684:	4606      	mov	r6, r0
1005f686:	2a00      	cmp	r2, #0
1005f688:	d008      	beq.n	1005f69c <Mem_Buff_read+0x1e>
1005f68a:	2e00      	cmp	r6, #0
1005f68c:	d02a      	beq.n	1005f6e4 <Mem_Buff_read+0x66>
1005f68e:	b290      	uxth	r0, r2
1005f690:	2820      	cmp	r0, #32
1005f692:	d306      	bcc.n	1005f6a2 <Mem_Buff_read+0x24>
1005f694:	6836      	ldr	r6, [r6, #0]
1005f696:	3a20      	subs	r2, #32
1005f698:	0410      	lsls	r0, r2, #16
1005f69a:	d1f6      	bne.n	1005f68a <Mem_Buff_read+0xc>
1005f69c:	2e00      	cmp	r6, #0
1005f69e:	d021      	beq.n	1005f6e4 <Mem_Buff_read+0x66>
1005f6a0:	2200      	movs	r2, #0
1005f6a2:	2b00      	cmp	r3, #0
1005f6a4:	d020      	beq.n	1005f6e8 <Mem_Buff_read+0x6a>
1005f6a6:	2020      	movs	r0, #32
1005f6a8:	1a84      	subs	r4, r0, r2
1005f6aa:	b2a0      	uxth	r0, r4
1005f6ac:	b299      	uxth	r1, r3
1005f6ae:	4288      	cmp	r0, r1
1005f6b0:	d300      	bcc.n	1005f6b4 <Mem_Buff_read+0x36>
1005f6b2:	461c      	mov	r4, r3
1005f6b4:	b2a7      	uxth	r7, r4
1005f6b6:	b290      	uxth	r0, r2
1005f6b8:	1830      	adds	r0, r6, r0
1005f6ba:	1d01      	adds	r1, r0, #4
1005f6bc:	4628      	mov	r0, r5
1005f6be:	463a      	mov	r2, r7
1005f6c0:	9300      	str	r3, [sp, #0]
1005f6c2:	f7e6 fcc7 	bl	10046054 <BLEPLAT_MemCpy>
1005f6c6:	9b00      	ldr	r3, [sp, #0]
1005f6c8:	1b1b      	subs	r3, r3, r4
1005f6ca:	0418      	lsls	r0, r3, #16
1005f6cc:	d004      	beq.n	1005f6d8 <Mem_Buff_read+0x5a>
1005f6ce:	19ed      	adds	r5, r5, r7
1005f6d0:	6836      	ldr	r6, [r6, #0]
1005f6d2:	2200      	movs	r2, #0
1005f6d4:	2e00      	cmp	r6, #0
1005f6d6:	d1e6      	bne.n	1005f6a6 <Mem_Buff_read+0x28>
1005f6d8:	b298      	uxth	r0, r3
1005f6da:	2800      	cmp	r0, #0
1005f6dc:	d005      	beq.n	1005f6ea <Mem_Buff_read+0x6c>
1005f6de:	207e      	movs	r0, #126	@ 0x7e
1005f6e0:	43c0      	mvns	r0, r0
1005f6e2:	e002      	b.n	1005f6ea <Mem_Buff_read+0x6c>
1005f6e4:	2081      	movs	r0, #129	@ 0x81
1005f6e6:	e000      	b.n	1005f6ea <Mem_Buff_read+0x6c>
1005f6e8:	2000      	movs	r0, #0
1005f6ea:	b2c0      	uxtb	r0, r0
1005f6ec:	b001      	add	sp, #4
1005f6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005f6f0 <Mem_Buff_cmp>:
1005f6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f6f2:	b083      	sub	sp, #12
1005f6f4:	9102      	str	r1, [sp, #8]
1005f6f6:	4606      	mov	r6, r0
1005f6f8:	2a00      	cmp	r2, #0
1005f6fa:	d008      	beq.n	1005f70e <Mem_Buff_cmp+0x1e>
1005f6fc:	2e00      	cmp	r6, #0
1005f6fe:	d033      	beq.n	1005f768 <Mem_Buff_cmp+0x78>
1005f700:	b290      	uxth	r0, r2
1005f702:	2820      	cmp	r0, #32
1005f704:	d306      	bcc.n	1005f714 <Mem_Buff_cmp+0x24>
1005f706:	6836      	ldr	r6, [r6, #0]
1005f708:	3a20      	subs	r2, #32
1005f70a:	0410      	lsls	r0, r2, #16
1005f70c:	d1f6      	bne.n	1005f6fc <Mem_Buff_cmp+0xc>
1005f70e:	2e00      	cmp	r6, #0
1005f710:	d02a      	beq.n	1005f768 <Mem_Buff_cmp+0x78>
1005f712:	2200      	movs	r2, #0
1005f714:	2b00      	cmp	r3, #0
1005f716:	9301      	str	r3, [sp, #4]
1005f718:	d020      	beq.n	1005f75c <Mem_Buff_cmp+0x6c>
1005f71a:	2700      	movs	r7, #0
1005f71c:	461d      	mov	r5, r3
1005f71e:	b290      	uxth	r0, r2
1005f720:	281f      	cmp	r0, #31
1005f722:	d814      	bhi.n	1005f74e <Mem_Buff_cmp+0x5e>
1005f724:	2120      	movs	r1, #32
1005f726:	1a8c      	subs	r4, r1, r2
1005f728:	b2a1      	uxth	r1, r4
1005f72a:	b2aa      	uxth	r2, r5
1005f72c:	4291      	cmp	r1, r2
1005f72e:	d300      	bcc.n	1005f732 <Mem_Buff_cmp+0x42>
1005f730:	462c      	mov	r4, r5
1005f732:	b2a2      	uxth	r2, r4
1005f734:	b2b9      	uxth	r1, r7
1005f736:	9b02      	ldr	r3, [sp, #8]
1005f738:	1859      	adds	r1, r3, r1
1005f73a:	1830      	adds	r0, r6, r0
1005f73c:	1d00      	adds	r0, r0, #4
1005f73e:	f7e6 fca9 	bl	10046094 <BLEPLAT_MemCmp>
1005f742:	2800      	cmp	r0, #0
1005f744:	d10f      	bne.n	1005f766 <Mem_Buff_cmp+0x76>
1005f746:	1b2d      	subs	r5, r5, r4
1005f748:	19e7      	adds	r7, r4, r7
1005f74a:	2200      	movs	r2, #0
1005f74c:	e000      	b.n	1005f750 <Mem_Buff_cmp+0x60>
1005f74e:	3a20      	subs	r2, #32
1005f750:	0428      	lsls	r0, r5, #16
1005f752:	d004      	beq.n	1005f75e <Mem_Buff_cmp+0x6e>
1005f754:	6836      	ldr	r6, [r6, #0]
1005f756:	2e00      	cmp	r6, #0
1005f758:	d1e1      	bne.n	1005f71e <Mem_Buff_cmp+0x2e>
1005f75a:	e000      	b.n	1005f75e <Mem_Buff_cmp+0x6e>
1005f75c:	2700      	movs	r7, #0
1005f75e:	b2b8      	uxth	r0, r7
1005f760:	9b01      	ldr	r3, [sp, #4]
1005f762:	1a1b      	subs	r3, r3, r0
1005f764:	e000      	b.n	1005f768 <Mem_Buff_cmp+0x78>
1005f766:	4603      	mov	r3, r0
1005f768:	4618      	mov	r0, r3
1005f76a:	b003      	add	sp, #12
1005f76c:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005f76e <Mem_Buff_block_copy>:
1005f76e:	b510      	push	{r4, lr}
1005f770:	1e52      	subs	r2, r2, #1
1005f772:	231f      	movs	r3, #31
1005f774:	4313      	orrs	r3, r2
1005f776:	b29a      	uxth	r2, r3
1005f778:	1c53      	adds	r3, r2, #1
1005f77a:	b29a      	uxth	r2, r3
1005f77c:	429a      	cmp	r2, r3
1005f77e:	d001      	beq.n	1005f784 <Mem_Buff_block_copy+0x16>
1005f780:	2200      	movs	r2, #0
1005f782:	e00d      	b.n	1005f7a0 <Mem_Buff_block_copy+0x32>
1005f784:	0953      	lsrs	r3, r2, #5
1005f786:	460a      	mov	r2, r1
1005f788:	2100      	movs	r1, #0
1005f78a:	1854      	adds	r4, r2, r1
1005f78c:	6864      	ldr	r4, [r4, #4]
1005f78e:	5044      	str	r4, [r0, r1]
1005f790:	1d09      	adds	r1, r1, #4
1005f792:	2920      	cmp	r1, #32
1005f794:	d1f9      	bne.n	1005f78a <Mem_Buff_block_copy+0x1c>
1005f796:	6811      	ldr	r1, [r2, #0]
1005f798:	3020      	adds	r0, #32
1005f79a:	1e5b      	subs	r3, r3, #1
1005f79c:	041c      	lsls	r4, r3, #16
1005f79e:	d1f2      	bne.n	1005f786 <Mem_Buff_block_copy+0x18>
1005f7a0:	4610      	mov	r0, r2
1005f7a2:	bd10      	pop	{r4, pc}

1005f7a4 <Mem_Buff_block_write>:
1005f7a4:	b5b0      	push	{r4, r5, r7, lr}
1005f7a6:	1e52      	subs	r2, r2, #1
1005f7a8:	231f      	movs	r3, #31
1005f7aa:	4313      	orrs	r3, r2
1005f7ac:	b29a      	uxth	r2, r3
1005f7ae:	1c53      	adds	r3, r2, #1
1005f7b0:	b29a      	uxth	r2, r3
1005f7b2:	429a      	cmp	r2, r3
1005f7b4:	d10c      	bne.n	1005f7d0 <Mem_Buff_block_write+0x2c>
1005f7b6:	0952      	lsrs	r2, r2, #5
1005f7b8:	1d03      	adds	r3, r0, #4
1005f7ba:	2400      	movs	r4, #0
1005f7bc:	590d      	ldr	r5, [r1, r4]
1005f7be:	511d      	str	r5, [r3, r4]
1005f7c0:	1d24      	adds	r4, r4, #4
1005f7c2:	2c20      	cmp	r4, #32
1005f7c4:	d1fa      	bne.n	1005f7bc <Mem_Buff_block_write+0x18>
1005f7c6:	6800      	ldr	r0, [r0, #0]
1005f7c8:	3120      	adds	r1, #32
1005f7ca:	1e52      	subs	r2, r2, #1
1005f7cc:	0413      	lsls	r3, r2, #16
1005f7ce:	d1f3      	bne.n	1005f7b8 <Mem_Buff_block_write+0x14>
1005f7d0:	bdb0      	pop	{r4, r5, r7, pc}

1005f7d2 <Mem_Buff_append>:
1005f7d2:	4602      	mov	r2, r0
1005f7d4:	6800      	ldr	r0, [r0, #0]
1005f7d6:	2800      	cmp	r0, #0
1005f7d8:	d1fb      	bne.n	1005f7d2 <Mem_Buff_append>
1005f7da:	6011      	str	r1, [r2, #0]
1005f7dc:	4770      	bx	lr
	...

1005f7e0 <BlueNRG_Stack_Initialize_RAM_check>:
1005f7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f7e2:	b097      	sub	sp, #92	@ 0x5c
1005f7e4:	4ce5      	ldr	r4, [pc, #916]	@ (1005fb7c <__arm_cp.0_4>)
1005f7e6:	2067      	movs	r0, #103	@ 0x67
1005f7e8:	43c5      	mvns	r5, r0
1005f7ea:	f7f1 ff27 	bl	1005163c <conn_supp_csr_ucfg>
1005f7ee:	4ee4      	ldr	r6, [pc, #912]	@ (1005fb80 <__arm_cp.0_5>)
1005f7f0:	2801      	cmp	r0, #1
1005f7f2:	d002      	beq.n	1005f7fa <BlueNRG_Stack_Initialize_RAM_check+0x1a>
1005f7f4:	7af0      	ldrb	r0, [r6, #11]
1005f7f6:	2800      	cmp	r0, #0
1005f7f8:	d010      	beq.n	1005f81c <BlueNRG_Stack_Initialize_RAM_check+0x3c>
1005f7fa:	4627      	mov	r7, r4
1005f7fc:	462c      	mov	r4, r5
1005f7fe:	3438      	adds	r4, #56	@ 0x38
1005f800:	f7f1 ff1c 	bl	1005163c <conn_supp_csr_ucfg>
1005f804:	7af1      	ldrb	r1, [r6, #11]
1005f806:	4361      	muls	r1, r4
1005f808:	4378      	muls	r0, r7
1005f80a:	1838      	adds	r0, r7, r0
1005f80c:	1844      	adds	r4, r0, r1
1005f80e:	f7f1 ff15 	bl	1005163c <conn_supp_csr_ucfg>
1005f812:	7af1      	ldrb	r1, [r6, #11]
1005f814:	4341      	muls	r1, r0
1005f816:	48db      	ldr	r0, [pc, #876]	@ (1005fb84 <__arm_cp.0_6>)
1005f818:	4348      	muls	r0, r1
1005f81a:	1824      	adds	r4, r4, r0
1005f81c:	3416      	adds	r4, #22
1005f81e:	f7f1 ff0d 	bl	1005163c <conn_supp_csr_ucfg>
1005f822:	2801      	cmp	r0, #1
1005f824:	d10e      	bne.n	1005f844 <BlueNRG_Stack_Initialize_RAM_check+0x64>
1005f826:	4628      	mov	r0, r5
1005f828:	3060      	adds	r0, #96	@ 0x60
1005f82a:	8931      	ldrh	r1, [r6, #8]
1005f82c:	4341      	muls	r1, r0
1005f82e:	4628      	mov	r0, r5
1005f830:	3044      	adds	r0, #68	@ 0x44
1005f832:	7ab2      	ldrb	r2, [r6, #10]
1005f834:	4342      	muls	r2, r0
1005f836:	1850      	adds	r0, r2, r1
1005f838:	4629      	mov	r1, r5
1005f83a:	3148      	adds	r1, #72	@ 0x48
1005f83c:	7b32      	ldrb	r2, [r6, #12]
1005f83e:	434a      	muls	r2, r1
1005f840:	1880      	adds	r0, r0, r2
1005f842:	e000      	b.n	1005f846 <BlueNRG_Stack_Initialize_RAM_check+0x66>
1005f844:	2000      	movs	r0, #0
1005f846:	9003      	str	r0, [sp, #12]
1005f848:	89f0      	ldrh	r0, [r6, #14]
1005f84a:	900a      	str	r0, [sp, #40]	@ 0x28
1005f84c:	f7f1 fee6 	bl	1005161c <data_length_extension_csr_ucfg>
1005f850:	2801      	cmp	r0, #1
1005f852:	d001      	beq.n	1005f858 <BlueNRG_Stack_Initialize_RAM_check+0x78>
1005f854:	f7fe fe9f 	bl	1005e596 <ext_adv_scan_enabled_ucfg_weak>
1005f858:	f7f1 fee8 	bl	1005162c <phy_upd_csr_ucfg>
1005f85c:	2801      	cmp	r0, #1
1005f85e:	9411      	str	r4, [sp, #68]	@ 0x44
1005f860:	d109      	bne.n	1005f876 <BlueNRG_Stack_Initialize_RAM_check+0x96>
1005f862:	462c      	mov	r4, r5
1005f864:	3438      	adds	r4, #56	@ 0x38
1005f866:	f7f1 fee9 	bl	1005163c <conn_supp_csr_ucfg>
1005f86a:	4360      	muls	r0, r4
1005f86c:	7af1      	ldrb	r1, [r6, #11]
1005f86e:	4341      	muls	r1, r0
1005f870:	3908      	subs	r1, #8
1005f872:	9109      	str	r1, [sp, #36]	@ 0x24
1005f874:	e001      	b.n	1005f87a <BlueNRG_Stack_Initialize_RAM_check+0x9a>
1005f876:	2000      	movs	r0, #0
1005f878:	9009      	str	r0, [sp, #36]	@ 0x24
1005f87a:	48f2      	ldr	r0, [pc, #968]	@ (1005fc44 <__arm_cp.0_3>)
1005f87c:	304c      	adds	r0, #76	@ 0x4c
1005f87e:	9013      	str	r0, [sp, #76]	@ 0x4c
1005f880:	f7fe fe89 	bl	1005e596 <ext_adv_scan_enabled_ucfg_weak>
1005f884:	2801      	cmp	r0, #1
1005f886:	d015      	beq.n	1005f8b4 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1005f888:	f7f1 fec8 	bl	1005161c <data_length_extension_csr_ucfg>
1005f88c:	2801      	cmp	r0, #1
1005f88e:	d011      	beq.n	1005f8b4 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1005f890:	2029      	movs	r0, #41	@ 0x29
1005f892:	5c30      	ldrb	r0, [r6, r0]
1005f894:	2800      	cmp	r0, #0
1005f896:	d10d      	bne.n	1005f8b4 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1005f898:	2025      	movs	r0, #37	@ 0x25
1005f89a:	5c30      	ldrb	r0, [r6, r0]
1005f89c:	2800      	cmp	r0, #0
1005f89e:	d109      	bne.n	1005f8b4 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1005f8a0:	2026      	movs	r0, #38	@ 0x26
1005f8a2:	5c30      	ldrb	r0, [r6, r0]
1005f8a4:	2800      	cmp	r0, #0
1005f8a6:	d002      	beq.n	1005f8ae <BlueNRG_Stack_Initialize_RAM_check+0xce>
1005f8a8:	48e6      	ldr	r0, [pc, #920]	@ (1005fc44 <__arm_cp.0_3>)
1005f8aa:	304c      	adds	r0, #76	@ 0x4c
1005f8ac:	e001      	b.n	1005f8b2 <BlueNRG_Stack_Initialize_RAM_check+0xd2>
1005f8ae:	4628      	mov	r0, r5
1005f8b0:	3024      	adds	r0, #36	@ 0x24
1005f8b2:	9013      	str	r0, [sp, #76]	@ 0x4c
1005f8b4:	48e3      	ldr	r0, [pc, #908]	@ (1005fc44 <__arm_cp.0_3>)
1005f8b6:	306c      	adds	r0, #108	@ 0x6c
1005f8b8:	9012      	str	r0, [sp, #72]	@ 0x48
1005f8ba:	f7fe fe6c 	bl	1005e596 <ext_adv_scan_enabled_ucfg_weak>
1005f8be:	2801      	cmp	r0, #1
1005f8c0:	d015      	beq.n	1005f8ee <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1005f8c2:	f7f1 feab 	bl	1005161c <data_length_extension_csr_ucfg>
1005f8c6:	2801      	cmp	r0, #1
1005f8c8:	d011      	beq.n	1005f8ee <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1005f8ca:	2029      	movs	r0, #41	@ 0x29
1005f8cc:	5c30      	ldrb	r0, [r6, r0]
1005f8ce:	2800      	cmp	r0, #0
1005f8d0:	d10d      	bne.n	1005f8ee <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1005f8d2:	2025      	movs	r0, #37	@ 0x25
1005f8d4:	5c30      	ldrb	r0, [r6, r0]
1005f8d6:	2800      	cmp	r0, #0
1005f8d8:	d109      	bne.n	1005f8ee <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1005f8da:	2026      	movs	r0, #38	@ 0x26
1005f8dc:	5c30      	ldrb	r0, [r6, r0]
1005f8de:	2800      	cmp	r0, #0
1005f8e0:	d002      	beq.n	1005f8e8 <BlueNRG_Stack_Initialize_RAM_check+0x108>
1005f8e2:	48d8      	ldr	r0, [pc, #864]	@ (1005fc44 <__arm_cp.0_3>)
1005f8e4:	306c      	adds	r0, #108	@ 0x6c
1005f8e6:	e001      	b.n	1005f8ec <BlueNRG_Stack_Initialize_RAM_check+0x10c>
1005f8e8:	4628      	mov	r0, r5
1005f8ea:	303c      	adds	r0, #60	@ 0x3c
1005f8ec:	9012      	str	r0, [sp, #72]	@ 0x48
1005f8ee:	f7fe fe52 	bl	1005e596 <ext_adv_scan_enabled_ucfg_weak>
1005f8f2:	9010      	str	r0, [sp, #64]	@ 0x40
1005f8f4:	7eb0      	ldrb	r0, [r6, #26]
1005f8f6:	9000      	str	r0, [sp, #0]
1005f8f8:	7ff0      	ldrb	r0, [r6, #31]
1005f8fa:	900f      	str	r0, [sp, #60]	@ 0x3c
1005f8fc:	f7f1 fe9e 	bl	1005163c <conn_supp_csr_ucfg>
1005f900:	9007      	str	r0, [sp, #28]
1005f902:	7ff0      	ldrb	r0, [r6, #31]
1005f904:	9001      	str	r0, [sp, #4]
1005f906:	f7fa f8db 	bl	10059ac0 <llc_priv_controller_privacy_csr_ucfg_weak>
1005f90a:	9008      	str	r0, [sp, #32]
1005f90c:	7ff0      	ldrb	r0, [r6, #31]
1005f90e:	9002      	str	r0, [sp, #8]
1005f910:	f7f1 ff2c 	bl	1005176c <secure_connections_csr_ucfg>
1005f914:	2700      	movs	r7, #0
1005f916:	f7f7 fef6 	bl	10057706 <scan_csr_ucfg_weak>
1005f91a:	2801      	cmp	r0, #1
1005f91c:	4638      	mov	r0, r7
1005f91e:	9515      	str	r5, [sp, #84]	@ 0x54
1005f920:	9716      	str	r7, [sp, #88]	@ 0x58
1005f922:	d14f      	bne.n	1005f9c4 <BlueNRG_Stack_Initialize_RAM_check+0x1e4>
1005f924:	7f70      	ldrb	r0, [r6, #29]
1005f926:	280a      	cmp	r0, #10
1005f928:	d300      	bcc.n	1005f92c <BlueNRG_Stack_Initialize_RAM_check+0x14c>
1005f92a:	200a      	movs	r0, #10
1005f92c:	462c      	mov	r4, r5
1005f92e:	3438      	adds	r4, #56	@ 0x38
1005f930:	4344      	muls	r4, r0
1005f932:	3cc0      	subs	r4, #192	@ 0xc0
1005f934:	2500      	movs	r5, #0
1005f936:	f7fa f8bb 	bl	10059ab0 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005f93a:	2801      	cmp	r0, #1
1005f93c:	462f      	mov	r7, r5
1005f93e:	d120      	bne.n	1005f982 <BlueNRG_Stack_Initialize_RAM_check+0x1a2>
1005f940:	f7f1 fe7c 	bl	1005163c <conn_supp_csr_ucfg>
1005f944:	2801      	cmp	r0, #1
1005f946:	950e      	str	r5, [sp, #56]	@ 0x38
1005f948:	d003      	beq.n	1005f952 <BlueNRG_Stack_Initialize_RAM_check+0x172>
1005f94a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1005f94c:	4618      	mov	r0, r3
1005f94e:	3054      	adds	r0, #84	@ 0x54
1005f950:	e002      	b.n	1005f958 <BlueNRG_Stack_Initialize_RAM_check+0x178>
1005f952:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1005f954:	4618      	mov	r0, r3
1005f956:	3048      	adds	r0, #72	@ 0x48
1005f958:	49ba      	ldr	r1, [pc, #744]	@ (1005fc44 <__arm_cp.0_3>)
1005f95a:	31e0      	adds	r1, #224	@ 0xe0
1005f95c:	7fb2      	ldrb	r2, [r6, #30]
1005f95e:	434a      	muls	r2, r1
1005f960:	1810      	adds	r0, r2, r0
1005f962:	4619      	mov	r1, r3
1005f964:	3160      	adds	r1, #96	@ 0x60
1005f966:	7ff2      	ldrb	r2, [r6, #31]
1005f968:	4091      	lsls	r1, r2
1005f96a:	461d      	mov	r5, r3
1005f96c:	1847      	adds	r7, r0, r1
1005f96e:	f7f1 fe65 	bl	1005163c <conn_supp_csr_ucfg>
1005f972:	2801      	cmp	r0, #1
1005f974:	d104      	bne.n	1005f980 <BlueNRG_Stack_Initialize_RAM_check+0x1a0>
1005f976:	4628      	mov	r0, r5
1005f978:	3050      	adds	r0, #80	@ 0x50
1005f97a:	7af1      	ldrb	r1, [r6, #11]
1005f97c:	4341      	muls	r1, r0
1005f97e:	187f      	adds	r7, r7, r1
1005f980:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1005f982:	19e0      	adds	r0, r4, r7
1005f984:	9014      	str	r0, [sp, #80]	@ 0x50
1005f986:	f7fa f895 	bl	10059ab4 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005f98a:	4607      	mov	r7, r0
1005f98c:	f7fa f890 	bl	10059ab0 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005f990:	4604      	mov	r4, r0
1005f992:	403c      	ands	r4, r7
1005f994:	f7f1 fe52 	bl	1005163c <conn_supp_csr_ucfg>
1005f998:	4020      	ands	r0, r4
1005f99a:	2801      	cmp	r0, #1
1005f99c:	d108      	bne.n	1005f9b0 <BlueNRG_Stack_Initialize_RAM_check+0x1d0>
1005f99e:	7ef0      	ldrb	r0, [r6, #27]
1005f9a0:	1e40      	subs	r0, r0, #1
1005f9a2:	2103      	movs	r1, #3
1005f9a4:	4301      	orrs	r1, r0
1005f9a6:	7fb0      	ldrb	r0, [r6, #30]
1005f9a8:	22b0      	movs	r2, #176	@ 0xb0
1005f9aa:	4342      	muls	r2, r0
1005f9ac:	43d0      	mvns	r0, r2
1005f9ae:	1a45      	subs	r5, r0, r1
1005f9b0:	9814      	ldr	r0, [sp, #80]	@ 0x50
1005f9b2:	1944      	adds	r4, r0, r5
1005f9b4:	f7fe fdef 	bl	1005e596 <ext_adv_scan_enabled_ucfg_weak>
1005f9b8:	4360      	muls	r0, r4
1005f9ba:	49a2      	ldr	r1, [pc, #648]	@ (1005fc44 <__arm_cp.0_3>)
1005f9bc:	1808      	adds	r0, r1, r0
1005f9be:	302c      	adds	r0, #44	@ 0x2c
1005f9c0:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1005f9c2:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1005f9c4:	9006      	str	r0, [sp, #24]
1005f9c6:	f7f1 fe39 	bl	1005163c <conn_supp_csr_ucfg>
1005f9ca:	2801      	cmp	r0, #1
1005f9cc:	4639      	mov	r1, r7
1005f9ce:	d109      	bne.n	1005f9e4 <BlueNRG_Stack_Initialize_RAM_check+0x204>
1005f9d0:	f7f8 f860 	bl	10057a94 <l2c_cos_csr_ucfg_weak>
1005f9d4:	2801      	cmp	r0, #1
1005f9d6:	4639      	mov	r1, r7
1005f9d8:	d104      	bne.n	1005f9e4 <BlueNRG_Stack_Initialize_RAM_check+0x204>
1005f9da:	2022      	movs	r0, #34	@ 0x22
1005f9dc:	5c30      	ldrb	r0, [r6, r0]
1005f9de:	4629      	mov	r1, r5
1005f9e0:	3114      	adds	r1, #20
1005f9e2:	4341      	muls	r1, r0
1005f9e4:	9105      	str	r1, [sp, #20]
1005f9e6:	f7fa f863 	bl	10059ab0 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005f9ea:	2801      	cmp	r0, #1
1005f9ec:	4638      	mov	r0, r7
1005f9ee:	d121      	bne.n	1005fa34 <BlueNRG_Stack_Initialize_RAM_check+0x254>
1005f9f0:	4894      	ldr	r0, [pc, #592]	@ (1005fc44 <__arm_cp.0_3>)
1005f9f2:	30d4      	adds	r0, #212	@ 0xd4
1005f9f4:	7eb1      	ldrb	r1, [r6, #26]
1005f9f6:	4341      	muls	r1, r0
1005f9f8:	4628      	mov	r0, r5
1005f9fa:	3048      	adds	r0, #72	@ 0x48
1005f9fc:	7af2      	ldrb	r2, [r6, #11]
1005f9fe:	4342      	muls	r2, r0
1005fa00:	1854      	adds	r4, r2, r1
1005fa02:	2700      	movs	r7, #0
1005fa04:	f7fa f856 	bl	10059ab4 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005fa08:	2801      	cmp	r0, #1
1005fa0a:	d110      	bne.n	1005fa2e <BlueNRG_Stack_Initialize_RAM_check+0x24e>
1005fa0c:	f7f1 fe16 	bl	1005163c <conn_supp_csr_ucfg>
1005fa10:	2801      	cmp	r0, #1
1005fa12:	d10c      	bne.n	1005fa2e <BlueNRG_Stack_Initialize_RAM_check+0x24e>
1005fa14:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1005fa16:	4610      	mov	r0, r2
1005fa18:	3058      	adds	r0, #88	@ 0x58
1005fa1a:	7f31      	ldrb	r1, [r6, #28]
1005fa1c:	4341      	muls	r1, r0
1005fa1e:	4610      	mov	r0, r2
1005fa20:	3060      	adds	r0, #96	@ 0x60
1005fa22:	7ef2      	ldrb	r2, [r6, #27]
1005fa24:	4342      	muls	r2, r0
1005fa26:	1850      	adds	r0, r2, r1
1005fa28:	3884      	subs	r0, #132	@ 0x84
1005fa2a:	7eb7      	ldrb	r7, [r6, #26]
1005fa2c:	4347      	muls	r7, r0
1005fa2e:	19e0      	adds	r0, r4, r7
1005fa30:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1005fa32:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1005fa34:	900e      	str	r0, [sp, #56]	@ 0x38
1005fa36:	f7f7 fd03 	bl	10057440 <cte_csr_ucfg_weak>
1005fa3a:	2801      	cmp	r0, #1
1005fa3c:	4638      	mov	r0, r7
1005fa3e:	d133      	bne.n	1005faa8 <BlueNRG_Stack_Initialize_RAM_check+0x2c8>
1005fa40:	f7f1 fdfc 	bl	1005163c <conn_supp_csr_ucfg>
1005fa44:	2801      	cmp	r0, #1
1005fa46:	d002      	beq.n	1005fa4e <BlueNRG_Stack_Initialize_RAM_check+0x26e>
1005fa48:	462f      	mov	r7, r5
1005fa4a:	375c      	adds	r7, #92	@ 0x5c
1005fa4c:	e004      	b.n	1005fa58 <BlueNRG_Stack_Initialize_RAM_check+0x278>
1005fa4e:	4628      	mov	r0, r5
1005fa50:	3060      	adds	r0, #96	@ 0x60
1005fa52:	7af7      	ldrb	r7, [r6, #11]
1005fa54:	4347      	muls	r7, r0
1005fa56:	3f0c      	subs	r7, #12
1005fa58:	2523      	movs	r5, #35	@ 0x23
1005fa5a:	5d70      	ldrb	r0, [r6, r5]
1005fa5c:	2400      	movs	r4, #0
1005fa5e:	2800      	cmp	r0, #0
1005fa60:	4620      	mov	r0, r4
1005fa62:	d005      	beq.n	1005fa70 <BlueNRG_Stack_Initialize_RAM_check+0x290>
1005fa64:	f7f1 fdea 	bl	1005163c <conn_supp_csr_ucfg>
1005fa68:	5d70      	ldrb	r0, [r6, r5]
1005fa6a:	4240      	negs	r0, r0
1005fa6c:	2103      	movs	r1, #3
1005fa6e:	4388      	bics	r0, r1
1005fa70:	19c0      	adds	r0, r0, r7
1005fa72:	2724      	movs	r7, #36	@ 0x24
1005fa74:	5df1      	ldrb	r1, [r6, r7]
1005fa76:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1005fa78:	3264      	adds	r2, #100	@ 0x64
1005fa7a:	434a      	muls	r2, r1
1005fa7c:	1885      	adds	r5, r0, r2
1005fa7e:	f7f7 fe42 	bl	10057706 <scan_csr_ucfg_weak>
1005fa82:	2801      	cmp	r0, #1
1005fa84:	d10d      	bne.n	1005faa2 <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1005fa86:	f7fe fd86 	bl	1005e596 <ext_adv_scan_enabled_ucfg_weak>
1005fa8a:	2801      	cmp	r0, #1
1005fa8c:	d109      	bne.n	1005faa2 <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1005fa8e:	f7fa f80f 	bl	10059ab0 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005fa92:	2801      	cmp	r0, #1
1005fa94:	d105      	bne.n	1005faa2 <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1005fa96:	5df4      	ldrb	r4, [r6, r7]
1005fa98:	2c00      	cmp	r4, #0
1005fa9a:	9815      	ldr	r0, [sp, #84]	@ 0x54
1005fa9c:	d001      	beq.n	1005faa2 <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1005fa9e:	4604      	mov	r4, r0
1005faa0:	3450      	adds	r4, #80	@ 0x50
1005faa2:	1928      	adds	r0, r5, r4
1005faa4:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1005faa6:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1005faa8:	900d      	str	r0, [sp, #52]	@ 0x34
1005faaa:	f7f1 fdc7 	bl	1005163c <conn_supp_csr_ucfg>
1005faae:	2801      	cmp	r0, #1
1005fab0:	4639      	mov	r1, r7
1005fab2:	d109      	bne.n	1005fac8 <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
1005fab4:	f7f7 fe0b 	bl	100576ce <pcl_csr_ucfg_weak>
1005fab8:	2801      	cmp	r0, #1
1005faba:	4639      	mov	r1, r7
1005fabc:	d104      	bne.n	1005fac8 <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
1005fabe:	4628      	mov	r0, r5
1005fac0:	3048      	adds	r0, #72	@ 0x48
1005fac2:	7af1      	ldrb	r1, [r6, #11]
1005fac4:	4341      	muls	r1, r0
1005fac6:	3914      	subs	r1, #20
1005fac8:	910c      	str	r1, [sp, #48]	@ 0x30
1005faca:	f7f1 fdb7 	bl	1005163c <conn_supp_csr_ucfg>
1005face:	2801      	cmp	r0, #1
1005fad0:	463a      	mov	r2, r7
1005fad2:	d108      	bne.n	1005fae6 <BlueNRG_Stack_Initialize_RAM_check+0x306>
1005fad4:	f7f7 fbbf 	bl	10057256 <chc_csr_ucfg_weak>
1005fad8:	2801      	cmp	r0, #1
1005fada:	463a      	mov	r2, r7
1005fadc:	d103      	bne.n	1005fae6 <BlueNRG_Stack_Initialize_RAM_check+0x306>
1005fade:	4628      	mov	r0, r5
1005fae0:	304c      	adds	r0, #76	@ 0x4c
1005fae2:	7af2      	ldrb	r2, [r6, #11]
1005fae4:	4342      	muls	r2, r0
1005fae6:	2026      	movs	r0, #38	@ 0x26
1005fae8:	5c31      	ldrb	r1, [r6, r0]
1005faea:	2025      	movs	r0, #37	@ 0x25
1005faec:	5c34      	ldrb	r4, [r6, r0]
1005faee:	1863      	adds	r3, r4, r1
1005faf0:	2029      	movs	r0, #41	@ 0x29
1005faf2:	5c30      	ldrb	r0, [r6, r0]
1005faf4:	9304      	str	r3, [sp, #16]
1005faf6:	2b00      	cmp	r3, #0
1005faf8:	9014      	str	r0, [sp, #80]	@ 0x50
1005fafa:	d010      	beq.n	1005fb1e <BlueNRG_Stack_Initialize_RAM_check+0x33e>
1005fafc:	2028      	movs	r0, #40	@ 0x28
1005fafe:	5c33      	ldrb	r3, [r6, r0]
1005fb00:	4628      	mov	r0, r5
1005fb02:	3060      	adds	r0, #96	@ 0x60
1005fb04:	4358      	muls	r0, r3
1005fb06:	38f8      	subs	r0, #248	@ 0xf8
1005fb08:	4348      	muls	r0, r1
1005fb0a:	2327      	movs	r3, #39	@ 0x27
1005fb0c:	5cf3      	ldrb	r3, [r6, r3]
1005fb0e:	3554      	adds	r5, #84	@ 0x54
1005fb10:	435d      	muls	r5, r3
1005fb12:	4b4c      	ldr	r3, [pc, #304]	@ (1005fc44 <__arm_cp.0_3>)
1005fb14:	195b      	adds	r3, r3, r5
1005fb16:	3348      	adds	r3, #72	@ 0x48
1005fb18:	4363      	muls	r3, r4
1005fb1a:	181f      	adds	r7, r3, r0
1005fb1c:	9814      	ldr	r0, [sp, #80]	@ 0x50
1005fb1e:	2800      	cmp	r0, #0
1005fb20:	9716      	str	r7, [sp, #88]	@ 0x58
1005fb22:	920b      	str	r2, [sp, #44]	@ 0x2c
1005fb24:	d00d      	beq.n	1005fb42 <BlueNRG_Stack_Initialize_RAM_check+0x362>
1005fb26:	4602      	mov	r2, r0
1005fb28:	202a      	movs	r0, #42	@ 0x2a
1005fb2a:	5c30      	ldrb	r0, [r6, r0]
1005fb2c:	4d45      	ldr	r5, [pc, #276]	@ (1005fc44 <__arm_cp.0_3>)
1005fb2e:	462b      	mov	r3, r5
1005fb30:	33b0      	adds	r3, #176	@ 0xb0
1005fb32:	4343      	muls	r3, r0
1005fb34:	4637      	mov	r7, r6
1005fb36:	462e      	mov	r6, r5
1005fb38:	36c8      	adds	r6, #200	@ 0xc8
1005fb3a:	4356      	muls	r6, r2
1005fb3c:	18f3      	adds	r3, r6, r3
1005fb3e:	3b48      	subs	r3, #72	@ 0x48
1005fb40:	e003      	b.n	1005fb4a <BlueNRG_Stack_Initialize_RAM_check+0x36a>
1005fb42:	202a      	movs	r0, #42	@ 0x2a
1005fb44:	5c30      	ldrb	r0, [r6, r0]
1005fb46:	2300      	movs	r3, #0
1005fb48:	4637      	mov	r7, r6
1005fb4a:	2628      	movs	r6, #40	@ 0x28
1005fb4c:	5dbe      	ldrb	r6, [r7, r6]
1005fb4e:	4371      	muls	r1, r6
1005fb50:	1809      	adds	r1, r1, r0
1005fb52:	2627      	movs	r6, #39	@ 0x27
1005fb54:	463d      	mov	r5, r7
1005fb56:	5dbe      	ldrb	r6, [r7, r6]
1005fb58:	4374      	muls	r4, r6
1005fb5a:	1824      	adds	r4, r4, r0
1005fb5c:	1860      	adds	r0, r4, r1
1005fb5e:	d013      	beq.n	1005fb88 <__arm_cp.0_6+0x4>
1005fb60:	9f15      	ldr	r7, [sp, #84]	@ 0x54
1005fb62:	463e      	mov	r6, r7
1005fb64:	364c      	adds	r6, #76	@ 0x4c
1005fb66:	4366      	muls	r6, r4
1005fb68:	463c      	mov	r4, r7
1005fb6a:	3434      	adds	r4, #52	@ 0x34
1005fb6c:	434c      	muls	r4, r1
1005fb6e:	19a1      	adds	r1, r4, r6
1005fb70:	463c      	mov	r4, r7
1005fb72:	345c      	adds	r4, #92	@ 0x5c
1005fb74:	4344      	muls	r4, r0
1005fb76:	190c      	adds	r4, r1, r4
1005fb78:	3c14      	subs	r4, #20
1005fb7a:	e007      	b.n	1005fb8c <__arm_cp.0_6+0x8>

1005fb7c <__arm_cp.0_4>:
1005fb7c:	fffffc18 	.word	0xfffffc18

1005fb80 <__arm_cp.0_5>:
1005fb80:	20001108 	.word	0x20001108

1005fb84 <__arm_cp.0_6>:
1005fb84:	fffffd70 	.word	0xfffffd70
1005fb88:	2400      	movs	r4, #0
1005fb8a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
1005fb8c:	9903      	ldr	r1, [sp, #12]
1005fb8e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1005fb90:	9811      	ldr	r0, [sp, #68]	@ 0x44
1005fb92:	1808      	adds	r0, r1, r0
1005fb94:	4639      	mov	r1, r7
1005fb96:	3144      	adds	r1, #68	@ 0x44
1005fb98:	4371      	muls	r1, r6
1005fb9a:	1840      	adds	r0, r0, r1
1005fb9c:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005fb9e:	1840      	adds	r0, r0, r1
1005fba0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
1005fba2:	1840      	adds	r0, r0, r1
1005fba4:	9912      	ldr	r1, [sp, #72]	@ 0x48
1005fba6:	1841      	adds	r1, r0, r1
1005fba8:	4638      	mov	r0, r7
1005fbaa:	3060      	adds	r0, #96	@ 0x60
1005fbac:	4606      	mov	r6, r0
1005fbae:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1005fbb0:	4096      	lsls	r6, r2
1005fbb2:	1989      	adds	r1, r1, r6
1005fbb4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
1005fbb6:	2a01      	cmp	r2, #1
1005fbb8:	d106      	bne.n	1005fbc8 <__arm_cp.0_6+0x44>
1005fbba:	4e22      	ldr	r6, [pc, #136]	@ (1005fc44 <__arm_cp.0_3>)
1005fbbc:	9a00      	ldr	r2, [sp, #0]
1005fbbe:	4356      	muls	r6, r2
1005fbc0:	1871      	adds	r1, r6, r1
1005fbc2:	2645      	movs	r6, #69	@ 0x45
1005fbc4:	00b6      	lsls	r6, r6, #2
1005fbc6:	1989      	adds	r1, r1, r6
1005fbc8:	462e      	mov	r6, r5
1005fbca:	9d07      	ldr	r5, [sp, #28]
1005fbcc:	9a05      	ldr	r2, [sp, #20]
1005fbce:	2d01      	cmp	r5, #1
1005fbd0:	d102      	bne.n	1005fbd8 <__arm_cp.0_6+0x54>
1005fbd2:	9d01      	ldr	r5, [sp, #4]
1005fbd4:	40a8      	lsls	r0, r5
1005fbd6:	1809      	adds	r1, r1, r0
1005fbd8:	9808      	ldr	r0, [sp, #32]
1005fbda:	2801      	cmp	r0, #1
1005fbdc:	d105      	bne.n	1005fbea <__arm_cp.0_6+0x66>
1005fbde:	4638      	mov	r0, r7
1005fbe0:	3018      	adds	r0, #24
1005fbe2:	9d02      	ldr	r5, [sp, #8]
1005fbe4:	40a8      	lsls	r0, r5
1005fbe6:	1841      	adds	r1, r0, r1
1005fbe8:	3970      	subs	r1, #112	@ 0x70
1005fbea:	9806      	ldr	r0, [sp, #24]
1005fbec:	9d04      	ldr	r5, [sp, #16]
1005fbee:	1808      	adds	r0, r1, r0
1005fbf0:	1880      	adds	r0, r0, r2
1005fbf2:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005fbf4:	1840      	adds	r0, r0, r1
1005fbf6:	990d      	ldr	r1, [sp, #52]	@ 0x34
1005fbf8:	1840      	adds	r0, r0, r1
1005fbfa:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005fbfc:	1840      	adds	r0, r0, r1
1005fbfe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005fc00:	1840      	adds	r0, r0, r1
1005fc02:	9914      	ldr	r1, [sp, #80]	@ 0x50
1005fc04:	42cd      	cmn	r5, r1
1005fc06:	d001      	beq.n	1005fc0c <__arm_cp.0_6+0x88>
1005fc08:	1838      	adds	r0, r7, r0
1005fc0a:	3058      	adds	r0, #88	@ 0x58
1005fc0c:	9916      	ldr	r1, [sp, #88]	@ 0x58
1005fc0e:	1840      	adds	r0, r0, r1
1005fc10:	18c0      	adds	r0, r0, r3
1005fc12:	1904      	adds	r4, r0, r4
1005fc14:	f7f3 f98e 	bl	10052f34 <log_csr_ucfg_weak>
1005fc18:	2801      	cmp	r0, #1
1005fc1a:	d100      	bne.n	1005fc1e <__arm_cp.0_6+0x9a>
1005fc1c:	19e4      	adds	r4, r4, r7
1005fc1e:	6870      	ldr	r0, [r6, #4]
1005fc20:	1820      	adds	r0, r4, r0
1005fc22:	2103      	movs	r1, #3
1005fc24:	43c9      	mvns	r1, r1
1005fc26:	8df2      	ldrh	r2, [r6, #46]	@ 0x2e
1005fc28:	1cd2      	adds	r2, r2, #3
1005fc2a:	400a      	ands	r2, r1
1005fc2c:	8db3      	ldrh	r3, [r6, #44]	@ 0x2c
1005fc2e:	1cdb      	adds	r3, r3, #3
1005fc30:	400b      	ands	r3, r1
1005fc32:	189a      	adds	r2, r3, r2
1005fc34:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
1005fc36:	1cdb      	adds	r3, r3, #3
1005fc38:	400b      	ands	r3, r1
1005fc3a:	18d1      	adds	r1, r2, r3
1005fc3c:	1a40      	subs	r0, r0, r1
1005fc3e:	b017      	add	sp, #92	@ 0x5c
1005fc40:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005fc42:	46c0      	nop			@ (mov r8, r8)

1005fc44 <__arm_cp.0_3>:
1005fc44:	fffffe90 	.word	0xfffffe90

1005fc48 <sdb_sap_clear_all_records>:
1005fc48:	b580      	push	{r7, lr}
1005fc4a:	f002 fbc9 	bl	100623e0 <nvm_discard_all_records>
1005fc4e:	bd80      	pop	{r7, pc}

1005fc50 <sdb_sap_get_security_records_count>:
1005fc50:	b580      	push	{r7, lr}
1005fc52:	f002 fbb2 	bl	100623ba <nvm_sec_db_get_record_count>
1005fc56:	bd80      	pop	{r7, pc}

1005fc58 <sdb_sap_add_security_record>:
1005fc58:	b5b0      	push	{r4, r5, r7, lr}
1005fc5a:	b094      	sub	sp, #80	@ 0x50
1005fc5c:	4604      	mov	r4, r0
1005fc5e:	7841      	ldrb	r1, [r0, #1]
1005fc60:	2501      	movs	r5, #1
1005fc62:	4029      	ands	r1, r5
1005fc64:	303e      	adds	r0, #62	@ 0x3e
1005fc66:	466a      	mov	r2, sp
1005fc68:	f000 f819 	bl	1005fc9e <sdb_sap_read_security_record>
1005fc6c:	2800      	cmp	r0, #0
1005fc6e:	d10c      	bne.n	1005fc8a <sdb_sap_add_security_record+0x32>
1005fc70:	4669      	mov	r1, sp
1005fc72:	2250      	movs	r2, #80	@ 0x50
1005fc74:	4620      	mov	r0, r4
1005fc76:	f7e6 fa0d 	bl	10046094 <BLEPLAT_MemCmp>
1005fc7a:	2800      	cmp	r0, #0
1005fc7c:	d008      	beq.n	1005fc90 <sdb_sap_add_security_record+0x38>
1005fc7e:	4669      	mov	r1, sp
1005fc80:	7848      	ldrb	r0, [r1, #1]
1005fc82:	4028      	ands	r0, r5
1005fc84:	313e      	adds	r1, #62	@ 0x3e
1005fc86:	f000 f83b 	bl	1005fd00 <sdb_remove_security_record_by_address>
1005fc8a:	7860      	ldrb	r0, [r4, #1]
1005fc8c:	2810      	cmp	r0, #16
1005fc8e:	d201      	bcs.n	1005fc94 <sdb_sap_add_security_record+0x3c>
1005fc90:	2000      	movs	r0, #0
1005fc92:	e002      	b.n	1005fc9a <sdb_sap_add_security_record+0x42>
1005fc94:	4620      	mov	r0, r4
1005fc96:	f002 fb85 	bl	100623a4 <nvm_sec_db_add_record>
1005fc9a:	b014      	add	sp, #80	@ 0x50
1005fc9c:	bdb0      	pop	{r4, r5, r7, pc}

1005fc9e <sdb_sap_read_security_record>:
1005fc9e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005fca0:	4614      	mov	r4, r2
1005fca2:	4606      	mov	r6, r0
1005fca4:	2501      	movs	r5, #1
1005fca6:	9102      	str	r1, [sp, #8]
1005fca8:	2901      	cmp	r1, #1
1005fcaa:	d105      	bne.n	1005fcb8 <sdb_sap_read_security_record+0x1a>
1005fcac:	7970      	ldrb	r0, [r6, #5]
1005fcae:	21c0      	movs	r1, #192	@ 0xc0
1005fcb0:	4001      	ands	r1, r0
1005fcb2:	2940      	cmp	r1, #64	@ 0x40
1005fcb4:	d100      	bne.n	1005fcb8 <sdb_sap_read_security_record+0x1a>
1005fcb6:	2500      	movs	r5, #0
1005fcb8:	f002 fb5c 	bl	10062374 <nvm_sec_db_read_init>
1005fcbc:	4620      	mov	r0, r4
1005fcbe:	303e      	adds	r0, #62	@ 0x3e
1005fcc0:	9001      	str	r0, [sp, #4]
1005fcc2:	4627      	mov	r7, r4
1005fcc4:	371e      	adds	r7, #30
1005fcc6:	4620      	mov	r0, r4
1005fcc8:	f002 fb5a 	bl	10062380 <nvm_sec_db_read_next_record>
1005fccc:	2800      	cmp	r0, #0
1005fcce:	d115      	bne.n	1005fcfc <sdb_sap_read_security_record+0x5e>
1005fcd0:	2d00      	cmp	r5, #0
1005fcd2:	d00b      	beq.n	1005fcec <sdb_sap_read_security_record+0x4e>
1005fcd4:	7860      	ldrb	r0, [r4, #1]
1005fcd6:	2101      	movs	r1, #1
1005fcd8:	4001      	ands	r1, r0
1005fcda:	9802      	ldr	r0, [sp, #8]
1005fcdc:	4281      	cmp	r1, r0
1005fcde:	d1f2      	bne.n	1005fcc6 <sdb_sap_read_security_record+0x28>
1005fce0:	2206      	movs	r2, #6
1005fce2:	9801      	ldr	r0, [sp, #4]
1005fce4:	4631      	mov	r1, r6
1005fce6:	f7e6 f9d5 	bl	10046094 <BLEPLAT_MemCmp>
1005fcea:	e003      	b.n	1005fcf4 <sdb_sap_read_security_record+0x56>
1005fcec:	4630      	mov	r0, r6
1005fcee:	4639      	mov	r1, r7
1005fcf0:	f000 f980 	bl	1005fff4 <smp_sap_crt_resolve_rpa>
1005fcf4:	2800      	cmp	r0, #0
1005fcf6:	d1e6      	bne.n	1005fcc6 <sdb_sap_read_security_record+0x28>
1005fcf8:	2000      	movs	r0, #0
1005fcfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005fcfc:	20b3      	movs	r0, #179	@ 0xb3
1005fcfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005fd00 <sdb_remove_security_record_by_address>:
1005fd00:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fd02:	b095      	sub	sp, #84	@ 0x54
1005fd04:	460c      	mov	r4, r1
1005fd06:	4605      	mov	r5, r0
1005fd08:	f002 fb34 	bl	10062374 <nvm_sec_db_read_init>
1005fd0c:	ae01      	add	r6, sp, #4
1005fd0e:	363e      	adds	r6, #62	@ 0x3e
1005fd10:	27b3      	movs	r7, #179	@ 0xb3
1005fd12:	a801      	add	r0, sp, #4
1005fd14:	f002 fb34 	bl	10062380 <nvm_sec_db_read_next_record>
1005fd18:	2800      	cmp	r0, #0
1005fd1a:	d110      	bne.n	1005fd3e <sdb_remove_security_record_by_address+0x3e>
1005fd1c:	2206      	movs	r2, #6
1005fd1e:	4630      	mov	r0, r6
1005fd20:	4621      	mov	r1, r4
1005fd22:	f7e6 f9b7 	bl	10046094 <BLEPLAT_MemCmp>
1005fd26:	a901      	add	r1, sp, #4
1005fd28:	7849      	ldrb	r1, [r1, #1]
1005fd2a:	2201      	movs	r2, #1
1005fd2c:	400a      	ands	r2, r1
1005fd2e:	42aa      	cmp	r2, r5
1005fd30:	d1ef      	bne.n	1005fd12 <sdb_remove_security_record_by_address+0x12>
1005fd32:	2800      	cmp	r0, #0
1005fd34:	d1ed      	bne.n	1005fd12 <sdb_remove_security_record_by_address+0x12>
1005fd36:	f002 fb58 	bl	100623ea <nvm_discard_current_record>
1005fd3a:	2700      	movs	r7, #0
1005fd3c:	e7e9      	b.n	1005fd12 <sdb_remove_security_record_by_address+0x12>
1005fd3e:	b2f8      	uxtb	r0, r7
1005fd40:	b015      	add	sp, #84	@ 0x54
1005fd42:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005fd44 <sdb_sap_read_security_record_sequential>:
1005fd44:	b5b0      	push	{r4, r5, r7, lr}
1005fd46:	4604      	mov	r4, r0
1005fd48:	4d07      	ldr	r5, [pc, #28]	@ (1005fd68 <__arm_cp.5_0>)
1005fd4a:	7828      	ldrb	r0, [r5, #0]
1005fd4c:	2800      	cmp	r0, #0
1005fd4e:	d103      	bne.n	1005fd58 <sdb_sap_read_security_record_sequential+0x14>
1005fd50:	f002 fb10 	bl	10062374 <nvm_sec_db_read_init>
1005fd54:	2001      	movs	r0, #1
1005fd56:	7028      	strb	r0, [r5, #0]
1005fd58:	4620      	mov	r0, r4
1005fd5a:	f002 fb11 	bl	10062380 <nvm_sec_db_read_next_record>
1005fd5e:	2800      	cmp	r0, #0
1005fd60:	d001      	beq.n	1005fd66 <sdb_sap_read_security_record_sequential+0x22>
1005fd62:	2100      	movs	r1, #0
1005fd64:	7029      	strb	r1, [r5, #0]
1005fd66:	bdb0      	pop	{r4, r5, r7, pc}

1005fd68 <__arm_cp.5_0>:
1005fd68:	2000113c 	.word	0x2000113c

1005fd6c <sdb_sap_del_bonded_device>:
1005fd6c:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1005fd6e:	460d      	mov	r5, r1
1005fd70:	4604      	mov	r4, r0
1005fd72:	aa01      	add	r2, sp, #4
1005fd74:	4608      	mov	r0, r1
1005fd76:	4621      	mov	r1, r4
1005fd78:	f000 f87f 	bl	1005fe7a <sdb_gatt_search_record>
1005fd7c:	2800      	cmp	r0, #0
1005fd7e:	d101      	bne.n	1005fd84 <sdb_sap_del_bonded_device+0x18>
1005fd80:	f002 fb33 	bl	100623ea <nvm_discard_current_record>
1005fd84:	4628      	mov	r0, r5
1005fd86:	4621      	mov	r1, r4
1005fd88:	f7ff ffba 	bl	1005fd00 <sdb_remove_security_record_by_address>
1005fd8c:	b004      	add	sp, #16
1005fd8e:	bdb0      	pop	{r4, r5, r7, pc}

1005fd90 <sdb_sap_read_security_record_matching>:
1005fd90:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005fd92:	4614      	mov	r4, r2
1005fd94:	9101      	str	r1, [sp, #4]
1005fd96:	4606      	mov	r6, r0
1005fd98:	f002 faec 	bl	10062374 <nvm_sec_db_read_init>
1005fd9c:	4627      	mov	r7, r4
1005fd9e:	3744      	adds	r7, #68	@ 0x44
1005fda0:	4620      	mov	r0, r4
1005fda2:	f002 faed 	bl	10062380 <nvm_sec_db_read_next_record>
1005fda6:	2800      	cmp	r0, #0
1005fda8:	d111      	bne.n	1005fdce <sdb_sap_read_security_record_matching+0x3e>
1005fdaa:	7860      	ldrb	r0, [r4, #1]
1005fdac:	06c0      	lsls	r0, r0, #27
1005fdae:	d5f7      	bpl.n	1005fda0 <sdb_sap_read_security_record_matching+0x10>
1005fdb0:	ad02      	add	r5, sp, #8
1005fdb2:	4638      	mov	r0, r7
1005fdb4:	9901      	ldr	r1, [sp, #4]
1005fdb6:	462a      	mov	r2, r5
1005fdb8:	f000 f87a 	bl	1005feb0 <smp_sap_crt_generate_ediv>
1005fdbc:	2202      	movs	r2, #2
1005fdbe:	4628      	mov	r0, r5
1005fdc0:	4631      	mov	r1, r6
1005fdc2:	f7e6 f967 	bl	10046094 <BLEPLAT_MemCmp>
1005fdc6:	2800      	cmp	r0, #0
1005fdc8:	d1ea      	bne.n	1005fda0 <sdb_sap_read_security_record_matching+0x10>
1005fdca:	2000      	movs	r0, #0
1005fdcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005fdce:	2081      	movs	r0, #129	@ 0x81
1005fdd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005fdd2 <SDB_sap_write_peer_bonded_gatt_client_data>:
1005fdd2:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fdd4:	b085      	sub	sp, #20
1005fdd6:	461e      	mov	r6, r3
1005fdd8:	4617      	mov	r7, r2
1005fdda:	460d      	mov	r5, r1
1005fddc:	4604      	mov	r4, r0
1005fdde:	aa02      	add	r2, sp, #8
1005fde0:	4608      	mov	r0, r1
1005fde2:	4621      	mov	r1, r4
1005fde4:	f000 f849 	bl	1005fe7a <sdb_gatt_search_record>
1005fde8:	2800      	cmp	r0, #0
1005fdea:	d10b      	bne.n	1005fe04 <SDB_sap_write_peer_bonded_gatt_client_data+0x32>
1005fdec:	9804      	ldr	r0, [sp, #16]
1005fdee:	42b8      	cmp	r0, r7
1005fdf0:	d106      	bne.n	1005fe00 <SDB_sap_write_peer_bonded_gatt_client_data+0x2e>
1005fdf2:	b2ba      	uxth	r2, r7
1005fdf4:	200c      	movs	r0, #12
1005fdf6:	4631      	mov	r1, r6
1005fdf8:	f7e6 f8dc 	bl	10045fb4 <BLEPLAT_NvmCompare>
1005fdfc:	2800      	cmp	r0, #0
1005fdfe:	d016      	beq.n	1005fe2e <SDB_sap_write_peer_bonded_gatt_client_data+0x5c>
1005fe00:	f002 faf3 	bl	100623ea <nvm_discard_current_record>
1005fe04:	9601      	str	r6, [sp, #4]
1005fe06:	ae02      	add	r6, sp, #8
1005fe08:	7035      	strb	r5, [r6, #0]
1005fe0a:	1c70      	adds	r0, r6, #1
1005fe0c:	2206      	movs	r2, #6
1005fe0e:	4621      	mov	r1, r4
1005fe10:	f7e6 f920 	bl	10046054 <BLEPLAT_MemCpy>
1005fe14:	9704      	str	r7, [sp, #16]
1005fe16:	4630      	mov	r0, r6
1005fe18:	9901      	ldr	r1, [sp, #4]
1005fe1a:	f002 fa9e 	bl	1006235a <nvm_gatt_db_update_record>
1005fe1e:	2800      	cmp	r0, #0
1005fe20:	d005      	beq.n	1005fe2e <SDB_sap_write_peer_bonded_gatt_client_data+0x5c>
1005fe22:	4606      	mov	r6, r0
1005fe24:	4628      	mov	r0, r5
1005fe26:	4621      	mov	r1, r4
1005fe28:	f7ff ff6a 	bl	1005fd00 <sdb_remove_security_record_by_address>
1005fe2c:	e000      	b.n	1005fe30 <SDB_sap_write_peer_bonded_gatt_client_data+0x5e>
1005fe2e:	2600      	movs	r6, #0
1005fe30:	4630      	mov	r0, r6
1005fe32:	b005      	add	sp, #20
1005fe34:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005fe36 <SDB_sap_read_peer_bonded_gatt_client_data>:
1005fe36:	b5b0      	push	{r4, r5, r7, lr}
1005fe38:	b098      	sub	sp, #96	@ 0x60
1005fe3a:	461c      	mov	r4, r3
1005fe3c:	4615      	mov	r5, r2
1005fe3e:	aa01      	add	r2, sp, #4
1005fe40:	f7ff ff2d 	bl	1005fc9e <sdb_sap_read_security_record>
1005fe44:	2800      	cmp	r0, #0
1005fe46:	d116      	bne.n	1005fe76 <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
1005fe48:	a901      	add	r1, sp, #4
1005fe4a:	784a      	ldrb	r2, [r1, #1]
1005fe4c:	2001      	movs	r0, #1
1005fe4e:	4010      	ands	r0, r2
1005fe50:	313e      	adds	r1, #62	@ 0x3e
1005fe52:	aa15      	add	r2, sp, #84	@ 0x54
1005fe54:	f000 f811 	bl	1005fe7a <sdb_gatt_search_record>
1005fe58:	2800      	cmp	r0, #0
1005fe5a:	d001      	beq.n	1005fe60 <SDB_sap_read_peer_bonded_gatt_client_data+0x2a>
1005fe5c:	20b3      	movs	r0, #179	@ 0xb3
1005fe5e:	e00a      	b.n	1005fe76 <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
1005fe60:	6829      	ldr	r1, [r5, #0]
1005fe62:	9817      	ldr	r0, [sp, #92]	@ 0x5c
1005fe64:	4288      	cmp	r0, r1
1005fe66:	d901      	bls.n	1005fe6c <SDB_sap_read_peer_bonded_gatt_client_data+0x36>
1005fe68:	2087      	movs	r0, #135	@ 0x87
1005fe6a:	e004      	b.n	1005fe76 <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
1005fe6c:	6028      	str	r0, [r5, #0]
1005fe6e:	b281      	uxth	r1, r0
1005fe70:	4620      	mov	r0, r4
1005fe72:	f002 fa67 	bl	10062344 <nvm_gatt_db_read_full_current_record>
1005fe76:	b018      	add	sp, #96	@ 0x60
1005fe78:	bdb0      	pop	{r4, r5, r7, pc}

1005fe7a <sdb_gatt_search_record>:
1005fe7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005fe7c:	4614      	mov	r4, r2
1005fe7e:	460d      	mov	r5, r1
1005fe80:	4606      	mov	r6, r0
1005fe82:	f002 fa39 	bl	100622f8 <nvm_gatt_db_read_init>
1005fe86:	1c67      	adds	r7, r4, #1
1005fe88:	4620      	mov	r0, r4
1005fe8a:	f002 fa3b 	bl	10062304 <nvm_gatt_db_read_next_record>
1005fe8e:	2800      	cmp	r0, #0
1005fe90:	d10b      	bne.n	1005feaa <sdb_gatt_search_record+0x30>
1005fe92:	2206      	movs	r2, #6
1005fe94:	4628      	mov	r0, r5
1005fe96:	4639      	mov	r1, r7
1005fe98:	f7e6 f8fc 	bl	10046094 <BLEPLAT_MemCmp>
1005fe9c:	2800      	cmp	r0, #0
1005fe9e:	d1f3      	bne.n	1005fe88 <sdb_gatt_search_record+0xe>
1005fea0:	7820      	ldrb	r0, [r4, #0]
1005fea2:	42b0      	cmp	r0, r6
1005fea4:	d1f0      	bne.n	1005fe88 <sdb_gatt_search_record+0xe>
1005fea6:	2000      	movs	r0, #0
1005fea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005feaa:	20b3      	movs	r0, #179	@ 0xb3
1005feac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1005feb0 <smp_sap_crt_generate_ediv>:
1005feb0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005feb2:	b091      	sub	sp, #68	@ 0x44
1005feb4:	9201      	str	r2, [sp, #4]
1005feb6:	9100      	str	r1, [sp, #0]
1005feb8:	4605      	mov	r5, r0
1005feba:	a908      	add	r1, sp, #32
1005febc:	2003      	movs	r0, #3
1005febe:	8008      	strh	r0, [r1, #0]
1005fec0:	aa07      	add	r2, sp, #28
1005fec2:	2400      	movs	r4, #0
1005fec4:	8014      	strh	r4, [r2, #0]
1005fec6:	4814      	ldr	r0, [pc, #80]	@ (1005ff18 <__arm_cp.0_0>)
1005fec8:	6800      	ldr	r0, [r0, #0]
1005feca:	3018      	adds	r0, #24
1005fecc:	af03      	add	r7, sp, #12
1005fece:	463b      	mov	r3, r7
1005fed0:	f000 f824 	bl	1005ff1c <smp_crt_diversify>
1005fed4:	ae0d      	add	r6, sp, #52	@ 0x34
1005fed6:	2210      	movs	r2, #16
1005fed8:	4630      	mov	r0, r6
1005feda:	4621      	mov	r1, r4
1005fedc:	f7e6 f8ca 	bl	10046074 <BLEPLAT_MemSet>
1005fee0:	2208      	movs	r2, #8
1005fee2:	4630      	mov	r0, r6
1005fee4:	9900      	ldr	r1, [sp, #0]
1005fee6:	f7e6 f8b5 	bl	10046054 <BLEPLAT_MemCpy>
1005feea:	ac09      	add	r4, sp, #36	@ 0x24
1005feec:	4638      	mov	r0, r7
1005feee:	4631      	mov	r1, r6
1005fef0:	4622      	mov	r2, r4
1005fef2:	f7f7 faa7 	bl	10057444 <hci_le_encrypt>
1005fef6:	ae02      	add	r6, sp, #8
1005fef8:	2202      	movs	r2, #2
1005fefa:	4630      	mov	r0, r6
1005fefc:	4621      	mov	r1, r4
1005fefe:	f7e6 f8a9 	bl	10046054 <BLEPLAT_MemCpy>
1005ff02:	7828      	ldrb	r0, [r5, #0]
1005ff04:	9902      	ldr	r1, [sp, #8]
1005ff06:	4041      	eors	r1, r0
1005ff08:	9a01      	ldr	r2, [sp, #4]
1005ff0a:	7011      	strb	r1, [r2, #0]
1005ff0c:	7870      	ldrb	r0, [r6, #1]
1005ff0e:	7869      	ldrb	r1, [r5, #1]
1005ff10:	4041      	eors	r1, r0
1005ff12:	7051      	strb	r1, [r2, #1]
1005ff14:	b011      	add	sp, #68	@ 0x44
1005ff16:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005ff18 <__arm_cp.0_0>:
1005ff18:	200010a0 	.word	0x200010a0

1005ff1c <smp_crt_diversify>:
1005ff1c:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1005ff1e:	780d      	ldrb	r5, [r1, #0]
1005ff20:	466c      	mov	r4, sp
1005ff22:	7025      	strb	r5, [r4, #0]
1005ff24:	7849      	ldrb	r1, [r1, #1]
1005ff26:	7061      	strb	r1, [r4, #1]
1005ff28:	7811      	ldrb	r1, [r2, #0]
1005ff2a:	70a1      	strb	r1, [r4, #2]
1005ff2c:	7851      	ldrb	r1, [r2, #1]
1005ff2e:	70e1      	strb	r1, [r4, #3]
1005ff30:	2100      	movs	r1, #0
1005ff32:	9103      	str	r1, [sp, #12]
1005ff34:	9102      	str	r1, [sp, #8]
1005ff36:	9101      	str	r1, [sp, #4]
1005ff38:	4621      	mov	r1, r4
1005ff3a:	461a      	mov	r2, r3
1005ff3c:	f7f7 fa82 	bl	10057444 <hci_le_encrypt>
1005ff40:	bdbf      	pop	{r0, r1, r2, r3, r4, r5, r7, pc}
	...

1005ff44 <smp_sap_crt_generate_local_irk>:
1005ff44:	b5e0      	push	{r5, r6, r7, lr}
1005ff46:	4603      	mov	r3, r0
1005ff48:	a901      	add	r1, sp, #4
1005ff4a:	2001      	movs	r0, #1
1005ff4c:	8008      	strh	r0, [r1, #0]
1005ff4e:	466a      	mov	r2, sp
1005ff50:	2000      	movs	r0, #0
1005ff52:	8010      	strh	r0, [r2, #0]
1005ff54:	4802      	ldr	r0, [pc, #8]	@ (1005ff60 <__arm_cp.2_0>)
1005ff56:	6800      	ldr	r0, [r0, #0]
1005ff58:	3018      	adds	r0, #24
1005ff5a:	f7ff ffdf 	bl	1005ff1c <smp_crt_diversify>
1005ff5e:	bd8c      	pop	{r2, r3, r7, pc}

1005ff60 <__arm_cp.2_0>:
1005ff60:	200010a0 	.word	0x200010a0

1005ff64 <smp_sap_crt_generate_rpa>:
1005ff64:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ff66:	b087      	sub	sp, #28
1005ff68:	9000      	str	r0, [sp, #0]
1005ff6a:	ae03      	add	r6, sp, #12
1005ff6c:	4630      	mov	r0, r6
1005ff6e:	f7ff ffe9 	bl	1005ff44 <smp_sap_crt_generate_local_irk>
1005ff72:	2700      	movs	r7, #0
1005ff74:	4638      	mov	r0, r7
1005ff76:	f002 fdb6 	bl	10062ae6 <Hal_Get_Random_Number>
1005ff7a:	0a01      	lsrs	r1, r0, #8
1005ff7c:	ad02      	add	r5, sp, #8
1005ff7e:	7069      	strb	r1, [r5, #1]
1005ff80:	243f      	movs	r4, #63	@ 0x3f
1005ff82:	4004      	ands	r4, r0
1005ff84:	3440      	adds	r4, #64	@ 0x40
1005ff86:	4638      	mov	r0, r7
1005ff88:	f002 fdad 	bl	10062ae6 <Hal_Get_Random_Number>
1005ff8c:	70ac      	strb	r4, [r5, #2]
1005ff8e:	7028      	strb	r0, [r5, #0]
1005ff90:	af01      	add	r7, sp, #4
1005ff92:	4630      	mov	r0, r6
1005ff94:	4629      	mov	r1, r5
1005ff96:	463a      	mov	r2, r7
1005ff98:	f000 f80e 	bl	1005ffb8 <smp_crt_calculate_hash>
1005ff9c:	2603      	movs	r6, #3
1005ff9e:	9c00      	ldr	r4, [sp, #0]
1005ffa0:	4620      	mov	r0, r4
1005ffa2:	4639      	mov	r1, r7
1005ffa4:	4632      	mov	r2, r6
1005ffa6:	f7e6 f855 	bl	10046054 <BLEPLAT_MemCpy>
1005ffaa:	1ce0      	adds	r0, r4, #3
1005ffac:	4629      	mov	r1, r5
1005ffae:	4632      	mov	r2, r6
1005ffb0:	f7e6 f850 	bl	10046054 <BLEPLAT_MemCpy>
1005ffb4:	b007      	add	sp, #28
1005ffb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005ffb8 <smp_crt_calculate_hash>:
1005ffb8:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ffba:	b089      	sub	sp, #36	@ 0x24
1005ffbc:	9200      	str	r2, [sp, #0]
1005ffbe:	460f      	mov	r7, r1
1005ffc0:	4605      	mov	r5, r0
1005ffc2:	ae05      	add	r6, sp, #20
1005ffc4:	2100      	movs	r1, #0
1005ffc6:	2210      	movs	r2, #16
1005ffc8:	4630      	mov	r0, r6
1005ffca:	f7e6 f853 	bl	10046074 <BLEPLAT_MemSet>
1005ffce:	2403      	movs	r4, #3
1005ffd0:	4630      	mov	r0, r6
1005ffd2:	4639      	mov	r1, r7
1005ffd4:	4622      	mov	r2, r4
1005ffd6:	f7e6 f83d 	bl	10046054 <BLEPLAT_MemCpy>
1005ffda:	af01      	add	r7, sp, #4
1005ffdc:	4628      	mov	r0, r5
1005ffde:	4631      	mov	r1, r6
1005ffe0:	463a      	mov	r2, r7
1005ffe2:	f7f7 fa2f 	bl	10057444 <hci_le_encrypt>
1005ffe6:	9800      	ldr	r0, [sp, #0]
1005ffe8:	4639      	mov	r1, r7
1005ffea:	4622      	mov	r2, r4
1005ffec:	f7e6 f832 	bl	10046054 <BLEPLAT_MemCpy>
1005fff0:	b009      	add	sp, #36	@ 0x24
1005fff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005fff4 <smp_sap_crt_resolve_rpa>:
1005fff4:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005fff6:	460a      	mov	r2, r1
1005fff8:	4604      	mov	r4, r0
1005fffa:	1cc1      	adds	r1, r0, #3
1005fffc:	ad01      	add	r5, sp, #4
1005fffe:	4610      	mov	r0, r2
10060000:	462a      	mov	r2, r5
10060002:	f7ff ffd9 	bl	1005ffb8 <smp_crt_calculate_hash>
10060006:	2203      	movs	r2, #3
10060008:	4628      	mov	r0, r5
1006000a:	4621      	mov	r1, r4
1006000c:	f7e6 f842 	bl	10046094 <BLEPLAT_MemCmp>
10060010:	2800      	cmp	r0, #0
10060012:	d000      	beq.n	10060016 <smp_sap_crt_resolve_rpa+0x22>
10060014:	2081      	movs	r0, #129	@ 0x81
10060016:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10060018 <smp_crt_s1_generate_stk>:
10060018:	b5f0      	push	{r4, r5, r6, r7, lr}
1006001a:	b085      	sub	sp, #20
1006001c:	9300      	str	r3, [sp, #0]
1006001e:	4617      	mov	r7, r2
10060020:	4605      	mov	r5, r0
10060022:	ae01      	add	r6, sp, #4
10060024:	4630      	mov	r0, r6
10060026:	3008      	adds	r0, #8
10060028:	2408      	movs	r4, #8
1006002a:	4622      	mov	r2, r4
1006002c:	f7e6 f812 	bl	10046054 <BLEPLAT_MemCpy>
10060030:	4630      	mov	r0, r6
10060032:	4639      	mov	r1, r7
10060034:	4622      	mov	r2, r4
10060036:	f7e6 f80d 	bl	10046054 <BLEPLAT_MemCpy>
1006003a:	4628      	mov	r0, r5
1006003c:	4631      	mov	r1, r6
1006003e:	9a00      	ldr	r2, [sp, #0]
10060040:	f7f7 fa00 	bl	10057444 <hci_le_encrypt>
10060044:	b005      	add	sp, #20
10060046:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060048 <smp_crt_generate_csrk>:
10060048:	b5e0      	push	{r5, r6, r7, lr}
1006004a:	460b      	mov	r3, r1
1006004c:	4601      	mov	r1, r0
1006004e:	aa01      	add	r2, sp, #4
10060050:	2001      	movs	r0, #1
10060052:	8010      	strh	r0, [r2, #0]
10060054:	4802      	ldr	r0, [pc, #8]	@ (10060060 <__arm_cp.7_0>)
10060056:	6800      	ldr	r0, [r0, #0]
10060058:	3008      	adds	r0, #8
1006005a:	f7ff ff5f 	bl	1005ff1c <smp_crt_diversify>
1006005e:	bd8c      	pop	{r2, r3, r7, pc}

10060060 <__arm_cp.7_0>:
10060060:	200010a0 	.word	0x200010a0

10060064 <smp_crt_f4_generate_confirm>:
10060064:	b5f0      	push	{r4, r5, r6, r7, lr}
10060066:	b09d      	sub	sp, #116	@ 0x74
10060068:	9302      	str	r3, [sp, #8]
1006006a:	9203      	str	r2, [sp, #12]
1006006c:	9101      	str	r1, [sp, #4]
1006006e:	4601      	mov	r1, r0
10060070:	ad0c      	add	r5, sp, #48	@ 0x30
10060072:	2720      	movs	r7, #32
10060074:	2401      	movs	r4, #1
10060076:	4e12      	ldr	r6, [pc, #72]	@ (100600c0 <__arm_cp.8_0>)
10060078:	4628      	mov	r0, r5
1006007a:	463a      	mov	r2, r7
1006007c:	4623      	mov	r3, r4
1006007e:	47b0      	blx	r6
10060080:	4628      	mov	r0, r5
10060082:	3020      	adds	r0, #32
10060084:	9901      	ldr	r1, [sp, #4]
10060086:	463a      	mov	r2, r7
10060088:	4623      	mov	r3, r4
1006008a:	47b0      	blx	r6
1006008c:	4637      	mov	r7, r6
1006008e:	2040      	movs	r0, #64	@ 0x40
10060090:	9902      	ldr	r1, [sp, #8]
10060092:	5429      	strb	r1, [r5, r0]
10060094:	ae08      	add	r6, sp, #32
10060096:	2210      	movs	r2, #16
10060098:	9202      	str	r2, [sp, #8]
1006009a:	4630      	mov	r0, r6
1006009c:	9903      	ldr	r1, [sp, #12]
1006009e:	4623      	mov	r3, r4
100600a0:	47b8      	blx	r7
100600a2:	2141      	movs	r1, #65	@ 0x41
100600a4:	af04      	add	r7, sp, #16
100600a6:	4628      	mov	r0, r5
100600a8:	4632      	mov	r2, r6
100600aa:	463b      	mov	r3, r7
100600ac:	f002 fcfa 	bl	10062aa4 <AES_CMAC_Encrypt>
100600b0:	9822      	ldr	r0, [sp, #136]	@ 0x88
100600b2:	4639      	mov	r1, r7
100600b4:	9a02      	ldr	r2, [sp, #8]
100600b6:	4623      	mov	r3, r4
100600b8:	4c01      	ldr	r4, [pc, #4]	@ (100600c0 <__arm_cp.8_0>)
100600ba:	47a0      	blx	r4
100600bc:	b01d      	add	sp, #116	@ 0x74
100600be:	bdf0      	pop	{r4, r5, r6, r7, pc}

100600c0 <__arm_cp.8_0>:
100600c0:	10062785 	.word	0x10062785

100600c4 <smp_crt_f5_generate_keys>:
100600c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100600c6:	b0a9      	sub	sp, #164	@ 0xa4
100600c8:	9304      	str	r3, [sp, #16]
100600ca:	9202      	str	r2, [sp, #8]
100600cc:	9101      	str	r1, [sp, #4]
100600ce:	9005      	str	r0, [sp, #20]
100600d0:	ad1b      	add	r5, sp, #108	@ 0x6c
100600d2:	2135      	movs	r1, #53	@ 0x35
100600d4:	9106      	str	r1, [sp, #24]
100600d6:	4628      	mov	r0, r5
100600d8:	f007 f9a3 	bl	10067422 <__aeabi_memclr>
100600dc:	4628      	mov	r0, r5
100600de:	3025      	adds	r0, #37	@ 0x25
100600e0:	9003      	str	r0, [sp, #12]
100600e2:	2401      	movs	r4, #1
100600e4:	7384      	strb	r4, [r0, #14]
100600e6:	2065      	movs	r0, #101	@ 0x65
100600e8:	7128      	strb	r0, [r5, #4]
100600ea:	4829      	ldr	r0, [pc, #164]	@ (10060190 <__arm_cp.9_0>)
100600ec:	8068      	strh	r0, [r5, #2]
100600ee:	2062      	movs	r0, #98	@ 0x62
100600f0:	7068      	strb	r0, [r5, #1]
100600f2:	af0f      	add	r7, sp, #60	@ 0x3c
100600f4:	2220      	movs	r2, #32
100600f6:	9200      	str	r2, [sp, #0]
100600f8:	4638      	mov	r0, r7
100600fa:	9905      	ldr	r1, [sp, #20]
100600fc:	4623      	mov	r3, r4
100600fe:	4e25      	ldr	r6, [pc, #148]	@ (10060194 <__arm_cp.9_1>)
10060100:	47b0      	blx	r6
10060102:	4a25      	ldr	r2, [pc, #148]	@ (10060198 <__arm_cp.9_2>)
10060104:	ab17      	add	r3, sp, #92	@ 0x5c
10060106:	9305      	str	r3, [sp, #20]
10060108:	4e24      	ldr	r6, [pc, #144]	@ (1006019c <__arm_cp.9_3>)
1006010a:	4638      	mov	r0, r7
1006010c:	9900      	ldr	r1, [sp, #0]
1006010e:	47b0      	blx	r6
10060110:	1d68      	adds	r0, r5, #5
10060112:	2710      	movs	r7, #16
10060114:	9700      	str	r7, [sp, #0]
10060116:	9901      	ldr	r1, [sp, #4]
10060118:	463a      	mov	r2, r7
1006011a:	4623      	mov	r3, r4
1006011c:	4e1d      	ldr	r6, [pc, #116]	@ (10060194 <__arm_cp.9_1>)
1006011e:	47b0      	blx	r6
10060120:	4628      	mov	r0, r5
10060122:	3015      	adds	r0, #21
10060124:	9902      	ldr	r1, [sp, #8]
10060126:	463a      	mov	r2, r7
10060128:	4623      	mov	r3, r4
1006012a:	47b0      	blx	r6
1006012c:	2025      	movs	r0, #37	@ 0x25
1006012e:	9904      	ldr	r1, [sp, #16]
10060130:	5429      	strb	r1, [r5, r0]
10060132:	4628      	mov	r0, r5
10060134:	3026      	adds	r0, #38	@ 0x26
10060136:	992e      	ldr	r1, [sp, #184]	@ 0xb8
10060138:	2706      	movs	r7, #6
1006013a:	463a      	mov	r2, r7
1006013c:	4623      	mov	r3, r4
1006013e:	47b0      	blx	r6
10060140:	982f      	ldr	r0, [sp, #188]	@ 0xbc
10060142:	9903      	ldr	r1, [sp, #12]
10060144:	71c8      	strb	r0, [r1, #7]
10060146:	4628      	mov	r0, r5
10060148:	302d      	adds	r0, #45	@ 0x2d
1006014a:	9930      	ldr	r1, [sp, #192]	@ 0xc0
1006014c:	463a      	mov	r2, r7
1006014e:	4623      	mov	r3, r4
10060150:	47b0      	blx	r6
10060152:	af0b      	add	r7, sp, #44	@ 0x2c
10060154:	4628      	mov	r0, r5
10060156:	9906      	ldr	r1, [sp, #24]
10060158:	9a05      	ldr	r2, [sp, #20]
1006015a:	463b      	mov	r3, r7
1006015c:	4e0f      	ldr	r6, [pc, #60]	@ (1006019c <__arm_cp.9_3>)
1006015e:	47b0      	blx	r6
10060160:	9831      	ldr	r0, [sp, #196]	@ 0xc4
10060162:	4639      	mov	r1, r7
10060164:	9e00      	ldr	r6, [sp, #0]
10060166:	4632      	mov	r2, r6
10060168:	4623      	mov	r3, r4
1006016a:	4f0a      	ldr	r7, [pc, #40]	@ (10060194 <__arm_cp.9_1>)
1006016c:	47b8      	blx	r7
1006016e:	702c      	strb	r4, [r5, #0]
10060170:	af07      	add	r7, sp, #28
10060172:	4628      	mov	r0, r5
10060174:	9906      	ldr	r1, [sp, #24]
10060176:	9a05      	ldr	r2, [sp, #20]
10060178:	463b      	mov	r3, r7
1006017a:	4d08      	ldr	r5, [pc, #32]	@ (1006019c <__arm_cp.9_3>)
1006017c:	47a8      	blx	r5
1006017e:	9832      	ldr	r0, [sp, #200]	@ 0xc8
10060180:	4639      	mov	r1, r7
10060182:	4632      	mov	r2, r6
10060184:	4623      	mov	r3, r4
10060186:	4c03      	ldr	r4, [pc, #12]	@ (10060194 <__arm_cp.9_1>)
10060188:	47a0      	blx	r4
1006018a:	b029      	add	sp, #164	@ 0xa4
1006018c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006018e:	46c0      	nop			@ (mov r8, r8)

10060190 <__arm_cp.9_0>:
10060190:	00006c74 	.word	0x00006c74

10060194 <__arm_cp.9_1>:
10060194:	10062785 	.word	0x10062785

10060198 <__arm_cp.9_2>:
10060198:	1006a0d1 	.word	0x1006a0d1

1006019c <__arm_cp.9_3>:
1006019c:	10062aa5 	.word	0x10062aa5

100601a0 <smp_crt_f6_generate_check_val>:
100601a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100601a2:	b09d      	sub	sp, #116	@ 0x74
100601a4:	9301      	str	r3, [sp, #4]
100601a6:	9200      	str	r2, [sp, #0]
100601a8:	9002      	str	r0, [sp, #8]
100601aa:	ae0c      	add	r6, sp, #48	@ 0x30
100601ac:	2410      	movs	r4, #16
100601ae:	9403      	str	r4, [sp, #12]
100601b0:	2501      	movs	r5, #1
100601b2:	4f20      	ldr	r7, [pc, #128]	@ (10060234 <__arm_cp.10_0>)
100601b4:	4630      	mov	r0, r6
100601b6:	4622      	mov	r2, r4
100601b8:	462b      	mov	r3, r5
100601ba:	47b8      	blx	r7
100601bc:	4630      	mov	r0, r6
100601be:	3010      	adds	r0, #16
100601c0:	9900      	ldr	r1, [sp, #0]
100601c2:	4622      	mov	r2, r4
100601c4:	462b      	mov	r3, r5
100601c6:	47b8      	blx	r7
100601c8:	4630      	mov	r0, r6
100601ca:	3020      	adds	r0, #32
100601cc:	9901      	ldr	r1, [sp, #4]
100601ce:	4622      	mov	r2, r4
100601d0:	462b      	mov	r3, r5
100601d2:	463c      	mov	r4, r7
100601d4:	47b8      	blx	r7
100601d6:	4630      	mov	r0, r6
100601d8:	3030      	adds	r0, #48	@ 0x30
100601da:	9922      	ldr	r1, [sp, #136]	@ 0x88
100601dc:	2203      	movs	r2, #3
100601de:	462b      	mov	r3, r5
100601e0:	47b8      	blx	r7
100601e2:	2033      	movs	r0, #51	@ 0x33
100601e4:	9923      	ldr	r1, [sp, #140]	@ 0x8c
100601e6:	5431      	strb	r1, [r6, r0]
100601e8:	4630      	mov	r0, r6
100601ea:	3034      	adds	r0, #52	@ 0x34
100601ec:	9924      	ldr	r1, [sp, #144]	@ 0x90
100601ee:	2706      	movs	r7, #6
100601f0:	463a      	mov	r2, r7
100601f2:	462b      	mov	r3, r5
100601f4:	47a0      	blx	r4
100601f6:	4630      	mov	r0, r6
100601f8:	3033      	adds	r0, #51	@ 0x33
100601fa:	9925      	ldr	r1, [sp, #148]	@ 0x94
100601fc:	71c1      	strb	r1, [r0, #7]
100601fe:	4630      	mov	r0, r6
10060200:	303b      	adds	r0, #59	@ 0x3b
10060202:	9926      	ldr	r1, [sp, #152]	@ 0x98
10060204:	463a      	mov	r2, r7
10060206:	462b      	mov	r3, r5
10060208:	47a0      	blx	r4
1006020a:	af04      	add	r7, sp, #16
1006020c:	4638      	mov	r0, r7
1006020e:	9902      	ldr	r1, [sp, #8]
10060210:	9a03      	ldr	r2, [sp, #12]
10060212:	462b      	mov	r3, r5
10060214:	47a0      	blx	r4
10060216:	2141      	movs	r1, #65	@ 0x41
10060218:	ac08      	add	r4, sp, #32
1006021a:	4630      	mov	r0, r6
1006021c:	463a      	mov	r2, r7
1006021e:	4623      	mov	r3, r4
10060220:	f002 fc40 	bl	10062aa4 <AES_CMAC_Encrypt>
10060224:	9827      	ldr	r0, [sp, #156]	@ 0x9c
10060226:	4621      	mov	r1, r4
10060228:	9a03      	ldr	r2, [sp, #12]
1006022a:	462b      	mov	r3, r5
1006022c:	4c01      	ldr	r4, [pc, #4]	@ (10060234 <__arm_cp.10_0>)
1006022e:	47a0      	blx	r4
10060230:	b01d      	add	sp, #116	@ 0x74
10060232:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060234 <__arm_cp.10_0>:
10060234:	10062785 	.word	0x10062785

10060238 <smp_crt_g2_generate_num_comp_val>:
10060238:	b5f0      	push	{r4, r5, r6, r7, lr}
1006023a:	b09f      	sub	sp, #124	@ 0x7c
1006023c:	9301      	str	r3, [sp, #4]
1006023e:	9202      	str	r2, [sp, #8]
10060240:	9100      	str	r1, [sp, #0]
10060242:	4601      	mov	r1, r0
10060244:	ad0b      	add	r5, sp, #44	@ 0x2c
10060246:	2720      	movs	r7, #32
10060248:	2401      	movs	r4, #1
1006024a:	4e15      	ldr	r6, [pc, #84]	@ (100602a0 <__arm_cp.11_0>)
1006024c:	4628      	mov	r0, r5
1006024e:	463a      	mov	r2, r7
10060250:	4623      	mov	r3, r4
10060252:	47b0      	blx	r6
10060254:	4628      	mov	r0, r5
10060256:	3020      	adds	r0, #32
10060258:	9900      	ldr	r1, [sp, #0]
1006025a:	463a      	mov	r2, r7
1006025c:	4623      	mov	r3, r4
1006025e:	47b0      	blx	r6
10060260:	4637      	mov	r7, r6
10060262:	4628      	mov	r0, r5
10060264:	3040      	adds	r0, #64	@ 0x40
10060266:	2610      	movs	r6, #16
10060268:	9901      	ldr	r1, [sp, #4]
1006026a:	4632      	mov	r2, r6
1006026c:	4623      	mov	r3, r4
1006026e:	47b8      	blx	r7
10060270:	af07      	add	r7, sp, #28
10060272:	4638      	mov	r0, r7
10060274:	9902      	ldr	r1, [sp, #8]
10060276:	4632      	mov	r2, r6
10060278:	4623      	mov	r3, r4
1006027a:	4e09      	ldr	r6, [pc, #36]	@ (100602a0 <__arm_cp.11_0>)
1006027c:	47b0      	blx	r6
1006027e:	2150      	movs	r1, #80	@ 0x50
10060280:	ae03      	add	r6, sp, #12
10060282:	4628      	mov	r0, r5
10060284:	463a      	mov	r2, r7
10060286:	4633      	mov	r3, r6
10060288:	f002 fc0c 	bl	10062aa4 <AES_CMAC_Encrypt>
1006028c:	360c      	adds	r6, #12
1006028e:	9824      	ldr	r0, [sp, #144]	@ 0x90
10060290:	2204      	movs	r2, #4
10060292:	4631      	mov	r1, r6
10060294:	4623      	mov	r3, r4
10060296:	4c02      	ldr	r4, [pc, #8]	@ (100602a0 <__arm_cp.11_0>)
10060298:	47a0      	blx	r4
1006029a:	b01f      	add	sp, #124	@ 0x7c
1006029c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006029e:	46c0      	nop			@ (mov r8, r8)

100602a0 <__arm_cp.11_0>:
100602a0:	10062785 	.word	0x10062785

100602a4 <smp_crt_generate_cmac_tag>:
100602a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100602a6:	b095      	sub	sp, #84	@ 0x54
100602a8:	9301      	str	r3, [sp, #4]
100602aa:	4617      	mov	r7, r2
100602ac:	9103      	str	r1, [sp, #12]
100602ae:	2500      	movs	r5, #0
100602b0:	9514      	str	r5, [sp, #80]	@ 0x50
100602b2:	9513      	str	r5, [sp, #76]	@ 0x4c
100602b4:	9512      	str	r5, [sp, #72]	@ 0x48
100602b6:	9511      	str	r5, [sp, #68]	@ 0x44
100602b8:	a911      	add	r1, sp, #68	@ 0x44
100602ba:	ac0d      	add	r4, sp, #52	@ 0x34
100602bc:	9004      	str	r0, [sp, #16]
100602be:	4622      	mov	r2, r4
100602c0:	f7f7 f8c0 	bl	10057444 <hci_le_encrypt>
100602c4:	200f      	movs	r0, #15
100602c6:	9002      	str	r0, [sp, #8]
100602c8:	5626      	ldrsb	r6, [r4, r0]
100602ca:	a909      	add	r1, sp, #36	@ 0x24
100602cc:	4620      	mov	r0, r4
100602ce:	f000 f885 	bl	100603dc <smp_crt_left_shift>
100602d2:	2e00      	cmp	r6, #0
100602d4:	d467      	bmi.n	100603a6 <smp_crt_generate_cmac_tag+0x102>
100602d6:	a809      	add	r0, sp, #36	@ 0x24
100602d8:	9902      	ldr	r1, [sp, #8]
100602da:	5644      	ldrsb	r4, [r0, r1]
100602dc:	a905      	add	r1, sp, #20
100602de:	f000 f87d 	bl	100603dc <smp_crt_left_shift>
100602e2:	2c00      	cmp	r4, #0
100602e4:	d46c      	bmi.n	100603c0 <smp_crt_generate_cmac_tag+0x11c>
100602e6:	a811      	add	r0, sp, #68	@ 0x44
100602e8:	2400      	movs	r4, #0
100602ea:	2210      	movs	r2, #16
100602ec:	4621      	mov	r1, r4
100602ee:	f7e5 fec1 	bl	10046074 <BLEPLAT_MemSet>
100602f2:	b2fd      	uxtb	r5, r7
100602f4:	2d11      	cmp	r5, #17
100602f6:	d321      	bcc.n	1006033c <smp_crt_generate_cmac_tag+0x98>
100602f8:	1d20      	adds	r0, r4, #4
100602fa:	b281      	uxth	r1, r0
100602fc:	2210      	movs	r2, #16
100602fe:	ab0d      	add	r3, sp, #52	@ 0x34
10060300:	9803      	ldr	r0, [sp, #12]
10060302:	f7f2 fc73 	bl	10052bec <ACL_pkt_read>
10060306:	2000      	movs	r0, #0
10060308:	2810      	cmp	r0, #16
1006030a:	d007      	beq.n	1006031c <smp_crt_generate_cmac_tag+0x78>
1006030c:	a90d      	add	r1, sp, #52	@ 0x34
1006030e:	5c09      	ldrb	r1, [r1, r0]
10060310:	aa11      	add	r2, sp, #68	@ 0x44
10060312:	5c13      	ldrb	r3, [r2, r0]
10060314:	404b      	eors	r3, r1
10060316:	5413      	strb	r3, [r2, r0]
10060318:	1c40      	adds	r0, r0, #1
1006031a:	e7f5      	b.n	10060308 <smp_crt_generate_cmac_tag+0x64>
1006031c:	ad11      	add	r5, sp, #68	@ 0x44
1006031e:	ae0d      	add	r6, sp, #52	@ 0x34
10060320:	9804      	ldr	r0, [sp, #16]
10060322:	4629      	mov	r1, r5
10060324:	4632      	mov	r2, r6
10060326:	f7f7 f88d 	bl	10057444 <hci_le_encrypt>
1006032a:	2210      	movs	r2, #16
1006032c:	4628      	mov	r0, r5
1006032e:	4631      	mov	r1, r6
10060330:	f7e5 fe90 	bl	10046054 <BLEPLAT_MemCpy>
10060334:	3f10      	subs	r7, #16
10060336:	3410      	adds	r4, #16
10060338:	b2a4      	uxth	r4, r4
1006033a:	e7da      	b.n	100602f2 <smp_crt_generate_cmac_tag+0x4e>
1006033c:	2d10      	cmp	r5, #16
1006033e:	d108      	bne.n	10060352 <smp_crt_generate_cmac_tag+0xae>
10060340:	1d20      	adds	r0, r4, #4
10060342:	b281      	uxth	r1, r0
10060344:	2210      	movs	r2, #16
10060346:	ab0d      	add	r3, sp, #52	@ 0x34
10060348:	9803      	ldr	r0, [sp, #12]
1006034a:	f7f2 fc4f 	bl	10052bec <ACL_pkt_read>
1006034e:	a809      	add	r0, sp, #36	@ 0x24
10060350:	e014      	b.n	1006037c <smp_crt_generate_cmac_tag+0xd8>
10060352:	a80d      	add	r0, sp, #52	@ 0x34
10060354:	2100      	movs	r1, #0
10060356:	2210      	movs	r2, #16
10060358:	f7e5 fe8c 	bl	10046074 <BLEPLAT_MemSet>
1006035c:	0638      	lsls	r0, r7, #24
1006035e:	d008      	beq.n	10060372 <smp_crt_generate_cmac_tag+0xce>
10060360:	a80d      	add	r0, sp, #52	@ 0x34
10060362:	1b43      	subs	r3, r0, r5
10060364:	3310      	adds	r3, #16
10060366:	1d20      	adds	r0, r4, #4
10060368:	b281      	uxth	r1, r0
1006036a:	9803      	ldr	r0, [sp, #12]
1006036c:	462a      	mov	r2, r5
1006036e:	f7f2 fc3d 	bl	10052bec <ACL_pkt_read>
10060372:	a80d      	add	r0, sp, #52	@ 0x34
10060374:	1b40      	subs	r0, r0, r5
10060376:	2180      	movs	r1, #128	@ 0x80
10060378:	73c1      	strb	r1, [r0, #15]
1006037a:	a805      	add	r0, sp, #20
1006037c:	9a01      	ldr	r2, [sp, #4]
1006037e:	2100      	movs	r1, #0
10060380:	2910      	cmp	r1, #16
10060382:	d009      	beq.n	10060398 <smp_crt_generate_cmac_tag+0xf4>
10060384:	ab0d      	add	r3, sp, #52	@ 0x34
10060386:	5c5c      	ldrb	r4, [r3, r1]
10060388:	5c43      	ldrb	r3, [r0, r1]
1006038a:	4063      	eors	r3, r4
1006038c:	ad11      	add	r5, sp, #68	@ 0x44
1006038e:	5c6c      	ldrb	r4, [r5, r1]
10060390:	405c      	eors	r4, r3
10060392:	546c      	strb	r4, [r5, r1]
10060394:	1c49      	adds	r1, r1, #1
10060396:	e7f3      	b.n	10060380 <smp_crt_generate_cmac_tag+0xdc>
10060398:	a911      	add	r1, sp, #68	@ 0x44
1006039a:	9804      	ldr	r0, [sp, #16]
1006039c:	f7f7 f852 	bl	10057444 <hci_le_encrypt>
100603a0:	2000      	movs	r0, #0
100603a2:	b015      	add	sp, #84	@ 0x54
100603a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100603a6:	a811      	add	r0, sp, #68	@ 0x44
100603a8:	2187      	movs	r1, #135	@ 0x87
100603aa:	7001      	strb	r1, [r0, #0]
100603ac:	2d0f      	cmp	r5, #15
100603ae:	d092      	beq.n	100602d6 <smp_crt_generate_cmac_tag+0x32>
100603b0:	a809      	add	r0, sp, #36	@ 0x24
100603b2:	5d41      	ldrb	r1, [r0, r5]
100603b4:	aa11      	add	r2, sp, #68	@ 0x44
100603b6:	5d52      	ldrb	r2, [r2, r5]
100603b8:	404a      	eors	r2, r1
100603ba:	5542      	strb	r2, [r0, r5]
100603bc:	1c6d      	adds	r5, r5, #1
100603be:	e7f5      	b.n	100603ac <smp_crt_generate_cmac_tag+0x108>
100603c0:	a811      	add	r0, sp, #68	@ 0x44
100603c2:	2187      	movs	r1, #135	@ 0x87
100603c4:	7001      	strb	r1, [r0, #0]
100603c6:	2000      	movs	r0, #0
100603c8:	280f      	cmp	r0, #15
100603ca:	d08c      	beq.n	100602e6 <smp_crt_generate_cmac_tag+0x42>
100603cc:	a905      	add	r1, sp, #20
100603ce:	5c0a      	ldrb	r2, [r1, r0]
100603d0:	ab11      	add	r3, sp, #68	@ 0x44
100603d2:	5c1b      	ldrb	r3, [r3, r0]
100603d4:	4053      	eors	r3, r2
100603d6:	540b      	strb	r3, [r1, r0]
100603d8:	1c40      	adds	r0, r0, #1
100603da:	e7f5      	b.n	100603c8 <smp_crt_generate_cmac_tag+0x124>

100603dc <smp_crt_left_shift>:
100603dc:	b510      	push	{r4, lr}
100603de:	7802      	ldrb	r2, [r0, #0]
100603e0:	0052      	lsls	r2, r2, #1
100603e2:	700a      	strb	r2, [r1, #0]
100603e4:	1c49      	adds	r1, r1, #1
100603e6:	2200      	movs	r2, #0
100603e8:	2a0f      	cmp	r2, #15
100603ea:	d00b      	beq.n	10060404 <smp_crt_left_shift+0x28>
100603ec:	1883      	adds	r3, r0, r2
100603ee:	785b      	ldrb	r3, [r3, #1]
100603f0:	005b      	lsls	r3, r3, #1
100603f2:	548b      	strb	r3, [r1, r2]
100603f4:	5684      	ldrsb	r4, [r0, r2]
100603f6:	2c00      	cmp	r4, #0
100603f8:	d502      	bpl.n	10060400 <smp_crt_left_shift+0x24>
100603fa:	2401      	movs	r4, #1
100603fc:	4323      	orrs	r3, r4
100603fe:	548b      	strb	r3, [r1, r2]
10060400:	1c52      	adds	r2, r2, #1
10060402:	e7f1      	b.n	100603e8 <smp_crt_left_shift+0xc>
10060404:	bd10      	pop	{r4, pc}
	...

10060408 <smp_pp1_get_next_free_pairing_idx>:
10060408:	b510      	push	{r4, lr}
1006040a:	490b      	ldr	r1, [pc, #44]	@ (10060438 <__arm_cp.0_0>)
1006040c:	680a      	ldr	r2, [r1, #0]
1006040e:	21b1      	movs	r1, #177	@ 0xb1
10060410:	5c53      	ldrb	r3, [r2, r1]
10060412:	32b1      	adds	r2, #177	@ 0xb1
10060414:	2100      	movs	r1, #0
10060416:	2903      	cmp	r1, #3
10060418:	d005      	beq.n	10060426 <smp_pp1_get_next_free_pairing_idx+0x1e>
1006041a:	2401      	movs	r4, #1
1006041c:	408c      	lsls	r4, r1
1006041e:	421c      	tst	r4, r3
10060420:	d003      	beq.n	1006042a <smp_pp1_get_next_free_pairing_idx+0x22>
10060422:	1c49      	adds	r1, r1, #1
10060424:	e7f7      	b.n	10060416 <smp_pp1_get_next_free_pairing_idx+0xe>
10060426:	2103      	movs	r1, #3
10060428:	e003      	b.n	10060432 <smp_pp1_get_next_free_pairing_idx+0x2a>
1006042a:	2800      	cmp	r0, #0
1006042c:	d001      	beq.n	10060432 <smp_pp1_get_next_free_pairing_idx+0x2a>
1006042e:	4323      	orrs	r3, r4
10060430:	7013      	strb	r3, [r2, #0]
10060432:	b2c8      	uxtb	r0, r1
10060434:	bd10      	pop	{r4, pc}
10060436:	46c0      	nop			@ (mov r8, r8)

10060438 <__arm_cp.0_0>:
10060438:	20001140 	.word	0x20001140

1006043c <smp_pp1_get_pairing_pdu_offset>:
1006043c:	0100      	lsls	r0, r0, #4
1006043e:	2900      	cmp	r1, #0
10060440:	d000      	beq.n	10060444 <smp_pp1_get_pairing_pdu_offset+0x8>
10060442:	3008      	adds	r0, #8
10060444:	b2c0      	uxtb	r0, r0
10060446:	4770      	bx	lr

10060448 <smp_pp1_reqrsp_pdu_params_check>:
10060448:	b51c      	push	{r2, r3, r4, lr}
1006044a:	2104      	movs	r1, #4
1006044c:	2207      	movs	r2, #7
1006044e:	466c      	mov	r4, sp
10060450:	4623      	mov	r3, r4
10060452:	f7f2 fbcb 	bl	10052bec <ACL_pkt_read>
10060456:	7862      	ldrb	r2, [r4, #1]
10060458:	210a      	movs	r1, #10
1006045a:	2a04      	cmp	r2, #4
1006045c:	d813      	bhi.n	10060486 <smp_pp1_reqrsp_pdu_params_check+0x3e>
1006045e:	466a      	mov	r2, sp
10060460:	7892      	ldrb	r2, [r2, #2]
10060462:	2a01      	cmp	r2, #1
10060464:	d80f      	bhi.n	10060486 <smp_pp1_reqrsp_pdu_params_check+0x3e>
10060466:	466a      	mov	r2, sp
10060468:	78d2      	ldrb	r2, [r2, #3]
1006046a:	0792      	lsls	r2, r2, #30
1006046c:	d40b      	bmi.n	10060486 <smp_pp1_reqrsp_pdu_params_check+0x3e>
1006046e:	4907      	ldr	r1, [pc, #28]	@ (1006048c <__arm_cp.2_0>)
10060470:	6809      	ldr	r1, [r1, #0]
10060472:	2234      	movs	r2, #52	@ 0x34
10060474:	5c8a      	ldrb	r2, [r1, r2]
10060476:	4669      	mov	r1, sp
10060478:	7909      	ldrb	r1, [r1, #4]
1006047a:	4291      	cmp	r1, r2
1006047c:	d302      	bcc.n	10060484 <smp_pp1_reqrsp_pdu_params_check+0x3c>
1006047e:	2911      	cmp	r1, #17
10060480:	4601      	mov	r1, r0
10060482:	d300      	bcc.n	10060486 <smp_pp1_reqrsp_pdu_params_check+0x3e>
10060484:	2106      	movs	r1, #6
10060486:	4608      	mov	r0, r1
10060488:	bd1c      	pop	{r2, r3, r4, pc}
1006048a:	46c0      	nop			@ (mov r8, r8)

1006048c <__arm_cp.2_0>:
1006048c:	20001140 	.word	0x20001140

10060490 <smp_pp1_reqrsp_pdu_copy_to_pairing_data>:
10060490:	b580      	push	{r7, lr}
10060492:	7d12      	ldrb	r2, [r2, #20]
10060494:	0112      	lsls	r2, r2, #4
10060496:	2900      	cmp	r1, #0
10060498:	d000      	beq.n	1006049c <smp_pp1_reqrsp_pdu_copy_to_pairing_data+0xc>
1006049a:	3208      	adds	r2, #8
1006049c:	b2d1      	uxtb	r1, r2
1006049e:	4a04      	ldr	r2, [pc, #16]	@ (100604b0 <__arm_cp.3_0>)
100604a0:	6812      	ldr	r2, [r2, #0]
100604a2:	1853      	adds	r3, r2, r1
100604a4:	33b4      	adds	r3, #180	@ 0xb4
100604a6:	2104      	movs	r1, #4
100604a8:	2207      	movs	r2, #7
100604aa:	f7f2 fb9f 	bl	10052bec <ACL_pkt_read>
100604ae:	bd80      	pop	{r7, pc}

100604b0 <__arm_cp.3_0>:
100604b0:	20001140 	.word	0x20001140

100604b4 <smp_pp1_reqrsp_pdu_extract_from_pairing_data>:
100604b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100604b6:	4924      	ldr	r1, [pc, #144]	@ (10060548 <__arm_cp.4_0>)
100604b8:	6809      	ldr	r1, [r1, #0]
100604ba:	7d02      	ldrb	r2, [r0, #20]
100604bc:	0112      	lsls	r2, r2, #4
100604be:	3208      	adds	r2, #8
100604c0:	b2d2      	uxtb	r2, r2
100604c2:	188b      	adds	r3, r1, r2
100604c4:	24b5      	movs	r4, #181	@ 0xb5
100604c6:	5d1c      	ldrb	r4, [r3, r4]
100604c8:	7304      	strb	r4, [r0, #12]
100604ca:	24b6      	movs	r4, #182	@ 0xb6
100604cc:	5d1b      	ldrb	r3, [r3, r4]
100604ce:	2b01      	cmp	r3, #1
100604d0:	d103      	bne.n	100604da <smp_pp1_reqrsp_pdu_extract_from_pairing_data+0x26>
100604d2:	7b43      	ldrb	r3, [r0, #13]
100604d4:	2402      	movs	r4, #2
100604d6:	431c      	orrs	r4, r3
100604d8:	7344      	strb	r4, [r0, #13]
100604da:	460b      	mov	r3, r1
100604dc:	3336      	adds	r3, #54	@ 0x36
100604de:	2503      	movs	r5, #3
100604e0:	4315      	orrs	r5, r2
100604e2:	460c      	mov	r4, r1
100604e4:	34b4      	adds	r4, #180	@ 0xb4
100604e6:	5d65      	ldrb	r5, [r4, r5]
100604e8:	2601      	movs	r6, #1
100604ea:	402e      	ands	r6, r5
100604ec:	7b87      	ldrb	r7, [r0, #14]
100604ee:	4337      	orrs	r7, r6
100604f0:	7387      	strb	r7, [r0, #14]
100604f2:	2604      	movs	r6, #4
100604f4:	4035      	ands	r5, r6
100604f6:	7bc7      	ldrb	r7, [r0, #15]
100604f8:	432f      	orrs	r7, r5
100604fa:	73c7      	strb	r7, [r0, #15]
100604fc:	4316      	orrs	r6, r2
100604fe:	5da5      	ldrb	r5, [r4, r6]
10060500:	7405      	strb	r5, [r0, #16]
10060502:	2505      	movs	r5, #5
10060504:	4315      	orrs	r5, r2
10060506:	5d64      	ldrb	r4, [r4, r5]
10060508:	2560      	movs	r5, #96	@ 0x60
1006050a:	5d45      	ldrb	r5, [r0, r5]
1006050c:	07ed      	lsls	r5, r5, #31
1006050e:	d10e      	bne.n	1006052e <smp_pp1_reqrsp_pdu_extract_from_pairing_data+0x7a>
10060510:	781d      	ldrb	r5, [r3, #0]
10060512:	402c      	ands	r4, r5
10060514:	2507      	movs	r5, #7
10060516:	402c      	ands	r4, r5
10060518:	7484      	strb	r4, [r0, #18]
1006051a:	2406      	movs	r4, #6
1006051c:	4322      	orrs	r2, r4
1006051e:	1889      	adds	r1, r1, r2
10060520:	22b4      	movs	r2, #180	@ 0xb4
10060522:	5c89      	ldrb	r1, [r1, r2]
10060524:	785a      	ldrb	r2, [r3, #1]
10060526:	400a      	ands	r2, r1
10060528:	402a      	ands	r2, r5
1006052a:	7442      	strb	r2, [r0, #17]
1006052c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006052e:	785d      	ldrb	r5, [r3, #1]
10060530:	4025      	ands	r5, r4
10060532:	7445      	strb	r5, [r0, #17]
10060534:	2406      	movs	r4, #6
10060536:	4322      	orrs	r2, r4
10060538:	1889      	adds	r1, r1, r2
1006053a:	22b4      	movs	r2, #180	@ 0xb4
1006053c:	5c89      	ldrb	r1, [r1, r2]
1006053e:	781a      	ldrb	r2, [r3, #0]
10060540:	400a      	ands	r2, r1
10060542:	7482      	strb	r2, [r0, #18]
10060544:	bdf0      	pop	{r4, r5, r6, r7, pc}
10060546:	46c0      	nop			@ (mov r8, r8)

10060548 <__arm_cp.4_0>:
10060548:	20001140 	.word	0x20001140

1006054c <smp_pp1_key_generation_method_selection>:
1006054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006054e:	7b01      	ldrb	r1, [r0, #12]
10060550:	7b42      	ldrb	r2, [r0, #13]
10060552:	07d3      	lsls	r3, r2, #31
10060554:	d001      	beq.n	1006055a <smp_pp1_key_generation_method_selection+0xe>
10060556:	0793      	lsls	r3, r2, #30
10060558:	d405      	bmi.n	10060566 <smp_pp1_key_generation_method_selection+0x1a>
1006055a:	7dc3      	ldrb	r3, [r0, #23]
1006055c:	2408      	movs	r4, #8
1006055e:	401c      	ands	r4, r3
10060560:	d003      	beq.n	1006056a <smp_pp1_key_generation_method_selection+0x1e>
10060562:	0792      	lsls	r2, r2, #30
10060564:	d001      	beq.n	1006056a <smp_pp1_key_generation_method_selection+0x1e>
10060566:	2203      	movs	r2, #3
10060568:	e019      	b.n	1006059e <smp_pp1_key_generation_method_selection+0x52>
1006056a:	7bc3      	ldrb	r3, [r0, #15]
1006056c:	2205      	movs	r2, #5
1006056e:	4213      	tst	r3, r2
10060570:	d014      	beq.n	1006059c <smp_pp1_key_generation_method_selection+0x50>
10060572:	4b42      	ldr	r3, [pc, #264]	@ (1006067c <__arm_cp.5_0>)
10060574:	681b      	ldr	r3, [r3, #0]
10060576:	2540      	movs	r5, #64	@ 0x40
10060578:	5d5d      	ldrb	r5, [r3, r5]
1006057a:	434a      	muls	r2, r1
1006057c:	4b40      	ldr	r3, [pc, #256]	@ (10060680 <__arm_cp.5_1>)
1006057e:	189a      	adds	r2, r3, r2
10060580:	5d52      	ldrb	r2, [r2, r5]
10060582:	74c2      	strb	r2, [r0, #19]
10060584:	4603      	mov	r3, r0
10060586:	3313      	adds	r3, #19
10060588:	2a00      	cmp	r2, #0
1006058a:	d10b      	bne.n	100605a4 <smp_pp1_key_generation_method_selection+0x58>
1006058c:	2c00      	cmp	r4, #0
1006058e:	d13d      	bne.n	1006060c <smp_pp1_key_generation_method_selection+0xc0>
10060590:	2901      	cmp	r1, #1
10060592:	d16f      	bne.n	10060674 <smp_pp1_key_generation_method_selection+0x128>
10060594:	2d01      	cmp	r5, #1
10060596:	d16d      	bne.n	10060674 <smp_pp1_key_generation_method_selection+0x128>
10060598:	2201      	movs	r2, #1
1006059a:	e06c      	b.n	10060676 <smp_pp1_key_generation_method_selection+0x12a>
1006059c:	2201      	movs	r2, #1
1006059e:	74c2      	strb	r2, [r0, #19]
100605a0:	4603      	mov	r3, r0
100605a2:	3313      	adds	r3, #19
100605a4:	2460      	movs	r4, #96	@ 0x60
100605a6:	5d05      	ldrb	r5, [r0, r4]
100605a8:	2601      	movs	r6, #1
100605aa:	4035      	ands	r5, r6
100605ac:	d103      	bne.n	100605b6 <smp_pp1_key_generation_method_selection+0x6a>
100605ae:	241a      	movs	r4, #26
100605b0:	5704      	ldrsb	r4, [r0, r4]
100605b2:	2c00      	cmp	r4, #0
100605b4:	d426      	bmi.n	10060604 <smp_pp1_key_generation_method_selection+0xb8>
100605b6:	4604      	mov	r4, r0
100605b8:	340f      	adds	r4, #15
100605ba:	7824      	ldrb	r4, [r4, #0]
100605bc:	07e4      	lsls	r4, r4, #31
100605be:	d004      	beq.n	100605ca <smp_pp1_key_generation_method_selection+0x7e>
100605c0:	2a01      	cmp	r2, #1
100605c2:	d102      	bne.n	100605ca <smp_pp1_key_generation_method_selection+0x7e>
100605c4:	2403      	movs	r4, #3
100605c6:	701c      	strb	r4, [r3, #0]
100605c8:	e052      	b.n	10060670 <smp_pp1_key_generation_method_selection+0x124>
100605ca:	7dc3      	ldrb	r3, [r0, #23]
100605cc:	071b      	lsls	r3, r3, #28
100605ce:	d503      	bpl.n	100605d8 <smp_pp1_key_generation_method_selection+0x8c>
100605d0:	2a02      	cmp	r2, #2
100605d2:	d101      	bne.n	100605d8 <smp_pp1_key_generation_method_selection+0x8c>
100605d4:	2300      	movs	r3, #0
100605d6:	76c3      	strb	r3, [r0, #27]
100605d8:	2a02      	cmp	r2, #2
100605da:	d111      	bne.n	10060600 <smp_pp1_key_generation_method_selection+0xb4>
100605dc:	7bc2      	ldrb	r2, [r0, #15]
100605de:	23ef      	movs	r3, #239	@ 0xef
100605e0:	4013      	ands	r3, r2
100605e2:	73c3      	strb	r3, [r0, #15]
100605e4:	4a25      	ldr	r2, [pc, #148]	@ (1006067c <__arm_cp.5_0>)
100605e6:	6812      	ldr	r2, [r2, #0]
100605e8:	2340      	movs	r3, #64	@ 0x40
100605ea:	5cd2      	ldrb	r2, [r2, r3]
100605ec:	2400      	movs	r4, #0
100605ee:	2a02      	cmp	r2, #2
100605f0:	4627      	mov	r7, r4
100605f2:	d318      	bcc.n	10060626 <smp_pp1_key_generation_method_selection+0xda>
100605f4:	2a04      	cmp	r2, #4
100605f6:	d00b      	beq.n	10060610 <smp_pp1_key_generation_method_selection+0xc4>
100605f8:	2a02      	cmp	r2, #2
100605fa:	d113      	bne.n	10060624 <smp_pp1_key_generation_method_selection+0xd8>
100605fc:	4637      	mov	r7, r6
100605fe:	e012      	b.n	10060626 <smp_pp1_key_generation_method_selection+0xda>
10060600:	2400      	movs	r4, #0
10060602:	e035      	b.n	10060670 <smp_pp1_key_generation_method_selection+0x124>
10060604:	4c1d      	ldr	r4, [pc, #116]	@ (1006067c <__arm_cp.5_0>)
10060606:	6824      	ldr	r4, [r4, #0]
10060608:	3431      	adds	r4, #49	@ 0x31
1006060a:	e7d6      	b.n	100605ba <smp_pp1_key_generation_method_selection+0x6e>
1006060c:	2204      	movs	r2, #4
1006060e:	e032      	b.n	10060676 <smp_pp1_key_generation_method_selection+0x12a>
10060610:	2902      	cmp	r1, #2
10060612:	4637      	mov	r7, r6
10060614:	d307      	bcc.n	10060626 <smp_pp1_key_generation_method_selection+0xda>
10060616:	2904      	cmp	r1, #4
10060618:	462f      	mov	r7, r5
1006061a:	d004      	beq.n	10060626 <smp_pp1_key_generation_method_selection+0xda>
1006061c:	2902      	cmp	r1, #2
1006061e:	d101      	bne.n	10060624 <smp_pp1_key_generation_method_selection+0xd8>
10060620:	4627      	mov	r7, r4
10060622:	e000      	b.n	10060626 <smp_pp1_key_generation_method_selection+0xda>
10060624:	27ff      	movs	r7, #255	@ 0xff
10060626:	4917      	ldr	r1, [pc, #92]	@ (10060684 <__arm_cp.5_2>)
10060628:	6809      	ldr	r1, [r1, #0]
1006062a:	224e      	movs	r2, #78	@ 0x4e
1006062c:	5c89      	ldrb	r1, [r1, r2]
1006062e:	0749      	lsls	r1, r1, #29
10060630:	d51e      	bpl.n	10060670 <smp_pp1_key_generation_method_selection+0x124>
10060632:	8906      	ldrh	r6, [r0, #8]
10060634:	4814      	ldr	r0, [pc, #80]	@ (10060688 <__arm_cp.5_3>)
10060636:	6800      	ldr	r0, [r0, #0]
10060638:	6980      	ldr	r0, [r0, #24]
1006063a:	2502      	movs	r5, #2
1006063c:	2246      	movs	r2, #70	@ 0x46
1006063e:	2303      	movs	r3, #3
10060640:	4629      	mov	r1, r5
10060642:	f7f2 fc79 	bl	10052f38 <aci_event_fifo_push_header>
10060646:	2800      	cmp	r0, #0
10060648:	d012      	beq.n	10060670 <smp_pp1_key_generation_method_selection+0x124>
1006064a:	4601      	mov	r1, r0
1006064c:	7286      	strb	r6, [r0, #10]
1006064e:	2004      	movs	r0, #4
10060650:	7248      	strb	r0, [r1, #9]
10060652:	720d      	strb	r5, [r1, #8]
10060654:	2400      	movs	r4, #0
10060656:	71cc      	strb	r4, [r1, #7]
10060658:	2005      	movs	r0, #5
1006065a:	7188      	strb	r0, [r1, #6]
1006065c:	730f      	strb	r7, [r1, #12]
1006065e:	20ff      	movs	r0, #255	@ 0xff
10060660:	7148      	strb	r0, [r1, #5]
10060662:	2082      	movs	r0, #130	@ 0x82
10060664:	7108      	strb	r0, [r1, #4]
10060666:	0a30      	lsrs	r0, r6, #8
10060668:	72c8      	strb	r0, [r1, #11]
1006066a:	4628      	mov	r0, r5
1006066c:	f7f2 fd01 	bl	10053072 <aci_event_fifo_push>
10060670:	4620      	mov	r0, r4
10060672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060674:	2202      	movs	r2, #2
10060676:	701a      	strb	r2, [r3, #0]
10060678:	e794      	b.n	100605a4 <smp_pp1_key_generation_method_selection+0x58>
1006067a:	46c0      	nop			@ (mov r8, r8)

1006067c <__arm_cp.5_0>:
1006067c:	20001140 	.word	0x20001140

10060680 <__arm_cp.5_1>:
10060680:	1006a0e1 	.word	0x1006a0e1

10060684 <__arm_cp.5_2>:
10060684:	200010f4 	.word	0x200010f4

10060688 <__arm_cp.5_3>:
10060688:	200010a4 	.word	0x200010a4

1006068c <smp_pp1_auth_req_field_generate_from_device_config>:
1006068c:	490b      	ldr	r1, [pc, #44]	@ (100606bc <__arm_cp.6_0>)
1006068e:	6809      	ldr	r1, [r1, #0]
10060690:	2230      	movs	r2, #48	@ 0x30
10060692:	5c8a      	ldrb	r2, [r1, r2]
10060694:	2301      	movs	r3, #1
10060696:	4013      	ands	r3, r2
10060698:	3130      	adds	r1, #48	@ 0x30
1006069a:	784a      	ldrb	r2, [r1, #1]
1006069c:	07d2      	lsls	r2, r2, #31
1006069e:	0f52      	lsrs	r2, r2, #29
100606a0:	18d2      	adds	r2, r2, r3
100606a2:	78cb      	ldrb	r3, [r1, #3]
100606a4:	07db      	lsls	r3, r3, #31
100606a6:	0edb      	lsrs	r3, r3, #27
100606a8:	18d2      	adds	r2, r2, r3
100606aa:	7889      	ldrb	r1, [r1, #2]
100606ac:	084b      	lsrs	r3, r1, #1
100606ae:	430b      	orrs	r3, r1
100606b0:	07d9      	lsls	r1, r3, #31
100606b2:	0f09      	lsrs	r1, r1, #28
100606b4:	1851      	adds	r1, r2, r1
100606b6:	7001      	strb	r1, [r0, #0]
100606b8:	4770      	bx	lr
100606ba:	46c0      	nop			@ (mov r8, r8)

100606bc <__arm_cp.6_0>:
100606bc:	20001140 	.word	0x20001140

100606c0 <smp_pp1_hndl_pairing_response_mode_through_event>:
100606c0:	b570      	push	{r4, r5, r6, lr}
100606c2:	4605      	mov	r5, r0
100606c4:	8900      	ldrh	r0, [r0, #8]
100606c6:	f001 fd6a 	bl	1006219e <smp_sap_check_is_peer_device_bonded>
100606ca:	4246      	negs	r6, r0
100606cc:	4146      	adcs	r6, r0
100606ce:	491b      	ldr	r1, [pc, #108]	@ (1006073c <__arm_cp.8_0>)
100606d0:	6809      	ldr	r1, [r1, #0]
100606d2:	223c      	movs	r2, #60	@ 0x3c
100606d4:	5c89      	ldrb	r1, [r1, r2]
100606d6:	2902      	cmp	r1, #2
100606d8:	d004      	beq.n	100606e4 <smp_pp1_hndl_pairing_response_mode_through_event+0x24>
100606da:	2400      	movs	r4, #0
100606dc:	2901      	cmp	r1, #1
100606de:	d12a      	bne.n	10060736 <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
100606e0:	2800      	cmp	r0, #0
100606e2:	d128      	bne.n	10060736 <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
100606e4:	2008      	movs	r0, #8
100606e6:	4301      	orrs	r1, r0
100606e8:	75a9      	strb	r1, [r5, #22]
100606ea:	4815      	ldr	r0, [pc, #84]	@ (10060740 <__arm_cp.8_1>)
100606ec:	6800      	ldr	r0, [r0, #0]
100606ee:	214e      	movs	r1, #78	@ 0x4e
100606f0:	5c40      	ldrb	r0, [r0, r1]
100606f2:	2401      	movs	r4, #1
100606f4:	0780      	lsls	r0, r0, #30
100606f6:	d51e      	bpl.n	10060736 <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
100606f8:	892d      	ldrh	r5, [r5, #8]
100606fa:	4812      	ldr	r0, [pc, #72]	@ (10060744 <__arm_cp.8_2>)
100606fc:	6800      	ldr	r0, [r0, #0]
100606fe:	6980      	ldr	r0, [r0, #24]
10060700:	2102      	movs	r1, #2
10060702:	224b      	movs	r2, #75	@ 0x4b
10060704:	2303      	movs	r3, #3
10060706:	f7f2 fc17 	bl	10052f38 <aci_event_fifo_push_header>
1006070a:	2800      	cmp	r0, #0
1006070c:	d013      	beq.n	10060736 <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
1006070e:	4601      	mov	r1, r0
10060710:	7285      	strb	r5, [r0, #10]
10060712:	2004      	movs	r0, #4
10060714:	7248      	strb	r0, [r1, #9]
10060716:	200b      	movs	r0, #11
10060718:	7208      	strb	r0, [r1, #8]
1006071a:	2000      	movs	r0, #0
1006071c:	71c8      	strb	r0, [r1, #7]
1006071e:	2005      	movs	r0, #5
10060720:	7188      	strb	r0, [r1, #6]
10060722:	730e      	strb	r6, [r1, #12]
10060724:	20ff      	movs	r0, #255	@ 0xff
10060726:	7148      	strb	r0, [r1, #5]
10060728:	2082      	movs	r0, #130	@ 0x82
1006072a:	7108      	strb	r0, [r1, #4]
1006072c:	0a28      	lsrs	r0, r5, #8
1006072e:	72c8      	strb	r0, [r1, #11]
10060730:	2002      	movs	r0, #2
10060732:	f7f2 fc9e 	bl	10053072 <aci_event_fifo_push>
10060736:	4620      	mov	r0, r4
10060738:	bd70      	pop	{r4, r5, r6, pc}
1006073a:	46c0      	nop			@ (mov r8, r8)

1006073c <__arm_cp.8_0>:
1006073c:	20001140 	.word	0x20001140

10060740 <__arm_cp.8_1>:
10060740:	200010f4 	.word	0x200010f4

10060744 <__arm_cp.8_2>:
10060744:	200010a4 	.word	0x200010a4

10060748 <smp_pp1_pairing_packet_build>:
10060748:	b510      	push	{r4, lr}
1006074a:	2407      	movs	r4, #7
1006074c:	8044      	strh	r4, [r0, #2]
1006074e:	6844      	ldr	r4, [r0, #4]
10060750:	7221      	strb	r1, [r4, #8]
10060752:	490b      	ldr	r1, [pc, #44]	@ (10060780 <__arm_cp.9_0>)
10060754:	6809      	ldr	r1, [r1, #0]
10060756:	2440      	movs	r4, #64	@ 0x40
10060758:	5d09      	ldrb	r1, [r1, r4]
1006075a:	6844      	ldr	r4, [r0, #4]
1006075c:	7261      	strb	r1, [r4, #9]
1006075e:	2101      	movs	r1, #1
10060760:	4011      	ands	r1, r2
10060762:	6842      	ldr	r2, [r0, #4]
10060764:	7291      	strb	r1, [r2, #10]
10060766:	6841      	ldr	r1, [r0, #4]
10060768:	72cb      	strb	r3, [r1, #11]
1006076a:	6841      	ldr	r1, [r0, #4]
1006076c:	9a02      	ldr	r2, [sp, #8]
1006076e:	730a      	strb	r2, [r1, #12]
10060770:	6841      	ldr	r1, [r0, #4]
10060772:	9a03      	ldr	r2, [sp, #12]
10060774:	734a      	strb	r2, [r1, #13]
10060776:	6840      	ldr	r0, [r0, #4]
10060778:	9904      	ldr	r1, [sp, #16]
1006077a:	7381      	strb	r1, [r0, #14]
1006077c:	bd10      	pop	{r4, pc}
1006077e:	46c0      	nop			@ (mov r8, r8)

10060780 <__arm_cp.9_0>:
10060780:	20001140 	.word	0x20001140

10060784 <le4ByteToInt32>:
10060784:	7801      	ldrb	r1, [r0, #0]
10060786:	7842      	ldrb	r2, [r0, #1]
10060788:	0212      	lsls	r2, r2, #8
1006078a:	1851      	adds	r1, r2, r1
1006078c:	7882      	ldrb	r2, [r0, #2]
1006078e:	0412      	lsls	r2, r2, #16
10060790:	1889      	adds	r1, r1, r2
10060792:	78c0      	ldrb	r0, [r0, #3]
10060794:	0600      	lsls	r0, r0, #24
10060796:	1808      	adds	r0, r1, r0
10060798:	4770      	bx	lr
	...

1006079c <aci_gap_numeric_comparison_value_event_push>:
1006079c:	b5b0      	push	{r4, r5, r7, lr}
1006079e:	460d      	mov	r5, r1
100607a0:	4604      	mov	r4, r0
100607a2:	4815      	ldr	r0, [pc, #84]	@ (100607f8 <__arm_cp.6_0>)
100607a4:	6800      	ldr	r0, [r0, #0]
100607a6:	214f      	movs	r1, #79	@ 0x4f
100607a8:	5c40      	ldrb	r0, [r0, r1]
100607aa:	0680      	lsls	r0, r0, #26
100607ac:	d523      	bpl.n	100607f6 <aci_gap_numeric_comparison_value_event_push+0x5a>
100607ae:	4813      	ldr	r0, [pc, #76]	@ (100607fc <__arm_cp.6_1>)
100607b0:	6800      	ldr	r0, [r0, #0]
100607b2:	6980      	ldr	r0, [r0, #24]
100607b4:	2102      	movs	r1, #2
100607b6:	2249      	movs	r2, #73	@ 0x49
100607b8:	2303      	movs	r3, #3
100607ba:	f7f2 fbbd 	bl	10052f38 <aci_event_fifo_push_header>
100607be:	2800      	cmp	r0, #0
100607c0:	d019      	beq.n	100607f6 <aci_gap_numeric_comparison_value_event_push+0x5a>
100607c2:	4601      	mov	r1, r0
100607c4:	7305      	strb	r5, [r0, #12]
100607c6:	7284      	strb	r4, [r0, #10]
100607c8:	2004      	movs	r0, #4
100607ca:	7248      	strb	r0, [r1, #9]
100607cc:	2009      	movs	r0, #9
100607ce:	7208      	strb	r0, [r1, #8]
100607d0:	2000      	movs	r0, #0
100607d2:	71c8      	strb	r0, [r1, #7]
100607d4:	2008      	movs	r0, #8
100607d6:	7188      	strb	r0, [r1, #6]
100607d8:	20ff      	movs	r0, #255	@ 0xff
100607da:	7148      	strb	r0, [r1, #5]
100607dc:	2082      	movs	r0, #130	@ 0x82
100607de:	7108      	strb	r0, [r1, #4]
100607e0:	0e28      	lsrs	r0, r5, #24
100607e2:	73c8      	strb	r0, [r1, #15]
100607e4:	0c28      	lsrs	r0, r5, #16
100607e6:	7388      	strb	r0, [r1, #14]
100607e8:	0a28      	lsrs	r0, r5, #8
100607ea:	7348      	strb	r0, [r1, #13]
100607ec:	0a20      	lsrs	r0, r4, #8
100607ee:	72c8      	strb	r0, [r1, #11]
100607f0:	2002      	movs	r0, #2
100607f2:	f7f2 fc3e 	bl	10053072 <aci_event_fifo_push>
100607f6:	bdb0      	pop	{r4, r5, r7, pc}

100607f8 <__arm_cp.6_0>:
100607f8:	200010f4 	.word	0x200010f4

100607fc <__arm_cp.6_1>:
100607fc:	200010a4 	.word	0x200010a4

10060800 <smp_pp2_per_auth_stage1_start_excerpt_scp>:
10060800:	b580      	push	{r7, lr}
10060802:	4601      	mov	r1, r0
10060804:	7cc0      	ldrb	r0, [r0, #19]
10060806:	1e40      	subs	r0, r0, #1
10060808:	2803      	cmp	r0, #3
1006080a:	d812      	bhi.n	10060832 <smp_pp2_per_auth_stage1_start_excerpt_scp+0x32>
1006080c:	4478      	add	r0, pc
1006080e:	7900      	ldrb	r0, [r0, #4]
10060810:	0040      	lsls	r0, r0, #1
10060812:	4487      	add	pc, r0
10060814:	010b0501 	.word	0x010b0501
10060818:	2000      	movs	r0, #0
1006081a:	f000 f80b 	bl	10060834 <smp_pp2_per_rx_process_pairing_confirm>
1006081e:	bd80      	pop	{r7, pc}
10060820:	20b5      	movs	r0, #181	@ 0xb5
10060822:	7288      	strb	r0, [r1, #10]
10060824:	7ec8      	ldrb	r0, [r1, #27]
10060826:	1c40      	adds	r0, r0, #1
10060828:	76c8      	strb	r0, [r1, #27]
1006082a:	bd80      	pop	{r7, pc}
1006082c:	4608      	mov	r0, r1
1006082e:	f000 fbcb 	bl	10060fc8 <smp_scp_oob_confirm_receive_verify>
10060832:	bd80      	pop	{r7, pc}

10060834 <smp_pp2_per_rx_process_pairing_confirm>:
10060834:	b5f0      	push	{r4, r5, r6, r7, lr}
10060836:	b089      	sub	sp, #36	@ 0x24
10060838:	460c      	mov	r4, r1
1006083a:	4607      	mov	r7, r0
1006083c:	8909      	ldrh	r1, [r1, #8]
1006083e:	2500      	movs	r5, #0
10060840:	2215      	movs	r2, #21
10060842:	4628      	mov	r0, r5
10060844:	f7f2 f994 	bl	10052b70 <ACL_pkt_get>
10060848:	2800      	cmp	r0, #0
1006084a:	d013      	beq.n	10060874 <smp_pp2_per_rx_process_pairing_confirm+0x40>
1006084c:	4606      	mov	r6, r0
1006084e:	2f00      	cmp	r7, #0
10060850:	d006      	beq.n	10060860 <smp_pp2_per_rx_process_pairing_confirm+0x2c>
10060852:	4623      	mov	r3, r4
10060854:	3328      	adds	r3, #40	@ 0x28
10060856:	2105      	movs	r1, #5
10060858:	2210      	movs	r2, #16
1006085a:	4638      	mov	r0, r7
1006085c:	f7f2 f9c6 	bl	10052bec <ACL_pkt_read>
10060860:	7de0      	ldrb	r0, [r4, #23]
10060862:	0700      	lsls	r0, r0, #28
10060864:	d408      	bmi.n	10060878 <smp_pp2_per_rx_process_pairing_confirm+0x44>
10060866:	4621      	mov	r1, r4
10060868:	3148      	adds	r1, #72	@ 0x48
1006086a:	aa05      	add	r2, sp, #20
1006086c:	4620      	mov	r0, r4
1006086e:	f000 f89b 	bl	100609a8 <smp_pp2_per_lep_confirm_value_compute>
10060872:	e007      	b.n	10060884 <smp_pp2_per_rx_process_pairing_confirm+0x50>
10060874:	2088      	movs	r0, #136	@ 0x88
10060876:	e019      	b.n	100608ac <smp_pp2_per_rx_process_pairing_confirm+0x78>
10060878:	a805      	add	r0, sp, #20
1006087a:	9002      	str	r0, [sp, #8]
1006087c:	9401      	str	r4, [sp, #4]
1006087e:	a801      	add	r0, sp, #4
10060880:	f7f1 f8c3 	bl	10051a0a <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg>
10060884:	2011      	movs	r0, #17
10060886:	8070      	strh	r0, [r6, #2]
10060888:	6870      	ldr	r0, [r6, #4]
1006088a:	2103      	movs	r1, #3
1006088c:	7201      	strb	r1, [r0, #8]
1006088e:	2105      	movs	r1, #5
10060890:	2210      	movs	r2, #16
10060892:	ab05      	add	r3, sp, #20
10060894:	4630      	mov	r0, r6
10060896:	f7f2 f9cb 	bl	10052c30 <ACL_pkt_write>
1006089a:	4620      	mov	r0, r4
1006089c:	4631      	mov	r1, r6
1006089e:	f005 fcd5 	bl	1006624c <smp_dep_l2c_send_acl_packet>
100608a2:	2800      	cmp	r0, #0
100608a4:	d102      	bne.n	100608ac <smp_pp2_per_rx_process_pairing_confirm+0x78>
100608a6:	20b6      	movs	r0, #182	@ 0xb6
100608a8:	72a0      	strb	r0, [r4, #10]
100608aa:	4628      	mov	r0, r5
100608ac:	b009      	add	sp, #36	@ 0x24
100608ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

100608b0 <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp>:
100608b0:	b51c      	push	{r2, r3, r4, lr}
100608b2:	6802      	ldr	r2, [r0, #0]
100608b4:	6840      	ldr	r0, [r0, #4]
100608b6:	7cd1      	ldrb	r1, [r2, #19]
100608b8:	2902      	cmp	r1, #2
100608ba:	d10b      	bne.n	100608d4 <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp+0x24>
100608bc:	7ed1      	ldrb	r1, [r2, #27]
100608be:	1e4b      	subs	r3, r1, #1
100608c0:	490a      	ldr	r1, [pc, #40]	@ (100608ec <__arm_cp.13_0>)
100608c2:	6809      	ldr	r1, [r1, #0]
100608c4:	6b8c      	ldr	r4, [r1, #56]	@ 0x38
100608c6:	40dc      	lsrs	r4, r3
100608c8:	2301      	movs	r3, #1
100608ca:	4023      	ands	r3, r4
100608cc:	247f      	movs	r4, #127	@ 0x7f
100608ce:	43e4      	mvns	r4, r4
100608d0:	191b      	adds	r3, r3, r4
100608d2:	e002      	b.n	100608da <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp+0x2a>
100608d4:	4905      	ldr	r1, [pc, #20]	@ (100608ec <__arm_cp.13_0>)
100608d6:	6809      	ldr	r1, [r1, #0]
100608d8:	2300      	movs	r3, #0
100608da:	9000      	str	r0, [sp, #0]
100608dc:	4608      	mov	r0, r1
100608de:	3064      	adds	r0, #100	@ 0x64
100608e0:	31e4      	adds	r1, #228	@ 0xe4
100608e2:	3248      	adds	r2, #72	@ 0x48
100608e4:	b2db      	uxtb	r3, r3
100608e6:	f7ff fbbd 	bl	10060064 <smp_crt_f4_generate_confirm>
100608ea:	bd1c      	pop	{r2, r3, r4, pc}

100608ec <__arm_cp.13_0>:
100608ec:	20001140 	.word	0x20001140

100608f0 <smp_pp2_per_rx_process_pairing_random_excerpt_scp>:
100608f0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100608f2:	c8b0      	ldmia	r0!, {r4, r5, r7}
100608f4:	6806      	ldr	r6, [r0, #0]
100608f6:	20ba      	movs	r0, #186	@ 0xba
100608f8:	7030      	strb	r0, [r6, #0]
100608fa:	2000      	movs	r0, #0
100608fc:	6038      	str	r0, [r7, #0]
100608fe:	7ce0      	ldrb	r0, [r4, #19]
10060900:	2802      	cmp	r0, #2
10060902:	d01a      	beq.n	1006093a <smp_pp2_per_rx_process_pairing_random_excerpt_scp+0x4a>
10060904:	2804      	cmp	r0, #4
10060906:	d137      	bne.n	10060978 <smp_pp2_per_rx_process_pairing_random_excerpt_scp+0x88>
10060908:	481c      	ldr	r0, [pc, #112]	@ (1006097c <__arm_cp.14_0>)
1006090a:	6801      	ldr	r1, [r0, #0]
1006090c:	ad02      	add	r5, sp, #8
1006090e:	9500      	str	r5, [sp, #0]
10060910:	4622      	mov	r2, r4
10060912:	3238      	adds	r2, #56	@ 0x38
10060914:	4623      	mov	r3, r4
10060916:	3348      	adds	r3, #72	@ 0x48
10060918:	4608      	mov	r0, r1
1006091a:	30e4      	adds	r0, #228	@ 0xe4
1006091c:	3164      	adds	r1, #100	@ 0x64
1006091e:	f7ff fc8b 	bl	10060238 <smp_crt_g2_generate_num_comp_val>
10060922:	20c1      	movs	r0, #193	@ 0xc1
10060924:	7030      	strb	r0, [r6, #0]
10060926:	4628      	mov	r0, r5
10060928:	f7ff ff2c 	bl	10060784 <le4ByteToInt32>
1006092c:	4914      	ldr	r1, [pc, #80]	@ (10060980 <__arm_cp.14_1>)
1006092e:	f7e0 fd11 	bl	10041354 <__aeabi_uidivmod>
10060932:	8920      	ldrh	r0, [r4, #8]
10060934:	f7ff ff32 	bl	1006079c <aci_gap_numeric_comparison_value_event_push>
10060938:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006093a:	4810      	ldr	r0, [pc, #64]	@ (1006097c <__arm_cp.14_0>)
1006093c:	6801      	ldr	r1, [r0, #0]
1006093e:	6b88      	ldr	r0, [r1, #56]	@ 0x38
10060940:	7ee2      	ldrb	r2, [r4, #27]
10060942:	9201      	str	r2, [sp, #4]
10060944:	9500      	str	r5, [sp, #0]
10060946:	1e52      	subs	r2, r2, #1
10060948:	40d0      	lsrs	r0, r2
1006094a:	2280      	movs	r2, #128	@ 0x80
1006094c:	4302      	orrs	r2, r0
1006094e:	2381      	movs	r3, #129	@ 0x81
10060950:	4013      	ands	r3, r2
10060952:	4622      	mov	r2, r4
10060954:	3238      	adds	r2, #56	@ 0x38
10060956:	4608      	mov	r0, r1
10060958:	30e4      	adds	r0, #228	@ 0xe4
1006095a:	3164      	adds	r1, #100	@ 0x64
1006095c:	f7ff fb82 	bl	10060064 <smp_crt_f4_generate_confirm>
10060960:	3428      	adds	r4, #40	@ 0x28
10060962:	2210      	movs	r2, #16
10060964:	4628      	mov	r0, r5
10060966:	4621      	mov	r1, r4
10060968:	f7e5 fb94 	bl	10046094 <BLEPLAT_MemCmp>
1006096c:	6038      	str	r0, [r7, #0]
1006096e:	9801      	ldr	r0, [sp, #4]
10060970:	2813      	cmp	r0, #19
10060972:	d801      	bhi.n	10060978 <smp_pp2_per_rx_process_pairing_random_excerpt_scp+0x88>
10060974:	20b4      	movs	r0, #180	@ 0xb4
10060976:	7030      	strb	r0, [r6, #0]
10060978:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006097a:	46c0      	nop			@ (mov r8, r8)

1006097c <__arm_cp.14_0>:
1006097c:	20001140 	.word	0x20001140

10060980 <__arm_cp.14_1>:
10060980:	000f4240 	.word	0x000f4240

10060984 <smp_pp2_per_auth_stage_1_start>:
10060984:	b510      	push	{r4, lr}
10060986:	4604      	mov	r4, r0
10060988:	3048      	adds	r0, #72	@ 0x48
1006098a:	2110      	movs	r1, #16
1006098c:	2200      	movs	r2, #0
1006098e:	f002 f8b7 	bl	10062b00 <HAL_Generate_Random_Bytes_To>
10060992:	7de0      	ldrb	r0, [r4, #23]
10060994:	0700      	lsls	r0, r0, #28
10060996:	d402      	bmi.n	1006099e <smp_pp2_per_auth_stage_1_start+0x1a>
10060998:	20b5      	movs	r0, #181	@ 0xb5
1006099a:	72a0      	strb	r0, [r4, #10]
1006099c:	bd10      	pop	{r4, pc}
1006099e:	4620      	mov	r0, r4
100609a0:	f7f1 f827 	bl	100519f2 <smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg>
100609a4:	bd10      	pop	{r4, pc}
	...

100609a8 <smp_pp2_per_lep_confirm_value_compute>:
100609a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100609aa:	b09b      	sub	sp, #108	@ 0x6c
100609ac:	4614      	mov	r4, r2
100609ae:	9106      	str	r1, [sp, #24]
100609b0:	4606      	mov	r6, r0
100609b2:	af0f      	add	r7, sp, #60	@ 0x3c
100609b4:	2500      	movs	r5, #0
100609b6:	222e      	movs	r2, #46	@ 0x2e
100609b8:	4638      	mov	r0, r7
100609ba:	4629      	mov	r1, r5
100609bc:	f7e5 fb5a 	bl	10046074 <BLEPLAT_MemSet>
100609c0:	3710      	adds	r7, #16
100609c2:	2210      	movs	r2, #16
100609c4:	4638      	mov	r0, r7
100609c6:	9906      	ldr	r1, [sp, #24]
100609c8:	f7e5 fb44 	bl	10046054 <BLEPLAT_MemCpy>
100609cc:	7cf0      	ldrb	r0, [r6, #19]
100609ce:	2803      	cmp	r0, #3
100609d0:	d00d      	beq.n	100609ee <smp_pp2_per_lep_confirm_value_compute+0x46>
100609d2:	2802      	cmp	r0, #2
100609d4:	d112      	bne.n	100609fc <smp_pp2_per_lep_confirm_value_compute+0x54>
100609d6:	4842      	ldr	r0, [pc, #264]	@ (10060ae0 <__arm_cp.16_0>)
100609d8:	6800      	ldr	r0, [r0, #0]
100609da:	6b80      	ldr	r0, [r0, #56]	@ 0x38
100609dc:	a90f      	add	r1, sp, #60	@ 0x3c
100609de:	7008      	strb	r0, [r1, #0]
100609e0:	0a02      	lsrs	r2, r0, #8
100609e2:	704a      	strb	r2, [r1, #1]
100609e4:	0c02      	lsrs	r2, r0, #16
100609e6:	708a      	strb	r2, [r1, #2]
100609e8:	0e00      	lsrs	r0, r0, #24
100609ea:	70c8      	strb	r0, [r1, #3]
100609ec:	e006      	b.n	100609fc <smp_pp2_per_lep_confirm_value_compute+0x54>
100609ee:	483c      	ldr	r0, [pc, #240]	@ (10060ae0 <__arm_cp.16_0>)
100609f0:	6801      	ldr	r1, [r0, #0]
100609f2:	3144      	adds	r1, #68	@ 0x44
100609f4:	a80f      	add	r0, sp, #60	@ 0x3c
100609f6:	2210      	movs	r2, #16
100609f8:	f7e5 fb2c 	bl	10046054 <BLEPLAT_MemCpy>
100609fc:	7d30      	ldrb	r0, [r6, #20]
100609fe:	2101      	movs	r1, #1
10060a00:	9106      	str	r1, [sp, #24]
10060a02:	f7ff fd1b 	bl	1006043c <smp_pp1_get_pairing_pdu_offset>
10060a06:	9003      	str	r0, [sp, #12]
10060a08:	7d30      	ldrb	r0, [r6, #20]
10060a0a:	4629      	mov	r1, r5
10060a0c:	f7ff fd16 	bl	1006043c <smp_pp1_get_pairing_pdu_offset>
10060a10:	9001      	str	r0, [sp, #4]
10060a12:	af0f      	add	r7, sp, #60	@ 0x3c
10060a14:	4638      	mov	r0, r7
10060a16:	3028      	adds	r0, #40	@ 0x28
10060a18:	4639      	mov	r1, r7
10060a1a:	3127      	adds	r1, #39	@ 0x27
10060a1c:	9102      	str	r1, [sp, #8]
10060a1e:	9005      	str	r0, [sp, #20]
10060a20:	f7f3 fbc4 	bl	100541ac <GAP_get_current_address>
10060a24:	7870      	ldrb	r0, [r6, #1]
10060a26:	2120      	movs	r1, #32
10060a28:	5478      	strb	r0, [r7, r1]
10060a2a:	4638      	mov	r0, r7
10060a2c:	3021      	adds	r0, #33	@ 0x21
10060a2e:	1cb1      	adds	r1, r6, #2
10060a30:	2206      	movs	r2, #6
10060a32:	4b2c      	ldr	r3, [pc, #176]	@ (10060ae4 <__arm_cp.16_1>)
10060a34:	9004      	str	r0, [sp, #16]
10060a36:	4798      	blx	r3
10060a38:	4829      	ldr	r0, [pc, #164]	@ (10060ae0 <__arm_cp.16_0>)
10060a3a:	6800      	ldr	r0, [r0, #0]
10060a3c:	9901      	ldr	r1, [sp, #4]
10060a3e:	1841      	adds	r1, r0, r1
10060a40:	31b4      	adds	r1, #180	@ 0xb4
10060a42:	ae0b      	add	r6, sp, #44	@ 0x2c
10060a44:	4630      	mov	r0, r6
10060a46:	3009      	adds	r0, #9
10060a48:	2207      	movs	r2, #7
10060a4a:	9201      	str	r2, [sp, #4]
10060a4c:	4b25      	ldr	r3, [pc, #148]	@ (10060ae4 <__arm_cp.16_1>)
10060a4e:	4798      	blx	r3
10060a50:	4823      	ldr	r0, [pc, #140]	@ (10060ae0 <__arm_cp.16_0>)
10060a52:	6800      	ldr	r0, [r0, #0]
10060a54:	9903      	ldr	r1, [sp, #12]
10060a56:	1841      	adds	r1, r0, r1
10060a58:	31b4      	adds	r1, #180	@ 0xb4
10060a5a:	1cb0      	adds	r0, r6, #2
10060a5c:	9a01      	ldr	r2, [sp, #4]
10060a5e:	4b21      	ldr	r3, [pc, #132]	@ (10060ae4 <__arm_cp.16_1>)
10060a60:	4798      	blx	r3
10060a62:	1c70      	adds	r0, r6, #1
10060a64:	9902      	ldr	r1, [sp, #8]
10060a66:	9a06      	ldr	r2, [sp, #24]
10060a68:	4b1e      	ldr	r3, [pc, #120]	@ (10060ae4 <__arm_cp.16_1>)
10060a6a:	4798      	blx	r3
10060a6c:	4b1d      	ldr	r3, [pc, #116]	@ (10060ae4 <__arm_cp.16_1>)
10060a6e:	4639      	mov	r1, r7
10060a70:	3120      	adds	r1, #32
10060a72:	4630      	mov	r0, r6
10060a74:	9a06      	ldr	r2, [sp, #24]
10060a76:	4798      	blx	r3
10060a78:	3710      	adds	r7, #16
10060a7a:	2d10      	cmp	r5, #16
10060a7c:	d007      	beq.n	10060a8e <smp_pp2_per_lep_confirm_value_compute+0xe6>
10060a7e:	5d78      	ldrb	r0, [r7, r5]
10060a80:	a90b      	add	r1, sp, #44	@ 0x2c
10060a82:	5d49      	ldrb	r1, [r1, r5]
10060a84:	4041      	eors	r1, r0
10060a86:	a807      	add	r0, sp, #28
10060a88:	5541      	strb	r1, [r0, r5]
10060a8a:	1c6d      	adds	r5, r5, #1
10060a8c:	e7f5      	b.n	10060a7a <smp_pp2_per_lep_confirm_value_compute+0xd2>
10060a8e:	a80f      	add	r0, sp, #60	@ 0x3c
10060a90:	a907      	add	r1, sp, #28
10060a92:	4622      	mov	r2, r4
10060a94:	f7f6 fcd6 	bl	10057444 <hci_le_encrypt>
10060a98:	ae0b      	add	r6, sp, #44	@ 0x2c
10060a9a:	2500      	movs	r5, #0
10060a9c:	2210      	movs	r2, #16
10060a9e:	4630      	mov	r0, r6
10060aa0:	4629      	mov	r1, r5
10060aa2:	f7e5 fae7 	bl	10046074 <BLEPLAT_MemSet>
10060aa6:	2706      	movs	r7, #6
10060aa8:	4630      	mov	r0, r6
10060aaa:	9905      	ldr	r1, [sp, #20]
10060aac:	463a      	mov	r2, r7
10060aae:	f7e5 fad1 	bl	10046054 <BLEPLAT_MemCpy>
10060ab2:	1db0      	adds	r0, r6, #6
10060ab4:	9904      	ldr	r1, [sp, #16]
10060ab6:	463a      	mov	r2, r7
10060ab8:	f7e5 facc 	bl	10046054 <BLEPLAT_MemCpy>
10060abc:	2d10      	cmp	r5, #16
10060abe:	d007      	beq.n	10060ad0 <smp_pp2_per_lep_confirm_value_compute+0x128>
10060ac0:	5d60      	ldrb	r0, [r4, r5]
10060ac2:	a90b      	add	r1, sp, #44	@ 0x2c
10060ac4:	5d49      	ldrb	r1, [r1, r5]
10060ac6:	4041      	eors	r1, r0
10060ac8:	a807      	add	r0, sp, #28
10060aca:	5541      	strb	r1, [r0, r5]
10060acc:	1c6d      	adds	r5, r5, #1
10060ace:	e7f5      	b.n	10060abc <smp_pp2_per_lep_confirm_value_compute+0x114>
10060ad0:	a80f      	add	r0, sp, #60	@ 0x3c
10060ad2:	a907      	add	r1, sp, #28
10060ad4:	4622      	mov	r2, r4
10060ad6:	f7f6 fcb5 	bl	10057444 <hci_le_encrypt>
10060ada:	b01b      	add	sp, #108	@ 0x6c
10060adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10060ade:	46c0      	nop			@ (mov r8, r8)

10060ae0 <__arm_cp.16_0>:
10060ae0:	20001140 	.word	0x20001140

10060ae4 <__arm_cp.16_1>:
10060ae4:	10046055 	.word	0x10046055

10060ae8 <smp_pp2_per_rx_process_pairing_random>:
10060ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
10060aea:	b08b      	sub	sp, #44	@ 0x2c
10060aec:	460d      	mov	r5, r1
10060aee:	4606      	mov	r6, r0
10060af0:	2400      	movs	r4, #0
10060af2:	9402      	str	r4, [sp, #8]
10060af4:	8909      	ldrh	r1, [r1, #8]
10060af6:	2215      	movs	r2, #21
10060af8:	4620      	mov	r0, r4
10060afa:	f7f2 f839 	bl	10052b70 <ACL_pkt_get>
10060afe:	2800      	cmp	r0, #0
10060b00:	d020      	beq.n	10060b44 <smp_pp2_per_rx_process_pairing_random+0x5c>
10060b02:	4607      	mov	r7, r0
10060b04:	462b      	mov	r3, r5
10060b06:	3338      	adds	r3, #56	@ 0x38
10060b08:	2105      	movs	r1, #5
10060b0a:	2210      	movs	r2, #16
10060b0c:	4630      	mov	r0, r6
10060b0e:	461e      	mov	r6, r3
10060b10:	f7f2 f86c 	bl	10052bec <ACL_pkt_read>
10060b14:	7de8      	ldrb	r0, [r5, #23]
10060b16:	0700      	lsls	r0, r0, #28
10060b18:	d416      	bmi.n	10060b48 <smp_pp2_per_rx_process_pairing_random+0x60>
10060b1a:	9400      	str	r4, [sp, #0]
10060b1c:	4634      	mov	r4, r6
10060b1e:	ae03      	add	r6, sp, #12
10060b20:	4628      	mov	r0, r5
10060b22:	4621      	mov	r1, r4
10060b24:	4632      	mov	r2, r6
10060b26:	f7ff ff3f 	bl	100609a8 <smp_pp2_per_lep_confirm_value_compute>
10060b2a:	4629      	mov	r1, r5
10060b2c:	3128      	adds	r1, #40	@ 0x28
10060b2e:	2210      	movs	r2, #16
10060b30:	4630      	mov	r0, r6
10060b32:	4626      	mov	r6, r4
10060b34:	9c00      	ldr	r4, [sp, #0]
10060b36:	f7e5 faad 	bl	10046094 <BLEPLAT_MemCmp>
10060b3a:	a901      	add	r1, sp, #4
10060b3c:	22bc      	movs	r2, #188	@ 0xbc
10060b3e:	700a      	strb	r2, [r1, #0]
10060b40:	9002      	str	r0, [sp, #8]
10060b42:	e00c      	b.n	10060b5e <smp_pp2_per_rx_process_pairing_random+0x76>
10060b44:	2488      	movs	r4, #136	@ 0x88
10060b46:	e05b      	b.n	10060c00 <smp_pp2_per_rx_process_pairing_random+0x118>
10060b48:	a801      	add	r0, sp, #4
10060b4a:	900a      	str	r0, [sp, #40]	@ 0x28
10060b4c:	a802      	add	r0, sp, #8
10060b4e:	9009      	str	r0, [sp, #36]	@ 0x24
10060b50:	a803      	add	r0, sp, #12
10060b52:	9008      	str	r0, [sp, #32]
10060b54:	9507      	str	r5, [sp, #28]
10060b56:	a807      	add	r0, sp, #28
10060b58:	f7f0 ff63 	bl	10051a22 <smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg>
10060b5c:	9802      	ldr	r0, [sp, #8]
10060b5e:	2800      	cmp	r0, #0
10060b60:	d006      	beq.n	10060b70 <smp_pp2_per_rx_process_pairing_random+0x88>
10060b62:	2104      	movs	r1, #4
10060b64:	2301      	movs	r3, #1
10060b66:	4628      	mov	r0, r5
10060b68:	463a      	mov	r2, r7
10060b6a:	f005 fd6b 	bl	10066644 <smp_pp3_pairing_failed_send>
10060b6e:	e01b      	b.n	10060ba8 <smp_pp2_per_rx_process_pairing_random+0xc0>
10060b70:	2011      	movs	r0, #17
10060b72:	8078      	strh	r0, [r7, #2]
10060b74:	6878      	ldr	r0, [r7, #4]
10060b76:	2104      	movs	r1, #4
10060b78:	7201      	strb	r1, [r0, #8]
10060b7a:	462b      	mov	r3, r5
10060b7c:	3348      	adds	r3, #72	@ 0x48
10060b7e:	2105      	movs	r1, #5
10060b80:	2210      	movs	r2, #16
10060b82:	4638      	mov	r0, r7
10060b84:	f7f2 f854 	bl	10052c30 <ACL_pkt_write>
10060b88:	4628      	mov	r0, r5
10060b8a:	4639      	mov	r1, r7
10060b8c:	f005 fb5e 	bl	1006624c <smp_dep_l2c_send_acl_packet>
10060b90:	2800      	cmp	r0, #0
10060b92:	d109      	bne.n	10060ba8 <smp_pp2_per_rx_process_pairing_random+0xc0>
10060b94:	9801      	ldr	r0, [sp, #4]
10060b96:	72a8      	strb	r0, [r5, #10]
10060b98:	481b      	ldr	r0, [pc, #108]	@ (10060c08 <__arm_cp.17_0>)
10060b9a:	6800      	ldr	r0, [r0, #0]
10060b9c:	2135      	movs	r1, #53	@ 0x35
10060b9e:	5c40      	ldrb	r0, [r0, r1]
10060ba0:	7c29      	ldrb	r1, [r5, #16]
10060ba2:	4281      	cmp	r1, r0
10060ba4:	d900      	bls.n	10060ba8 <smp_pp2_per_rx_process_pairing_random+0xc0>
10060ba6:	7428      	strb	r0, [r5, #16]
10060ba8:	9802      	ldr	r0, [sp, #8]
10060baa:	2800      	cmp	r0, #0
10060bac:	d128      	bne.n	10060c00 <smp_pp2_per_rx_process_pairing_random+0x118>
10060bae:	7de8      	ldrb	r0, [r5, #23]
10060bb0:	0700      	lsls	r0, r0, #28
10060bb2:	d425      	bmi.n	10060c00 <smp_pp2_per_rx_process_pairing_random+0x118>
10060bb4:	a807      	add	r0, sp, #28
10060bb6:	2400      	movs	r4, #0
10060bb8:	2210      	movs	r2, #16
10060bba:	4621      	mov	r1, r4
10060bbc:	f7e5 fa5a 	bl	10046074 <BLEPLAT_MemSet>
10060bc0:	7ce8      	ldrb	r0, [r5, #19]
10060bc2:	2803      	cmp	r0, #3
10060bc4:	d00d      	beq.n	10060be2 <smp_pp2_per_rx_process_pairing_random+0xfa>
10060bc6:	2802      	cmp	r0, #2
10060bc8:	d112      	bne.n	10060bf0 <smp_pp2_per_rx_process_pairing_random+0x108>
10060bca:	480f      	ldr	r0, [pc, #60]	@ (10060c08 <__arm_cp.17_0>)
10060bcc:	6800      	ldr	r0, [r0, #0]
10060bce:	6b80      	ldr	r0, [r0, #56]	@ 0x38
10060bd0:	a907      	add	r1, sp, #28
10060bd2:	7008      	strb	r0, [r1, #0]
10060bd4:	0a02      	lsrs	r2, r0, #8
10060bd6:	704a      	strb	r2, [r1, #1]
10060bd8:	0c02      	lsrs	r2, r0, #16
10060bda:	708a      	strb	r2, [r1, #2]
10060bdc:	0e00      	lsrs	r0, r0, #24
10060bde:	70c8      	strb	r0, [r1, #3]
10060be0:	e006      	b.n	10060bf0 <smp_pp2_per_rx_process_pairing_random+0x108>
10060be2:	4809      	ldr	r0, [pc, #36]	@ (10060c08 <__arm_cp.17_0>)
10060be4:	6801      	ldr	r1, [r0, #0]
10060be6:	3144      	adds	r1, #68	@ 0x44
10060be8:	a807      	add	r0, sp, #28
10060bea:	2210      	movs	r2, #16
10060bec:	f7e5 fa32 	bl	10046054 <BLEPLAT_MemCpy>
10060bf0:	4629      	mov	r1, r5
10060bf2:	3148      	adds	r1, #72	@ 0x48
10060bf4:	3528      	adds	r5, #40	@ 0x28
10060bf6:	a807      	add	r0, sp, #28
10060bf8:	4632      	mov	r2, r6
10060bfa:	462b      	mov	r3, r5
10060bfc:	f7ff fa0c 	bl	10060018 <smp_crt_s1_generate_stk>
10060c00:	4620      	mov	r0, r4
10060c02:	b00b      	add	sp, #44	@ 0x2c
10060c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
10060c06:	46c0      	nop			@ (mov r8, r8)

10060c08 <__arm_cp.17_0>:
10060c08:	20001140 	.word	0x20001140

10060c0c <smp_get_remote_device_list_index>:
10060c0c:	b5b0      	push	{r4, r5, r7, lr}
10060c0e:	490d      	ldr	r1, [pc, #52]	@ (10060c44 <__arm_cp.0_0>)
10060c10:	6809      	ldr	r1, [r1, #0]
10060c12:	2234      	movs	r2, #52	@ 0x34
10060c14:	5c89      	ldrb	r1, [r1, r2]
10060c16:	2800      	cmp	r0, #0
10060c18:	d011      	beq.n	10060c3e <smp_get_remote_device_list_index+0x32>
10060c1a:	4a0b      	ldr	r2, [pc, #44]	@ (10060c48 <__arm_cp.0_1>)
10060c1c:	6812      	ldr	r2, [r2, #0]
10060c1e:	32a4      	adds	r2, #164	@ 0xa4
10060c20:	2300      	movs	r3, #0
10060c22:	b2dc      	uxtb	r4, r3
10060c24:	428c      	cmp	r4, r1
10060c26:	d20a      	bcs.n	10060c3e <smp_get_remote_device_list_index+0x32>
10060c28:	2570      	movs	r5, #112	@ 0x70
10060c2a:	4365      	muls	r5, r4
10060c2c:	6814      	ldr	r4, [r2, #0]
10060c2e:	1964      	adds	r4, r4, r5
10060c30:	8924      	ldrh	r4, [r4, #8]
10060c32:	4044      	eors	r4, r0
10060c34:	0524      	lsls	r4, r4, #20
10060c36:	d001      	beq.n	10060c3c <smp_get_remote_device_list_index+0x30>
10060c38:	1c5b      	adds	r3, r3, #1
10060c3a:	e7f2      	b.n	10060c22 <smp_get_remote_device_list_index+0x16>
10060c3c:	4619      	mov	r1, r3
10060c3e:	b2c8      	uxtb	r0, r1
10060c40:	bdb0      	pop	{r4, r5, r7, pc}
10060c42:	46c0      	nop			@ (mov r8, r8)

10060c44 <__arm_cp.0_0>:
10060c44:	200010a0 	.word	0x200010a0

10060c48 <__arm_cp.0_1>:
10060c48:	20001140 	.word	0x20001140

10060c4c <smp_get_remote_device_list_item>:
10060c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10060c4e:	4601      	mov	r1, r0
10060c50:	2000      	movs	r0, #0
10060c52:	2900      	cmp	r1, #0
10060c54:	d017      	beq.n	10060c86 <smp_get_remote_device_list_item+0x3a>
10060c56:	4a0c      	ldr	r2, [pc, #48]	@ (10060c88 <__arm_cp.1_0>)
10060c58:	6812      	ldr	r2, [r2, #0]
10060c5a:	2334      	movs	r3, #52	@ 0x34
10060c5c:	5cd3      	ldrb	r3, [r2, r3]
10060c5e:	2270      	movs	r2, #112	@ 0x70
10060c60:	435a      	muls	r2, r3
10060c62:	236f      	movs	r3, #111	@ 0x6f
10060c64:	43dd      	mvns	r5, r3
10060c66:	4b09      	ldr	r3, [pc, #36]	@ (10060c8c <__arm_cp.1_1>)
10060c68:	681b      	ldr	r3, [r3, #0]
10060c6a:	33a4      	adds	r3, #164	@ 0xa4
10060c6c:	462c      	mov	r4, r5
10060c6e:	3470      	adds	r4, #112	@ 0x70
10060c70:	42a2      	cmp	r2, r4
10060c72:	d008      	beq.n	10060c86 <smp_get_remote_device_list_item+0x3a>
10060c74:	681e      	ldr	r6, [r3, #0]
10060c76:	1975      	adds	r5, r6, r5
10060c78:	2778      	movs	r7, #120	@ 0x78
10060c7a:	5bed      	ldrh	r5, [r5, r7]
10060c7c:	404d      	eors	r5, r1
10060c7e:	052d      	lsls	r5, r5, #20
10060c80:	4625      	mov	r5, r4
10060c82:	d1f4      	bne.n	10060c6e <smp_get_remote_device_list_item+0x22>
10060c84:	1930      	adds	r0, r6, r4
10060c86:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060c88 <__arm_cp.1_0>:
10060c88:	200010a0 	.word	0x200010a0

10060c8c <__arm_cp.1_1>:
10060c8c:	20001140 	.word	0x20001140

10060c90 <smp_oob_check_is_remote_data_present>:
10060c90:	b5b0      	push	{r4, r5, r7, lr}
10060c92:	4604      	mov	r4, r0
10060c94:	480b      	ldr	r0, [pc, #44]	@ (10060cc4 <__arm_cp.2_0>)
10060c96:	6800      	ldr	r0, [r0, #0]
10060c98:	21ac      	movs	r1, #172	@ 0xac
10060c9a:	5840      	ldr	r0, [r0, r1]
10060c9c:	7845      	ldrb	r5, [r0, #1]
10060c9e:	1c80      	adds	r0, r0, #2
10060ca0:	1ca1      	adds	r1, r4, #2
10060ca2:	2206      	movs	r2, #6
10060ca4:	f7e5 f9f6 	bl	10046094 <BLEPLAT_MemCmp>
10060ca8:	4601      	mov	r1, r0
10060caa:	2000      	movs	r0, #0
10060cac:	2900      	cmp	r1, #0
10060cae:	d000      	beq.n	10060cb2 <smp_oob_check_is_remote_data_present+0x22>
10060cb0:	bdb0      	pop	{r4, r5, r7, pc}
10060cb2:	7861      	ldrb	r1, [r4, #1]
10060cb4:	428d      	cmp	r5, r1
10060cb6:	d1fb      	bne.n	10060cb0 <smp_oob_check_is_remote_data_present+0x20>
10060cb8:	7b61      	ldrb	r1, [r4, #13]
10060cba:	2001      	movs	r0, #1
10060cbc:	4301      	orrs	r1, r0
10060cbe:	7361      	strb	r1, [r4, #13]
10060cc0:	bdb0      	pop	{r4, r5, r7, pc}
10060cc2:	46c0      	nop			@ (mov r8, r8)

10060cc4 <__arm_cp.2_0>:
10060cc4:	20001140 	.word	0x20001140

10060cc8 <smp_oob_get_remote_data_reference>:
10060cc8:	b5b0      	push	{r4, r5, r7, lr}
10060cca:	461c      	mov	r4, r3
10060ccc:	4615      	mov	r5, r2
10060cce:	2800      	cmp	r0, #0
10060cd0:	d004      	beq.n	10060cdc <smp_oob_get_remote_data_reference+0x14>
10060cd2:	f7ff ffdd 	bl	10060c90 <smp_oob_check_is_remote_data_present>
10060cd6:	2800      	cmp	r0, #0
10060cd8:	d102      	bne.n	10060ce0 <smp_oob_get_remote_data_reference+0x18>
10060cda:	e013      	b.n	10060d04 <smp_oob_get_remote_data_reference+0x3c>
10060cdc:	2900      	cmp	r1, #0
10060cde:	d111      	bne.n	10060d04 <smp_oob_get_remote_data_reference+0x3c>
10060ce0:	2d02      	cmp	r5, #2
10060ce2:	d205      	bcs.n	10060cf0 <smp_oob_get_remote_data_reference+0x28>
10060ce4:	4808      	ldr	r0, [pc, #32]	@ (10060d08 <__arm_cp.3_0>)
10060ce6:	6800      	ldr	r0, [r0, #0]
10060ce8:	21ac      	movs	r1, #172	@ 0xac
10060cea:	5840      	ldr	r0, [r0, r1]
10060cec:	3008      	adds	r0, #8
10060cee:	e006      	b.n	10060cfe <smp_oob_get_remote_data_reference+0x36>
10060cf0:	2d02      	cmp	r5, #2
10060cf2:	d107      	bne.n	10060d04 <smp_oob_get_remote_data_reference+0x3c>
10060cf4:	4804      	ldr	r0, [pc, #16]	@ (10060d08 <__arm_cp.3_0>)
10060cf6:	6800      	ldr	r0, [r0, #0]
10060cf8:	21ac      	movs	r1, #172	@ 0xac
10060cfa:	5840      	ldr	r0, [r0, r1]
10060cfc:	3018      	adds	r0, #24
10060cfe:	6020      	str	r0, [r4, #0]
10060d00:	2000      	movs	r0, #0
10060d02:	bdb0      	pop	{r4, r5, r7, pc}
10060d04:	2012      	movs	r0, #18
10060d06:	bdb0      	pop	{r4, r5, r7, pc}

10060d08 <__arm_cp.3_0>:
10060d08:	20001140 	.word	0x20001140

10060d0c <smp_oob_clear_remote_data_entry>:
10060d0c:	b580      	push	{r7, lr}
10060d0e:	2228      	movs	r2, #40	@ 0x28
10060d10:	4350      	muls	r0, r2
10060d12:	4904      	ldr	r1, [pc, #16]	@ (10060d24 <__arm_cp.4_0>)
10060d14:	6809      	ldr	r1, [r1, #0]
10060d16:	23ac      	movs	r3, #172	@ 0xac
10060d18:	58c9      	ldr	r1, [r1, r3]
10060d1a:	1808      	adds	r0, r1, r0
10060d1c:	2100      	movs	r1, #0
10060d1e:	f7e5 f9a9 	bl	10046074 <BLEPLAT_MemSet>
10060d22:	bd80      	pop	{r7, pc}

10060d24 <__arm_cp.4_0>:
10060d24:	20001140 	.word	0x20001140

10060d28 <smp_scp_init>:
10060d28:	b5b0      	push	{r4, r5, r7, lr}
10060d2a:	2800      	cmp	r0, #0
10060d2c:	d014      	beq.n	10060d58 <smp_scp_init+0x30>
10060d2e:	4d0b      	ldr	r5, [pc, #44]	@ (10060d5c <__arm_cp.0_0>)
10060d30:	6828      	ldr	r0, [r5, #0]
10060d32:	2142      	movs	r1, #66	@ 0x42
10060d34:	5c42      	ldrb	r2, [r0, r1]
10060d36:	2308      	movs	r3, #8
10060d38:	4313      	orrs	r3, r2
10060d3a:	5443      	strb	r3, [r0, r1]
10060d3c:	3064      	adds	r0, #100	@ 0x64
10060d3e:	4908      	ldr	r1, [pc, #32]	@ (10060d60 <__arm_cp.0_1>)
10060d40:	2420      	movs	r4, #32
10060d42:	4622      	mov	r2, r4
10060d44:	f7e5 f986 	bl	10046054 <BLEPLAT_MemCpy>
10060d48:	6828      	ldr	r0, [r5, #0]
10060d4a:	3084      	adds	r0, #132	@ 0x84
10060d4c:	4905      	ldr	r1, [pc, #20]	@ (10060d64 <__arm_cp.0_2>)
10060d4e:	4622      	mov	r2, r4
10060d50:	f7e5 f980 	bl	10046054 <BLEPLAT_MemCpy>
10060d54:	f7f6 fc90 	bl	10057678 <hci_vs_force_local_p256_debug_key_api>
10060d58:	bdb0      	pop	{r4, r5, r7, pc}
10060d5a:	46c0      	nop			@ (mov r8, r8)

10060d5c <__arm_cp.0_0>:
10060d5c:	20001140 	.word	0x20001140

10060d60 <__arm_cp.0_1>:
10060d60:	1006a0fa 	.word	0x1006a0fa

10060d64 <__arm_cp.0_2>:
10060d64:	1006a11a 	.word	0x1006a11a

10060d68 <smp_scp_is_another_sc_pairing_ongoing>:
10060d68:	b570      	push	{r4, r5, r6, lr}
10060d6a:	490d      	ldr	r1, [pc, #52]	@ (10060da0 <__arm_cp.1_0>)
10060d6c:	6809      	ldr	r1, [r1, #0]
10060d6e:	2234      	movs	r2, #52	@ 0x34
10060d70:	5c89      	ldrb	r1, [r1, r2]
10060d72:	2270      	movs	r2, #112	@ 0x70
10060d74:	434a      	muls	r2, r1
10060d76:	490b      	ldr	r1, [pc, #44]	@ (10060da4 <__arm_cp.1_1>)
10060d78:	680b      	ldr	r3, [r1, #0]
10060d7a:	33a4      	adds	r3, #164	@ 0xa4
10060d7c:	2100      	movs	r1, #0
10060d7e:	460c      	mov	r4, r1
10060d80:	42a2      	cmp	r2, r4
10060d82:	d00a      	beq.n	10060d9a <smp_scp_is_another_sc_pairing_ongoing+0x32>
10060d84:	681d      	ldr	r5, [r3, #0]
10060d86:	192d      	adds	r5, r5, r4
10060d88:	7dee      	ldrb	r6, [r5, #23]
10060d8a:	07f6      	lsls	r6, r6, #31
10060d8c:	d002      	beq.n	10060d94 <smp_scp_is_another_sc_pairing_ongoing+0x2c>
10060d8e:	892d      	ldrh	r5, [r5, #8]
10060d90:	4285      	cmp	r5, r0
10060d92:	d101      	bne.n	10060d98 <smp_scp_is_another_sc_pairing_ongoing+0x30>
10060d94:	3470      	adds	r4, #112	@ 0x70
10060d96:	e7f3      	b.n	10060d80 <smp_scp_is_another_sc_pairing_ongoing+0x18>
10060d98:	2101      	movs	r1, #1
10060d9a:	4608      	mov	r0, r1
10060d9c:	bd70      	pop	{r4, r5, r6, pc}
10060d9e:	46c0      	nop			@ (mov r8, r8)

10060da0 <__arm_cp.1_0>:
10060da0:	200010a0 	.word	0x200010a0

10060da4 <__arm_cp.1_1>:
10060da4:	20001140 	.word	0x20001140

10060da8 <smp_scp_continue_on_exclusive_sc_pairing>:
10060da8:	b570      	push	{r4, r5, r6, lr}
10060daa:	4605      	mov	r5, r0
10060dac:	7dc6      	ldrb	r6, [r0, #23]
10060dae:	2400      	movs	r4, #0
10060db0:	0730      	lsls	r0, r6, #28
10060db2:	d510      	bpl.n	10060dd6 <smp_scp_continue_on_exclusive_sc_pairing+0x2e>
10060db4:	8928      	ldrh	r0, [r5, #8]
10060db6:	f7ff ffd7 	bl	10060d68 <smp_scp_is_another_sc_pairing_ongoing>
10060dba:	2800      	cmp	r0, #0
10060dbc:	d001      	beq.n	10060dc2 <smp_scp_continue_on_exclusive_sc_pairing+0x1a>
10060dbe:	2408      	movs	r4, #8
10060dc0:	e009      	b.n	10060dd6 <smp_scp_continue_on_exclusive_sc_pairing+0x2e>
10060dc2:	4806      	ldr	r0, [pc, #24]	@ (10060ddc <__arm_cp.2_0>)
10060dc4:	6800      	ldr	r0, [r0, #0]
10060dc6:	2142      	movs	r1, #66	@ 0x42
10060dc8:	5c42      	ldrb	r2, [r0, r1]
10060dca:	2304      	movs	r3, #4
10060dcc:	4313      	orrs	r3, r2
10060dce:	5443      	strb	r3, [r0, r1]
10060dd0:	2001      	movs	r0, #1
10060dd2:	4306      	orrs	r6, r0
10060dd4:	75ee      	strb	r6, [r5, #23]
10060dd6:	4620      	mov	r0, r4
10060dd8:	bd70      	pop	{r4, r5, r6, pc}
10060dda:	46c0      	nop			@ (mov r8, r8)

10060ddc <__arm_cp.2_0>:
10060ddc:	20001140 	.word	0x20001140

10060de0 <smp_scp_execute_public_key_generation_request>:
10060de0:	b5b0      	push	{r4, r5, r7, lr}
10060de2:	4d0c      	ldr	r5, [pc, #48]	@ (10060e14 <__arm_cp.3_0>)
10060de4:	6828      	ldr	r0, [r5, #0]
10060de6:	2442      	movs	r4, #66	@ 0x42
10060de8:	5d00      	ldrb	r0, [r0, r4]
10060dea:	2190      	movs	r1, #144	@ 0x90
10060dec:	4208      	tst	r0, r1
10060dee:	d000      	beq.n	10060df2 <smp_scp_execute_public_key_generation_request+0x12>
10060df0:	bdb0      	pop	{r4, r5, r7, pc}
10060df2:	f7f6 fbb5 	bl	10057560 <hci_le_read_local_p256_public_key_api>
10060df6:	2800      	cmp	r0, #0
10060df8:	d005      	beq.n	10060e06 <smp_scp_execute_public_key_generation_request+0x26>
10060dfa:	200d      	movs	r0, #13
10060dfc:	f001 fb5c 	bl	100624b8 <tsk_notify_idx>
10060e00:	f7e2 fe8b 	bl	10043b1a <BLE_STACK_ProcessRequest>
10060e04:	bdb0      	pop	{r4, r5, r7, pc}
10060e06:	6828      	ldr	r0, [r5, #0]
10060e08:	5d01      	ldrb	r1, [r0, r4]
10060e0a:	2280      	movs	r2, #128	@ 0x80
10060e0c:	430a      	orrs	r2, r1
10060e0e:	5502      	strb	r2, [r0, r4]
10060e10:	bdb0      	pop	{r4, r5, r7, pc}
10060e12:	46c0      	nop			@ (mov r8, r8)

10060e14 <__arm_cp.3_0>:
10060e14:	20001140 	.word	0x20001140

10060e18 <smp_scp_set_local_public_key>:
10060e18:	b580      	push	{r7, lr}
10060e1a:	4601      	mov	r1, r0
10060e1c:	4806      	ldr	r0, [pc, #24]	@ (10060e38 <__arm_cp.4_0>)
10060e1e:	6800      	ldr	r0, [r0, #0]
10060e20:	2242      	movs	r2, #66	@ 0x42
10060e22:	5c82      	ldrb	r2, [r0, r2]
10060e24:	0712      	lsls	r2, r2, #28
10060e26:	d404      	bmi.n	10060e32 <smp_scp_set_local_public_key+0x1a>
10060e28:	3064      	adds	r0, #100	@ 0x64
10060e2a:	2240      	movs	r2, #64	@ 0x40
10060e2c:	f7e5 f912 	bl	10046054 <BLEPLAT_MemCpy>
10060e30:	bd80      	pop	{r7, pc}
10060e32:	f7f6 fc21 	bl	10057678 <hci_vs_force_local_p256_debug_key_api>
10060e36:	bd80      	pop	{r7, pc}

10060e38 <__arm_cp.4_0>:
10060e38:	20001140 	.word	0x20001140

10060e3c <smp_scp_public_key_send>:
10060e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060e3e:	4604      	mov	r4, r0
10060e40:	8901      	ldrh	r1, [r0, #8]
10060e42:	2500      	movs	r5, #0
10060e44:	2245      	movs	r2, #69	@ 0x45
10060e46:	4628      	mov	r0, r5
10060e48:	f7f1 fe92 	bl	10052b70 <ACL_pkt_get>
10060e4c:	2800      	cmp	r0, #0
10060e4e:	d014      	beq.n	10060e7a <smp_scp_public_key_send+0x3e>
10060e50:	4606      	mov	r6, r0
10060e52:	2041      	movs	r0, #65	@ 0x41
10060e54:	8070      	strh	r0, [r6, #2]
10060e56:	6870      	ldr	r0, [r6, #4]
10060e58:	210c      	movs	r1, #12
10060e5a:	7201      	strb	r1, [r0, #8]
10060e5c:	4f0f      	ldr	r7, [pc, #60]	@ (10060e9c <__arm_cp.5_0>)
10060e5e:	683b      	ldr	r3, [r7, #0]
10060e60:	3364      	adds	r3, #100	@ 0x64
10060e62:	2105      	movs	r1, #5
10060e64:	2240      	movs	r2, #64	@ 0x40
10060e66:	4630      	mov	r0, r6
10060e68:	f7f1 fee2 	bl	10052c30 <ACL_pkt_write>
10060e6c:	4620      	mov	r0, r4
10060e6e:	4631      	mov	r1, r6
10060e70:	f005 f9ec 	bl	1006624c <smp_dep_l2c_send_acl_packet>
10060e74:	2800      	cmp	r0, #0
10060e76:	d002      	beq.n	10060e7e <smp_scp_public_key_send+0x42>
10060e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060e7a:	2081      	movs	r0, #129	@ 0x81
10060e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060e7e:	7de0      	ldrb	r0, [r4, #23]
10060e80:	2120      	movs	r1, #32
10060e82:	4301      	orrs	r1, r0
10060e84:	75e1      	strb	r1, [r4, #23]
10060e86:	6839      	ldr	r1, [r7, #0]
10060e88:	2242      	movs	r2, #66	@ 0x42
10060e8a:	5c89      	ldrb	r1, [r1, r2]
10060e8c:	0709      	lsls	r1, r1, #28
10060e8e:	d502      	bpl.n	10060e96 <smp_scp_public_key_send+0x5a>
10060e90:	2124      	movs	r1, #36	@ 0x24
10060e92:	4308      	orrs	r0, r1
10060e94:	75e0      	strb	r0, [r4, #23]
10060e96:	4628      	mov	r0, r5
10060e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060e9a:	46c0      	nop			@ (mov r8, r8)

10060e9c <__arm_cp.5_0>:
10060e9c:	20001140 	.word	0x20001140

10060ea0 <smp_scp_public_key_receive>:
10060ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060ea2:	4f2f      	ldr	r7, [pc, #188]	@ (10060f60 <__arm_cp.6_0>)
10060ea4:	683b      	ldr	r3, [r7, #0]
10060ea6:	2442      	movs	r4, #66	@ 0x42
10060ea8:	571a      	ldrsb	r2, [r3, r4]
10060eaa:	2a00      	cmp	r2, #0
10060eac:	d420      	bmi.n	10060ef0 <smp_scp_public_key_receive+0x50>
10060eae:	9100      	str	r1, [sp, #0]
10060eb0:	33e4      	adds	r3, #228	@ 0xe4
10060eb2:	2105      	movs	r1, #5
10060eb4:	2240      	movs	r2, #64	@ 0x40
10060eb6:	f7f1 fe99 	bl	10052bec <ACL_pkt_read>
10060eba:	6839      	ldr	r1, [r7, #0]
10060ebc:	4608      	mov	r0, r1
10060ebe:	3064      	adds	r0, #100	@ 0x64
10060ec0:	31e4      	adds	r1, #228	@ 0xe4
10060ec2:	2520      	movs	r5, #32
10060ec4:	462a      	mov	r2, r5
10060ec6:	f7e5 f8e5 	bl	10046094 <BLEPLAT_MemCmp>
10060eca:	4606      	mov	r6, r0
10060ecc:	6838      	ldr	r0, [r7, #0]
10060ece:	3064      	adds	r0, #100	@ 0x64
10060ed0:	4924      	ldr	r1, [pc, #144]	@ (10060f64 <__arm_cp.6_1>)
10060ed2:	462a      	mov	r2, r5
10060ed4:	f7e5 f8de 	bl	10046094 <BLEPLAT_MemCmp>
10060ed8:	2e00      	cmp	r6, #0
10060eda:	d10b      	bne.n	10060ef4 <smp_scp_public_key_receive+0x54>
10060edc:	2800      	cmp	r0, #0
10060ede:	d009      	beq.n	10060ef4 <smp_scp_public_key_receive+0x54>
10060ee0:	2108      	movs	r1, #8
10060ee2:	2500      	movs	r5, #0
10060ee4:	2301      	movs	r3, #1
10060ee6:	9800      	ldr	r0, [sp, #0]
10060ee8:	462a      	mov	r2, r5
10060eea:	f005 fbab 	bl	10066644 <smp_pp3_pairing_failed_send>
10060eee:	e007      	b.n	10060f00 <smp_scp_public_key_receive+0x60>
10060ef0:	253a      	movs	r5, #58	@ 0x3a
10060ef2:	e005      	b.n	10060f00 <smp_scp_public_key_receive+0x60>
10060ef4:	6838      	ldr	r0, [r7, #0]
10060ef6:	5d01      	ldrb	r1, [r0, r4]
10060ef8:	22b0      	movs	r2, #176	@ 0xb0
10060efa:	4211      	tst	r1, r2
10060efc:	d002      	beq.n	10060f04 <smp_scp_public_key_receive+0x64>
10060efe:	2538      	movs	r5, #56	@ 0x38
10060f00:	4628      	mov	r0, r5
10060f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060f04:	30e4      	adds	r0, #228	@ 0xe4
10060f06:	f7f6 fb91 	bl	1005762c <hci_le_generate_dhkey_api>
10060f0a:	281f      	cmp	r0, #31
10060f0c:	d0e8      	beq.n	10060ee0 <smp_scp_public_key_receive+0x40>
10060f0e:	4605      	mov	r5, r0
10060f10:	2812      	cmp	r0, #18
10060f12:	d023      	beq.n	10060f5c <smp_scp_public_key_receive+0xbc>
10060f14:	2d00      	cmp	r5, #0
10060f16:	d1f3      	bne.n	10060f00 <smp_scp_public_key_receive+0x60>
10060f18:	6838      	ldr	r0, [r7, #0]
10060f1a:	5d01      	ldrb	r1, [r0, r4]
10060f1c:	2210      	movs	r2, #16
10060f1e:	430a      	orrs	r2, r1
10060f20:	5502      	strb	r2, [r0, r4]
10060f22:	9b00      	ldr	r3, [sp, #0]
10060f24:	7dd9      	ldrb	r1, [r3, #23]
10060f26:	22c0      	movs	r2, #192	@ 0xc0
10060f28:	430a      	orrs	r2, r1
10060f2a:	75da      	strb	r2, [r3, #23]
10060f2c:	30e4      	adds	r0, #228	@ 0xe4
10060f2e:	490d      	ldr	r1, [pc, #52]	@ (10060f64 <__arm_cp.6_1>)
10060f30:	2220      	movs	r2, #32
10060f32:	f7e5 f8af 	bl	10046094 <BLEPLAT_MemCmp>
10060f36:	2500      	movs	r5, #0
10060f38:	2800      	cmp	r0, #0
10060f3a:	d1e1      	bne.n	10060f00 <smp_scp_public_key_receive+0x60>
10060f3c:	2041      	movs	r0, #65	@ 0x41
10060f3e:	0080      	lsls	r0, r0, #2
10060f40:	6839      	ldr	r1, [r7, #0]
10060f42:	1808      	adds	r0, r1, r0
10060f44:	4908      	ldr	r1, [pc, #32]	@ (10060f68 <__arm_cp.6_2>)
10060f46:	2220      	movs	r2, #32
10060f48:	f7e5 f8a4 	bl	10046094 <BLEPLAT_MemCmp>
10060f4c:	2800      	cmp	r0, #0
10060f4e:	d1d7      	bne.n	10060f00 <smp_scp_public_key_receive+0x60>
10060f50:	9a00      	ldr	r2, [sp, #0]
10060f52:	7dd0      	ldrb	r0, [r2, #23]
10060f54:	2104      	movs	r1, #4
10060f56:	4301      	orrs	r1, r0
10060f58:	75d1      	strb	r1, [r2, #23]
10060f5a:	e7d1      	b.n	10060f00 <smp_scp_public_key_receive+0x60>
10060f5c:	210b      	movs	r1, #11
10060f5e:	e7c0      	b.n	10060ee2 <smp_scp_public_key_receive+0x42>

10060f60 <__arm_cp.6_0>:
10060f60:	20001140 	.word	0x20001140

10060f64 <__arm_cp.6_1>:
10060f64:	1006a0fa 	.word	0x1006a0fa

10060f68 <__arm_cp.6_2>:
10060f68:	1006a11a 	.word	0x1006a11a

10060f6c <smp_scp_public_key_prepare_and_exchange>:
10060f6c:	b5b0      	push	{r4, r5, r7, lr}
10060f6e:	4604      	mov	r4, r0
10060f70:	4814      	ldr	r0, [pc, #80]	@ (10060fc4 <__arm_cp.7_0>)
10060f72:	6802      	ldr	r2, [r0, #0]
10060f74:	3264      	adds	r2, #100	@ 0x64
10060f76:	2500      	movs	r5, #0
10060f78:	2140      	movs	r1, #64	@ 0x40
10060f7a:	4628      	mov	r0, r5
10060f7c:	f001 fc12 	bl	100627a4 <is_Buffer_All_Set_To>
10060f80:	2800      	cmp	r0, #0
10060f82:	d003      	beq.n	10060f8c <smp_scp_public_key_prepare_and_exchange+0x20>
10060f84:	f7ff ff2c 	bl	10060de0 <smp_scp_execute_public_key_generation_request>
10060f88:	2512      	movs	r5, #18
10060f8a:	e019      	b.n	10060fc0 <smp_scp_public_key_prepare_and_exchange+0x54>
10060f8c:	7de0      	ldrb	r0, [r4, #23]
10060f8e:	2160      	movs	r1, #96	@ 0x60
10060f90:	4602      	mov	r2, r0
10060f92:	400a      	ands	r2, r1
10060f94:	2a60      	cmp	r2, #96	@ 0x60
10060f96:	d013      	beq.n	10060fc0 <smp_scp_public_key_prepare_and_exchange+0x54>
10060f98:	2220      	movs	r2, #32
10060f9a:	4002      	ands	r2, r0
10060f9c:	5c63      	ldrb	r3, [r4, r1]
10060f9e:	2101      	movs	r1, #1
10060fa0:	4019      	ands	r1, r3
10060fa2:	188a      	adds	r2, r1, r2
10060fa4:	d107      	bne.n	10060fb6 <smp_scp_public_key_prepare_and_exchange+0x4a>
10060fa6:	219b      	movs	r1, #155	@ 0x9b
10060fa8:	4008      	ands	r0, r1
10060faa:	75e0      	strb	r0, [r4, #23]
10060fac:	4620      	mov	r0, r4
10060fae:	f7ff ff45 	bl	10060e3c <smp_scp_public_key_send>
10060fb2:	4605      	mov	r5, r0
10060fb4:	e004      	b.n	10060fc0 <smp_scp_public_key_prepare_and_exchange+0x54>
10060fb6:	2584      	movs	r5, #132	@ 0x84
10060fb8:	2900      	cmp	r1, #0
10060fba:	d001      	beq.n	10060fc0 <smp_scp_public_key_prepare_and_exchange+0x54>
10060fbc:	0640      	lsls	r0, r0, #25
10060fbe:	d4f5      	bmi.n	10060fac <smp_scp_public_key_prepare_and_exchange+0x40>
10060fc0:	4628      	mov	r0, r5
10060fc2:	bdb0      	pop	{r4, r5, r7, pc}

10060fc4 <__arm_cp.7_0>:
10060fc4:	20001140 	.word	0x20001140

10060fc8 <smp_scp_oob_confirm_receive_verify>:
10060fc8:	b570      	push	{r4, r5, r6, lr}
10060fca:	b088      	sub	sp, #32
10060fcc:	4604      	mov	r4, r0
10060fce:	f7ff fe5f 	bl	10060c90 <smp_oob_check_is_remote_data_present>
10060fd2:	2801      	cmp	r0, #1
10060fd4:	d124      	bne.n	10061020 <smp_scp_oob_confirm_receive_verify+0x58>
10060fd6:	2500      	movs	r5, #0
10060fd8:	2201      	movs	r2, #1
10060fda:	ab07      	add	r3, sp, #28
10060fdc:	4620      	mov	r0, r4
10060fde:	4629      	mov	r1, r5
10060fe0:	f7ff fe72 	bl	10060cc8 <smp_oob_get_remote_data_reference>
10060fe4:	2202      	movs	r2, #2
10060fe6:	ab06      	add	r3, sp, #24
10060fe8:	4620      	mov	r0, r4
10060fea:	4629      	mov	r1, r5
10060fec:	f7ff fe6c 	bl	10060cc8 <smp_oob_get_remote_data_reference>
10060ff0:	481a      	ldr	r0, [pc, #104]	@ (1006105c <__arm_cp.9_0>)
10060ff2:	6800      	ldr	r0, [r0, #0]
10060ff4:	9a07      	ldr	r2, [sp, #28]
10060ff6:	ae02      	add	r6, sp, #8
10060ff8:	9600      	str	r6, [sp, #0]
10060ffa:	30e4      	adds	r0, #228	@ 0xe4
10060ffc:	4601      	mov	r1, r0
10060ffe:	462b      	mov	r3, r5
10061000:	f7ff f830 	bl	10060064 <smp_crt_f4_generate_confirm>
10061004:	9806      	ldr	r0, [sp, #24]
10061006:	2210      	movs	r2, #16
10061008:	4631      	mov	r1, r6
1006100a:	f7e5 f843 	bl	10046094 <BLEPLAT_MemCmp>
1006100e:	2800      	cmp	r0, #0
10061010:	d006      	beq.n	10061020 <smp_scp_oob_confirm_receive_verify+0x58>
10061012:	2104      	movs	r1, #4
10061014:	2200      	movs	r2, #0
10061016:	2301      	movs	r3, #1
10061018:	4620      	mov	r0, r4
1006101a:	f005 fb13 	bl	10066644 <smp_pp3_pairing_failed_send>
1006101e:	e01a      	b.n	10061056 <smp_scp_oob_confirm_receive_verify+0x8e>
10061020:	7b60      	ldrb	r0, [r4, #13]
10061022:	2103      	movs	r1, #3
10061024:	4001      	ands	r1, r0
10061026:	2901      	cmp	r1, #1
10061028:	d106      	bne.n	10061038 <smp_scp_oob_confirm_receive_verify+0x70>
1006102a:	480c      	ldr	r0, [pc, #48]	@ (1006105c <__arm_cp.9_0>)
1006102c:	6800      	ldr	r0, [r0, #0]
1006102e:	3044      	adds	r0, #68	@ 0x44
10061030:	2100      	movs	r1, #0
10061032:	2210      	movs	r2, #16
10061034:	f7e5 f81e 	bl	10046074 <BLEPLAT_MemSet>
10061038:	2060      	movs	r0, #96	@ 0x60
1006103a:	5c20      	ldrb	r0, [r4, r0]
1006103c:	07c0      	lsls	r0, r0, #31
1006103e:	d001      	beq.n	10061044 <smp_scp_oob_confirm_receive_verify+0x7c>
10061040:	2049      	movs	r0, #73	@ 0x49
10061042:	e000      	b.n	10061046 <smp_scp_oob_confirm_receive_verify+0x7e>
10061044:	2056      	movs	r0, #86	@ 0x56
10061046:	43c0      	mvns	r0, r0
10061048:	72a0      	strb	r0, [r4, #10]
1006104a:	200e      	movs	r0, #14
1006104c:	f001 fa34 	bl	100624b8 <tsk_notify_idx>
10061050:	f7e2 fd63 	bl	10043b1a <BLE_STACK_ProcessRequest>
10061054:	2000      	movs	r0, #0
10061056:	b008      	add	sp, #32
10061058:	bd70      	pop	{r4, r5, r6, pc}
1006105a:	46c0      	nop			@ (mov r8, r8)

1006105c <__arm_cp.9_0>:
1006105c:	20001140 	.word	0x20001140

10061060 <smp_scp_phase_2as2_start>:
10061060:	b5f0      	push	{r4, r5, r6, r7, lr}
10061062:	b095      	sub	sp, #84	@ 0x54
10061064:	4604      	mov	r4, r0
10061066:	4e2c      	ldr	r6, [pc, #176]	@ (10061118 <__arm_cp.10_0>)
10061068:	6830      	ldr	r0, [r6, #0]
1006106a:	2542      	movs	r5, #66	@ 0x42
1006106c:	5d41      	ldrb	r1, [r0, r5]
1006106e:	2230      	movs	r2, #48	@ 0x30
10061070:	400a      	ands	r2, r1
10061072:	2100      	movs	r1, #0
10061074:	2a30      	cmp	r2, #48	@ 0x30
10061076:	d116      	bne.n	100610a6 <smp_scp_phase_2as2_start+0x46>
10061078:	9106      	str	r1, [sp, #24]
1006107a:	2149      	movs	r1, #73	@ 0x49
1006107c:	008f      	lsls	r7, r1, #2
1006107e:	19c1      	adds	r1, r0, r7
10061080:	a807      	add	r0, sp, #28
10061082:	2220      	movs	r2, #32
10061084:	f7e4 ffe6 	bl	10046054 <BLEPLAT_MemCpy>
10061088:	6830      	ldr	r0, [r6, #0]
1006108a:	5d41      	ldrb	r1, [r0, r5]
1006108c:	22cf      	movs	r2, #207	@ 0xcf
1006108e:	400a      	ands	r2, r1
10061090:	5542      	strb	r2, [r0, r5]
10061092:	2060      	movs	r0, #96	@ 0x60
10061094:	5c20      	ldrb	r0, [r4, r0]
10061096:	07c0      	lsls	r0, r0, #31
10061098:	d107      	bne.n	100610aa <smp_scp_phase_2as2_start+0x4a>
1006109a:	a80f      	add	r0, sp, #60	@ 0x3c
1006109c:	9000      	str	r0, [sp, #0]
1006109e:	a914      	add	r1, sp, #80	@ 0x50
100610a0:	aa11      	add	r2, sp, #68	@ 0x44
100610a2:	ab13      	add	r3, sp, #76	@ 0x4c
100610a4:	e006      	b.n	100610b4 <smp_scp_phase_2as2_start+0x54>
100610a6:	4608      	mov	r0, r1
100610a8:	e033      	b.n	10061112 <smp_scp_phase_2as2_start+0xb2>
100610aa:	a811      	add	r0, sp, #68	@ 0x44
100610ac:	9000      	str	r0, [sp, #0]
100610ae:	a913      	add	r1, sp, #76	@ 0x4c
100610b0:	aa0f      	add	r2, sp, #60	@ 0x3c
100610b2:	ab14      	add	r3, sp, #80	@ 0x50
100610b4:	4620      	mov	r0, r4
100610b6:	f000 f831 	bl	1006111c <smp_scp_pp2_as2_set_addresses>
100610ba:	a814      	add	r0, sp, #80	@ 0x50
100610bc:	7803      	ldrb	r3, [r0, #0]
100610be:	a813      	add	r0, sp, #76	@ 0x4c
100610c0:	7800      	ldrb	r0, [r0, #0]
100610c2:	6831      	ldr	r1, [r6, #0]
100610c4:	4622      	mov	r2, r4
100610c6:	3228      	adds	r2, #40	@ 0x28
100610c8:	9204      	str	r2, [sp, #16]
100610ca:	19c9      	adds	r1, r1, r7
100610cc:	9103      	str	r1, [sp, #12]
100610ce:	a90f      	add	r1, sp, #60	@ 0x3c
100610d0:	9102      	str	r1, [sp, #8]
100610d2:	9001      	str	r0, [sp, #4]
100610d4:	a811      	add	r0, sp, #68	@ 0x44
100610d6:	9000      	str	r0, [sp, #0]
100610d8:	4621      	mov	r1, r4
100610da:	3138      	adds	r1, #56	@ 0x38
100610dc:	4622      	mov	r2, r4
100610de:	3248      	adds	r2, #72	@ 0x48
100610e0:	a807      	add	r0, sp, #28
100610e2:	f7fe ffef 	bl	100600c4 <smp_crt_f5_generate_keys>
100610e6:	204d      	movs	r0, #77	@ 0x4d
100610e8:	0080      	lsls	r0, r0, #2
100610ea:	6831      	ldr	r1, [r6, #0]
100610ec:	180a      	adds	r2, r1, r0
100610ee:	2101      	movs	r1, #1
100610f0:	4620      	mov	r0, r4
100610f2:	f000 f829 	bl	10061148 <smp_scp_pp2_as2_dhkey_check_generate>
100610f6:	2800      	cmp	r0, #0
100610f8:	d10b      	bne.n	10061112 <smp_scp_phase_2as2_start+0xb2>
100610fa:	4620      	mov	r0, r4
100610fc:	3060      	adds	r0, #96	@ 0x60
100610fe:	7800      	ldrb	r0, [r0, #0]
10061100:	07c0      	lsls	r0, r0, #31
10061102:	d103      	bne.n	1006110c <smp_scp_phase_2as2_start+0xac>
10061104:	4620      	mov	r0, r4
10061106:	f000 f8d9 	bl	100612bc <smp_scp_pp2_as2_dhkey_check_send>
1006110a:	e002      	b.n	10061112 <smp_scp_phase_2as2_start+0xb2>
1006110c:	20bb      	movs	r0, #187	@ 0xbb
1006110e:	72a0      	strb	r0, [r4, #10]
10061110:	9806      	ldr	r0, [sp, #24]
10061112:	b015      	add	sp, #84	@ 0x54
10061114:	bdf0      	pop	{r4, r5, r6, r7, pc}
10061116:	46c0      	nop			@ (mov r8, r8)

10061118 <__arm_cp.10_0>:
10061118:	20001140 	.word	0x20001140

1006111c <smp_scp_pp2_as2_set_addresses>:
1006111c:	b570      	push	{r4, r5, r6, lr}
1006111e:	461c      	mov	r4, r3
10061120:	4605      	mov	r5, r0
10061122:	2061      	movs	r0, #97	@ 0x61
10061124:	5c28      	ldrb	r0, [r5, r0]
10061126:	7008      	strb	r0, [r1, #0]
10061128:	4629      	mov	r1, r5
1006112a:	3162      	adds	r1, #98	@ 0x62
1006112c:	2606      	movs	r6, #6
1006112e:	4610      	mov	r0, r2
10061130:	4632      	mov	r2, r6
10061132:	f7e4 ff8f 	bl	10046054 <BLEPLAT_MemCpy>
10061136:	7868      	ldrb	r0, [r5, #1]
10061138:	7020      	strb	r0, [r4, #0]
1006113a:	1ca9      	adds	r1, r5, #2
1006113c:	9804      	ldr	r0, [sp, #16]
1006113e:	4632      	mov	r2, r6
10061140:	f7e4 ff88 	bl	10046054 <BLEPLAT_MemCpy>
10061144:	bd70      	pop	{r4, r5, r6, pc}
	...

10061148 <smp_scp_pp2_as2_dhkey_check_generate>:
10061148:	b5f0      	push	{r4, r5, r6, r7, lr}
1006114a:	b095      	sub	sp, #84	@ 0x54
1006114c:	9207      	str	r2, [sp, #28]
1006114e:	460f      	mov	r7, r1
10061150:	4606      	mov	r6, r0
10061152:	a813      	add	r0, sp, #76	@ 0x4c
10061154:	2100      	movs	r1, #0
10061156:	7001      	strb	r1, [r0, #0]
10061158:	a812      	add	r0, sp, #72	@ 0x48
1006115a:	7001      	strb	r1, [r0, #0]
1006115c:	a809      	add	r0, sp, #36	@ 0x24
1006115e:	2210      	movs	r2, #16
10061160:	9108      	str	r1, [sp, #32]
10061162:	f7e4 ff87 	bl	10046074 <BLEPLAT_MemSet>
10061166:	7cf0      	ldrb	r0, [r6, #19]
10061168:	2802      	cmp	r0, #2
1006116a:	d10a      	bne.n	10061182 <smp_scp_pp2_as2_dhkey_check_generate+0x3a>
1006116c:	4852      	ldr	r0, [pc, #328]	@ (100612b8 <__arm_cp.12_0>)
1006116e:	6800      	ldr	r0, [r0, #0]
10061170:	6b80      	ldr	r0, [r0, #56]	@ 0x38
10061172:	a909      	add	r1, sp, #36	@ 0x24
10061174:	7008      	strb	r0, [r1, #0]
10061176:	0a02      	lsrs	r2, r0, #8
10061178:	704a      	strb	r2, [r1, #1]
1006117a:	0c02      	lsrs	r2, r0, #16
1006117c:	708a      	strb	r2, [r1, #2]
1006117e:	0e00      	lsrs	r0, r0, #24
10061180:	70c8      	strb	r0, [r1, #3]
10061182:	2f01      	cmp	r7, #1
10061184:	d121      	bne.n	100611ca <smp_scp_pp2_as2_dhkey_check_generate+0x82>
10061186:	484c      	ldr	r0, [pc, #304]	@ (100612b8 <__arm_cp.12_0>)
10061188:	6804      	ldr	r4, [r0, #0]
1006118a:	2040      	movs	r0, #64	@ 0x40
1006118c:	5c20      	ldrb	r0, [r4, r0]
1006118e:	ad14      	add	r5, sp, #80	@ 0x50
10061190:	7028      	strb	r0, [r5, #0]
10061192:	7b70      	ldrb	r0, [r6, #13]
10061194:	2101      	movs	r1, #1
10061196:	4001      	ands	r1, r0
10061198:	7069      	strb	r1, [r5, #1]
1006119a:	7d30      	ldrb	r0, [r6, #20]
1006119c:	2100      	movs	r1, #0
1006119e:	f7ff f94d 	bl	1006043c <smp_pp1_get_pairing_pdu_offset>
100611a2:	1900      	adds	r0, r0, r4
100611a4:	21b7      	movs	r1, #183	@ 0xb7
100611a6:	5c40      	ldrb	r0, [r0, r1]
100611a8:	70a8      	strb	r0, [r5, #2]
100611aa:	7cf0      	ldrb	r0, [r6, #19]
100611ac:	2803      	cmp	r0, #3
100611ae:	d127      	bne.n	10061200 <smp_scp_pp2_as2_dhkey_check_generate+0xb8>
100611b0:	4630      	mov	r0, r6
100611b2:	f7ff fd6d 	bl	10060c90 <smp_oob_check_is_remote_data_present>
100611b6:	2800      	cmp	r0, #0
100611b8:	d022      	beq.n	10061200 <smp_scp_pp2_as2_dhkey_check_generate+0xb8>
100611ba:	2100      	movs	r1, #0
100611bc:	2201      	movs	r2, #1
100611be:	ab0d      	add	r3, sp, #52	@ 0x34
100611c0:	4630      	mov	r0, r6
100611c2:	f7ff fd81 	bl	10060cc8 <smp_oob_get_remote_data_reference>
100611c6:	990d      	ldr	r1, [sp, #52]	@ 0x34
100611c8:	e016      	b.n	100611f8 <smp_scp_pp2_as2_dhkey_check_generate+0xb0>
100611ca:	7b30      	ldrb	r0, [r6, #12]
100611cc:	ac14      	add	r4, sp, #80	@ 0x50
100611ce:	7020      	strb	r0, [r4, #0]
100611d0:	7b70      	ldrb	r0, [r6, #13]
100611d2:	0780      	lsls	r0, r0, #30
100611d4:	0fc0      	lsrs	r0, r0, #31
100611d6:	7060      	strb	r0, [r4, #1]
100611d8:	7d30      	ldrb	r0, [r6, #20]
100611da:	2101      	movs	r1, #1
100611dc:	f7ff f92e 	bl	1006043c <smp_pp1_get_pairing_pdu_offset>
100611e0:	1cc0      	adds	r0, r0, #3
100611e2:	b2c0      	uxtb	r0, r0
100611e4:	4934      	ldr	r1, [pc, #208]	@ (100612b8 <__arm_cp.12_0>)
100611e6:	6809      	ldr	r1, [r1, #0]
100611e8:	1808      	adds	r0, r1, r0
100611ea:	22b4      	movs	r2, #180	@ 0xb4
100611ec:	5c80      	ldrb	r0, [r0, r2]
100611ee:	70a0      	strb	r0, [r4, #2]
100611f0:	7cf0      	ldrb	r0, [r6, #19]
100611f2:	2803      	cmp	r0, #3
100611f4:	d104      	bne.n	10061200 <smp_scp_pp2_as2_dhkey_check_generate+0xb8>
100611f6:	3144      	adds	r1, #68	@ 0x44
100611f8:	a809      	add	r0, sp, #36	@ 0x24
100611fa:	2210      	movs	r2, #16
100611fc:	f7e4 ff2a 	bl	10046054 <BLEPLAT_MemCpy>
10061200:	2060      	movs	r0, #96	@ 0x60
10061202:	5c31      	ldrb	r1, [r6, r0]
10061204:	2201      	movs	r2, #1
10061206:	4011      	ands	r1, r2
10061208:	2f01      	cmp	r7, #1
1006120a:	d106      	bne.n	1006121a <smp_scp_pp2_as2_dhkey_check_generate+0xd2>
1006120c:	2900      	cmp	r1, #0
1006120e:	d104      	bne.n	1006121a <smp_scp_pp2_as2_dhkey_check_generate+0xd2>
10061210:	4635      	mov	r5, r6
10061212:	3548      	adds	r5, #72	@ 0x48
10061214:	4634      	mov	r4, r6
10061216:	3438      	adds	r4, #56	@ 0x38
10061218:	e01b      	b.n	10061252 <smp_scp_pp2_as2_dhkey_check_generate+0x10a>
1006121a:	1e48      	subs	r0, r1, #1
1006121c:	460c      	mov	r4, r1
1006121e:	4184      	sbcs	r4, r0
10061220:	427b      	negs	r3, r7
10061222:	417b      	adcs	r3, r7
10061224:	4023      	ands	r3, r4
10061226:	d004      	beq.n	10061232 <smp_scp_pp2_as2_dhkey_check_generate+0xea>
10061228:	4635      	mov	r5, r6
1006122a:	3548      	adds	r5, #72	@ 0x48
1006122c:	4634      	mov	r4, r6
1006122e:	3438      	adds	r4, #56	@ 0x38
10061230:	e00b      	b.n	1006124a <smp_scp_pp2_as2_dhkey_check_generate+0x102>
10061232:	4608      	mov	r0, r1
10061234:	4338      	orrs	r0, r7
10061236:	d004      	beq.n	10061242 <smp_scp_pp2_as2_dhkey_check_generate+0xfa>
10061238:	2086      	movs	r0, #134	@ 0x86
1006123a:	2f01      	cmp	r7, #1
1006123c:	d12b      	bne.n	10061296 <smp_scp_pp2_as2_dhkey_check_generate+0x14e>
1006123e:	2900      	cmp	r1, #0
10061240:	d029      	beq.n	10061296 <smp_scp_pp2_as2_dhkey_check_generate+0x14e>
10061242:	4635      	mov	r5, r6
10061244:	3538      	adds	r5, #56	@ 0x38
10061246:	4634      	mov	r4, r6
10061248:	3448      	adds	r4, #72	@ 0x48
1006124a:	2f01      	cmp	r7, #1
1006124c:	d125      	bne.n	1006129a <smp_scp_pp2_as2_dhkey_check_generate+0x152>
1006124e:	2900      	cmp	r1, #0
10061250:	d023      	beq.n	1006129a <smp_scp_pp2_as2_dhkey_check_generate+0x152>
10061252:	a80e      	add	r0, sp, #56	@ 0x38
10061254:	9000      	str	r0, [sp, #0]
10061256:	a913      	add	r1, sp, #76	@ 0x4c
10061258:	aa10      	add	r2, sp, #64	@ 0x40
1006125a:	ab12      	add	r3, sp, #72	@ 0x48
1006125c:	4630      	mov	r0, r6
1006125e:	f7ff ff5d 	bl	1006111c <smp_scp_pp2_as2_set_addresses>
10061262:	9e08      	ldr	r6, [sp, #32]
10061264:	9b07      	ldr	r3, [sp, #28]
10061266:	4814      	ldr	r0, [pc, #80]	@ (100612b8 <__arm_cp.12_0>)
10061268:	6800      	ldr	r0, [r0, #0]
1006126a:	a913      	add	r1, sp, #76	@ 0x4c
1006126c:	7809      	ldrb	r1, [r1, #0]
1006126e:	aa12      	add	r2, sp, #72	@ 0x48
10061270:	7812      	ldrb	r2, [r2, #0]
10061272:	9305      	str	r3, [sp, #20]
10061274:	ab0e      	add	r3, sp, #56	@ 0x38
10061276:	9304      	str	r3, [sp, #16]
10061278:	9203      	str	r2, [sp, #12]
1006127a:	aa10      	add	r2, sp, #64	@ 0x40
1006127c:	9202      	str	r2, [sp, #8]
1006127e:	9101      	str	r1, [sp, #4]
10061280:	a914      	add	r1, sp, #80	@ 0x50
10061282:	9100      	str	r1, [sp, #0]
10061284:	2149      	movs	r1, #73	@ 0x49
10061286:	0089      	lsls	r1, r1, #2
10061288:	1840      	adds	r0, r0, r1
1006128a:	ab09      	add	r3, sp, #36	@ 0x24
1006128c:	4621      	mov	r1, r4
1006128e:	462a      	mov	r2, r5
10061290:	f7fe ff86 	bl	100601a0 <smp_crt_f6_generate_check_val>
10061294:	4630      	mov	r0, r6
10061296:	b015      	add	sp, #84	@ 0x54
10061298:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006129a:	4339      	orrs	r1, r7
1006129c:	1e48      	subs	r0, r1, #1
1006129e:	4181      	sbcs	r1, r0
100612a0:	4053      	eors	r3, r2
100612a2:	4219      	tst	r1, r3
100612a4:	d105      	bne.n	100612b2 <smp_scp_pp2_as2_dhkey_check_generate+0x16a>
100612a6:	a810      	add	r0, sp, #64	@ 0x40
100612a8:	9000      	str	r0, [sp, #0]
100612aa:	a912      	add	r1, sp, #72	@ 0x48
100612ac:	aa0e      	add	r2, sp, #56	@ 0x38
100612ae:	ab13      	add	r3, sp, #76	@ 0x4c
100612b0:	e7d4      	b.n	1006125c <smp_scp_pp2_as2_dhkey_check_generate+0x114>
100612b2:	2086      	movs	r0, #134	@ 0x86
100612b4:	e7ef      	b.n	10061296 <smp_scp_pp2_as2_dhkey_check_generate+0x14e>
100612b6:	46c0      	nop			@ (mov r8, r8)

100612b8 <__arm_cp.12_0>:
100612b8:	20001140 	.word	0x20001140

100612bc <smp_scp_pp2_as2_dhkey_check_send>:
100612bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100612be:	4605      	mov	r5, r0
100612c0:	8901      	ldrh	r1, [r0, #8]
100612c2:	2400      	movs	r4, #0
100612c4:	2215      	movs	r2, #21
100612c6:	4620      	mov	r0, r4
100612c8:	f7f1 fc52 	bl	10052b70 <ACL_pkt_get>
100612cc:	2800      	cmp	r0, #0
100612ce:	d01b      	beq.n	10061308 <smp_scp_pp2_as2_dhkey_check_send+0x4c>
100612d0:	4606      	mov	r6, r0
100612d2:	2011      	movs	r0, #17
100612d4:	8070      	strh	r0, [r6, #2]
100612d6:	6870      	ldr	r0, [r6, #4]
100612d8:	210d      	movs	r1, #13
100612da:	7201      	strb	r1, [r0, #8]
100612dc:	204d      	movs	r0, #77	@ 0x4d
100612de:	0080      	lsls	r0, r0, #2
100612e0:	490d      	ldr	r1, [pc, #52]	@ (10061318 <__arm_cp.13_0>)
100612e2:	6809      	ldr	r1, [r1, #0]
100612e4:	180b      	adds	r3, r1, r0
100612e6:	2105      	movs	r1, #5
100612e8:	2210      	movs	r2, #16
100612ea:	4630      	mov	r0, r6
100612ec:	f7f1 fca0 	bl	10052c30 <ACL_pkt_write>
100612f0:	2060      	movs	r0, #96	@ 0x60
100612f2:	5c2f      	ldrb	r7, [r5, r0]
100612f4:	4628      	mov	r0, r5
100612f6:	4631      	mov	r1, r6
100612f8:	f004 ffa8 	bl	1006624c <smp_dep_l2c_send_acl_packet>
100612fc:	2800      	cmp	r0, #0
100612fe:	d108      	bne.n	10061312 <smp_scp_pp2_as2_dhkey_check_send+0x56>
10061300:	07f8      	lsls	r0, r7, #31
10061302:	d003      	beq.n	1006130c <smp_scp_pp2_as2_dhkey_check_send+0x50>
10061304:	2043      	movs	r0, #67	@ 0x43
10061306:	e002      	b.n	1006130e <smp_scp_pp2_as2_dhkey_check_send+0x52>
10061308:	2488      	movs	r4, #136	@ 0x88
1006130a:	e002      	b.n	10061312 <smp_scp_pp2_as2_dhkey_check_send+0x56>
1006130c:	2054      	movs	r0, #84	@ 0x54
1006130e:	43c0      	mvns	r0, r0
10061310:	72a8      	strb	r0, [r5, #10]
10061312:	4620      	mov	r0, r4
10061314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10061316:	46c0      	nop			@ (mov r8, r8)

10061318 <__arm_cp.13_0>:
10061318:	20001140 	.word	0x20001140

1006131c <smp_scp_phase_2as2_dhkey_check_receive>:
1006131c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006131e:	b08b      	sub	sp, #44	@ 0x2c
10061320:	460e      	mov	r6, r1
10061322:	2105      	movs	r1, #5
10061324:	2510      	movs	r5, #16
10061326:	af07      	add	r7, sp, #28
10061328:	462a      	mov	r2, r5
1006132a:	463b      	mov	r3, r7
1006132c:	f7f1 fc5e 	bl	10052bec <ACL_pkt_read>
10061330:	2100      	movs	r1, #0
10061332:	ac03      	add	r4, sp, #12
10061334:	9602      	str	r6, [sp, #8]
10061336:	4630      	mov	r0, r6
10061338:	9101      	str	r1, [sp, #4]
1006133a:	4622      	mov	r2, r4
1006133c:	f7ff ff04 	bl	10061148 <smp_scp_pp2_as2_dhkey_check_generate>
10061340:	4606      	mov	r6, r0
10061342:	4638      	mov	r0, r7
10061344:	4621      	mov	r1, r4
10061346:	462a      	mov	r2, r5
10061348:	f7e4 fea4 	bl	10046094 <BLEPLAT_MemCmp>
1006134c:	2e00      	cmp	r6, #0
1006134e:	d115      	bne.n	1006137c <smp_scp_phase_2as2_dhkey_check_receive+0x60>
10061350:	2800      	cmp	r0, #0
10061352:	d113      	bne.n	1006137c <smp_scp_phase_2as2_dhkey_check_receive+0x60>
10061354:	2060      	movs	r0, #96	@ 0x60
10061356:	9c02      	ldr	r4, [sp, #8]
10061358:	5c20      	ldrb	r0, [r4, r0]
1006135a:	07c0      	lsls	r0, r0, #31
1006135c:	d115      	bne.n	1006138a <smp_scp_phase_2as2_dhkey_check_receive+0x6e>
1006135e:	7c20      	ldrb	r0, [r4, #16]
10061360:	1a2a      	subs	r2, r5, r0
10061362:	1820      	adds	r0, r4, r0
10061364:	3028      	adds	r0, #40	@ 0x28
10061366:	2100      	movs	r1, #0
10061368:	f7e4 fe84 	bl	10046074 <BLEPLAT_MemSet>
1006136c:	7ea0      	ldrb	r0, [r4, #26]
1006136e:	2102      	movs	r1, #2
10061370:	4301      	orrs	r1, r0
10061372:	76a1      	strb	r1, [r4, #26]
10061374:	4620      	mov	r0, r4
10061376:	f005 f8aa 	bl	100664ce <smp_start_encryption_ucfg_weak>
1006137a:	e00a      	b.n	10061392 <smp_scp_phase_2as2_dhkey_check_receive+0x76>
1006137c:	210b      	movs	r1, #11
1006137e:	2200      	movs	r2, #0
10061380:	2301      	movs	r3, #1
10061382:	9802      	ldr	r0, [sp, #8]
10061384:	f005 f95e 	bl	10066644 <smp_pp3_pairing_failed_send>
10061388:	e003      	b.n	10061392 <smp_scp_phase_2as2_dhkey_check_receive+0x76>
1006138a:	4620      	mov	r0, r4
1006138c:	f7ff ff96 	bl	100612bc <smp_scp_pp2_as2_dhkey_check_send>
10061390:	9801      	ldr	r0, [sp, #4]
10061392:	b00b      	add	sp, #44	@ 0x2c
10061394:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10061398 <smp_scp_stats_update_on_pairing_complete>:
10061398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006139a:	6804      	ldr	r4, [r0, #0]
1006139c:	7de5      	ldrb	r5, [r4, #23]
1006139e:	0729      	lsls	r1, r5, #28
100613a0:	d530      	bpl.n	10061404 <smp_scp_stats_update_on_pairing_complete+0x6c>
100613a2:	7907      	ldrb	r7, [r0, #4]
100613a4:	20fe      	movs	r0, #254	@ 0xfe
100613a6:	4005      	ands	r5, r0
100613a8:	8920      	ldrh	r0, [r4, #8]
100613aa:	f7ff fcdd 	bl	10060d68 <smp_scp_is_another_sc_pairing_ongoing>
100613ae:	75e5      	strb	r5, [r4, #23]
100613b0:	2800      	cmp	r0, #0
100613b2:	d106      	bne.n	100613c2 <smp_scp_stats_update_on_pairing_complete+0x2a>
100613b4:	4914      	ldr	r1, [pc, #80]	@ (10061408 <__arm_cp.15_0>)
100613b6:	6809      	ldr	r1, [r1, #0]
100613b8:	2242      	movs	r2, #66	@ 0x42
100613ba:	5c8b      	ldrb	r3, [r1, r2]
100613bc:	24fb      	movs	r4, #251	@ 0xfb
100613be:	401c      	ands	r4, r3
100613c0:	548c      	strb	r4, [r1, r2]
100613c2:	4c11      	ldr	r4, [pc, #68]	@ (10061408 <__arm_cp.15_0>)
100613c4:	6821      	ldr	r1, [r4, #0]
100613c6:	2543      	movs	r5, #67	@ 0x43
100613c8:	5d4e      	ldrb	r6, [r1, r5]
100613ca:	3142      	adds	r1, #66	@ 0x42
100613cc:	2f00      	cmp	r7, #0
100613ce:	d008      	beq.n	100613e2 <smp_scp_stats_update_on_pairing_complete+0x4a>
100613d0:	3610      	adds	r6, #16
100613d2:	704e      	strb	r6, [r1, #1]
100613d4:	2800      	cmp	r0, #0
100613d6:	d106      	bne.n	100613e6 <smp_scp_stats_update_on_pairing_complete+0x4e>
100613d8:	7808      	ldrb	r0, [r1, #0]
100613da:	22cf      	movs	r2, #207	@ 0xcf
100613dc:	4002      	ands	r2, r0
100613de:	700a      	strb	r2, [r1, #0]
100613e0:	e001      	b.n	100613e6 <smp_scp_stats_update_on_pairing_complete+0x4e>
100613e2:	1c76      	adds	r6, r6, #1
100613e4:	704e      	strb	r6, [r1, #1]
100613e6:	200f      	movs	r0, #15
100613e8:	4030      	ands	r0, r6
100613ea:	2103      	movs	r1, #3
100613ec:	f7df ff2c 	bl	10041248 <__udivsi3>
100613f0:	b2f1      	uxtb	r1, r6
100613f2:	0909      	lsrs	r1, r1, #4
100613f4:	1840      	adds	r0, r0, r1
100613f6:	2803      	cmp	r0, #3
100613f8:	d304      	bcc.n	10061404 <smp_scp_stats_update_on_pairing_complete+0x6c>
100613fa:	f7ff fcf1 	bl	10060de0 <smp_scp_execute_public_key_generation_request>
100613fe:	6820      	ldr	r0, [r4, #0]
10061400:	2100      	movs	r1, #0
10061402:	5541      	strb	r1, [r0, r5]
10061404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10061406:	46c0      	nop			@ (mov r8, r8)

10061408 <__arm_cp.15_0>:
10061408:	20001140 	.word	0x20001140

1006140c <smp_fsm_process_actions_wrt_state_tsk>:
1006140c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006140e:	2700      	movs	r7, #0
10061410:	4b6b      	ldr	r3, [pc, #428]	@ (100615c0 <__arm_cp.0_0>)
10061412:	4a6c      	ldr	r2, [pc, #432]	@ (100615c4 <__arm_cp.0_1>)
10061414:	463d      	mov	r5, r7
10061416:	6818      	ldr	r0, [r3, #0]
10061418:	2134      	movs	r1, #52	@ 0x34
1006141a:	5c40      	ldrb	r0, [r0, r1]
1006141c:	4285      	cmp	r5, r0
1006141e:	d300      	bcc.n	10061422 <smp_fsm_process_actions_wrt_state_tsk+0x16>
10061420:	e0cd      	b.n	100615be <smp_fsm_process_actions_wrt_state_tsk+0x1b2>
10061422:	6810      	ldr	r0, [r2, #0]
10061424:	21a4      	movs	r1, #164	@ 0xa4
10061426:	5840      	ldr	r0, [r0, r1]
10061428:	2800      	cmp	r0, #0
1006142a:	d100      	bne.n	1006142e <smp_fsm_process_actions_wrt_state_tsk+0x22>
1006142c:	e0b2      	b.n	10061594 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1006142e:	19c4      	adds	r4, r0, r7
10061430:	8920      	ldrh	r0, [r4, #8]
10061432:	2800      	cmp	r0, #0
10061434:	d100      	bne.n	10061438 <smp_fsm_process_actions_wrt_state_tsk+0x2c>
10061436:	e0ad      	b.n	10061594 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061438:	7aa0      	ldrb	r0, [r4, #10]
1006143a:	4601      	mov	r1, r0
1006143c:	39d1      	subs	r1, #209	@ 0xd1
1006143e:	2905      	cmp	r1, #5
10061440:	d35d      	bcc.n	100614fe <smp_fsm_process_actions_wrt_state_tsk+0xf2>
10061442:	2800      	cmp	r0, #0
10061444:	d100      	bne.n	10061448 <smp_fsm_process_actions_wrt_state_tsk+0x3c>
10061446:	e0a5      	b.n	10061594 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061448:	28fe      	cmp	r0, #254	@ 0xfe
1006144a:	d100      	bne.n	1006144e <smp_fsm_process_actions_wrt_state_tsk+0x42>
1006144c:	e08a      	b.n	10061564 <smp_fsm_process_actions_wrt_state_tsk+0x158>
1006144e:	28a2      	cmp	r0, #162	@ 0xa2
10061450:	d059      	beq.n	10061506 <smp_fsm_process_actions_wrt_state_tsk+0xfa>
10061452:	28aa      	cmp	r0, #170	@ 0xaa
10061454:	d100      	bne.n	10061458 <smp_fsm_process_actions_wrt_state_tsk+0x4c>
10061456:	e081      	b.n	1006155c <smp_fsm_process_actions_wrt_state_tsk+0x150>
10061458:	28b2      	cmp	r0, #178	@ 0xb2
1006145a:	d054      	beq.n	10061506 <smp_fsm_process_actions_wrt_state_tsk+0xfa>
1006145c:	28b4      	cmp	r0, #180	@ 0xb4
1006145e:	d100      	bne.n	10061462 <smp_fsm_process_actions_wrt_state_tsk+0x56>
10061460:	e08a      	b.n	10061578 <smp_fsm_process_actions_wrt_state_tsk+0x16c>
10061462:	28ba      	cmp	r0, #186	@ 0xba
10061464:	d07a      	beq.n	1006155c <smp_fsm_process_actions_wrt_state_tsk+0x150>
10061466:	28bf      	cmp	r0, #191	@ 0xbf
10061468:	d100      	bne.n	1006146c <smp_fsm_process_actions_wrt_state_tsk+0x60>
1006146a:	e089      	b.n	10061580 <smp_fsm_process_actions_wrt_state_tsk+0x174>
1006146c:	28f0      	cmp	r0, #240	@ 0xf0
1006146e:	d100      	bne.n	10061472 <smp_fsm_process_actions_wrt_state_tsk+0x66>
10061470:	e08b      	b.n	1006158a <smp_fsm_process_actions_wrt_state_tsk+0x17e>
10061472:	2810      	cmp	r0, #16
10061474:	d000      	beq.n	10061478 <smp_fsm_process_actions_wrt_state_tsk+0x6c>
10061476:	e090      	b.n	1006159a <smp_fsm_process_actions_wrt_state_tsk+0x18e>
10061478:	2101      	movs	r1, #1
1006147a:	4620      	mov	r0, r4
1006147c:	f004 ffa8 	bl	100663d0 <smp_dep_sdb_find_bonding_record_by_conn_addr>
10061480:	2800      	cmp	r0, #0
10061482:	d100      	bne.n	10061486 <smp_fsm_process_actions_wrt_state_tsk+0x7a>
10061484:	e096      	b.n	100615b4 <smp_fsm_process_actions_wrt_state_tsk+0x1a8>
10061486:	2600      	movs	r6, #0
10061488:	72a6      	strb	r6, [r4, #10]
1006148a:	f7f2 fde5 	bl	10054058 <GapIsPrivacySupported>
1006148e:	2800      	cmp	r0, #0
10061490:	4b4b      	ldr	r3, [pc, #300]	@ (100615c0 <__arm_cp.0_0>)
10061492:	4a4c      	ldr	r2, [pc, #304]	@ (100615c4 <__arm_cp.0_1>)
10061494:	d07e      	beq.n	10061594 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061496:	2060      	movs	r0, #96	@ 0x60
10061498:	5c20      	ldrb	r0, [r4, r0]
1006149a:	07c0      	lsls	r0, r0, #31
1006149c:	d07a      	beq.n	10061594 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1006149e:	f004 ff08 	bl	100662b2 <smp_dep_sdb_get_bonding_records_count>
100614a2:	4a48      	ldr	r2, [pc, #288]	@ (100615c4 <__arm_cp.0_1>)
100614a4:	4b46      	ldr	r3, [pc, #280]	@ (100615c0 <__arm_cp.0_0>)
100614a6:	2800      	cmp	r0, #0
100614a8:	d074      	beq.n	10061594 <smp_fsm_process_actions_wrt_state_tsk+0x188>
100614aa:	79e0      	ldrb	r0, [r4, #7]
100614ac:	21c0      	movs	r1, #192	@ 0xc0
100614ae:	4001      	ands	r1, r0
100614b0:	2940      	cmp	r1, #64	@ 0x40
100614b2:	d16f      	bne.n	10061594 <smp_fsm_process_actions_wrt_state_tsk+0x188>
100614b4:	4844      	ldr	r0, [pc, #272]	@ (100615c8 <__arm_cp.0_2>)
100614b6:	6800      	ldr	r0, [r0, #0]
100614b8:	214f      	movs	r1, #79	@ 0x4f
100614ba:	5c40      	ldrb	r0, [r0, r1]
100614bc:	0700      	lsls	r0, r0, #28
100614be:	d569      	bpl.n	10061594 <smp_fsm_process_actions_wrt_state_tsk+0x188>
100614c0:	8924      	ldrh	r4, [r4, #8]
100614c2:	4842      	ldr	r0, [pc, #264]	@ (100615cc <__arm_cp.0_3>)
100614c4:	6800      	ldr	r0, [r0, #0]
100614c6:	6980      	ldr	r0, [r0, #24]
100614c8:	2248      	movs	r2, #72	@ 0x48
100614ca:	2102      	movs	r1, #2
100614cc:	460b      	mov	r3, r1
100614ce:	f7f1 fd33 	bl	10052f38 <aci_event_fifo_push_header>
100614d2:	4a3c      	ldr	r2, [pc, #240]	@ (100615c4 <__arm_cp.0_1>)
100614d4:	4b3a      	ldr	r3, [pc, #232]	@ (100615c0 <__arm_cp.0_0>)
100614d6:	2800      	cmp	r0, #0
100614d8:	d05c      	beq.n	10061594 <smp_fsm_process_actions_wrt_state_tsk+0x188>
100614da:	4601      	mov	r1, r0
100614dc:	2004      	movs	r0, #4
100614de:	7248      	strb	r0, [r1, #9]
100614e0:	2208      	movs	r2, #8
100614e2:	720a      	strb	r2, [r1, #8]
100614e4:	71ce      	strb	r6, [r1, #7]
100614e6:	7188      	strb	r0, [r1, #6]
100614e8:	728c      	strb	r4, [r1, #10]
100614ea:	20ff      	movs	r0, #255	@ 0xff
100614ec:	7148      	strb	r0, [r1, #5]
100614ee:	2082      	movs	r0, #130	@ 0x82
100614f0:	7108      	strb	r0, [r1, #4]
100614f2:	0a20      	lsrs	r0, r4, #8
100614f4:	72c8      	strb	r0, [r1, #11]
100614f6:	2002      	movs	r0, #2
100614f8:	f7f1 fdbb 	bl	10053072 <aci_event_fifo_push>
100614fc:	e048      	b.n	10061590 <smp_fsm_process_actions_wrt_state_tsk+0x184>
100614fe:	4620      	mov	r0, r4
10061500:	f005 f9d4 	bl	100668ac <smp_pp3_keys_distribution_send>
10061504:	e044      	b.n	10061590 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10061506:	7de0      	ldrb	r0, [r4, #23]
10061508:	2601      	movs	r6, #1
1006150a:	0700      	lsls	r0, r0, #28
1006150c:	4630      	mov	r0, r6
1006150e:	d513      	bpl.n	10061538 <smp_fsm_process_actions_wrt_state_tsk+0x12c>
10061510:	4620      	mov	r0, r4
10061512:	f7f0 faae 	bl	10051a72 <smp_scp_public_key_prepare_and_exchange_ucfg>
10061516:	2800      	cmp	r0, #0
10061518:	d006      	beq.n	10061528 <smp_fsm_process_actions_wrt_state_tsk+0x11c>
1006151a:	2812      	cmp	r0, #18
1006151c:	d004      	beq.n	10061528 <smp_fsm_process_actions_wrt_state_tsk+0x11c>
1006151e:	200e      	movs	r0, #14
10061520:	f000 ffca 	bl	100624b8 <tsk_notify_idx>
10061524:	f7e2 faf9 	bl	10043b1a <BLE_STACK_ProcessRequest>
10061528:	7de0      	ldrb	r0, [r4, #23]
1006152a:	2160      	movs	r1, #96	@ 0x60
1006152c:	4001      	ands	r1, r0
1006152e:	3960      	subs	r1, #96	@ 0x60
10061530:	4248      	negs	r0, r1
10061532:	4148      	adcs	r0, r1
10061534:	4b22      	ldr	r3, [pc, #136]	@ (100615c0 <__arm_cp.0_0>)
10061536:	4a23      	ldr	r2, [pc, #140]	@ (100615c4 <__arm_cp.0_1>)
10061538:	7ce1      	ldrb	r1, [r4, #19]
1006153a:	2902      	cmp	r1, #2
1006153c:	d104      	bne.n	10061548 <smp_fsm_process_actions_wrt_state_tsk+0x13c>
1006153e:	7be1      	ldrb	r1, [r4, #15]
10061540:	2210      	movs	r2, #16
10061542:	400a      	ands	r2, r1
10061544:	0916      	lsrs	r6, r2, #4
10061546:	4a1f      	ldr	r2, [pc, #124]	@ (100615c4 <__arm_cp.0_1>)
10061548:	2800      	cmp	r0, #0
1006154a:	d023      	beq.n	10061594 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1006154c:	2e00      	cmp	r6, #0
1006154e:	d021      	beq.n	10061594 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061550:	2060      	movs	r0, #96	@ 0x60
10061552:	5c20      	ldrb	r0, [r4, r0]
10061554:	07c0      	lsls	r0, r0, #31
10061556:	d024      	beq.n	100615a2 <smp_fsm_process_actions_wrt_state_tsk+0x196>
10061558:	204b      	movs	r0, #75	@ 0x4b
1006155a:	e023      	b.n	100615a4 <smp_fsm_process_actions_wrt_state_tsk+0x198>
1006155c:	4620      	mov	r0, r4
1006155e:	f7f0 fab0 	bl	10051ac2 <smp_fsm_execute_actions_scp_phase2as2_ucfg>
10061562:	e015      	b.n	10061590 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10061564:	2060      	movs	r0, #96	@ 0x60
10061566:	5620      	ldrsb	r0, [r4, r0]
10061568:	2800      	cmp	r0, #0
1006156a:	d513      	bpl.n	10061594 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1006156c:	2100      	movs	r1, #0
1006156e:	2270      	movs	r2, #112	@ 0x70
10061570:	4620      	mov	r0, r4
10061572:	f7e4 fd7f 	bl	10046074 <BLEPLAT_MemSet>
10061576:	e00b      	b.n	10061590 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10061578:	4620      	mov	r0, r4
1006157a:	f7ff fa03 	bl	10060984 <smp_pp2_per_auth_stage_1_start>
1006157e:	e007      	b.n	10061590 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10061580:	2100      	movs	r1, #0
10061582:	4620      	mov	r0, r4
10061584:	f005 f948 	bl	10066818 <smp_pp3_keys_distribution_start>
10061588:	e002      	b.n	10061590 <smp_fsm_process_actions_wrt_state_tsk+0x184>
1006158a:	4620      	mov	r0, r4
1006158c:	f004 ffa2 	bl	100664d4 <smp_pp3_pairing_completed_successful>
10061590:	4a0c      	ldr	r2, [pc, #48]	@ (100615c4 <__arm_cp.0_1>)
10061592:	4b0b      	ldr	r3, [pc, #44]	@ (100615c0 <__arm_cp.0_0>)
10061594:	3770      	adds	r7, #112	@ 0x70
10061596:	1c6d      	adds	r5, r5, #1
10061598:	e73d      	b.n	10061416 <smp_fsm_process_actions_wrt_state_tsk+0xa>
1006159a:	4620      	mov	r0, r4
1006159c:	f000 f830 	bl	10061600 <smp_fsm_execute_actions_excerpt_cei_ucfg_weak>
100615a0:	e00a      	b.n	100615b8 <smp_fsm_process_actions_wrt_state_tsk+0x1ac>
100615a2:	205b      	movs	r0, #91	@ 0x5b
100615a4:	43c0      	mvns	r0, r0
100615a6:	72a0      	strb	r0, [r4, #10]
100615a8:	200e      	movs	r0, #14
100615aa:	f000 ff85 	bl	100624b8 <tsk_notify_idx>
100615ae:	f7e2 fab4 	bl	10043b1a <BLE_STACK_ProcessRequest>
100615b2:	e001      	b.n	100615b8 <smp_fsm_process_actions_wrt_state_tsk+0x1ac>
100615b4:	20f1      	movs	r0, #241	@ 0xf1
100615b6:	72a0      	strb	r0, [r4, #10]
100615b8:	4b01      	ldr	r3, [pc, #4]	@ (100615c0 <__arm_cp.0_0>)
100615ba:	4a02      	ldr	r2, [pc, #8]	@ (100615c4 <__arm_cp.0_1>)
100615bc:	e7ea      	b.n	10061594 <smp_fsm_process_actions_wrt_state_tsk+0x188>
100615be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100615c0 <__arm_cp.0_0>:
100615c0:	200010a0 	.word	0x200010a0

100615c4 <__arm_cp.0_1>:
100615c4:	20001140 	.word	0x20001140

100615c8 <__arm_cp.0_2>:
100615c8:	200010f4 	.word	0x200010f4

100615cc <__arm_cp.0_3>:
100615cc:	200010a4 	.word	0x200010a4

100615d0 <smp_fsm_execute_actions_scp_phase2as2>:
100615d0:	b510      	push	{r4, lr}
100615d2:	4604      	mov	r4, r0
100615d4:	7dc0      	ldrb	r0, [r0, #23]
100615d6:	0700      	lsls	r0, r0, #28
100615d8:	d511      	bpl.n	100615fe <smp_fsm_execute_actions_scp_phase2as2+0x2e>
100615da:	4620      	mov	r0, r4
100615dc:	f7ff fd40 	bl	10061060 <smp_scp_phase_2as2_start>
100615e0:	2800      	cmp	r0, #0
100615e2:	d007      	beq.n	100615f4 <smp_fsm_execute_actions_scp_phase2as2+0x24>
100615e4:	2888      	cmp	r0, #136	@ 0x88
100615e6:	d005      	beq.n	100615f4 <smp_fsm_execute_actions_scp_phase2as2+0x24>
100615e8:	210b      	movs	r1, #11
100615ea:	2200      	movs	r2, #0
100615ec:	2301      	movs	r3, #1
100615ee:	4620      	mov	r0, r4
100615f0:	f005 f828 	bl	10066644 <smp_pp3_pairing_failed_send>
100615f4:	200e      	movs	r0, #14
100615f6:	f000 ff5f 	bl	100624b8 <tsk_notify_idx>
100615fa:	f7e2 fa8e 	bl	10043b1a <BLE_STACK_ProcessRequest>
100615fe:	bd10      	pop	{r4, pc}

10061600 <smp_fsm_execute_actions_excerpt_cei_ucfg_weak>:
10061600:	4770      	bx	lr

10061602 <smp_pka_process_ecc_computation_tsk>:
10061602:	b580      	push	{r7, lr}
10061604:	f7ff fbec 	bl	10060de0 <smp_scp_execute_public_key_generation_request>
10061608:	bd80      	pop	{r7, pc}
	...

1006160c <smp_rxp_process_rxed_packets_tsk>:
1006160c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1006160e:	4f60      	ldr	r7, [pc, #384]	@ (10061790 <__arm_cp.0_0>)
10061610:	4c60      	ldr	r4, [pc, #384]	@ (10061794 <__arm_cp.0_1>)
10061612:	6838      	ldr	r0, [r7, #0]
10061614:	6801      	ldr	r1, [r0, #0]
10061616:	2900      	cmp	r1, #0
10061618:	d100      	bne.n	1006161c <smp_rxp_process_rxed_packets_tsk+0x10>
1006161a:	e0b8      	b.n	1006178e <smp_rxp_process_rxed_packets_tsk+0x182>
1006161c:	f001 f968 	bl	100628f0 <ACL_list_remove_head>
10061620:	4605      	mov	r5, r0
10061622:	8800      	ldrh	r0, [r0, #0]
10061624:	f7ff fb12 	bl	10060c4c <smp_get_remote_device_list_item>
10061628:	2800      	cmp	r0, #0
1006162a:	d0f2      	beq.n	10061612 <smp_rxp_process_rxed_packets_tsk+0x6>
1006162c:	4606      	mov	r6, r0
1006162e:	6838      	ldr	r0, [r7, #0]
10061630:	21b0      	movs	r1, #176	@ 0xb0
10061632:	5c40      	ldrb	r0, [r0, r1]
10061634:	2800      	cmp	r0, #0
10061636:	d00e      	beq.n	10061656 <smp_rxp_process_rxed_packets_tsk+0x4a>
10061638:	2108      	movs	r1, #8
1006163a:	2200      	movs	r2, #0
1006163c:	2301      	movs	r3, #1
1006163e:	4630      	mov	r0, r6
10061640:	f005 f800 	bl	10066644 <smp_pp3_pairing_failed_send>
10061644:	2800      	cmp	r0, #0
10061646:	d00e      	beq.n	10061666 <smp_rxp_process_rxed_packets_tsk+0x5a>
10061648:	28fd      	cmp	r0, #253	@ 0xfd
1006164a:	d000      	beq.n	1006164e <smp_rxp_process_rxed_packets_tsk+0x42>
1006164c:	e096      	b.n	1006177c <smp_rxp_process_rxed_packets_tsk+0x170>
1006164e:	4628      	mov	r0, r5
10061650:	f7f1 fab0 	bl	10052bb4 <ACL_pkt_release>
10061654:	e7dd      	b.n	10061612 <smp_rxp_process_rxed_packets_tsk+0x6>
10061656:	6868      	ldr	r0, [r5, #4]
10061658:	7a00      	ldrb	r0, [r0, #8]
1006165a:	2805      	cmp	r0, #5
1006165c:	d10c      	bne.n	10061678 <smp_rxp_process_rxed_packets_tsk+0x6c>
1006165e:	4628      	mov	r0, r5
10061660:	4631      	mov	r1, r6
10061662:	f004 ffc3 	bl	100665ec <smp_pp3_pairing_failed_receive>
10061666:	4628      	mov	r0, r5
10061668:	f7f1 faa4 	bl	10052bb4 <ACL_pkt_release>
1006166c:	200e      	movs	r0, #14
1006166e:	f000 ff23 	bl	100624b8 <tsk_notify_idx>
10061672:	f7e2 fa52 	bl	10043b1a <BLE_STACK_ProcessRequest>
10061676:	e7cc      	b.n	10061612 <smp_rxp_process_rxed_packets_tsk+0x6>
10061678:	7ab1      	ldrb	r1, [r6, #10]
1006167a:	29f1      	cmp	r1, #241	@ 0xf1
1006167c:	d001      	beq.n	10061682 <smp_rxp_process_rxed_packets_tsk+0x76>
1006167e:	2900      	cmp	r1, #0
10061680:	d10a      	bne.n	10061698 <smp_rxp_process_rxed_packets_tsk+0x8c>
10061682:	2160      	movs	r1, #96	@ 0x60
10061684:	5c72      	ldrb	r2, [r6, r1]
10061686:	2101      	movs	r1, #1
10061688:	4011      	ands	r1, r2
1006168a:	d101      	bne.n	10061690 <smp_rxp_process_rxed_packets_tsk+0x84>
1006168c:	280b      	cmp	r0, #11
1006168e:	d1de      	bne.n	1006164e <smp_rxp_process_rxed_packets_tsk+0x42>
10061690:	2900      	cmp	r1, #0
10061692:	d001      	beq.n	10061698 <smp_rxp_process_rxed_packets_tsk+0x8c>
10061694:	2801      	cmp	r0, #1
10061696:	d1da      	bne.n	1006164e <smp_rxp_process_rxed_packets_tsk+0x42>
10061698:	7df0      	ldrb	r0, [r6, #23]
1006169a:	0700      	lsls	r0, r0, #28
1006169c:	d506      	bpl.n	100616ac <smp_rxp_process_rxed_packets_tsk+0xa0>
1006169e:	9602      	str	r6, [sp, #8]
100616a0:	9501      	str	r5, [sp, #4]
100616a2:	a801      	add	r0, sp, #4
100616a4:	f7f0 fa44 	bl	10051b30 <smp_rxp_process_wrt_current_fsm_excerpt_scp_ucfg>
100616a8:	28fc      	cmp	r0, #252	@ 0xfc
100616aa:	d1cb      	bne.n	10061644 <smp_rxp_process_rxed_packets_tsk+0x38>
100616ac:	2060      	movs	r0, #96	@ 0x60
100616ae:	5c30      	ldrb	r0, [r6, r0]
100616b0:	07c0      	lsls	r0, r0, #31
100616b2:	d107      	bne.n	100616c4 <smp_rxp_process_rxed_packets_tsk+0xb8>
100616b4:	9602      	str	r6, [sp, #8]
100616b6:	9501      	str	r5, [sp, #4]
100616b8:	a801      	add	r0, sp, #4
100616ba:	f000 f909 	bl	100618d0 <smp_rxp_process_wrt_current_fsm_excerpt_cei_ucfg_weak>
100616be:	28fc      	cmp	r0, #252	@ 0xfc
100616c0:	d1c0      	bne.n	10061644 <smp_rxp_process_rxed_packets_tsk+0x38>
100616c2:	e022      	b.n	1006170a <smp_rxp_process_rxed_packets_tsk+0xfe>
100616c4:	6868      	ldr	r0, [r5, #4]
100616c6:	7a00      	ldrb	r0, [r0, #8]
100616c8:	2804      	cmp	r0, #4
100616ca:	d031      	beq.n	10061730 <smp_rxp_process_rxed_packets_tsk+0x124>
100616cc:	2803      	cmp	r0, #3
100616ce:	d037      	beq.n	10061740 <smp_rxp_process_rxed_packets_tsk+0x134>
100616d0:	2801      	cmp	r0, #1
100616d2:	d11a      	bne.n	1006170a <smp_rxp_process_rxed_packets_tsk+0xfe>
100616d4:	7ab0      	ldrb	r0, [r6, #10]
100616d6:	2800      	cmp	r0, #0
100616d8:	d003      	beq.n	100616e2 <smp_rxp_process_rxed_packets_tsk+0xd6>
100616da:	28fb      	cmp	r0, #251	@ 0xfb
100616dc:	d047      	beq.n	1006176e <smp_rxp_process_rxed_packets_tsk+0x162>
100616de:	28f1      	cmp	r0, #241	@ 0xf1
100616e0:	d1b5      	bne.n	1006164e <smp_rxp_process_rxed_packets_tsk+0x42>
100616e2:	8930      	ldrh	r0, [r6, #8]
100616e4:	f7ff fa92 	bl	10060c0c <smp_get_remote_device_list_index>
100616e8:	4602      	mov	r2, r0
100616ea:	2000      	movs	r0, #0
100616ec:	4601      	mov	r1, r0
100616ee:	4623      	mov	r3, r4
100616f0:	f000 f90c 	bl	1006190c <smp_timer_reset>
100616f4:	7e30      	ldrb	r0, [r6, #24]
100616f6:	0781      	lsls	r1, r0, #30
100616f8:	d502      	bpl.n	10061700 <smp_rxp_process_rxed_packets_tsk+0xf4>
100616fa:	2103      	movs	r1, #3
100616fc:	4308      	orrs	r0, r1
100616fe:	7630      	strb	r0, [r6, #24]
10061700:	4628      	mov	r0, r5
10061702:	4631      	mov	r1, r6
10061704:	f004 ffb4 	bl	10066670 <smp_pp1_per_rxp_pairing_request>
10061708:	e7d9      	b.n	100616be <smp_rxp_process_rxed_packets_tsk+0xb2>
1006170a:	4628      	mov	r0, r5
1006170c:	4631      	mov	r1, r6
1006170e:	f005 f98f 	bl	10066a30 <smp_pp3_keys_distribution_receive>
10061712:	28fc      	cmp	r0, #252	@ 0xfc
10061714:	d003      	beq.n	1006171e <smp_rxp_process_rxed_packets_tsk+0x112>
10061716:	2886      	cmp	r0, #134	@ 0x86
10061718:	d099      	beq.n	1006164e <smp_rxp_process_rxed_packets_tsk+0x42>
1006171a:	2884      	cmp	r0, #132	@ 0x84
1006171c:	d192      	bne.n	10061644 <smp_rxp_process_rxed_packets_tsk+0x38>
1006171e:	7df0      	ldrb	r0, [r6, #23]
10061720:	0700      	lsls	r0, r0, #28
10061722:	d594      	bpl.n	1006164e <smp_rxp_process_rxed_packets_tsk+0x42>
10061724:	9602      	str	r6, [sp, #8]
10061726:	9501      	str	r5, [sp, #4]
10061728:	a801      	add	r0, sp, #4
1006172a:	f7f0 f9f4 	bl	10051b16 <smp_rxp_process_exception_cases_excerpt_scp_ucfg>
1006172e:	e789      	b.n	10061644 <smp_rxp_process_rxed_packets_tsk+0x38>
10061730:	7ab0      	ldrb	r0, [r6, #10]
10061732:	28b6      	cmp	r0, #182	@ 0xb6
10061734:	d18b      	bne.n	1006164e <smp_rxp_process_rxed_packets_tsk+0x42>
10061736:	4628      	mov	r0, r5
10061738:	4631      	mov	r1, r6
1006173a:	f7ff f9d5 	bl	10060ae8 <smp_pp2_per_rx_process_pairing_random>
1006173e:	e7be      	b.n	100616be <smp_rxp_process_rxed_packets_tsk+0xb2>
10061740:	7ab0      	ldrb	r0, [r6, #10]
10061742:	28b2      	cmp	r0, #178	@ 0xb2
10061744:	d009      	beq.n	1006175a <smp_rxp_process_rxed_packets_tsk+0x14e>
10061746:	28b4      	cmp	r0, #180	@ 0xb4
10061748:	d007      	beq.n	1006175a <smp_rxp_process_rxed_packets_tsk+0x14e>
1006174a:	28b5      	cmp	r0, #181	@ 0xb5
1006174c:	d000      	beq.n	10061750 <smp_rxp_process_rxed_packets_tsk+0x144>
1006174e:	e77e      	b.n	1006164e <smp_rxp_process_rxed_packets_tsk+0x42>
10061750:	4628      	mov	r0, r5
10061752:	4631      	mov	r1, r6
10061754:	f7ff f86e 	bl	10060834 <smp_pp2_per_rx_process_pairing_confirm>
10061758:	e7b1      	b.n	100616be <smp_rxp_process_rxed_packets_tsk+0xb2>
1006175a:	7cf0      	ldrb	r0, [r6, #19]
1006175c:	2802      	cmp	r0, #2
1006175e:	d000      	beq.n	10061762 <smp_rxp_process_rxed_packets_tsk+0x156>
10061760:	e775      	b.n	1006164e <smp_rxp_process_rxed_packets_tsk+0x42>
10061762:	6838      	ldr	r0, [r7, #0]
10061764:	2140      	movs	r1, #64	@ 0x40
10061766:	5c41      	ldrb	r1, [r0, r1]
10061768:	2903      	cmp	r1, #3
1006176a:	d108      	bne.n	1006177e <smp_rxp_process_rxed_packets_tsk+0x172>
1006176c:	e76f      	b.n	1006164e <smp_rxp_process_rxed_packets_tsk+0x42>
1006176e:	2109      	movs	r1, #9
10061770:	2200      	movs	r2, #0
10061772:	2301      	movs	r3, #1
10061774:	4630      	mov	r0, r6
10061776:	f004 ff65 	bl	10066644 <smp_pp3_pairing_failed_send>
1006177a:	e7a0      	b.n	100616be <smp_rxp_process_rxed_packets_tsk+0xb2>
1006177c:	6838      	ldr	r0, [r7, #0]
1006177e:	4629      	mov	r1, r5
10061780:	f001 f897 	bl	100628b2 <ACL_list_insert_head>
10061784:	200f      	movs	r0, #15
10061786:	f000 fe97 	bl	100624b8 <tsk_notify_idx>
1006178a:	f7e2 f9c6 	bl	10043b1a <BLE_STACK_ProcessRequest>
1006178e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10061790 <__arm_cp.0_0>:
10061790:	20001140 	.word	0x20001140

10061794 <__arm_cp.0_1>:
10061794:	00007530 	.word	0x00007530

10061798 <smp_rxp_process_wrt_current_fsm_excerpt_scp>:
10061798:	b580      	push	{r7, lr}
1006179a:	4601      	mov	r1, r0
1006179c:	6800      	ldr	r0, [r0, #0]
1006179e:	6849      	ldr	r1, [r1, #4]
100617a0:	6842      	ldr	r2, [r0, #4]
100617a2:	7a12      	ldrb	r2, [r2, #8]
100617a4:	2a0d      	cmp	r2, #13
100617a6:	d00f      	beq.n	100617c8 <smp_rxp_process_wrt_current_fsm_excerpt_scp+0x30>
100617a8:	2a0c      	cmp	r2, #12
100617aa:	d115      	bne.n	100617d8 <smp_rxp_process_wrt_current_fsm_excerpt_scp+0x40>
100617ac:	7a8a      	ldrb	r2, [r1, #10]
100617ae:	2310      	movs	r3, #16
100617b0:	4313      	orrs	r3, r2
100617b2:	22ff      	movs	r2, #255	@ 0xff
100617b4:	2bb2      	cmp	r3, #178	@ 0xb2
100617b6:	d118      	bne.n	100617ea <smp_rxp_process_wrt_current_fsm_excerpt_scp+0x52>
100617b8:	2360      	movs	r3, #96	@ 0x60
100617ba:	5ccb      	ldrb	r3, [r1, r3]
100617bc:	07db      	lsls	r3, r3, #31
100617be:	7dcb      	ldrb	r3, [r1, #23]
100617c0:	d10c      	bne.n	100617dc <smp_rxp_process_wrt_current_fsm_excerpt_scp+0x44>
100617c2:	069b      	lsls	r3, r3, #26
100617c4:	d40c      	bmi.n	100617e0 <smp_rxp_process_wrt_current_fsm_excerpt_scp+0x48>
100617c6:	e010      	b.n	100617ea <smp_rxp_process_wrt_current_fsm_excerpt_scp+0x52>
100617c8:	7a8a      	ldrb	r2, [r1, #10]
100617ca:	2310      	movs	r3, #16
100617cc:	4313      	orrs	r3, r2
100617ce:	2bbb      	cmp	r3, #187	@ 0xbb
100617d0:	d10a      	bne.n	100617e8 <smp_rxp_process_wrt_current_fsm_excerpt_scp+0x50>
100617d2:	f7ff fda3 	bl	1006131c <smp_scp_phase_2as2_dhkey_check_receive>
100617d6:	e005      	b.n	100617e4 <smp_rxp_process_wrt_current_fsm_excerpt_scp+0x4c>
100617d8:	22fc      	movs	r2, #252	@ 0xfc
100617da:	e006      	b.n	100617ea <smp_rxp_process_wrt_current_fsm_excerpt_scp+0x52>
100617dc:	065b      	lsls	r3, r3, #25
100617de:	d404      	bmi.n	100617ea <smp_rxp_process_wrt_current_fsm_excerpt_scp+0x52>
100617e0:	f7ff fb5e 	bl	10060ea0 <smp_scp_public_key_receive>
100617e4:	4602      	mov	r2, r0
100617e6:	e000      	b.n	100617ea <smp_rxp_process_wrt_current_fsm_excerpt_scp+0x52>
100617e8:	22ff      	movs	r2, #255	@ 0xff
100617ea:	4610      	mov	r0, r2
100617ec:	bd80      	pop	{r7, pc}
	...

100617f0 <smp_rxp_process_exception_cases_excerpt_scp>:
100617f0:	b570      	push	{r4, r5, r6, lr}
100617f2:	6805      	ldr	r5, [r0, #0]
100617f4:	6869      	ldr	r1, [r5, #4]
100617f6:	7a09      	ldrb	r1, [r1, #8]
100617f8:	24fd      	movs	r4, #253	@ 0xfd
100617fa:	290e      	cmp	r1, #14
100617fc:	d146      	bne.n	1006188c <smp_rxp_process_exception_cases_excerpt_scp+0x9c>
100617fe:	6846      	ldr	r6, [r0, #4]
10061800:	7df0      	ldrb	r0, [r6, #23]
10061802:	06c0      	lsls	r0, r0, #27
10061804:	d542      	bpl.n	1006188c <smp_rxp_process_exception_cases_excerpt_scp+0x9c>
10061806:	7cf0      	ldrb	r0, [r6, #19]
10061808:	2802      	cmp	r0, #2
1006180a:	d13f      	bne.n	1006188c <smp_rxp_process_exception_cases_excerpt_scp+0x9c>
1006180c:	7b30      	ldrb	r0, [r6, #12]
1006180e:	2802      	cmp	r0, #2
10061810:	d13c      	bne.n	1006188c <smp_rxp_process_exception_cases_excerpt_scp+0x9c>
10061812:	2060      	movs	r0, #96	@ 0x60
10061814:	5c30      	ldrb	r0, [r6, r0]
10061816:	07c0      	lsls	r0, r0, #31
10061818:	7ab0      	ldrb	r0, [r6, #10]
1006181a:	d101      	bne.n	10061820 <smp_rxp_process_exception_cases_excerpt_scp+0x30>
1006181c:	38a2      	subs	r0, #162	@ 0xa2
1006181e:	e000      	b.n	10061822 <smp_rxp_process_exception_cases_excerpt_scp+0x32>
10061820:	38b2      	subs	r0, #178	@ 0xb2
10061822:	2803      	cmp	r0, #3
10061824:	d832      	bhi.n	1006188c <smp_rxp_process_exception_cases_excerpt_scp+0x9c>
10061826:	2801      	cmp	r0, #1
10061828:	d030      	beq.n	1006188c <smp_rxp_process_exception_cases_excerpt_scp+0x9c>
1006182a:	8930      	ldrh	r0, [r6, #8]
1006182c:	f7ff f9ee 	bl	10060c0c <smp_get_remote_device_list_index>
10061830:	4602      	mov	r2, r0
10061832:	2400      	movs	r4, #0
10061834:	4b16      	ldr	r3, [pc, #88]	@ (10061890 <__arm_cp.3_0>)
10061836:	4620      	mov	r0, r4
10061838:	4621      	mov	r1, r4
1006183a:	f000 f867 	bl	1006190c <smp_timer_reset>
1006183e:	4815      	ldr	r0, [pc, #84]	@ (10061894 <__arm_cp.3_1>)
10061840:	6800      	ldr	r0, [r0, #0]
10061842:	214f      	movs	r1, #79	@ 0x4f
10061844:	5c40      	ldrb	r0, [r0, r1]
10061846:	0640      	lsls	r0, r0, #25
10061848:	d520      	bpl.n	1006188c <smp_rxp_process_exception_cases_excerpt_scp+0x9c>
1006184a:	8936      	ldrh	r6, [r6, #8]
1006184c:	6868      	ldr	r0, [r5, #4]
1006184e:	7a45      	ldrb	r5, [r0, #9]
10061850:	4811      	ldr	r0, [pc, #68]	@ (10061898 <__arm_cp.3_2>)
10061852:	6800      	ldr	r0, [r0, #0]
10061854:	6980      	ldr	r0, [r0, #24]
10061856:	2102      	movs	r1, #2
10061858:	224a      	movs	r2, #74	@ 0x4a
1006185a:	2303      	movs	r3, #3
1006185c:	f7f1 fb6c 	bl	10052f38 <aci_event_fifo_push_header>
10061860:	2800      	cmp	r0, #0
10061862:	d013      	beq.n	1006188c <smp_rxp_process_exception_cases_excerpt_scp+0x9c>
10061864:	4601      	mov	r1, r0
10061866:	7286      	strb	r6, [r0, #10]
10061868:	2004      	movs	r0, #4
1006186a:	7248      	strb	r0, [r1, #9]
1006186c:	200a      	movs	r0, #10
1006186e:	7208      	strb	r0, [r1, #8]
10061870:	2400      	movs	r4, #0
10061872:	71cc      	strb	r4, [r1, #7]
10061874:	2005      	movs	r0, #5
10061876:	7188      	strb	r0, [r1, #6]
10061878:	730d      	strb	r5, [r1, #12]
1006187a:	20ff      	movs	r0, #255	@ 0xff
1006187c:	7148      	strb	r0, [r1, #5]
1006187e:	2082      	movs	r0, #130	@ 0x82
10061880:	7108      	strb	r0, [r1, #4]
10061882:	0a30      	lsrs	r0, r6, #8
10061884:	72c8      	strb	r0, [r1, #11]
10061886:	2002      	movs	r0, #2
10061888:	f7f1 fbf3 	bl	10053072 <aci_event_fifo_push>
1006188c:	4620      	mov	r0, r4
1006188e:	bd70      	pop	{r4, r5, r6, pc}

10061890 <__arm_cp.3_0>:
10061890:	00007530 	.word	0x00007530

10061894 <__arm_cp.3_1>:
10061894:	200010f4 	.word	0x200010f4

10061898 <__arm_cp.3_2>:
10061898:	200010a4 	.word	0x200010a4

1006189c <smp_rxp_flush_packet_queues>:
1006189c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006189e:	4d0a      	ldr	r5, [pc, #40]	@ (100618c8 <__arm_cp.4_0>)
100618a0:	4005      	ands	r5, r0
100618a2:	4e0a      	ldr	r6, [pc, #40]	@ (100618cc <__arm_cp.4_1>)
100618a4:	6830      	ldr	r0, [r6, #0]
100618a6:	6807      	ldr	r7, [r0, #0]
100618a8:	2f00      	cmp	r7, #0
100618aa:	d00c      	beq.n	100618c6 <smp_rxp_flush_packet_queues+0x2a>
100618ac:	463c      	mov	r4, r7
100618ae:	69ff      	ldr	r7, [r7, #28]
100618b0:	8820      	ldrh	r0, [r4, #0]
100618b2:	42a8      	cmp	r0, r5
100618b4:	d1f8      	bne.n	100618a8 <smp_rxp_flush_packet_queues+0xc>
100618b6:	6830      	ldr	r0, [r6, #0]
100618b8:	4621      	mov	r1, r4
100618ba:	f001 f803 	bl	100628c4 <ACL_list_remove>
100618be:	4620      	mov	r0, r4
100618c0:	f7f1 f978 	bl	10052bb4 <ACL_pkt_release>
100618c4:	e7f0      	b.n	100618a8 <smp_rxp_flush_packet_queues+0xc>
100618c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100618c8 <__arm_cp.4_0>:
100618c8:	00000fff 	.word	0x00000fff

100618cc <__arm_cp.4_1>:
100618cc:	20001140 	.word	0x20001140

100618d0 <smp_rxp_process_wrt_current_fsm_excerpt_cei_ucfg_weak>:
100618d0:	201f      	movs	r0, #31
100618d2:	4770      	bx	lr

100618d4 <smp_timer_init>:
100618d4:	b580      	push	{r7, lr}
100618d6:	4806      	ldr	r0, [pc, #24]	@ (100618f0 <__arm_cp.0_0>)
100618d8:	7ac1      	ldrb	r1, [r0, #11]
100618da:	4806      	ldr	r0, [pc, #24]	@ (100618f4 <__arm_cp.0_1>)
100618dc:	6800      	ldr	r0, [r0, #0]
100618de:	3008      	adds	r0, #8
100618e0:	1cc9      	adds	r1, r1, #3
100618e2:	b2c9      	uxtb	r1, r1
100618e4:	4a04      	ldr	r2, [pc, #16]	@ (100618f8 <__arm_cp.0_2>)
100618e6:	2307      	movs	r3, #7
100618e8:	f000 fe44 	bl	10062574 <CST_init>
100618ec:	bd80      	pop	{r7, pc}
100618ee:	46c0      	nop			@ (mov r8, r8)

100618f0 <__arm_cp.0_0>:
100618f0:	20001108 	.word	0x20001108

100618f4 <__arm_cp.0_1>:
100618f4:	20001140 	.word	0x20001140

100618f8 <__arm_cp.0_2>:
100618f8:	100618fd 	.word	0x100618fd

100618fc <smp_timers_cb_wrapper>:
100618fc:	b580      	push	{r7, lr}
100618fe:	6940      	ldr	r0, [r0, #20]
10061900:	4901      	ldr	r1, [pc, #4]	@ (10061908 <__arm_cp.1_0>)
10061902:	f000 ff10 	bl	10062726 <cst_sharedCallback>
10061906:	bd80      	pop	{r7, pc}

10061908 <__arm_cp.1_0>:
10061908:	100619a5 	.word	0x100619a5

1006190c <smp_timer_reset>:
1006190c:	b510      	push	{r4, lr}
1006190e:	2900      	cmp	r1, #0
10061910:	d006      	beq.n	10061920 <smp_timer_reset+0x14>
10061912:	2486      	movs	r4, #134	@ 0x86
10061914:	2901      	cmp	r1, #1
10061916:	d11b      	bne.n	10061950 <smp_timer_reset+0x44>
10061918:	2a02      	cmp	r2, #2
1006191a:	d819      	bhi.n	10061950 <smp_timer_reset+0x44>
1006191c:	2100      	movs	r1, #0
1006191e:	e000      	b.n	10061922 <smp_timer_reset+0x16>
10061920:	2103      	movs	r1, #3
10061922:	2801      	cmp	r0, #1
10061924:	d00a      	beq.n	1006193c <smp_timer_reset+0x30>
10061926:	2800      	cmp	r0, #0
10061928:	d111      	bne.n	1006194e <smp_timer_reset+0x42>
1006192a:	1888      	adds	r0, r1, r2
1006192c:	b2c1      	uxtb	r1, r0
1006192e:	4809      	ldr	r0, [pc, #36]	@ (10061954 <__arm_cp.2_0>)
10061930:	6800      	ldr	r0, [r0, #0]
10061932:	3008      	adds	r0, #8
10061934:	2201      	movs	r2, #1
10061936:	f000 fe68 	bl	1006260a <CST_start>
1006193a:	e006      	b.n	1006194a <smp_timer_reset+0x3e>
1006193c:	1888      	adds	r0, r1, r2
1006193e:	b2c1      	uxtb	r1, r0
10061940:	4804      	ldr	r0, [pc, #16]	@ (10061954 <__arm_cp.2_0>)
10061942:	6800      	ldr	r0, [r0, #0]
10061944:	3008      	adds	r0, #8
10061946:	f000 fe2a 	bl	1006259e <CST_stop>
1006194a:	4604      	mov	r4, r0
1006194c:	e000      	b.n	10061950 <smp_timer_reset+0x44>
1006194e:	2400      	movs	r4, #0
10061950:	4620      	mov	r0, r4
10061952:	bd10      	pop	{r4, pc}

10061954 <__arm_cp.2_0>:
10061954:	20001140 	.word	0x20001140

10061958 <smp_timers_protocol_timeout_cb>:
10061958:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1006195a:	4605      	mov	r5, r0
1006195c:	2070      	movs	r0, #112	@ 0x70
1006195e:	9002      	str	r0, [sp, #8]
10061960:	4345      	muls	r5, r0
10061962:	480f      	ldr	r0, [pc, #60]	@ (100619a0 <__arm_cp.3_0>)
10061964:	6800      	ldr	r0, [r0, #0]
10061966:	21a4      	movs	r1, #164	@ 0xa4
10061968:	9101      	str	r1, [sp, #4]
1006196a:	5840      	ldr	r0, [r0, r1]
1006196c:	1947      	adds	r7, r0, r5
1006196e:	8939      	ldrh	r1, [r7, #8]
10061970:	2002      	movs	r0, #2
10061972:	2401      	movs	r4, #1
10061974:	2600      	movs	r6, #0
10061976:	4622      	mov	r2, r4
10061978:	4633      	mov	r3, r6
1006197a:	f002 fa39 	bl	10063df0 <aci_gap_pairing_complete_event_push_noinline>
1006197e:	4638      	mov	r0, r7
10061980:	4621      	mov	r1, r4
10061982:	f004 fe0f 	bl	100665a4 <smp_pp3_pairing_completed_update_stats>
10061986:	8938      	ldrh	r0, [r7, #8]
10061988:	f7ff ff88 	bl	1006189c <smp_rxp_flush_packet_queues>
1006198c:	4804      	ldr	r0, [pc, #16]	@ (100619a0 <__arm_cp.3_0>)
1006198e:	6800      	ldr	r0, [r0, #0]
10061990:	9901      	ldr	r1, [sp, #4]
10061992:	5840      	ldr	r0, [r0, r1]
10061994:	1940      	adds	r0, r0, r5
10061996:	4631      	mov	r1, r6
10061998:	9a02      	ldr	r2, [sp, #8]
1006199a:	f7e4 fb6b 	bl	10046074 <BLEPLAT_MemSet>
1006199e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100619a0 <__arm_cp.3_0>:
100619a0:	20001140 	.word	0x20001140

100619a4 <smp_timers_cb>:
100619a4:	b580      	push	{r7, lr}
100619a6:	2802      	cmp	r0, #2
100619a8:	d802      	bhi.n	100619b0 <smp_timers_cb+0xc>
100619aa:	f005 f959 	bl	10066c60 <smp_cmn_repeated_attacks_timer_cb>
100619ae:	bd80      	pop	{r7, pc}
100619b0:	4904      	ldr	r1, [pc, #16]	@ (100619c4 <__arm_cp.4_0>)
100619b2:	7ac9      	ldrb	r1, [r1, #11]
100619b4:	1cc9      	adds	r1, r1, #3
100619b6:	4281      	cmp	r1, r0
100619b8:	d903      	bls.n	100619c2 <smp_timers_cb+0x1e>
100619ba:	1ec0      	subs	r0, r0, #3
100619bc:	b2c0      	uxtb	r0, r0
100619be:	f7ff ffcb 	bl	10061958 <smp_timers_protocol_timeout_cb>
100619c2:	bd80      	pop	{r7, pc}

100619c4 <__arm_cp.4_0>:
100619c4:	20001108 	.word	0x20001108

100619c8 <smp_init>:
100619c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100619ca:	2029      	movs	r0, #41	@ 0x29
100619cc:	00c1      	lsls	r1, r0, #3
100619ce:	2401      	movs	r4, #1
100619d0:	4d20      	ldr	r5, [pc, #128]	@ (10061a54 <__arm_cp.0_0>)
100619d2:	4620      	mov	r0, r4
100619d4:	47a8      	blx	r5
100619d6:	4e20      	ldr	r6, [pc, #128]	@ (10061a58 <__arm_cp.0_1>)
100619d8:	6030      	str	r0, [r6, #0]
100619da:	4f20      	ldr	r7, [pc, #128]	@ (10061a5c <__arm_cp.0_2>)
100619dc:	7af8      	ldrb	r0, [r7, #11]
100619de:	2170      	movs	r1, #112	@ 0x70
100619e0:	47a8      	blx	r5
100619e2:	6831      	ldr	r1, [r6, #0]
100619e4:	22a4      	movs	r2, #164	@ 0xa4
100619e6:	5088      	str	r0, [r1, r2]
100619e8:	f005 f8c2 	bl	10066b70 <smp_cmn_rejectlist_init>
100619ec:	2128      	movs	r1, #40	@ 0x28
100619ee:	4620      	mov	r0, r4
100619f0:	47a8      	blx	r5
100619f2:	6831      	ldr	r1, [r6, #0]
100619f4:	22ac      	movs	r2, #172	@ 0xac
100619f6:	5088      	str	r0, [r1, r2]
100619f8:	7af8      	ldrb	r0, [r7, #11]
100619fa:	1cc0      	adds	r0, r0, #3
100619fc:	b2c0      	uxtb	r0, r0
100619fe:	1c41      	adds	r1, r0, #1
10061a00:	4d17      	ldr	r5, [pc, #92]	@ (10061a60 <__arm_cp.0_3>)
10061a02:	4628      	mov	r0, r5
10061a04:	4622      	mov	r2, r4
10061a06:	f7fd fd3f 	bl	1005f488 <csmem_mem_assign>
10061a0a:	6831      	ldr	r1, [r6, #0]
10061a0c:	6288      	str	r0, [r1, #40]	@ 0x28
10061a0e:	7af8      	ldrb	r0, [r7, #11]
10061a10:	1cc0      	adds	r0, r0, #3
10061a12:	b2c1      	uxtb	r1, r0
10061a14:	2202      	movs	r2, #2
10061a16:	4628      	mov	r0, r5
10061a18:	f7fd fd36 	bl	1005f488 <csmem_mem_assign>
10061a1c:	6831      	ldr	r1, [r6, #0]
10061a1e:	62c8      	str	r0, [r1, #44]	@ 0x2c
10061a20:	4608      	mov	r0, r1
10061a22:	f000 ff3b 	bl	1006289c <ACL_list_init>
10061a26:	f7ff ff55 	bl	100618d4 <smp_timer_init>
10061a2a:	6830      	ldr	r0, [r6, #0]
10061a2c:	2142      	movs	r1, #66	@ 0x42
10061a2e:	2500      	movs	r5, #0
10061a30:	5245      	strh	r5, [r0, r1]
10061a32:	2140      	movs	r1, #64	@ 0x40
10061a34:	2203      	movs	r2, #3
10061a36:	5442      	strb	r2, [r0, r1]
10061a38:	490a      	ldr	r1, [pc, #40]	@ (10061a64 <__arm_cp.0_4>)
10061a3a:	6304      	str	r4, [r0, #48]	@ 0x30
10061a3c:	6341      	str	r1, [r0, #52]	@ 0x34
10061a3e:	6385      	str	r5, [r0, #56]	@ 0x38
10061a40:	3044      	adds	r0, #68	@ 0x44
10061a42:	2110      	movs	r1, #16
10061a44:	462a      	mov	r2, r5
10061a46:	f001 f85b 	bl	10062b00 <HAL_Generate_Random_Bytes_To>
10061a4a:	4628      	mov	r0, r5
10061a4c:	f7ef fff5 	bl	10051a3a <smp_scp_init_ucfg>
10061a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10061a52:	46c0      	nop			@ (mov r8, r8)

10061a54 <__arm_cp.0_0>:
10061a54:	1005f4ad 	.word	0x1005f4ad

10061a58 <__arm_cp.0_1>:
10061a58:	20001140 	.word	0x20001140

10061a5c <__arm_cp.0_2>:
10061a5c:	20001108 	.word	0x20001108

10061a60 <__arm_cp.0_3>:
10061a60:	20001104 	.word	0x20001104

10061a64 <__arm_cp.0_4>:
10061a64:	07071007 	.word	0x07071007

10061a68 <smp_sap_aci_set_io_capabilities>:
10061a68:	b510      	push	{r4, lr}
10061a6a:	4604      	mov	r4, r0
10061a6c:	f000 f80c 	bl	10061a88 <smp_check_is_any_pairing_ongoing>
10061a70:	2800      	cmp	r0, #0
10061a72:	d001      	beq.n	10061a78 <smp_sap_aci_set_io_capabilities+0x10>
10061a74:	200c      	movs	r0, #12
10061a76:	bd10      	pop	{r4, pc}
10061a78:	4802      	ldr	r0, [pc, #8]	@ (10061a84 <__arm_cp.2_0>)
10061a7a:	6800      	ldr	r0, [r0, #0]
10061a7c:	2140      	movs	r1, #64	@ 0x40
10061a7e:	5444      	strb	r4, [r0, r1]
10061a80:	2000      	movs	r0, #0
10061a82:	bd10      	pop	{r4, pc}

10061a84 <__arm_cp.2_0>:
10061a84:	20001140 	.word	0x20001140

10061a88 <smp_check_is_any_pairing_ongoing>:
10061a88:	b570      	push	{r4, r5, r6, lr}
10061a8a:	4810      	ldr	r0, [pc, #64]	@ (10061acc <__arm_cp.3_0>)
10061a8c:	6800      	ldr	r0, [r0, #0]
10061a8e:	2134      	movs	r1, #52	@ 0x34
10061a90:	5c40      	ldrb	r0, [r0, r1]
10061a92:	2170      	movs	r1, #112	@ 0x70
10061a94:	4341      	muls	r1, r0
10061a96:	480e      	ldr	r0, [pc, #56]	@ (10061ad0 <__arm_cp.3_1>)
10061a98:	6802      	ldr	r2, [r0, #0]
10061a9a:	32a4      	adds	r2, #164	@ 0xa4
10061a9c:	2000      	movs	r0, #0
10061a9e:	4603      	mov	r3, r0
10061aa0:	4299      	cmp	r1, r3
10061aa2:	d012      	beq.n	10061aca <smp_check_is_any_pairing_ongoing+0x42>
10061aa4:	6814      	ldr	r4, [r2, #0]
10061aa6:	18e5      	adds	r5, r4, r3
10061aa8:	7aac      	ldrb	r4, [r5, #10]
10061aaa:	2660      	movs	r6, #96	@ 0x60
10061aac:	5dad      	ldrb	r5, [r5, r6]
10061aae:	07ed      	lsls	r5, r5, #31
10061ab0:	d104      	bne.n	10061abc <smp_check_is_any_pairing_ongoing+0x34>
10061ab2:	3460      	adds	r4, #96	@ 0x60
10061ab4:	b2e4      	uxtb	r4, r4
10061ab6:	2c51      	cmp	r4, #81	@ 0x51
10061ab8:	d204      	bcs.n	10061ac4 <smp_check_is_any_pairing_ongoing+0x3c>
10061aba:	e005      	b.n	10061ac8 <smp_check_is_any_pairing_ongoing+0x40>
10061abc:	3450      	adds	r4, #80	@ 0x50
10061abe:	b2e4      	uxtb	r4, r4
10061ac0:	2c41      	cmp	r4, #65	@ 0x41
10061ac2:	d301      	bcc.n	10061ac8 <smp_check_is_any_pairing_ongoing+0x40>
10061ac4:	3370      	adds	r3, #112	@ 0x70
10061ac6:	e7eb      	b.n	10061aa0 <smp_check_is_any_pairing_ongoing+0x18>
10061ac8:	2001      	movs	r0, #1
10061aca:	bd70      	pop	{r4, r5, r6, pc}

10061acc <__arm_cp.3_0>:
10061acc:	200010a0 	.word	0x200010a0

10061ad0 <__arm_cp.3_1>:
10061ad0:	20001140 	.word	0x20001140

10061ad4 <smp_sap_aci_set_authentication_req>:
10061ad4:	b510      	push	{r4, lr}
10061ad6:	4604      	mov	r4, r0
10061ad8:	f7ff ffd6 	bl	10061a88 <smp_check_is_any_pairing_ongoing>
10061adc:	7861      	ldrb	r1, [r4, #1]
10061ade:	2901      	cmp	r1, #1
10061ae0:	d103      	bne.n	10061aea <smp_sap_aci_set_authentication_req+0x16>
10061ae2:	2800      	cmp	r0, #0
10061ae4:	d105      	bne.n	10061af2 <smp_sap_aci_set_authentication_req+0x1e>
10061ae6:	4602      	mov	r2, r0
10061ae8:	e004      	b.n	10061af4 <smp_sap_aci_set_authentication_req+0x20>
10061aea:	2800      	cmp	r0, #0
10061aec:	d00f      	beq.n	10061b0e <smp_sap_aci_set_authentication_req+0x3a>
10061aee:	220c      	movs	r2, #12
10061af0:	e016      	b.n	10061b20 <smp_sap_aci_set_authentication_req+0x4c>
10061af2:	220c      	movs	r2, #12
10061af4:	490b      	ldr	r1, [pc, #44]	@ (10061b24 <__arm_cp.4_0>)
10061af6:	6809      	ldr	r1, [r1, #0]
10061af8:	2340      	movs	r3, #64	@ 0x40
10061afa:	5ccb      	ldrb	r3, [r1, r3]
10061afc:	2b03      	cmp	r3, #3
10061afe:	d101      	bne.n	10061b04 <smp_sap_aci_set_authentication_req+0x30>
10061b00:	226e      	movs	r2, #110	@ 0x6e
10061b02:	43d2      	mvns	r2, r2
10061b04:	2b03      	cmp	r3, #3
10061b06:	d00b      	beq.n	10061b20 <smp_sap_aci_set_authentication_req+0x4c>
10061b08:	2800      	cmp	r0, #0
10061b0a:	d002      	beq.n	10061b12 <smp_sap_aci_set_authentication_req+0x3e>
10061b0c:	e008      	b.n	10061b20 <smp_sap_aci_set_authentication_req+0x4c>
10061b0e:	4805      	ldr	r0, [pc, #20]	@ (10061b24 <__arm_cp.4_0>)
10061b10:	6801      	ldr	r1, [r0, #0]
10061b12:	3130      	adds	r1, #48	@ 0x30
10061b14:	2210      	movs	r2, #16
10061b16:	4608      	mov	r0, r1
10061b18:	4621      	mov	r1, r4
10061b1a:	f7e4 fa9b 	bl	10046054 <BLEPLAT_MemCpy>
10061b1e:	2200      	movs	r2, #0
10061b20:	b2d0      	uxtb	r0, r2
10061b22:	bd10      	pop	{r4, pc}

10061b24 <__arm_cp.4_0>:
10061b24:	20001140 	.word	0x20001140

10061b28 <smp_sap_aci_passkey_response>:
10061b28:	b510      	push	{r4, lr}
10061b2a:	460c      	mov	r4, r1
10061b2c:	f7ff f88e 	bl	10060c4c <smp_get_remote_device_list_item>
10061b30:	2800      	cmp	r0, #0
10061b32:	d010      	beq.n	10061b56 <smp_sap_aci_passkey_response+0x2e>
10061b34:	7cc1      	ldrb	r1, [r0, #19]
10061b36:	2902      	cmp	r1, #2
10061b38:	d10f      	bne.n	10061b5a <smp_sap_aci_passkey_response+0x32>
10061b3a:	4909      	ldr	r1, [pc, #36]	@ (10061b60 <__arm_cp.5_0>)
10061b3c:	6809      	ldr	r1, [r1, #0]
10061b3e:	638c      	str	r4, [r1, #56]	@ 0x38
10061b40:	7bc1      	ldrb	r1, [r0, #15]
10061b42:	2210      	movs	r2, #16
10061b44:	430a      	orrs	r2, r1
10061b46:	73c2      	strb	r2, [r0, #15]
10061b48:	200e      	movs	r0, #14
10061b4a:	f000 fcb5 	bl	100624b8 <tsk_notify_idx>
10061b4e:	f7e1 ffe4 	bl	10043b1a <BLE_STACK_ProcessRequest>
10061b52:	2000      	movs	r0, #0
10061b54:	bd10      	pop	{r4, pc}
10061b56:	2002      	movs	r0, #2
10061b58:	bd10      	pop	{r4, pc}
10061b5a:	200c      	movs	r0, #12
10061b5c:	bd10      	pop	{r4, pc}
10061b5e:	46c0      	nop			@ (mov r8, r8)

10061b60 <__arm_cp.5_0>:
10061b60:	20001140 	.word	0x20001140

10061b64 <smp_sap_aci_scp_numeric_comparison_response>:
10061b64:	b510      	push	{r4, lr}
10061b66:	460c      	mov	r4, r1
10061b68:	f7ff f870 	bl	10060c4c <smp_get_remote_device_list_item>
10061b6c:	2800      	cmp	r0, #0
10061b6e:	d007      	beq.n	10061b80 <smp_sap_aci_scp_numeric_comparison_response+0x1c>
10061b70:	7a81      	ldrb	r1, [r0, #10]
10061b72:	29c1      	cmp	r1, #193	@ 0xc1
10061b74:	d106      	bne.n	10061b84 <smp_sap_aci_scp_numeric_comparison_response+0x20>
10061b76:	2c00      	cmp	r4, #0
10061b78:	d006      	beq.n	10061b88 <smp_sap_aci_scp_numeric_comparison_response+0x24>
10061b7a:	21ba      	movs	r1, #186	@ 0xba
10061b7c:	7281      	strb	r1, [r0, #10]
10061b7e:	e008      	b.n	10061b92 <smp_sap_aci_scp_numeric_comparison_response+0x2e>
10061b80:	2002      	movs	r0, #2
10061b82:	bd10      	pop	{r4, pc}
10061b84:	200c      	movs	r0, #12
10061b86:	bd10      	pop	{r4, pc}
10061b88:	210c      	movs	r1, #12
10061b8a:	2200      	movs	r2, #0
10061b8c:	2301      	movs	r3, #1
10061b8e:	f004 fd59 	bl	10066644 <smp_pp3_pairing_failed_send>
10061b92:	200e      	movs	r0, #14
10061b94:	f000 fc90 	bl	100624b8 <tsk_notify_idx>
10061b98:	f7e1 ffbf 	bl	10043b1a <BLE_STACK_ProcessRequest>
10061b9c:	2000      	movs	r0, #0
10061b9e:	bd10      	pop	{r4, pc}

10061ba0 <smp_sap_hci_le_connection_complete_evt_hndl>:
10061ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
10061ba2:	b089      	sub	sp, #36	@ 0x24
10061ba4:	9304      	str	r3, [sp, #16]
10061ba6:	4615      	mov	r5, r2
10061ba8:	9105      	str	r1, [sp, #20]
10061baa:	4607      	mov	r7, r0
10061bac:	ae06      	add	r6, sp, #24
10061bae:	ac08      	add	r4, sp, #32
10061bb0:	4630      	mov	r0, r6
10061bb2:	4621      	mov	r1, r4
10061bb4:	f7f2 fafa 	bl	100541ac <GAP_get_current_address>
10061bb8:	7822      	ldrb	r2, [r4, #0]
10061bba:	2000      	movs	r0, #0
10061bbc:	9500      	str	r5, [sp, #0]
10061bbe:	9904      	ldr	r1, [sp, #16]
10061bc0:	9101      	str	r1, [sp, #4]
10061bc2:	9002      	str	r0, [sp, #8]
10061bc4:	4638      	mov	r0, r7
10061bc6:	9905      	ldr	r1, [sp, #20]
10061bc8:	4633      	mov	r3, r6
10061bca:	f000 f803 	bl	10061bd4 <smp_connection_complete_handler>
10061bce:	b009      	add	sp, #36	@ 0x24
10061bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10061bd4 <smp_connection_complete_handler>:
10061bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
10061bd6:	b087      	sub	sp, #28
10061bd8:	9302      	str	r3, [sp, #8]
10061bda:	9200      	str	r2, [sp, #0]
10061bdc:	9101      	str	r1, [sp, #4]
10061bde:	493a      	ldr	r1, [pc, #232]	@ (10061cc8 <__arm_cp.1_0>)
10061be0:	6809      	ldr	r1, [r1, #0]
10061be2:	2334      	movs	r3, #52	@ 0x34
10061be4:	5cca      	ldrb	r2, [r1, r3]
10061be6:	2770      	movs	r7, #112	@ 0x70
10061be8:	4357      	muls	r7, r2
10061bea:	2500      	movs	r5, #0
10061bec:	43ec      	mvns	r4, r5
10061bee:	4b37      	ldr	r3, [pc, #220]	@ (10061ccc <__arm_cp.1_1>)
10061bf0:	681e      	ldr	r6, [r3, #0]
10061bf2:	36a4      	adds	r6, #164	@ 0xa4
10061bf4:	990c      	ldr	r1, [sp, #48]	@ 0x30
10061bf6:	9106      	str	r1, [sp, #24]
10061bf8:	990e      	ldr	r1, [sp, #56]	@ 0x38
10061bfa:	9103      	str	r1, [sp, #12]
10061bfc:	990d      	ldr	r1, [sp, #52]	@ 0x34
10061bfe:	9105      	str	r1, [sp, #20]
10061c00:	9404      	str	r4, [sp, #16]
10061c02:	42af      	cmp	r7, r5
10061c04:	d05e      	beq.n	10061cc4 <smp_connection_complete_handler+0xf0>
10061c06:	6833      	ldr	r3, [r6, #0]
10061c08:	1959      	adds	r1, r3, r5
10061c0a:	8909      	ldrh	r1, [r1, #8]
10061c0c:	3570      	adds	r5, #112	@ 0x70
10061c0e:	1c64      	adds	r4, r4, #1
10061c10:	2900      	cmp	r1, #0
10061c12:	d1f6      	bne.n	10061c02 <smp_connection_complete_handler+0x2e>
10061c14:	4294      	cmp	r4, r2
10061c16:	d255      	bcs.n	10061cc4 <smp_connection_complete_handler+0xf0>
10061c18:	195f      	adds	r7, r3, r5
10061c1a:	4639      	mov	r1, r7
10061c1c:	3968      	subs	r1, #104	@ 0x68
10061c1e:	8008      	strh	r0, [r1, #0]
10061c20:	4638      	mov	r0, r7
10061c22:	3870      	subs	r0, #112	@ 0x70
10061c24:	2105      	movs	r1, #5
10061c26:	7001      	strb	r1, [r0, #0]
10061c28:	4638      	mov	r0, r7
10061c2a:	380f      	subs	r0, #15
10061c2c:	9900      	ldr	r1, [sp, #0]
10061c2e:	7001      	strb	r1, [r0, #0]
10061c30:	4638      	mov	r0, r7
10061c32:	3810      	subs	r0, #16
10061c34:	9000      	str	r0, [sp, #0]
10061c36:	9901      	ldr	r1, [sp, #4]
10061c38:	7001      	strb	r1, [r0, #0]
10061c3a:	4638      	mov	r0, r7
10061c3c:	380e      	subs	r0, #14
10061c3e:	2206      	movs	r2, #6
10061c40:	4b23      	ldr	r3, [pc, #140]	@ (10061cd0 <__arm_cp.1_2>)
10061c42:	9902      	ldr	r1, [sp, #8]
10061c44:	4616      	mov	r6, r2
10061c46:	4798      	blx	r3
10061c48:	20fe      	movs	r0, #254	@ 0xfe
10061c4a:	9a06      	ldr	r2, [sp, #24]
10061c4c:	4010      	ands	r0, r2
10061c4e:	2101      	movs	r1, #1
10061c50:	400a      	ands	r2, r1
10061c52:	2802      	cmp	r0, #2
10061c54:	d000      	beq.n	10061c58 <smp_connection_complete_handler+0x84>
10061c56:	4611      	mov	r1, r2
10061c58:	9206      	str	r2, [sp, #24]
10061c5a:	463c      	mov	r4, r7
10061c5c:	3c6f      	subs	r4, #111	@ 0x6f
10061c5e:	7021      	strb	r1, [r4, #0]
10061c60:	2802      	cmp	r0, #2
10061c62:	9805      	ldr	r0, [sp, #20]
10061c64:	9903      	ldr	r1, [sp, #12]
10061c66:	d000      	beq.n	10061c6a <smp_connection_complete_handler+0x96>
10061c68:	4601      	mov	r1, r0
10061c6a:	463d      	mov	r5, r7
10061c6c:	3d6e      	subs	r5, #110	@ 0x6e
10061c6e:	4628      	mov	r0, r5
10061c70:	4632      	mov	r2, r6
10061c72:	4b17      	ldr	r3, [pc, #92]	@ (10061cd0 <__arm_cp.1_2>)
10061c74:	4798      	blx	r3
10061c76:	4638      	mov	r0, r7
10061c78:	3817      	subs	r0, #23
10061c7a:	9906      	ldr	r1, [sp, #24]
10061c7c:	7001      	strb	r1, [r0, #0]
10061c7e:	4638      	mov	r0, r7
10061c80:	3816      	subs	r0, #22
10061c82:	9905      	ldr	r1, [sp, #20]
10061c84:	4632      	mov	r2, r6
10061c86:	4b12      	ldr	r3, [pc, #72]	@ (10061cd0 <__arm_cp.1_2>)
10061c88:	4798      	blx	r3
10061c8a:	4638      	mov	r0, r7
10061c8c:	3858      	subs	r0, #88	@ 0x58
10061c8e:	2100      	movs	r1, #0
10061c90:	2204      	movs	r2, #4
10061c92:	f7e4 f9ef 	bl	10046074 <BLEPLAT_MemSet>
10061c96:	1f38      	subs	r0, r7, #4
10061c98:	3f66      	subs	r7, #102	@ 0x66
10061c9a:	2110      	movs	r1, #16
10061c9c:	7039      	strb	r1, [r7, #0]
10061c9e:	9904      	ldr	r1, [sp, #16]
10061ca0:	6001      	str	r1, [r0, #0]
10061ca2:	7820      	ldrb	r0, [r4, #0]
10061ca4:	4629      	mov	r1, r5
10061ca6:	f005 f84b 	bl	10066d40 <smp_cmn_is_peer_rejectlisted>
10061caa:	2800      	cmp	r0, #0
10061cac:	d005      	beq.n	10061cba <smp_connection_complete_handler+0xe6>
10061cae:	9800      	ldr	r0, [sp, #0]
10061cb0:	7800      	ldrb	r0, [r0, #0]
10061cb2:	07c0      	lsls	r0, r0, #31
10061cb4:	d001      	beq.n	10061cba <smp_connection_complete_handler+0xe6>
10061cb6:	20fb      	movs	r0, #251	@ 0xfb
10061cb8:	7038      	strb	r0, [r7, #0]
10061cba:	200e      	movs	r0, #14
10061cbc:	f000 fbfc 	bl	100624b8 <tsk_notify_idx>
10061cc0:	f7e1 ff2b 	bl	10043b1a <BLE_STACK_ProcessRequest>
10061cc4:	b007      	add	sp, #28
10061cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061cc8 <__arm_cp.1_0>:
10061cc8:	200010a0 	.word	0x200010a0

10061ccc <__arm_cp.1_1>:
10061ccc:	20001140 	.word	0x20001140

10061cd0 <__arm_cp.1_2>:
10061cd0:	10046055 	.word	0x10046055

10061cd4 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl>:
10061cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
10061cd6:	b089      	sub	sp, #36	@ 0x24
10061cd8:	9304      	str	r3, [sp, #16]
10061cda:	4617      	mov	r7, r2
10061cdc:	9105      	str	r1, [sp, #20]
10061cde:	4606      	mov	r6, r0
10061ce0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
10061ce2:	4620      	mov	r0, r4
10061ce4:	f7fc fef4 	bl	1005ead0 <Is_Address_Initialized>
10061ce8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
10061cea:	2800      	cmp	r0, #0
10061cec:	d008      	beq.n	10061d00 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl+0x2c>
10061cee:	a807      	add	r0, sp, #28
10061cf0:	2206      	movs	r2, #6
10061cf2:	4621      	mov	r1, r4
10061cf4:	f7e4 f9ae 	bl	10046054 <BLEPLAT_MemCpy>
10061cf8:	a806      	add	r0, sp, #24
10061cfa:	2201      	movs	r2, #1
10061cfc:	7002      	strb	r2, [r0, #0]
10061cfe:	e005      	b.n	10061d0c <smp_sap_hci_le_enhanced_connection_complete_evt_hndl+0x38>
10061d00:	a807      	add	r0, sp, #28
10061d02:	ac06      	add	r4, sp, #24
10061d04:	4621      	mov	r1, r4
10061d06:	f7f2 fa51 	bl	100541ac <GAP_get_current_address>
10061d0a:	7822      	ldrb	r2, [r4, #0]
10061d0c:	9700      	str	r7, [sp, #0]
10061d0e:	9804      	ldr	r0, [sp, #16]
10061d10:	9001      	str	r0, [sp, #4]
10061d12:	9502      	str	r5, [sp, #8]
10061d14:	ab07      	add	r3, sp, #28
10061d16:	4630      	mov	r0, r6
10061d18:	9905      	ldr	r1, [sp, #20]
10061d1a:	f7ff ff5b 	bl	10061bd4 <smp_connection_complete_handler>
10061d1e:	b009      	add	sp, #36	@ 0x24
10061d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10061d24 <smp_sap_hci_le_long_term_key_request_evt_hndl>:
10061d24:	b5f0      	push	{r4, r5, r6, r7, lr}
10061d26:	b089      	sub	sp, #36	@ 0x24
10061d28:	4615      	mov	r5, r2
10061d2a:	460e      	mov	r6, r1
10061d2c:	f7fe ff8e 	bl	10060c4c <smp_get_remote_device_list_item>
10061d30:	2800      	cmp	r0, #0
10061d32:	d070      	beq.n	10061e16 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xf2>
10061d34:	4604      	mov	r4, r0
10061d36:	7a80      	ldrb	r0, [r0, #10]
10061d38:	28bc      	cmp	r0, #188	@ 0xbc
10061d3a:	d106      	bne.n	10061d4a <smp_sap_hci_le_long_term_key_request_evt_hndl+0x26>
10061d3c:	8927      	ldrh	r7, [r4, #8]
10061d3e:	a808      	add	r0, sp, #32
10061d40:	2100      	movs	r1, #0
10061d42:	8001      	strh	r1, [r0, #0]
10061d44:	4626      	mov	r6, r4
10061d46:	3628      	adds	r6, #40	@ 0x28
10061d48:	e056      	b.n	10061df8 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd4>
10061d4a:	4627      	mov	r7, r4
10061d4c:	3730      	adds	r7, #48	@ 0x30
10061d4e:	7de1      	ldrb	r1, [r4, #23]
10061d50:	0709      	lsls	r1, r1, #28
10061d52:	d409      	bmi.n	10061d68 <smp_sap_hci_le_long_term_key_request_evt_hndl+0x44>
10061d54:	4620      	mov	r0, r4
10061d56:	3028      	adds	r0, #40	@ 0x28
10061d58:	2208      	movs	r2, #8
10061d5a:	4631      	mov	r1, r6
10061d5c:	f7e4 f97a 	bl	10046054 <BLEPLAT_MemCpy>
10061d60:	703d      	strb	r5, [r7, #0]
10061d62:	0a28      	lsrs	r0, r5, #8
10061d64:	7078      	strb	r0, [r7, #1]
10061d66:	7aa0      	ldrb	r0, [r4, #10]
10061d68:	8921      	ldrh	r1, [r4, #8]
10061d6a:	9102      	str	r1, [sp, #8]
10061d6c:	a908      	add	r1, sp, #32
10061d6e:	2200      	movs	r2, #0
10061d70:	800a      	strh	r2, [r1, #0]
10061d72:	4626      	mov	r6, r4
10061d74:	3628      	adds	r6, #40	@ 0x28
10061d76:	28bc      	cmp	r0, #188	@ 0xbc
10061d78:	d03d      	beq.n	10061df6 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd2>
10061d7a:	4625      	mov	r5, r4
10061d7c:	351c      	adds	r5, #28
10061d7e:	28f1      	cmp	r0, #241	@ 0xf1
10061d80:	d10f      	bne.n	10061da2 <smp_sap_hci_le_long_term_key_request_evt_hndl+0x7e>
10061d82:	7de0      	ldrb	r0, [r4, #23]
10061d84:	0700      	lsls	r0, r0, #28
10061d86:	d436      	bmi.n	10061df6 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd2>
10061d88:	aa07      	add	r2, sp, #28
10061d8a:	9201      	str	r2, [sp, #4]
10061d8c:	4628      	mov	r0, r5
10061d8e:	4631      	mov	r1, r6
10061d90:	f7fe f88e 	bl	1005feb0 <smp_sap_crt_generate_ediv>
10061d94:	2202      	movs	r2, #2
10061d96:	9801      	ldr	r0, [sp, #4]
10061d98:	4639      	mov	r1, r7
10061d9a:	f7e4 f97b 	bl	10046094 <BLEPLAT_MemCmp>
10061d9e:	2800      	cmp	r0, #0
10061da0:	d021      	beq.n	10061de6 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xc2>
10061da2:	4638      	mov	r0, r7
10061da4:	4631      	mov	r1, r6
10061da6:	4622      	mov	r2, r4
10061da8:	f004 fb81 	bl	100664ae <smp_dep_sdb_find_matching_ltk_read_record>
10061dac:	2800      	cmp	r0, #0
10061dae:	d01a      	beq.n	10061de6 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xc2>
10061db0:	9d02      	ldr	r5, [sp, #8]
10061db2:	4628      	mov	r0, r5
10061db4:	f7f5 fb77 	bl	100574a6 <hci_le_long_term_key_request_negative_reply_api>
10061db8:	7e20      	ldrb	r0, [r4, #24]
10061dba:	0780      	lsls	r0, r0, #30
10061dbc:	d00c      	beq.n	10061dd8 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xb4>
10061dbe:	4628      	mov	r0, r5
10061dc0:	f7fe ff24 	bl	10060c0c <smp_get_remote_device_list_index>
10061dc4:	4602      	mov	r2, r0
10061dc6:	2001      	movs	r0, #1
10061dc8:	2100      	movs	r1, #0
10061dca:	4b15      	ldr	r3, [pc, #84]	@ (10061e20 <__arm_cp.3_1>)
10061dcc:	f7ff fd9e 	bl	1006190c <smp_timer_reset>
10061dd0:	7e20      	ldrb	r0, [r4, #24]
10061dd2:	21fc      	movs	r1, #252	@ 0xfc
10061dd4:	4001      	ands	r1, r0
10061dd6:	7621      	strb	r1, [r4, #24]
10061dd8:	2002      	movs	r0, #2
10061dda:	2203      	movs	r2, #3
10061ddc:	2300      	movs	r3, #0
10061dde:	4629      	mov	r1, r5
10061de0:	f002 f806 	bl	10063df0 <aci_gap_pairing_complete_event_push_noinline>
10061de4:	e017      	b.n	10061e16 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xf2>
10061de6:	480d      	ldr	r0, [pc, #52]	@ (10061e1c <__arm_cp.3_0>)
10061de8:	6800      	ldr	r0, [r0, #0]
10061dea:	3008      	adds	r0, #8
10061dec:	aa08      	add	r2, sp, #32
10061dee:	4629      	mov	r1, r5
10061df0:	4633      	mov	r3, r6
10061df2:	f7fe f893 	bl	1005ff1c <smp_crt_diversify>
10061df6:	9f02      	ldr	r7, [sp, #8]
10061df8:	ad03      	add	r5, sp, #12
10061dfa:	2100      	movs	r1, #0
10061dfc:	2210      	movs	r2, #16
10061dfe:	4628      	mov	r0, r5
10061e00:	f7e4 f938 	bl	10046074 <BLEPLAT_MemSet>
10061e04:	7c22      	ldrb	r2, [r4, #16]
10061e06:	4628      	mov	r0, r5
10061e08:	4631      	mov	r1, r6
10061e0a:	f7e4 f923 	bl	10046054 <BLEPLAT_MemCpy>
10061e0e:	4638      	mov	r0, r7
10061e10:	4629      	mov	r1, r5
10061e12:	f7f5 fb39 	bl	10057488 <hci_le_long_term_key_request_reply_api>
10061e16:	b009      	add	sp, #36	@ 0x24
10061e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
10061e1a:	46c0      	nop			@ (mov r8, r8)

10061e1c <__arm_cp.3_0>:
10061e1c:	200010a0 	.word	0x200010a0

10061e20 <__arm_cp.3_1>:
10061e20:	00007530 	.word	0x00007530

10061e24 <smp_sap_hci_encryption_change_evt_hndl>:
10061e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10061e26:	460e      	mov	r6, r1
10061e28:	4605      	mov	r5, r0
10061e2a:	4610      	mov	r0, r2
10061e2c:	f7fe ff0e 	bl	10060c4c <smp_get_remote_device_list_item>
10061e30:	2800      	cmp	r0, #0
10061e32:	d056      	beq.n	10061ee2 <smp_sap_hci_encryption_change_evt_hndl+0xbe>
10061e34:	4604      	mov	r4, r0
10061e36:	4607      	mov	r7, r0
10061e38:	2e00      	cmp	r6, #0
10061e3a:	d00b      	beq.n	10061e54 <smp_sap_hci_encryption_change_evt_hndl+0x30>
10061e3c:	2000      	movs	r0, #0
10061e3e:	72b8      	strb	r0, [r7, #10]
10061e40:	3408      	adds	r4, #8
10061e42:	2201      	movs	r2, #1
10061e44:	2d06      	cmp	r5, #6
10061e46:	d132      	bne.n	10061eae <smp_sap_hci_encryption_change_evt_hndl+0x8a>
10061e48:	8939      	ldrh	r1, [r7, #8]
10061e4a:	4615      	mov	r5, r2
10061e4c:	2e06      	cmp	r6, #6
10061e4e:	d00e      	beq.n	10061e6e <smp_sap_hci_encryption_change_evt_hndl+0x4a>
10061e50:	2205      	movs	r2, #5
10061e52:	e00d      	b.n	10061e70 <smp_sap_hci_encryption_change_evt_hndl+0x4c>
10061e54:	7af9      	ldrb	r1, [r7, #11]
10061e56:	2001      	movs	r0, #1
10061e58:	4308      	orrs	r0, r1
10061e5a:	72f8      	strb	r0, [r7, #11]
10061e5c:	7cf9      	ldrb	r1, [r7, #19]
10061e5e:	1e89      	subs	r1, r1, #2
10061e60:	2902      	cmp	r1, #2
10061e62:	d810      	bhi.n	10061e86 <smp_sap_hci_encryption_change_evt_hndl+0x62>
10061e64:	7df9      	ldrb	r1, [r7, #23]
10061e66:	0709      	lsls	r1, r1, #28
10061e68:	d508      	bpl.n	10061e7c <smp_sap_hci_encryption_change_evt_hndl+0x58>
10061e6a:	2104      	movs	r1, #4
10061e6c:	e007      	b.n	10061e7e <smp_sap_hci_encryption_change_evt_hndl+0x5a>
10061e6e:	2204      	movs	r2, #4
10061e70:	2002      	movs	r0, #2
10061e72:	2300      	movs	r3, #0
10061e74:	f001 ffbc 	bl	10063df0 <aci_gap_pairing_complete_event_push_noinline>
10061e78:	462a      	mov	r2, r5
10061e7a:	e018      	b.n	10061eae <smp_sap_hci_encryption_change_evt_hndl+0x8a>
10061e7c:	2102      	movs	r1, #2
10061e7e:	22f9      	movs	r2, #249	@ 0xf9
10061e80:	4010      	ands	r0, r2
10061e82:	1840      	adds	r0, r0, r1
10061e84:	72f8      	strb	r0, [r7, #11]
10061e86:	7ab8      	ldrb	r0, [r7, #10]
10061e88:	28ad      	cmp	r0, #173	@ 0xad
10061e8a:	d005      	beq.n	10061e98 <smp_sap_hci_encryption_change_evt_hndl+0x74>
10061e8c:	28ae      	cmp	r0, #174	@ 0xae
10061e8e:	d005      	beq.n	10061e9c <smp_sap_hci_encryption_change_evt_hndl+0x78>
10061e90:	28bc      	cmp	r0, #188	@ 0xbc
10061e92:	d127      	bne.n	10061ee4 <smp_sap_hci_encryption_change_evt_hndl+0xc0>
10061e94:	20bf      	movs	r0, #191	@ 0xbf
10061e96:	e002      	b.n	10061e9e <smp_sap_hci_encryption_change_evt_hndl+0x7a>
10061e98:	20af      	movs	r0, #175	@ 0xaf
10061e9a:	e000      	b.n	10061e9e <smp_sap_hci_encryption_change_evt_hndl+0x7a>
10061e9c:	20f0      	movs	r0, #240	@ 0xf0
10061e9e:	72b8      	strb	r0, [r7, #10]
10061ea0:	3408      	adds	r4, #8
10061ea2:	200e      	movs	r0, #14
10061ea4:	f000 fb08 	bl	100624b8 <tsk_notify_idx>
10061ea8:	f7e1 fe37 	bl	10043b1a <BLE_STACK_ProcessRequest>
10061eac:	2200      	movs	r2, #0
10061eae:	2060      	movs	r0, #96	@ 0x60
10061eb0:	5c38      	ldrb	r0, [r7, r0]
10061eb2:	07c0      	lsls	r0, r0, #31
10061eb4:	d10b      	bne.n	10061ece <smp_sap_hci_encryption_change_evt_hndl+0xaa>
10061eb6:	7eb8      	ldrb	r0, [r7, #26]
10061eb8:	06c1      	lsls	r1, r0, #27
10061eba:	d505      	bpl.n	10061ec8 <smp_sap_hci_encryption_change_evt_hndl+0xa4>
10061ebc:	21ef      	movs	r1, #239	@ 0xef
10061ebe:	4001      	ands	r1, r0
10061ec0:	76b9      	strb	r1, [r7, #26]
10061ec2:	b241      	sxtb	r1, r0
10061ec4:	2900      	cmp	r1, #0
10061ec6:	d418      	bmi.n	10061efa <smp_sap_hci_encryption_change_evt_hndl+0xd6>
10061ec8:	2a00      	cmp	r2, #0
10061eca:	d119      	bne.n	10061f00 <smp_sap_hci_encryption_change_evt_hndl+0xdc>
10061ecc:	e009      	b.n	10061ee2 <smp_sap_hci_encryption_change_evt_hndl+0xbe>
10061ece:	7e38      	ldrb	r0, [r7, #24]
10061ed0:	21fc      	movs	r1, #252	@ 0xfc
10061ed2:	4001      	ands	r1, r0
10061ed4:	7639      	strb	r1, [r7, #24]
10061ed6:	2103      	movs	r1, #3
10061ed8:	4001      	ands	r1, r0
10061eda:	1e48      	subs	r0, r1, #1
10061edc:	4181      	sbcs	r1, r0
10061ede:	430a      	orrs	r2, r1
10061ee0:	d10e      	bne.n	10061f00 <smp_sap_hci_encryption_change_evt_hndl+0xdc>
10061ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10061ee4:	2d06      	cmp	r5, #6
10061ee6:	d1db      	bne.n	10061ea0 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
10061ee8:	28f1      	cmp	r0, #241	@ 0xf1
10061eea:	d1d9      	bne.n	10061ea0 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
10061eec:	8939      	ldrh	r1, [r7, #8]
10061eee:	2002      	movs	r0, #2
10061ef0:	2200      	movs	r2, #0
10061ef2:	4613      	mov	r3, r2
10061ef4:	f001 ff7c 	bl	10063df0 <aci_gap_pairing_complete_event_push_noinline>
10061ef8:	e7d2      	b.n	10061ea0 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
10061efa:	216f      	movs	r1, #111	@ 0x6f
10061efc:	4008      	ands	r0, r1
10061efe:	76b8      	strb	r0, [r7, #26]
10061f00:	8820      	ldrh	r0, [r4, #0]
10061f02:	f7fe fe83 	bl	10060c0c <smp_get_remote_device_list_index>
10061f06:	4602      	mov	r2, r0
10061f08:	2001      	movs	r0, #1
10061f0a:	2100      	movs	r1, #0
10061f0c:	4b01      	ldr	r3, [pc, #4]	@ (10061f14 <__arm_cp.4_0>)
10061f0e:	f7ff fcfd 	bl	1006190c <smp_timer_reset>
10061f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10061f14 <__arm_cp.4_0>:
10061f14:	00007530 	.word	0x00007530

10061f18 <smp_sap_hci_disconnection_complete_evt_hndl>:
10061f18:	b510      	push	{r4, lr}
10061f1a:	f7fe fe97 	bl	10060c4c <smp_get_remote_device_list_item>
10061f1e:	2800      	cmp	r0, #0
10061f20:	d025      	beq.n	10061f6e <smp_sap_hci_disconnection_complete_evt_hndl+0x56>
10061f22:	4604      	mov	r4, r0
10061f24:	8900      	ldrh	r0, [r0, #8]
10061f26:	f7fe fe71 	bl	10060c0c <smp_get_remote_device_list_index>
10061f2a:	4602      	mov	r2, r0
10061f2c:	2001      	movs	r0, #1
10061f2e:	2100      	movs	r1, #0
10061f30:	4b0f      	ldr	r3, [pc, #60]	@ (10061f70 <__arm_cp.5_0>)
10061f32:	f7ff fceb 	bl	1006190c <smp_timer_reset>
10061f36:	8920      	ldrh	r0, [r4, #8]
10061f38:	f7ff fcb0 	bl	1006189c <smp_rxp_flush_packet_queues>
10061f3c:	2060      	movs	r0, #96	@ 0x60
10061f3e:	5c20      	ldrb	r0, [r4, r0]
10061f40:	07c0      	lsls	r0, r0, #31
10061f42:	7aa0      	ldrb	r0, [r4, #10]
10061f44:	d104      	bne.n	10061f50 <smp_sap_hci_disconnection_complete_evt_hndl+0x38>
10061f46:	3060      	adds	r0, #96	@ 0x60
10061f48:	b2c0      	uxtb	r0, r0
10061f4a:	2851      	cmp	r0, #81	@ 0x51
10061f4c:	d304      	bcc.n	10061f58 <smp_sap_hci_disconnection_complete_evt_hndl+0x40>
10061f4e:	e007      	b.n	10061f60 <smp_sap_hci_disconnection_complete_evt_hndl+0x48>
10061f50:	3050      	adds	r0, #80	@ 0x50
10061f52:	b2c0      	uxtb	r0, r0
10061f54:	2840      	cmp	r0, #64	@ 0x40
10061f56:	d803      	bhi.n	10061f60 <smp_sap_hci_disconnection_complete_evt_hndl+0x48>
10061f58:	2102      	movs	r1, #2
10061f5a:	4620      	mov	r0, r4
10061f5c:	f004 fb22 	bl	100665a4 <smp_pp3_pairing_completed_update_stats>
10061f60:	20fe      	movs	r0, #254	@ 0xfe
10061f62:	72a0      	strb	r0, [r4, #10]
10061f64:	200e      	movs	r0, #14
10061f66:	f000 faa7 	bl	100624b8 <tsk_notify_idx>
10061f6a:	f7e1 fdd6 	bl	10043b1a <BLE_STACK_ProcessRequest>
10061f6e:	bd10      	pop	{r4, pc}

10061f70 <__arm_cp.5_0>:
10061f70:	00007530 	.word	0x00007530

10061f74 <smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl>:
10061f74:	b5b0      	push	{r4, r5, r7, lr}
10061f76:	4a0a      	ldr	r2, [pc, #40]	@ (10061fa0 <__arm_cp.1_0>)
10061f78:	6812      	ldr	r2, [r2, #0]
10061f7a:	2342      	movs	r3, #66	@ 0x42
10061f7c:	5cd4      	ldrb	r4, [r2, r3]
10061f7e:	257f      	movs	r5, #127	@ 0x7f
10061f80:	4025      	ands	r5, r4
10061f82:	54d5      	strb	r5, [r2, r3]
10061f84:	2800      	cmp	r0, #0
10061f86:	d002      	beq.n	10061f8e <smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl+0x1a>
10061f88:	f7fe ff2a 	bl	10060de0 <smp_scp_execute_public_key_generation_request>
10061f8c:	bdb0      	pop	{r4, r5, r7, pc}
10061f8e:	4608      	mov	r0, r1
10061f90:	f7fe ff42 	bl	10060e18 <smp_scp_set_local_public_key>
10061f94:	200e      	movs	r0, #14
10061f96:	f000 fa8f 	bl	100624b8 <tsk_notify_idx>
10061f9a:	f7e1 fdbe 	bl	10043b1a <BLE_STACK_ProcessRequest>
10061f9e:	bdb0      	pop	{r4, r5, r7, pc}

10061fa0 <__arm_cp.1_0>:
10061fa0:	20001140 	.word	0x20001140

10061fa4 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl>:
10061fa4:	b570      	push	{r4, r5, r6, lr}
10061fa6:	4e1d      	ldr	r6, [pc, #116]	@ (1006201c <__arm_cp.2_0>)
10061fa8:	6832      	ldr	r2, [r6, #0]
10061faa:	2542      	movs	r5, #66	@ 0x42
10061fac:	5d53      	ldrb	r3, [r2, r5]
10061fae:	06db      	lsls	r3, r3, #27
10061fb0:	d528      	bpl.n	10062004 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl+0x60>
10061fb2:	2800      	cmp	r0, #0
10061fb4:	d016      	beq.n	10061fe4 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl+0x40>
10061fb6:	32a4      	adds	r2, #164	@ 0xa4
10061fb8:	4819      	ldr	r0, [pc, #100]	@ (10062020 <__arm_cp.2_1>)
10061fba:	6800      	ldr	r0, [r0, #0]
10061fbc:	2134      	movs	r1, #52	@ 0x34
10061fbe:	5c40      	ldrb	r0, [r0, r1]
10061fc0:	2170      	movs	r1, #112	@ 0x70
10061fc2:	4341      	muls	r1, r0
10061fc4:	2300      	movs	r3, #0
10061fc6:	4299      	cmp	r1, r3
10061fc8:	d01c      	beq.n	10062004 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl+0x60>
10061fca:	6810      	ldr	r0, [r2, #0]
10061fcc:	2800      	cmp	r0, #0
10061fce:	d007      	beq.n	10061fe0 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl+0x3c>
10061fd0:	18c0      	adds	r0, r0, r3
10061fd2:	8904      	ldrh	r4, [r0, #8]
10061fd4:	2c00      	cmp	r4, #0
10061fd6:	d003      	beq.n	10061fe0 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl+0x3c>
10061fd8:	2417      	movs	r4, #23
10061fda:	5704      	ldrsb	r4, [r0, r4]
10061fdc:	2c00      	cmp	r4, #0
10061fde:	d412      	bmi.n	10062006 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl+0x62>
10061fe0:	3370      	adds	r3, #112	@ 0x70
10061fe2:	e7f0      	b.n	10061fc6 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl+0x22>
10061fe4:	2049      	movs	r0, #73	@ 0x49
10061fe6:	0080      	lsls	r0, r0, #2
10061fe8:	1810      	adds	r0, r2, r0
10061fea:	2420      	movs	r4, #32
10061fec:	4622      	mov	r2, r4
10061fee:	f7e4 f831 	bl	10046054 <BLEPLAT_MemCpy>
10061ff2:	6830      	ldr	r0, [r6, #0]
10061ff4:	5d41      	ldrb	r1, [r0, r5]
10061ff6:	4321      	orrs	r1, r4
10061ff8:	5541      	strb	r1, [r0, r5]
10061ffa:	200e      	movs	r0, #14
10061ffc:	f000 fa5c 	bl	100624b8 <tsk_notify_idx>
10062000:	f7e1 fd8b 	bl	10043b1a <BLE_STACK_ProcessRequest>
10062004:	bd70      	pop	{r4, r5, r6, pc}
10062006:	210b      	movs	r1, #11
10062008:	2200      	movs	r2, #0
1006200a:	2301      	movs	r3, #1
1006200c:	f004 fb1a 	bl	10066644 <smp_pp3_pairing_failed_send>
10062010:	6830      	ldr	r0, [r6, #0]
10062012:	5d41      	ldrb	r1, [r0, r5]
10062014:	22cf      	movs	r2, #207	@ 0xcf
10062016:	400a      	ands	r2, r1
10062018:	5542      	strb	r2, [r0, r5]
1006201a:	bd70      	pop	{r4, r5, r6, pc}

1006201c <__arm_cp.2_0>:
1006201c:	20001140 	.word	0x20001140

10062020 <__arm_cp.2_1>:
10062020:	200010a0 	.word	0x200010a0

10062024 <secure_connections_csr>:
10062024:	2001      	movs	r0, #1
10062026:	4770      	bx	lr

10062028 <smp_sap_l2c_acl_data_hndl>:
10062028:	b5b0      	push	{r4, r5, r7, lr}
1006202a:	460c      	mov	r4, r1
1006202c:	4605      	mov	r5, r0
1006202e:	8808      	ldrh	r0, [r1, #0]
10062030:	f7fe fe0c 	bl	10060c4c <smp_get_remote_device_list_item>
10062034:	2800      	cmp	r0, #0
10062036:	d025      	beq.n	10062084 <smp_sap_l2c_acl_data_hndl+0x5c>
10062038:	2d00      	cmp	r5, #0
1006203a:	d00f      	beq.n	1006205c <smp_sap_l2c_acl_data_hndl+0x34>
1006203c:	2d01      	cmp	r5, #1
1006203e:	d121      	bne.n	10062084 <smp_sap_l2c_acl_data_hndl+0x5c>
10062040:	8860      	ldrh	r0, [r4, #2]
10062042:	2841      	cmp	r0, #65	@ 0x41
10062044:	d81e      	bhi.n	10062084 <smp_sap_l2c_acl_data_hndl+0x5c>
10062046:	4812      	ldr	r0, [pc, #72]	@ (10062090 <__arm_cp.0_0>)
10062048:	6800      	ldr	r0, [r0, #0]
1006204a:	4621      	mov	r1, r4
1006204c:	f000 fc2a 	bl	100628a4 <ACL_list_insert_tail>
10062050:	200f      	movs	r0, #15
10062052:	f000 fa31 	bl	100624b8 <tsk_notify_idx>
10062056:	f7e1 fd60 	bl	10043b1a <BLE_STACK_ProcessRequest>
1006205a:	e016      	b.n	1006208a <smp_sap_l2c_acl_data_hndl+0x62>
1006205c:	6861      	ldr	r1, [r4, #4]
1006205e:	7a09      	ldrb	r1, [r1, #8]
10062060:	290b      	cmp	r1, #11
10062062:	d109      	bne.n	10062078 <smp_sap_l2c_acl_data_hndl+0x50>
10062064:	7e01      	ldrb	r1, [r0, #24]
10062066:	2203      	movs	r2, #3
10062068:	400a      	ands	r2, r1
1006206a:	2a01      	cmp	r2, #1
1006206c:	d10a      	bne.n	10062084 <smp_sap_l2c_acl_data_hndl+0x5c>
1006206e:	22fc      	movs	r2, #252	@ 0xfc
10062070:	4011      	ands	r1, r2
10062072:	1c89      	adds	r1, r1, #2
10062074:	7601      	strb	r1, [r0, #24]
10062076:	e005      	b.n	10062084 <smp_sap_l2c_acl_data_hndl+0x5c>
10062078:	1f8a      	subs	r2, r1, #6
1006207a:	b2d2      	uxtb	r2, r2
1006207c:	2a04      	cmp	r2, #4
1006207e:	d801      	bhi.n	10062084 <smp_sap_l2c_acl_data_hndl+0x5c>
10062080:	f004 fcac 	bl	100669dc <smp_pp3_keys_distribution_signaling_ack>
10062084:	4620      	mov	r0, r4
10062086:	f7f0 fd95 	bl	10052bb4 <ACL_pkt_release>
1006208a:	2000      	movs	r0, #0
1006208c:	bdb0      	pop	{r4, r5, r7, pc}
1006208e:	46c0      	nop			@ (mov r8, r8)

10062090 <__arm_cp.0_0>:
10062090:	20001140 	.word	0x20001140

10062094 <smp_get_sec_level_for_mode1>:
10062094:	b510      	push	{r4, lr}
10062096:	7ac3      	ldrb	r3, [r0, #11]
10062098:	075c      	lsls	r4, r3, #29
1006209a:	0fa2      	lsrs	r2, r4, #30
1006209c:	d009      	beq.n	100620b2 <smp_get_sec_level_for_mode1+0x1e>
1006209e:	2201      	movs	r2, #1
100620a0:	4013      	ands	r3, r2
100620a2:	425a      	negs	r2, r3
100620a4:	415a      	adcs	r2, r3
100620a6:	7c03      	ldrb	r3, [r0, #16]
100620a8:	2003      	movs	r0, #3
100620aa:	2b10      	cmp	r3, #16
100620ac:	d009      	beq.n	100620c2 <smp_get_sec_level_for_mode1+0x2e>
100620ae:	4603      	mov	r3, r0
100620b0:	e008      	b.n	100620c4 <smp_get_sec_level_for_mode1+0x30>
100620b2:	07da      	lsls	r2, r3, #31
100620b4:	d10a      	bne.n	100620cc <smp_get_sec_level_for_mode1+0x38>
100620b6:	7a80      	ldrb	r0, [r0, #10]
100620b8:	2201      	movs	r2, #1
100620ba:	28f1      	cmp	r0, #241	@ 0xf1
100620bc:	d009      	beq.n	100620d2 <smp_get_sec_level_for_mode1+0x3e>
100620be:	4613      	mov	r3, r2
100620c0:	e008      	b.n	100620d4 <smp_get_sec_level_for_mode1+0x40>
100620c2:	2304      	movs	r3, #4
100620c4:	2c00      	cmp	r4, #0
100620c6:	d405      	bmi.n	100620d4 <smp_get_sec_level_for_mode1+0x40>
100620c8:	4603      	mov	r3, r0
100620ca:	e003      	b.n	100620d4 <smp_get_sec_level_for_mode1+0x40>
100620cc:	2302      	movs	r3, #2
100620ce:	2200      	movs	r2, #0
100620d0:	e000      	b.n	100620d4 <smp_get_sec_level_for_mode1+0x40>
100620d2:	2302      	movs	r3, #2
100620d4:	2a00      	cmp	r2, #0
100620d6:	d101      	bne.n	100620dc <smp_get_sec_level_for_mode1+0x48>
100620d8:	4618      	mov	r0, r3
100620da:	e000      	b.n	100620de <smp_get_sec_level_for_mode1+0x4a>
100620dc:	2001      	movs	r0, #1
100620de:	2900      	cmp	r1, #0
100620e0:	d000      	beq.n	100620e4 <smp_get_sec_level_for_mode1+0x50>
100620e2:	4618      	mov	r0, r3
100620e4:	bd10      	pop	{r4, pc}

100620e6 <smp_sap_get_security_level>:
100620e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100620e8:	461c      	mov	r4, r3
100620ea:	4616      	mov	r6, r2
100620ec:	460d      	mov	r5, r1
100620ee:	2100      	movs	r1, #0
100620f0:	7029      	strb	r1, [r5, #0]
100620f2:	7011      	strb	r1, [r2, #0]
100620f4:	7019      	strb	r1, [r3, #0]
100620f6:	f7fe fda9 	bl	10060c4c <smp_get_remote_device_list_item>
100620fa:	2800      	cmp	r0, #0
100620fc:	d017      	beq.n	1006212e <smp_sap_get_security_level+0x48>
100620fe:	4607      	mov	r7, r0
10062100:	2101      	movs	r1, #1
10062102:	7029      	strb	r1, [r5, #0]
10062104:	7a80      	ldrb	r0, [r0, #10]
10062106:	28f1      	cmp	r0, #241	@ 0xf1
10062108:	d110      	bne.n	1006212c <smp_sap_get_security_level+0x46>
1006210a:	9100      	str	r1, [sp, #0]
1006210c:	2100      	movs	r1, #0
1006210e:	4638      	mov	r0, r7
10062110:	f7ff ffc0 	bl	10062094 <smp_get_sec_level_for_mode1>
10062114:	7030      	strb	r0, [r6, #0]
10062116:	2801      	cmp	r0, #1
10062118:	d109      	bne.n	1006212e <smp_sap_get_security_level+0x48>
1006211a:	2002      	movs	r0, #2
1006211c:	7028      	strb	r0, [r5, #0]
1006211e:	7af9      	ldrb	r1, [r7, #11]
10062120:	0749      	lsls	r1, r1, #29
10062122:	0f89      	lsrs	r1, r1, #30
10062124:	d100      	bne.n	10062128 <smp_sap_get_security_level+0x42>
10062126:	9800      	ldr	r0, [sp, #0]
10062128:	7020      	strb	r0, [r4, #0]
1006212a:	e000      	b.n	1006212e <smp_sap_get_security_level+0x48>
1006212c:	7031      	strb	r1, [r6, #0]
1006212e:	2000      	movs	r0, #0
10062130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10062132 <smp_sap_get_remote_address_check_addr_type>:
10062132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062134:	461c      	mov	r4, r3
10062136:	4615      	mov	r5, r2
10062138:	460f      	mov	r7, r1
1006213a:	f7fe fd87 	bl	10060c4c <smp_get_remote_device_list_item>
1006213e:	2800      	cmp	r0, #0
10062140:	d016      	beq.n	10062170 <smp_sap_get_remote_address_check_addr_type+0x3e>
10062142:	4606      	mov	r6, r0
10062144:	1c81      	adds	r1, r0, #2
10062146:	2206      	movs	r2, #6
10062148:	4628      	mov	r0, r5
1006214a:	f7e3 ff83 	bl	10046054 <BLEPLAT_MemCpy>
1006214e:	7870      	ldrb	r0, [r6, #1]
10062150:	4669      	mov	r1, sp
10062152:	7008      	strb	r0, [r1, #0]
10062154:	2f00      	cmp	r7, #0
10062156:	d01f      	beq.n	10062198 <smp_sap_get_remote_address_check_addr_type+0x66>
10062158:	2800      	cmp	r0, #0
1006215a:	d01d      	beq.n	10062198 <smp_sap_get_remote_address_check_addr_type+0x66>
1006215c:	2801      	cmp	r0, #1
1006215e:	d109      	bne.n	10062174 <smp_sap_get_remote_address_check_addr_type+0x42>
10062160:	79f1      	ldrb	r1, [r6, #7]
10062162:	098a      	lsrs	r2, r1, #6
10062164:	2001      	movs	r0, #1
10062166:	2a02      	cmp	r2, #2
10062168:	d816      	bhi.n	10062198 <smp_sap_get_remote_address_check_addr_type+0x66>
1006216a:	2940      	cmp	r1, #64	@ 0x40
1006216c:	d203      	bcs.n	10062176 <smp_sap_get_remote_address_check_addr_type+0x44>
1006216e:	e013      	b.n	10062198 <smp_sap_get_remote_address_check_addr_type+0x66>
10062170:	2002      	movs	r0, #2
10062172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062174:	79f1      	ldrb	r1, [r6, #7]
10062176:	20c0      	movs	r0, #192	@ 0xc0
10062178:	4008      	ands	r0, r1
1006217a:	2840      	cmp	r0, #64	@ 0x40
1006217c:	d108      	bne.n	10062190 <smp_sap_get_remote_address_check_addr_type+0x5e>
1006217e:	4669      	mov	r1, sp
10062180:	4630      	mov	r0, r6
10062182:	462a      	mov	r2, r5
10062184:	f004 f97c 	bl	10066480 <smp_dep_sdb_find_bonding_record_read_address>
10062188:	2800      	cmp	r0, #0
1006218a:	d003      	beq.n	10062194 <smp_sap_get_remote_address_check_addr_type+0x62>
1006218c:	2081      	movs	r0, #129	@ 0x81
1006218e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062190:	2086      	movs	r0, #134	@ 0x86
10062192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062194:	4668      	mov	r0, sp
10062196:	7800      	ldrb	r0, [r0, #0]
10062198:	7020      	strb	r0, [r4, #0]
1006219a:	2000      	movs	r0, #0
1006219c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1006219e <smp_sap_check_is_peer_device_bonded>:
1006219e:	b5b0      	push	{r4, r5, r7, lr}
100621a0:	f7fe fd54 	bl	10060c4c <smp_get_remote_device_list_item>
100621a4:	2800      	cmp	r0, #0
100621a6:	d011      	beq.n	100621cc <smp_sap_check_is_peer_device_bonded+0x2e>
100621a8:	4604      	mov	r4, r0
100621aa:	2500      	movs	r5, #0
100621ac:	4629      	mov	r1, r5
100621ae:	f004 f90f 	bl	100663d0 <smp_dep_sdb_find_bonding_record_by_conn_addr>
100621b2:	2800      	cmp	r0, #0
100621b4:	d00b      	beq.n	100621ce <smp_sap_check_is_peer_device_bonded+0x30>
100621b6:	7aa1      	ldrb	r1, [r4, #10]
100621b8:	29f1      	cmp	r1, #241	@ 0xf1
100621ba:	d105      	bne.n	100621c8 <smp_sap_check_is_peer_device_bonded+0x2a>
100621bc:	7ba1      	ldrb	r1, [r4, #14]
100621be:	07ca      	lsls	r2, r1, #31
100621c0:	d002      	beq.n	100621c8 <smp_sap_check_is_peer_device_bonded+0x2a>
100621c2:	0789      	lsls	r1, r1, #30
100621c4:	d500      	bpl.n	100621c8 <smp_sap_check_is_peer_device_bonded+0x2a>
100621c6:	2000      	movs	r0, #0
100621c8:	4605      	mov	r5, r0
100621ca:	e000      	b.n	100621ce <smp_sap_check_is_peer_device_bonded+0x30>
100621cc:	2502      	movs	r5, #2
100621ce:	4628      	mov	r0, r5
100621d0:	bdb0      	pop	{r4, r5, r7, pc}

100621d2 <smp_sap_check_encryption_key_size>:
100621d2:	b510      	push	{r4, lr}
100621d4:	460c      	mov	r4, r1
100621d6:	f7fe fd39 	bl	10060c4c <smp_get_remote_device_list_item>
100621da:	2800      	cmp	r0, #0
100621dc:	d005      	beq.n	100621ea <smp_sap_check_encryption_key_size+0x18>
100621de:	7a81      	ldrb	r1, [r0, #10]
100621e0:	29f1      	cmp	r1, #241	@ 0xf1
100621e2:	d102      	bne.n	100621ea <smp_sap_check_encryption_key_size+0x18>
100621e4:	7c00      	ldrb	r0, [r0, #16]
100621e6:	42a0      	cmp	r0, r4
100621e8:	d201      	bcs.n	100621ee <smp_sap_check_encryption_key_size+0x1c>
100621ea:	20b6      	movs	r0, #182	@ 0xb6
100621ec:	bd10      	pop	{r4, pc}
100621ee:	2000      	movs	r0, #0
100621f0:	bd10      	pop	{r4, pc}

100621f2 <smp_sap_forget_device_upon_disconnection>:
100621f2:	b580      	push	{r7, lr}
100621f4:	f7fe fd2a 	bl	10060c4c <smp_get_remote_device_list_item>
100621f8:	2800      	cmp	r0, #0
100621fa:	d006      	beq.n	1006220a <smp_sap_forget_device_upon_disconnection+0x18>
100621fc:	2160      	movs	r1, #96	@ 0x60
100621fe:	5c42      	ldrb	r2, [r0, r1]
10062200:	2380      	movs	r3, #128	@ 0x80
10062202:	4313      	orrs	r3, r2
10062204:	5443      	strb	r3, [r0, r1]
10062206:	2000      	movs	r0, #0
10062208:	bd80      	pop	{r7, pc}
1006220a:	2081      	movs	r0, #129	@ 0x81
1006220c:	bd80      	pop	{r7, pc}

1006220e <smp_sap_sm2_packet_data_signing_compute>:
1006220e:	b5f0      	push	{r4, r5, r6, r7, lr}
10062210:	b089      	sub	sp, #36	@ 0x24
10062212:	460e      	mov	r6, r1
10062214:	f7fe fd1a 	bl	10060c4c <smp_get_remote_device_list_item>
10062218:	2800      	cmp	r0, #0
1006221a:	d025      	beq.n	10062268 <smp_sap_sm2_packet_data_signing_compute+0x5a>
1006221c:	4605      	mov	r5, r0
1006221e:	301c      	adds	r0, #28
10062220:	a905      	add	r1, sp, #20
10062222:	9100      	str	r1, [sp, #0]
10062224:	f7fd ff10 	bl	10060048 <smp_crt_generate_csrk>
10062228:	8874      	ldrh	r4, [r6, #2]
1006222a:	462b      	mov	r3, r5
1006222c:	3368      	adds	r3, #104	@ 0x68
1006222e:	1d27      	adds	r7, r4, #4
10062230:	b2b9      	uxth	r1, r7
10062232:	2204      	movs	r2, #4
10062234:	4630      	mov	r0, r6
10062236:	f7f0 fcfb 	bl	10052c30 <ACL_pkt_write>
1006223a:	b2fa      	uxtb	r2, r7
1006223c:	af01      	add	r7, sp, #4
1006223e:	9800      	ldr	r0, [sp, #0]
10062240:	4631      	mov	r1, r6
10062242:	463b      	mov	r3, r7
10062244:	f7fe f82e 	bl	100602a4 <smp_crt_generate_cmac_tag>
10062248:	3708      	adds	r7, #8
1006224a:	4620      	mov	r0, r4
1006224c:	3008      	adds	r0, #8
1006224e:	b281      	uxth	r1, r0
10062250:	2208      	movs	r2, #8
10062252:	4630      	mov	r0, r6
10062254:	463b      	mov	r3, r7
10062256:	f7f0 fceb 	bl	10052c30 <ACL_pkt_write>
1006225a:	340c      	adds	r4, #12
1006225c:	8074      	strh	r4, [r6, #2]
1006225e:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
10062260:	1c40      	adds	r0, r0, #1
10062262:	66a8      	str	r0, [r5, #104]	@ 0x68
10062264:	2000      	movs	r0, #0
10062266:	e000      	b.n	1006226a <smp_sap_sm2_packet_data_signing_compute+0x5c>
10062268:	2002      	movs	r0, #2
1006226a:	b009      	add	sp, #36	@ 0x24
1006226c:	bdf0      	pop	{r4, r5, r6, r7, pc}

1006226e <smp_sap_sm2_packet_data_signing_validate>:
1006226e:	b5f0      	push	{r4, r5, r6, r7, lr}
10062270:	b08d      	sub	sp, #52	@ 0x34
10062272:	460d      	mov	r5, r1
10062274:	884f      	ldrh	r7, [r1, #2]
10062276:	f7fe fce9 	bl	10060c4c <smp_get_remote_device_list_item>
1006227a:	2800      	cmp	r0, #0
1006227c:	d005      	beq.n	1006228a <smp_sap_sm2_packet_data_signing_validate+0x1c>
1006227e:	4604      	mov	r4, r0
10062280:	7c40      	ldrb	r0, [r0, #17]
10062282:	0640      	lsls	r0, r0, #25
10062284:	d403      	bmi.n	1006228e <smp_sap_sm2_packet_data_signing_validate+0x20>
10062286:	20b1      	movs	r0, #177	@ 0xb1
10062288:	e034      	b.n	100622f4 <smp_sap_sm2_packet_data_signing_validate+0x86>
1006228a:	2002      	movs	r0, #2
1006228c:	e032      	b.n	100622f4 <smp_sap_sm2_packet_data_signing_validate+0x86>
1006228e:	4621      	mov	r1, r4
10062290:	3148      	adds	r1, #72	@ 0x48
10062292:	a805      	add	r0, sp, #20
10062294:	2210      	movs	r2, #16
10062296:	f7e3 fedd 	bl	10046054 <BLEPLAT_MemCpy>
1006229a:	3f08      	subs	r7, #8
1006229c:	b2b9      	uxth	r1, r7
1006229e:	220c      	movs	r2, #12
100622a0:	ae02      	add	r6, sp, #8
100622a2:	4628      	mov	r0, r5
100622a4:	4633      	mov	r3, r6
100622a6:	f7f0 fca1 	bl	10052bec <ACL_pkt_read>
100622aa:	7830      	ldrb	r0, [r6, #0]
100622ac:	7871      	ldrb	r1, [r6, #1]
100622ae:	0209      	lsls	r1, r1, #8
100622b0:	1808      	adds	r0, r1, r0
100622b2:	78b1      	ldrb	r1, [r6, #2]
100622b4:	0409      	lsls	r1, r1, #16
100622b6:	1840      	adds	r0, r0, r1
100622b8:	78f1      	ldrb	r1, [r6, #3]
100622ba:	0609      	lsls	r1, r1, #24
100622bc:	1841      	adds	r1, r0, r1
100622be:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
100622c0:	4281      	cmp	r1, r0
100622c2:	d801      	bhi.n	100622c8 <smp_sap_sm2_packet_data_signing_validate+0x5a>
100622c4:	1c40      	adds	r0, r0, #1
100622c6:	d110      	bne.n	100622ea <smp_sap_sm2_packet_data_signing_validate+0x7c>
100622c8:	9101      	str	r1, [sp, #4]
100622ca:	b2fa      	uxtb	r2, r7
100622cc:	a805      	add	r0, sp, #20
100622ce:	ae09      	add	r6, sp, #36	@ 0x24
100622d0:	4629      	mov	r1, r5
100622d2:	4633      	mov	r3, r6
100622d4:	f7fd ffe6 	bl	100602a4 <smp_crt_generate_cmac_tag>
100622d8:	a802      	add	r0, sp, #8
100622da:	1d00      	adds	r0, r0, #4
100622dc:	3608      	adds	r6, #8
100622de:	2208      	movs	r2, #8
100622e0:	4631      	mov	r1, r6
100622e2:	f7e3 fed7 	bl	10046094 <BLEPLAT_MemCmp>
100622e6:	2800      	cmp	r0, #0
100622e8:	d001      	beq.n	100622ee <smp_sap_sm2_packet_data_signing_validate+0x80>
100622ea:	2005      	movs	r0, #5
100622ec:	e002      	b.n	100622f4 <smp_sap_sm2_packet_data_signing_validate+0x86>
100622ee:	9801      	ldr	r0, [sp, #4]
100622f0:	66e0      	str	r0, [r4, #108]	@ 0x6c
100622f2:	2000      	movs	r0, #0
100622f4:	b00d      	add	sp, #52	@ 0x34
100622f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100622f8 <nvm_gatt_db_read_init>:
100622f8:	4801      	ldr	r0, [pc, #4]	@ (10062300 <__arm_cp.0_0>)
100622fa:	2100      	movs	r1, #0
100622fc:	7001      	strb	r1, [r0, #0]
100622fe:	4770      	bx	lr

10062300 <__arm_cp.0_0>:
10062300:	20001144 	.word	0x20001144

10062304 <nvm_gatt_db_read_next_record>:
10062304:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10062306:	4603      	mov	r3, r0
10062308:	4d06      	ldr	r5, [pc, #24]	@ (10062324 <__arm_cp.1_0>)
1006230a:	7828      	ldrb	r0, [r5, #0]
1006230c:	210c      	movs	r1, #12
1006230e:	9100      	str	r1, [sp, #0]
10062310:	2401      	movs	r4, #1
10062312:	2200      	movs	r2, #0
10062314:	4621      	mov	r1, r4
10062316:	f7e3 fdd5 	bl	10045ec4 <BLEPLAT_NvmGet>
1006231a:	702c      	strb	r4, [r5, #0]
1006231c:	f000 f804 	bl	10062328 <nvm_convert_bleplat_to_blestack_status>
10062320:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10062322:	46c0      	nop			@ (mov r8, r8)

10062324 <__arm_cp.1_0>:
10062324:	20001144 	.word	0x20001144

10062328 <nvm_convert_bleplat_to_blestack_status>:
10062328:	1cc0      	adds	r0, r0, #3
1006232a:	b2c0      	uxtb	r0, r0
1006232c:	2804      	cmp	r0, #4
1006232e:	d302      	bcc.n	10062336 <nvm_convert_bleplat_to_blestack_status+0xe>
10062330:	207e      	movs	r0, #126	@ 0x7e
10062332:	43c0      	mvns	r0, r0
10062334:	e002      	b.n	1006233c <nvm_convert_bleplat_to_blestack_status+0x14>
10062336:	00c1      	lsls	r1, r0, #3
10062338:	4801      	ldr	r0, [pc, #4]	@ (10062340 <__arm_cp.2_0>)
1006233a:	40c8      	lsrs	r0, r1
1006233c:	b2c0      	uxtb	r0, r0
1006233e:	4770      	bx	lr

10062340 <__arm_cp.2_0>:
10062340:	00b4b7b3 	.word	0x00b4b7b3

10062344 <nvm_gatt_db_read_full_current_record>:
10062344:	b5e0      	push	{r5, r6, r7, lr}
10062346:	4603      	mov	r3, r0
10062348:	9100      	str	r1, [sp, #0]
1006234a:	2002      	movs	r0, #2
1006234c:	2101      	movs	r1, #1
1006234e:	220c      	movs	r2, #12
10062350:	f7e3 fdb8 	bl	10045ec4 <BLEPLAT_NvmGet>
10062354:	f7ff ffe8 	bl	10062328 <nvm_convert_bleplat_to_blestack_status>
10062358:	bd8c      	pop	{r2, r3, r7, pc}

1006235a <nvm_gatt_db_update_record>:
1006235a:	b5e0      	push	{r5, r6, r7, lr}
1006235c:	460b      	mov	r3, r1
1006235e:	4601      	mov	r1, r0
10062360:	8900      	ldrh	r0, [r0, #8]
10062362:	9000      	str	r0, [sp, #0]
10062364:	2001      	movs	r0, #1
10062366:	220c      	movs	r2, #12
10062368:	f7e3 fd5e 	bl	10045e28 <BLEPLAT_NvmAdd>
1006236c:	f7ff ffdc 	bl	10062328 <nvm_convert_bleplat_to_blestack_status>
10062370:	bd8c      	pop	{r2, r3, r7, pc}
	...

10062374 <nvm_sec_db_read_init>:
10062374:	4801      	ldr	r0, [pc, #4]	@ (1006237c <__arm_cp.5_0>)
10062376:	2100      	movs	r1, #0
10062378:	7001      	strb	r1, [r0, #0]
1006237a:	4770      	bx	lr

1006237c <__arm_cp.5_0>:
1006237c:	20001145 	.word	0x20001145

10062380 <nvm_sec_db_read_next_record>:
10062380:	b51c      	push	{r2, r3, r4, lr}
10062382:	4603      	mov	r3, r0
10062384:	4c06      	ldr	r4, [pc, #24]	@ (100623a0 <__arm_cp.6_0>)
10062386:	7820      	ldrb	r0, [r4, #0]
10062388:	2150      	movs	r1, #80	@ 0x50
1006238a:	9100      	str	r1, [sp, #0]
1006238c:	2100      	movs	r1, #0
1006238e:	460a      	mov	r2, r1
10062390:	f7e3 fd98 	bl	10045ec4 <BLEPLAT_NvmGet>
10062394:	2101      	movs	r1, #1
10062396:	7021      	strb	r1, [r4, #0]
10062398:	f7ff ffc6 	bl	10062328 <nvm_convert_bleplat_to_blestack_status>
1006239c:	bd1c      	pop	{r2, r3, r4, pc}
1006239e:	46c0      	nop			@ (mov r8, r8)

100623a0 <__arm_cp.6_0>:
100623a0:	20001145 	.word	0x20001145

100623a4 <nvm_sec_db_add_record>:
100623a4:	b5e0      	push	{r5, r6, r7, lr}
100623a6:	4601      	mov	r1, r0
100623a8:	2000      	movs	r0, #0
100623aa:	9000      	str	r0, [sp, #0]
100623ac:	2250      	movs	r2, #80	@ 0x50
100623ae:	4603      	mov	r3, r0
100623b0:	f7e3 fd3a 	bl	10045e28 <BLEPLAT_NvmAdd>
100623b4:	f7ff ffb8 	bl	10062328 <nvm_convert_bleplat_to_blestack_status>
100623b8:	bd8c      	pop	{r2, r3, r7, pc}

100623ba <nvm_sec_db_get_record_count>:
100623ba:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100623bc:	2400      	movs	r4, #0
100623be:	4621      	mov	r1, r4
100623c0:	4620      	mov	r0, r4
100623c2:	460d      	mov	r5, r1
100623c4:	9400      	str	r4, [sp, #0]
100623c6:	b2c0      	uxtb	r0, r0
100623c8:	4621      	mov	r1, r4
100623ca:	4622      	mov	r2, r4
100623cc:	4623      	mov	r3, r4
100623ce:	f7e3 fd79 	bl	10045ec4 <BLEPLAT_NvmGet>
100623d2:	1cc2      	adds	r2, r0, #3
100623d4:	1c69      	adds	r1, r5, #1
100623d6:	2001      	movs	r0, #1
100623d8:	2a00      	cmp	r2, #0
100623da:	d1f2      	bne.n	100623c2 <nvm_sec_db_get_record_count+0x8>
100623dc:	b2e8      	uxtb	r0, r5
100623de:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100623e0 <nvm_discard_all_records>:
100623e0:	b580      	push	{r7, lr}
100623e2:	2003      	movs	r0, #3
100623e4:	f7e3 fe10 	bl	10046008 <BLEPLAT_NvmDiscard>
100623e8:	bd80      	pop	{r7, pc}

100623ea <nvm_discard_current_record>:
100623ea:	b580      	push	{r7, lr}
100623ec:	2002      	movs	r0, #2
100623ee:	f7e3 fe0b 	bl	10046008 <BLEPLAT_NvmDiscard>
100623f2:	bd80      	pop	{r7, pc}

100623f4 <nvm_dev_id_data_get_record>:
100623f4:	b5e0      	push	{r5, r6, r7, lr}
100623f6:	4603      	mov	r3, r0
100623f8:	2026      	movs	r0, #38	@ 0x26
100623fa:	9000      	str	r0, [sp, #0]
100623fc:	2102      	movs	r1, #2
100623fe:	2000      	movs	r0, #0
10062400:	4602      	mov	r2, r0
10062402:	f7e3 fd5f 	bl	10045ec4 <BLEPLAT_NvmGet>
10062406:	2800      	cmp	r0, #0
10062408:	d000      	beq.n	1006240c <nvm_dev_id_data_get_record+0x18>
1006240a:	2081      	movs	r0, #129	@ 0x81
1006240c:	bd8c      	pop	{r2, r3, r7, pc}

1006240e <nvm_dev_id_data_add_record>:
1006240e:	b5e0      	push	{r5, r6, r7, lr}
10062410:	4601      	mov	r1, r0
10062412:	2300      	movs	r3, #0
10062414:	9300      	str	r3, [sp, #0]
10062416:	2002      	movs	r0, #2
10062418:	2226      	movs	r2, #38	@ 0x26
1006241a:	f7e3 fd05 	bl	10045e28 <BLEPLAT_NvmAdd>
1006241e:	2800      	cmp	r0, #0
10062420:	d000      	beq.n	10062424 <nvm_dev_id_data_add_record+0x16>
10062422:	2081      	movs	r0, #129	@ 0x81
10062424:	bd8c      	pop	{r2, r3, r7, pc}
	...

10062428 <tsk_init>:
10062428:	4803      	ldr	r0, [pc, #12]	@ (10062438 <__arm_cp.0_0>)
1006242a:	6800      	ldr	r0, [r0, #0]
1006242c:	2100      	movs	r1, #0
1006242e:	6081      	str	r1, [r0, #8]
10062430:	60c1      	str	r1, [r0, #12]
10062432:	6101      	str	r1, [r0, #16]
10062434:	6001      	str	r1, [r0, #0]
10062436:	4770      	bx	lr

10062438 <__arm_cp.0_0>:
10062438:	20001148 	.word	0x20001148

1006243c <tsk_scheduler>:
1006243c:	b570      	push	{r4, r5, r6, lr}
1006243e:	4d17      	ldr	r5, [pc, #92]	@ (1006249c <__arm_cp.1_0>)
10062440:	6828      	ldr	r0, [r5, #0]
10062442:	f3ef 8110 	mrs	r1, PRIMASK
10062446:	b672      	cpsid	i
10062448:	6801      	ldr	r1, [r0, #0]
1006244a:	2600      	movs	r6, #0
1006244c:	6006      	str	r6, [r0, #0]
1006244e:	6842      	ldr	r2, [r0, #4]
10062450:	430a      	orrs	r2, r1
10062452:	6042      	str	r2, [r0, #4]
10062454:	b662      	cpsie	i
10062456:	682c      	ldr	r4, [r5, #0]
10062458:	3410      	adds	r4, #16
1006245a:	6820      	ldr	r0, [r4, #0]
1006245c:	2800      	cmp	r0, #0
1006245e:	d00f      	beq.n	10062480 <tsk_scheduler+0x44>
10062460:	4620      	mov	r0, r4
10062462:	f000 f865 	bl	10062530 <lsbit>
10062466:	0080      	lsls	r0, r0, #2
10062468:	6829      	ldr	r1, [r5, #0]
1006246a:	1808      	adds	r0, r1, r0
1006246c:	f3ef 8210 	mrs	r2, PRIMASK
10062470:	b672      	cpsid	i
10062472:	6882      	ldr	r2, [r0, #8]
10062474:	6086      	str	r6, [r0, #8]
10062476:	6848      	ldr	r0, [r1, #4]
10062478:	4310      	orrs	r0, r2
1006247a:	6048      	str	r0, [r1, #4]
1006247c:	b662      	cpsie	i
1006247e:	e7ec      	b.n	1006245a <tsk_scheduler+0x1e>
10062480:	6828      	ldr	r0, [r5, #0]
10062482:	1d04      	adds	r4, r0, #4
10062484:	4d06      	ldr	r5, [pc, #24]	@ (100624a0 <__arm_cp.1_1>)
10062486:	6820      	ldr	r0, [r4, #0]
10062488:	2800      	cmp	r0, #0
1006248a:	d006      	beq.n	1006249a <tsk_scheduler+0x5e>
1006248c:	4620      	mov	r0, r4
1006248e:	f000 f84f 	bl	10062530 <lsbit>
10062492:	0081      	lsls	r1, r0, #2
10062494:	5869      	ldr	r1, [r5, r1]
10062496:	4788      	blx	r1
10062498:	e7f5      	b.n	10062486 <tsk_scheduler+0x4a>
1006249a:	bd70      	pop	{r4, r5, r6, pc}

1006249c <__arm_cp.1_0>:
1006249c:	20001148 	.word	0x20001148

100624a0 <__arm_cp.1_1>:
100624a0:	1006a13c 	.word	0x1006a13c

100624a4 <tsk_no_idle_check>:
100624a4:	4803      	ldr	r0, [pc, #12]	@ (100624b4 <__arm_cp.2_0>)
100624a6:	6800      	ldr	r0, [r0, #0]
100624a8:	6801      	ldr	r1, [r0, #0]
100624aa:	6900      	ldr	r0, [r0, #16]
100624ac:	4308      	orrs	r0, r1
100624ae:	1e41      	subs	r1, r0, #1
100624b0:	4188      	sbcs	r0, r1
100624b2:	4770      	bx	lr

100624b4 <__arm_cp.2_0>:
100624b4:	20001148 	.word	0x20001148

100624b8 <tsk_notify_idx>:
100624b8:	211f      	movs	r1, #31
100624ba:	4001      	ands	r1, r0
100624bc:	2201      	movs	r2, #1
100624be:	408a      	lsls	r2, r1
100624c0:	f3ef 8110 	mrs	r1, PRIMASK
100624c4:	b672      	cpsid	i
100624c6:	4904      	ldr	r1, [pc, #16]	@ (100624d8 <__arm_cp.3_0>)
100624c8:	6809      	ldr	r1, [r1, #0]
100624ca:	0940      	lsrs	r0, r0, #5
100624cc:	0080      	lsls	r0, r0, #2
100624ce:	580b      	ldr	r3, [r1, r0]
100624d0:	4313      	orrs	r3, r2
100624d2:	500b      	str	r3, [r1, r0]
100624d4:	b662      	cpsie	i
100624d6:	4770      	bx	lr

100624d8 <__arm_cp.3_0>:
100624d8:	20001148 	.word	0x20001148

100624dc <tsk_wait_resource_idx>:
100624dc:	221f      	movs	r2, #31
100624de:	4002      	ands	r2, r0
100624e0:	2301      	movs	r3, #1
100624e2:	4093      	lsls	r3, r2
100624e4:	f3ef 8210 	mrs	r2, PRIMASK
100624e8:	b672      	cpsid	i
100624ea:	0089      	lsls	r1, r1, #2
100624ec:	4a05      	ldr	r2, [pc, #20]	@ (10062504 <__arm_cp.4_0>)
100624ee:	6812      	ldr	r2, [r2, #0]
100624f0:	1851      	adds	r1, r2, r1
100624f2:	0940      	lsrs	r0, r0, #5
100624f4:	0080      	lsls	r0, r0, #2
100624f6:	1808      	adds	r0, r1, r0
100624f8:	6881      	ldr	r1, [r0, #8]
100624fa:	4319      	orrs	r1, r3
100624fc:	6081      	str	r1, [r0, #8]
100624fe:	b662      	cpsie	i
10062500:	4770      	bx	lr
10062502:	46c0      	nop			@ (mov r8, r8)

10062504 <__arm_cp.4_0>:
10062504:	20001148 	.word	0x20001148

10062508 <tsk_signal_resource_idx>:
10062508:	211f      	movs	r1, #31
1006250a:	4001      	ands	r1, r0
1006250c:	2201      	movs	r2, #1
1006250e:	408a      	lsls	r2, r1
10062510:	f3ef 8110 	mrs	r1, PRIMASK
10062514:	b672      	cpsid	i
10062516:	4905      	ldr	r1, [pc, #20]	@ (1006252c <__arm_cp.5_0>)
10062518:	6809      	ldr	r1, [r1, #0]
1006251a:	0940      	lsrs	r0, r0, #5
1006251c:	0080      	lsls	r0, r0, #2
1006251e:	1808      	adds	r0, r1, r0
10062520:	6901      	ldr	r1, [r0, #16]
10062522:	4311      	orrs	r1, r2
10062524:	6101      	str	r1, [r0, #16]
10062526:	b662      	cpsie	i
10062528:	4770      	bx	lr
1006252a:	46c0      	nop			@ (mov r8, r8)

1006252c <__arm_cp.5_0>:
1006252c:	20001148 	.word	0x20001148

10062530 <lsbit>:
10062530:	f3ef 8110 	mrs	r1, PRIMASK
10062534:	b672      	cpsid	i
10062536:	6801      	ldr	r1, [r0, #0]
10062538:	424a      	negs	r2, r1
1006253a:	400a      	ands	r2, r1
1006253c:	4051      	eors	r1, r2
1006253e:	6001      	str	r1, [r0, #0]
10062540:	4803      	ldr	r0, [pc, #12]	@ (10062550 <__arm_cp.7_0>)
10062542:	4350      	muls	r0, r2
10062544:	0ec0      	lsrs	r0, r0, #27
10062546:	a103      	add	r1, pc, #12	@ (adr r1, 10062554 <__arm_cp.7_0+0x4>)
10062548:	5c08      	ldrb	r0, [r1, r0]
1006254a:	b662      	cpsie	i
1006254c:	4770      	bx	lr
1006254e:	46c0      	nop			@ (mov r8, r8)

10062550 <__arm_cp.7_0>:
10062550:	04653adf 	.word	0x04653adf
10062554:	06020100 	.word	0x06020100
10062558:	10070b03 	.word	0x10070b03
1006255c:	150c0e04 	.word	0x150c0e04
10062560:	1a111708 	.word	0x1a111708
10062564:	0f0a051f 	.word	0x0f0a051f
10062568:	1916140d 	.word	0x1916140d
1006256c:	1813091e 	.word	0x1813091e
10062570:	1b1c121d 	.word	0x1b1c121d

10062574 <CST_init>:
10062574:	b510      	push	{r4, lr}
10062576:	2412      	movs	r4, #18
10062578:	2800      	cmp	r0, #0
1006257a:	d00e      	beq.n	1006259a <CST_init+0x26>
1006257c:	2a00      	cmp	r2, #0
1006257e:	d00c      	beq.n	1006259a <CST_init+0x26>
10062580:	2b0b      	cmp	r3, #11
10062582:	d80a      	bhi.n	1006259a <CST_init+0x26>
10062584:	7041      	strb	r1, [r0, #1]
10062586:	7003      	strb	r3, [r0, #0]
10062588:	6a03      	ldr	r3, [r0, #32]
1006258a:	5459      	strb	r1, [r3, r1]
1006258c:	1e49      	subs	r1, r1, #1
1006258e:	1c4b      	adds	r3, r1, #1
10062590:	d3fa      	bcc.n	10062588 <CST_init+0x14>
10062592:	6102      	str	r2, [r0, #16]
10062594:	2400      	movs	r4, #0
10062596:	7504      	strb	r4, [r0, #20]
10062598:	61c0      	str	r0, [r0, #28]
1006259a:	4620      	mov	r0, r4
1006259c:	bd10      	pop	{r4, pc}

1006259e <CST_stop>:
1006259e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100625a0:	4605      	mov	r5, r0
100625a2:	2012      	movs	r0, #18
100625a4:	2d00      	cmp	r5, #0
100625a6:	d01b      	beq.n	100625e0 <CST_stop+0x42>
100625a8:	460c      	mov	r4, r1
100625aa:	786a      	ldrb	r2, [r5, #1]
100625ac:	428a      	cmp	r2, r1
100625ae:	d917      	bls.n	100625e0 <CST_stop+0x42>
100625b0:	6a2b      	ldr	r3, [r5, #32]
100625b2:	5d19      	ldrb	r1, [r3, r4]
100625b4:	42a1      	cmp	r1, r4
100625b6:	d101      	bne.n	100625bc <CST_stop+0x1e>
100625b8:	2000      	movs	r0, #0
100625ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100625bc:	4617      	mov	r7, r2
100625be:	463e      	mov	r6, r7
100625c0:	5ddf      	ldrb	r7, [r3, r7]
100625c2:	4297      	cmp	r7, r2
100625c4:	d001      	beq.n	100625ca <CST_stop+0x2c>
100625c6:	42a7      	cmp	r7, r4
100625c8:	d1f9      	bne.n	100625be <CST_stop+0x20>
100625ca:	2000      	movs	r0, #0
100625cc:	4297      	cmp	r7, r2
100625ce:	d005      	beq.n	100625dc <CST_stop+0x3e>
100625d0:	5599      	strb	r1, [r3, r6]
100625d2:	4296      	cmp	r6, r2
100625d4:	d102      	bne.n	100625dc <CST_stop+0x3e>
100625d6:	4628      	mov	r0, r5
100625d8:	f000 f803 	bl	100625e2 <Timer_TryStartFirstActive>
100625dc:	6a29      	ldr	r1, [r5, #32]
100625de:	550c      	strb	r4, [r1, r4]
100625e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100625e2 <Timer_TryStartFirstActive>:
100625e2:	b510      	push	{r4, lr}
100625e4:	7842      	ldrb	r2, [r0, #1]
100625e6:	428a      	cmp	r2, r1
100625e8:	d107      	bne.n	100625fa <Timer_TryStartFirstActive+0x18>
100625ea:	7d01      	ldrb	r1, [r0, #20]
100625ec:	2400      	movs	r4, #0
100625ee:	2900      	cmp	r1, #0
100625f0:	d009      	beq.n	10062606 <Timer_TryStartFirstActive+0x24>
100625f2:	3008      	adds	r0, #8
100625f4:	f7e3 fe35 	bl	10046262 <BLEPLAT_StopTimer>
100625f8:	e005      	b.n	10062606 <Timer_TryStartFirstActive+0x24>
100625fa:	0049      	lsls	r1, r1, #1
100625fc:	6a42      	ldr	r2, [r0, #36]	@ 0x24
100625fe:	5e51      	ldrsh	r1, [r2, r1]
10062600:	f000 f86a 	bl	100626d8 <Timer_StartFirstActive_sysT>
10062604:	4604      	mov	r4, r0
10062606:	4620      	mov	r0, r4
10062608:	bd10      	pop	{r4, pc}

1006260a <CST_start>:
1006260a:	b5f0      	push	{r4, r5, r6, r7, lr}
1006260c:	b085      	sub	sp, #20
1006260e:	2612      	movs	r6, #18
10062610:	2800      	cmp	r0, #0
10062612:	d05e      	beq.n	100626d2 <CST_start+0xc8>
10062614:	461f      	mov	r7, r3
10062616:	460d      	mov	r5, r1
10062618:	4604      	mov	r4, r0
1006261a:	7843      	ldrb	r3, [r0, #1]
1006261c:	428b      	cmp	r3, r1
1006261e:	d958      	bls.n	100626d2 <CST_start+0xc8>
10062620:	7820      	ldrb	r0, [r4, #0]
10062622:	2105      	movs	r1, #5
10062624:	0309      	lsls	r1, r1, #12
10062626:	4081      	lsls	r1, r0
10062628:	428f      	cmp	r7, r1
1006262a:	d852      	bhi.n	100626d2 <CST_start+0xc8>
1006262c:	9204      	str	r2, [sp, #16]
1006262e:	9302      	str	r3, [sp, #8]
10062630:	f7e3 fdfc 	bl	1004622c <BLEPLAT_GetCurrentSysTime>
10062634:	4602      	mov	r2, r0
10062636:	7823      	ldrb	r3, [r4, #0]
10062638:	6a20      	ldr	r0, [r4, #32]
1006263a:	5d40      	ldrb	r0, [r0, r5]
1006263c:	42a8      	cmp	r0, r5
1006263e:	d00c      	beq.n	1006265a <CST_start+0x50>
10062640:	9804      	ldr	r0, [sp, #16]
10062642:	2800      	cmp	r0, #0
10062644:	d045      	beq.n	100626d2 <CST_start+0xc8>
10062646:	4620      	mov	r0, r4
10062648:	9103      	str	r1, [sp, #12]
1006264a:	4629      	mov	r1, r5
1006264c:	9304      	str	r3, [sp, #16]
1006264e:	4616      	mov	r6, r2
10062650:	f7ff ffa5 	bl	1006259e <CST_stop>
10062654:	9903      	ldr	r1, [sp, #12]
10062656:	4632      	mov	r2, r6
10062658:	9b04      	ldr	r3, [sp, #16]
1006265a:	2033      	movs	r0, #51	@ 0x33
1006265c:	4378      	muls	r0, r7
1006265e:	460e      	mov	r6, r1
10062660:	0a01      	lsrs	r1, r0, #8
10062662:	1808      	adds	r0, r1, r0
10062664:	0c01      	lsrs	r1, r0, #16
10062666:	1808      	adds	r0, r1, r0
10062668:	0771      	lsls	r1, r6, #29
1006266a:	08d2      	lsrs	r2, r2, #3
1006266c:	1851      	adds	r1, r2, r1
1006266e:	1842      	adds	r2, r0, r1
10062670:	1d58      	adds	r0, r3, #5
10062672:	b2c0      	uxtb	r0, r0
10062674:	40c2      	lsrs	r2, r0
10062676:	9501      	str	r5, [sp, #4]
10062678:	0068      	lsls	r0, r5, #1
1006267a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
1006267c:	9204      	str	r2, [sp, #16]
1006267e:	520a      	strh	r2, [r1, r0]
10062680:	f7e3 fdd4 	bl	1004622c <BLEPLAT_GetCurrentSysTime>
10062684:	08c0      	lsrs	r0, r0, #3
10062686:	9003      	str	r0, [sp, #12]
10062688:	7862      	ldrb	r2, [r4, #1]
1006268a:	6a20      	ldr	r0, [r4, #32]
1006268c:	4617      	mov	r7, r2
1006268e:	463b      	mov	r3, r7
10062690:	5dc7      	ldrb	r7, [r0, r7]
10062692:	4297      	cmp	r7, r2
10062694:	d00d      	beq.n	100626b2 <CST_start+0xa8>
10062696:	007d      	lsls	r5, r7, #1
10062698:	6a66      	ldr	r6, [r4, #36]	@ 0x24
1006269a:	5b75      	ldrh	r5, [r6, r5]
1006269c:	7826      	ldrb	r6, [r4, #0]
1006269e:	1d76      	adds	r6, r6, #5
100626a0:	9903      	ldr	r1, [sp, #12]
100626a2:	40f1      	lsrs	r1, r6
100626a4:	1a6d      	subs	r5, r5, r1
100626a6:	b22d      	sxth	r5, r5
100626a8:	9e04      	ldr	r6, [sp, #16]
100626aa:	1a71      	subs	r1, r6, r1
100626ac:	b209      	sxth	r1, r1
100626ae:	428d      	cmp	r5, r1
100626b0:	dded      	ble.n	1006268e <CST_start+0x84>
100626b2:	5cc1      	ldrb	r1, [r0, r3]
100626b4:	9a01      	ldr	r2, [sp, #4]
100626b6:	5481      	strb	r1, [r0, r2]
100626b8:	6a20      	ldr	r0, [r4, #32]
100626ba:	54c2      	strb	r2, [r0, r3]
100626bc:	9802      	ldr	r0, [sp, #8]
100626be:	4283      	cmp	r3, r0
100626c0:	d106      	bne.n	100626d0 <CST_start+0xc6>
100626c2:	9804      	ldr	r0, [sp, #16]
100626c4:	b201      	sxth	r1, r0
100626c6:	4620      	mov	r0, r4
100626c8:	f000 f806 	bl	100626d8 <Timer_StartFirstActive_sysT>
100626cc:	4606      	mov	r6, r0
100626ce:	e000      	b.n	100626d2 <CST_start+0xc8>
100626d0:	2600      	movs	r6, #0
100626d2:	4630      	mov	r0, r6
100626d4:	b005      	add	sp, #20
100626d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100626d8 <Timer_StartFirstActive_sysT>:
100626d8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100626da:	9101      	str	r1, [sp, #4]
100626dc:	4604      	mov	r4, r0
100626de:	4607      	mov	r7, r0
100626e0:	3708      	adds	r7, #8
100626e2:	f7e3 fda3 	bl	1004622c <BLEPLAT_GetCurrentSysTime>
100626e6:	9002      	str	r0, [sp, #8]
100626e8:	460d      	mov	r5, r1
100626ea:	7826      	ldrb	r6, [r4, #0]
100626ec:	7d20      	ldrb	r0, [r4, #20]
100626ee:	2800      	cmp	r0, #0
100626f0:	d004      	beq.n	100626fc <Timer_StartFirstActive_sysT+0x24>
100626f2:	4638      	mov	r0, r7
100626f4:	f7e3 fdb5 	bl	10046262 <BLEPLAT_StopTimer>
100626f8:	7822      	ldrb	r2, [r4, #0]
100626fa:	e000      	b.n	100626fe <Timer_StartFirstActive_sysT+0x26>
100626fc:	4632      	mov	r2, r6
100626fe:	1d70      	adds	r0, r6, #5
10062700:	9c02      	ldr	r4, [sp, #8]
10062702:	08e1      	lsrs	r1, r4, #3
10062704:	40c1      	lsrs	r1, r0
10062706:	9801      	ldr	r0, [sp, #4]
10062708:	1a40      	subs	r0, r0, r1
1006270a:	b200      	sxth	r0, r0
1006270c:	1e40      	subs	r0, r0, #1
1006270e:	17c1      	asrs	r1, r0, #31
10062710:	3208      	adds	r2, #8
10062712:	f7de fe25 	bl	10041360 <__aeabi_llsl>
10062716:	1902      	adds	r2, r0, r4
10062718:	414d      	adcs	r5, r1
1006271a:	4638      	mov	r0, r7
1006271c:	462b      	mov	r3, r5
1006271e:	f7e3 fd8f 	bl	10046240 <BLEPLAT_StartTimer>
10062722:	b2c0      	uxtb	r0, r0
10062724:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10062726 <cst_sharedCallback>:
10062726:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10062728:	9102      	str	r1, [sp, #8]
1006272a:	4605      	mov	r5, r0
1006272c:	7847      	ldrb	r7, [r0, #1]
1006272e:	6a00      	ldr	r0, [r0, #32]
10062730:	5dc4      	ldrb	r4, [r0, r7]
10062732:	f7e3 fd7b 	bl	1004622c <BLEPLAT_GetCurrentSysTime>
10062736:	08c0      	lsrs	r0, r0, #3
10062738:	9001      	str	r0, [sp, #4]
1006273a:	4620      	mov	r0, r4
1006273c:	b2c2      	uxtb	r2, r0
1006273e:	42ba      	cmp	r2, r7
10062740:	d00d      	beq.n	1006275e <cst_sharedCallback+0x38>
10062742:	0053      	lsls	r3, r2, #1
10062744:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
10062746:	5af3      	ldrh	r3, [r6, r3]
10062748:	782e      	ldrb	r6, [r5, #0]
1006274a:	1d76      	adds	r6, r6, #5
1006274c:	9901      	ldr	r1, [sp, #4]
1006274e:	40f1      	lsrs	r1, r6
10062750:	1a59      	subs	r1, r3, r1
10062752:	b209      	sxth	r1, r1
10062754:	2901      	cmp	r1, #1
10062756:	dc03      	bgt.n	10062760 <cst_sharedCallback+0x3a>
10062758:	6a28      	ldr	r0, [r5, #32]
1006275a:	5c80      	ldrb	r0, [r0, r2]
1006275c:	e7ee      	b.n	1006273c <cst_sharedCallback+0x16>
1006275e:	4638      	mov	r0, r7
10062760:	6a29      	ldr	r1, [r5, #32]
10062762:	55c8      	strb	r0, [r1, r7]
10062764:	b2c6      	uxtb	r6, r0
10062766:	4628      	mov	r0, r5
10062768:	4631      	mov	r1, r6
1006276a:	f7ff ff3a 	bl	100625e2 <Timer_TryStartFirstActive>
1006276e:	b2e0      	uxtb	r0, r4
10062770:	42b0      	cmp	r0, r6
10062772:	d006      	beq.n	10062782 <cst_sharedCallback+0x5c>
10062774:	6a29      	ldr	r1, [r5, #32]
10062776:	5c0f      	ldrb	r7, [r1, r0]
10062778:	540c      	strb	r4, [r1, r0]
1006277a:	9902      	ldr	r1, [sp, #8]
1006277c:	4788      	blx	r1
1006277e:	463c      	mov	r4, r7
10062780:	e7f5      	b.n	1006276e <cst_sharedCallback+0x48>
10062782:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10062784 <copy_swap_buffer>:
10062784:	b5f0      	push	{r4, r5, r6, r7, lr}
10062786:	2a00      	cmp	r2, #0
10062788:	d00b      	beq.n	100627a2 <copy_swap_buffer+0x1e>
1006278a:	2400      	movs	r4, #0
1006278c:	43e5      	mvns	r5, r4
1006278e:	2b00      	cmp	r3, #0
10062790:	4626      	mov	r6, r4
10062792:	d000      	beq.n	10062796 <copy_swap_buffer+0x12>
10062794:	1956      	adds	r6, r2, r5
10062796:	5d0f      	ldrb	r7, [r1, r4]
10062798:	5587      	strb	r7, [r0, r6]
1006279a:	1e6d      	subs	r5, r5, #1
1006279c:	1c64      	adds	r4, r4, #1
1006279e:	42a2      	cmp	r2, r4
100627a0:	d1f5      	bne.n	1006278e <copy_swap_buffer+0xa>
100627a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

100627a4 <is_Buffer_All_Set_To>:
100627a4:	b570      	push	{r4, r5, r6, lr}
100627a6:	4603      	mov	r3, r0
100627a8:	2001      	movs	r0, #1
100627aa:	2900      	cmp	r1, #0
100627ac:	d009      	beq.n	100627c2 <is_Buffer_All_Set_To+0x1e>
100627ae:	2400      	movs	r4, #0
100627b0:	4626      	mov	r6, r4
100627b2:	4625      	mov	r5, r4
100627b4:	5d96      	ldrb	r6, [r2, r6]
100627b6:	429e      	cmp	r6, r3
100627b8:	d104      	bne.n	100627c4 <is_Buffer_All_Set_To+0x20>
100627ba:	1c6d      	adds	r5, r5, #1
100627bc:	b2ee      	uxtb	r6, r5
100627be:	428e      	cmp	r6, r1
100627c0:	d3f8      	bcc.n	100627b4 <is_Buffer_All_Set_To+0x10>
100627c2:	bd70      	pop	{r4, r5, r6, pc}
100627c4:	4620      	mov	r0, r4
100627c6:	bd70      	pop	{r4, r5, r6, pc}

100627c8 <char_copy>:
100627c8:	2a00      	cmp	r2, #0
100627ca:	d005      	beq.n	100627d8 <char_copy+0x10>
100627cc:	7803      	ldrb	r3, [r0, #0]
100627ce:	700b      	strb	r3, [r1, #0]
100627d0:	1e52      	subs	r2, r2, #1
100627d2:	1c49      	adds	r1, r1, #1
100627d4:	1c40      	adds	r0, r0, #1
100627d6:	e7f7      	b.n	100627c8 <char_copy>
100627d8:	4770      	bx	lr

100627da <UUID_cmp>:
100627da:	b580      	push	{r7, lr}
100627dc:	7c02      	ldrb	r2, [r0, #16]
100627de:	7c0b      	ldrb	r3, [r1, #16]
100627e0:	429a      	cmp	r2, r3
100627e2:	d106      	bne.n	100627f2 <UUID_cmp+0x18>
100627e4:	2a20      	cmp	r2, #32
100627e6:	d007      	beq.n	100627f8 <UUID_cmp+0x1e>
100627e8:	2a10      	cmp	r2, #16
100627ea:	d109      	bne.n	10062800 <UUID_cmp+0x26>
100627ec:	8989      	ldrh	r1, [r1, #12]
100627ee:	8980      	ldrh	r0, [r0, #12]
100627f0:	e008      	b.n	10062804 <UUID_cmp+0x2a>
100627f2:	2000      	movs	r0, #0
100627f4:	43c0      	mvns	r0, r0
100627f6:	bd80      	pop	{r7, pc}
100627f8:	2210      	movs	r2, #16
100627fa:	f7e3 fc4b 	bl	10046094 <BLEPLAT_MemCmp>
100627fe:	bd80      	pop	{r7, pc}
10062800:	68c9      	ldr	r1, [r1, #12]
10062802:	68c0      	ldr	r0, [r0, #12]
10062804:	1a40      	subs	r0, r0, r1
10062806:	bd80      	pop	{r7, pc}

10062808 <UUID_cmp_128bits>:
10062808:	b570      	push	{r4, r5, r6, lr}
1006280a:	b08a      	sub	sp, #40	@ 0x28
1006280c:	460c      	mov	r4, r1
1006280e:	4601      	mov	r1, r0
10062810:	ad05      	add	r5, sp, #20
10062812:	2614      	movs	r6, #20
10062814:	4628      	mov	r0, r5
10062816:	4632      	mov	r2, r6
10062818:	f7e3 fc1c 	bl	10046054 <BLEPLAT_MemCpy>
1006281c:	4668      	mov	r0, sp
1006281e:	4621      	mov	r1, r4
10062820:	4632      	mov	r2, r6
10062822:	f7e3 fc17 	bl	10046054 <BLEPLAT_MemCpy>
10062826:	7c28      	ldrb	r0, [r5, #16]
10062828:	2880      	cmp	r0, #128	@ 0x80
1006282a:	d007      	beq.n	1006283c <UUID_cmp_128bits+0x34>
1006282c:	ac05      	add	r4, sp, #20
1006282e:	490d      	ldr	r1, [pc, #52]	@ (10062864 <__arm_cp.1_0>)
10062830:	220c      	movs	r2, #12
10062832:	4620      	mov	r0, r4
10062834:	f7e3 fc0e 	bl	10046054 <BLEPLAT_MemCpy>
10062838:	2000      	movs	r0, #0
1006283a:	81e0      	strh	r0, [r4, #14]
1006283c:	4668      	mov	r0, sp
1006283e:	7c00      	ldrb	r0, [r0, #16]
10062840:	2880      	cmp	r0, #128	@ 0x80
10062842:	d007      	beq.n	10062854 <UUID_cmp_128bits+0x4c>
10062844:	466c      	mov	r4, sp
10062846:	4907      	ldr	r1, [pc, #28]	@ (10062864 <__arm_cp.1_0>)
10062848:	220c      	movs	r2, #12
1006284a:	4620      	mov	r0, r4
1006284c:	f7e3 fc02 	bl	10046054 <BLEPLAT_MemCpy>
10062850:	2000      	movs	r0, #0
10062852:	81e0      	strh	r0, [r4, #14]
10062854:	a805      	add	r0, sp, #20
10062856:	4669      	mov	r1, sp
10062858:	2210      	movs	r2, #16
1006285a:	f7e3 fc1b 	bl	10046094 <BLEPLAT_MemCmp>
1006285e:	b00a      	add	sp, #40	@ 0x28
10062860:	bd70      	pop	{r4, r5, r6, pc}
10062862:	46c0      	nop			@ (mov r8, r8)

10062864 <__arm_cp.1_0>:
10062864:	1006a194 	.word	0x1006a194

10062868 <UUID_write_to_flat>:
10062868:	b510      	push	{r4, lr}
1006286a:	460a      	mov	r2, r1
1006286c:	4601      	mov	r1, r0
1006286e:	7c00      	ldrb	r0, [r0, #16]
10062870:	2820      	cmp	r0, #32
10062872:	d004      	beq.n	1006287e <UUID_write_to_flat+0x16>
10062874:	2810      	cmp	r0, #16
10062876:	d105      	bne.n	10062884 <UUID_write_to_flat+0x1c>
10062878:	310c      	adds	r1, #12
1006287a:	2402      	movs	r4, #2
1006287c:	e003      	b.n	10062886 <UUID_write_to_flat+0x1e>
1006287e:	310c      	adds	r1, #12
10062880:	2404      	movs	r4, #4
10062882:	e000      	b.n	10062886 <UUID_write_to_flat+0x1e>
10062884:	2410      	movs	r4, #16
10062886:	4610      	mov	r0, r2
10062888:	4622      	mov	r2, r4
1006288a:	f7e3 fbe3 	bl	10046054 <BLEPLAT_MemCpy>
1006288e:	4620      	mov	r0, r4
10062890:	bd10      	pop	{r4, pc}

10062892 <UUID_get_value_p>:
10062892:	7c01      	ldrb	r1, [r0, #16]
10062894:	2980      	cmp	r1, #128	@ 0x80
10062896:	d000      	beq.n	1006289a <UUID_get_value_p+0x8>
10062898:	300c      	adds	r0, #12
1006289a:	4770      	bx	lr

1006289c <ACL_list_init>:
1006289c:	2100      	movs	r1, #0
1006289e:	6001      	str	r1, [r0, #0]
100628a0:	6040      	str	r0, [r0, #4]
100628a2:	4770      	bx	lr

100628a4 <ACL_list_insert_tail>:
100628a4:	2200      	movs	r2, #0
100628a6:	61ca      	str	r2, [r1, #28]
100628a8:	6842      	ldr	r2, [r0, #4]
100628aa:	6011      	str	r1, [r2, #0]
100628ac:	311c      	adds	r1, #28
100628ae:	6041      	str	r1, [r0, #4]
100628b0:	4770      	bx	lr

100628b2 <ACL_list_insert_head>:
100628b2:	6802      	ldr	r2, [r0, #0]
100628b4:	61ca      	str	r2, [r1, #28]
100628b6:	2a00      	cmp	r2, #0
100628b8:	d102      	bne.n	100628c0 <ACL_list_insert_head+0xe>
100628ba:	460a      	mov	r2, r1
100628bc:	321c      	adds	r2, #28
100628be:	6042      	str	r2, [r0, #4]
100628c0:	6001      	str	r1, [r0, #0]
100628c2:	4770      	bx	lr

100628c4 <ACL_list_remove>:
100628c4:	6803      	ldr	r3, [r0, #0]
100628c6:	428b      	cmp	r3, r1
100628c8:	d009      	beq.n	100628de <ACL_list_remove+0x1a>
100628ca:	461a      	mov	r2, r3
100628cc:	69db      	ldr	r3, [r3, #28]
100628ce:	428b      	cmp	r3, r1
100628d0:	d1fb      	bne.n	100628ca <ACL_list_remove+0x6>
100628d2:	69cb      	ldr	r3, [r1, #28]
100628d4:	61d3      	str	r3, [r2, #28]
100628d6:	2b00      	cmp	r3, #0
100628d8:	d107      	bne.n	100628ea <ACL_list_remove+0x26>
100628da:	321c      	adds	r2, #28
100628dc:	e004      	b.n	100628e8 <ACL_list_remove+0x24>
100628de:	69ca      	ldr	r2, [r1, #28]
100628e0:	6002      	str	r2, [r0, #0]
100628e2:	2a00      	cmp	r2, #0
100628e4:	d101      	bne.n	100628ea <ACL_list_remove+0x26>
100628e6:	4602      	mov	r2, r0
100628e8:	6042      	str	r2, [r0, #4]
100628ea:	2000      	movs	r0, #0
100628ec:	61c8      	str	r0, [r1, #28]
100628ee:	4770      	bx	lr

100628f0 <ACL_list_remove_head>:
100628f0:	4601      	mov	r1, r0
100628f2:	6800      	ldr	r0, [r0, #0]
100628f4:	69c2      	ldr	r2, [r0, #28]
100628f6:	600a      	str	r2, [r1, #0]
100628f8:	2a00      	cmp	r2, #0
100628fa:	d100      	bne.n	100628fe <ACL_list_remove_head+0xe>
100628fc:	6049      	str	r1, [r1, #4]
100628fe:	2100      	movs	r1, #0
10062900:	61c1      	str	r1, [r0, #28]
10062902:	4770      	bx	lr

10062904 <ACL_list_get_pckt_count>:
10062904:	2100      	movs	r1, #0
10062906:	6800      	ldr	r0, [r0, #0]
10062908:	2800      	cmp	r0, #0
1006290a:	d002      	beq.n	10062912 <ACL_list_get_pckt_count+0xe>
1006290c:	301c      	adds	r0, #28
1006290e:	1c49      	adds	r1, r1, #1
10062910:	e7f9      	b.n	10062906 <ACL_list_get_pckt_count+0x2>
10062912:	b288      	uxth	r0, r1
10062914:	4770      	bx	lr
	...

10062918 <addr8_list_search>:
10062918:	b5f0      	push	{r4, r5, r6, r7, lr}
1006291a:	b083      	sub	sp, #12
1006291c:	9202      	str	r2, [sp, #8]
1006291e:	9d08      	ldr	r5, [sp, #32]
10062920:	2d00      	cmp	r5, #0
10062922:	d101      	bne.n	10062928 <addr8_list_search+0x10>
10062924:	462e      	mov	r6, r5
10062926:	e002      	b.n	1006292e <addr8_list_search+0x16>
10062928:	24ff      	movs	r4, #255	@ 0xff
1006292a:	0626      	lsls	r6, r4, #24
1006292c:	401e      	ands	r6, r3
1006292e:	060c      	lsls	r4, r1, #24
10062930:	9c09      	ldr	r4, [sp, #36]	@ 0x24
10062932:	d02a      	beq.n	1006298a <addr8_list_search+0x72>
10062934:	9501      	str	r5, [sp, #4]
10062936:	9400      	str	r4, [sp, #0]
10062938:	4a18      	ldr	r2, [pc, #96]	@ (1006299c <__arm_cp.0_0>)
1006293a:	4013      	ands	r3, r2
1006293c:	431e      	orrs	r6, r3
1006293e:	1e4a      	subs	r2, r1, #1
10062940:	b2c9      	uxtb	r1, r1
10062942:	0849      	lsrs	r1, r1, #1
10062944:	2400      	movs	r4, #0
10062946:	b2cd      	uxtb	r5, r1
10062948:	00ed      	lsls	r5, r5, #3
1006294a:	1947      	adds	r7, r0, r5
1006294c:	687f      	ldr	r7, [r7, #4]
1006294e:	9b01      	ldr	r3, [sp, #4]
10062950:	2b00      	cmp	r3, #0
10062952:	d101      	bne.n	10062958 <addr8_list_search+0x40>
10062954:	4b11      	ldr	r3, [pc, #68]	@ (1006299c <__arm_cp.0_0>)
10062956:	401f      	ands	r7, r3
10062958:	5945      	ldr	r5, [r0, r5]
1006295a:	9b02      	ldr	r3, [sp, #8]
1006295c:	42ab      	cmp	r3, r5
1006295e:	d101      	bne.n	10062964 <addr8_list_search+0x4c>
10062960:	42be      	cmp	r6, r7
10062962:	d015      	beq.n	10062990 <addr8_list_search+0x78>
10062964:	42be      	cmp	r6, r7
10062966:	d803      	bhi.n	10062970 <addr8_list_search+0x58>
10062968:	d104      	bne.n	10062974 <addr8_list_search+0x5c>
1006296a:	9b02      	ldr	r3, [sp, #8]
1006296c:	42ab      	cmp	r3, r5
1006296e:	d901      	bls.n	10062974 <addr8_list_search+0x5c>
10062970:	1c4c      	adds	r4, r1, #1
10062972:	e000      	b.n	10062976 <addr8_list_search+0x5e>
10062974:	1e4a      	subs	r2, r1, #1
10062976:	1b11      	subs	r1, r2, r4
10062978:	b2c9      	uxtb	r1, r1
1006297a:	1c4d      	adds	r5, r1, #1
1006297c:	b2ef      	uxtb	r7, r5
1006297e:	0879      	lsrs	r1, r7, #1
10062980:	1909      	adds	r1, r1, r4
10062982:	42af      	cmp	r7, r5
10062984:	d0df      	beq.n	10062946 <addr8_list_search+0x2e>
10062986:	2000      	movs	r0, #0
10062988:	e003      	b.n	10062992 <addr8_list_search+0x7a>
1006298a:	2100      	movs	r1, #0
1006298c:	4608      	mov	r0, r1
1006298e:	e001      	b.n	10062994 <addr8_list_search+0x7c>
10062990:	2001      	movs	r0, #1
10062992:	9c00      	ldr	r4, [sp, #0]
10062994:	7021      	strb	r1, [r4, #0]
10062996:	b003      	add	sp, #12
10062998:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006299a:	46c0      	nop			@ (mov r8, r8)

1006299c <__arm_cp.0_0>:
1006299c:	00ffffff 	.word	0x00ffffff

100629a0 <addr8_list_add>:
100629a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100629a2:	b089      	sub	sp, #36	@ 0x24
100629a4:	4615      	mov	r5, r2
100629a6:	460f      	mov	r7, r1
100629a8:	4604      	mov	r4, r0
100629aa:	7906      	ldrb	r6, [r0, #4]
100629ac:	6800      	ldr	r0, [r0, #0]
100629ae:	6861      	ldr	r1, [r4, #4]
100629b0:	aa08      	add	r2, sp, #32
100629b2:	9300      	str	r3, [sp, #0]
100629b4:	9201      	str	r2, [sp, #4]
100629b6:	463a      	mov	r2, r7
100629b8:	462b      	mov	r3, r5
100629ba:	f7ff ffad 	bl	10062918 <addr8_list_search>
100629be:	2100      	movs	r1, #0
100629c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
100629c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
100629c4:	2800      	cmp	r0, #0
100629c6:	9207      	str	r2, [sp, #28]
100629c8:	d126      	bne.n	10062a18 <addr8_list_add+0x78>
100629ca:	9706      	str	r7, [sp, #24]
100629cc:	7967      	ldrb	r7, [r4, #5]
100629ce:	42be      	cmp	r6, r7
100629d0:	d222      	bcs.n	10062a18 <addr8_list_add+0x78>
100629d2:	9302      	str	r3, [sp, #8]
100629d4:	9003      	str	r0, [sp, #12]
100629d6:	9504      	str	r5, [sp, #16]
100629d8:	a908      	add	r1, sp, #32
100629da:	7808      	ldrb	r0, [r1, #0]
100629dc:	9605      	str	r6, [sp, #20]
100629de:	4286      	cmp	r6, r0
100629e0:	d00d      	beq.n	100629fe <addr8_list_add+0x5e>
100629e2:	9f05      	ldr	r7, [sp, #20]
100629e4:	6822      	ldr	r2, [r4, #0]
100629e6:	b2fd      	uxtb	r5, r7
100629e8:	00ed      	lsls	r5, r5, #3
100629ea:	1956      	adds	r6, r2, r5
100629ec:	4633      	mov	r3, r6
100629ee:	3b08      	subs	r3, #8
100629f0:	cb0a      	ldmia	r3, {r1, r3}
100629f2:	5151      	str	r1, [r2, r5]
100629f4:	6073      	str	r3, [r6, #4]
100629f6:	1e7f      	subs	r7, r7, #1
100629f8:	b2f9      	uxtb	r1, r7
100629fa:	4281      	cmp	r1, r0
100629fc:	d1f2      	bne.n	100629e4 <addr8_list_add+0x44>
100629fe:	6821      	ldr	r1, [r4, #0]
10062a00:	00c0      	lsls	r0, r0, #3
10062a02:	9a06      	ldr	r2, [sp, #24]
10062a04:	500a      	str	r2, [r1, r0]
10062a06:	1808      	adds	r0, r1, r0
10062a08:	9904      	ldr	r1, [sp, #16]
10062a0a:	6041      	str	r1, [r0, #4]
10062a0c:	9805      	ldr	r0, [sp, #20]
10062a0e:	1c40      	adds	r0, r0, #1
10062a10:	7120      	strb	r0, [r4, #4]
10062a12:	2101      	movs	r1, #1
10062a14:	9803      	ldr	r0, [sp, #12]
10062a16:	9b02      	ldr	r3, [sp, #8]
10062a18:	9a08      	ldr	r2, [sp, #32]
10062a1a:	9c07      	ldr	r4, [sp, #28]
10062a1c:	7022      	strb	r2, [r4, #0]
10062a1e:	7018      	strb	r0, [r3, #0]
10062a20:	4608      	mov	r0, r1
10062a22:	b009      	add	sp, #36	@ 0x24
10062a24:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062a26 <addr8_list_remove_by_addr>:
10062a26:	b5f0      	push	{r4, r5, r6, r7, lr}
10062a28:	b087      	sub	sp, #28
10062a2a:	460f      	mov	r7, r1
10062a2c:	4601      	mov	r1, r0
10062a2e:	7900      	ldrb	r0, [r0, #4]
10062a30:	2600      	movs	r6, #0
10062a32:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
10062a34:	2800      	cmp	r0, #0
10062a36:	d02f      	beq.n	10062a98 <addr8_list_remove_by_addr+0x72>
10062a38:	9003      	str	r0, [sp, #12]
10062a3a:	6808      	ldr	r0, [r1, #0]
10062a3c:	9104      	str	r1, [sp, #16]
10062a3e:	6849      	ldr	r1, [r1, #4]
10062a40:	9205      	str	r2, [sp, #20]
10062a42:	ad06      	add	r5, sp, #24
10062a44:	9300      	str	r3, [sp, #0]
10062a46:	9501      	str	r5, [sp, #4]
10062a48:	463a      	mov	r2, r7
10062a4a:	9b05      	ldr	r3, [sp, #20]
10062a4c:	f7ff ff64 	bl	10062918 <addr8_list_search>
10062a50:	2800      	cmp	r0, #0
10062a52:	d021      	beq.n	10062a98 <addr8_list_remove_by_addr+0x72>
10062a54:	9002      	str	r0, [sp, #8]
10062a56:	9405      	str	r4, [sp, #20]
10062a58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10062a5a:	9c04      	ldr	r4, [sp, #16]
10062a5c:	6823      	ldr	r3, [r4, #0]
10062a5e:	a906      	add	r1, sp, #24
10062a60:	7809      	ldrb	r1, [r1, #0]
10062a62:	00cd      	lsls	r5, r1, #3
10062a64:	195b      	adds	r3, r3, r5
10062a66:	79db      	ldrb	r3, [r3, #7]
10062a68:	7013      	strb	r3, [r2, #0]
10062a6a:	9803      	ldr	r0, [sp, #12]
10062a6c:	1e40      	subs	r0, r0, #1
10062a6e:	9003      	str	r0, [sp, #12]
10062a70:	b2c0      	uxtb	r0, r0
10062a72:	4281      	cmp	r1, r0
10062a74:	4623      	mov	r3, r4
10062a76:	d00b      	beq.n	10062a90 <addr8_list_remove_by_addr+0x6a>
10062a78:	681d      	ldr	r5, [r3, #0]
10062a7a:	b2ce      	uxtb	r6, r1
10062a7c:	00f6      	lsls	r6, r6, #3
10062a7e:	19af      	adds	r7, r5, r6
10062a80:	68ba      	ldr	r2, [r7, #8]
10062a82:	68fc      	ldr	r4, [r7, #12]
10062a84:	51aa      	str	r2, [r5, r6]
10062a86:	607c      	str	r4, [r7, #4]
10062a88:	1c49      	adds	r1, r1, #1
10062a8a:	b2ca      	uxtb	r2, r1
10062a8c:	4282      	cmp	r2, r0
10062a8e:	d1f3      	bne.n	10062a78 <addr8_list_remove_by_addr+0x52>
10062a90:	9803      	ldr	r0, [sp, #12]
10062a92:	7118      	strb	r0, [r3, #4]
10062a94:	9e02      	ldr	r6, [sp, #8]
10062a96:	9c05      	ldr	r4, [sp, #20]
10062a98:	7026      	strb	r6, [r4, #0]
10062a9a:	b007      	add	sp, #28
10062a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062a9e <addr8_list_clear>:
10062a9e:	2100      	movs	r1, #0
10062aa0:	7101      	strb	r1, [r0, #4]
10062aa2:	4770      	bx	lr

10062aa4 <AES_CMAC_Encrypt>:
10062aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
10062aa6:	b0b9      	sub	sp, #228	@ 0xe4
10062aa8:	461c      	mov	r4, r3
10062aaa:	460e      	mov	r6, r1
10062aac:	4607      	mov	r7, r0
10062aae:	ad01      	add	r5, sp, #4
10062ab0:	2020      	movs	r0, #32
10062ab2:	7128      	strb	r0, [r5, #4]
10062ab4:	2010      	movs	r0, #16
10062ab6:	9038      	str	r0, [sp, #224]	@ 0xe0
10062ab8:	900a      	str	r0, [sp, #40]	@ 0x28
10062aba:	9203      	str	r2, [sp, #12]
10062abc:	2000      	movs	r0, #0
10062abe:	9000      	str	r0, [sp, #0]
10062ac0:	4628      	mov	r0, r5
10062ac2:	f7e3 fb45 	bl	10046150 <BLEPLAT_AesCMACEncryptInit>
10062ac6:	4628      	mov	r0, r5
10062ac8:	4639      	mov	r1, r7
10062aca:	4632      	mov	r2, r6
10062acc:	f7e3 fb4d 	bl	1004616a <BLEPLAT_AesCMACEncryptAppend>
10062ad0:	466a      	mov	r2, sp
10062ad2:	4628      	mov	r0, r5
10062ad4:	4621      	mov	r1, r4
10062ad6:	f7e3 fb59 	bl	1004618c <BLEPLAT_AesCMACEncryptFinish>
10062ada:	b039      	add	sp, #228	@ 0xe4
10062adc:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062ade <BLEPLAT_aes128_encrypt>:
10062ade:	b580      	push	{r7, lr}
10062ae0:	f7e3 fb26 	bl	10046130 <BLEPLAT_AesEcbEncrypt>
10062ae4:	bd80      	pop	{r7, pc}

10062ae6 <Hal_Get_Random_Number>:
10062ae6:	b51c      	push	{r2, r3, r4, lr}
10062ae8:	ac01      	add	r4, sp, #4
10062aea:	4620      	mov	r0, r4
10062aec:	f7e3 fb5f 	bl	100461ae <BLEPLAT_RngGetRandom16>
10062af0:	8820      	ldrh	r0, [r4, #0]
10062af2:	bd1c      	pop	{r2, r3, r4, pc}

10062af4 <Hal_Get_Random_Number32>:
10062af4:	b5e0      	push	{r5, r6, r7, lr}
10062af6:	a801      	add	r0, sp, #4
10062af8:	f7e3 fb65 	bl	100461c6 <BLEPLAT_RngGetRandom32>
10062afc:	9801      	ldr	r0, [sp, #4]
10062afe:	bd8c      	pop	{r2, r3, r7, pc}

10062b00 <HAL_Generate_Random_Bytes_To>:
10062b00:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10062b02:	460c      	mov	r4, r1
10062b04:	4605      	mov	r5, r0
10062b06:	2000      	movs	r0, #0
10062b08:	b2c6      	uxtb	r6, r0
10062b0a:	42a6      	cmp	r6, r4
10062b0c:	d20e      	bcs.n	10062b2c <HAL_Generate_Random_Bytes_To+0x2c>
10062b0e:	2000      	movs	r0, #0
10062b10:	f7ff ffe9 	bl	10062ae6 <Hal_Get_Random_Number>
10062b14:	55a8      	strb	r0, [r5, r6]
10062b16:	a901      	add	r1, sp, #4
10062b18:	7008      	strb	r0, [r1, #0]
10062b1a:	0a00      	lsrs	r0, r0, #8
10062b1c:	4669      	mov	r1, sp
10062b1e:	7008      	strb	r0, [r1, #0]
10062b20:	1c71      	adds	r1, r6, #1
10062b22:	42a1      	cmp	r1, r4
10062b24:	d200      	bcs.n	10062b28 <HAL_Generate_Random_Bytes_To+0x28>
10062b26:	5468      	strb	r0, [r5, r1]
10062b28:	1cb0      	adds	r0, r6, #2
10062b2a:	e7ed      	b.n	10062b08 <HAL_Generate_Random_Bytes_To+0x8>
10062b2c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
	...

10062b30 <IDD_Initialize_Device_IDs>:
10062b30:	b5f0      	push	{r4, r5, r6, r7, lr}
10062b32:	b095      	sub	sp, #84	@ 0x54
10062b34:	4839      	ldr	r0, [pc, #228]	@ (10062c1c <__arm_cp.0_0>)
10062b36:	6800      	ldr	r0, [r0, #0]
10062b38:	9000      	str	r0, [sp, #0]
10062b3a:	a80b      	add	r0, sp, #44	@ 0x2c
10062b3c:	f7ff fc5a 	bl	100623f4 <nvm_dev_id_data_get_record>
10062b40:	2800      	cmp	r0, #0
10062b42:	d031      	beq.n	10062ba8 <IDD_Initialize_Device_IDs+0x78>
10062b44:	af01      	add	r7, sp, #4
10062b46:	2406      	movs	r4, #6
10062b48:	2500      	movs	r5, #0
10062b4a:	4b35      	ldr	r3, [pc, #212]	@ (10062c20 <__arm_cp.0_1>)
10062b4c:	4638      	mov	r0, r7
10062b4e:	4621      	mov	r1, r4
10062b50:	462a      	mov	r2, r5
10062b52:	4798      	blx	r3
10062b54:	7978      	ldrb	r0, [r7, #5]
10062b56:	21c0      	movs	r1, #192	@ 0xc0
10062b58:	4301      	orrs	r1, r0
10062b5a:	7179      	strb	r1, [r7, #5]
10062b5c:	ae0b      	add	r6, sp, #44	@ 0x2c
10062b5e:	4630      	mov	r0, r6
10062b60:	3020      	adds	r0, #32
10062b62:	4b30      	ldr	r3, [pc, #192]	@ (10062c24 <__arm_cp.0_2>)
10062b64:	4639      	mov	r1, r7
10062b66:	4622      	mov	r2, r4
10062b68:	4798      	blx	r3
10062b6a:	ac07      	add	r4, sp, #28
10062b6c:	2710      	movs	r7, #16
10062b6e:	4620      	mov	r0, r4
10062b70:	4639      	mov	r1, r7
10062b72:	462a      	mov	r2, r5
10062b74:	4b2a      	ldr	r3, [pc, #168]	@ (10062c20 <__arm_cp.0_1>)
10062b76:	4798      	blx	r3
10062b78:	4630      	mov	r0, r6
10062b7a:	4621      	mov	r1, r4
10062b7c:	463a      	mov	r2, r7
10062b7e:	4b29      	ldr	r3, [pc, #164]	@ (10062c24 <__arm_cp.0_2>)
10062b80:	4798      	blx	r3
10062b82:	ac03      	add	r4, sp, #12
10062b84:	4620      	mov	r0, r4
10062b86:	4639      	mov	r1, r7
10062b88:	462a      	mov	r2, r5
10062b8a:	4b25      	ldr	r3, [pc, #148]	@ (10062c20 <__arm_cp.0_1>)
10062b8c:	4798      	blx	r3
10062b8e:	4630      	mov	r0, r6
10062b90:	3010      	adds	r0, #16
10062b92:	4621      	mov	r1, r4
10062b94:	463a      	mov	r2, r7
10062b96:	4b23      	ldr	r3, [pc, #140]	@ (10062c24 <__arm_cp.0_2>)
10062b98:	4798      	blx	r3
10062b9a:	4630      	mov	r0, r6
10062b9c:	f7ff fc37 	bl	1006240e <nvm_dev_id_data_add_record>
10062ba0:	2800      	cmp	r0, #0
10062ba2:	d103      	bne.n	10062bac <IDD_Initialize_Device_IDs+0x7c>
10062ba4:	4605      	mov	r5, r0
10062ba6:	e003      	b.n	10062bb0 <IDD_Initialize_Device_IDs+0x80>
10062ba8:	2500      	movs	r5, #0
10062baa:	e001      	b.n	10062bb0 <IDD_Initialize_Device_IDs+0x80>
10062bac:	200e      	movs	r0, #14
10062bae:	43c5      	mvns	r5, r0
10062bb0:	4c1d      	ldr	r4, [pc, #116]	@ (10062c28 <__arm_cp.0_3>)
10062bb2:	6822      	ldr	r2, [r4, #0]
10062bb4:	322e      	adds	r2, #46	@ 0x2e
10062bb6:	2600      	movs	r6, #0
10062bb8:	2706      	movs	r7, #6
10062bba:	4630      	mov	r0, r6
10062bbc:	4639      	mov	r1, r7
10062bbe:	f7ff fdf1 	bl	100627a4 <is_Buffer_All_Set_To>
10062bc2:	a90b      	add	r1, sp, #44	@ 0x2c
10062bc4:	2800      	cmp	r0, #0
10062bc6:	d001      	beq.n	10062bcc <IDD_Initialize_Device_IDs+0x9c>
10062bc8:	3120      	adds	r1, #32
10062bca:	e001      	b.n	10062bd0 <IDD_Initialize_Device_IDs+0xa0>
10062bcc:	6821      	ldr	r1, [r4, #0]
10062bce:	312e      	adds	r1, #46	@ 0x2e
10062bd0:	9800      	ldr	r0, [sp, #0]
10062bd2:	3060      	adds	r0, #96	@ 0x60
10062bd4:	463a      	mov	r2, r7
10062bd6:	f7e3 fa3d 	bl	10046054 <BLEPLAT_MemCpy>
10062bda:	6822      	ldr	r2, [r4, #0]
10062bdc:	3208      	adds	r2, #8
10062bde:	2110      	movs	r1, #16
10062be0:	4630      	mov	r0, r6
10062be2:	f7ff fddf 	bl	100627a4 <is_Buffer_All_Set_To>
10062be6:	2800      	cmp	r0, #0
10062be8:	d005      	beq.n	10062bf6 <IDD_Initialize_Device_IDs+0xc6>
10062bea:	6820      	ldr	r0, [r4, #0]
10062bec:	3008      	adds	r0, #8
10062bee:	a90b      	add	r1, sp, #44	@ 0x2c
10062bf0:	2210      	movs	r2, #16
10062bf2:	f7e3 fa2f 	bl	10046054 <BLEPLAT_MemCpy>
10062bf6:	6822      	ldr	r2, [r4, #0]
10062bf8:	3218      	adds	r2, #24
10062bfa:	2000      	movs	r0, #0
10062bfc:	2110      	movs	r1, #16
10062bfe:	f7ff fdd1 	bl	100627a4 <is_Buffer_All_Set_To>
10062c02:	2800      	cmp	r0, #0
10062c04:	d006      	beq.n	10062c14 <IDD_Initialize_Device_IDs+0xe4>
10062c06:	a90b      	add	r1, sp, #44	@ 0x2c
10062c08:	3110      	adds	r1, #16
10062c0a:	6820      	ldr	r0, [r4, #0]
10062c0c:	3018      	adds	r0, #24
10062c0e:	2210      	movs	r2, #16
10062c10:	f7e3 fa20 	bl	10046054 <BLEPLAT_MemCpy>
10062c14:	b2e8      	uxtb	r0, r5
10062c16:	b015      	add	sp, #84	@ 0x54
10062c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
10062c1a:	46c0      	nop			@ (mov r8, r8)

10062c1c <__arm_cp.0_0>:
10062c1c:	200010a8 	.word	0x200010a8

10062c20 <__arm_cp.0_1>:
10062c20:	10062b01 	.word	0x10062b01

10062c24 <__arm_cp.0_2>:
10062c24:	10046055 	.word	0x10046055

10062c28 <__arm_cp.0_3>:
10062c28:	200010a0 	.word	0x200010a0

10062c2c <aci_gatt_clt_notification_event_notify>:
10062c2c:	b5b0      	push	{r4, r5, r7, lr}
10062c2e:	b0ff      	sub	sp, #508	@ 0x1fc
10062c30:	b083      	sub	sp, #12
10062c32:	461c      	mov	r4, r3
10062c34:	466d      	mov	r5, sp
10062c36:	732b      	strb	r3, [r5, #12]
10062c38:	72aa      	strb	r2, [r5, #10]
10062c3a:	7229      	strb	r1, [r5, #8]
10062c3c:	71a8      	strb	r0, [r5, #6]
10062c3e:	0a1b      	lsrs	r3, r3, #8
10062c40:	736b      	strb	r3, [r5, #13]
10062c42:	0a12      	lsrs	r2, r2, #8
10062c44:	72ea      	strb	r2, [r5, #11]
10062c46:	0a09      	lsrs	r1, r1, #8
10062c48:	7269      	strb	r1, [r5, #9]
10062c4a:	0a00      	lsrs	r0, r0, #8
10062c4c:	71e8      	strb	r0, [r5, #7]
10062c4e:	4628      	mov	r0, r5
10062c50:	300e      	adds	r0, #14
10062c52:	9986      	ldr	r1, [sp, #536]	@ 0x218
10062c54:	4622      	mov	r2, r4
10062c56:	f7e3 f9fd 	bl	10046054 <BLEPLAT_MemCpy>
10062c5a:	4620      	mov	r0, r4
10062c5c:	300a      	adds	r0, #10
10062c5e:	70a8      	strb	r0, [r5, #2]
10062c60:	0a00      	lsrs	r0, r0, #8
10062c62:	70e8      	strb	r0, [r5, #3]
10062c64:	200f      	movs	r0, #15
10062c66:	7128      	strb	r0, [r5, #4]
10062c68:	20ff      	movs	r0, #255	@ 0xff
10062c6a:	7068      	strb	r0, [r5, #1]
10062c6c:	2082      	movs	r0, #130	@ 0x82
10062c6e:	7028      	strb	r0, [r5, #0]
10062c70:	200c      	movs	r0, #12
10062c72:	7168      	strb	r0, [r5, #5]
10062c74:	340e      	adds	r4, #14
10062c76:	b2a1      	uxth	r1, r4
10062c78:	4628      	mov	r0, r5
10062c7a:	f7ee fc07 	bl	1005148c <BLE_STACK_Event>
10062c7e:	b07f      	add	sp, #508	@ 0x1fc
10062c80:	b003      	add	sp, #12
10062c82:	bdb0      	pop	{r4, r5, r7, pc}

10062c84 <aci_gatt_clt_indication_event_cb>:
10062c84:	b5b0      	push	{r4, r5, r7, lr}
10062c86:	b0ff      	sub	sp, #508	@ 0x1fc
10062c88:	b083      	sub	sp, #12
10062c8a:	460c      	mov	r4, r1
10062c8c:	4605      	mov	r5, r0
10062c8e:	688b      	ldr	r3, [r1, #8]
10062c90:	88ca      	ldrh	r2, [r1, #6]
10062c92:	8889      	ldrh	r1, [r1, #4]
10062c94:	4668      	mov	r0, sp
10062c96:	1d80      	adds	r0, r0, #6
10062c98:	f7f0 fde3 	bl	10053862 <aci_gatt_clt_indication_event_copy>
10062c9c:	0728      	lsls	r0, r5, #28
10062c9e:	d502      	bpl.n	10062ca6 <aci_gatt_clt_indication_event_cb+0x22>
10062ca0:	68a0      	ldr	r0, [r4, #8]
10062ca2:	f7ef ff87 	bl	10052bb4 <ACL_pkt_release>
10062ca6:	9903      	ldr	r1, [sp, #12]
10062ca8:	460a      	mov	r2, r1
10062caa:	320a      	adds	r2, #10
10062cac:	4668      	mov	r0, sp
10062cae:	7082      	strb	r2, [r0, #2]
10062cb0:	0a12      	lsrs	r2, r2, #8
10062cb2:	70c2      	strb	r2, [r0, #3]
10062cb4:	220e      	movs	r2, #14
10062cb6:	7102      	strb	r2, [r0, #4]
10062cb8:	4a05      	ldr	r2, [pc, #20]	@ (10062cd0 <__arm_cp.1_0>)
10062cba:	8002      	strh	r2, [r0, #0]
10062cbc:	220c      	movs	r2, #12
10062cbe:	7142      	strb	r2, [r0, #5]
10062cc0:	310e      	adds	r1, #14
10062cc2:	b289      	uxth	r1, r1
10062cc4:	f7ee fbe2 	bl	1005148c <BLE_STACK_Event>
10062cc8:	b07f      	add	sp, #508	@ 0x1fc
10062cca:	b003      	add	sp, #12
10062ccc:	bdb0      	pop	{r4, r5, r7, pc}
10062cce:	46c0      	nop			@ (mov r8, r8)

10062cd0 <__arm_cp.1_0>:
10062cd0:	0000ff82 	.word	0x0000ff82

10062cd4 <aci_gatt_clt_notification_event_cb>:
10062cd4:	b5b0      	push	{r4, r5, r7, lr}
10062cd6:	b0ff      	sub	sp, #508	@ 0x1fc
10062cd8:	b085      	sub	sp, #20
10062cda:	460c      	mov	r4, r1
10062cdc:	4605      	mov	r5, r0
10062cde:	688b      	ldr	r3, [r1, #8]
10062ce0:	88ca      	ldrh	r2, [r1, #6]
10062ce2:	8889      	ldrh	r1, [r1, #4]
10062ce4:	a802      	add	r0, sp, #8
10062ce6:	1d80      	adds	r0, r0, #6
10062ce8:	f7f0 fde0 	bl	100538ac <aci_gatt_clt_notification_event_copy>
10062cec:	0728      	lsls	r0, r5, #28
10062cee:	d502      	bpl.n	10062cf6 <aci_gatt_clt_notification_event_cb+0x22>
10062cf0:	68a0      	ldr	r0, [r4, #8]
10062cf2:	f7ef ff5f 	bl	10052bb4 <ACL_pkt_release>
10062cf6:	ac02      	add	r4, sp, #8
10062cf8:	89a3      	ldrh	r3, [r4, #12]
10062cfa:	8962      	ldrh	r2, [r4, #10]
10062cfc:	8921      	ldrh	r1, [r4, #8]
10062cfe:	88e0      	ldrh	r0, [r4, #6]
10062d00:	340e      	adds	r4, #14
10062d02:	9400      	str	r4, [sp, #0]
10062d04:	f7ff ff92 	bl	10062c2c <aci_gatt_clt_notification_event_notify>
10062d08:	b07f      	add	sp, #508	@ 0x1fc
10062d0a:	b005      	add	sp, #20
10062d0c:	bdb0      	pop	{r4, r5, r7, pc}
	...

10062d10 <aci_gatt_srv_write_event_cb>:
10062d10:	b5f0      	push	{r4, r5, r6, r7, lr}
10062d12:	b0ff      	sub	sp, #508	@ 0x1fc
10062d14:	b086      	sub	sp, #24
10062d16:	460c      	mov	r4, r1
10062d18:	4605      	mov	r5, r0
10062d1a:	7a0b      	ldrb	r3, [r1, #8]
10062d1c:	88ca      	ldrh	r2, [r1, #6]
10062d1e:	8889      	ldrh	r1, [r1, #4]
10062d20:	8960      	ldrh	r0, [r4, #10]
10062d22:	89a6      	ldrh	r6, [r4, #12]
10062d24:	6927      	ldr	r7, [r4, #16]
10062d26:	9000      	str	r0, [sp, #0]
10062d28:	9601      	str	r6, [sp, #4]
10062d2a:	9702      	str	r7, [sp, #8]
10062d2c:	a803      	add	r0, sp, #12
10062d2e:	1d80      	adds	r0, r0, #6
10062d30:	f7f0 fe05 	bl	1005393e <aci_gatt_srv_write_event_copy>
10062d34:	0728      	lsls	r0, r5, #28
10062d36:	d502      	bpl.n	10062d3e <aci_gatt_srv_write_event_cb+0x2e>
10062d38:	6920      	ldr	r0, [r4, #16]
10062d3a:	f7ef ff3b 	bl	10052bb4 <ACL_pkt_release>
10062d3e:	a803      	add	r0, sp, #12
10062d40:	7b41      	ldrb	r1, [r0, #13]
10062d42:	7b82      	ldrb	r2, [r0, #14]
10062d44:	0212      	lsls	r2, r2, #8
10062d46:	1851      	adds	r1, r2, r1
10062d48:	460a      	mov	r2, r1
10062d4a:	320b      	adds	r2, #11
10062d4c:	7082      	strb	r2, [r0, #2]
10062d4e:	0a12      	lsrs	r2, r2, #8
10062d50:	70c2      	strb	r2, [r0, #3]
10062d52:	221a      	movs	r2, #26
10062d54:	7102      	strb	r2, [r0, #4]
10062d56:	4a05      	ldr	r2, [pc, #20]	@ (10062d6c <__arm_cp.3_0>)
10062d58:	8002      	strh	r2, [r0, #0]
10062d5a:	220c      	movs	r2, #12
10062d5c:	7142      	strb	r2, [r0, #5]
10062d5e:	310f      	adds	r1, #15
10062d60:	b289      	uxth	r1, r1
10062d62:	f7ee fb93 	bl	1005148c <BLE_STACK_Event>
10062d66:	b07f      	add	sp, #508	@ 0x1fc
10062d68:	b006      	add	sp, #24
10062d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062d6c <__arm_cp.3_0>:
10062d6c:	0000ff82 	.word	0x0000ff82

10062d70 <aci_gatt_clt_multi_notification_int_event_cb>:
10062d70:	b5f0      	push	{r4, r5, r6, r7, lr}
10062d72:	b0ff      	sub	sp, #508	@ 0x1fc
10062d74:	b08c      	sub	sp, #48	@ 0x30
10062d76:	460c      	mov	r4, r1
10062d78:	4605      	mov	r5, r0
10062d7a:	688b      	ldr	r3, [r1, #8]
10062d7c:	88ca      	ldrh	r2, [r1, #6]
10062d7e:	8889      	ldrh	r1, [r1, #4]
10062d80:	a807      	add	r0, sp, #28
10062d82:	1d80      	adds	r0, r0, #6
10062d84:	f7f0 fe13 	bl	100539ae <aci_gatt_clt_multi_notification_int_event_copy>
10062d88:	0728      	lsls	r0, r5, #28
10062d8a:	d502      	bpl.n	10062d92 <aci_gatt_clt_multi_notification_int_event_cb+0x22>
10062d8c:	68a0      	ldr	r0, [r4, #8]
10062d8e:	f7ef ff11 	bl	10052bb4 <ACL_pkt_release>
10062d92:	a807      	add	r0, sp, #28
10062d94:	8941      	ldrh	r1, [r0, #10]
10062d96:	9105      	str	r1, [sp, #20]
10062d98:	8901      	ldrh	r1, [r0, #8]
10062d9a:	9103      	str	r1, [sp, #12]
10062d9c:	88c1      	ldrh	r1, [r0, #6]
10062d9e:	9102      	str	r1, [sp, #8]
10062da0:	300c      	adds	r0, #12
10062da2:	9004      	str	r0, [sp, #16]
10062da4:	2500      	movs	r5, #0
10062da6:	9e04      	ldr	r6, [sp, #16]
10062da8:	b2a8      	uxth	r0, r5
10062daa:	9905      	ldr	r1, [sp, #20]
10062dac:	4288      	cmp	r0, r1
10062dae:	d21c      	bcs.n	10062dea <aci_gatt_clt_multi_notification_int_event_cb+0x7a>
10062db0:	1831      	adds	r1, r6, r0
10062db2:	a88a      	add	r0, sp, #552	@ 0x228
10062db4:	9006      	str	r0, [sp, #24]
10062db6:	2402      	movs	r4, #2
10062db8:	4622      	mov	r2, r4
10062dba:	f7e3 f94b 	bl	10046054 <BLEPLAT_MemCpy>
10062dbe:	1ca8      	adds	r0, r5, #2
10062dc0:	b280      	uxth	r0, r0
10062dc2:	1831      	adds	r1, r6, r0
10062dc4:	af89      	add	r7, sp, #548	@ 0x224
10062dc6:	4638      	mov	r0, r7
10062dc8:	4622      	mov	r2, r4
10062dca:	f7e3 f943 	bl	10046054 <BLEPLAT_MemCpy>
10062dce:	1d28      	adds	r0, r5, #4
10062dd0:	b284      	uxth	r4, r0
10062dd2:	1930      	adds	r0, r6, r4
10062dd4:	883b      	ldrh	r3, [r7, #0]
10062dd6:	9906      	ldr	r1, [sp, #24]
10062dd8:	880a      	ldrh	r2, [r1, #0]
10062dda:	9000      	str	r0, [sp, #0]
10062ddc:	9802      	ldr	r0, [sp, #8]
10062dde:	9903      	ldr	r1, [sp, #12]
10062de0:	f7ff ff24 	bl	10062c2c <aci_gatt_clt_notification_event_notify>
10062de4:	8838      	ldrh	r0, [r7, #0]
10062de6:	1825      	adds	r5, r4, r0
10062de8:	e7de      	b.n	10062da8 <aci_gatt_clt_multi_notification_int_event_cb+0x38>
10062dea:	b07f      	add	sp, #508	@ 0x1fc
10062dec:	b00c      	add	sp, #48	@ 0x30
10062dee:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062df0 <aci_att_clt_find_info_resp_event_cb>:
10062df0:	b5b0      	push	{r4, r5, r7, lr}
10062df2:	b0ff      	sub	sp, #508	@ 0x1fc
10062df4:	b083      	sub	sp, #12
10062df6:	460c      	mov	r4, r1
10062df8:	4605      	mov	r5, r0
10062dfa:	688b      	ldr	r3, [r1, #8]
10062dfc:	88ca      	ldrh	r2, [r1, #6]
10062dfe:	8889      	ldrh	r1, [r1, #4]
10062e00:	4668      	mov	r0, sp
10062e02:	1d80      	adds	r0, r0, #6
10062e04:	f7f0 fc4c 	bl	100536a0 <aci_att_clt_find_info_resp_event_copy>
10062e08:	0728      	lsls	r0, r5, #28
10062e0a:	d502      	bpl.n	10062e12 <aci_att_clt_find_info_resp_event_cb+0x22>
10062e0c:	68a0      	ldr	r0, [r4, #8]
10062e0e:	f7ef fed1 	bl	10052bb4 <ACL_pkt_release>
10062e12:	4668      	mov	r0, sp
10062e14:	7ac1      	ldrb	r1, [r0, #11]
10062e16:	9a03      	ldr	r2, [sp, #12]
10062e18:	0212      	lsls	r2, r2, #8
10062e1a:	1851      	adds	r1, r2, r1
10062e1c:	460a      	mov	r2, r1
10062e1e:	3209      	adds	r2, #9
10062e20:	7082      	strb	r2, [r0, #2]
10062e22:	0a12      	lsrs	r2, r2, #8
10062e24:	70c2      	strb	r2, [r0, #3]
10062e26:	2204      	movs	r2, #4
10062e28:	7102      	strb	r2, [r0, #4]
10062e2a:	4a05      	ldr	r2, [pc, #20]	@ (10062e40 <__arm_cp.5_0>)
10062e2c:	8002      	strh	r2, [r0, #0]
10062e2e:	220c      	movs	r2, #12
10062e30:	7142      	strb	r2, [r0, #5]
10062e32:	310d      	adds	r1, #13
10062e34:	b289      	uxth	r1, r1
10062e36:	f7ee fb29 	bl	1005148c <BLE_STACK_Event>
10062e3a:	b07f      	add	sp, #508	@ 0x1fc
10062e3c:	b003      	add	sp, #12
10062e3e:	bdb0      	pop	{r4, r5, r7, pc}

10062e40 <__arm_cp.5_0>:
10062e40:	0000ff82 	.word	0x0000ff82

10062e44 <aci_att_clt_find_by_type_value_resp_event_cb>:
10062e44:	b5b0      	push	{r4, r5, r7, lr}
10062e46:	b0ff      	sub	sp, #508	@ 0x1fc
10062e48:	b083      	sub	sp, #12
10062e4a:	460c      	mov	r4, r1
10062e4c:	4605      	mov	r5, r0
10062e4e:	688b      	ldr	r3, [r1, #8]
10062e50:	88ca      	ldrh	r2, [r1, #6]
10062e52:	8889      	ldrh	r1, [r1, #4]
10062e54:	4668      	mov	r0, sp
10062e56:	1d80      	adds	r0, r0, #6
10062e58:	f7f0 fc40 	bl	100536dc <aci_att_clt_find_by_type_value_resp_event_copy>
10062e5c:	0728      	lsls	r0, r5, #28
10062e5e:	d502      	bpl.n	10062e66 <aci_att_clt_find_by_type_value_resp_event_cb+0x22>
10062e60:	68a0      	ldr	r0, [r4, #8]
10062e62:	f7ef fea7 	bl	10052bb4 <ACL_pkt_release>
10062e66:	4668      	mov	r0, sp
10062e68:	7a81      	ldrb	r1, [r0, #10]
10062e6a:	0089      	lsls	r1, r1, #2
10062e6c:	1dca      	adds	r2, r1, #7
10062e6e:	7082      	strb	r2, [r0, #2]
10062e70:	0a12      	lsrs	r2, r2, #8
10062e72:	70c2      	strb	r2, [r0, #3]
10062e74:	2205      	movs	r2, #5
10062e76:	7102      	strb	r2, [r0, #4]
10062e78:	4a04      	ldr	r2, [pc, #16]	@ (10062e8c <__arm_cp.6_0>)
10062e7a:	8002      	strh	r2, [r0, #0]
10062e7c:	220c      	movs	r2, #12
10062e7e:	7142      	strb	r2, [r0, #5]
10062e80:	310b      	adds	r1, #11
10062e82:	f7ee fb03 	bl	1005148c <BLE_STACK_Event>
10062e86:	b07f      	add	sp, #508	@ 0x1fc
10062e88:	b003      	add	sp, #12
10062e8a:	bdb0      	pop	{r4, r5, r7, pc}

10062e8c <__arm_cp.6_0>:
10062e8c:	0000ff82 	.word	0x0000ff82

10062e90 <aci_att_clt_read_by_type_resp_event_cb>:
10062e90:	b5b0      	push	{r4, r5, r7, lr}
10062e92:	b0ff      	sub	sp, #508	@ 0x1fc
10062e94:	b083      	sub	sp, #12
10062e96:	460c      	mov	r4, r1
10062e98:	4605      	mov	r5, r0
10062e9a:	688b      	ldr	r3, [r1, #8]
10062e9c:	88ca      	ldrh	r2, [r1, #6]
10062e9e:	8889      	ldrh	r1, [r1, #4]
10062ea0:	4668      	mov	r0, sp
10062ea2:	1d80      	adds	r0, r0, #6
10062ea4:	f7f0 fc2f 	bl	10053706 <aci_att_clt_read_by_type_resp_event_copy>
10062ea8:	0728      	lsls	r0, r5, #28
10062eaa:	d502      	bpl.n	10062eb2 <aci_att_clt_read_by_type_resp_event_cb+0x22>
10062eac:	68a0      	ldr	r0, [r4, #8]
10062eae:	f7ef fe81 	bl	10052bb4 <ACL_pkt_release>
10062eb2:	4668      	mov	r0, sp
10062eb4:	7ac1      	ldrb	r1, [r0, #11]
10062eb6:	9a03      	ldr	r2, [sp, #12]
10062eb8:	0212      	lsls	r2, r2, #8
10062eba:	1851      	adds	r1, r2, r1
10062ebc:	460a      	mov	r2, r1
10062ebe:	3209      	adds	r2, #9
10062ec0:	7082      	strb	r2, [r0, #2]
10062ec2:	0a12      	lsrs	r2, r2, #8
10062ec4:	70c2      	strb	r2, [r0, #3]
10062ec6:	2206      	movs	r2, #6
10062ec8:	7102      	strb	r2, [r0, #4]
10062eca:	4a05      	ldr	r2, [pc, #20]	@ (10062ee0 <__arm_cp.7_0>)
10062ecc:	8002      	strh	r2, [r0, #0]
10062ece:	220c      	movs	r2, #12
10062ed0:	7142      	strb	r2, [r0, #5]
10062ed2:	310d      	adds	r1, #13
10062ed4:	b289      	uxth	r1, r1
10062ed6:	f7ee fad9 	bl	1005148c <BLE_STACK_Event>
10062eda:	b07f      	add	sp, #508	@ 0x1fc
10062edc:	b003      	add	sp, #12
10062ede:	bdb0      	pop	{r4, r5, r7, pc}

10062ee0 <__arm_cp.7_0>:
10062ee0:	0000ff82 	.word	0x0000ff82

10062ee4 <aci_att_clt_read_resp_event_cb>:
10062ee4:	b5b0      	push	{r4, r5, r7, lr}
10062ee6:	b0ff      	sub	sp, #508	@ 0x1fc
10062ee8:	b083      	sub	sp, #12
10062eea:	460c      	mov	r4, r1
10062eec:	4605      	mov	r5, r0
10062eee:	688b      	ldr	r3, [r1, #8]
10062ef0:	88ca      	ldrh	r2, [r1, #6]
10062ef2:	8889      	ldrh	r1, [r1, #4]
10062ef4:	4668      	mov	r0, sp
10062ef6:	1d80      	adds	r0, r0, #6
10062ef8:	f7f0 fc23 	bl	10053742 <aci_att_clt_read_resp_event_copy>
10062efc:	0728      	lsls	r0, r5, #28
10062efe:	d502      	bpl.n	10062f06 <aci_att_clt_read_resp_event_cb+0x22>
10062f00:	68a0      	ldr	r0, [r4, #8]
10062f02:	f7ef fe57 	bl	10052bb4 <ACL_pkt_release>
10062f06:	4668      	mov	r0, sp
10062f08:	8941      	ldrh	r1, [r0, #10]
10062f0a:	460a      	mov	r2, r1
10062f0c:	3208      	adds	r2, #8
10062f0e:	7082      	strb	r2, [r0, #2]
10062f10:	0a12      	lsrs	r2, r2, #8
10062f12:	70c2      	strb	r2, [r0, #3]
10062f14:	2207      	movs	r2, #7
10062f16:	7102      	strb	r2, [r0, #4]
10062f18:	4a05      	ldr	r2, [pc, #20]	@ (10062f30 <__arm_cp.8_0>)
10062f1a:	8002      	strh	r2, [r0, #0]
10062f1c:	220c      	movs	r2, #12
10062f1e:	7142      	strb	r2, [r0, #5]
10062f20:	310c      	adds	r1, #12
10062f22:	b289      	uxth	r1, r1
10062f24:	f7ee fab2 	bl	1005148c <BLE_STACK_Event>
10062f28:	b07f      	add	sp, #508	@ 0x1fc
10062f2a:	b003      	add	sp, #12
10062f2c:	bdb0      	pop	{r4, r5, r7, pc}
10062f2e:	46c0      	nop			@ (mov r8, r8)

10062f30 <__arm_cp.8_0>:
10062f30:	0000ff82 	.word	0x0000ff82

10062f34 <aci_att_clt_read_blob_resp_event_cb>:
10062f34:	b5b0      	push	{r4, r5, r7, lr}
10062f36:	b0ff      	sub	sp, #508	@ 0x1fc
10062f38:	b083      	sub	sp, #12
10062f3a:	460c      	mov	r4, r1
10062f3c:	4605      	mov	r5, r0
10062f3e:	688b      	ldr	r3, [r1, #8]
10062f40:	88ca      	ldrh	r2, [r1, #6]
10062f42:	8889      	ldrh	r1, [r1, #4]
10062f44:	4668      	mov	r0, sp
10062f46:	1d80      	adds	r0, r0, #6
10062f48:	f7f0 fc11 	bl	1005376e <aci_att_clt_read_blob_resp_event_copy>
10062f4c:	0728      	lsls	r0, r5, #28
10062f4e:	d502      	bpl.n	10062f56 <aci_att_clt_read_blob_resp_event_cb+0x22>
10062f50:	68a0      	ldr	r0, [r4, #8]
10062f52:	f7ef fe2f 	bl	10052bb4 <ACL_pkt_release>
10062f56:	4668      	mov	r0, sp
10062f58:	8941      	ldrh	r1, [r0, #10]
10062f5a:	460a      	mov	r2, r1
10062f5c:	3208      	adds	r2, #8
10062f5e:	7082      	strb	r2, [r0, #2]
10062f60:	0a12      	lsrs	r2, r2, #8
10062f62:	70c2      	strb	r2, [r0, #3]
10062f64:	2208      	movs	r2, #8
10062f66:	7102      	strb	r2, [r0, #4]
10062f68:	4a05      	ldr	r2, [pc, #20]	@ (10062f80 <__arm_cp.9_0>)
10062f6a:	8002      	strh	r2, [r0, #0]
10062f6c:	220c      	movs	r2, #12
10062f6e:	7142      	strb	r2, [r0, #5]
10062f70:	310c      	adds	r1, #12
10062f72:	b289      	uxth	r1, r1
10062f74:	f7ee fa8a 	bl	1005148c <BLE_STACK_Event>
10062f78:	b07f      	add	sp, #508	@ 0x1fc
10062f7a:	b003      	add	sp, #12
10062f7c:	bdb0      	pop	{r4, r5, r7, pc}
10062f7e:	46c0      	nop			@ (mov r8, r8)

10062f80 <__arm_cp.9_0>:
10062f80:	0000ff82 	.word	0x0000ff82

10062f84 <aci_att_clt_read_multiple_resp_event_cb>:
10062f84:	b5b0      	push	{r4, r5, r7, lr}
10062f86:	b0ff      	sub	sp, #508	@ 0x1fc
10062f88:	b083      	sub	sp, #12
10062f8a:	460c      	mov	r4, r1
10062f8c:	4605      	mov	r5, r0
10062f8e:	688b      	ldr	r3, [r1, #8]
10062f90:	88ca      	ldrh	r2, [r1, #6]
10062f92:	8889      	ldrh	r1, [r1, #4]
10062f94:	4668      	mov	r0, sp
10062f96:	1d80      	adds	r0, r0, #6
10062f98:	f7f0 fbff 	bl	1005379a <aci_att_clt_read_multiple_resp_event_copy>
10062f9c:	0728      	lsls	r0, r5, #28
10062f9e:	d502      	bpl.n	10062fa6 <aci_att_clt_read_multiple_resp_event_cb+0x22>
10062fa0:	68a0      	ldr	r0, [r4, #8]
10062fa2:	f7ef fe07 	bl	10052bb4 <ACL_pkt_release>
10062fa6:	4668      	mov	r0, sp
10062fa8:	8941      	ldrh	r1, [r0, #10]
10062faa:	460a      	mov	r2, r1
10062fac:	3208      	adds	r2, #8
10062fae:	7082      	strb	r2, [r0, #2]
10062fb0:	0a12      	lsrs	r2, r2, #8
10062fb2:	70c2      	strb	r2, [r0, #3]
10062fb4:	2209      	movs	r2, #9
10062fb6:	7102      	strb	r2, [r0, #4]
10062fb8:	4a05      	ldr	r2, [pc, #20]	@ (10062fd0 <__arm_cp.10_0>)
10062fba:	8002      	strh	r2, [r0, #0]
10062fbc:	220c      	movs	r2, #12
10062fbe:	7142      	strb	r2, [r0, #5]
10062fc0:	310c      	adds	r1, #12
10062fc2:	b289      	uxth	r1, r1
10062fc4:	f7ee fa62 	bl	1005148c <BLE_STACK_Event>
10062fc8:	b07f      	add	sp, #508	@ 0x1fc
10062fca:	b003      	add	sp, #12
10062fcc:	bdb0      	pop	{r4, r5, r7, pc}
10062fce:	46c0      	nop			@ (mov r8, r8)

10062fd0 <__arm_cp.10_0>:
10062fd0:	0000ff82 	.word	0x0000ff82

10062fd4 <aci_att_clt_read_by_group_type_resp_event_cb>:
10062fd4:	b5b0      	push	{r4, r5, r7, lr}
10062fd6:	b0ff      	sub	sp, #508	@ 0x1fc
10062fd8:	b083      	sub	sp, #12
10062fda:	460c      	mov	r4, r1
10062fdc:	4605      	mov	r5, r0
10062fde:	688b      	ldr	r3, [r1, #8]
10062fe0:	88ca      	ldrh	r2, [r1, #6]
10062fe2:	8889      	ldrh	r1, [r1, #4]
10062fe4:	4668      	mov	r0, sp
10062fe6:	1d80      	adds	r0, r0, #6
10062fe8:	f7f0 fbed 	bl	100537c6 <aci_att_clt_read_by_group_type_resp_event_copy>
10062fec:	0728      	lsls	r0, r5, #28
10062fee:	d502      	bpl.n	10062ff6 <aci_att_clt_read_by_group_type_resp_event_cb+0x22>
10062ff0:	68a0      	ldr	r0, [r4, #8]
10062ff2:	f7ef fddf 	bl	10052bb4 <ACL_pkt_release>
10062ff6:	4668      	mov	r0, sp
10062ff8:	7ac1      	ldrb	r1, [r0, #11]
10062ffa:	9a03      	ldr	r2, [sp, #12]
10062ffc:	0212      	lsls	r2, r2, #8
10062ffe:	1851      	adds	r1, r2, r1
10063000:	460a      	mov	r2, r1
10063002:	3209      	adds	r2, #9
10063004:	7082      	strb	r2, [r0, #2]
10063006:	0a12      	lsrs	r2, r2, #8
10063008:	70c2      	strb	r2, [r0, #3]
1006300a:	220a      	movs	r2, #10
1006300c:	7102      	strb	r2, [r0, #4]
1006300e:	4a05      	ldr	r2, [pc, #20]	@ (10063024 <__arm_cp.11_0>)
10063010:	8002      	strh	r2, [r0, #0]
10063012:	220c      	movs	r2, #12
10063014:	7142      	strb	r2, [r0, #5]
10063016:	310d      	adds	r1, #13
10063018:	b289      	uxth	r1, r1
1006301a:	f7ee fa37 	bl	1005148c <BLE_STACK_Event>
1006301e:	b07f      	add	sp, #508	@ 0x1fc
10063020:	b003      	add	sp, #12
10063022:	bdb0      	pop	{r4, r5, r7, pc}

10063024 <__arm_cp.11_0>:
10063024:	0000ff82 	.word	0x0000ff82

10063028 <aci_att_clt_prepare_write_resp_event_cb>:
10063028:	b5b0      	push	{r4, r5, r7, lr}
1006302a:	b0ff      	sub	sp, #508	@ 0x1fc
1006302c:	b083      	sub	sp, #12
1006302e:	460c      	mov	r4, r1
10063030:	4605      	mov	r5, r0
10063032:	688b      	ldr	r3, [r1, #8]
10063034:	88ca      	ldrh	r2, [r1, #6]
10063036:	8889      	ldrh	r1, [r1, #4]
10063038:	4668      	mov	r0, sp
1006303a:	1d80      	adds	r0, r0, #6
1006303c:	f7f0 fbe1 	bl	10053802 <aci_att_clt_prepare_write_resp_event_copy>
10063040:	0728      	lsls	r0, r5, #28
10063042:	d502      	bpl.n	1006304a <aci_att_clt_prepare_write_resp_event_cb+0x22>
10063044:	68a0      	ldr	r0, [r4, #8]
10063046:	f7ef fdb5 	bl	10052bb4 <ACL_pkt_release>
1006304a:	4668      	mov	r0, sp
1006304c:	89c1      	ldrh	r1, [r0, #14]
1006304e:	460a      	mov	r2, r1
10063050:	320c      	adds	r2, #12
10063052:	7082      	strb	r2, [r0, #2]
10063054:	0a12      	lsrs	r2, r2, #8
10063056:	70c2      	strb	r2, [r0, #3]
10063058:	220c      	movs	r2, #12
1006305a:	7102      	strb	r2, [r0, #4]
1006305c:	4b04      	ldr	r3, [pc, #16]	@ (10063070 <__arm_cp.12_0>)
1006305e:	8003      	strh	r3, [r0, #0]
10063060:	7142      	strb	r2, [r0, #5]
10063062:	3110      	adds	r1, #16
10063064:	b289      	uxth	r1, r1
10063066:	f7ee fa11 	bl	1005148c <BLE_STACK_Event>
1006306a:	b07f      	add	sp, #508	@ 0x1fc
1006306c:	b003      	add	sp, #12
1006306e:	bdb0      	pop	{r4, r5, r7, pc}

10063070 <__arm_cp.12_0>:
10063070:	0000ff82 	.word	0x0000ff82

10063074 <aci_att_srv_prepare_write_req_event_cb>:
10063074:	b5f0      	push	{r4, r5, r6, r7, lr}
10063076:	b0ff      	sub	sp, #508	@ 0x1fc
10063078:	b086      	sub	sp, #24
1006307a:	460c      	mov	r4, r1
1006307c:	4605      	mov	r5, r0
1006307e:	890b      	ldrh	r3, [r1, #8]
10063080:	88ca      	ldrh	r2, [r1, #6]
10063082:	8889      	ldrh	r1, [r1, #4]
10063084:	8960      	ldrh	r0, [r4, #10]
10063086:	89a6      	ldrh	r6, [r4, #12]
10063088:	6927      	ldr	r7, [r4, #16]
1006308a:	9000      	str	r0, [sp, #0]
1006308c:	9601      	str	r6, [sp, #4]
1006308e:	9702      	str	r7, [sp, #8]
10063090:	a803      	add	r0, sp, #12
10063092:	1d80      	adds	r0, r0, #6
10063094:	f7f0 fc6e 	bl	10053974 <aci_att_srv_prepare_write_req_event_copy>
10063098:	0728      	lsls	r0, r5, #28
1006309a:	d502      	bpl.n	100630a2 <aci_att_srv_prepare_write_req_event_cb+0x2e>
1006309c:	6920      	ldr	r0, [r4, #16]
1006309e:	f7ef fd89 	bl	10052bb4 <ACL_pkt_release>
100630a2:	a803      	add	r0, sp, #12
100630a4:	89c1      	ldrh	r1, [r0, #14]
100630a6:	460a      	mov	r2, r1
100630a8:	320c      	adds	r2, #12
100630aa:	7082      	strb	r2, [r0, #2]
100630ac:	0a12      	lsrs	r2, r2, #8
100630ae:	70c2      	strb	r2, [r0, #3]
100630b0:	221b      	movs	r2, #27
100630b2:	7102      	strb	r2, [r0, #4]
100630b4:	4a05      	ldr	r2, [pc, #20]	@ (100630cc <__arm_cp.13_0>)
100630b6:	8002      	strh	r2, [r0, #0]
100630b8:	220c      	movs	r2, #12
100630ba:	7142      	strb	r2, [r0, #5]
100630bc:	3110      	adds	r1, #16
100630be:	b289      	uxth	r1, r1
100630c0:	f7ee f9e4 	bl	1005148c <BLE_STACK_Event>
100630c4:	b07f      	add	sp, #508	@ 0x1fc
100630c6:	b006      	add	sp, #24
100630c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100630ca:	46c0      	nop			@ (mov r8, r8)

100630cc <__arm_cp.13_0>:
100630cc:	0000ff82 	.word	0x0000ff82

100630d0 <aci_att_clt_read_multiple_var_len_resp_event_cb>:
100630d0:	b5b0      	push	{r4, r5, r7, lr}
100630d2:	b0ff      	sub	sp, #508	@ 0x1fc
100630d4:	b083      	sub	sp, #12
100630d6:	460c      	mov	r4, r1
100630d8:	4605      	mov	r5, r0
100630da:	688b      	ldr	r3, [r1, #8]
100630dc:	88ca      	ldrh	r2, [r1, #6]
100630de:	8889      	ldrh	r1, [r1, #4]
100630e0:	4668      	mov	r0, sp
100630e2:	1d80      	adds	r0, r0, #6
100630e4:	f7f0 fc79 	bl	100539da <aci_att_clt_read_multiple_var_len_resp_event_copy>
100630e8:	0728      	lsls	r0, r5, #28
100630ea:	d502      	bpl.n	100630f2 <aci_att_clt_read_multiple_var_len_resp_event_cb+0x22>
100630ec:	68a0      	ldr	r0, [r4, #8]
100630ee:	f7ef fd61 	bl	10052bb4 <ACL_pkt_release>
100630f2:	4668      	mov	r0, sp
100630f4:	8941      	ldrh	r1, [r0, #10]
100630f6:	460a      	mov	r2, r1
100630f8:	3208      	adds	r2, #8
100630fa:	7082      	strb	r2, [r0, #2]
100630fc:	0a12      	lsrs	r2, r2, #8
100630fe:	70c2      	strb	r2, [r0, #3]
10063100:	221e      	movs	r2, #30
10063102:	7102      	strb	r2, [r0, #4]
10063104:	4a05      	ldr	r2, [pc, #20]	@ (1006311c <__arm_cp.14_0>)
10063106:	8002      	strh	r2, [r0, #0]
10063108:	220c      	movs	r2, #12
1006310a:	7142      	strb	r2, [r0, #5]
1006310c:	310c      	adds	r1, #12
1006310e:	b289      	uxth	r1, r1
10063110:	f7ee f9bc 	bl	1005148c <BLE_STACK_Event>
10063114:	b07f      	add	sp, #508	@ 0x1fc
10063116:	b003      	add	sp, #12
10063118:	bdb0      	pop	{r4, r5, r7, pc}
1006311a:	46c0      	nop			@ (mov r8, r8)

1006311c <__arm_cp.14_0>:
1006311c:	0000ff82 	.word	0x0000ff82

10063120 <aci_gatt_srv_attribute_modified_event_push_noinline>:
10063120:	b5f0      	push	{r4, r5, r6, r7, lr}
10063122:	b085      	sub	sp, #20
10063124:	4605      	mov	r5, r0
10063126:	06c0      	lsls	r0, r0, #27
10063128:	d445      	bmi.n	100631b6 <aci_gatt_srv_attribute_modified_event_push_noinline+0x96>
1006312a:	4826      	ldr	r0, [pc, #152]	@ (100631c4 <__arm_cp.15_0>)
1006312c:	6800      	ldr	r0, [r0, #0]
1006312e:	2450      	movs	r4, #80	@ 0x50
10063130:	5d00      	ldrb	r0, [r0, r4]
10063132:	2400      	movs	r4, #0
10063134:	07c0      	lsls	r0, r0, #31
10063136:	d03f      	beq.n	100631b8 <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
10063138:	9302      	str	r3, [sp, #8]
1006313a:	9203      	str	r2, [sp, #12]
1006313c:	9104      	str	r1, [sp, #16]
1006313e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10063140:	4821      	ldr	r0, [pc, #132]	@ (100631c8 <__arm_cp.15_1>)
10063142:	6800      	ldr	r0, [r0, #0]
10063144:	0769      	lsls	r1, r5, #29
10063146:	0ec9      	lsrs	r1, r1, #27
10063148:	1840      	adds	r0, r0, r1
1006314a:	6900      	ldr	r0, [r0, #16]
1006314c:	1e71      	subs	r1, r6, #1
1006314e:	2203      	movs	r2, #3
10063150:	430a      	orrs	r2, r1
10063152:	3211      	adds	r2, #17
10063154:	0891      	lsrs	r1, r2, #2
10063156:	b28b      	uxth	r3, r1
10063158:	2256      	movs	r2, #86	@ 0x56
1006315a:	4629      	mov	r1, r5
1006315c:	f7ef feec 	bl	10052f38 <aci_event_fifo_push_header>
10063160:	2800      	cmp	r0, #0
10063162:	d02c      	beq.n	100631be <aci_gatt_srv_attribute_modified_event_push_noinline+0x9e>
10063164:	4607      	mov	r7, r0
10063166:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10063168:	9001      	str	r0, [sp, #4]
1006316a:	743e      	strb	r6, [r7, #16]
1006316c:	9902      	ldr	r1, [sp, #8]
1006316e:	73b9      	strb	r1, [r7, #14]
10063170:	9b03      	ldr	r3, [sp, #12]
10063172:	733b      	strb	r3, [r7, #12]
10063174:	9a04      	ldr	r2, [sp, #16]
10063176:	72ba      	strb	r2, [r7, #10]
10063178:	0a30      	lsrs	r0, r6, #8
1006317a:	7478      	strb	r0, [r7, #17]
1006317c:	0a08      	lsrs	r0, r1, #8
1006317e:	73f8      	strb	r0, [r7, #15]
10063180:	0a18      	lsrs	r0, r3, #8
10063182:	7378      	strb	r0, [r7, #13]
10063184:	0a10      	lsrs	r0, r2, #8
10063186:	72f8      	strb	r0, [r7, #11]
10063188:	4638      	mov	r0, r7
1006318a:	3012      	adds	r0, #18
1006318c:	9901      	ldr	r1, [sp, #4]
1006318e:	4632      	mov	r2, r6
10063190:	f7e2 ff60 	bl	10046054 <BLEPLAT_MemCpy>
10063194:	200c      	movs	r0, #12
10063196:	7278      	strb	r0, [r7, #9]
10063198:	2001      	movs	r0, #1
1006319a:	7238      	strb	r0, [r7, #8]
1006319c:	360a      	adds	r6, #10
1006319e:	0a30      	lsrs	r0, r6, #8
100631a0:	71f8      	strb	r0, [r7, #7]
100631a2:	71be      	strb	r6, [r7, #6]
100631a4:	20ff      	movs	r0, #255	@ 0xff
100631a6:	7178      	strb	r0, [r7, #5]
100631a8:	2082      	movs	r0, #130	@ 0x82
100631aa:	7138      	strb	r0, [r7, #4]
100631ac:	4628      	mov	r0, r5
100631ae:	4639      	mov	r1, r7
100631b0:	f7ef ff5f 	bl	10053072 <aci_event_fifo_push>
100631b4:	e000      	b.n	100631b8 <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
100631b6:	2486      	movs	r4, #134	@ 0x86
100631b8:	4620      	mov	r0, r4
100631ba:	b005      	add	sp, #20
100631bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100631be:	2407      	movs	r4, #7
100631c0:	e7fa      	b.n	100631b8 <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
100631c2:	46c0      	nop			@ (mov r8, r8)

100631c4 <__arm_cp.15_0>:
100631c4:	200010f4 	.word	0x200010f4

100631c8 <__arm_cp.15_1>:
100631c8:	200010a4 	.word	0x200010a4

100631cc <aci_gatt_proc_timeout_event_push_noinline>:
100631cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100631ce:	4604      	mov	r4, r0
100631d0:	06c0      	lsls	r0, r0, #27
100631d2:	d408      	bmi.n	100631e6 <aci_gatt_proc_timeout_event_push_noinline+0x1a>
100631d4:	460d      	mov	r5, r1
100631d6:	4819      	ldr	r0, [pc, #100]	@ (1006323c <__arm_cp.16_0>)
100631d8:	6800      	ldr	r0, [r0, #0]
100631da:	2150      	movs	r1, #80	@ 0x50
100631dc:	5c40      	ldrb	r0, [r0, r1]
100631de:	0780      	lsls	r0, r0, #30
100631e0:	d403      	bmi.n	100631ea <aci_gatt_proc_timeout_event_push_noinline+0x1e>
100631e2:	2700      	movs	r7, #0
100631e4:	e027      	b.n	10063236 <aci_gatt_proc_timeout_event_push_noinline+0x6a>
100631e6:	2786      	movs	r7, #134	@ 0x86
100631e8:	e025      	b.n	10063236 <aci_gatt_proc_timeout_event_push_noinline+0x6a>
100631ea:	4616      	mov	r6, r2
100631ec:	4814      	ldr	r0, [pc, #80]	@ (10063240 <__arm_cp.16_1>)
100631ee:	6800      	ldr	r0, [r0, #0]
100631f0:	0761      	lsls	r1, r4, #29
100631f2:	0ec9      	lsrs	r1, r1, #27
100631f4:	1840      	adds	r0, r0, r1
100631f6:	6900      	ldr	r0, [r0, #16]
100631f8:	2257      	movs	r2, #87	@ 0x57
100631fa:	2303      	movs	r3, #3
100631fc:	4621      	mov	r1, r4
100631fe:	f7ef fe9b 	bl	10052f38 <aci_event_fifo_push_header>
10063202:	2800      	cmp	r0, #0
10063204:	d016      	beq.n	10063234 <aci_gatt_proc_timeout_event_push_noinline+0x68>
10063206:	4601      	mov	r1, r0
10063208:	7306      	strb	r6, [r0, #12]
1006320a:	7285      	strb	r5, [r0, #10]
1006320c:	200c      	movs	r0, #12
1006320e:	7248      	strb	r0, [r1, #9]
10063210:	2002      	movs	r0, #2
10063212:	7208      	strb	r0, [r1, #8]
10063214:	2700      	movs	r7, #0
10063216:	71cf      	strb	r7, [r1, #7]
10063218:	2006      	movs	r0, #6
1006321a:	7188      	strb	r0, [r1, #6]
1006321c:	20ff      	movs	r0, #255	@ 0xff
1006321e:	7148      	strb	r0, [r1, #5]
10063220:	2082      	movs	r0, #130	@ 0x82
10063222:	7108      	strb	r0, [r1, #4]
10063224:	0a30      	lsrs	r0, r6, #8
10063226:	7348      	strb	r0, [r1, #13]
10063228:	0a28      	lsrs	r0, r5, #8
1006322a:	72c8      	strb	r0, [r1, #11]
1006322c:	4620      	mov	r0, r4
1006322e:	f7ef ff20 	bl	10053072 <aci_event_fifo_push>
10063232:	e000      	b.n	10063236 <aci_gatt_proc_timeout_event_push_noinline+0x6a>
10063234:	2707      	movs	r7, #7
10063236:	4638      	mov	r0, r7
10063238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006323a:	46c0      	nop			@ (mov r8, r8)

1006323c <__arm_cp.16_0>:
1006323c:	200010f4 	.word	0x200010f4

10063240 <__arm_cp.16_1>:
10063240:	200010a4 	.word	0x200010a4

10063244 <aci_gatt_clt_indication_event_push_noinline>:
10063244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063246:	4605      	mov	r5, r0
10063248:	06c0      	lsls	r0, r0, #27
1006324a:	d421      	bmi.n	10063290 <aci_gatt_clt_indication_event_push_noinline+0x4c>
1006324c:	460e      	mov	r6, r1
1006324e:	4813      	ldr	r0, [pc, #76]	@ (1006329c <__arm_cp.17_0>)
10063250:	6800      	ldr	r0, [r0, #0]
10063252:	2151      	movs	r1, #81	@ 0x51
10063254:	5c40      	ldrb	r0, [r0, r1]
10063256:	2400      	movs	r4, #0
10063258:	0680      	lsls	r0, r0, #26
1006325a:	d51a      	bpl.n	10063292 <aci_gatt_clt_indication_event_push_noinline+0x4e>
1006325c:	4617      	mov	r7, r2
1006325e:	9300      	str	r3, [sp, #0]
10063260:	480f      	ldr	r0, [pc, #60]	@ (100632a0 <__arm_cp.17_1>)
10063262:	6800      	ldr	r0, [r0, #0]
10063264:	0769      	lsls	r1, r5, #29
10063266:	0ec9      	lsrs	r1, r1, #27
10063268:	1840      	adds	r0, r0, r1
1006326a:	6900      	ldr	r0, [r0, #16]
1006326c:	220f      	movs	r2, #15
1006326e:	2303      	movs	r3, #3
10063270:	4629      	mov	r1, r5
10063272:	f7ef fe61 	bl	10052f38 <aci_event_fifo_push_header>
10063276:	2800      	cmp	r0, #0
10063278:	d00d      	beq.n	10063296 <aci_gatt_clt_indication_event_push_noinline+0x52>
1006327a:	4601      	mov	r1, r0
1006327c:	9800      	ldr	r0, [sp, #0]
1006327e:	60c8      	str	r0, [r1, #12]
10063280:	814f      	strh	r7, [r1, #10]
10063282:	810e      	strh	r6, [r1, #8]
10063284:	4807      	ldr	r0, [pc, #28]	@ (100632a4 <__arm_cp.17_2>)
10063286:	6048      	str	r0, [r1, #4]
10063288:	4628      	mov	r0, r5
1006328a:	f7ef fef2 	bl	10053072 <aci_event_fifo_push>
1006328e:	e000      	b.n	10063292 <aci_gatt_clt_indication_event_push_noinline+0x4e>
10063290:	2486      	movs	r4, #134	@ 0x86
10063292:	4620      	mov	r0, r4
10063294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063296:	2407      	movs	r4, #7
10063298:	e7fb      	b.n	10063292 <aci_gatt_clt_indication_event_push_noinline+0x4e>
1006329a:	46c0      	nop			@ (mov r8, r8)

1006329c <__arm_cp.17_0>:
1006329c:	200010f4 	.word	0x200010f4

100632a0 <__arm_cp.17_1>:
100632a0:	200010a4 	.word	0x200010a4

100632a4 <__arm_cp.17_2>:
100632a4:	10062c85 	.word	0x10062c85

100632a8 <aci_gatt_clt_notification_event_push_noinline>:
100632a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100632aa:	4605      	mov	r5, r0
100632ac:	06c0      	lsls	r0, r0, #27
100632ae:	d421      	bmi.n	100632f4 <aci_gatt_clt_notification_event_push_noinline+0x4c>
100632b0:	460e      	mov	r6, r1
100632b2:	4813      	ldr	r0, [pc, #76]	@ (10063300 <__arm_cp.18_0>)
100632b4:	6800      	ldr	r0, [r0, #0]
100632b6:	2151      	movs	r1, #81	@ 0x51
100632b8:	5c40      	ldrb	r0, [r0, r1]
100632ba:	2400      	movs	r4, #0
100632bc:	0640      	lsls	r0, r0, #25
100632be:	d51a      	bpl.n	100632f6 <aci_gatt_clt_notification_event_push_noinline+0x4e>
100632c0:	4617      	mov	r7, r2
100632c2:	9300      	str	r3, [sp, #0]
100632c4:	480f      	ldr	r0, [pc, #60]	@ (10063304 <__arm_cp.18_1>)
100632c6:	6800      	ldr	r0, [r0, #0]
100632c8:	0769      	lsls	r1, r5, #29
100632ca:	0ec9      	lsrs	r1, r1, #27
100632cc:	1840      	adds	r0, r0, r1
100632ce:	6900      	ldr	r0, [r0, #16]
100632d0:	2210      	movs	r2, #16
100632d2:	2303      	movs	r3, #3
100632d4:	4629      	mov	r1, r5
100632d6:	f7ef fe2f 	bl	10052f38 <aci_event_fifo_push_header>
100632da:	2800      	cmp	r0, #0
100632dc:	d00d      	beq.n	100632fa <aci_gatt_clt_notification_event_push_noinline+0x52>
100632de:	4601      	mov	r1, r0
100632e0:	9800      	ldr	r0, [sp, #0]
100632e2:	60c8      	str	r0, [r1, #12]
100632e4:	814f      	strh	r7, [r1, #10]
100632e6:	810e      	strh	r6, [r1, #8]
100632e8:	4807      	ldr	r0, [pc, #28]	@ (10063308 <__arm_cp.18_2>)
100632ea:	6048      	str	r0, [r1, #4]
100632ec:	4628      	mov	r0, r5
100632ee:	f7ef fec0 	bl	10053072 <aci_event_fifo_push>
100632f2:	e000      	b.n	100632f6 <aci_gatt_clt_notification_event_push_noinline+0x4e>
100632f4:	2486      	movs	r4, #134	@ 0x86
100632f6:	4620      	mov	r0, r4
100632f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100632fa:	2407      	movs	r4, #7
100632fc:	e7fb      	b.n	100632f6 <aci_gatt_clt_notification_event_push_noinline+0x4e>
100632fe:	46c0      	nop			@ (mov r8, r8)

10063300 <__arm_cp.18_0>:
10063300:	200010f4 	.word	0x200010f4

10063304 <__arm_cp.18_1>:
10063304:	200010a4 	.word	0x200010a4

10063308 <__arm_cp.18_2>:
10063308:	10062cd5 	.word	0x10062cd5

1006330c <aci_gatt_clt_proc_complete_event_push_noinline>:
1006330c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006330e:	4604      	mov	r4, r0
10063310:	06c0      	lsls	r0, r0, #27
10063312:	d428      	bmi.n	10063366 <aci_gatt_clt_proc_complete_event_push_noinline+0x5a>
10063314:	461f      	mov	r7, r3
10063316:	4616      	mov	r6, r2
10063318:	460d      	mov	r5, r1
1006331a:	4815      	ldr	r0, [pc, #84]	@ (10063370 <__arm_cp.19_0>)
1006331c:	6800      	ldr	r0, [r0, #0]
1006331e:	0761      	lsls	r1, r4, #29
10063320:	0ec9      	lsrs	r1, r1, #27
10063322:	1840      	adds	r0, r0, r1
10063324:	6900      	ldr	r0, [r0, #16]
10063326:	225a      	movs	r2, #90	@ 0x5a
10063328:	2303      	movs	r3, #3
1006332a:	4621      	mov	r1, r4
1006332c:	f7ef fe04 	bl	10052f38 <aci_event_fifo_push_header>
10063330:	2800      	cmp	r0, #0
10063332:	d01a      	beq.n	1006336a <aci_gatt_clt_proc_complete_event_push_noinline+0x5e>
10063334:	4601      	mov	r1, r0
10063336:	7306      	strb	r6, [r0, #12]
10063338:	7285      	strb	r5, [r0, #10]
1006333a:	200c      	movs	r0, #12
1006333c:	7248      	strb	r0, [r1, #9]
1006333e:	2010      	movs	r0, #16
10063340:	7208      	strb	r0, [r1, #8]
10063342:	463a      	mov	r2, r7
10063344:	2700      	movs	r7, #0
10063346:	71cf      	strb	r7, [r1, #7]
10063348:	2007      	movs	r0, #7
1006334a:	7188      	strb	r0, [r1, #6]
1006334c:	738a      	strb	r2, [r1, #14]
1006334e:	20ff      	movs	r0, #255	@ 0xff
10063350:	7148      	strb	r0, [r1, #5]
10063352:	2082      	movs	r0, #130	@ 0x82
10063354:	7108      	strb	r0, [r1, #4]
10063356:	0a30      	lsrs	r0, r6, #8
10063358:	7348      	strb	r0, [r1, #13]
1006335a:	0a28      	lsrs	r0, r5, #8
1006335c:	72c8      	strb	r0, [r1, #11]
1006335e:	4620      	mov	r0, r4
10063360:	f7ef fe87 	bl	10053072 <aci_event_fifo_push>
10063364:	e002      	b.n	1006336c <aci_gatt_clt_proc_complete_event_push_noinline+0x60>
10063366:	2786      	movs	r7, #134	@ 0x86
10063368:	e000      	b.n	1006336c <aci_gatt_clt_proc_complete_event_push_noinline+0x60>
1006336a:	2707      	movs	r7, #7
1006336c:	4638      	mov	r0, r7
1006336e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10063370 <__arm_cp.19_0>:
10063370:	200010a4 	.word	0x200010a4

10063374 <aci_gatt_clt_error_resp_event_push_noinline>:
10063374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063376:	4604      	mov	r4, r0
10063378:	06c0      	lsls	r0, r0, #27
1006337a:	d408      	bmi.n	1006338e <aci_gatt_clt_error_resp_event_push_noinline+0x1a>
1006337c:	460d      	mov	r5, r1
1006337e:	481e      	ldr	r0, [pc, #120]	@ (100633f8 <__arm_cp.20_0>)
10063380:	6800      	ldr	r0, [r0, #0]
10063382:	2151      	movs	r1, #81	@ 0x51
10063384:	5640      	ldrsb	r0, [r0, r1]
10063386:	2800      	cmp	r0, #0
10063388:	d404      	bmi.n	10063394 <aci_gatt_clt_error_resp_event_push_noinline+0x20>
1006338a:	2700      	movs	r7, #0
1006338c:	e000      	b.n	10063390 <aci_gatt_clt_error_resp_event_push_noinline+0x1c>
1006338e:	2786      	movs	r7, #134	@ 0x86
10063390:	4638      	mov	r0, r7
10063392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063394:	461f      	mov	r7, r3
10063396:	4616      	mov	r6, r2
10063398:	4818      	ldr	r0, [pc, #96]	@ (100633fc <__arm_cp.20_1>)
1006339a:	6800      	ldr	r0, [r0, #0]
1006339c:	0761      	lsls	r1, r4, #29
1006339e:	0ec9      	lsrs	r1, r1, #27
100633a0:	1840      	adds	r0, r0, r1
100633a2:	6900      	ldr	r0, [r0, #16]
100633a4:	225b      	movs	r2, #91	@ 0x5b
100633a6:	2304      	movs	r3, #4
100633a8:	4621      	mov	r1, r4
100633aa:	f7ef fdc5 	bl	10052f38 <aci_event_fifo_push_header>
100633ae:	2800      	cmp	r0, #0
100633b0:	d020      	beq.n	100633f4 <aci_gatt_clt_error_resp_event_push_noinline+0x80>
100633b2:	4601      	mov	r1, r0
100633b4:	9a07      	ldr	r2, [sp, #28]
100633b6:	9806      	ldr	r0, [sp, #24]
100633b8:	9000      	str	r0, [sp, #0]
100633ba:	73c8      	strb	r0, [r1, #15]
100633bc:	730e      	strb	r6, [r1, #12]
100633be:	728d      	strb	r5, [r1, #10]
100633c0:	230c      	movs	r3, #12
100633c2:	724b      	strb	r3, [r1, #9]
100633c4:	2311      	movs	r3, #17
100633c6:	720b      	strb	r3, [r1, #8]
100633c8:	4638      	mov	r0, r7
100633ca:	2700      	movs	r7, #0
100633cc:	71cf      	strb	r7, [r1, #7]
100633ce:	230a      	movs	r3, #10
100633d0:	718b      	strb	r3, [r1, #6]
100633d2:	744a      	strb	r2, [r1, #17]
100633d4:	7388      	strb	r0, [r1, #14]
100633d6:	22ff      	movs	r2, #255	@ 0xff
100633d8:	714a      	strb	r2, [r1, #5]
100633da:	2282      	movs	r2, #130	@ 0x82
100633dc:	710a      	strb	r2, [r1, #4]
100633de:	9800      	ldr	r0, [sp, #0]
100633e0:	0a00      	lsrs	r0, r0, #8
100633e2:	7408      	strb	r0, [r1, #16]
100633e4:	0a30      	lsrs	r0, r6, #8
100633e6:	7348      	strb	r0, [r1, #13]
100633e8:	0a28      	lsrs	r0, r5, #8
100633ea:	72c8      	strb	r0, [r1, #11]
100633ec:	4620      	mov	r0, r4
100633ee:	f7ef fe40 	bl	10053072 <aci_event_fifo_push>
100633f2:	e7cd      	b.n	10063390 <aci_gatt_clt_error_resp_event_push_noinline+0x1c>
100633f4:	2707      	movs	r7, #7
100633f6:	e7cb      	b.n	10063390 <aci_gatt_clt_error_resp_event_push_noinline+0x1c>

100633f8 <__arm_cp.20_0>:
100633f8:	200010f4 	.word	0x200010f4

100633fc <__arm_cp.20_1>:
100633fc:	200010a4 	.word	0x200010a4

10063400 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>:
10063400:	b5f0      	push	{r4, r5, r6, r7, lr}
10063402:	b087      	sub	sp, #28
10063404:	4605      	mov	r5, r0
10063406:	06c0      	lsls	r0, r0, #27
10063408:	d443      	bmi.n	10063492 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x92>
1006340a:	460e      	mov	r6, r1
1006340c:	4824      	ldr	r0, [pc, #144]	@ (100634a0 <__arm_cp.21_0>)
1006340e:	6800      	ldr	r0, [r0, #0]
10063410:	2152      	movs	r1, #82	@ 0x52
10063412:	5c40      	ldrb	r0, [r0, r1]
10063414:	2400      	movs	r4, #0
10063416:	0780      	lsls	r0, r0, #30
10063418:	d53c      	bpl.n	10063494 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
1006341a:	9204      	str	r2, [sp, #16]
1006341c:	9305      	str	r3, [sp, #20]
1006341e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10063420:	4820      	ldr	r0, [pc, #128]	@ (100634a4 <__arm_cp.21_1>)
10063422:	6800      	ldr	r0, [r0, #0]
10063424:	0769      	lsls	r1, r5, #29
10063426:	0ec9      	lsrs	r1, r1, #27
10063428:	1840      	adds	r0, r0, r1
1006342a:	6900      	ldr	r0, [r0, #16]
1006342c:	491e      	ldr	r1, [pc, #120]	@ (100634a8 <__arm_cp.21_2>)
1006342e:	9206      	str	r2, [sp, #24]
10063430:	1851      	adds	r1, r2, r1
10063432:	2203      	movs	r2, #3
10063434:	430a      	orrs	r2, r1
10063436:	3211      	adds	r2, #17
10063438:	0891      	lsrs	r1, r2, #2
1006343a:	b28b      	uxth	r3, r1
1006343c:	225c      	movs	r2, #92	@ 0x5c
1006343e:	4629      	mov	r1, r5
10063440:	f7ef fd7a 	bl	10052f38 <aci_event_fifo_push_header>
10063444:	2800      	cmp	r0, #0
10063446:	d028      	beq.n	1006349a <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x9a>
10063448:	4607      	mov	r7, r0
1006344a:	990d      	ldr	r1, [sp, #52]	@ 0x34
1006344c:	9806      	ldr	r0, [sp, #24]
1006344e:	9000      	str	r0, [sp, #0]
10063450:	9103      	str	r1, [sp, #12]
10063452:	9101      	str	r1, [sp, #4]
10063454:	1d38      	adds	r0, r7, #4
10063456:	4631      	mov	r1, r6
10063458:	9a04      	ldr	r2, [sp, #16]
1006345a:	9b05      	ldr	r3, [sp, #20]
1006345c:	f7f0 fa4b 	bl	100538f6 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_copy>
10063460:	0728      	lsls	r0, r5, #28
10063462:	d504      	bpl.n	1006346e <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x6e>
10063464:	9803      	ldr	r0, [sp, #12]
10063466:	f7ef fba5 	bl	10052bb4 <ACL_pkt_release>
1006346a:	20f7      	movs	r0, #247	@ 0xf7
1006346c:	4005      	ands	r5, r0
1006346e:	200c      	movs	r0, #12
10063470:	7278      	strb	r0, [r7, #9]
10063472:	2012      	movs	r0, #18
10063474:	7238      	strb	r0, [r7, #8]
10063476:	20ff      	movs	r0, #255	@ 0xff
10063478:	7178      	strb	r0, [r7, #5]
1006347a:	2082      	movs	r0, #130	@ 0x82
1006347c:	7138      	strb	r0, [r7, #4]
1006347e:	9806      	ldr	r0, [sp, #24]
10063480:	1dc0      	adds	r0, r0, #7
10063482:	71b8      	strb	r0, [r7, #6]
10063484:	0a00      	lsrs	r0, r0, #8
10063486:	71f8      	strb	r0, [r7, #7]
10063488:	4628      	mov	r0, r5
1006348a:	4639      	mov	r1, r7
1006348c:	f7ef fdf1 	bl	10053072 <aci_event_fifo_push>
10063490:	e000      	b.n	10063494 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
10063492:	2486      	movs	r4, #134	@ 0x86
10063494:	4620      	mov	r0, r4
10063496:	b007      	add	sp, #28
10063498:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006349a:	2407      	movs	r4, #7
1006349c:	e7fa      	b.n	10063494 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
1006349e:	46c0      	nop			@ (mov r8, r8)

100634a0 <__arm_cp.21_0>:
100634a0:	200010f4 	.word	0x200010f4

100634a4 <__arm_cp.21_1>:
100634a4:	200010a4 	.word	0x200010a4

100634a8 <__arm_cp.21_2>:
100634a8:	0003fffd 	.word	0x0003fffd

100634ac <aci_gatt_tx_pool_available_event_push_noinline>:
100634ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100634ae:	4604      	mov	r4, r0
100634b0:	06c0      	lsls	r0, r0, #27
100634b2:	d425      	bmi.n	10063500 <aci_gatt_tx_pool_available_event_push_noinline+0x54>
100634b4:	4616      	mov	r6, r2
100634b6:	460d      	mov	r5, r1
100634b8:	4814      	ldr	r0, [pc, #80]	@ (1006350c <__arm_cp.22_0>)
100634ba:	6800      	ldr	r0, [r0, #0]
100634bc:	0761      	lsls	r1, r4, #29
100634be:	0ec9      	lsrs	r1, r1, #27
100634c0:	1840      	adds	r0, r0, r1
100634c2:	6900      	ldr	r0, [r0, #16]
100634c4:	225d      	movs	r2, #93	@ 0x5d
100634c6:	2303      	movs	r3, #3
100634c8:	4621      	mov	r1, r4
100634ca:	f7ef fd35 	bl	10052f38 <aci_event_fifo_push_header>
100634ce:	2800      	cmp	r0, #0
100634d0:	d018      	beq.n	10063504 <aci_gatt_tx_pool_available_event_push_noinline+0x58>
100634d2:	4601      	mov	r1, r0
100634d4:	7306      	strb	r6, [r0, #12]
100634d6:	7285      	strb	r5, [r0, #10]
100634d8:	200c      	movs	r0, #12
100634da:	7248      	strb	r0, [r1, #9]
100634dc:	2016      	movs	r0, #22
100634de:	7208      	strb	r0, [r1, #8]
100634e0:	2700      	movs	r7, #0
100634e2:	71cf      	strb	r7, [r1, #7]
100634e4:	2006      	movs	r0, #6
100634e6:	7188      	strb	r0, [r1, #6]
100634e8:	20ff      	movs	r0, #255	@ 0xff
100634ea:	7148      	strb	r0, [r1, #5]
100634ec:	2082      	movs	r0, #130	@ 0x82
100634ee:	7108      	strb	r0, [r1, #4]
100634f0:	0a30      	lsrs	r0, r6, #8
100634f2:	7348      	strb	r0, [r1, #13]
100634f4:	0a28      	lsrs	r0, r5, #8
100634f6:	72c8      	strb	r0, [r1, #11]
100634f8:	4620      	mov	r0, r4
100634fa:	f7ef fdba 	bl	10053072 <aci_event_fifo_push>
100634fe:	e002      	b.n	10063506 <aci_gatt_tx_pool_available_event_push_noinline+0x5a>
10063500:	2786      	movs	r7, #134	@ 0x86
10063502:	e000      	b.n	10063506 <aci_gatt_tx_pool_available_event_push_noinline+0x5a>
10063504:	2707      	movs	r7, #7
10063506:	4638      	mov	r0, r7
10063508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006350a:	46c0      	nop			@ (mov r8, r8)

1006350c <__arm_cp.22_0>:
1006350c:	200010a4 	.word	0x200010a4

10063510 <aci_gatt_srv_confirmation_event_push_noinline>:
10063510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063512:	4604      	mov	r4, r0
10063514:	06c0      	lsls	r0, r0, #27
10063516:	d425      	bmi.n	10063564 <aci_gatt_srv_confirmation_event_push_noinline+0x54>
10063518:	4616      	mov	r6, r2
1006351a:	460d      	mov	r5, r1
1006351c:	4814      	ldr	r0, [pc, #80]	@ (10063570 <__arm_cp.23_0>)
1006351e:	6800      	ldr	r0, [r0, #0]
10063520:	0761      	lsls	r1, r4, #29
10063522:	0ec9      	lsrs	r1, r1, #27
10063524:	1840      	adds	r0, r0, r1
10063526:	6900      	ldr	r0, [r0, #16]
10063528:	225e      	movs	r2, #94	@ 0x5e
1006352a:	2303      	movs	r3, #3
1006352c:	4621      	mov	r1, r4
1006352e:	f7ef fd03 	bl	10052f38 <aci_event_fifo_push_header>
10063532:	2800      	cmp	r0, #0
10063534:	d018      	beq.n	10063568 <aci_gatt_srv_confirmation_event_push_noinline+0x58>
10063536:	4601      	mov	r1, r0
10063538:	7306      	strb	r6, [r0, #12]
1006353a:	7285      	strb	r5, [r0, #10]
1006353c:	200c      	movs	r0, #12
1006353e:	7248      	strb	r0, [r1, #9]
10063540:	2017      	movs	r0, #23
10063542:	7208      	strb	r0, [r1, #8]
10063544:	2700      	movs	r7, #0
10063546:	71cf      	strb	r7, [r1, #7]
10063548:	2006      	movs	r0, #6
1006354a:	7188      	strb	r0, [r1, #6]
1006354c:	20ff      	movs	r0, #255	@ 0xff
1006354e:	7148      	strb	r0, [r1, #5]
10063550:	2082      	movs	r0, #130	@ 0x82
10063552:	7108      	strb	r0, [r1, #4]
10063554:	0a30      	lsrs	r0, r6, #8
10063556:	7348      	strb	r0, [r1, #13]
10063558:	0a28      	lsrs	r0, r5, #8
1006355a:	72c8      	strb	r0, [r1, #11]
1006355c:	4620      	mov	r0, r4
1006355e:	f7ef fd88 	bl	10053072 <aci_event_fifo_push>
10063562:	e002      	b.n	1006356a <aci_gatt_srv_confirmation_event_push_noinline+0x5a>
10063564:	2786      	movs	r7, #134	@ 0x86
10063566:	e000      	b.n	1006356a <aci_gatt_srv_confirmation_event_push_noinline+0x5a>
10063568:	2707      	movs	r7, #7
1006356a:	4638      	mov	r0, r7
1006356c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006356e:	46c0      	nop			@ (mov r8, r8)

10063570 <__arm_cp.23_0>:
10063570:	200010a4 	.word	0x200010a4

10063574 <aci_gatt_srv_read_event_push_noinline>:
10063574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063576:	4604      	mov	r4, r0
10063578:	06c0      	lsls	r0, r0, #27
1006357a:	d42e      	bmi.n	100635da <aci_gatt_srv_read_event_push_noinline+0x66>
1006357c:	461f      	mov	r7, r3
1006357e:	4616      	mov	r6, r2
10063580:	460d      	mov	r5, r1
10063582:	4818      	ldr	r0, [pc, #96]	@ (100635e4 <__arm_cp.24_0>)
10063584:	6800      	ldr	r0, [r0, #0]
10063586:	0761      	lsls	r1, r4, #29
10063588:	0ec9      	lsrs	r1, r1, #27
1006358a:	1840      	adds	r0, r0, r1
1006358c:	6900      	ldr	r0, [r0, #16]
1006358e:	225f      	movs	r2, #95	@ 0x5f
10063590:	2304      	movs	r3, #4
10063592:	4621      	mov	r1, r4
10063594:	f7ef fcd0 	bl	10052f38 <aci_event_fifo_push_header>
10063598:	2800      	cmp	r0, #0
1006359a:	d020      	beq.n	100635de <aci_gatt_srv_read_event_push_noinline+0x6a>
1006359c:	4601      	mov	r1, r0
1006359e:	9806      	ldr	r0, [sp, #24]
100635a0:	7408      	strb	r0, [r1, #16]
100635a2:	738f      	strb	r7, [r1, #14]
100635a4:	730e      	strb	r6, [r1, #12]
100635a6:	728d      	strb	r5, [r1, #10]
100635a8:	220c      	movs	r2, #12
100635aa:	724a      	strb	r2, [r1, #9]
100635ac:	2219      	movs	r2, #25
100635ae:	720a      	strb	r2, [r1, #8]
100635b0:	462b      	mov	r3, r5
100635b2:	2500      	movs	r5, #0
100635b4:	71cd      	strb	r5, [r1, #7]
100635b6:	220a      	movs	r2, #10
100635b8:	718a      	strb	r2, [r1, #6]
100635ba:	22ff      	movs	r2, #255	@ 0xff
100635bc:	714a      	strb	r2, [r1, #5]
100635be:	2282      	movs	r2, #130	@ 0x82
100635c0:	710a      	strb	r2, [r1, #4]
100635c2:	0a00      	lsrs	r0, r0, #8
100635c4:	7448      	strb	r0, [r1, #17]
100635c6:	0a38      	lsrs	r0, r7, #8
100635c8:	73c8      	strb	r0, [r1, #15]
100635ca:	0a30      	lsrs	r0, r6, #8
100635cc:	7348      	strb	r0, [r1, #13]
100635ce:	0a18      	lsrs	r0, r3, #8
100635d0:	72c8      	strb	r0, [r1, #11]
100635d2:	4620      	mov	r0, r4
100635d4:	f7ef fd4d 	bl	10053072 <aci_event_fifo_push>
100635d8:	e002      	b.n	100635e0 <aci_gatt_srv_read_event_push_noinline+0x6c>
100635da:	2586      	movs	r5, #134	@ 0x86
100635dc:	e000      	b.n	100635e0 <aci_gatt_srv_read_event_push_noinline+0x6c>
100635de:	2507      	movs	r5, #7
100635e0:	4628      	mov	r0, r5
100635e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100635e4 <__arm_cp.24_0>:
100635e4:	200010a4 	.word	0x200010a4

100635e8 <aci_gatt_srv_write_event_push_noinline>:
100635e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100635ea:	4604      	mov	r4, r0
100635ec:	06c0      	lsls	r0, r0, #27
100635ee:	d420      	bmi.n	10063632 <aci_gatt_srv_write_event_push_noinline+0x4a>
100635f0:	461f      	mov	r7, r3
100635f2:	4616      	mov	r6, r2
100635f4:	460d      	mov	r5, r1
100635f6:	4811      	ldr	r0, [pc, #68]	@ (1006363c <__arm_cp.25_0>)
100635f8:	6800      	ldr	r0, [r0, #0]
100635fa:	0761      	lsls	r1, r4, #29
100635fc:	0ec9      	lsrs	r1, r1, #27
100635fe:	1840      	adds	r0, r0, r1
10063600:	6900      	ldr	r0, [r0, #16]
10063602:	2211      	movs	r2, #17
10063604:	2305      	movs	r3, #5
10063606:	4621      	mov	r1, r4
10063608:	f7ef fc96 	bl	10052f38 <aci_event_fifo_push_header>
1006360c:	2800      	cmp	r0, #0
1006360e:	d012      	beq.n	10063636 <aci_gatt_srv_write_event_push_noinline+0x4e>
10063610:	4601      	mov	r1, r0
10063612:	9808      	ldr	r0, [sp, #32]
10063614:	9a07      	ldr	r2, [sp, #28]
10063616:	9b06      	ldr	r3, [sp, #24]
10063618:	6148      	str	r0, [r1, #20]
1006361a:	820a      	strh	r2, [r1, #16]
1006361c:	81cb      	strh	r3, [r1, #14]
1006361e:	730f      	strb	r7, [r1, #12]
10063620:	814e      	strh	r6, [r1, #10]
10063622:	810d      	strh	r5, [r1, #8]
10063624:	4806      	ldr	r0, [pc, #24]	@ (10063640 <__arm_cp.25_1>)
10063626:	6048      	str	r0, [r1, #4]
10063628:	4620      	mov	r0, r4
1006362a:	f7ef fd22 	bl	10053072 <aci_event_fifo_push>
1006362e:	2000      	movs	r0, #0
10063630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063632:	2086      	movs	r0, #134	@ 0x86
10063634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063636:	2007      	movs	r0, #7
10063638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006363a:	46c0      	nop			@ (mov r8, r8)

1006363c <__arm_cp.25_0>:
1006363c:	200010a4 	.word	0x200010a4

10063640 <__arm_cp.25_1>:
10063640:	10062d11 	.word	0x10062d11

10063644 <aci_gatt_clt_multi_notification_int_event_push_noinline>:
10063644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063646:	4605      	mov	r5, r0
10063648:	06c0      	lsls	r0, r0, #27
1006364a:	d421      	bmi.n	10063690 <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4c>
1006364c:	460e      	mov	r6, r1
1006364e:	4813      	ldr	r0, [pc, #76]	@ (1006369c <__arm_cp.26_0>)
10063650:	6800      	ldr	r0, [r0, #0]
10063652:	2152      	movs	r1, #82	@ 0x52
10063654:	5c40      	ldrb	r0, [r0, r1]
10063656:	2400      	movs	r4, #0
10063658:	0700      	lsls	r0, r0, #28
1006365a:	d51a      	bpl.n	10063692 <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
1006365c:	4617      	mov	r7, r2
1006365e:	9300      	str	r3, [sp, #0]
10063660:	480f      	ldr	r0, [pc, #60]	@ (100636a0 <__arm_cp.26_1>)
10063662:	6800      	ldr	r0, [r0, #0]
10063664:	0769      	lsls	r1, r5, #29
10063666:	0ec9      	lsrs	r1, r1, #27
10063668:	1840      	adds	r0, r0, r1
1006366a:	6900      	ldr	r0, [r0, #16]
1006366c:	2214      	movs	r2, #20
1006366e:	2303      	movs	r3, #3
10063670:	4629      	mov	r1, r5
10063672:	f7ef fc61 	bl	10052f38 <aci_event_fifo_push_header>
10063676:	2800      	cmp	r0, #0
10063678:	d00d      	beq.n	10063696 <aci_gatt_clt_multi_notification_int_event_push_noinline+0x52>
1006367a:	4601      	mov	r1, r0
1006367c:	9800      	ldr	r0, [sp, #0]
1006367e:	60c8      	str	r0, [r1, #12]
10063680:	814f      	strh	r7, [r1, #10]
10063682:	810e      	strh	r6, [r1, #8]
10063684:	4807      	ldr	r0, [pc, #28]	@ (100636a4 <__arm_cp.26_2>)
10063686:	6048      	str	r0, [r1, #4]
10063688:	4628      	mov	r0, r5
1006368a:	f7ef fcf2 	bl	10053072 <aci_event_fifo_push>
1006368e:	e000      	b.n	10063692 <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
10063690:	2486      	movs	r4, #134	@ 0x86
10063692:	4620      	mov	r0, r4
10063694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063696:	2407      	movs	r4, #7
10063698:	e7fb      	b.n	10063692 <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
1006369a:	46c0      	nop			@ (mov r8, r8)

1006369c <__arm_cp.26_0>:
1006369c:	200010f4 	.word	0x200010f4

100636a0 <__arm_cp.26_1>:
100636a0:	200010a4 	.word	0x200010a4

100636a4 <__arm_cp.26_2>:
100636a4:	10062d71 	.word	0x10062d71

100636a8 <aci_att_exchange_mtu_resp_event_push_noinline>:
100636a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100636aa:	4604      	mov	r4, r0
100636ac:	06c0      	lsls	r0, r0, #27
100636ae:	d408      	bmi.n	100636c2 <aci_att_exchange_mtu_resp_event_push_noinline+0x1a>
100636b0:	460d      	mov	r5, r1
100636b2:	4819      	ldr	r0, [pc, #100]	@ (10063718 <__arm_cp.27_0>)
100636b4:	6800      	ldr	r0, [r0, #0]
100636b6:	2150      	movs	r1, #80	@ 0x50
100636b8:	5c40      	ldrb	r0, [r0, r1]
100636ba:	0740      	lsls	r0, r0, #29
100636bc:	d403      	bmi.n	100636c6 <aci_att_exchange_mtu_resp_event_push_noinline+0x1e>
100636be:	2700      	movs	r7, #0
100636c0:	e027      	b.n	10063712 <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
100636c2:	2786      	movs	r7, #134	@ 0x86
100636c4:	e025      	b.n	10063712 <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
100636c6:	4616      	mov	r6, r2
100636c8:	4814      	ldr	r0, [pc, #80]	@ (1006371c <__arm_cp.27_1>)
100636ca:	6800      	ldr	r0, [r0, #0]
100636cc:	0761      	lsls	r1, r4, #29
100636ce:	0ec9      	lsrs	r1, r1, #27
100636d0:	1840      	adds	r0, r0, r1
100636d2:	6900      	ldr	r0, [r0, #16]
100636d4:	2258      	movs	r2, #88	@ 0x58
100636d6:	2703      	movs	r7, #3
100636d8:	4621      	mov	r1, r4
100636da:	463b      	mov	r3, r7
100636dc:	f7ef fc2c 	bl	10052f38 <aci_event_fifo_push_header>
100636e0:	2800      	cmp	r0, #0
100636e2:	d015      	beq.n	10063710 <aci_att_exchange_mtu_resp_event_push_noinline+0x68>
100636e4:	4601      	mov	r1, r0
100636e6:	7306      	strb	r6, [r0, #12]
100636e8:	7285      	strb	r5, [r0, #10]
100636ea:	200c      	movs	r0, #12
100636ec:	7248      	strb	r0, [r1, #9]
100636ee:	720f      	strb	r7, [r1, #8]
100636f0:	2700      	movs	r7, #0
100636f2:	71cf      	strb	r7, [r1, #7]
100636f4:	2006      	movs	r0, #6
100636f6:	7188      	strb	r0, [r1, #6]
100636f8:	20ff      	movs	r0, #255	@ 0xff
100636fa:	7148      	strb	r0, [r1, #5]
100636fc:	2082      	movs	r0, #130	@ 0x82
100636fe:	7108      	strb	r0, [r1, #4]
10063700:	0a30      	lsrs	r0, r6, #8
10063702:	7348      	strb	r0, [r1, #13]
10063704:	0a28      	lsrs	r0, r5, #8
10063706:	72c8      	strb	r0, [r1, #11]
10063708:	4620      	mov	r0, r4
1006370a:	f7ef fcb2 	bl	10053072 <aci_event_fifo_push>
1006370e:	e000      	b.n	10063712 <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
10063710:	2707      	movs	r7, #7
10063712:	4638      	mov	r0, r7
10063714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063716:	46c0      	nop			@ (mov r8, r8)

10063718 <__arm_cp.27_0>:
10063718:	200010f4 	.word	0x200010f4

1006371c <__arm_cp.27_1>:
1006371c:	200010a4 	.word	0x200010a4

10063720 <aci_att_clt_find_info_resp_event_push_noinline>:
10063720:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10063722:	4604      	mov	r4, r0
10063724:	06c0      	lsls	r0, r0, #27
10063726:	d424      	bmi.n	10063772 <aci_att_clt_find_info_resp_event_push_noinline+0x52>
10063728:	4616      	mov	r6, r2
1006372a:	4813      	ldr	r0, [pc, #76]	@ (10063778 <__arm_cp.28_0>)
1006372c:	6800      	ldr	r0, [r0, #0]
1006372e:	2250      	movs	r2, #80	@ 0x50
10063730:	5c80      	ldrb	r0, [r0, r2]
10063732:	2500      	movs	r5, #0
10063734:	0700      	lsls	r0, r0, #28
10063736:	d51d      	bpl.n	10063774 <aci_att_clt_find_info_resp_event_push_noinline+0x54>
10063738:	461f      	mov	r7, r3
1006373a:	9101      	str	r1, [sp, #4]
1006373c:	9502      	str	r5, [sp, #8]
1006373e:	480f      	ldr	r0, [pc, #60]	@ (1006377c <__arm_cp.28_1>)
10063740:	6800      	ldr	r0, [r0, #0]
10063742:	0761      	lsls	r1, r4, #29
10063744:	0ec9      	lsrs	r1, r1, #27
10063746:	1840      	adds	r0, r0, r1
10063748:	6900      	ldr	r0, [r0, #16]
1006374a:	2507      	movs	r5, #7
1006374c:	2303      	movs	r3, #3
1006374e:	4621      	mov	r1, r4
10063750:	462a      	mov	r2, r5
10063752:	f7ef fbf1 	bl	10052f38 <aci_event_fifo_push_header>
10063756:	2800      	cmp	r0, #0
10063758:	d00c      	beq.n	10063774 <aci_att_clt_find_info_resp_event_push_noinline+0x54>
1006375a:	4601      	mov	r1, r0
1006375c:	60c7      	str	r7, [r0, #12]
1006375e:	8146      	strh	r6, [r0, #10]
10063760:	9801      	ldr	r0, [sp, #4]
10063762:	8108      	strh	r0, [r1, #8]
10063764:	4806      	ldr	r0, [pc, #24]	@ (10063780 <__arm_cp.28_2>)
10063766:	6048      	str	r0, [r1, #4]
10063768:	4620      	mov	r0, r4
1006376a:	f7ef fc82 	bl	10053072 <aci_event_fifo_push>
1006376e:	9d02      	ldr	r5, [sp, #8]
10063770:	e000      	b.n	10063774 <aci_att_clt_find_info_resp_event_push_noinline+0x54>
10063772:	2586      	movs	r5, #134	@ 0x86
10063774:	4628      	mov	r0, r5
10063776:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10063778 <__arm_cp.28_0>:
10063778:	200010f4 	.word	0x200010f4

1006377c <__arm_cp.28_1>:
1006377c:	200010a4 	.word	0x200010a4

10063780 <__arm_cp.28_2>:
10063780:	10062df1 	.word	0x10062df1

10063784 <aci_att_clt_find_by_type_value_resp_event_push_noinline>:
10063784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063786:	4605      	mov	r5, r0
10063788:	06c0      	lsls	r0, r0, #27
1006378a:	d421      	bmi.n	100637d0 <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4c>
1006378c:	460e      	mov	r6, r1
1006378e:	4813      	ldr	r0, [pc, #76]	@ (100637dc <__arm_cp.29_0>)
10063790:	6800      	ldr	r0, [r0, #0]
10063792:	2150      	movs	r1, #80	@ 0x50
10063794:	5c40      	ldrb	r0, [r0, r1]
10063796:	2400      	movs	r4, #0
10063798:	06c0      	lsls	r0, r0, #27
1006379a:	d51a      	bpl.n	100637d2 <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
1006379c:	4617      	mov	r7, r2
1006379e:	9300      	str	r3, [sp, #0]
100637a0:	480f      	ldr	r0, [pc, #60]	@ (100637e0 <__arm_cp.29_1>)
100637a2:	6800      	ldr	r0, [r0, #0]
100637a4:	0769      	lsls	r1, r5, #29
100637a6:	0ec9      	lsrs	r1, r1, #27
100637a8:	1840      	adds	r0, r0, r1
100637aa:	6900      	ldr	r0, [r0, #16]
100637ac:	2208      	movs	r2, #8
100637ae:	2303      	movs	r3, #3
100637b0:	4629      	mov	r1, r5
100637b2:	f7ef fbc1 	bl	10052f38 <aci_event_fifo_push_header>
100637b6:	2800      	cmp	r0, #0
100637b8:	d00d      	beq.n	100637d6 <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x52>
100637ba:	4601      	mov	r1, r0
100637bc:	9800      	ldr	r0, [sp, #0]
100637be:	60c8      	str	r0, [r1, #12]
100637c0:	814f      	strh	r7, [r1, #10]
100637c2:	810e      	strh	r6, [r1, #8]
100637c4:	4807      	ldr	r0, [pc, #28]	@ (100637e4 <__arm_cp.29_2>)
100637c6:	6048      	str	r0, [r1, #4]
100637c8:	4628      	mov	r0, r5
100637ca:	f7ef fc52 	bl	10053072 <aci_event_fifo_push>
100637ce:	e000      	b.n	100637d2 <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
100637d0:	2486      	movs	r4, #134	@ 0x86
100637d2:	4620      	mov	r0, r4
100637d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100637d6:	2407      	movs	r4, #7
100637d8:	e7fb      	b.n	100637d2 <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
100637da:	46c0      	nop			@ (mov r8, r8)

100637dc <__arm_cp.29_0>:
100637dc:	200010f4 	.word	0x200010f4

100637e0 <__arm_cp.29_1>:
100637e0:	200010a4 	.word	0x200010a4

100637e4 <__arm_cp.29_2>:
100637e4:	10062e45 	.word	0x10062e45

100637e8 <aci_att_clt_read_by_type_resp_event_push_noinline>:
100637e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100637ea:	4605      	mov	r5, r0
100637ec:	06c0      	lsls	r0, r0, #27
100637ee:	d421      	bmi.n	10063834 <aci_att_clt_read_by_type_resp_event_push_noinline+0x4c>
100637f0:	460e      	mov	r6, r1
100637f2:	4813      	ldr	r0, [pc, #76]	@ (10063840 <__arm_cp.30_0>)
100637f4:	6800      	ldr	r0, [r0, #0]
100637f6:	2150      	movs	r1, #80	@ 0x50
100637f8:	5c40      	ldrb	r0, [r0, r1]
100637fa:	2400      	movs	r4, #0
100637fc:	0680      	lsls	r0, r0, #26
100637fe:	d51a      	bpl.n	10063836 <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
10063800:	4617      	mov	r7, r2
10063802:	9300      	str	r3, [sp, #0]
10063804:	480f      	ldr	r0, [pc, #60]	@ (10063844 <__arm_cp.30_1>)
10063806:	6800      	ldr	r0, [r0, #0]
10063808:	0769      	lsls	r1, r5, #29
1006380a:	0ec9      	lsrs	r1, r1, #27
1006380c:	1840      	adds	r0, r0, r1
1006380e:	6900      	ldr	r0, [r0, #16]
10063810:	2209      	movs	r2, #9
10063812:	2303      	movs	r3, #3
10063814:	4629      	mov	r1, r5
10063816:	f7ef fb8f 	bl	10052f38 <aci_event_fifo_push_header>
1006381a:	2800      	cmp	r0, #0
1006381c:	d00d      	beq.n	1006383a <aci_att_clt_read_by_type_resp_event_push_noinline+0x52>
1006381e:	4601      	mov	r1, r0
10063820:	9800      	ldr	r0, [sp, #0]
10063822:	60c8      	str	r0, [r1, #12]
10063824:	814f      	strh	r7, [r1, #10]
10063826:	810e      	strh	r6, [r1, #8]
10063828:	4807      	ldr	r0, [pc, #28]	@ (10063848 <__arm_cp.30_2>)
1006382a:	6048      	str	r0, [r1, #4]
1006382c:	4628      	mov	r0, r5
1006382e:	f7ef fc20 	bl	10053072 <aci_event_fifo_push>
10063832:	e000      	b.n	10063836 <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
10063834:	2486      	movs	r4, #134	@ 0x86
10063836:	4620      	mov	r0, r4
10063838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006383a:	2407      	movs	r4, #7
1006383c:	e7fb      	b.n	10063836 <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
1006383e:	46c0      	nop			@ (mov r8, r8)

10063840 <__arm_cp.30_0>:
10063840:	200010f4 	.word	0x200010f4

10063844 <__arm_cp.30_1>:
10063844:	200010a4 	.word	0x200010a4

10063848 <__arm_cp.30_2>:
10063848:	10062e91 	.word	0x10062e91

1006384c <aci_att_clt_read_resp_event_push_noinline>:
1006384c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006384e:	4605      	mov	r5, r0
10063850:	06c0      	lsls	r0, r0, #27
10063852:	d421      	bmi.n	10063898 <aci_att_clt_read_resp_event_push_noinline+0x4c>
10063854:	460e      	mov	r6, r1
10063856:	4813      	ldr	r0, [pc, #76]	@ (100638a4 <__arm_cp.31_0>)
10063858:	6800      	ldr	r0, [r0, #0]
1006385a:	2150      	movs	r1, #80	@ 0x50
1006385c:	5c40      	ldrb	r0, [r0, r1]
1006385e:	2400      	movs	r4, #0
10063860:	0640      	lsls	r0, r0, #25
10063862:	d51a      	bpl.n	1006389a <aci_att_clt_read_resp_event_push_noinline+0x4e>
10063864:	4617      	mov	r7, r2
10063866:	9300      	str	r3, [sp, #0]
10063868:	480f      	ldr	r0, [pc, #60]	@ (100638a8 <__arm_cp.31_1>)
1006386a:	6800      	ldr	r0, [r0, #0]
1006386c:	0769      	lsls	r1, r5, #29
1006386e:	0ec9      	lsrs	r1, r1, #27
10063870:	1840      	adds	r0, r0, r1
10063872:	6900      	ldr	r0, [r0, #16]
10063874:	220a      	movs	r2, #10
10063876:	2303      	movs	r3, #3
10063878:	4629      	mov	r1, r5
1006387a:	f7ef fb5d 	bl	10052f38 <aci_event_fifo_push_header>
1006387e:	2800      	cmp	r0, #0
10063880:	d00d      	beq.n	1006389e <aci_att_clt_read_resp_event_push_noinline+0x52>
10063882:	4601      	mov	r1, r0
10063884:	9800      	ldr	r0, [sp, #0]
10063886:	60c8      	str	r0, [r1, #12]
10063888:	814f      	strh	r7, [r1, #10]
1006388a:	810e      	strh	r6, [r1, #8]
1006388c:	4807      	ldr	r0, [pc, #28]	@ (100638ac <__arm_cp.31_2>)
1006388e:	6048      	str	r0, [r1, #4]
10063890:	4628      	mov	r0, r5
10063892:	f7ef fbee 	bl	10053072 <aci_event_fifo_push>
10063896:	e000      	b.n	1006389a <aci_att_clt_read_resp_event_push_noinline+0x4e>
10063898:	2486      	movs	r4, #134	@ 0x86
1006389a:	4620      	mov	r0, r4
1006389c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006389e:	2407      	movs	r4, #7
100638a0:	e7fb      	b.n	1006389a <aci_att_clt_read_resp_event_push_noinline+0x4e>
100638a2:	46c0      	nop			@ (mov r8, r8)

100638a4 <__arm_cp.31_0>:
100638a4:	200010f4 	.word	0x200010f4

100638a8 <__arm_cp.31_1>:
100638a8:	200010a4 	.word	0x200010a4

100638ac <__arm_cp.31_2>:
100638ac:	10062ee5 	.word	0x10062ee5

100638b0 <aci_att_clt_read_blob_resp_event_push_noinline>:
100638b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100638b2:	4605      	mov	r5, r0
100638b4:	06c0      	lsls	r0, r0, #27
100638b6:	d421      	bmi.n	100638fc <aci_att_clt_read_blob_resp_event_push_noinline+0x4c>
100638b8:	460e      	mov	r6, r1
100638ba:	4813      	ldr	r0, [pc, #76]	@ (10063908 <__arm_cp.32_0>)
100638bc:	6800      	ldr	r0, [r0, #0]
100638be:	2150      	movs	r1, #80	@ 0x50
100638c0:	5640      	ldrsb	r0, [r0, r1]
100638c2:	2400      	movs	r4, #0
100638c4:	2800      	cmp	r0, #0
100638c6:	d51a      	bpl.n	100638fe <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
100638c8:	4617      	mov	r7, r2
100638ca:	9300      	str	r3, [sp, #0]
100638cc:	480f      	ldr	r0, [pc, #60]	@ (1006390c <__arm_cp.32_1>)
100638ce:	6800      	ldr	r0, [r0, #0]
100638d0:	0769      	lsls	r1, r5, #29
100638d2:	0ec9      	lsrs	r1, r1, #27
100638d4:	1840      	adds	r0, r0, r1
100638d6:	6900      	ldr	r0, [r0, #16]
100638d8:	220b      	movs	r2, #11
100638da:	2303      	movs	r3, #3
100638dc:	4629      	mov	r1, r5
100638de:	f7ef fb2b 	bl	10052f38 <aci_event_fifo_push_header>
100638e2:	2800      	cmp	r0, #0
100638e4:	d00d      	beq.n	10063902 <aci_att_clt_read_blob_resp_event_push_noinline+0x52>
100638e6:	4601      	mov	r1, r0
100638e8:	9800      	ldr	r0, [sp, #0]
100638ea:	60c8      	str	r0, [r1, #12]
100638ec:	814f      	strh	r7, [r1, #10]
100638ee:	810e      	strh	r6, [r1, #8]
100638f0:	4807      	ldr	r0, [pc, #28]	@ (10063910 <__arm_cp.32_2>)
100638f2:	6048      	str	r0, [r1, #4]
100638f4:	4628      	mov	r0, r5
100638f6:	f7ef fbbc 	bl	10053072 <aci_event_fifo_push>
100638fa:	e000      	b.n	100638fe <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
100638fc:	2486      	movs	r4, #134	@ 0x86
100638fe:	4620      	mov	r0, r4
10063900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063902:	2407      	movs	r4, #7
10063904:	e7fb      	b.n	100638fe <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
10063906:	46c0      	nop			@ (mov r8, r8)

10063908 <__arm_cp.32_0>:
10063908:	200010f4 	.word	0x200010f4

1006390c <__arm_cp.32_1>:
1006390c:	200010a4 	.word	0x200010a4

10063910 <__arm_cp.32_2>:
10063910:	10062f35 	.word	0x10062f35

10063914 <aci_att_clt_read_multiple_resp_event_push_noinline>:
10063914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063916:	4605      	mov	r5, r0
10063918:	06c0      	lsls	r0, r0, #27
1006391a:	d421      	bmi.n	10063960 <aci_att_clt_read_multiple_resp_event_push_noinline+0x4c>
1006391c:	460e      	mov	r6, r1
1006391e:	4813      	ldr	r0, [pc, #76]	@ (1006396c <__arm_cp.33_0>)
10063920:	6800      	ldr	r0, [r0, #0]
10063922:	2151      	movs	r1, #81	@ 0x51
10063924:	5c40      	ldrb	r0, [r0, r1]
10063926:	2400      	movs	r4, #0
10063928:	07c0      	lsls	r0, r0, #31
1006392a:	d01a      	beq.n	10063962 <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
1006392c:	4617      	mov	r7, r2
1006392e:	9300      	str	r3, [sp, #0]
10063930:	480f      	ldr	r0, [pc, #60]	@ (10063970 <__arm_cp.33_1>)
10063932:	6800      	ldr	r0, [r0, #0]
10063934:	0769      	lsls	r1, r5, #29
10063936:	0ec9      	lsrs	r1, r1, #27
10063938:	1840      	adds	r0, r0, r1
1006393a:	6900      	ldr	r0, [r0, #16]
1006393c:	220c      	movs	r2, #12
1006393e:	2303      	movs	r3, #3
10063940:	4629      	mov	r1, r5
10063942:	f7ef faf9 	bl	10052f38 <aci_event_fifo_push_header>
10063946:	2800      	cmp	r0, #0
10063948:	d00d      	beq.n	10063966 <aci_att_clt_read_multiple_resp_event_push_noinline+0x52>
1006394a:	4601      	mov	r1, r0
1006394c:	9800      	ldr	r0, [sp, #0]
1006394e:	60c8      	str	r0, [r1, #12]
10063950:	814f      	strh	r7, [r1, #10]
10063952:	810e      	strh	r6, [r1, #8]
10063954:	4807      	ldr	r0, [pc, #28]	@ (10063974 <__arm_cp.33_2>)
10063956:	6048      	str	r0, [r1, #4]
10063958:	4628      	mov	r0, r5
1006395a:	f7ef fb8a 	bl	10053072 <aci_event_fifo_push>
1006395e:	e000      	b.n	10063962 <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
10063960:	2486      	movs	r4, #134	@ 0x86
10063962:	4620      	mov	r0, r4
10063964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063966:	2407      	movs	r4, #7
10063968:	e7fb      	b.n	10063962 <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
1006396a:	46c0      	nop			@ (mov r8, r8)

1006396c <__arm_cp.33_0>:
1006396c:	200010f4 	.word	0x200010f4

10063970 <__arm_cp.33_1>:
10063970:	200010a4 	.word	0x200010a4

10063974 <__arm_cp.33_2>:
10063974:	10062f85 	.word	0x10062f85

10063978 <aci_att_clt_read_by_group_type_resp_event_push_noinline>:
10063978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006397a:	4605      	mov	r5, r0
1006397c:	06c0      	lsls	r0, r0, #27
1006397e:	d421      	bmi.n	100639c4 <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4c>
10063980:	460e      	mov	r6, r1
10063982:	4813      	ldr	r0, [pc, #76]	@ (100639d0 <__arm_cp.34_0>)
10063984:	6800      	ldr	r0, [r0, #0]
10063986:	2151      	movs	r1, #81	@ 0x51
10063988:	5c40      	ldrb	r0, [r0, r1]
1006398a:	2400      	movs	r4, #0
1006398c:	0780      	lsls	r0, r0, #30
1006398e:	d51a      	bpl.n	100639c6 <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
10063990:	4617      	mov	r7, r2
10063992:	9300      	str	r3, [sp, #0]
10063994:	480f      	ldr	r0, [pc, #60]	@ (100639d4 <__arm_cp.34_1>)
10063996:	6800      	ldr	r0, [r0, #0]
10063998:	0769      	lsls	r1, r5, #29
1006399a:	0ec9      	lsrs	r1, r1, #27
1006399c:	1840      	adds	r0, r0, r1
1006399e:	6900      	ldr	r0, [r0, #16]
100639a0:	220d      	movs	r2, #13
100639a2:	2303      	movs	r3, #3
100639a4:	4629      	mov	r1, r5
100639a6:	f7ef fac7 	bl	10052f38 <aci_event_fifo_push_header>
100639aa:	2800      	cmp	r0, #0
100639ac:	d00d      	beq.n	100639ca <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x52>
100639ae:	4601      	mov	r1, r0
100639b0:	9800      	ldr	r0, [sp, #0]
100639b2:	60c8      	str	r0, [r1, #12]
100639b4:	814f      	strh	r7, [r1, #10]
100639b6:	810e      	strh	r6, [r1, #8]
100639b8:	4807      	ldr	r0, [pc, #28]	@ (100639d8 <__arm_cp.34_2>)
100639ba:	6048      	str	r0, [r1, #4]
100639bc:	4628      	mov	r0, r5
100639be:	f7ef fb58 	bl	10053072 <aci_event_fifo_push>
100639c2:	e000      	b.n	100639c6 <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
100639c4:	2486      	movs	r4, #134	@ 0x86
100639c6:	4620      	mov	r0, r4
100639c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100639ca:	2407      	movs	r4, #7
100639cc:	e7fb      	b.n	100639c6 <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
100639ce:	46c0      	nop			@ (mov r8, r8)

100639d0 <__arm_cp.34_0>:
100639d0:	200010f4 	.word	0x200010f4

100639d4 <__arm_cp.34_1>:
100639d4:	200010a4 	.word	0x200010a4

100639d8 <__arm_cp.34_2>:
100639d8:	10062fd5 	.word	0x10062fd5

100639dc <aci_att_clt_prepare_write_resp_event_push_noinline>:
100639dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100639de:	4605      	mov	r5, r0
100639e0:	06c0      	lsls	r0, r0, #27
100639e2:	d421      	bmi.n	10063a28 <aci_att_clt_prepare_write_resp_event_push_noinline+0x4c>
100639e4:	460e      	mov	r6, r1
100639e6:	4813      	ldr	r0, [pc, #76]	@ (10063a34 <__arm_cp.35_0>)
100639e8:	6800      	ldr	r0, [r0, #0]
100639ea:	2151      	movs	r1, #81	@ 0x51
100639ec:	5c40      	ldrb	r0, [r0, r1]
100639ee:	2400      	movs	r4, #0
100639f0:	0700      	lsls	r0, r0, #28
100639f2:	d51a      	bpl.n	10063a2a <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
100639f4:	4617      	mov	r7, r2
100639f6:	9300      	str	r3, [sp, #0]
100639f8:	480f      	ldr	r0, [pc, #60]	@ (10063a38 <__arm_cp.35_1>)
100639fa:	6800      	ldr	r0, [r0, #0]
100639fc:	0769      	lsls	r1, r5, #29
100639fe:	0ec9      	lsrs	r1, r1, #27
10063a00:	1840      	adds	r0, r0, r1
10063a02:	6900      	ldr	r0, [r0, #16]
10063a04:	220e      	movs	r2, #14
10063a06:	2303      	movs	r3, #3
10063a08:	4629      	mov	r1, r5
10063a0a:	f7ef fa95 	bl	10052f38 <aci_event_fifo_push_header>
10063a0e:	2800      	cmp	r0, #0
10063a10:	d00d      	beq.n	10063a2e <aci_att_clt_prepare_write_resp_event_push_noinline+0x52>
10063a12:	4601      	mov	r1, r0
10063a14:	9800      	ldr	r0, [sp, #0]
10063a16:	60c8      	str	r0, [r1, #12]
10063a18:	814f      	strh	r7, [r1, #10]
10063a1a:	810e      	strh	r6, [r1, #8]
10063a1c:	4807      	ldr	r0, [pc, #28]	@ (10063a3c <__arm_cp.35_2>)
10063a1e:	6048      	str	r0, [r1, #4]
10063a20:	4628      	mov	r0, r5
10063a22:	f7ef fb26 	bl	10053072 <aci_event_fifo_push>
10063a26:	e000      	b.n	10063a2a <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
10063a28:	2486      	movs	r4, #134	@ 0x86
10063a2a:	4620      	mov	r0, r4
10063a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063a2e:	2407      	movs	r4, #7
10063a30:	e7fb      	b.n	10063a2a <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
10063a32:	46c0      	nop			@ (mov r8, r8)

10063a34 <__arm_cp.35_0>:
10063a34:	200010f4 	.word	0x200010f4

10063a38 <__arm_cp.35_1>:
10063a38:	200010a4 	.word	0x200010a4

10063a3c <__arm_cp.35_2>:
10063a3c:	10063029 	.word	0x10063029

10063a40 <aci_att_clt_exec_write_resp_event_push_noinline>:
10063a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063a42:	4604      	mov	r4, r0
10063a44:	06c0      	lsls	r0, r0, #27
10063a46:	d408      	bmi.n	10063a5a <aci_att_clt_exec_write_resp_event_push_noinline+0x1a>
10063a48:	460d      	mov	r5, r1
10063a4a:	4819      	ldr	r0, [pc, #100]	@ (10063ab0 <__arm_cp.36_0>)
10063a4c:	6800      	ldr	r0, [r0, #0]
10063a4e:	2151      	movs	r1, #81	@ 0x51
10063a50:	5c40      	ldrb	r0, [r0, r1]
10063a52:	06c0      	lsls	r0, r0, #27
10063a54:	d403      	bmi.n	10063a5e <aci_att_clt_exec_write_resp_event_push_noinline+0x1e>
10063a56:	2700      	movs	r7, #0
10063a58:	e027      	b.n	10063aaa <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
10063a5a:	2786      	movs	r7, #134	@ 0x86
10063a5c:	e025      	b.n	10063aaa <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
10063a5e:	4616      	mov	r6, r2
10063a60:	4814      	ldr	r0, [pc, #80]	@ (10063ab4 <__arm_cp.36_1>)
10063a62:	6800      	ldr	r0, [r0, #0]
10063a64:	0761      	lsls	r1, r4, #29
10063a66:	0ec9      	lsrs	r1, r1, #27
10063a68:	1840      	adds	r0, r0, r1
10063a6a:	6900      	ldr	r0, [r0, #16]
10063a6c:	2259      	movs	r2, #89	@ 0x59
10063a6e:	2303      	movs	r3, #3
10063a70:	4621      	mov	r1, r4
10063a72:	f7ef fa61 	bl	10052f38 <aci_event_fifo_push_header>
10063a76:	2800      	cmp	r0, #0
10063a78:	d016      	beq.n	10063aa8 <aci_att_clt_exec_write_resp_event_push_noinline+0x68>
10063a7a:	4601      	mov	r1, r0
10063a7c:	7306      	strb	r6, [r0, #12]
10063a7e:	7285      	strb	r5, [r0, #10]
10063a80:	200c      	movs	r0, #12
10063a82:	7248      	strb	r0, [r1, #9]
10063a84:	200d      	movs	r0, #13
10063a86:	7208      	strb	r0, [r1, #8]
10063a88:	2700      	movs	r7, #0
10063a8a:	71cf      	strb	r7, [r1, #7]
10063a8c:	2006      	movs	r0, #6
10063a8e:	7188      	strb	r0, [r1, #6]
10063a90:	20ff      	movs	r0, #255	@ 0xff
10063a92:	7148      	strb	r0, [r1, #5]
10063a94:	2082      	movs	r0, #130	@ 0x82
10063a96:	7108      	strb	r0, [r1, #4]
10063a98:	0a30      	lsrs	r0, r6, #8
10063a9a:	7348      	strb	r0, [r1, #13]
10063a9c:	0a28      	lsrs	r0, r5, #8
10063a9e:	72c8      	strb	r0, [r1, #11]
10063aa0:	4620      	mov	r0, r4
10063aa2:	f7ef fae6 	bl	10053072 <aci_event_fifo_push>
10063aa6:	e000      	b.n	10063aaa <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
10063aa8:	2707      	movs	r7, #7
10063aaa:	4638      	mov	r0, r7
10063aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063aae:	46c0      	nop			@ (mov r8, r8)

10063ab0 <__arm_cp.36_0>:
10063ab0:	200010f4 	.word	0x200010f4

10063ab4 <__arm_cp.36_1>:
10063ab4:	200010a4 	.word	0x200010a4

10063ab8 <aci_att_srv_prepare_write_req_event_push_noinline>:
10063ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063aba:	4604      	mov	r4, r0
10063abc:	06c0      	lsls	r0, r0, #27
10063abe:	d420      	bmi.n	10063b02 <aci_att_srv_prepare_write_req_event_push_noinline+0x4a>
10063ac0:	461f      	mov	r7, r3
10063ac2:	4616      	mov	r6, r2
10063ac4:	460d      	mov	r5, r1
10063ac6:	4811      	ldr	r0, [pc, #68]	@ (10063b0c <__arm_cp.37_0>)
10063ac8:	6800      	ldr	r0, [r0, #0]
10063aca:	0761      	lsls	r1, r4, #29
10063acc:	0ec9      	lsrs	r1, r1, #27
10063ace:	1840      	adds	r0, r0, r1
10063ad0:	6900      	ldr	r0, [r0, #16]
10063ad2:	2212      	movs	r2, #18
10063ad4:	2305      	movs	r3, #5
10063ad6:	4621      	mov	r1, r4
10063ad8:	f7ef fa2e 	bl	10052f38 <aci_event_fifo_push_header>
10063adc:	2800      	cmp	r0, #0
10063ade:	d012      	beq.n	10063b06 <aci_att_srv_prepare_write_req_event_push_noinline+0x4e>
10063ae0:	4601      	mov	r1, r0
10063ae2:	9808      	ldr	r0, [sp, #32]
10063ae4:	9a07      	ldr	r2, [sp, #28]
10063ae6:	9b06      	ldr	r3, [sp, #24]
10063ae8:	6148      	str	r0, [r1, #20]
10063aea:	820a      	strh	r2, [r1, #16]
10063aec:	81cb      	strh	r3, [r1, #14]
10063aee:	818f      	strh	r7, [r1, #12]
10063af0:	814e      	strh	r6, [r1, #10]
10063af2:	810d      	strh	r5, [r1, #8]
10063af4:	4806      	ldr	r0, [pc, #24]	@ (10063b10 <__arm_cp.37_1>)
10063af6:	6048      	str	r0, [r1, #4]
10063af8:	4620      	mov	r0, r4
10063afa:	f7ef faba 	bl	10053072 <aci_event_fifo_push>
10063afe:	2000      	movs	r0, #0
10063b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063b02:	2086      	movs	r0, #134	@ 0x86
10063b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063b06:	2007      	movs	r0, #7
10063b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063b0a:	46c0      	nop			@ (mov r8, r8)

10063b0c <__arm_cp.37_0>:
10063b0c:	200010a4 	.word	0x200010a4

10063b10 <__arm_cp.37_1>:
10063b10:	10063075 	.word	0x10063075

10063b14 <aci_att_srv_exec_write_req_event_push_noinline>:
10063b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063b16:	4604      	mov	r4, r0
10063b18:	06c0      	lsls	r0, r0, #27
10063b1a:	d428      	bmi.n	10063b6e <aci_att_srv_exec_write_req_event_push_noinline+0x5a>
10063b1c:	461f      	mov	r7, r3
10063b1e:	4616      	mov	r6, r2
10063b20:	460d      	mov	r5, r1
10063b22:	4815      	ldr	r0, [pc, #84]	@ (10063b78 <__arm_cp.38_0>)
10063b24:	6800      	ldr	r0, [r0, #0]
10063b26:	0761      	lsls	r1, r4, #29
10063b28:	0ec9      	lsrs	r1, r1, #27
10063b2a:	1840      	adds	r0, r0, r1
10063b2c:	6900      	ldr	r0, [r0, #16]
10063b2e:	2260      	movs	r2, #96	@ 0x60
10063b30:	2303      	movs	r3, #3
10063b32:	4621      	mov	r1, r4
10063b34:	f7ef fa00 	bl	10052f38 <aci_event_fifo_push_header>
10063b38:	2800      	cmp	r0, #0
10063b3a:	d01a      	beq.n	10063b72 <aci_att_srv_exec_write_req_event_push_noinline+0x5e>
10063b3c:	4601      	mov	r1, r0
10063b3e:	7306      	strb	r6, [r0, #12]
10063b40:	7285      	strb	r5, [r0, #10]
10063b42:	200c      	movs	r0, #12
10063b44:	7248      	strb	r0, [r1, #9]
10063b46:	201c      	movs	r0, #28
10063b48:	7208      	strb	r0, [r1, #8]
10063b4a:	463a      	mov	r2, r7
10063b4c:	2700      	movs	r7, #0
10063b4e:	71cf      	strb	r7, [r1, #7]
10063b50:	2007      	movs	r0, #7
10063b52:	7188      	strb	r0, [r1, #6]
10063b54:	738a      	strb	r2, [r1, #14]
10063b56:	20ff      	movs	r0, #255	@ 0xff
10063b58:	7148      	strb	r0, [r1, #5]
10063b5a:	2082      	movs	r0, #130	@ 0x82
10063b5c:	7108      	strb	r0, [r1, #4]
10063b5e:	0a30      	lsrs	r0, r6, #8
10063b60:	7348      	strb	r0, [r1, #13]
10063b62:	0a28      	lsrs	r0, r5, #8
10063b64:	72c8      	strb	r0, [r1, #11]
10063b66:	4620      	mov	r0, r4
10063b68:	f7ef fa83 	bl	10053072 <aci_event_fifo_push>
10063b6c:	e002      	b.n	10063b74 <aci_att_srv_exec_write_req_event_push_noinline+0x60>
10063b6e:	2786      	movs	r7, #134	@ 0x86
10063b70:	e000      	b.n	10063b74 <aci_att_srv_exec_write_req_event_push_noinline+0x60>
10063b72:	2707      	movs	r7, #7
10063b74:	4638      	mov	r0, r7
10063b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10063b78 <__arm_cp.38_0>:
10063b78:	200010a4 	.word	0x200010a4

10063b7c <aci_att_clt_read_multiple_var_len_resp_event_push_noinline>:
10063b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063b7e:	4605      	mov	r5, r0
10063b80:	06c0      	lsls	r0, r0, #27
10063b82:	d421      	bmi.n	10063bc8 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4c>
10063b84:	460e      	mov	r6, r1
10063b86:	4813      	ldr	r0, [pc, #76]	@ (10063bd4 <__arm_cp.39_0>)
10063b88:	6800      	ldr	r0, [r0, #0]
10063b8a:	2152      	movs	r1, #82	@ 0x52
10063b8c:	5c40      	ldrb	r0, [r0, r1]
10063b8e:	2400      	movs	r4, #0
10063b90:	0740      	lsls	r0, r0, #29
10063b92:	d51a      	bpl.n	10063bca <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
10063b94:	4617      	mov	r7, r2
10063b96:	9300      	str	r3, [sp, #0]
10063b98:	480f      	ldr	r0, [pc, #60]	@ (10063bd8 <__arm_cp.39_1>)
10063b9a:	6800      	ldr	r0, [r0, #0]
10063b9c:	0769      	lsls	r1, r5, #29
10063b9e:	0ec9      	lsrs	r1, r1, #27
10063ba0:	1840      	adds	r0, r0, r1
10063ba2:	6900      	ldr	r0, [r0, #16]
10063ba4:	2213      	movs	r2, #19
10063ba6:	2303      	movs	r3, #3
10063ba8:	4629      	mov	r1, r5
10063baa:	f7ef f9c5 	bl	10052f38 <aci_event_fifo_push_header>
10063bae:	2800      	cmp	r0, #0
10063bb0:	d00d      	beq.n	10063bce <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x52>
10063bb2:	4601      	mov	r1, r0
10063bb4:	9800      	ldr	r0, [sp, #0]
10063bb6:	60c8      	str	r0, [r1, #12]
10063bb8:	814f      	strh	r7, [r1, #10]
10063bba:	810e      	strh	r6, [r1, #8]
10063bbc:	4807      	ldr	r0, [pc, #28]	@ (10063bdc <__arm_cp.39_2>)
10063bbe:	6048      	str	r0, [r1, #4]
10063bc0:	4628      	mov	r0, r5
10063bc2:	f7ef fa56 	bl	10053072 <aci_event_fifo_push>
10063bc6:	e000      	b.n	10063bca <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
10063bc8:	2486      	movs	r4, #134	@ 0x86
10063bca:	4620      	mov	r0, r4
10063bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063bce:	2407      	movs	r4, #7
10063bd0:	e7fb      	b.n	10063bca <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
10063bd2:	46c0      	nop			@ (mov r8, r8)

10063bd4 <__arm_cp.39_0>:
10063bd4:	200010f4 	.word	0x200010f4

10063bd8 <__arm_cp.39_1>:
10063bd8:	200010a4 	.word	0x200010a4

10063bdc <__arm_cp.39_2>:
10063bdc:	100630d1 	.word	0x100630d1

10063be0 <hci_number_of_completed_packets_event_cb>:
10063be0:	b51c      	push	{r2, r3, r4, lr}
10063be2:	8889      	ldrh	r1, [r1, #4]
10063be4:	466c      	mov	r4, sp
10063be6:	1ce0      	adds	r0, r4, #3
10063be8:	f7ef fcd8 	bl	1005359c <hci_number_of_completed_packets_event_copy>
10063bec:	2005      	movs	r0, #5
10063bee:	70a0      	strb	r0, [r4, #2]
10063bf0:	2013      	movs	r0, #19
10063bf2:	7060      	strb	r0, [r4, #1]
10063bf4:	2004      	movs	r0, #4
10063bf6:	7020      	strb	r0, [r4, #0]
10063bf8:	2108      	movs	r1, #8
10063bfa:	4620      	mov	r0, r4
10063bfc:	f7ed fc46 	bl	1005148c <BLE_STACK_Event>
10063c00:	bd1c      	pop	{r2, r3, r4, pc}
	...

10063c04 <hci_number_of_completed_packets_event_push_noinline>:
10063c04:	b5b0      	push	{r4, r5, r7, lr}
10063c06:	4604      	mov	r4, r0
10063c08:	06c0      	lsls	r0, r0, #27
10063c0a:	d416      	bmi.n	10063c3a <hci_number_of_completed_packets_event_push_noinline+0x36>
10063c0c:	460d      	mov	r5, r1
10063c0e:	480d      	ldr	r0, [pc, #52]	@ (10063c44 <__arm_cp.22_0>)
10063c10:	6800      	ldr	r0, [r0, #0]
10063c12:	0761      	lsls	r1, r4, #29
10063c14:	0ec9      	lsrs	r1, r1, #27
10063c16:	1840      	adds	r0, r0, r1
10063c18:	6900      	ldr	r0, [r0, #16]
10063c1a:	2202      	movs	r2, #2
10063c1c:	4621      	mov	r1, r4
10063c1e:	4613      	mov	r3, r2
10063c20:	f7ef f98a 	bl	10052f38 <aci_event_fifo_push_header>
10063c24:	2800      	cmp	r0, #0
10063c26:	d00a      	beq.n	10063c3e <hci_number_of_completed_packets_event_push_noinline+0x3a>
10063c28:	4601      	mov	r1, r0
10063c2a:	4807      	ldr	r0, [pc, #28]	@ (10063c48 <__arm_cp.22_1>)
10063c2c:	6048      	str	r0, [r1, #4]
10063c2e:	810d      	strh	r5, [r1, #8]
10063c30:	4620      	mov	r0, r4
10063c32:	f7ef fa1e 	bl	10053072 <aci_event_fifo_push>
10063c36:	2000      	movs	r0, #0
10063c38:	bdb0      	pop	{r4, r5, r7, pc}
10063c3a:	2086      	movs	r0, #134	@ 0x86
10063c3c:	bdb0      	pop	{r4, r5, r7, pc}
10063c3e:	2007      	movs	r0, #7
10063c40:	bdb0      	pop	{r4, r5, r7, pc}
10063c42:	46c0      	nop			@ (mov r8, r8)

10063c44 <__arm_cp.22_0>:
10063c44:	200010a4 	.word	0x200010a4

10063c48 <__arm_cp.22_1>:
10063c48:	10063be1 	.word	0x10063be1

10063c4c <hci_le_read_remote_features_complete_event_push_noinline>:
10063c4c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10063c4e:	4605      	mov	r5, r0
10063c50:	06c0      	lsls	r0, r0, #27
10063c52:	d433      	bmi.n	10063cbc <hci_le_read_remote_features_complete_event_push_noinline+0x70>
10063c54:	4617      	mov	r7, r2
10063c56:	481c      	ldr	r0, [pc, #112]	@ (10063cc8 <__arm_cp.26_0>)
10063c58:	6800      	ldr	r0, [r0, #0]
10063c5a:	223d      	movs	r2, #61	@ 0x3d
10063c5c:	5c82      	ldrb	r2, [r0, r2]
10063c5e:	2400      	movs	r4, #0
10063c60:	0692      	lsls	r2, r2, #26
10063c62:	d52c      	bpl.n	10063cbe <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10063c64:	303d      	adds	r0, #61	@ 0x3d
10063c66:	7a40      	ldrb	r0, [r0, #9]
10063c68:	0700      	lsls	r0, r0, #28
10063c6a:	d528      	bpl.n	10063cbe <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10063c6c:	9101      	str	r1, [sp, #4]
10063c6e:	9302      	str	r3, [sp, #8]
10063c70:	4816      	ldr	r0, [pc, #88]	@ (10063ccc <__arm_cp.26_1>)
10063c72:	6800      	ldr	r0, [r0, #0]
10063c74:	0769      	lsls	r1, r5, #29
10063c76:	0ec9      	lsrs	r1, r1, #27
10063c78:	1840      	adds	r0, r0, r1
10063c7a:	6900      	ldr	r0, [r0, #16]
10063c7c:	2225      	movs	r2, #37	@ 0x25
10063c7e:	2304      	movs	r3, #4
10063c80:	4629      	mov	r1, r5
10063c82:	9300      	str	r3, [sp, #0]
10063c84:	f7ef f958 	bl	10052f38 <aci_event_fifo_push_header>
10063c88:	2800      	cmp	r0, #0
10063c8a:	d01a      	beq.n	10063cc2 <hci_le_read_remote_features_complete_event_push_noinline+0x76>
10063c8c:	4606      	mov	r6, r0
10063c8e:	7247      	strb	r7, [r0, #9]
10063c90:	9801      	ldr	r0, [sp, #4]
10063c92:	7230      	strb	r0, [r6, #8]
10063c94:	0a38      	lsrs	r0, r7, #8
10063c96:	72b0      	strb	r0, [r6, #10]
10063c98:	4630      	mov	r0, r6
10063c9a:	300b      	adds	r0, #11
10063c9c:	2208      	movs	r2, #8
10063c9e:	9902      	ldr	r1, [sp, #8]
10063ca0:	f7e2 f9d8 	bl	10046054 <BLEPLAT_MemCpy>
10063ca4:	9900      	ldr	r1, [sp, #0]
10063ca6:	71f1      	strb	r1, [r6, #7]
10063ca8:	200c      	movs	r0, #12
10063caa:	71b0      	strb	r0, [r6, #6]
10063cac:	203e      	movs	r0, #62	@ 0x3e
10063cae:	7170      	strb	r0, [r6, #5]
10063cb0:	7131      	strb	r1, [r6, #4]
10063cb2:	4628      	mov	r0, r5
10063cb4:	4631      	mov	r1, r6
10063cb6:	f7ef f9dc 	bl	10053072 <aci_event_fifo_push>
10063cba:	e000      	b.n	10063cbe <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10063cbc:	2486      	movs	r4, #134	@ 0x86
10063cbe:	4620      	mov	r0, r4
10063cc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10063cc2:	2407      	movs	r4, #7
10063cc4:	e7fb      	b.n	10063cbe <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10063cc6:	46c0      	nop			@ (mov r8, r8)

10063cc8 <__arm_cp.26_0>:
10063cc8:	200010f4 	.word	0x200010f4

10063ccc <__arm_cp.26_1>:
10063ccc:	200010a4 	.word	0x200010a4

10063cd0 <aci_l2cap_proc_timeout_event_cb>:
10063cd0:	b510      	push	{r4, lr}
10063cd2:	b0ff      	sub	sp, #508	@ 0x1fc
10063cd4:	b083      	sub	sp, #12
10063cd6:	8889      	ldrh	r1, [r1, #4]
10063cd8:	466c      	mov	r4, sp
10063cda:	1da0      	adds	r0, r4, #6
10063cdc:	f7ef feaa 	bl	10053a34 <aci_l2cap_proc_timeout_event_copy>
10063ce0:	7a21      	ldrb	r1, [r4, #8]
10063ce2:	1d48      	adds	r0, r1, #5
10063ce4:	70a0      	strb	r0, [r4, #2]
10063ce6:	0a00      	lsrs	r0, r0, #8
10063ce8:	70e0      	strb	r0, [r4, #3]
10063cea:	2001      	movs	r0, #1
10063cec:	7120      	strb	r0, [r4, #4]
10063cee:	20ff      	movs	r0, #255	@ 0xff
10063cf0:	7060      	strb	r0, [r4, #1]
10063cf2:	2082      	movs	r0, #130	@ 0x82
10063cf4:	7020      	strb	r0, [r4, #0]
10063cf6:	2008      	movs	r0, #8
10063cf8:	7160      	strb	r0, [r4, #5]
10063cfa:	3109      	adds	r1, #9
10063cfc:	4620      	mov	r0, r4
10063cfe:	f7ed fbc5 	bl	1005148c <BLE_STACK_Event>
10063d02:	b07f      	add	sp, #508	@ 0x1fc
10063d04:	b003      	add	sp, #12
10063d06:	bd10      	pop	{r4, pc}

10063d08 <aci_hal_fw_error_event_push_noinline>:
10063d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063d0a:	4604      	mov	r4, r0
10063d0c:	06c0      	lsls	r0, r0, #27
10063d0e:	d42d      	bmi.n	10063d6c <aci_hal_fw_error_event_push_noinline+0x64>
10063d10:	4615      	mov	r5, r2
10063d12:	460f      	mov	r7, r1
10063d14:	9300      	str	r3, [sp, #0]
10063d16:	4818      	ldr	r0, [pc, #96]	@ (10063d78 <__arm_cp.0_0>)
10063d18:	6800      	ldr	r0, [r0, #0]
10063d1a:	0761      	lsls	r1, r4, #29
10063d1c:	0ec9      	lsrs	r1, r1, #27
10063d1e:	1840      	adds	r0, r0, r1
10063d20:	6900      	ldr	r0, [r0, #16]
10063d22:	1e51      	subs	r1, r2, #1
10063d24:	2203      	movs	r2, #3
10063d26:	430a      	orrs	r2, r1
10063d28:	3209      	adds	r2, #9
10063d2a:	0891      	lsrs	r1, r2, #2
10063d2c:	b28b      	uxth	r3, r1
10063d2e:	2240      	movs	r2, #64	@ 0x40
10063d30:	4621      	mov	r1, r4
10063d32:	f7ef f901 	bl	10052f38 <aci_event_fifo_push_header>
10063d36:	2800      	cmp	r0, #0
10063d38:	d01a      	beq.n	10063d70 <aci_hal_fw_error_event_push_noinline+0x68>
10063d3a:	4606      	mov	r6, r0
10063d3c:	72c5      	strb	r5, [r0, #11]
10063d3e:	7287      	strb	r7, [r0, #10]
10063d40:	300c      	adds	r0, #12
10063d42:	9900      	ldr	r1, [sp, #0]
10063d44:	462a      	mov	r2, r5
10063d46:	f7e2 f985 	bl	10046054 <BLEPLAT_MemCpy>
10063d4a:	2700      	movs	r7, #0
10063d4c:	7277      	strb	r7, [r6, #9]
10063d4e:	2006      	movs	r0, #6
10063d50:	7230      	strb	r0, [r6, #8]
10063d52:	1d28      	adds	r0, r5, #4
10063d54:	0a01      	lsrs	r1, r0, #8
10063d56:	71f1      	strb	r1, [r6, #7]
10063d58:	71b0      	strb	r0, [r6, #6]
10063d5a:	20ff      	movs	r0, #255	@ 0xff
10063d5c:	7170      	strb	r0, [r6, #5]
10063d5e:	2082      	movs	r0, #130	@ 0x82
10063d60:	7130      	strb	r0, [r6, #4]
10063d62:	4620      	mov	r0, r4
10063d64:	4631      	mov	r1, r6
10063d66:	f7ef f984 	bl	10053072 <aci_event_fifo_push>
10063d6a:	e002      	b.n	10063d72 <aci_hal_fw_error_event_push_noinline+0x6a>
10063d6c:	2786      	movs	r7, #134	@ 0x86
10063d6e:	e000      	b.n	10063d72 <aci_hal_fw_error_event_push_noinline+0x6a>
10063d70:	2707      	movs	r7, #7
10063d72:	4638      	mov	r0, r7
10063d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063d76:	46c0      	nop			@ (mov r8, r8)

10063d78 <__arm_cp.0_0>:
10063d78:	200010a4 	.word	0x200010a4

10063d7c <aci_hal_adv_scan_resp_data_update_event_push_noinline>:
10063d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063d7e:	4604      	mov	r4, r0
10063d80:	06c0      	lsls	r0, r0, #27
10063d82:	d42d      	bmi.n	10063de0 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x64>
10063d84:	4616      	mov	r6, r2
10063d86:	460d      	mov	r5, r1
10063d88:	4818      	ldr	r0, [pc, #96]	@ (10063dec <__arm_cp.1_0>)
10063d8a:	6800      	ldr	r0, [r0, #0]
10063d8c:	0761      	lsls	r1, r4, #29
10063d8e:	0ec9      	lsrs	r1, r1, #27
10063d90:	1840      	adds	r0, r0, r1
10063d92:	6900      	ldr	r0, [r0, #16]
10063d94:	2241      	movs	r2, #65	@ 0x41
10063d96:	2304      	movs	r3, #4
10063d98:	4621      	mov	r1, r4
10063d9a:	f7ef f8cd 	bl	10052f38 <aci_event_fifo_push_header>
10063d9e:	2800      	cmp	r0, #0
10063da0:	d020      	beq.n	10063de4 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x68>
10063da2:	4601      	mov	r1, r0
10063da4:	300a      	adds	r0, #10
10063da6:	7106      	strb	r6, [r0, #4]
10063da8:	7005      	strb	r5, [r0, #0]
10063daa:	2700      	movs	r7, #0
10063dac:	724f      	strb	r7, [r1, #9]
10063dae:	2210      	movs	r2, #16
10063db0:	720a      	strb	r2, [r1, #8]
10063db2:	71cf      	strb	r7, [r1, #7]
10063db4:	220a      	movs	r2, #10
10063db6:	718a      	strb	r2, [r1, #6]
10063db8:	22ff      	movs	r2, #255	@ 0xff
10063dba:	714a      	strb	r2, [r1, #5]
10063dbc:	2282      	movs	r2, #130	@ 0x82
10063dbe:	710a      	strb	r2, [r1, #4]
10063dc0:	0e32      	lsrs	r2, r6, #24
10063dc2:	71c2      	strb	r2, [r0, #7]
10063dc4:	0c32      	lsrs	r2, r6, #16
10063dc6:	7182      	strb	r2, [r0, #6]
10063dc8:	0a32      	lsrs	r2, r6, #8
10063dca:	7142      	strb	r2, [r0, #5]
10063dcc:	0e2a      	lsrs	r2, r5, #24
10063dce:	70c2      	strb	r2, [r0, #3]
10063dd0:	0c2a      	lsrs	r2, r5, #16
10063dd2:	7082      	strb	r2, [r0, #2]
10063dd4:	0a2a      	lsrs	r2, r5, #8
10063dd6:	7042      	strb	r2, [r0, #1]
10063dd8:	4620      	mov	r0, r4
10063dda:	f7ef f94a 	bl	10053072 <aci_event_fifo_push>
10063dde:	e002      	b.n	10063de6 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
10063de0:	2786      	movs	r7, #134	@ 0x86
10063de2:	e000      	b.n	10063de6 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
10063de4:	2707      	movs	r7, #7
10063de6:	4638      	mov	r0, r7
10063de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063dea:	46c0      	nop			@ (mov r8, r8)

10063dec <__arm_cp.1_0>:
10063dec:	200010a4 	.word	0x200010a4

10063df0 <aci_gap_pairing_complete_event_push_noinline>:
10063df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063df2:	4604      	mov	r4, r0
10063df4:	06c0      	lsls	r0, r0, #27
10063df6:	d408      	bmi.n	10063e0a <aci_gap_pairing_complete_event_push_noinline+0x1a>
10063df8:	460d      	mov	r5, r1
10063dfa:	4819      	ldr	r0, [pc, #100]	@ (10063e60 <__arm_cp.1_0>)
10063dfc:	6800      	ldr	r0, [r0, #0]
10063dfe:	214e      	movs	r1, #78	@ 0x4e
10063e00:	5c40      	ldrb	r0, [r0, r1]
10063e02:	0780      	lsls	r0, r0, #30
10063e04:	d403      	bmi.n	10063e0e <aci_gap_pairing_complete_event_push_noinline+0x1e>
10063e06:	2600      	movs	r6, #0
10063e08:	e028      	b.n	10063e5c <aci_gap_pairing_complete_event_push_noinline+0x6c>
10063e0a:	2686      	movs	r6, #134	@ 0x86
10063e0c:	e026      	b.n	10063e5c <aci_gap_pairing_complete_event_push_noinline+0x6c>
10063e0e:	461f      	mov	r7, r3
10063e10:	4616      	mov	r6, r2
10063e12:	4814      	ldr	r0, [pc, #80]	@ (10063e64 <__arm_cp.1_1>)
10063e14:	6800      	ldr	r0, [r0, #0]
10063e16:	0761      	lsls	r1, r4, #29
10063e18:	0ec9      	lsrs	r1, r1, #27
10063e1a:	1840      	adds	r0, r0, r1
10063e1c:	6900      	ldr	r0, [r0, #16]
10063e1e:	2245      	movs	r2, #69	@ 0x45
10063e20:	2303      	movs	r3, #3
10063e22:	4621      	mov	r1, r4
10063e24:	f7ef f888 	bl	10052f38 <aci_event_fifo_push_header>
10063e28:	2800      	cmp	r0, #0
10063e2a:	d016      	beq.n	10063e5a <aci_gap_pairing_complete_event_push_noinline+0x6a>
10063e2c:	4601      	mov	r1, r0
10063e2e:	7285      	strb	r5, [r0, #10]
10063e30:	2004      	movs	r0, #4
10063e32:	7248      	strb	r0, [r1, #9]
10063e34:	2001      	movs	r0, #1
10063e36:	7208      	strb	r0, [r1, #8]
10063e38:	4632      	mov	r2, r6
10063e3a:	2600      	movs	r6, #0
10063e3c:	71ce      	strb	r6, [r1, #7]
10063e3e:	2006      	movs	r0, #6
10063e40:	7188      	strb	r0, [r1, #6]
10063e42:	734f      	strb	r7, [r1, #13]
10063e44:	730a      	strb	r2, [r1, #12]
10063e46:	20ff      	movs	r0, #255	@ 0xff
10063e48:	7148      	strb	r0, [r1, #5]
10063e4a:	2082      	movs	r0, #130	@ 0x82
10063e4c:	7108      	strb	r0, [r1, #4]
10063e4e:	0a28      	lsrs	r0, r5, #8
10063e50:	72c8      	strb	r0, [r1, #11]
10063e52:	4620      	mov	r0, r4
10063e54:	f7ef f90d 	bl	10053072 <aci_event_fifo_push>
10063e58:	e000      	b.n	10063e5c <aci_gap_pairing_complete_event_push_noinline+0x6c>
10063e5a:	2607      	movs	r6, #7
10063e5c:	4630      	mov	r0, r6
10063e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10063e60 <__arm_cp.1_0>:
10063e60:	200010f4 	.word	0x200010f4

10063e64 <__arm_cp.1_1>:
10063e64:	200010a4 	.word	0x200010a4

10063e68 <GAT_att_clt_init>:
10063e68:	b580      	push	{r7, lr}
10063e6a:	f000 fd35 	bl	100648d8 <GAT_clt_init>
10063e6e:	bd80      	pop	{r7, pc}

10063e70 <GAT_att_clt_rcv>:
10063e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063e72:	4604      	mov	r4, r0
10063e74:	8805      	ldrh	r5, [r0, #0]
10063e76:	f7f3 fd54 	bl	10057922 <L2C_get_cid_from_basic_packet_header>
10063e7a:	4601      	mov	r1, r0
10063e7c:	4628      	mov	r0, r5
10063e7e:	f7f0 fd13 	bl	100548a8 <GAT_att_cmn_get_channel_descr_p>
10063e82:	4605      	mov	r5, r0
10063e84:	4620      	mov	r0, r4
10063e86:	f000 f8d7 	bl	10064038 <GAT_att_cmn_get_opcode>
10063e8a:	281d      	cmp	r0, #29
10063e8c:	d003      	beq.n	10063e96 <GAT_att_clt_rcv+0x26>
10063e8e:	2823      	cmp	r0, #35	@ 0x23
10063e90:	d001      	beq.n	10063e96 <GAT_att_clt_rcv+0x26>
10063e92:	281b      	cmp	r0, #27
10063e94:	d10e      	bne.n	10063eb4 <GAT_att_clt_rcv+0x44>
10063e96:	8861      	ldrh	r1, [r4, #2]
10063e98:	88ea      	ldrh	r2, [r5, #6]
10063e9a:	4291      	cmp	r1, r2
10063e9c:	d805      	bhi.n	10063eaa <GAT_att_clt_rcv+0x3a>
10063e9e:	2903      	cmp	r1, #3
10063ea0:	d303      	bcc.n	10063eaa <GAT_att_clt_rcv+0x3a>
10063ea2:	2823      	cmp	r0, #35	@ 0x23
10063ea4:	d167      	bne.n	10063f76 <GAT_att_clt_rcv+0x106>
10063ea6:	2904      	cmp	r1, #4
10063ea8:	d865      	bhi.n	10063f76 <GAT_att_clt_rcv+0x106>
10063eaa:	4620      	mov	r0, r4
10063eac:	f7ee fe82 	bl	10052bb4 <ACL_pkt_release>
10063eb0:	2000      	movs	r0, #0
10063eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063eb4:	4620      	mov	r0, r4
10063eb6:	f000 f8bf 	bl	10064038 <GAT_att_cmn_get_opcode>
10063eba:	88a9      	ldrh	r1, [r5, #4]
10063ebc:	06ca      	lsls	r2, r1, #27
10063ebe:	d56e      	bpl.n	10063f9e <GAT_att_clt_rcv+0x12e>
10063ec0:	2801      	cmp	r0, #1
10063ec2:	d002      	beq.n	10063eca <GAT_att_clt_rcv+0x5a>
10063ec4:	78aa      	ldrb	r2, [r5, #2]
10063ec6:	4290      	cmp	r0, r2
10063ec8:	d169      	bne.n	10063f9e <GAT_att_clt_rcv+0x12e>
10063eca:	2010      	movs	r0, #16
10063ecc:	4381      	bics	r1, r0
10063ece:	80a9      	strh	r1, [r5, #4]
10063ed0:	896a      	ldrh	r2, [r5, #10]
10063ed2:	8929      	ldrh	r1, [r5, #8]
10063ed4:	2603      	movs	r6, #3
10063ed6:	4630      	mov	r0, r6
10063ed8:	f7f0 fd58 	bl	1005498c <GAT_att_cmn_stop_timer>
10063edc:	8861      	ldrh	r1, [r4, #2]
10063ede:	88e8      	ldrh	r0, [r5, #6]
10063ee0:	9100      	str	r1, [sp, #0]
10063ee2:	4281      	cmp	r1, r0
10063ee4:	d900      	bls.n	10063ee8 <GAT_att_clt_rcv+0x78>
10063ee6:	e09a      	b.n	1006401e <GAT_att_clt_rcv+0x1ae>
10063ee8:	4620      	mov	r0, r4
10063eea:	f000 f8a5 	bl	10064038 <GAT_att_cmn_get_opcode>
10063eee:	1e42      	subs	r2, r0, #1
10063ef0:	2101      	movs	r1, #1
10063ef2:	41ca      	rors	r2, r1
10063ef4:	2300      	movs	r3, #0
10063ef6:	2a10      	cmp	r2, #16
10063ef8:	d900      	bls.n	10063efc <GAT_att_clt_rcv+0x8c>
10063efa:	e088      	b.n	1006400e <GAT_att_clt_rcv+0x19e>
10063efc:	0092      	lsls	r2, r2, #2
10063efe:	461f      	mov	r7, r3
10063f00:	a301      	add	r3, pc, #4	@ (adr r3, 10063f08 <GAT_att_clt_rcv+0x98>)
10063f02:	589a      	ldr	r2, [r3, r2]
10063f04:	463b      	mov	r3, r7
10063f06:	4697      	mov	pc, r2
10063f08:	10063fbf 	.word	0x10063fbf
10063f0c:	10063fc3 	.word	0x10063fc3
10063f10:	10063fcf 	.word	0x10063fcf
10063f14:	10063fed 	.word	0x10063fed
10063f18:	10063f4d 	.word	0x10063f4d
10063f1c:	10064015 	.word	0x10064015
10063f20:	10064015 	.word	0x10064015
10063f24:	10064015 	.word	0x10064015
10063f28:	10063f4d 	.word	0x10063f4d
10063f2c:	10063fbb 	.word	0x10063fbb
10063f30:	1006400f 	.word	0x1006400f
10063f34:	10063fc7 	.word	0x10063fc7
10063f38:	10063fbb 	.word	0x10063fbb
10063f3c:	1006400f 	.word	0x1006400f
10063f40:	1006400f 	.word	0x1006400f
10063f44:	1006400f 	.word	0x1006400f
10063f48:	10064015 	.word	0x10064015
10063f4c:	2809      	cmp	r0, #9
10063f4e:	d102      	bne.n	10063f56 <GAT_att_clt_rcv+0xe6>
10063f50:	9900      	ldr	r1, [sp, #0]
10063f52:	2904      	cmp	r1, #4
10063f54:	d35b      	bcc.n	1006400e <GAT_att_clt_rcv+0x19e>
10063f56:	2811      	cmp	r0, #17
10063f58:	d102      	bne.n	10063f60 <GAT_att_clt_rcv+0xf0>
10063f5a:	9800      	ldr	r0, [sp, #0]
10063f5c:	2806      	cmp	r0, #6
10063f5e:	d356      	bcc.n	1006400e <GAT_att_clt_rcv+0x19e>
10063f60:	89a0      	ldrh	r0, [r4, #12]
10063f62:	1c40      	adds	r0, r0, #1
10063f64:	b281      	uxth	r1, r0
10063f66:	4620      	mov	r0, r4
10063f68:	f000 fa47 	bl	100643fa <ACL_pkt_read_8b>
10063f6c:	463b      	mov	r3, r7
10063f6e:	2800      	cmp	r0, #0
10063f70:	d04d      	beq.n	1006400e <GAT_att_clt_rcv+0x19e>
10063f72:	4601      	mov	r1, r0
10063f74:	e043      	b.n	10063ffe <GAT_att_clt_rcv+0x18e>
10063f76:	281d      	cmp	r0, #29
10063f78:	d10d      	bne.n	10063f96 <GAT_att_clt_rcv+0x126>
10063f7a:	88a8      	ldrh	r0, [r5, #4]
10063f7c:	0680      	lsls	r0, r0, #26
10063f7e:	d412      	bmi.n	10063fa6 <GAT_att_clt_rcv+0x136>
10063f80:	896a      	ldrh	r2, [r5, #10]
10063f82:	8929      	ldrh	r1, [r5, #8]
10063f84:	2002      	movs	r0, #2
10063f86:	f7f0 fd4b 	bl	10054a20 <GAT_att_cmn_start_timer>
10063f8a:	2800      	cmp	r0, #0
10063f8c:	d14c      	bne.n	10064028 <GAT_att_clt_rcv+0x1b8>
10063f8e:	88a8      	ldrh	r0, [r5, #4]
10063f90:	2120      	movs	r1, #32
10063f92:	4301      	orrs	r1, r0
10063f94:	80a9      	strh	r1, [r5, #4]
10063f96:	4620      	mov	r0, r4
10063f98:	f001 f940 	bl	1006521c <GAT_clt_rcv_srv_initiated>
10063f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063f9e:	4620      	mov	r0, r4
10063fa0:	f000 fab7 	bl	10064512 <GAT_att_clt_unexpect_rx>
10063fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063fa6:	3508      	adds	r5, #8
10063fa8:	2042      	movs	r0, #66	@ 0x42
10063faa:	2103      	movs	r1, #3
10063fac:	2202      	movs	r2, #2
10063fae:	462b      	mov	r3, r5
10063fb0:	f7ff feaa 	bl	10063d08 <aci_hal_fw_error_event_push_noinline>
10063fb4:	2800      	cmp	r0, #0
10063fb6:	d137      	bne.n	10064028 <GAT_att_clt_rcv+0x1b8>
10063fb8:	e777      	b.n	10063eaa <GAT_att_clt_rcv+0x3a>
10063fba:	460b      	mov	r3, r1
10063fbc:	e027      	b.n	1006400e <GAT_att_clt_rcv+0x19e>
10063fbe:	2305      	movs	r3, #5
10063fc0:	e025      	b.n	1006400e <GAT_att_clt_rcv+0x19e>
10063fc2:	4633      	mov	r3, r6
10063fc4:	e023      	b.n	1006400e <GAT_att_clt_rcv+0x19e>
10063fc6:	9b00      	ldr	r3, [sp, #0]
10063fc8:	2b04      	cmp	r3, #4
10063fca:	d91f      	bls.n	1006400c <GAT_att_clt_rcv+0x19c>
10063fcc:	e01f      	b.n	1006400e <GAT_att_clt_rcv+0x19e>
10063fce:	9800      	ldr	r0, [sp, #0]
10063fd0:	2806      	cmp	r0, #6
10063fd2:	d31c      	bcc.n	1006400e <GAT_att_clt_rcv+0x19e>
10063fd4:	89a0      	ldrh	r0, [r4, #12]
10063fd6:	1c40      	adds	r0, r0, #1
10063fd8:	b281      	uxth	r1, r0
10063fda:	4620      	mov	r0, r4
10063fdc:	f000 fa0d 	bl	100643fa <ACL_pkt_read_8b>
10063fe0:	2801      	cmp	r0, #1
10063fe2:	d00b      	beq.n	10063ffc <GAT_att_clt_rcv+0x18c>
10063fe4:	2802      	cmp	r0, #2
10063fe6:	d11a      	bne.n	1006401e <GAT_att_clt_rcv+0x1ae>
10063fe8:	2112      	movs	r1, #18
10063fea:	e008      	b.n	10063ffe <GAT_att_clt_rcv+0x18e>
10063fec:	9800      	ldr	r0, [sp, #0]
10063fee:	2802      	cmp	r0, #2
10063ff0:	d30d      	bcc.n	1006400e <GAT_att_clt_rcv+0x19e>
10063ff2:	9b00      	ldr	r3, [sp, #0]
10063ff4:	1e58      	subs	r0, r3, #1
10063ff6:	0780      	lsls	r0, r0, #30
10063ff8:	d108      	bne.n	1006400c <GAT_att_clt_rcv+0x19c>
10063ffa:	e008      	b.n	1006400e <GAT_att_clt_rcv+0x19e>
10063ffc:	2104      	movs	r1, #4
10063ffe:	9e00      	ldr	r6, [sp, #0]
10064000:	1eb0      	subs	r0, r6, #2
10064002:	f7dd f9a7 	bl	10041354 <__aeabi_uidivmod>
10064006:	2900      	cmp	r1, #0
10064008:	4633      	mov	r3, r6
1006400a:	d000      	beq.n	1006400e <GAT_att_clt_rcv+0x19e>
1006400c:	2300      	movs	r3, #0
1006400e:	9800      	ldr	r0, [sp, #0]
10064010:	4298      	cmp	r0, r3
10064012:	d104      	bne.n	1006401e <GAT_att_clt_rcv+0x1ae>
10064014:	4807      	ldr	r0, [pc, #28]	@ (10064034 <__arm_cp.1_0>)
10064016:	6801      	ldr	r1, [r0, #0]
10064018:	4620      	mov	r0, r4
1006401a:	4788      	blx	r1
1006401c:	e002      	b.n	10064024 <GAT_att_clt_rcv+0x1b4>
1006401e:	4620      	mov	r0, r4
10064020:	f000 ff5e 	bl	10064ee0 <GAT_clt_rcv_corrupted>
10064024:	2884      	cmp	r0, #132	@ 0x84
10064026:	d101      	bne.n	1006402c <GAT_att_clt_rcv+0x1bc>
10064028:	2084      	movs	r0, #132	@ 0x84
1006402a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006402c:	2000      	movs	r0, #0
1006402e:	70a8      	strb	r0, [r5, #2]
10064030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064032:	46c0      	nop			@ (mov r8, r8)

10064034 <__arm_cp.1_0>:
10064034:	200014dc 	.word	0x200014dc

10064038 <GAT_att_cmn_get_opcode>:
10064038:	b580      	push	{r7, lr}
1006403a:	8981      	ldrh	r1, [r0, #12]
1006403c:	f000 f9dd 	bl	100643fa <ACL_pkt_read_8b>
10064040:	bd80      	pop	{r7, pc}

10064042 <GAT_att_clt_connection>:
10064042:	b580      	push	{r7, lr}
10064044:	f000 fc70 	bl	10064928 <GAT_clt_connection>
10064048:	bd80      	pop	{r7, pc}

1006404a <GAT_att_clt_bearer_close>:
1006404a:	b580      	push	{r7, lr}
1006404c:	f000 fc6e 	bl	1006492c <GAT_clt_bearer_close>
10064050:	bd80      	pop	{r7, pc}
	...

10064054 <GAT_att_clt_tx>:
10064054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064056:	4605      	mov	r5, r0
10064058:	8881      	ldrh	r1, [r0, #4]
1006405a:	8840      	ldrh	r0, [r0, #2]
1006405c:	f7f0 fc24 	bl	100548a8 <GAT_att_cmn_get_channel_descr_p>
10064060:	2800      	cmp	r0, #0
10064062:	d008      	beq.n	10064076 <GAT_att_clt_tx+0x22>
10064064:	4604      	mov	r4, r0
10064066:	7829      	ldrb	r1, [r5, #0]
10064068:	291e      	cmp	r1, #30
1006406a:	d106      	bne.n	1006407a <GAT_att_clt_tx+0x26>
1006406c:	88a0      	ldrh	r0, [r4, #4]
1006406e:	0680      	lsls	r0, r0, #26
10064070:	d439      	bmi.n	100640e6 <GAT_att_clt_tx+0x92>
10064072:	260c      	movs	r6, #12
10064074:	e193      	b.n	1006439e <GAT_att_clt_tx+0x34a>
10064076:	2612      	movs	r6, #18
10064078:	e191      	b.n	1006439e <GAT_att_clt_tx+0x34a>
1006407a:	0648      	lsls	r0, r1, #25
1006407c:	d406      	bmi.n	1006408c <GAT_att_clt_tx+0x38>
1006407e:	48ca      	ldr	r0, [pc, #808]	@ (100643a8 <__arm_cp.5_0>)
10064080:	4aca      	ldr	r2, [pc, #808]	@ (100643ac <__arm_cp.5_1>)
10064082:	6002      	str	r2, [r0, #0]
10064084:	88a0      	ldrh	r0, [r4, #4]
10064086:	06c0      	lsls	r0, r0, #27
10064088:	d500      	bpl.n	1006408c <GAT_att_clt_tx+0x38>
1006408a:	e16d      	b.n	10064368 <GAT_att_clt_tx+0x314>
1006408c:	88e0      	ldrh	r0, [r4, #6]
1006408e:	1e8a      	subs	r2, r1, #2
10064090:	2686      	movs	r6, #134	@ 0x86
10064092:	2a1e      	cmp	r2, #30
10064094:	d900      	bls.n	10064098 <GAT_att_clt_tx+0x44>
10064096:	e091      	b.n	100641bc <GAT_att_clt_tx+0x168>
10064098:	2703      	movs	r7, #3
1006409a:	0052      	lsls	r2, r2, #1
1006409c:	447a      	add	r2, pc
1006409e:	8892      	ldrh	r2, [r2, #4]
100640a0:	0052      	lsls	r2, r2, #1
100640a2:	4497      	add	pc, r2
100640a4:	017c0022 	.word	0x017c0022
100640a8:	017c001e 	.word	0x017c001e
100640ac:	017c009f 	.word	0x017c009f
100640b0:	017c00a2 	.word	0x017c00a2
100640b4:	017c0022 	.word	0x017c0022
100640b8:	017c001e 	.word	0x017c001e
100640bc:	017c0094 	.word	0x017c0094
100640c0:	017c012d 	.word	0x017c012d
100640c4:	017c0090 	.word	0x017c0090
100640c8:	017c017c 	.word	0x017c017c
100640cc:	017c00a9 	.word	0x017c00a9
100640d0:	017c00ac 	.word	0x017c00ac
100640d4:	017c017c 	.word	0x017c017c
100640d8:	017c017c 	.word	0x017c017c
100640dc:	017c0021 	.word	0x017c0021
100640e0:	0094      	.short	0x0094
100640e2:	2705      	movs	r7, #5
100640e4:	e001      	b.n	100640ea <GAT_att_clt_tx+0x96>
100640e6:	88e0      	ldrh	r0, [r4, #6]
100640e8:	2701      	movs	r7, #1
100640ea:	b2b9      	uxth	r1, r7
100640ec:	4281      	cmp	r1, r0
100640ee:	d300      	bcc.n	100640f2 <GAT_att_clt_tx+0x9e>
100640f0:	4607      	mov	r7, r0
100640f2:	9700      	str	r7, [sp, #0]
100640f4:	b2bf      	uxth	r7, r7
100640f6:	4620      	mov	r0, r4
100640f8:	4639      	mov	r1, r7
100640fa:	f7f0 fcd3 	bl	10054aa4 <GAT_att_cmn_get_pckt>
100640fe:	2800      	cmp	r0, #0
10064100:	d02f      	beq.n	10064162 <GAT_att_clt_tx+0x10e>
10064102:	4606      	mov	r6, r0
10064104:	782a      	ldrb	r2, [r5, #0]
10064106:	8981      	ldrh	r1, [r0, #12]
10064108:	f000 f954 	bl	100643b4 <ACL_pkt_write_8b>
1006410c:	7828      	ldrb	r0, [r5, #0]
1006410e:	1e81      	subs	r1, r0, #2
10064110:	2916      	cmp	r1, #22
10064112:	d82d      	bhi.n	10064170 <GAT_att_clt_tx+0x11c>
10064114:	0049      	lsls	r1, r1, #1
10064116:	46c0      	nop			@ (mov r8, r8)
10064118:	4479      	add	r1, pc
1006411a:	8889      	ldrh	r1, [r1, #4]
1006411c:	0049      	lsls	r1, r1, #1
1006411e:	448f      	add	pc, r1
10064120:	010d0016 	.word	0x010d0016
10064124:	010d0070 	.word	0x010d0070
10064128:	010d0077 	.word	0x010d0077
1006412c:	010d0093 	.word	0x010d0093
10064130:	010d00a1 	.word	0x010d00a1
10064134:	010d00aa 	.word	0x010d00aa
10064138:	010d00ba 	.word	0x010d00ba
1006413c:	010d00c0 	.word	0x010d00c0
10064140:	010d002f 	.word	0x010d002f
10064144:	010d010d 	.word	0x010d010d
10064148:	010d00ce 	.word	0x010d00ce
1006414c:	00e6      	.short	0x00e6
1006414e:	4898      	ldr	r0, [pc, #608]	@ (100643b0 <__arm_cp.5_2>)
10064150:	8a02      	ldrh	r2, [r0, #16]
10064152:	89b0      	ldrh	r0, [r6, #12]
10064154:	1c40      	adds	r0, r0, #1
10064156:	b281      	uxth	r1, r0
10064158:	4630      	mov	r0, r6
1006415a:	f7ee fd60 	bl	10052c1e <ACL_pkt_write_16b>
1006415e:	2003      	movs	r0, #3
10064160:	e0eb      	b.n	1006433a <GAT_att_clt_tx+0x2e6>
10064162:	2008      	movs	r0, #8
10064164:	f7fe f9a8 	bl	100624b8 <tsk_notify_idx>
10064168:	f7df fcd7 	bl	10043b1a <BLE_STACK_ProcessRequest>
1006416c:	2688      	movs	r6, #136	@ 0x88
1006416e:	e116      	b.n	1006439e <GAT_att_clt_tx+0x34a>
10064170:	2820      	cmp	r0, #32
10064172:	d100      	bne.n	10064176 <GAT_att_clt_tx+0x122>
10064174:	e0ca      	b.n	1006430c <GAT_att_clt_tx+0x2b8>
10064176:	2852      	cmp	r0, #82	@ 0x52
10064178:	d002      	beq.n	10064180 <GAT_att_clt_tx+0x12c>
1006417a:	28d2      	cmp	r0, #210	@ 0xd2
1006417c:	d000      	beq.n	10064180 <GAT_att_clt_tx+0x12c>
1006417e:	e0dd      	b.n	1006433c <GAT_att_clt_tx+0x2e8>
10064180:	892a      	ldrh	r2, [r5, #8]
10064182:	89b0      	ldrh	r0, [r6, #12]
10064184:	1c40      	adds	r0, r0, #1
10064186:	b281      	uxth	r1, r0
10064188:	4630      	mov	r0, r6
1006418a:	f7ee fd48 	bl	10052c1e <ACL_pkt_write_16b>
1006418e:	68eb      	ldr	r3, [r5, #12]
10064190:	896a      	ldrh	r2, [r5, #10]
10064192:	89b0      	ldrh	r0, [r6, #12]
10064194:	1cc0      	adds	r0, r0, #3
10064196:	b281      	uxth	r1, r0
10064198:	4630      	mov	r0, r6
1006419a:	f7ee fd49 	bl	10052c30 <ACL_pkt_write>
1006419e:	7828      	ldrb	r0, [r5, #0]
100641a0:	2812      	cmp	r0, #18
100641a2:	d100      	bne.n	100641a6 <GAT_att_clt_tx+0x152>
100641a4:	e0b8      	b.n	10064318 <GAT_att_clt_tx+0x2c4>
100641a6:	28d2      	cmp	r0, #210	@ 0xd2
100641a8:	d000      	beq.n	100641ac <GAT_att_clt_tx+0x158>
100641aa:	e0c7      	b.n	1006433c <GAT_att_clt_tx+0x2e8>
100641ac:	9800      	ldr	r0, [sp, #0]
100641ae:	380c      	subs	r0, #12
100641b0:	8070      	strh	r0, [r6, #2]
100641b2:	8920      	ldrh	r0, [r4, #8]
100641b4:	4631      	mov	r1, r6
100641b6:	f7fe f82a 	bl	1006220e <smp_sap_sm2_packet_data_signing_compute>
100641ba:	e0bf      	b.n	1006433c <GAT_att_clt_tx+0x2e8>
100641bc:	2952      	cmp	r1, #82	@ 0x52
100641be:	d002      	beq.n	100641c6 <GAT_att_clt_tx+0x172>
100641c0:	29d2      	cmp	r1, #210	@ 0xd2
100641c2:	d000      	beq.n	100641c6 <GAT_att_clt_tx+0x172>
100641c4:	e0eb      	b.n	1006439e <GAT_att_clt_tx+0x34a>
100641c6:	29d2      	cmp	r1, #210	@ 0xd2
100641c8:	d008      	beq.n	100641dc <GAT_att_clt_tx+0x188>
100641ca:	2103      	movs	r1, #3
100641cc:	e007      	b.n	100641de <GAT_att_clt_tx+0x18a>
100641ce:	7a29      	ldrb	r1, [r5, #8]
100641d0:	0049      	lsls	r1, r1, #1
100641d2:	1c4f      	adds	r7, r1, #1
100641d4:	4287      	cmp	r7, r0
100641d6:	d800      	bhi.n	100641da <GAT_att_clt_tx+0x186>
100641d8:	e787      	b.n	100640ea <GAT_att_clt_tx+0x96>
100641da:	e0e0      	b.n	1006439e <GAT_att_clt_tx+0x34a>
100641dc:	210f      	movs	r1, #15
100641de:	896a      	ldrh	r2, [r5, #10]
100641e0:	1857      	adds	r7, r2, r1
100641e2:	e782      	b.n	100640ea <GAT_att_clt_tx+0x96>
100641e4:	89e9      	ldrh	r1, [r5, #14]
100641e6:	1dcf      	adds	r7, r1, #7
100641e8:	e77f      	b.n	100640ea <GAT_att_clt_tx+0x96>
100641ea:	68e9      	ldr	r1, [r5, #12]
100641ec:	7c09      	ldrb	r1, [r1, #16]
100641ee:	2980      	cmp	r1, #128	@ 0x80
100641f0:	d000      	beq.n	100641f4 <GAT_att_clt_tx+0x1a0>
100641f2:	e089      	b.n	10064308 <GAT_att_clt_tx+0x2b4>
100641f4:	2715      	movs	r7, #21
100641f6:	e778      	b.n	100640ea <GAT_att_clt_tx+0x96>
100641f8:	89a9      	ldrh	r1, [r5, #12]
100641fa:	1d4f      	adds	r7, r1, #5
100641fc:	e775      	b.n	100640ea <GAT_att_clt_tx+0x96>
100641fe:	2702      	movs	r7, #2
10064200:	e773      	b.n	100640ea <GAT_att_clt_tx+0x96>
10064202:	896a      	ldrh	r2, [r5, #10]
10064204:	8929      	ldrh	r1, [r5, #8]
10064206:	4630      	mov	r0, r6
10064208:	f000 f9a2 	bl	10064550 <GAT_att_clt_fill_handle_range>
1006420c:	2005      	movs	r0, #5
1006420e:	e094      	b.n	1006433a <GAT_att_clt_tx+0x2e6>
10064210:	896a      	ldrh	r2, [r5, #10]
10064212:	8929      	ldrh	r1, [r5, #8]
10064214:	4630      	mov	r0, r6
10064216:	f000 f99b 	bl	10064550 <GAT_att_clt_fill_handle_range>
1006421a:	89aa      	ldrh	r2, [r5, #12]
1006421c:	89b0      	ldrh	r0, [r6, #12]
1006421e:	1d40      	adds	r0, r0, #5
10064220:	b281      	uxth	r1, r0
10064222:	4630      	mov	r0, r6
10064224:	f7ee fcfb 	bl	10052c1e <ACL_pkt_write_16b>
10064228:	89e8      	ldrh	r0, [r5, #14]
1006422a:	1dc0      	adds	r0, r0, #7
1006422c:	42b8      	cmp	r0, r7
1006422e:	d800      	bhi.n	10064232 <GAT_att_clt_tx+0x1de>
10064230:	4607      	mov	r7, r0
10064232:	1ff8      	subs	r0, r7, #7
10064234:	b282      	uxth	r2, r0
10064236:	692b      	ldr	r3, [r5, #16]
10064238:	89b0      	ldrh	r0, [r6, #12]
1006423a:	1dc0      	adds	r0, r0, #7
1006423c:	b281      	uxth	r1, r0
1006423e:	4630      	mov	r0, r6
10064240:	f7ee fcf6 	bl	10052c30 <ACL_pkt_write>
10064244:	2007      	movs	r0, #7
10064246:	e078      	b.n	1006433a <GAT_att_clt_tx+0x2e6>
10064248:	896a      	ldrh	r2, [r5, #10]
1006424a:	8929      	ldrh	r1, [r5, #8]
1006424c:	4630      	mov	r0, r6
1006424e:	f000 f97f 	bl	10064550 <GAT_att_clt_fill_handle_range>
10064252:	89b0      	ldrh	r0, [r6, #12]
10064254:	1d40      	adds	r0, r0, #5
10064256:	68eb      	ldr	r3, [r5, #12]
10064258:	7c19      	ldrb	r1, [r3, #16]
1006425a:	2980      	cmp	r1, #128	@ 0x80
1006425c:	d15e      	bne.n	1006431c <GAT_att_clt_tx+0x2c8>
1006425e:	b281      	uxth	r1, r0
10064260:	2210      	movs	r2, #16
10064262:	e05e      	b.n	10064322 <GAT_att_clt_tx+0x2ce>
10064264:	892a      	ldrh	r2, [r5, #8]
10064266:	89b0      	ldrh	r0, [r6, #12]
10064268:	1c40      	adds	r0, r0, #1
1006426a:	b281      	uxth	r1, r0
1006426c:	4630      	mov	r0, r6
1006426e:	f7ee fcd6 	bl	10052c1e <ACL_pkt_write_16b>
10064272:	200b      	movs	r0, #11
10064274:	e061      	b.n	1006433a <GAT_att_clt_tx+0x2e6>
10064276:	892a      	ldrh	r2, [r5, #8]
10064278:	89b0      	ldrh	r0, [r6, #12]
1006427a:	1c40      	adds	r0, r0, #1
1006427c:	b281      	uxth	r1, r0
1006427e:	4630      	mov	r0, r6
10064280:	f7ee fccd 	bl	10052c1e <ACL_pkt_write_16b>
10064284:	896a      	ldrh	r2, [r5, #10]
10064286:	89b0      	ldrh	r0, [r6, #12]
10064288:	1cc0      	adds	r0, r0, #3
1006428a:	b281      	uxth	r1, r0
1006428c:	4630      	mov	r0, r6
1006428e:	f7ee fcc6 	bl	10052c1e <ACL_pkt_write_16b>
10064292:	200d      	movs	r0, #13
10064294:	e051      	b.n	1006433a <GAT_att_clt_tx+0x2e6>
10064296:	4628      	mov	r0, r5
10064298:	4631      	mov	r1, r6
1006429a:	f000 f94d 	bl	10064538 <GAT_att_clt_fill_read_multi_req>
1006429e:	200f      	movs	r0, #15
100642a0:	e04b      	b.n	1006433a <GAT_att_clt_tx+0x2e6>
100642a2:	896a      	ldrh	r2, [r5, #10]
100642a4:	8929      	ldrh	r1, [r5, #8]
100642a6:	4630      	mov	r0, r6
100642a8:	f000 f952 	bl	10064550 <GAT_att_clt_fill_handle_range>
100642ac:	89b0      	ldrh	r0, [r6, #12]
100642ae:	1d40      	adds	r0, r0, #5
100642b0:	68eb      	ldr	r3, [r5, #12]
100642b2:	7c19      	ldrb	r1, [r3, #16]
100642b4:	2980      	cmp	r1, #128	@ 0x80
100642b6:	d139      	bne.n	1006432c <GAT_att_clt_tx+0x2d8>
100642b8:	b281      	uxth	r1, r0
100642ba:	2210      	movs	r2, #16
100642bc:	e039      	b.n	10064332 <GAT_att_clt_tx+0x2de>
100642be:	892a      	ldrh	r2, [r5, #8]
100642c0:	89b0      	ldrh	r0, [r6, #12]
100642c2:	1c40      	adds	r0, r0, #1
100642c4:	b281      	uxth	r1, r0
100642c6:	4630      	mov	r0, r6
100642c8:	f7ee fca9 	bl	10052c1e <ACL_pkt_write_16b>
100642cc:	896a      	ldrh	r2, [r5, #10]
100642ce:	89b0      	ldrh	r0, [r6, #12]
100642d0:	1cc0      	adds	r0, r0, #3
100642d2:	b281      	uxth	r1, r0
100642d4:	4630      	mov	r0, r6
100642d6:	f7ee fca2 	bl	10052c1e <ACL_pkt_write_16b>
100642da:	692b      	ldr	r3, [r5, #16]
100642dc:	89aa      	ldrh	r2, [r5, #12]
100642de:	89b0      	ldrh	r0, [r6, #12]
100642e0:	1d40      	adds	r0, r0, #5
100642e2:	b281      	uxth	r1, r0
100642e4:	4630      	mov	r0, r6
100642e6:	f7ee fca3 	bl	10052c30 <ACL_pkt_write>
100642ea:	2017      	movs	r0, #23
100642ec:	e025      	b.n	1006433a <GAT_att_clt_tx+0x2e6>
100642ee:	7a2a      	ldrb	r2, [r5, #8]
100642f0:	89b0      	ldrh	r0, [r6, #12]
100642f2:	1c40      	adds	r0, r0, #1
100642f4:	b281      	uxth	r1, r0
100642f6:	4630      	mov	r0, r6
100642f8:	f000 f85c 	bl	100643b4 <ACL_pkt_write_8b>
100642fc:	2019      	movs	r0, #25
100642fe:	e01c      	b.n	1006433a <GAT_att_clt_tx+0x2e6>
10064300:	68e9      	ldr	r1, [r5, #12]
10064302:	7c09      	ldrb	r1, [r1, #16]
10064304:	2980      	cmp	r1, #128	@ 0x80
10064306:	d04c      	beq.n	100643a2 <GAT_att_clt_tx+0x34e>
10064308:	2707      	movs	r7, #7
1006430a:	e6ee      	b.n	100640ea <GAT_att_clt_tx+0x96>
1006430c:	4628      	mov	r0, r5
1006430e:	4631      	mov	r1, r6
10064310:	f000 f912 	bl	10064538 <GAT_att_clt_fill_read_multi_req>
10064314:	2021      	movs	r0, #33	@ 0x21
10064316:	e010      	b.n	1006433a <GAT_att_clt_tx+0x2e6>
10064318:	2013      	movs	r0, #19
1006431a:	e00e      	b.n	1006433a <GAT_att_clt_tx+0x2e6>
1006431c:	b281      	uxth	r1, r0
1006431e:	330c      	adds	r3, #12
10064320:	2202      	movs	r2, #2
10064322:	4630      	mov	r0, r6
10064324:	f7ee fc84 	bl	10052c30 <ACL_pkt_write>
10064328:	2009      	movs	r0, #9
1006432a:	e006      	b.n	1006433a <GAT_att_clt_tx+0x2e6>
1006432c:	b281      	uxth	r1, r0
1006432e:	330c      	adds	r3, #12
10064330:	2202      	movs	r2, #2
10064332:	4630      	mov	r0, r6
10064334:	f7ee fc7c 	bl	10052c30 <ACL_pkt_write>
10064338:	2011      	movs	r0, #17
1006433a:	70a0      	strb	r0, [r4, #2]
1006433c:	9800      	ldr	r0, [sp, #0]
1006433e:	8070      	strh	r0, [r6, #2]
10064340:	782a      	ldrb	r2, [r5, #0]
10064342:	89b1      	ldrh	r1, [r6, #12]
10064344:	4630      	mov	r0, r6
10064346:	f000 f835 	bl	100643b4 <ACL_pkt_write_8b>
1006434a:	7828      	ldrb	r0, [r5, #0]
1006434c:	0641      	lsls	r1, r0, #25
1006434e:	d411      	bmi.n	10064374 <GAT_att_clt_tx+0x320>
10064350:	281e      	cmp	r0, #30
10064352:	d00f      	beq.n	10064374 <GAT_att_clt_tx+0x320>
10064354:	8962      	ldrh	r2, [r4, #10]
10064356:	8921      	ldrh	r1, [r4, #8]
10064358:	2003      	movs	r0, #3
1006435a:	f7f0 fb61 	bl	10054a20 <GAT_att_cmn_start_timer>
1006435e:	2800      	cmp	r0, #0
10064360:	d004      	beq.n	1006436c <GAT_att_clt_tx+0x318>
10064362:	4630      	mov	r0, r6
10064364:	f7ee fc26 	bl	10052bb4 <ACL_pkt_release>
10064368:	2684      	movs	r6, #132	@ 0x84
1006436a:	e018      	b.n	1006439e <GAT_att_clt_tx+0x34a>
1006436c:	88a0      	ldrh	r0, [r4, #4]
1006436e:	2110      	movs	r1, #16
10064370:	4301      	orrs	r1, r0
10064372:	80a1      	strh	r1, [r4, #4]
10064374:	8960      	ldrh	r0, [r4, #10]
10064376:	4631      	mov	r1, r6
10064378:	f7f0 fb18 	bl	100549ac <GAT_att_cmn_send>
1006437c:	2800      	cmp	r0, #0
1006437e:	d001      	beq.n	10064384 <GAT_att_clt_tx+0x330>
10064380:	2681      	movs	r6, #129	@ 0x81
10064382:	e00c      	b.n	1006439e <GAT_att_clt_tx+0x34a>
10064384:	7828      	ldrb	r0, [r5, #0]
10064386:	2600      	movs	r6, #0
10064388:	281e      	cmp	r0, #30
1006438a:	d108      	bne.n	1006439e <GAT_att_clt_tx+0x34a>
1006438c:	8962      	ldrh	r2, [r4, #10]
1006438e:	8921      	ldrh	r1, [r4, #8]
10064390:	2002      	movs	r0, #2
10064392:	f7f0 fafb 	bl	1005498c <GAT_att_cmn_stop_timer>
10064396:	88a0      	ldrh	r0, [r4, #4]
10064398:	2120      	movs	r1, #32
1006439a:	4388      	bics	r0, r1
1006439c:	80a0      	strh	r0, [r4, #4]
1006439e:	4630      	mov	r0, r6
100643a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100643a2:	2711      	movs	r7, #17
100643a4:	e6a1      	b.n	100640ea <GAT_att_clt_tx+0x96>
100643a6:	46c0      	nop			@ (mov r8, r8)

100643a8 <__arm_cp.5_0>:
100643a8:	200014dc 	.word	0x200014dc

100643ac <__arm_cp.5_1>:
100643ac:	100649ad 	.word	0x100649ad

100643b0 <__arm_cp.5_2>:
100643b0:	20001108 	.word	0x20001108

100643b4 <ACL_pkt_write_8b>:
100643b4:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100643b6:	4614      	mov	r4, r2
100643b8:	6840      	ldr	r0, [r0, #4]
100643ba:	2920      	cmp	r1, #32
100643bc:	d304      	bcc.n	100643c8 <ACL_pkt_write_8b+0x14>
100643be:	ad01      	add	r5, sp, #4
100643c0:	462a      	mov	r2, r5
100643c2:	f7fb f912 	bl	1005f5ea <Mem_Buff_get_buff_off>
100643c6:	8829      	ldrh	r1, [r5, #0]
100643c8:	1840      	adds	r0, r0, r1
100643ca:	7104      	strb	r4, [r0, #4]
100643cc:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100643ce <GAT_att_clt_read_grp_type_get_last_attr_h>:
100643ce:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100643d0:	4604      	mov	r4, r0
100643d2:	8980      	ldrh	r0, [r0, #12]
100643d4:	1c40      	adds	r0, r0, #1
100643d6:	b281      	uxth	r1, r0
100643d8:	4620      	mov	r0, r4
100643da:	f000 f80e 	bl	100643fa <ACL_pkt_read_8b>
100643de:	8861      	ldrh	r1, [r4, #2]
100643e0:	1a08      	subs	r0, r1, r0
100643e2:	89a1      	ldrh	r1, [r4, #12]
100643e4:	1840      	adds	r0, r0, r1
100643e6:	1c80      	adds	r0, r0, #2
100643e8:	b281      	uxth	r1, r0
100643ea:	2202      	movs	r2, #2
100643ec:	ad01      	add	r5, sp, #4
100643ee:	4620      	mov	r0, r4
100643f0:	462b      	mov	r3, r5
100643f2:	f7ee fbfb 	bl	10052bec <ACL_pkt_read>
100643f6:	8828      	ldrh	r0, [r5, #0]
100643f8:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100643fa <ACL_pkt_read_8b>:
100643fa:	b51c      	push	{r2, r3, r4, lr}
100643fc:	291f      	cmp	r1, #31
100643fe:	d803      	bhi.n	10064408 <ACL_pkt_read_8b+0xe>
10064400:	aa01      	add	r2, sp, #4
10064402:	8011      	strh	r1, [r2, #0]
10064404:	6840      	ldr	r0, [r0, #4]
10064406:	e005      	b.n	10064414 <ACL_pkt_read_8b+0x1a>
10064408:	6840      	ldr	r0, [r0, #4]
1006440a:	ac01      	add	r4, sp, #4
1006440c:	4622      	mov	r2, r4
1006440e:	f7fb f8ec 	bl	1005f5ea <Mem_Buff_get_buff_off>
10064412:	8821      	ldrh	r1, [r4, #0]
10064414:	1840      	adds	r0, r0, r1
10064416:	7900      	ldrb	r0, [r0, #4]
10064418:	bd1c      	pop	{r2, r3, r4, pc}

1006441a <GAT_att_clt_find_type_val_get_last_attr_h>:
1006441a:	b51c      	push	{r2, r3, r4, lr}
1006441c:	8981      	ldrh	r1, [r0, #12]
1006441e:	8842      	ldrh	r2, [r0, #2]
10064420:	1851      	adds	r1, r2, r1
10064422:	1e89      	subs	r1, r1, #2
10064424:	b289      	uxth	r1, r1
10064426:	2202      	movs	r2, #2
10064428:	ac01      	add	r4, sp, #4
1006442a:	4623      	mov	r3, r4
1006442c:	f7ee fbde 	bl	10052bec <ACL_pkt_read>
10064430:	8820      	ldrh	r0, [r4, #0]
10064432:	bd1c      	pop	{r2, r3, r4, pc}

10064434 <GAT_att_clt_parse_error_resp>:
10064434:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10064436:	460e      	mov	r6, r1
10064438:	8841      	ldrh	r1, [r0, #2]
1006443a:	2905      	cmp	r1, #5
1006443c:	d112      	bne.n	10064464 <GAT_att_clt_parse_error_resp+0x30>
1006443e:	461c      	mov	r4, r3
10064440:	4615      	mov	r5, r2
10064442:	8981      	ldrh	r1, [r0, #12]
10064444:	2205      	movs	r2, #5
10064446:	af01      	add	r7, sp, #4
10064448:	463b      	mov	r3, r7
1006444a:	f7ee fbcf 	bl	10052bec <ACL_pkt_read>
1006444e:	7878      	ldrb	r0, [r7, #1]
10064450:	7030      	strb	r0, [r6, #0]
10064452:	78b8      	ldrb	r0, [r7, #2]
10064454:	78f9      	ldrb	r1, [r7, #3]
10064456:	0209      	lsls	r1, r1, #8
10064458:	1808      	adds	r0, r1, r0
1006445a:	8028      	strh	r0, [r5, #0]
1006445c:	9802      	ldr	r0, [sp, #8]
1006445e:	7020      	strb	r0, [r4, #0]
10064460:	2000      	movs	r0, #0
10064462:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10064464:	2086      	movs	r0, #134	@ 0x86
10064466:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10064468 <GAT_att_clt_read_type_get_last_attr_h>:
10064468:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1006446a:	4604      	mov	r4, r0
1006446c:	8980      	ldrh	r0, [r0, #12]
1006446e:	1c40      	adds	r0, r0, #1
10064470:	b281      	uxth	r1, r0
10064472:	4620      	mov	r0, r4
10064474:	f7ff ffc1 	bl	100643fa <ACL_pkt_read_8b>
10064478:	8861      	ldrh	r1, [r4, #2]
1006447a:	1a08      	subs	r0, r1, r0
1006447c:	89a1      	ldrh	r1, [r4, #12]
1006447e:	1840      	adds	r0, r0, r1
10064480:	b281      	uxth	r1, r0
10064482:	2202      	movs	r2, #2
10064484:	ad01      	add	r5, sp, #4
10064486:	4620      	mov	r0, r4
10064488:	462b      	mov	r3, r5
1006448a:	f7ee fbaf 	bl	10052bec <ACL_pkt_read>
1006448e:	8828      	ldrh	r0, [r5, #0]
10064490:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10064492 <GAT_att_clt_read_type_get_data>:
10064492:	b570      	push	{r4, r5, r6, lr}
10064494:	4614      	mov	r4, r2
10064496:	460e      	mov	r6, r1
10064498:	4605      	mov	r5, r0
1006449a:	8980      	ldrh	r0, [r0, #12]
1006449c:	1c40      	adds	r0, r0, #1
1006449e:	b281      	uxth	r1, r0
100644a0:	4628      	mov	r0, r5
100644a2:	f7ff ffaa 	bl	100643fa <ACL_pkt_read_8b>
100644a6:	4602      	mov	r2, r0
100644a8:	4346      	muls	r6, r0
100644aa:	1cb0      	adds	r0, r6, #2
100644ac:	8869      	ldrh	r1, [r5, #2]
100644ae:	4288      	cmp	r0, r1
100644b0:	d208      	bcs.n	100644c4 <GAT_att_clt_read_type_get_data+0x32>
100644b2:	89a9      	ldrh	r1, [r5, #12]
100644b4:	1808      	adds	r0, r1, r0
100644b6:	b281      	uxth	r1, r0
100644b8:	4628      	mov	r0, r5
100644ba:	4623      	mov	r3, r4
100644bc:	f7ee fb96 	bl	10052bec <ACL_pkt_read>
100644c0:	2000      	movs	r0, #0
100644c2:	bd70      	pop	{r4, r5, r6, pc}
100644c4:	2086      	movs	r0, #134	@ 0x86
100644c6:	bd70      	pop	{r4, r5, r6, pc}

100644c8 <GAT_att_clt_find_info_get_last_attr_h>:
100644c8:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100644ca:	4604      	mov	r4, r0
100644cc:	8980      	ldrh	r0, [r0, #12]
100644ce:	1c40      	adds	r0, r0, #1
100644d0:	b281      	uxth	r1, r0
100644d2:	4620      	mov	r0, r4
100644d4:	f7ff ff91 	bl	100643fa <ACL_pkt_read_8b>
100644d8:	2111      	movs	r1, #17
100644da:	43c9      	mvns	r1, r1
100644dc:	2801      	cmp	r0, #1
100644de:	d100      	bne.n	100644e2 <GAT_att_clt_find_info_get_last_attr_h+0x1a>
100644e0:	310e      	adds	r1, #14
100644e2:	8860      	ldrh	r0, [r4, #2]
100644e4:	1840      	adds	r0, r0, r1
100644e6:	89a1      	ldrh	r1, [r4, #12]
100644e8:	1808      	adds	r0, r1, r0
100644ea:	b281      	uxth	r1, r0
100644ec:	2202      	movs	r2, #2
100644ee:	ad01      	add	r5, sp, #4
100644f0:	4620      	mov	r0, r4
100644f2:	462b      	mov	r3, r5
100644f4:	f7ee fb7a 	bl	10052bec <ACL_pkt_read>
100644f8:	8828      	ldrh	r0, [r5, #0]
100644fa:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100644fc <GAT_att_clt_prep_wr_cmp_data>:
100644fc:	b580      	push	{r7, lr}
100644fe:	460b      	mov	r3, r1
10064500:	8842      	ldrh	r2, [r0, #2]
10064502:	8981      	ldrh	r1, [r0, #12]
10064504:	1d49      	adds	r1, r1, #5
10064506:	b289      	uxth	r1, r1
10064508:	1f52      	subs	r2, r2, #5
1006450a:	b292      	uxth	r2, r2
1006450c:	f7ee fb65 	bl	10052bda <ACL_pkt_cmp>
10064510:	bd80      	pop	{r7, pc}

10064512 <GAT_att_clt_unexpect_rx>:
10064512:	b51c      	push	{r2, r3, r4, lr}
10064514:	4604      	mov	r4, r0
10064516:	8800      	ldrh	r0, [r0, #0]
10064518:	ab01      	add	r3, sp, #4
1006451a:	8018      	strh	r0, [r3, #0]
1006451c:	2042      	movs	r0, #66	@ 0x42
1006451e:	2102      	movs	r1, #2
10064520:	460a      	mov	r2, r1
10064522:	f7ff fbf1 	bl	10063d08 <aci_hal_fw_error_event_push_noinline>
10064526:	2800      	cmp	r0, #0
10064528:	d001      	beq.n	1006452e <GAT_att_clt_unexpect_rx+0x1c>
1006452a:	2084      	movs	r0, #132	@ 0x84
1006452c:	bd1c      	pop	{r2, r3, r4, pc}
1006452e:	4620      	mov	r0, r4
10064530:	f7ee fb40 	bl	10052bb4 <ACL_pkt_release>
10064534:	2000      	movs	r0, #0
10064536:	bd1c      	pop	{r2, r3, r4, pc}

10064538 <GAT_att_clt_fill_read_multi_req>:
10064538:	b510      	push	{r4, lr}
1006453a:	460c      	mov	r4, r1
1006453c:	68c3      	ldr	r3, [r0, #12]
1006453e:	8989      	ldrh	r1, [r1, #12]
10064540:	7a00      	ldrb	r0, [r0, #8]
10064542:	0042      	lsls	r2, r0, #1
10064544:	1c48      	adds	r0, r1, #1
10064546:	b281      	uxth	r1, r0
10064548:	4620      	mov	r0, r4
1006454a:	f7ee fb71 	bl	10052c30 <ACL_pkt_write>
1006454e:	bd10      	pop	{r4, pc}

10064550 <GAT_att_clt_fill_handle_range>:
10064550:	b5b0      	push	{r4, r5, r7, lr}
10064552:	4614      	mov	r4, r2
10064554:	460a      	mov	r2, r1
10064556:	4605      	mov	r5, r0
10064558:	8980      	ldrh	r0, [r0, #12]
1006455a:	1c40      	adds	r0, r0, #1
1006455c:	b281      	uxth	r1, r0
1006455e:	4628      	mov	r0, r5
10064560:	f7ee fb5d 	bl	10052c1e <ACL_pkt_write_16b>
10064564:	89a8      	ldrh	r0, [r5, #12]
10064566:	1cc0      	adds	r0, r0, #3
10064568:	b281      	uxth	r1, r0
1006456a:	4628      	mov	r0, r5
1006456c:	4622      	mov	r2, r4
1006456e:	f7ee fb56 	bl	10052c1e <ACL_pkt_write_16b>
10064572:	bdb0      	pop	{r4, r5, r7, pc}

10064574 <GAT_att_db_init>:
10064574:	b510      	push	{r4, lr}
10064576:	4604      	mov	r4, r0
10064578:	2108      	movs	r1, #8
1006457a:	f7fa ff97 	bl	1005f4ac <csmem_mem_0_assign>
1006457e:	4904      	ldr	r1, [pc, #16]	@ (10064590 <__arm_cp.0_0>)
10064580:	6809      	ldr	r1, [r1, #0]
10064582:	2260      	movs	r2, #96	@ 0x60
10064584:	2300      	movs	r3, #0
10064586:	528b      	strh	r3, [r1, r2]
10064588:	6648      	str	r0, [r1, #100]	@ 0x64
1006458a:	3160      	adds	r1, #96	@ 0x60
1006458c:	804c      	strh	r4, [r1, #2]
1006458e:	bd10      	pop	{r4, pc}

10064590 <__arm_cp.0_0>:
10064590:	200010ac 	.word	0x200010ac

10064594 <GAT_att_db_insert>:
10064594:	b5f0      	push	{r4, r5, r6, r7, lr}
10064596:	b085      	sub	sp, #20
10064598:	4617      	mov	r7, r2
1006459a:	9004      	str	r0, [sp, #16]
1006459c:	4d1c      	ldr	r5, [pc, #112]	@ (10064610 <__arm_cp.1_0>)
1006459e:	6828      	ldr	r0, [r5, #0]
100645a0:	2460      	movs	r4, #96	@ 0x60
100645a2:	5b06      	ldrh	r6, [r0, r4]
100645a4:	4602      	mov	r2, r0
100645a6:	3260      	adds	r2, #96	@ 0x60
100645a8:	8852      	ldrh	r2, [r2, #2]
100645aa:	4296      	cmp	r6, r2
100645ac:	d217      	bcs.n	100645de <GAT_att_db_insert+0x4a>
100645ae:	9402      	str	r4, [sp, #8]
100645b0:	9303      	str	r3, [sp, #12]
100645b2:	2900      	cmp	r1, #0
100645b4:	d017      	beq.n	100645e6 <GAT_att_db_insert+0x52>
100645b6:	9701      	str	r7, [sp, #4]
100645b8:	4608      	mov	r0, r1
100645ba:	f000 f82b 	bl	10064614 <GAT_att_db_get_att_idx>
100645be:	1c44      	adds	r4, r0, #1
100645c0:	6828      	ldr	r0, [r5, #0]
100645c2:	b2b1      	uxth	r1, r6
100645c4:	b2a2      	uxth	r2, r4
100645c6:	4291      	cmp	r1, r2
100645c8:	d30b      	bcc.n	100645e2 <GAT_att_db_insert+0x4e>
100645ca:	00c9      	lsls	r1, r1, #3
100645cc:	6e40      	ldr	r0, [r0, #100]	@ 0x64
100645ce:	1840      	adds	r0, r0, r1
100645d0:	4601      	mov	r1, r0
100645d2:	3908      	subs	r1, #8
100645d4:	2208      	movs	r2, #8
100645d6:	f7e1 fd3d 	bl	10046054 <BLEPLAT_MemCpy>
100645da:	1e76      	subs	r6, r6, #1
100645dc:	e7f0      	b.n	100645c0 <GAT_att_db_insert+0x2c>
100645de:	2700      	movs	r7, #0
100645e0:	e012      	b.n	10064608 <GAT_att_db_insert+0x74>
100645e2:	9f01      	ldr	r7, [sp, #4]
100645e4:	e000      	b.n	100645e8 <GAT_att_db_insert+0x54>
100645e6:	4634      	mov	r4, r6
100645e8:	6e40      	ldr	r0, [r0, #100]	@ 0x64
100645ea:	b2a1      	uxth	r1, r4
100645ec:	00c9      	lsls	r1, r1, #3
100645ee:	9a04      	ldr	r2, [sp, #16]
100645f0:	5442      	strb	r2, [r0, r1]
100645f2:	1840      	adds	r0, r0, r1
100645f4:	9a03      	ldr	r2, [sp, #12]
100645f6:	6042      	str	r2, [r0, #4]
100645f8:	6828      	ldr	r0, [r5, #0]
100645fa:	9b02      	ldr	r3, [sp, #8]
100645fc:	5ac2      	ldrh	r2, [r0, r3]
100645fe:	1c52      	adds	r2, r2, #1
10064600:	52c2      	strh	r2, [r0, r3]
10064602:	6e40      	ldr	r0, [r0, #100]	@ 0x64
10064604:	1840      	adds	r0, r0, r1
10064606:	8047      	strh	r7, [r0, #2]
10064608:	4638      	mov	r0, r7
1006460a:	b005      	add	sp, #20
1006460c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006460e:	46c0      	nop			@ (mov r8, r8)

10064610 <__arm_cp.1_0>:
10064610:	200010ac 	.word	0x200010ac

10064614 <GAT_att_db_get_att_idx>:
10064614:	4908      	ldr	r1, [pc, #32]	@ (10064638 <__arm_cp.2_0>)
10064616:	680a      	ldr	r2, [r1, #0]
10064618:	6e51      	ldr	r1, [r2, #100]	@ 0x64
1006461a:	2362      	movs	r3, #98	@ 0x62
1006461c:	5ad2      	ldrh	r2, [r2, r3]
1006461e:	00d2      	lsls	r2, r2, #3
10064620:	1852      	adds	r2, r2, r1
10064622:	3a08      	subs	r2, #8
10064624:	4282      	cmp	r2, r0
10064626:	d302      	bcc.n	1006462e <GAT_att_db_get_att_idx+0x1a>
10064628:	1a40      	subs	r0, r0, r1
1006462a:	08c0      	lsrs	r0, r0, #3
1006462c:	e001      	b.n	10064632 <GAT_att_db_get_att_idx+0x1e>
1006462e:	2000      	movs	r0, #0
10064630:	43c0      	mvns	r0, r0
10064632:	b280      	uxth	r0, r0
10064634:	4770      	bx	lr
10064636:	46c0      	nop			@ (mov r8, r8)

10064638 <__arm_cp.2_0>:
10064638:	200010ac 	.word	0x200010ac

1006463c <GAT_att_db_find_by_handle>:
1006463c:	b580      	push	{r7, lr}
1006463e:	f000 f80f 	bl	10064660 <GAT_att_db_find_attr_idx_with_handle>
10064642:	4905      	ldr	r1, [pc, #20]	@ (10064658 <__arm_cp.3_0>)
10064644:	4288      	cmp	r0, r1
10064646:	d005      	beq.n	10064654 <GAT_att_db_find_by_handle+0x18>
10064648:	00c0      	lsls	r0, r0, #3
1006464a:	4904      	ldr	r1, [pc, #16]	@ (1006465c <__arm_cp.3_1>)
1006464c:	6809      	ldr	r1, [r1, #0]
1006464e:	6e49      	ldr	r1, [r1, #100]	@ 0x64
10064650:	1808      	adds	r0, r1, r0
10064652:	bd80      	pop	{r7, pc}
10064654:	2000      	movs	r0, #0
10064656:	bd80      	pop	{r7, pc}

10064658 <__arm_cp.3_0>:
10064658:	0000ffff 	.word	0x0000ffff

1006465c <__arm_cp.3_1>:
1006465c:	200010ac 	.word	0x200010ac

10064660 <GAT_att_db_find_attr_idx_with_handle>:
10064660:	b510      	push	{r4, lr}
10064662:	4604      	mov	r4, r0
10064664:	f000 f824 	bl	100646b0 <GAT_att_db_find_attr_idx_from_handle>
10064668:	4906      	ldr	r1, [pc, #24]	@ (10064684 <__arm_cp.4_0>)
1006466a:	4288      	cmp	r0, r1
1006466c:	d007      	beq.n	1006467e <GAT_att_db_find_attr_idx_with_handle+0x1e>
1006466e:	00c2      	lsls	r2, r0, #3
10064670:	4b05      	ldr	r3, [pc, #20]	@ (10064688 <__arm_cp.4_1>)
10064672:	681b      	ldr	r3, [r3, #0]
10064674:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10064676:	189a      	adds	r2, r3, r2
10064678:	8852      	ldrh	r2, [r2, #2]
1006467a:	42a2      	cmp	r2, r4
1006467c:	d000      	beq.n	10064680 <GAT_att_db_find_attr_idx_with_handle+0x20>
1006467e:	4608      	mov	r0, r1
10064680:	bd10      	pop	{r4, pc}
10064682:	46c0      	nop			@ (mov r8, r8)

10064684 <__arm_cp.4_0>:
10064684:	0000ffff 	.word	0x0000ffff

10064688 <__arm_cp.4_1>:
10064688:	200010ac 	.word	0x200010ac

1006468c <GAT_att_db_find_from_handle>:
1006468c:	b580      	push	{r7, lr}
1006468e:	f000 f80f 	bl	100646b0 <GAT_att_db_find_attr_idx_from_handle>
10064692:	4905      	ldr	r1, [pc, #20]	@ (100646a8 <__arm_cp.5_0>)
10064694:	4288      	cmp	r0, r1
10064696:	d005      	beq.n	100646a4 <GAT_att_db_find_from_handle+0x18>
10064698:	00c0      	lsls	r0, r0, #3
1006469a:	4904      	ldr	r1, [pc, #16]	@ (100646ac <__arm_cp.5_1>)
1006469c:	6809      	ldr	r1, [r1, #0]
1006469e:	6e49      	ldr	r1, [r1, #100]	@ 0x64
100646a0:	1808      	adds	r0, r1, r0
100646a2:	bd80      	pop	{r7, pc}
100646a4:	2000      	movs	r0, #0
100646a6:	bd80      	pop	{r7, pc}

100646a8 <__arm_cp.5_0>:
100646a8:	0000ffff 	.word	0x0000ffff

100646ac <__arm_cp.5_1>:
100646ac:	200010ac 	.word	0x200010ac

100646b0 <GAT_att_db_find_attr_idx_from_handle>:
100646b0:	b570      	push	{r4, r5, r6, lr}
100646b2:	4909      	ldr	r1, [pc, #36]	@ (100646d8 <__arm_cp.6_0>)
100646b4:	680a      	ldr	r2, [r1, #0]
100646b6:	2160      	movs	r1, #96	@ 0x60
100646b8:	5a53      	ldrh	r3, [r2, r1]
100646ba:	2100      	movs	r1, #0
100646bc:	2502      	movs	r5, #2
100646be:	4c07      	ldr	r4, [pc, #28]	@ (100646dc <__arm_cp.6_1>)
100646c0:	428b      	cmp	r3, r1
100646c2:	d006      	beq.n	100646d2 <GAT_att_db_find_attr_idx_from_handle+0x22>
100646c4:	6e56      	ldr	r6, [r2, #100]	@ 0x64
100646c6:	5b76      	ldrh	r6, [r6, r5]
100646c8:	4286      	cmp	r6, r0
100646ca:	d203      	bcs.n	100646d4 <GAT_att_db_find_attr_idx_from_handle+0x24>
100646cc:	3508      	adds	r5, #8
100646ce:	1c49      	adds	r1, r1, #1
100646d0:	e7f6      	b.n	100646c0 <GAT_att_db_find_attr_idx_from_handle+0x10>
100646d2:	4621      	mov	r1, r4
100646d4:	b288      	uxth	r0, r1
100646d6:	bd70      	pop	{r4, r5, r6, pc}

100646d8 <__arm_cp.6_0>:
100646d8:	200010ac 	.word	0x200010ac

100646dc <__arm_cp.6_1>:
100646dc:	0000ffff 	.word	0x0000ffff

100646e0 <GAT_att_db_find_by_def>:
100646e0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100646e2:	9302      	str	r3, [sp, #8]
100646e4:	4615      	mov	r5, r2
100646e6:	2200      	movs	r2, #0
100646e8:	4288      	cmp	r0, r1
100646ea:	d823      	bhi.n	10064734 <GAT_att_db_find_by_def+0x54>
100646ec:	460c      	mov	r4, r1
100646ee:	4916      	ldr	r1, [pc, #88]	@ (10064748 <__arm_cp.8_0>)
100646f0:	680f      	ldr	r7, [r1, #0]
100646f2:	2160      	movs	r1, #96	@ 0x60
100646f4:	5a79      	ldrh	r1, [r7, r1]
100646f6:	2900      	cmp	r1, #0
100646f8:	d01c      	beq.n	10064734 <GAT_att_db_find_by_def+0x54>
100646fa:	9200      	str	r2, [sp, #0]
100646fc:	9101      	str	r1, [sp, #4]
100646fe:	f7ff ffd7 	bl	100646b0 <GAT_att_db_find_attr_idx_from_handle>
10064702:	4606      	mov	r6, r0
10064704:	4620      	mov	r0, r4
10064706:	f7ff ffd3 	bl	100646b0 <GAT_att_db_find_attr_idx_from_handle>
1006470a:	9901      	ldr	r1, [sp, #4]
1006470c:	1e49      	subs	r1, r1, #1
1006470e:	4281      	cmp	r1, r0
10064710:	d300      	bcc.n	10064714 <GAT_att_db_find_by_def+0x34>
10064712:	4601      	mov	r1, r0
10064714:	b289      	uxth	r1, r1
10064716:	b2b2      	uxth	r2, r6
10064718:	428a      	cmp	r2, r1
1006471a:	d80d      	bhi.n	10064738 <GAT_att_db_find_by_def+0x58>
1006471c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
1006471e:	00d3      	lsls	r3, r2, #3
10064720:	5cc4      	ldrb	r4, [r0, r3]
10064722:	42ac      	cmp	r4, r5
10064724:	d104      	bne.n	10064730 <GAT_att_db_find_by_def+0x50>
10064726:	18c0      	adds	r0, r0, r3
10064728:	6843      	ldr	r3, [r0, #4]
1006472a:	9c02      	ldr	r4, [sp, #8]
1006472c:	42a3      	cmp	r3, r4
1006472e:	d005      	beq.n	1006473c <GAT_att_db_find_by_def+0x5c>
10064730:	1c76      	adds	r6, r6, #1
10064732:	e7f0      	b.n	10064716 <GAT_att_db_find_by_def+0x36>
10064734:	4610      	mov	r0, r2
10064736:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10064738:	9800      	ldr	r0, [sp, #0]
1006473a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006473c:	4903      	ldr	r1, [pc, #12]	@ (1006474c <__arm_cp.8_1>)
1006473e:	428a      	cmp	r2, r1
10064740:	d100      	bne.n	10064744 <GAT_att_db_find_by_def+0x64>
10064742:	2000      	movs	r0, #0
10064744:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10064746:	46c0      	nop			@ (mov r8, r8)

10064748 <__arm_cp.8_0>:
10064748:	200010ac 	.word	0x200010ac

1006474c <__arm_cp.8_1>:
1006474c:	0000ffff 	.word	0x0000ffff

10064750 <GAT_att_db_get_next>:
10064750:	b580      	push	{r7, lr}
10064752:	f7ff ff5f 	bl	10064614 <GAT_att_db_get_att_idx>
10064756:	4907      	ldr	r1, [pc, #28]	@ (10064774 <__arm_cp.10_0>)
10064758:	6809      	ldr	r1, [r1, #0]
1006475a:	2260      	movs	r2, #96	@ 0x60
1006475c:	5a8a      	ldrh	r2, [r1, r2]
1006475e:	1c40      	adds	r0, r0, #1
10064760:	b280      	uxth	r0, r0
10064762:	4290      	cmp	r0, r2
10064764:	d203      	bcs.n	1006476e <GAT_att_db_get_next+0x1e>
10064766:	6e49      	ldr	r1, [r1, #100]	@ 0x64
10064768:	00c0      	lsls	r0, r0, #3
1006476a:	1808      	adds	r0, r1, r0
1006476c:	bd80      	pop	{r7, pc}
1006476e:	2000      	movs	r0, #0
10064770:	bd80      	pop	{r7, pc}
10064772:	46c0      	nop			@ (mov r8, r8)

10064774 <__arm_cp.10_0>:
10064774:	200010ac 	.word	0x200010ac

10064778 <GAT_att_db_get_last_group_handle>:
10064778:	b580      	push	{r7, lr}
1006477a:	f000 f803 	bl	10064784 <GAT_att_db_get_last_group_attribute>
1006477e:	8840      	ldrh	r0, [r0, #2]
10064780:	bd80      	pop	{r7, pc}
	...

10064784 <GAT_att_db_get_last_group_attribute>:
10064784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064786:	7804      	ldrb	r4, [r0, #0]
10064788:	2502      	movs	r5, #2
1006478a:	4621      	mov	r1, r4
1006478c:	4329      	orrs	r1, r5
1006478e:	2902      	cmp	r1, #2
10064790:	d11e      	bne.n	100647d0 <GAT_att_db_get_last_group_attribute+0x4c>
10064792:	f7ff ff3f 	bl	10064614 <GAT_att_db_get_att_idx>
10064796:	490f      	ldr	r1, [pc, #60]	@ (100647d4 <__arm_cp.12_0>)
10064798:	6809      	ldr	r1, [r1, #0]
1006479a:	2260      	movs	r2, #96	@ 0x60
1006479c:	5a8b      	ldrh	r3, [r1, r2]
1006479e:	1c40      	adds	r0, r0, #1
100647a0:	b282      	uxth	r2, r0
100647a2:	429a      	cmp	r2, r3
100647a4:	d210      	bcs.n	100647c8 <GAT_att_db_get_last_group_attribute+0x44>
100647a6:	2c00      	cmp	r4, #0
100647a8:	d008      	beq.n	100647bc <GAT_att_db_get_last_group_attribute+0x38>
100647aa:	2c02      	cmp	r4, #2
100647ac:	d1f7      	bne.n	1006479e <GAT_att_db_get_last_group_attribute+0x1a>
100647ae:	00d7      	lsls	r7, r2, #3
100647b0:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
100647b2:	5df7      	ldrb	r7, [r6, r7]
100647b4:	432f      	orrs	r7, r5
100647b6:	2f02      	cmp	r7, #2
100647b8:	d1f1      	bne.n	1006479e <GAT_att_db_get_last_group_attribute+0x1a>
100647ba:	e006      	b.n	100647ca <GAT_att_db_get_last_group_attribute+0x46>
100647bc:	00d7      	lsls	r7, r2, #3
100647be:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
100647c0:	5df7      	ldrb	r7, [r6, r7]
100647c2:	2f00      	cmp	r7, #0
100647c4:	d1eb      	bne.n	1006479e <GAT_att_db_get_last_group_attribute+0x1a>
100647c6:	e000      	b.n	100647ca <GAT_att_db_get_last_group_attribute+0x46>
100647c8:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
100647ca:	00d0      	lsls	r0, r2, #3
100647cc:	1980      	adds	r0, r0, r6
100647ce:	3808      	subs	r0, #8
100647d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100647d2:	46c0      	nop			@ (mov r8, r8)

100647d4 <__arm_cp.12_0>:
100647d4:	200010ac 	.word	0x200010ac

100647d8 <GAT_att_db_get_last_handle>:
100647d8:	4806      	ldr	r0, [pc, #24]	@ (100647f4 <__arm_cp.14_0>)
100647da:	6800      	ldr	r0, [r0, #0]
100647dc:	2160      	movs	r1, #96	@ 0x60
100647de:	5a41      	ldrh	r1, [r0, r1]
100647e0:	2900      	cmp	r1, #0
100647e2:	d005      	beq.n	100647f0 <GAT_att_db_get_last_handle+0x18>
100647e4:	6e40      	ldr	r0, [r0, #100]	@ 0x64
100647e6:	00c9      	lsls	r1, r1, #3
100647e8:	1808      	adds	r0, r1, r0
100647ea:	1f80      	subs	r0, r0, #6
100647ec:	8800      	ldrh	r0, [r0, #0]
100647ee:	4770      	bx	lr
100647f0:	2000      	movs	r0, #0
100647f2:	4770      	bx	lr

100647f4 <__arm_cp.14_0>:
100647f4:	200010ac 	.word	0x200010ac

100647f8 <GAT_att_db_rm_att_range>:
100647f8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100647fa:	460d      	mov	r5, r1
100647fc:	4604      	mov	r4, r0
100647fe:	f7ff ffeb 	bl	100647d8 <GAT_att_db_get_last_handle>
10064802:	2800      	cmp	r0, #0
10064804:	d034      	beq.n	10064870 <GAT_att_db_rm_att_range+0x78>
10064806:	42ac      	cmp	r4, r5
10064808:	d832      	bhi.n	10064870 <GAT_att_db_rm_att_range+0x78>
1006480a:	4606      	mov	r6, r0
1006480c:	42a0      	cmp	r0, r4
1006480e:	d32f      	bcc.n	10064870 <GAT_att_db_rm_att_range+0x78>
10064810:	4620      	mov	r0, r4
10064812:	f7ff ff25 	bl	10064660 <GAT_att_db_find_attr_idx_with_handle>
10064816:	4604      	mov	r4, r0
10064818:	4816      	ldr	r0, [pc, #88]	@ (10064874 <__arm_cp.16_0>)
1006481a:	4284      	cmp	r4, r0
1006481c:	d028      	beq.n	10064870 <GAT_att_db_rm_att_range+0x78>
1006481e:	42ae      	cmp	r6, r5
10064820:	d300      	bcc.n	10064824 <GAT_att_db_rm_att_range+0x2c>
10064822:	462e      	mov	r6, r5
10064824:	4630      	mov	r0, r6
10064826:	f7ff ff1b 	bl	10064660 <GAT_att_db_find_attr_idx_with_handle>
1006482a:	4913      	ldr	r1, [pc, #76]	@ (10064878 <__arm_cp.16_1>)
1006482c:	680f      	ldr	r7, [r1, #0]
1006482e:	2660      	movs	r6, #96	@ 0x60
10064830:	5bb9      	ldrh	r1, [r7, r6]
10064832:	1e4a      	subs	r2, r1, #1
10064834:	4282      	cmp	r2, r0
10064836:	d917      	bls.n	10064868 <GAT_att_db_rm_att_range+0x70>
10064838:	9001      	str	r0, [sp, #4]
1006483a:	4605      	mov	r5, r0
1006483c:	9402      	str	r4, [sp, #8]
1006483e:	b28b      	uxth	r3, r1
10064840:	1c6d      	adds	r5, r5, #1
10064842:	b2aa      	uxth	r2, r5
10064844:	429a      	cmp	r2, r3
10064846:	d20d      	bcs.n	10064864 <GAT_att_db_rm_att_range+0x6c>
10064848:	6e79      	ldr	r1, [r7, #100]	@ 0x64
1006484a:	b2a0      	uxth	r0, r4
1006484c:	00c0      	lsls	r0, r0, #3
1006484e:	1808      	adds	r0, r1, r0
10064850:	00d2      	lsls	r2, r2, #3
10064852:	1889      	adds	r1, r1, r2
10064854:	2208      	movs	r2, #8
10064856:	f7e1 fbfd 	bl	10046054 <BLEPLAT_MemCpy>
1006485a:	4807      	ldr	r0, [pc, #28]	@ (10064878 <__arm_cp.16_1>)
1006485c:	6807      	ldr	r7, [r0, #0]
1006485e:	5bb9      	ldrh	r1, [r7, r6]
10064860:	1c64      	adds	r4, r4, #1
10064862:	e7ec      	b.n	1006483e <GAT_att_db_rm_att_range+0x46>
10064864:	9c02      	ldr	r4, [sp, #8]
10064866:	9801      	ldr	r0, [sp, #4]
10064868:	43c2      	mvns	r2, r0
1006486a:	18a2      	adds	r2, r4, r2
1006486c:	1851      	adds	r1, r2, r1
1006486e:	53b9      	strh	r1, [r7, r6]
10064870:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10064872:	46c0      	nop			@ (mov r8, r8)

10064874 <__arm_cp.16_0>:
10064874:	0000ffff 	.word	0x0000ffff

10064878 <__arm_cp.16_1>:
10064878:	200010ac 	.word	0x200010ac

1006487c <GAT_att_db_find_last_attr_of_type>:
1006487c:	b510      	push	{r4, lr}
1006487e:	4909      	ldr	r1, [pc, #36]	@ (100648a4 <__arm_cp.17_0>)
10064880:	680a      	ldr	r2, [r1, #0]
10064882:	2160      	movs	r1, #96	@ 0x60
10064884:	5a53      	ldrh	r3, [r2, r1]
10064886:	0419      	lsls	r1, r3, #16
10064888:	d009      	beq.n	1006489e <GAT_att_db_find_last_attr_of_type+0x22>
1006488a:	6e51      	ldr	r1, [r2, #100]	@ 0x64
1006488c:	b29c      	uxth	r4, r3
1006488e:	00e4      	lsls	r4, r4, #3
10064890:	1861      	adds	r1, r4, r1
10064892:	3908      	subs	r1, #8
10064894:	780c      	ldrb	r4, [r1, #0]
10064896:	1e5b      	subs	r3, r3, #1
10064898:	4284      	cmp	r4, r0
1006489a:	d1f4      	bne.n	10064886 <GAT_att_db_find_last_attr_of_type+0xa>
1006489c:	e000      	b.n	100648a0 <GAT_att_db_find_last_attr_of_type+0x24>
1006489e:	2100      	movs	r1, #0
100648a0:	4608      	mov	r0, r1
100648a2:	bd10      	pop	{r4, pc}

100648a4 <__arm_cp.17_0>:
100648a4:	200010ac 	.word	0x200010ac

100648a8 <GAT_att_db_reverse_find_attr_of_type>:
100648a8:	b510      	push	{r4, lr}
100648aa:	4604      	mov	r4, r0
100648ac:	4608      	mov	r0, r1
100648ae:	f7ff feff 	bl	100646b0 <GAT_att_db_find_attr_idx_from_handle>
100648b2:	4908      	ldr	r1, [pc, #32]	@ (100648d4 <__arm_cp.18_0>)
100648b4:	6809      	ldr	r1, [r1, #0]
100648b6:	6e49      	ldr	r1, [r1, #100]	@ 0x64
100648b8:	b282      	uxth	r2, r0
100648ba:	00d2      	lsls	r2, r2, #3
100648bc:	5c8b      	ldrb	r3, [r1, r2]
100648be:	42a3      	cmp	r3, r4
100648c0:	d005      	beq.n	100648ce <GAT_att_db_reverse_find_attr_of_type+0x26>
100648c2:	1e42      	subs	r2, r0, #1
100648c4:	0400      	lsls	r0, r0, #16
100648c6:	4610      	mov	r0, r2
100648c8:	d1f6      	bne.n	100648b8 <GAT_att_db_reverse_find_attr_of_type+0x10>
100648ca:	2000      	movs	r0, #0
100648cc:	bd10      	pop	{r4, pc}
100648ce:	1888      	adds	r0, r1, r2
100648d0:	bd10      	pop	{r4, pc}
100648d2:	46c0      	nop			@ (mov r8, r8)

100648d4 <__arm_cp.18_0>:
100648d4:	200010ac 	.word	0x200010ac

100648d8 <GAT_clt_init>:
100648d8:	b570      	push	{r4, r5, r6, lr}
100648da:	4c11      	ldr	r4, [pc, #68]	@ (10064920 <__arm_cp.0_0>)
100648dc:	7aa0      	ldrb	r0, [r4, #10]
100648de:	2124      	movs	r1, #36	@ 0x24
100648e0:	f7fa fde4 	bl	1005f4ac <csmem_mem_0_assign>
100648e4:	490f      	ldr	r1, [pc, #60]	@ (10064924 <__arm_cp.0_1>)
100648e6:	680b      	ldr	r3, [r1, #0]
100648e8:	2200      	movs	r2, #0
100648ea:	461d      	mov	r5, r3
100648ec:	3550      	adds	r5, #80	@ 0x50
100648ee:	461e      	mov	r6, r3
100648f0:	3648      	adds	r6, #72	@ 0x48
100648f2:	649a      	str	r2, [r3, #72]	@ 0x48
100648f4:	64de      	str	r6, [r3, #76]	@ 0x4c
100648f6:	651a      	str	r2, [r3, #80]	@ 0x50
100648f8:	655d      	str	r5, [r3, #84]	@ 0x54
100648fa:	7aa4      	ldrb	r4, [r4, #10]
100648fc:	2c00      	cmp	r4, #0
100648fe:	d00c      	beq.n	1006491a <GAT_clt_init+0x42>
10064900:	6202      	str	r2, [r0, #32]
10064902:	680b      	ldr	r3, [r1, #0]
10064904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10064906:	6018      	str	r0, [r3, #0]
10064908:	2301      	movs	r3, #1
1006490a:	7003      	strb	r3, [r0, #0]
1006490c:	4605      	mov	r5, r0
1006490e:	3520      	adds	r5, #32
10064910:	680b      	ldr	r3, [r1, #0]
10064912:	655d      	str	r5, [r3, #84]	@ 0x54
10064914:	3024      	adds	r0, #36	@ 0x24
10064916:	1e64      	subs	r4, r4, #1
10064918:	e7f0      	b.n	100648fc <GAT_clt_init+0x24>
1006491a:	659a      	str	r2, [r3, #88]	@ 0x58
1006491c:	bd70      	pop	{r4, r5, r6, pc}
1006491e:	46c0      	nop			@ (mov r8, r8)

10064920 <__arm_cp.0_0>:
10064920:	20001108 	.word	0x20001108

10064924 <__arm_cp.0_1>:
10064924:	200010ac 	.word	0x200010ac

10064928 <GAT_clt_connection>:
10064928:	4770      	bx	lr
	...

1006492c <GAT_clt_bearer_close>:
1006492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006492e:	460d      	mov	r5, r1
10064930:	4604      	mov	r4, r0
10064932:	4e19      	ldr	r6, [pc, #100]	@ (10064998 <__arm_cp.2_0>)
10064934:	6837      	ldr	r7, [r6, #0]
10064936:	3748      	adds	r7, #72	@ 0x48
10064938:	683f      	ldr	r7, [r7, #0]
1006493a:	2f00      	cmp	r7, #0
1006493c:	d010      	beq.n	10064960 <GAT_clt_bearer_close+0x34>
1006493e:	8878      	ldrh	r0, [r7, #2]
10064940:	42a0      	cmp	r0, r4
10064942:	d10b      	bne.n	1006495c <GAT_clt_bearer_close+0x30>
10064944:	88b8      	ldrh	r0, [r7, #4]
10064946:	42a8      	cmp	r0, r5
10064948:	d108      	bne.n	1006495c <GAT_clt_bearer_close+0x30>
1006494a:	7838      	ldrb	r0, [r7, #0]
1006494c:	2118      	movs	r1, #24
1006494e:	4301      	orrs	r1, r0
10064950:	7039      	strb	r1, [r7, #0]
10064952:	200c      	movs	r0, #12
10064954:	f7fd fdb0 	bl	100624b8 <tsk_notify_idx>
10064958:	f7df f8df 	bl	10043b1a <BLE_STACK_ProcessRequest>
1006495c:	3720      	adds	r7, #32
1006495e:	e7eb      	b.n	10064938 <GAT_clt_bearer_close+0xc>
10064960:	2d04      	cmp	r5, #4
10064962:	d117      	bne.n	10064994 <GAT_clt_bearer_close+0x68>
10064964:	6830      	ldr	r0, [r6, #0]
10064966:	6d81      	ldr	r1, [r0, #88]	@ 0x58
10064968:	460b      	mov	r3, r1
1006496a:	2b00      	cmp	r3, #0
1006496c:	d00b      	beq.n	10064986 <GAT_clt_bearer_close+0x5a>
1006496e:	461a      	mov	r2, r3
10064970:	689d      	ldr	r5, [r3, #8]
10064972:	2300      	movs	r3, #0
10064974:	2d00      	cmp	r5, #0
10064976:	d0f8      	beq.n	1006496a <GAT_clt_bearer_close+0x3e>
10064978:	88ab      	ldrh	r3, [r5, #4]
1006497a:	42a3      	cmp	r3, r4
1006497c:	462b      	mov	r3, r5
1006497e:	d1f4      	bne.n	1006496a <GAT_clt_bearer_close+0x3e>
10064980:	68ab      	ldr	r3, [r5, #8]
10064982:	6093      	str	r3, [r2, #8]
10064984:	e7f1      	b.n	1006496a <GAT_clt_bearer_close+0x3e>
10064986:	2900      	cmp	r1, #0
10064988:	d004      	beq.n	10064994 <GAT_clt_bearer_close+0x68>
1006498a:	888a      	ldrh	r2, [r1, #4]
1006498c:	42a2      	cmp	r2, r4
1006498e:	d101      	bne.n	10064994 <GAT_clt_bearer_close+0x68>
10064990:	6889      	ldr	r1, [r1, #8]
10064992:	6581      	str	r1, [r0, #88]	@ 0x58
10064994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064996:	46c0      	nop			@ (mov r8, r8)

10064998 <__arm_cp.2_0>:
10064998:	200010ac 	.word	0x200010ac

1006499c <GAT_clt_proc_exec_tsk>:
1006499c:	b580      	push	{r7, lr}
1006499e:	4802      	ldr	r0, [pc, #8]	@ (100649a8 <__arm_cp.3_0>)
100649a0:	6800      	ldr	r0, [r0, #0]
100649a2:	4780      	blx	r0
100649a4:	bd80      	pop	{r7, pc}
100649a6:	46c0      	nop			@ (mov r8, r8)

100649a8 <__arm_cp.3_0>:
100649a8:	200014e0 	.word	0x200014e0

100649ac <GAT_clt_rcv>:
100649ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100649ae:	b095      	sub	sp, #84	@ 0x54
100649b0:	4605      	mov	r5, r0
100649b2:	8804      	ldrh	r4, [r0, #0]
100649b4:	f7f2 ffb5 	bl	10057922 <L2C_get_cid_from_basic_packet_header>
100649b8:	4601      	mov	r1, r0
100649ba:	4620      	mov	r0, r4
100649bc:	f000 fa6e 	bl	10064e9c <GAT_clt_get_proc_per_channel>
100649c0:	2686      	movs	r6, #134	@ 0x86
100649c2:	2800      	cmp	r0, #0
100649c4:	d100      	bne.n	100649c8 <GAT_clt_rcv+0x1c>
100649c6:	e208      	b.n	10064dda <GAT_clt_rcv+0x42e>
100649c8:	4604      	mov	r4, r0
100649ca:	882f      	ldrh	r7, [r5, #0]
100649cc:	4628      	mov	r0, r5
100649ce:	f7f2 ffa8 	bl	10057922 <L2C_get_cid_from_basic_packet_header>
100649d2:	4601      	mov	r1, r0
100649d4:	4638      	mov	r0, r7
100649d6:	f7ef ff67 	bl	100548a8 <GAT_att_cmn_get_channel_descr_p>
100649da:	9008      	str	r0, [sp, #32]
100649dc:	7820      	ldrb	r0, [r4, #0]
100649de:	21fb      	movs	r1, #251	@ 0xfb
100649e0:	4001      	ands	r1, r0
100649e2:	7021      	strb	r1, [r4, #0]
100649e4:	270c      	movs	r7, #12
100649e6:	4638      	mov	r0, r7
100649e8:	f7fd fd66 	bl	100624b8 <tsk_notify_idx>
100649ec:	f7df f895 	bl	10043b1a <BLE_STACK_ProcessRequest>
100649f0:	4628      	mov	r0, r5
100649f2:	f000 fa65 	bl	10064ec0 <GAT_att_cmn_get_opcode>
100649f6:	2801      	cmp	r0, #1
100649f8:	d107      	bne.n	10064a0a <GAT_clt_rcv+0x5e>
100649fa:	8860      	ldrh	r0, [r4, #2]
100649fc:	f7ef f85c 	bl	10053ab8 <GAP_started_gatt_proc>
10064a00:	2800      	cmp	r0, #0
10064a02:	d060      	beq.n	10064ac6 <GAT_clt_rcv+0x11a>
10064a04:	4620      	mov	r0, r4
10064a06:	f000 fa60 	bl	10064eca <GAT_clt_stop_proc>
10064a0a:	7820      	ldrb	r0, [r4, #0]
10064a0c:	2200      	movs	r2, #0
10064a0e:	0701      	lsls	r1, r0, #28
10064a10:	d457      	bmi.n	10064ac2 <GAT_clt_rcv+0x116>
10064a12:	79a3      	ldrb	r3, [r4, #6]
10064a14:	1e59      	subs	r1, r3, #1
10064a16:	2911      	cmp	r1, #17
10064a18:	d900      	bls.n	10064a1c <GAT_clt_rcv+0x70>
10064a1a:	e1de      	b.n	10064dda <GAT_clt_rcv+0x42e>
10064a1c:	9207      	str	r2, [sp, #28]
10064a1e:	0049      	lsls	r1, r1, #1
10064a20:	4479      	add	r1, pc
10064a22:	8889      	ldrh	r1, [r1, #4]
10064a24:	0049      	lsls	r1, r1, #1
10064a26:	448f      	add	pc, r1
10064a28:	010200c5 	.word	0x010200c5
10064a2c:	0099010f 	.word	0x0099010f
10064a30:	011f0099 	.word	0x011f0099
10064a34:	01750164 	.word	0x01750164
10064a38:	01b9017c 	.word	0x01b9017c
10064a3c:	00a600a6 	.word	0x00a600a6
10064a40:	001100b8 	.word	0x001100b8
10064a44:	001100b0 	.word	0x001100b0
10064a48:	00b00011 	.word	0x00b00011
10064a4c:	06c0      	lsls	r0, r0, #27
10064a4e:	d500      	bpl.n	10064a52 <GAT_clt_rcv+0xa6>
10064a50:	e0a7      	b.n	10064ba2 <GAT_clt_rcv+0x1f6>
10064a52:	88a2      	ldrh	r2, [r4, #4]
10064a54:	8861      	ldrh	r1, [r4, #2]
10064a56:	200a      	movs	r0, #10
10064a58:	462b      	mov	r3, r5
10064a5a:	f7fe ffbf 	bl	100639dc <aci_att_clt_prepare_write_resp_event_push_noinline>
10064a5e:	2800      	cmp	r0, #0
10064a60:	d000      	beq.n	10064a64 <GAT_clt_rcv+0xb8>
10064a62:	e1b4      	b.n	10064dce <GAT_clt_rcv+0x422>
10064a64:	79a0      	ldrb	r0, [r4, #6]
10064a66:	2811      	cmp	r0, #17
10064a68:	d100      	bne.n	10064a6c <GAT_clt_rcv+0xc0>
10064a6a:	e1b2      	b.n	10064dd2 <GAT_clt_rcv+0x426>
10064a6c:	7a63      	ldrb	r3, [r4, #9]
10064a6e:	6921      	ldr	r1, [r4, #16]
10064a70:	9108      	str	r1, [sp, #32]
10064a72:	2810      	cmp	r0, #16
10064a74:	d000      	beq.n	10064a78 <GAT_clt_rcv+0xcc>
10064a76:	e1d0      	b.n	10064e1a <GAT_clt_rcv+0x46e>
10064a78:	9306      	str	r3, [sp, #24]
10064a7a:	89a8      	ldrh	r0, [r5, #12]
10064a7c:	1c40      	adds	r0, r0, #1
10064a7e:	b281      	uxth	r1, r0
10064a80:	4628      	mov	r0, r5
10064a82:	f7ee f8bc 	bl	10052bfe <ACL_pkt_read_16b>
10064a86:	9005      	str	r0, [sp, #20]
10064a88:	89a8      	ldrh	r0, [r5, #12]
10064a8a:	1cc0      	adds	r0, r0, #3
10064a8c:	b281      	uxth	r1, r0
10064a8e:	4628      	mov	r0, r5
10064a90:	f7ee f8b5 	bl	10052bfe <ACL_pkt_read_16b>
10064a94:	2600      	movs	r6, #0
10064a96:	89a2      	ldrh	r2, [r4, #12]
10064a98:	8869      	ldrh	r1, [r5, #2]
10064a9a:	1f49      	subs	r1, r1, #5
10064a9c:	4291      	cmp	r1, r2
10064a9e:	9004      	str	r0, [sp, #16]
10064aa0:	d000      	beq.n	10064aa4 <GAT_clt_rcv+0xf8>
10064aa2:	e1cf      	b.n	10064e44 <GAT_clt_rcv+0x498>
10064aa4:	4638      	mov	r0, r7
10064aa6:	9906      	ldr	r1, [sp, #24]
10064aa8:	4348      	muls	r0, r1
10064aaa:	9a08      	ldr	r2, [sp, #32]
10064aac:	1810      	adds	r0, r2, r0
10064aae:	6880      	ldr	r0, [r0, #8]
10064ab0:	8961      	ldrh	r1, [r4, #10]
10064ab2:	1841      	adds	r1, r0, r1
10064ab4:	4628      	mov	r0, r5
10064ab6:	4615      	mov	r5, r2
10064ab8:	f7ff fd20 	bl	100644fc <GAT_att_clt_prep_wr_cmp_data>
10064abc:	9b06      	ldr	r3, [sp, #24]
10064abe:	9003      	str	r0, [sp, #12]
10064ac0:	e1c4      	b.n	10064e4c <GAT_clt_rcv+0x4a0>
10064ac2:	4616      	mov	r6, r2
10064ac4:	e189      	b.n	10064dda <GAT_clt_rcv+0x42e>
10064ac6:	a909      	add	r1, sp, #36	@ 0x24
10064ac8:	aa0f      	add	r2, sp, #60	@ 0x3c
10064aca:	ab0e      	add	r3, sp, #56	@ 0x38
10064acc:	4628      	mov	r0, r5
10064ace:	f7ff fcb1 	bl	10064434 <GAT_att_clt_parse_error_resp>
10064ad2:	2800      	cmp	r0, #0
10064ad4:	d02b      	beq.n	10064b2e <GAT_clt_rcv+0x182>
10064ad6:	4628      	mov	r0, r5
10064ad8:	f7ee f86c 	bl	10052bb4 <ACL_pkt_release>
10064adc:	a80e      	add	r0, sp, #56	@ 0x38
10064ade:	7800      	ldrb	r0, [r0, #0]
10064ae0:	2812      	cmp	r0, #18
10064ae2:	d108      	bne.n	10064af6 <GAT_clt_rcv+0x14a>
10064ae4:	8860      	ldrh	r0, [r4, #2]
10064ae6:	2104      	movs	r1, #4
10064ae8:	f7ef fede 	bl	100548a8 <GAT_att_cmn_get_channel_descr_p>
10064aec:	8881      	ldrh	r1, [r0, #4]
10064aee:	2201      	movs	r2, #1
10064af0:	0252      	lsls	r2, r2, #9
10064af2:	430a      	orrs	r2, r1
10064af4:	8082      	strh	r2, [r0, #4]
10064af6:	79a0      	ldrb	r0, [r4, #6]
10064af8:	2801      	cmp	r0, #1
10064afa:	d104      	bne.n	10064b06 <GAT_clt_rcv+0x15a>
10064afc:	9b08      	ldr	r3, [sp, #32]
10064afe:	8899      	ldrh	r1, [r3, #4]
10064b00:	2204      	movs	r2, #4
10064b02:	4391      	bics	r1, r2
10064b04:	8099      	strh	r1, [r3, #4]
10064b06:	a90e      	add	r1, sp, #56	@ 0x38
10064b08:	7809      	ldrb	r1, [r1, #0]
10064b0a:	290a      	cmp	r1, #10
10064b0c:	d008      	beq.n	10064b20 <GAT_clt_rcv+0x174>
10064b0e:	2907      	cmp	r1, #7
10064b10:	d102      	bne.n	10064b18 <GAT_clt_rcv+0x16c>
10064b12:	280a      	cmp	r0, #10
10064b14:	d100      	bne.n	10064b18 <GAT_clt_rcv+0x16c>
10064b16:	e775      	b.n	10064a04 <GAT_clt_rcv+0x58>
10064b18:	7821      	ldrb	r1, [r4, #0]
10064b1a:	2210      	movs	r2, #16
10064b1c:	430a      	orrs	r2, r1
10064b1e:	7022      	strb	r2, [r4, #0]
10064b20:	280e      	cmp	r0, #14
10064b22:	d100      	bne.n	10064b26 <GAT_clt_rcv+0x17a>
10064b24:	e771      	b.n	10064a0a <GAT_clt_rcv+0x5e>
10064b26:	2810      	cmp	r0, #16
10064b28:	d100      	bne.n	10064b2c <GAT_clt_rcv+0x180>
10064b2a:	e76e      	b.n	10064a0a <GAT_clt_rcv+0x5e>
10064b2c:	e76a      	b.n	10064a04 <GAT_clt_rcv+0x58>
10064b2e:	a809      	add	r0, sp, #36	@ 0x24
10064b30:	7800      	ldrb	r0, [r0, #0]
10064b32:	9007      	str	r0, [sp, #28]
10064b34:	88a3      	ldrh	r3, [r4, #4]
10064b36:	8862      	ldrh	r2, [r4, #2]
10064b38:	a80f      	add	r0, sp, #60	@ 0x3c
10064b3a:	8800      	ldrh	r0, [r0, #0]
10064b3c:	4621      	mov	r1, r4
10064b3e:	ac0e      	add	r4, sp, #56	@ 0x38
10064b40:	7824      	ldrb	r4, [r4, #0]
10064b42:	9000      	str	r0, [sp, #0]
10064b44:	9401      	str	r4, [sp, #4]
10064b46:	460c      	mov	r4, r1
10064b48:	2002      	movs	r0, #2
10064b4a:	4611      	mov	r1, r2
10064b4c:	461a      	mov	r2, r3
10064b4e:	9b07      	ldr	r3, [sp, #28]
10064b50:	f7fe fc10 	bl	10063374 <aci_gatt_clt_error_resp_event_push_noinline>
10064b54:	2800      	cmp	r0, #0
10064b56:	d0be      	beq.n	10064ad6 <GAT_clt_rcv+0x12a>
10064b58:	4606      	mov	r6, r0
10064b5a:	e13e      	b.n	10064dda <GAT_clt_rcv+0x42e>
10064b5c:	88a2      	ldrh	r2, [r4, #4]
10064b5e:	8861      	ldrh	r1, [r4, #2]
10064b60:	200a      	movs	r0, #10
10064b62:	462b      	mov	r3, r5
10064b64:	f7fe fe40 	bl	100637e8 <aci_att_clt_read_by_type_resp_event_push_noinline>
10064b68:	2800      	cmp	r0, #0
10064b6a:	d000      	beq.n	10064b6e <GAT_clt_rcv+0x1c2>
10064b6c:	e12f      	b.n	10064dce <GAT_clt_rcv+0x422>
10064b6e:	4628      	mov	r0, r5
10064b70:	f7ff fc7a 	bl	10064468 <GAT_att_clt_read_type_get_last_attr_h>
10064b74:	e0c8      	b.n	10064d08 <GAT_clt_rcv+0x35c>
10064b76:	88a2      	ldrh	r2, [r4, #4]
10064b78:	8861      	ldrh	r1, [r4, #2]
10064b7a:	200a      	movs	r0, #10
10064b7c:	2b0b      	cmp	r3, #11
10064b7e:	d000      	beq.n	10064b82 <GAT_clt_rcv+0x1d6>
10064b80:	e120      	b.n	10064dc4 <GAT_clt_rcv+0x418>
10064b82:	462b      	mov	r3, r5
10064b84:	f7fe fec6 	bl	10063914 <aci_att_clt_read_multiple_resp_event_push_noinline>
10064b88:	e11f      	b.n	10064dca <GAT_clt_rcv+0x41e>
10064b8a:	88a2      	ldrh	r2, [r4, #4]
10064b8c:	8861      	ldrh	r1, [r4, #2]
10064b8e:	2002      	movs	r0, #2
10064b90:	f7fe ff56 	bl	10063a40 <aci_att_clt_exec_write_resp_event_push_noinline>
10064b94:	2800      	cmp	r0, #0
10064b96:	d000      	beq.n	10064b9a <GAT_clt_rcv+0x1ee>
10064b98:	e119      	b.n	10064dce <GAT_clt_rcv+0x422>
10064b9a:	4628      	mov	r0, r5
10064b9c:	f7ee f80a 	bl	10052bb4 <ACL_pkt_release>
10064ba0:	e117      	b.n	10064dd2 <GAT_clt_rcv+0x426>
10064ba2:	8960      	ldrh	r0, [r4, #10]
10064ba4:	2800      	cmp	r0, #0
10064ba6:	d100      	bne.n	10064baa <GAT_clt_rcv+0x1fe>
10064ba8:	e113      	b.n	10064dd2 <GAT_clt_rcv+0x426>
10064baa:	2600      	movs	r6, #0
10064bac:	7226      	strb	r6, [r4, #8]
10064bae:	200f      	movs	r0, #15
10064bb0:	71a0      	strb	r0, [r4, #6]
10064bb2:	e112      	b.n	10064dda <GAT_clt_rcv+0x42e>
10064bb4:	89a8      	ldrh	r0, [r5, #12]
10064bb6:	1c40      	adds	r0, r0, #1
10064bb8:	b281      	uxth	r1, r0
10064bba:	4628      	mov	r0, r5
10064bbc:	f7ee f81f 	bl	10052bfe <ACL_pkt_read_16b>
10064bc0:	4606      	mov	r6, r0
10064bc2:	2817      	cmp	r0, #23
10064bc4:	d800      	bhi.n	10064bc8 <GAT_clt_rcv+0x21c>
10064bc6:	2617      	movs	r6, #23
10064bc8:	48b3      	ldr	r0, [pc, #716]	@ (10064e98 <__arm_cp.4_3>)
10064bca:	8a00      	ldrh	r0, [r0, #16]
10064bcc:	4286      	cmp	r6, r0
10064bce:	9f08      	ldr	r7, [sp, #32]
10064bd0:	d300      	bcc.n	10064bd4 <GAT_clt_rcv+0x228>
10064bd2:	4606      	mov	r6, r0
10064bd4:	88b8      	ldrh	r0, [r7, #4]
10064bd6:	0700      	lsls	r0, r0, #28
10064bd8:	d514      	bpl.n	10064c04 <GAT_clt_rcv+0x258>
10064bda:	88f8      	ldrh	r0, [r7, #6]
10064bdc:	42b0      	cmp	r0, r6
10064bde:	d011      	beq.n	10064c04 <GAT_clt_rcv+0x258>
10064be0:	463b      	mov	r3, r7
10064be2:	3308      	adds	r3, #8
10064be4:	2042      	movs	r0, #66	@ 0x42
10064be6:	2103      	movs	r1, #3
10064be8:	2202      	movs	r2, #2
10064bea:	f7ff f88d 	bl	10063d08 <aci_hal_fw_error_event_push_noinline>
10064bee:	2800      	cmp	r0, #0
10064bf0:	d000      	beq.n	10064bf4 <GAT_clt_rcv+0x248>
10064bf2:	e0ec      	b.n	10064dce <GAT_clt_rcv+0x422>
10064bf4:	7820      	ldrb	r0, [r4, #0]
10064bf6:	2110      	movs	r1, #16
10064bf8:	4301      	orrs	r1, r0
10064bfa:	7021      	strb	r1, [r4, #0]
10064bfc:	88b8      	ldrh	r0, [r7, #4]
10064bfe:	2108      	movs	r1, #8
10064c00:	4388      	bics	r0, r1
10064c02:	80b8      	strh	r0, [r7, #4]
10064c04:	7820      	ldrb	r0, [r4, #0]
10064c06:	06c0      	lsls	r0, r0, #27
10064c08:	d500      	bpl.n	10064c0c <GAT_clt_rcv+0x260>
10064c0a:	88fe      	ldrh	r6, [r7, #6]
10064c0c:	8861      	ldrh	r1, [r4, #2]
10064c0e:	2002      	movs	r0, #2
10064c10:	4632      	mov	r2, r6
10064c12:	f7fe fd49 	bl	100636a8 <aci_att_exchange_mtu_resp_event_push_noinline>
10064c16:	2800      	cmp	r0, #0
10064c18:	d000      	beq.n	10064c1c <GAT_clt_rcv+0x270>
10064c1a:	e0d8      	b.n	10064dce <GAT_clt_rcv+0x422>
10064c1c:	80fe      	strh	r6, [r7, #6]
10064c1e:	88b8      	ldrh	r0, [r7, #4]
10064c20:	2108      	movs	r1, #8
10064c22:	4301      	orrs	r1, r0
10064c24:	2004      	movs	r0, #4
10064c26:	4381      	bics	r1, r0
10064c28:	80b9      	strh	r1, [r7, #4]
10064c2a:	4620      	mov	r0, r4
10064c2c:	e0dc      	b.n	10064de8 <GAT_clt_rcv+0x43c>
10064c2e:	88a2      	ldrh	r2, [r4, #4]
10064c30:	8861      	ldrh	r1, [r4, #2]
10064c32:	200a      	movs	r0, #10
10064c34:	462b      	mov	r3, r5
10064c36:	f7fe fe9f 	bl	10063978 <aci_att_clt_read_by_group_type_resp_event_push_noinline>
10064c3a:	2800      	cmp	r0, #0
10064c3c:	d000      	beq.n	10064c40 <GAT_clt_rcv+0x294>
10064c3e:	e0c6      	b.n	10064dce <GAT_clt_rcv+0x422>
10064c40:	4628      	mov	r0, r5
10064c42:	f7ff fbc4 	bl	100643ce <GAT_att_clt_read_grp_type_get_last_attr_h>
10064c46:	e00b      	b.n	10064c60 <GAT_clt_rcv+0x2b4>
10064c48:	88a2      	ldrh	r2, [r4, #4]
10064c4a:	8861      	ldrh	r1, [r4, #2]
10064c4c:	200a      	movs	r0, #10
10064c4e:	462b      	mov	r3, r5
10064c50:	f7fe fd98 	bl	10063784 <aci_att_clt_find_by_type_value_resp_event_push_noinline>
10064c54:	2800      	cmp	r0, #0
10064c56:	d000      	beq.n	10064c5a <GAT_clt_rcv+0x2ae>
10064c58:	e0b9      	b.n	10064dce <GAT_clt_rcv+0x422>
10064c5a:	4628      	mov	r0, r5
10064c5c:	f7ff fbdd 	bl	1006441a <GAT_att_clt_find_type_val_get_last_attr_h>
10064c60:	498c      	ldr	r1, [pc, #560]	@ (10064e94 <__arm_cp.4_2>)
10064c62:	4288      	cmp	r0, r1
10064c64:	d153      	bne.n	10064d0e <GAT_clt_rcv+0x362>
10064c66:	e0b4      	b.n	10064dd2 <GAT_clt_rcv+0x426>
10064c68:	4628      	mov	r0, r5
10064c6a:	f000 fb90 	bl	1006538e <GAT_att_clt_read_type_get_len>
10064c6e:	9008      	str	r0, [sp, #32]
10064c70:	8960      	ldrh	r0, [r4, #10]
10064c72:	a90e      	add	r1, sp, #56	@ 0x38
10064c74:	8008      	strh	r0, [r1, #0]
10064c76:	4620      	mov	r0, r4
10064c78:	300c      	adds	r0, #12
10064c7a:	9007      	str	r0, [sp, #28]
10064c7c:	a809      	add	r0, sp, #36	@ 0x24
10064c7e:	300c      	adds	r0, #12
10064c80:	9005      	str	r0, [sp, #20]
10064c82:	a80f      	add	r0, sp, #60	@ 0x3c
10064c84:	1d40      	adds	r0, r0, #5
10064c86:	9006      	str	r0, [sp, #24]
10064c88:	2600      	movs	r6, #0
10064c8a:	b2f7      	uxtb	r7, r6
10064c8c:	aa0f      	add	r2, sp, #60	@ 0x3c
10064c8e:	4628      	mov	r0, r5
10064c90:	4639      	mov	r1, r7
10064c92:	f7ff fbfe 	bl	10064492 <GAT_att_clt_read_type_get_data>
10064c96:	2800      	cmp	r0, #0
10064c98:	d000      	beq.n	10064c9c <GAT_clt_rcv+0x2f0>
10064c9a:	e0a1      	b.n	10064de0 <GAT_clt_rcv+0x434>
10064c9c:	9808      	ldr	r0, [sp, #32]
10064c9e:	2807      	cmp	r0, #7
10064ca0:	d105      	bne.n	10064cae <GAT_clt_rcv+0x302>
10064ca2:	a809      	add	r0, sp, #36	@ 0x24
10064ca4:	2110      	movs	r1, #16
10064ca6:	7401      	strb	r1, [r0, #16]
10064ca8:	2202      	movs	r2, #2
10064caa:	9805      	ldr	r0, [sp, #20]
10064cac:	e003      	b.n	10064cb6 <GAT_clt_rcv+0x30a>
10064cae:	a809      	add	r0, sp, #36	@ 0x24
10064cb0:	2180      	movs	r1, #128	@ 0x80
10064cb2:	7401      	strb	r1, [r0, #16]
10064cb4:	2210      	movs	r2, #16
10064cb6:	9906      	ldr	r1, [sp, #24]
10064cb8:	f7e1 f9cc 	bl	10046054 <BLEPLAT_MemCpy>
10064cbc:	a80e      	add	r0, sp, #56	@ 0x38
10064cbe:	a90f      	add	r1, sp, #60	@ 0x3c
10064cc0:	2202      	movs	r2, #2
10064cc2:	f7e1 f9c7 	bl	10046054 <BLEPLAT_MemCpy>
10064cc6:	a809      	add	r0, sp, #36	@ 0x24
10064cc8:	9907      	ldr	r1, [sp, #28]
10064cca:	f7fd fd9d 	bl	10062808 <UUID_cmp_128bits>
10064cce:	2800      	cmp	r0, #0
10064cd0:	d10d      	bne.n	10064cee <GAT_clt_rcv+0x342>
10064cd2:	88a2      	ldrh	r2, [r4, #4]
10064cd4:	8861      	ldrh	r1, [r4, #2]
10064cd6:	9808      	ldr	r0, [sp, #32]
10064cd8:	9000      	str	r0, [sp, #0]
10064cda:	9501      	str	r5, [sp, #4]
10064cdc:	4347      	muls	r7, r0
10064cde:	1cb8      	adds	r0, r7, #2
10064ce0:	b283      	uxth	r3, r0
10064ce2:	2002      	movs	r0, #2
10064ce4:	f7fe fb8c 	bl	10063400 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>
10064ce8:	2800      	cmp	r0, #0
10064cea:	d000      	beq.n	10064cee <GAT_clt_rcv+0x342>
10064cec:	e082      	b.n	10064df4 <GAT_clt_rcv+0x448>
10064cee:	1c76      	adds	r6, r6, #1
10064cf0:	e7cb      	b.n	10064c8a <GAT_clt_rcv+0x2de>
10064cf2:	88a2      	ldrh	r2, [r4, #4]
10064cf4:	8861      	ldrh	r1, [r4, #2]
10064cf6:	200a      	movs	r0, #10
10064cf8:	462b      	mov	r3, r5
10064cfa:	f7fe fd11 	bl	10063720 <aci_att_clt_find_info_resp_event_push_noinline>
10064cfe:	2800      	cmp	r0, #0
10064d00:	d165      	bne.n	10064dce <GAT_clt_rcv+0x422>
10064d02:	4628      	mov	r0, r5
10064d04:	f7ff fbe0 	bl	100644c8 <GAT_att_clt_find_info_get_last_attr_h>
10064d08:	8961      	ldrh	r1, [r4, #10]
10064d0a:	4288      	cmp	r0, r1
10064d0c:	d261      	bcs.n	10064dd2 <GAT_clt_rcv+0x426>
10064d0e:	1c40      	adds	r0, r0, #1
10064d10:	8120      	strh	r0, [r4, #8]
10064d12:	e061      	b.n	10064dd8 <GAT_clt_rcv+0x42c>
10064d14:	88a2      	ldrh	r2, [r4, #4]
10064d16:	8861      	ldrh	r1, [r4, #2]
10064d18:	200a      	movs	r0, #10
10064d1a:	462b      	mov	r3, r5
10064d1c:	f7fe fd96 	bl	1006384c <aci_att_clt_read_resp_event_push_noinline>
10064d20:	e053      	b.n	10064dca <GAT_clt_rcv+0x41e>
10064d22:	4628      	mov	r0, r5
10064d24:	f000 fb33 	bl	1006538e <GAT_att_clt_read_type_get_len>
10064d28:	4606      	mov	r6, r0
10064d2a:	9406      	str	r4, [sp, #24]
10064d2c:	8860      	ldrh	r0, [r4, #2]
10064d2e:	f7ee fec3 	bl	10053ab8 <GAP_started_gatt_proc>
10064d32:	9008      	str	r0, [sp, #32]
10064d34:	2402      	movs	r4, #2
10064d36:	8868      	ldrh	r0, [r5, #2]
10064d38:	b2a3      	uxth	r3, r4
10064d3a:	4283      	cmp	r3, r0
10064d3c:	d253      	bcs.n	10064de6 <GAT_clt_rcv+0x43a>
10064d3e:	9808      	ldr	r0, [sp, #32]
10064d40:	2801      	cmp	r0, #1
10064d42:	d10e      	bne.n	10064d62 <GAT_clt_rcv+0x3b6>
10064d44:	89a8      	ldrh	r0, [r5, #12]
10064d46:	1900      	adds	r0, r0, r4
10064d48:	b281      	uxth	r1, r0
10064d4a:	af0f      	add	r7, sp, #60	@ 0x3c
10064d4c:	4628      	mov	r0, r5
10064d4e:	4632      	mov	r2, r6
10064d50:	463b      	mov	r3, r7
10064d52:	f7ed ff4b 	bl	10052bec <ACL_pkt_read>
10064d56:	205c      	movs	r0, #92	@ 0x5c
10064d58:	4631      	mov	r1, r6
10064d5a:	463a      	mov	r2, r7
10064d5c:	f7ef f84a 	bl	10053df4 <GAP_internal_evt_handler>
10064d60:	e01a      	b.n	10064d98 <GAT_clt_rcv+0x3ec>
10064d62:	9f06      	ldr	r7, [sp, #24]
10064d64:	88ba      	ldrh	r2, [r7, #4]
10064d66:	8879      	ldrh	r1, [r7, #2]
10064d68:	9600      	str	r6, [sp, #0]
10064d6a:	9501      	str	r5, [sp, #4]
10064d6c:	2002      	movs	r0, #2
10064d6e:	f7fe fb47 	bl	10063400 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>
10064d72:	2800      	cmp	r0, #0
10064d74:	d12b      	bne.n	10064dce <GAT_clt_rcv+0x422>
10064d76:	7f38      	ldrb	r0, [r7, #28]
10064d78:	2810      	cmp	r0, #16
10064d7a:	d10d      	bne.n	10064d98 <GAT_clt_rcv+0x3ec>
10064d7c:	9806      	ldr	r0, [sp, #24]
10064d7e:	8b00      	ldrh	r0, [r0, #24]
10064d80:	4942      	ldr	r1, [pc, #264]	@ (10064e8c <__arm_cp.4_0>)
10064d82:	4288      	cmp	r0, r1
10064d84:	d108      	bne.n	10064d98 <GAT_clt_rcv+0x3ec>
10064d86:	9806      	ldr	r0, [sp, #24]
10064d88:	8840      	ldrh	r0, [r0, #2]
10064d8a:	2104      	movs	r1, #4
10064d8c:	f7ef fd8c 	bl	100548a8 <GAT_att_cmn_get_channel_descr_p>
10064d90:	8881      	ldrh	r1, [r0, #4]
10064d92:	4a3f      	ldr	r2, [pc, #252]	@ (10064e90 <__arm_cp.4_1>)
10064d94:	4011      	ands	r1, r2
10064d96:	8081      	strh	r1, [r0, #4]
10064d98:	19a4      	adds	r4, r4, r6
10064d9a:	e7cc      	b.n	10064d36 <GAT_clt_rcv+0x38a>
10064d9c:	88a2      	ldrh	r2, [r4, #4]
10064d9e:	8861      	ldrh	r1, [r4, #2]
10064da0:	200a      	movs	r0, #10
10064da2:	462b      	mov	r3, r5
10064da4:	f7fe fd84 	bl	100638b0 <aci_att_clt_read_blob_resp_event_push_noinline>
10064da8:	2800      	cmp	r0, #0
10064daa:	d110      	bne.n	10064dce <GAT_clt_rcv+0x422>
10064dac:	9808      	ldr	r0, [sp, #32]
10064dae:	88c0      	ldrh	r0, [r0, #6]
10064db0:	1e41      	subs	r1, r0, #1
10064db2:	8868      	ldrh	r0, [r5, #2]
10064db4:	1e40      	subs	r0, r0, #1
10064db6:	b282      	uxth	r2, r0
10064db8:	4291      	cmp	r1, r2
10064dba:	d80a      	bhi.n	10064dd2 <GAT_clt_rcv+0x426>
10064dbc:	8961      	ldrh	r1, [r4, #10]
10064dbe:	1808      	adds	r0, r1, r0
10064dc0:	8160      	strh	r0, [r4, #10]
10064dc2:	e009      	b.n	10064dd8 <GAT_clt_rcv+0x42c>
10064dc4:	462b      	mov	r3, r5
10064dc6:	f7fe fed9 	bl	10063b7c <aci_att_clt_read_multiple_var_len_resp_event_push_noinline>
10064dca:	2800      	cmp	r0, #0
10064dcc:	d001      	beq.n	10064dd2 <GAT_clt_rcv+0x426>
10064dce:	2684      	movs	r6, #132	@ 0x84
10064dd0:	e003      	b.n	10064dda <GAT_clt_rcv+0x42e>
10064dd2:	4620      	mov	r0, r4
10064dd4:	f000 f879 	bl	10064eca <GAT_clt_stop_proc>
10064dd8:	9e07      	ldr	r6, [sp, #28]
10064dda:	4630      	mov	r0, r6
10064ddc:	b015      	add	sp, #84	@ 0x54
10064dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
10064de0:	a80e      	add	r0, sp, #56	@ 0x38
10064de2:	8800      	ldrh	r0, [r0, #0]
10064de4:	e00a      	b.n	10064dfc <GAT_clt_rcv+0x450>
10064de6:	9806      	ldr	r0, [sp, #24]
10064de8:	f000 f86f 	bl	10064eca <GAT_clt_stop_proc>
10064dec:	4628      	mov	r0, r5
10064dee:	f7ed fee1 	bl	10052bb4 <ACL_pkt_release>
10064df2:	e7f1      	b.n	10064dd8 <GAT_clt_rcv+0x42c>
10064df4:	980e      	ldr	r0, [sp, #56]	@ 0x38
10064df6:	1e40      	subs	r0, r0, #1
10064df8:	a90e      	add	r1, sp, #56	@ 0x38
10064dfa:	8008      	strh	r0, [r1, #0]
10064dfc:	8961      	ldrh	r1, [r4, #10]
10064dfe:	b282      	uxth	r2, r0
10064e00:	428a      	cmp	r2, r1
10064e02:	d202      	bcs.n	10064e0a <GAT_clt_rcv+0x45e>
10064e04:	1c40      	adds	r0, r0, #1
10064e06:	8120      	strh	r0, [r4, #8]
10064e08:	e002      	b.n	10064e10 <GAT_clt_rcv+0x464>
10064e0a:	4620      	mov	r0, r4
10064e0c:	f000 f85d 	bl	10064eca <GAT_clt_stop_proc>
10064e10:	4628      	mov	r0, r5
10064e12:	f7ed fecf 	bl	10052bb4 <ACL_pkt_release>
10064e16:	2600      	movs	r6, #0
10064e18:	e7df      	b.n	10064dda <GAT_clt_rcv+0x42e>
10064e1a:	8961      	ldrh	r1, [r4, #10]
10064e1c:	9a08      	ldr	r2, [sp, #32]
10064e1e:	89a0      	ldrh	r0, [r4, #12]
10064e20:	1840      	adds	r0, r0, r1
10064e22:	8160      	strh	r0, [r4, #10]
10064e24:	b280      	uxth	r0, r0
10064e26:	435f      	muls	r7, r3
10064e28:	19d1      	adds	r1, r2, r7
10064e2a:	8889      	ldrh	r1, [r1, #4]
10064e2c:	4288      	cmp	r0, r1
10064e2e:	d1d3      	bne.n	10064dd8 <GAT_clt_rcv+0x42c>
10064e30:	7a20      	ldrb	r0, [r4, #8]
10064e32:	1e40      	subs	r0, r0, #1
10064e34:	4298      	cmp	r0, r3
10064e36:	d924      	bls.n	10064e82 <GAT_clt_rcv+0x4d6>
10064e38:	2600      	movs	r6, #0
10064e3a:	8166      	strh	r6, [r4, #10]
10064e3c:	7a60      	ldrb	r0, [r4, #9]
10064e3e:	1c40      	adds	r0, r0, #1
10064e40:	7260      	strb	r0, [r4, #9]
10064e42:	e7ca      	b.n	10064dda <GAT_clt_rcv+0x42e>
10064e44:	43f0      	mvns	r0, r6
10064e46:	9003      	str	r0, [sp, #12]
10064e48:	9b06      	ldr	r3, [sp, #24]
10064e4a:	9d08      	ldr	r5, [sp, #32]
10064e4c:	4639      	mov	r1, r7
10064e4e:	4359      	muls	r1, r3
10064e50:	5a6a      	ldrh	r2, [r5, r1]
10064e52:	4628      	mov	r0, r5
10064e54:	9d05      	ldr	r5, [sp, #20]
10064e56:	4295      	cmp	r5, r2
10064e58:	d10b      	bne.n	10064e72 <GAT_clt_rcv+0x4c6>
10064e5a:	4602      	mov	r2, r0
10064e5c:	1841      	adds	r1, r0, r1
10064e5e:	884a      	ldrh	r2, [r1, #2]
10064e60:	8961      	ldrh	r1, [r4, #10]
10064e62:	188a      	adds	r2, r1, r2
10064e64:	9d04      	ldr	r5, [sp, #16]
10064e66:	42aa      	cmp	r2, r5
10064e68:	d103      	bne.n	10064e72 <GAT_clt_rcv+0x4c6>
10064e6a:	4602      	mov	r2, r0
10064e6c:	9803      	ldr	r0, [sp, #12]
10064e6e:	2800      	cmp	r0, #0
10064e70:	d0d5      	beq.n	10064e1e <GAT_clt_rcv+0x472>
10064e72:	7226      	strb	r6, [r4, #8]
10064e74:	200f      	movs	r0, #15
10064e76:	71a0      	strb	r0, [r4, #6]
10064e78:	7820      	ldrb	r0, [r4, #0]
10064e7a:	2110      	movs	r1, #16
10064e7c:	4301      	orrs	r1, r0
10064e7e:	7021      	strb	r1, [r4, #0]
10064e80:	e7ab      	b.n	10064dda <GAT_clt_rcv+0x42e>
10064e82:	2001      	movs	r0, #1
10064e84:	7220      	strb	r0, [r4, #8]
10064e86:	200f      	movs	r0, #15
10064e88:	71a0      	strb	r0, [r4, #6]
10064e8a:	e7a5      	b.n	10064dd8 <GAT_clt_rcv+0x42c>

10064e8c <__arm_cp.4_0>:
10064e8c:	00002b2a 	.word	0x00002b2a

10064e90 <__arm_cp.4_1>:
10064e90:	0000fdff 	.word	0x0000fdff

10064e94 <__arm_cp.4_2>:
10064e94:	0000ffff 	.word	0x0000ffff

10064e98 <__arm_cp.4_3>:
10064e98:	20001108 	.word	0x20001108

10064e9c <GAT_clt_get_proc_per_channel>:
10064e9c:	4a07      	ldr	r2, [pc, #28]	@ (10064ebc <__arm_cp.5_0>)
10064e9e:	6812      	ldr	r2, [r2, #0]
10064ea0:	3248      	adds	r2, #72	@ 0x48
10064ea2:	6812      	ldr	r2, [r2, #0]
10064ea4:	2a00      	cmp	r2, #0
10064ea6:	d007      	beq.n	10064eb8 <GAT_clt_get_proc_per_channel+0x1c>
10064ea8:	8853      	ldrh	r3, [r2, #2]
10064eaa:	4283      	cmp	r3, r0
10064eac:	d102      	bne.n	10064eb4 <GAT_clt_get_proc_per_channel+0x18>
10064eae:	8893      	ldrh	r3, [r2, #4]
10064eb0:	428b      	cmp	r3, r1
10064eb2:	d001      	beq.n	10064eb8 <GAT_clt_get_proc_per_channel+0x1c>
10064eb4:	3220      	adds	r2, #32
10064eb6:	e7f4      	b.n	10064ea2 <GAT_clt_get_proc_per_channel+0x6>
10064eb8:	4610      	mov	r0, r2
10064eba:	4770      	bx	lr

10064ebc <__arm_cp.5_0>:
10064ebc:	200010ac 	.word	0x200010ac

10064ec0 <GAT_att_cmn_get_opcode>:
10064ec0:	b580      	push	{r7, lr}
10064ec2:	8981      	ldrh	r1, [r0, #12]
10064ec4:	f000 fa53 	bl	1006536e <ACL_pkt_read_8b>
10064ec8:	bd80      	pop	{r7, pc}

10064eca <GAT_clt_stop_proc>:
10064eca:	b580      	push	{r7, lr}
10064ecc:	7801      	ldrb	r1, [r0, #0]
10064ece:	2208      	movs	r2, #8
10064ed0:	430a      	orrs	r2, r1
10064ed2:	7002      	strb	r2, [r0, #0]
10064ed4:	200c      	movs	r0, #12
10064ed6:	f7fd faef 	bl	100624b8 <tsk_notify_idx>
10064eda:	f7de fe1e 	bl	10043b1a <BLE_STACK_ProcessRequest>
10064ede:	bd80      	pop	{r7, pc}

10064ee0 <GAT_clt_rcv_corrupted>:
10064ee0:	b510      	push	{r4, lr}
10064ee2:	8804      	ldrh	r4, [r0, #0]
10064ee4:	f7f2 fd1d 	bl	10057922 <L2C_get_cid_from_basic_packet_header>
10064ee8:	4601      	mov	r1, r0
10064eea:	4620      	mov	r0, r4
10064eec:	f7ff ffd6 	bl	10064e9c <GAT_clt_get_proc_per_channel>
10064ef0:	2800      	cmp	r0, #0
10064ef2:	d008      	beq.n	10064f06 <GAT_clt_rcv_corrupted+0x26>
10064ef4:	7801      	ldrb	r1, [r0, #0]
10064ef6:	2218      	movs	r2, #24
10064ef8:	430a      	orrs	r2, r1
10064efa:	7002      	strb	r2, [r0, #0]
10064efc:	200c      	movs	r0, #12
10064efe:	f7fd fadb 	bl	100624b8 <tsk_notify_idx>
10064f02:	f7de fe0a 	bl	10043b1a <BLE_STACK_ProcessRequest>
10064f06:	2000      	movs	r0, #0
10064f08:	bd10      	pop	{r4, pc}
	...

10064f0c <GAT_clt_start_proc>:
10064f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064f0e:	4606      	mov	r6, r0
10064f10:	482e      	ldr	r0, [pc, #184]	@ (10064fcc <__arm_cp.9_0>)
10064f12:	492f      	ldr	r1, [pc, #188]	@ (10064fd0 <__arm_cp.9_1>)
10064f14:	6001      	str	r1, [r0, #0]
10064f16:	4f2f      	ldr	r7, [pc, #188]	@ (10064fd4 <__arm_cp.9_2>)
10064f18:	683d      	ldr	r5, [r7, #0]
10064f1a:	6d2c      	ldr	r4, [r5, #80]	@ 0x50
10064f1c:	2c00      	cmp	r4, #0
10064f1e:	d007      	beq.n	10064f30 <GAT_clt_start_proc+0x24>
10064f20:	88b1      	ldrh	r1, [r6, #4]
10064f22:	8870      	ldrh	r0, [r6, #2]
10064f24:	f7ff ffba 	bl	10064e9c <GAT_clt_get_proc_per_channel>
10064f28:	2800      	cmp	r0, #0
10064f2a:	d003      	beq.n	10064f34 <GAT_clt_start_proc+0x28>
10064f2c:	250c      	movs	r5, #12
10064f2e:	e037      	b.n	10064fa0 <GAT_clt_start_proc+0x94>
10064f30:	2588      	movs	r5, #136	@ 0x88
10064f32:	e035      	b.n	10064fa0 <GAT_clt_start_proc+0x94>
10064f34:	4628      	mov	r0, r5
10064f36:	3050      	adds	r0, #80	@ 0x50
10064f38:	6a21      	ldr	r1, [r4, #32]
10064f3a:	6001      	str	r1, [r0, #0]
10064f3c:	2900      	cmp	r1, #0
10064f3e:	d100      	bne.n	10064f42 <GAT_clt_start_proc+0x36>
10064f40:	6568      	str	r0, [r5, #84]	@ 0x54
10064f42:	4620      	mov	r0, r4
10064f44:	3020      	adds	r0, #32
10064f46:	9000      	str	r0, [sp, #0]
10064f48:	2224      	movs	r2, #36	@ 0x24
10064f4a:	4620      	mov	r0, r4
10064f4c:	4631      	mov	r1, r6
10064f4e:	f7e1 f881 	bl	10046054 <BLEPLAT_MemCpy>
10064f52:	2001      	movs	r0, #1
10064f54:	7020      	strb	r0, [r4, #0]
10064f56:	4620      	mov	r0, r4
10064f58:	f000 f888 	bl	1006506c <GAT_clt_exec_proc>
10064f5c:	4605      	mov	r5, r0
10064f5e:	280c      	cmp	r0, #12
10064f60:	d016      	beq.n	10064f90 <GAT_clt_start_proc+0x84>
10064f62:	2d12      	cmp	r5, #18
10064f64:	d014      	beq.n	10064f90 <GAT_clt_start_proc+0x84>
10064f66:	2d81      	cmp	r5, #129	@ 0x81
10064f68:	d012      	beq.n	10064f90 <GAT_clt_start_proc+0x84>
10064f6a:	2d86      	cmp	r5, #134	@ 0x86
10064f6c:	d010      	beq.n	10064f90 <GAT_clt_start_proc+0x84>
10064f6e:	79a0      	ldrb	r0, [r4, #6]
10064f70:	2801      	cmp	r0, #1
10064f72:	d107      	bne.n	10064f84 <GAT_clt_start_proc+0x78>
10064f74:	88b1      	ldrh	r1, [r6, #4]
10064f76:	8870      	ldrh	r0, [r6, #2]
10064f78:	f7ef fc96 	bl	100548a8 <GAT_att_cmn_get_channel_descr_p>
10064f7c:	8881      	ldrh	r1, [r0, #4]
10064f7e:	2204      	movs	r2, #4
10064f80:	430a      	orrs	r2, r1
10064f82:	8082      	strh	r2, [r0, #4]
10064f84:	2d88      	cmp	r5, #136	@ 0x88
10064f86:	d10d      	bne.n	10064fa4 <GAT_clt_start_proc+0x98>
10064f88:	79b0      	ldrb	r0, [r6, #6]
10064f8a:	3811      	subs	r0, #17
10064f8c:	2802      	cmp	r0, #2
10064f8e:	d209      	bcs.n	10064fa4 <GAT_clt_start_proc+0x98>
10064f90:	2000      	movs	r0, #0
10064f92:	6220      	str	r0, [r4, #32]
10064f94:	6838      	ldr	r0, [r7, #0]
10064f96:	6d40      	ldr	r0, [r0, #84]	@ 0x54
10064f98:	6004      	str	r4, [r0, #0]
10064f9a:	6838      	ldr	r0, [r7, #0]
10064f9c:	9900      	ldr	r1, [sp, #0]
10064f9e:	6541      	str	r1, [r0, #84]	@ 0x54
10064fa0:	4628      	mov	r0, r5
10064fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064fa4:	2500      	movs	r5, #0
10064fa6:	6225      	str	r5, [r4, #32]
10064fa8:	6838      	ldr	r0, [r7, #0]
10064faa:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
10064fac:	6004      	str	r4, [r0, #0]
10064fae:	7820      	ldrb	r0, [r4, #0]
10064fb0:	21fc      	movs	r1, #252	@ 0xfc
10064fb2:	4001      	ands	r1, r0
10064fb4:	1c88      	adds	r0, r1, #2
10064fb6:	7020      	strb	r0, [r4, #0]
10064fb8:	6838      	ldr	r0, [r7, #0]
10064fba:	9900      	ldr	r1, [sp, #0]
10064fbc:	64c1      	str	r1, [r0, #76]	@ 0x4c
10064fbe:	200c      	movs	r0, #12
10064fc0:	f7fd fa7a 	bl	100624b8 <tsk_notify_idx>
10064fc4:	f7de fda9 	bl	10043b1a <BLE_STACK_ProcessRequest>
10064fc8:	e7ea      	b.n	10064fa0 <GAT_clt_start_proc+0x94>
10064fca:	46c0      	nop			@ (mov r8, r8)

10064fcc <__arm_cp.9_0>:
10064fcc:	200014e0 	.word	0x200014e0

10064fd0 <__arm_cp.9_1>:
10064fd0:	10064fd9 	.word	0x10064fd9

10064fd4 <__arm_cp.9_2>:
10064fd4:	200010ac 	.word	0x200010ac

10064fd8 <GAT_clt_exec_full>:
10064fd8:	b570      	push	{r4, r5, r6, lr}
10064fda:	4d23      	ldr	r5, [pc, #140]	@ (10065068 <__arm_cp.10_0>)
10064fdc:	6828      	ldr	r0, [r5, #0]
10064fde:	6c86      	ldr	r6, [r0, #72]	@ 0x48
10064fe0:	2e00      	cmp	r6, #0
10064fe2:	d040      	beq.n	10065066 <GAT_clt_exec_full+0x8e>
10064fe4:	4634      	mov	r4, r6
10064fe6:	6a36      	ldr	r6, [r6, #32]
10064fe8:	7820      	ldrb	r0, [r4, #0]
10064fea:	0701      	lsls	r1, r0, #28
10064fec:	d40c      	bmi.n	10065008 <GAT_clt_exec_full+0x30>
10064fee:	0740      	lsls	r0, r0, #29
10064ff0:	d4f6      	bmi.n	10064fe0 <GAT_clt_exec_full+0x8>
10064ff2:	4620      	mov	r0, r4
10064ff4:	f000 f83a 	bl	1006506c <GAT_clt_exec_proc>
10064ff8:	2888      	cmp	r0, #136	@ 0x88
10064ffa:	d1f1      	bne.n	10064fe0 <GAT_clt_exec_full+0x8>
10064ffc:	200c      	movs	r0, #12
10064ffe:	f7fd fa5b 	bl	100624b8 <tsk_notify_idx>
10065002:	f7de fd8a 	bl	10043b1a <BLE_STACK_ProcessRequest>
10065006:	e7eb      	b.n	10064fe0 <GAT_clt_exec_full+0x8>
10065008:	79a1      	ldrb	r1, [r4, #6]
1006500a:	3911      	subs	r1, #17
1006500c:	2902      	cmp	r1, #2
1006500e:	d30a      	bcc.n	10065026 <GAT_clt_exec_full+0x4e>
10065010:	06c0      	lsls	r0, r0, #27
10065012:	17c0      	asrs	r0, r0, #31
10065014:	2381      	movs	r3, #129	@ 0x81
10065016:	4003      	ands	r3, r0
10065018:	88a2      	ldrh	r2, [r4, #4]
1006501a:	8861      	ldrh	r1, [r4, #2]
1006501c:	2002      	movs	r0, #2
1006501e:	f7fe f975 	bl	1006330c <aci_gatt_clt_proc_complete_event_push_noinline>
10065022:	2800      	cmp	r0, #0
10065024:	d1dc      	bne.n	10064fe0 <GAT_clt_exec_full+0x8>
10065026:	4620      	mov	r0, r4
10065028:	3020      	adds	r0, #32
1006502a:	6829      	ldr	r1, [r5, #0]
1006502c:	6c8b      	ldr	r3, [r1, #72]	@ 0x48
1006502e:	42a3      	cmp	r3, r4
10065030:	d009      	beq.n	10065046 <GAT_clt_exec_full+0x6e>
10065032:	461a      	mov	r2, r3
10065034:	6a1b      	ldr	r3, [r3, #32]
10065036:	42a3      	cmp	r3, r4
10065038:	d1fb      	bne.n	10065032 <GAT_clt_exec_full+0x5a>
1006503a:	6803      	ldr	r3, [r0, #0]
1006503c:	6213      	str	r3, [r2, #32]
1006503e:	2b00      	cmp	r3, #0
10065040:	d108      	bne.n	10065054 <GAT_clt_exec_full+0x7c>
10065042:	3220      	adds	r2, #32
10065044:	e005      	b.n	10065052 <GAT_clt_exec_full+0x7a>
10065046:	460a      	mov	r2, r1
10065048:	3248      	adds	r2, #72	@ 0x48
1006504a:	6803      	ldr	r3, [r0, #0]
1006504c:	6013      	str	r3, [r2, #0]
1006504e:	2b00      	cmp	r3, #0
10065050:	d100      	bne.n	10065054 <GAT_clt_exec_full+0x7c>
10065052:	64ca      	str	r2, [r1, #76]	@ 0x4c
10065054:	2200      	movs	r2, #0
10065056:	6222      	str	r2, [r4, #32]
10065058:	6d49      	ldr	r1, [r1, #84]	@ 0x54
1006505a:	600c      	str	r4, [r1, #0]
1006505c:	2101      	movs	r1, #1
1006505e:	7021      	strb	r1, [r4, #0]
10065060:	6829      	ldr	r1, [r5, #0]
10065062:	6548      	str	r0, [r1, #84]	@ 0x54
10065064:	e7bc      	b.n	10064fe0 <GAT_clt_exec_full+0x8>
10065066:	bd70      	pop	{r4, r5, r6, pc}

10065068 <__arm_cp.10_0>:
10065068:	200010ac 	.word	0x200010ac

1006506c <GAT_clt_exec_proc>:
1006506c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006506e:	b085      	sub	sp, #20
10065070:	4604      	mov	r4, r0
10065072:	8840      	ldrh	r0, [r0, #2]
10065074:	2504      	movs	r5, #4
10065076:	4629      	mov	r1, r5
10065078:	f7ef fc16 	bl	100548a8 <GAT_att_cmn_get_channel_descr_p>
1006507c:	4606      	mov	r6, r0
1006507e:	8880      	ldrh	r0, [r0, #4]
10065080:	0580      	lsls	r0, r0, #22
10065082:	d508      	bpl.n	10065096 <GAT_clt_exec_proc+0x2a>
10065084:	8860      	ldrh	r0, [r4, #2]
10065086:	f7ef fd1d 	bl	10054ac4 <GAT_att_cmn_no_eatt_channels_are_active>
1006508a:	2800      	cmp	r0, #0
1006508c:	d039      	beq.n	10065102 <GAT_clt_exec_proc+0x96>
1006508e:	88b0      	ldrh	r0, [r6, #4]
10065090:	495e      	ldr	r1, [pc, #376]	@ (1006520c <__arm_cp.11_0>)
10065092:	4001      	ands	r1, r0
10065094:	80b1      	strh	r1, [r6, #4]
10065096:	8860      	ldrh	r0, [r4, #2]
10065098:	466a      	mov	r2, sp
1006509a:	8050      	strh	r0, [r2, #2]
1006509c:	88a1      	ldrh	r1, [r4, #4]
1006509e:	8091      	strh	r1, [r2, #4]
100650a0:	79a2      	ldrb	r2, [r4, #6]
100650a2:	1e53      	subs	r3, r2, #1
100650a4:	2b11      	cmp	r3, #17
100650a6:	d900      	bls.n	100650aa <GAT_clt_exec_proc+0x3e>
100650a8:	e067      	b.n	1006517a <GAT_clt_exec_proc+0x10e>
100650aa:	46c0      	nop			@ (mov r8, r8)
100650ac:	447b      	add	r3, pc
100650ae:	791b      	ldrb	r3, [r3, #4]
100650b0:	005b      	lsls	r3, r3, #1
100650b2:	449f      	add	pc, r3
100650b4:	45736864 	.word	0x45736864
100650b8:	8b864040 	.word	0x8b864040
100650bc:	4c4c5645 	.word	0x4c4c5645
100650c0:	0850085a 	.word	0x0850085a
100650c4:	5008      	.short	0x5008
100650c6:	6926      	ldr	r6, [r4, #16]
100650c8:	7a67      	ldrb	r7, [r4, #9]
100650ca:	f7ef fbed 	bl	100548a8 <GAT_att_cmn_get_channel_descr_p>
100650ce:	230c      	movs	r3, #12
100650d0:	437b      	muls	r3, r7
100650d2:	18f1      	adds	r1, r6, r3
100650d4:	888f      	ldrh	r7, [r1, #4]
100650d6:	8962      	ldrh	r2, [r4, #10]
100650d8:	1abf      	subs	r7, r7, r2
100650da:	88c0      	ldrh	r0, [r0, #6]
100650dc:	1f40      	subs	r0, r0, #5
100650de:	b280      	uxth	r0, r0
100650e0:	4287      	cmp	r7, r0
100650e2:	dc00      	bgt.n	100650e6 <GAT_clt_exec_proc+0x7a>
100650e4:	4638      	mov	r0, r7
100650e6:	81a0      	strh	r0, [r4, #12]
100650e8:	5af3      	ldrh	r3, [r6, r3]
100650ea:	466e      	mov	r6, sp
100650ec:	8133      	strh	r3, [r6, #8]
100650ee:	81b0      	strh	r0, [r6, #12]
100650f0:	8848      	ldrh	r0, [r1, #2]
100650f2:	1880      	adds	r0, r0, r2
100650f4:	8170      	strh	r0, [r6, #10]
100650f6:	2016      	movs	r0, #22
100650f8:	7030      	strb	r0, [r6, #0]
100650fa:	6888      	ldr	r0, [r1, #8]
100650fc:	1880      	adds	r0, r0, r2
100650fe:	9004      	str	r0, [sp, #16]
10065100:	e078      	b.n	100651f4 <GAT_clt_exec_proc+0x188>
10065102:	79a1      	ldrb	r1, [r4, #6]
10065104:	200c      	movs	r0, #12
10065106:	2909      	cmp	r1, #9
10065108:	d17d      	bne.n	10065206 <GAT_clt_exec_proc+0x19a>
1006510a:	7f21      	ldrb	r1, [r4, #28]
1006510c:	2910      	cmp	r1, #16
1006510e:	d17a      	bne.n	10065206 <GAT_clt_exec_proc+0x19a>
10065110:	8b21      	ldrh	r1, [r4, #24]
10065112:	4a3f      	ldr	r2, [pc, #252]	@ (10065210 <__arm_cp.11_1>)
10065114:	4291      	cmp	r1, r2
10065116:	d176      	bne.n	10065206 <GAT_clt_exec_proc+0x19a>
10065118:	493e      	ldr	r1, [pc, #248]	@ (10065214 <__arm_cp.11_2>)
1006511a:	6809      	ldr	r1, [r1, #0]
1006511c:	3148      	adds	r1, #72	@ 0x48
1006511e:	6809      	ldr	r1, [r1, #0]
10065120:	2900      	cmp	r1, #0
10065122:	d0b8      	beq.n	10065096 <GAT_clt_exec_proc+0x2a>
10065124:	8862      	ldrh	r2, [r4, #2]
10065126:	884b      	ldrh	r3, [r1, #2]
10065128:	4293      	cmp	r3, r2
1006512a:	d102      	bne.n	10065132 <GAT_clt_exec_proc+0xc6>
1006512c:	798a      	ldrb	r2, [r1, #6]
1006512e:	2a0f      	cmp	r2, #15
10065130:	d169      	bne.n	10065206 <GAT_clt_exec_proc+0x19a>
10065132:	3120      	adds	r1, #32
10065134:	e7f3      	b.n	1006511e <GAT_clt_exec_proc+0xb2>
10065136:	4668      	mov	r0, sp
10065138:	2108      	movs	r1, #8
1006513a:	7001      	strb	r1, [r0, #0]
1006513c:	4836      	ldr	r0, [pc, #216]	@ (10065218 <__arm_cp.11_3>)
1006513e:	e004      	b.n	1006514a <GAT_clt_exec_proc+0xde>
10065140:	4668      	mov	r0, sp
10065142:	2108      	movs	r1, #8
10065144:	7001      	strb	r1, [r0, #0]
10065146:	4620      	mov	r0, r4
10065148:	300c      	adds	r0, #12
1006514a:	9003      	str	r0, [sp, #12]
1006514c:	e03b      	b.n	100651c6 <GAT_clt_exec_proc+0x15a>
1006514e:	2a0b      	cmp	r2, #11
10065150:	d042      	beq.n	100651d8 <GAT_clt_exec_proc+0x16c>
10065152:	2020      	movs	r0, #32
10065154:	e041      	b.n	100651da <GAT_clt_exec_proc+0x16e>
10065156:	4668      	mov	r0, sp
10065158:	2118      	movs	r1, #24
1006515a:	7001      	strb	r1, [r0, #0]
1006515c:	7a21      	ldrb	r1, [r4, #8]
1006515e:	7201      	strb	r1, [r0, #8]
10065160:	e048      	b.n	100651f4 <GAT_clt_exec_proc+0x188>
10065162:	4668      	mov	r0, sp
10065164:	210c      	movs	r1, #12
10065166:	7001      	strb	r1, [r0, #0]
10065168:	e02d      	b.n	100651c6 <GAT_clt_exec_proc+0x15a>
1006516a:	4668      	mov	r0, sp
1006516c:	2112      	movs	r1, #18
1006516e:	7001      	strb	r1, [r0, #0]
10065170:	68a0      	ldr	r0, [r4, #8]
10065172:	68e1      	ldr	r1, [r4, #12]
10065174:	9002      	str	r0, [sp, #8]
10065176:	9103      	str	r1, [sp, #12]
10065178:	e03c      	b.n	100651f4 <GAT_clt_exec_proc+0x188>
1006517a:	2086      	movs	r0, #134	@ 0x86
1006517c:	e043      	b.n	10065206 <GAT_clt_exec_proc+0x19a>
1006517e:	4668      	mov	r0, sp
10065180:	2102      	movs	r1, #2
10065182:	7001      	strb	r1, [r0, #0]
10065184:	e036      	b.n	100651f4 <GAT_clt_exec_proc+0x188>
10065186:	4668      	mov	r0, sp
10065188:	2110      	movs	r1, #16
1006518a:	7001      	strb	r1, [r0, #0]
1006518c:	2100      	movs	r1, #0
1006518e:	43c9      	mvns	r1, r1
10065190:	8141      	strh	r1, [r0, #10]
10065192:	8921      	ldrh	r1, [r4, #8]
10065194:	8101      	strh	r1, [r0, #8]
10065196:	4620      	mov	r0, r4
10065198:	300c      	adds	r0, #12
1006519a:	e023      	b.n	100651e4 <GAT_clt_exec_proc+0x178>
1006519c:	4668      	mov	r0, sp
1006519e:	2106      	movs	r1, #6
100651a0:	7001      	strb	r1, [r0, #0]
100651a2:	2105      	movs	r1, #5
100651a4:	02c9      	lsls	r1, r1, #11
100651a6:	8181      	strh	r1, [r0, #12]
100651a8:	2100      	movs	r1, #0
100651aa:	43c9      	mvns	r1, r1
100651ac:	8141      	strh	r1, [r0, #10]
100651ae:	8921      	ldrh	r1, [r4, #8]
100651b0:	8101      	strh	r1, [r0, #8]
100651b2:	7f20      	ldrb	r0, [r4, #28]
100651b4:	2810      	cmp	r0, #16
100651b6:	d117      	bne.n	100651e8 <GAT_clt_exec_proc+0x17c>
100651b8:	4620      	mov	r0, r4
100651ba:	3018      	adds	r0, #24
100651bc:	9004      	str	r0, [sp, #16]
100651be:	2002      	movs	r0, #2
100651c0:	e016      	b.n	100651f0 <GAT_clt_exec_proc+0x184>
100651c2:	4668      	mov	r0, sp
100651c4:	7005      	strb	r5, [r0, #0]
100651c6:	68a0      	ldr	r0, [r4, #8]
100651c8:	9002      	str	r0, [sp, #8]
100651ca:	e013      	b.n	100651f4 <GAT_clt_exec_proc+0x188>
100651cc:	4668      	mov	r0, sp
100651ce:	210a      	movs	r1, #10
100651d0:	7001      	strb	r1, [r0, #0]
100651d2:	8921      	ldrh	r1, [r4, #8]
100651d4:	8101      	strh	r1, [r0, #8]
100651d6:	e00d      	b.n	100651f4 <GAT_clt_exec_proc+0x188>
100651d8:	200e      	movs	r0, #14
100651da:	4669      	mov	r1, sp
100651dc:	7008      	strb	r0, [r1, #0]
100651de:	7a20      	ldrb	r0, [r4, #8]
100651e0:	7208      	strb	r0, [r1, #8]
100651e2:	68e0      	ldr	r0, [r4, #12]
100651e4:	9003      	str	r0, [sp, #12]
100651e6:	e005      	b.n	100651f4 <GAT_clt_exec_proc+0x188>
100651e8:	4620      	mov	r0, r4
100651ea:	300c      	adds	r0, #12
100651ec:	9004      	str	r0, [sp, #16]
100651ee:	2010      	movs	r0, #16
100651f0:	4669      	mov	r1, sp
100651f2:	81c8      	strh	r0, [r1, #14]
100651f4:	4668      	mov	r0, sp
100651f6:	f7fe ff2d 	bl	10064054 <GAT_att_clt_tx>
100651fa:	2800      	cmp	r0, #0
100651fc:	d103      	bne.n	10065206 <GAT_clt_exec_proc+0x19a>
100651fe:	7820      	ldrb	r0, [r4, #0]
10065200:	4328      	orrs	r0, r5
10065202:	7020      	strb	r0, [r4, #0]
10065204:	2000      	movs	r0, #0
10065206:	b005      	add	sp, #20
10065208:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006520a:	46c0      	nop			@ (mov r8, r8)

1006520c <__arm_cp.11_0>:
1006520c:	0000fdff 	.word	0x0000fdff

10065210 <__arm_cp.11_1>:
10065210:	00002b2a 	.word	0x00002b2a

10065214 <__arm_cp.11_2>:
10065214:	200010ac 	.word	0x200010ac

10065218 <__arm_cp.11_3>:
10065218:	200014e4 	.word	0x200014e4

1006521c <GAT_clt_rcv_srv_initiated>:
1006521c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006521e:	b085      	sub	sp, #20
10065220:	4604      	mov	r4, r0
10065222:	8805      	ldrh	r5, [r0, #0]
10065224:	8980      	ldrh	r0, [r0, #12]
10065226:	1c46      	adds	r6, r0, #1
10065228:	4620      	mov	r0, r4
1006522a:	f7ff fe49 	bl	10064ec0 <GAT_att_cmn_get_opcode>
1006522e:	2823      	cmp	r0, #35	@ 0x23
10065230:	d010      	beq.n	10065254 <GAT_clt_rcv_srv_initiated+0x38>
10065232:	b2b1      	uxth	r1, r6
10065234:	281b      	cmp	r0, #27
10065236:	d122      	bne.n	1006527e <GAT_clt_rcv_srv_initiated+0x62>
10065238:	4620      	mov	r0, r4
1006523a:	f7ed fce0 	bl	10052bfe <ACL_pkt_read_16b>
1006523e:	4601      	mov	r1, r0
10065240:	4628      	mov	r0, r5
10065242:	f000 f85b 	bl	100652fc <GAT_clt_check_security>
10065246:	2800      	cmp	r0, #0
10065248:	d03d      	beq.n	100652c6 <GAT_clt_rcv_srv_initiated+0xaa>
1006524a:	4620      	mov	r0, r4
1006524c:	f7ed fcb2 	bl	10052bb4 <ACL_pkt_release>
10065250:	2500      	movs	r5, #0
10065252:	e050      	b.n	100652f6 <GAT_clt_rcv_srv_initiated+0xda>
10065254:	8867      	ldrh	r7, [r4, #2]
10065256:	b2b1      	uxth	r1, r6
10065258:	4620      	mov	r0, r4
1006525a:	42b9      	cmp	r1, r7
1006525c:	d22a      	bcs.n	100652b4 <GAT_clt_rcv_srv_initiated+0x98>
1006525e:	f7ed fcce 	bl	10052bfe <ACL_pkt_read_16b>
10065262:	4601      	mov	r1, r0
10065264:	4628      	mov	r0, r5
10065266:	f000 f849 	bl	100652fc <GAT_clt_check_security>
1006526a:	2800      	cmp	r0, #0
1006526c:	d1ed      	bne.n	1006524a <GAT_clt_rcv_srv_initiated+0x2e>
1006526e:	1cb0      	adds	r0, r6, #2
10065270:	b281      	uxth	r1, r0
10065272:	4620      	mov	r0, r4
10065274:	f7ed fcc3 	bl	10052bfe <ACL_pkt_read_16b>
10065278:	1830      	adds	r0, r6, r0
1006527a:	1d06      	adds	r6, r0, #4
1006527c:	e7eb      	b.n	10065256 <GAT_clt_rcv_srv_initiated+0x3a>
1006527e:	4620      	mov	r0, r4
10065280:	f7ed fcbd 	bl	10052bfe <ACL_pkt_read_16b>
10065284:	4601      	mov	r1, r0
10065286:	4628      	mov	r0, r5
10065288:	f000 f838 	bl	100652fc <GAT_clt_check_security>
1006528c:	2800      	cmp	r0, #0
1006528e:	d024      	beq.n	100652da <GAT_clt_rcv_srv_initiated+0xbe>
10065290:	466e      	mov	r6, sp
10065292:	8075      	strh	r5, [r6, #2]
10065294:	4620      	mov	r0, r4
10065296:	f7f2 fb44 	bl	10057922 <L2C_get_cid_from_basic_packet_header>
1006529a:	80b0      	strh	r0, [r6, #4]
1006529c:	201e      	movs	r0, #30
1006529e:	7030      	strb	r0, [r6, #0]
100652a0:	4630      	mov	r0, r6
100652a2:	f7fe fed7 	bl	10064054 <GAT_att_clt_tx>
100652a6:	4605      	mov	r5, r0
100652a8:	2800      	cmp	r0, #0
100652aa:	d120      	bne.n	100652ee <GAT_clt_rcv_srv_initiated+0xd2>
100652ac:	4620      	mov	r0, r4
100652ae:	f7ed fc81 	bl	10052bb4 <ACL_pkt_release>
100652b2:	e01c      	b.n	100652ee <GAT_clt_rcv_srv_initiated+0xd2>
100652b4:	f7f2 fb35 	bl	10057922 <L2C_get_cid_from_basic_packet_header>
100652b8:	4602      	mov	r2, r0
100652ba:	200a      	movs	r0, #10
100652bc:	4629      	mov	r1, r5
100652be:	4623      	mov	r3, r4
100652c0:	f7fe f9c0 	bl	10063644 <aci_gatt_clt_multi_notification_int_event_push_noinline>
100652c4:	e012      	b.n	100652ec <GAT_clt_rcv_srv_initiated+0xd0>
100652c6:	4620      	mov	r0, r4
100652c8:	f7f2 fb2b 	bl	10057922 <L2C_get_cid_from_basic_packet_header>
100652cc:	4602      	mov	r2, r0
100652ce:	200a      	movs	r0, #10
100652d0:	4629      	mov	r1, r5
100652d2:	4623      	mov	r3, r4
100652d4:	f7fd ffe8 	bl	100632a8 <aci_gatt_clt_notification_event_push_noinline>
100652d8:	e008      	b.n	100652ec <GAT_clt_rcv_srv_initiated+0xd0>
100652da:	4620      	mov	r0, r4
100652dc:	f7f2 fb21 	bl	10057922 <L2C_get_cid_from_basic_packet_header>
100652e0:	4602      	mov	r2, r0
100652e2:	200a      	movs	r0, #10
100652e4:	4629      	mov	r1, r5
100652e6:	4623      	mov	r3, r4
100652e8:	f7fd ffac 	bl	10063244 <aci_gatt_clt_indication_event_push_noinline>
100652ec:	4605      	mov	r5, r0
100652ee:	2d00      	cmp	r5, #0
100652f0:	d001      	beq.n	100652f6 <GAT_clt_rcv_srv_initiated+0xda>
100652f2:	207b      	movs	r0, #123	@ 0x7b
100652f4:	43c5      	mvns	r5, r0
100652f6:	b2e8      	uxtb	r0, r5
100652f8:	b005      	add	sp, #20
100652fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

100652fc <GAT_clt_check_security>:
100652fc:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
100652fe:	4604      	mov	r4, r0
10065300:	f000 f822 	bl	10065348 <GAT_clt_find_sec_level_entry_p>
10065304:	4605      	mov	r5, r0
10065306:	2800      	cmp	r0, #0
10065308:	d106      	bne.n	10065318 <GAT_clt_check_security+0x1c>
1006530a:	480e      	ldr	r0, [pc, #56]	@ (10065344 <__arm_cp.13_0>)
1006530c:	4601      	mov	r1, r0
1006530e:	f000 f81b 	bl	10065348 <GAT_clt_find_sec_level_entry_p>
10065312:	4605      	mov	r5, r0
10065314:	2800      	cmp	r0, #0
10065316:	d002      	beq.n	1006531e <GAT_clt_check_security+0x22>
10065318:	7828      	ldrb	r0, [r5, #0]
1006531a:	2802      	cmp	r0, #2
1006531c:	d201      	bcs.n	10065322 <GAT_clt_check_security+0x26>
1006531e:	2000      	movs	r0, #0
10065320:	e00d      	b.n	1006533e <GAT_clt_check_security+0x42>
10065322:	a903      	add	r1, sp, #12
10065324:	aa02      	add	r2, sp, #8
10065326:	ab01      	add	r3, sp, #4
10065328:	4620      	mov	r0, r4
1006532a:	f7fc fedc 	bl	100620e6 <smp_sap_get_security_level>
1006532e:	2800      	cmp	r0, #0
10065330:	d104      	bne.n	1006533c <GAT_clt_check_security+0x40>
10065332:	7828      	ldrb	r0, [r5, #0]
10065334:	a902      	add	r1, sp, #8
10065336:	7809      	ldrb	r1, [r1, #0]
10065338:	4281      	cmp	r1, r0
1006533a:	d2f0      	bcs.n	1006531e <GAT_clt_check_security+0x22>
1006533c:	20c0      	movs	r0, #192	@ 0xc0
1006533e:	b004      	add	sp, #16
10065340:	bdb0      	pop	{r4, r5, r7, pc}
10065342:	46c0      	nop			@ (mov r8, r8)

10065344 <__arm_cp.13_0>:
10065344:	0000ffff 	.word	0x0000ffff

10065348 <GAT_clt_find_sec_level_entry_p>:
10065348:	4a07      	ldr	r2, [pc, #28]	@ (10065368 <__arm_cp.15_0>)
1006534a:	6812      	ldr	r2, [r2, #0]
1006534c:	3258      	adds	r2, #88	@ 0x58
1006534e:	6812      	ldr	r2, [r2, #0]
10065350:	2a00      	cmp	r2, #0
10065352:	d007      	beq.n	10065364 <GAT_clt_find_sec_level_entry_p+0x1c>
10065354:	8893      	ldrh	r3, [r2, #4]
10065356:	4283      	cmp	r3, r0
10065358:	d102      	bne.n	10065360 <GAT_clt_find_sec_level_entry_p+0x18>
1006535a:	8853      	ldrh	r3, [r2, #2]
1006535c:	428b      	cmp	r3, r1
1006535e:	d001      	beq.n	10065364 <GAT_clt_find_sec_level_entry_p+0x1c>
10065360:	3208      	adds	r2, #8
10065362:	e7f4      	b.n	1006534e <GAT_clt_find_sec_level_entry_p+0x6>
10065364:	4610      	mov	r0, r2
10065366:	4770      	bx	lr

10065368 <__arm_cp.15_0>:
10065368:	200010ac 	.word	0x200010ac

1006536c <GAT_clt_exec_empty>:
1006536c:	4770      	bx	lr

1006536e <ACL_pkt_read_8b>:
1006536e:	b51c      	push	{r2, r3, r4, lr}
10065370:	291f      	cmp	r1, #31
10065372:	d803      	bhi.n	1006537c <ACL_pkt_read_8b+0xe>
10065374:	aa01      	add	r2, sp, #4
10065376:	8011      	strh	r1, [r2, #0]
10065378:	6840      	ldr	r0, [r0, #4]
1006537a:	e005      	b.n	10065388 <ACL_pkt_read_8b+0x1a>
1006537c:	6840      	ldr	r0, [r0, #4]
1006537e:	ac01      	add	r4, sp, #4
10065380:	4622      	mov	r2, r4
10065382:	f7fa f932 	bl	1005f5ea <Mem_Buff_get_buff_off>
10065386:	8821      	ldrh	r1, [r4, #0]
10065388:	1840      	adds	r0, r0, r1
1006538a:	7900      	ldrb	r0, [r0, #4]
1006538c:	bd1c      	pop	{r2, r3, r4, pc}

1006538e <GAT_att_clt_read_type_get_len>:
1006538e:	b580      	push	{r7, lr}
10065390:	8981      	ldrh	r1, [r0, #12]
10065392:	1c49      	adds	r1, r1, #1
10065394:	b289      	uxth	r1, r1
10065396:	f7ff ffea 	bl	1006536e <ACL_pkt_read_8b>
1006539a:	bd80      	pop	{r7, pc}

1006539c <L2C_cos_process_cfc_mode_command_ucfg_weak>:
1006539c:	2000      	movs	r0, #0
1006539e:	4770      	bx	lr

100653a0 <L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak>:
100653a0:	2000      	movs	r0, #0
100653a2:	4770      	bx	lr

100653a4 <l2c_cos_hndl_incoming_le_frame_ucfg_weak>:
100653a4:	b580      	push	{r7, lr}
100653a6:	6841      	ldr	r1, [r0, #4]
100653a8:	7800      	ldrb	r0, [r0, #0]
100653aa:	f7f2 fab5 	bl	10057918 <l2c_release_unexpected_acl_packet>
100653ae:	2000      	movs	r0, #0
100653b0:	bd80      	pop	{r7, pc}

100653b2 <l2c_cos_sdu_reassembly_tsk_ucfg_weak>:
100653b2:	4770      	bx	lr

100653b4 <llc_big_brc_mem_alloc_ucfg_weak>:
100653b4:	4770      	bx	lr

100653b6 <llc_big_sync_mem_alloc_ucfg_weak>:
100653b6:	4770      	bx	lr

100653b8 <llc_cig_cmn_mem_alloc_ucfg_weak>:
100653b8:	4770      	bx	lr

100653ba <llc_conn_cancel_slot>:
100653ba:	b570      	push	{r4, r5, r6, lr}
100653bc:	4604      	mov	r4, r0
100653be:	2030      	movs	r0, #48	@ 0x30
100653c0:	5c25      	ldrb	r5, [r4, r0]
100653c2:	8f60      	ldrh	r0, [r4, #58]	@ 0x3a
100653c4:	f7f2 fe65 	bl	10058092 <llc_cig_cmn_terminate_cises_on_acl_ucfg_weak>
100653c8:	20ff      	movs	r0, #255	@ 0xff
100653ca:	3012      	adds	r0, #18
100653cc:	1826      	adds	r6, r4, r0
100653ce:	4628      	mov	r0, r5
100653d0:	f000 ff1e 	bl	10066210 <llc_pscan_wr_check_pawr_active_ucfg_weak>
100653d4:	2800      	cmp	r0, #0
100653d6:	d004      	beq.n	100653e2 <llc_conn_cancel_slot+0x28>
100653d8:	3430      	adds	r4, #48	@ 0x30
100653da:	7c60      	ldrb	r0, [r4, #17]
100653dc:	2101      	movs	r1, #1
100653de:	f7f9 fe7f 	bl	1005f0e0 <LL_sched_set_per_state>
100653e2:	2000      	movs	r0, #0
100653e4:	7030      	strb	r0, [r6, #0]
100653e6:	2015      	movs	r0, #21
100653e8:	f7fd f866 	bl	100624b8 <tsk_notify_idx>
100653ec:	f7de fb95 	bl	10043b1a <BLE_STACK_ProcessRequest>
100653f0:	bd70      	pop	{r4, r5, r6, pc}

100653f2 <llc_conn_program_slot>:
100653f2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
100653f4:	4604      	mov	r4, r0
100653f6:	f7e2 f80a 	bl	1004740e <BLEPLAT_CNTR_PacketGetDataPtr>
100653fa:	4605      	mov	r5, r0
100653fc:	2101      	movs	r1, #1
100653fe:	4620      	mov	r0, r4
10065400:	f7f3 f8e8 	bl	100585d4 <llc_conn_get_ctrl_pdu_data_p>
10065404:	4626      	mov	r6, r4
10065406:	362c      	adds	r6, #44	@ 0x2c
10065408:	4621      	mov	r1, r4
1006540a:	3128      	adds	r1, #40	@ 0x28
1006540c:	428d      	cmp	r5, r1
1006540e:	d010      	beq.n	10065432 <llc_conn_program_slot+0x40>
10065410:	4285      	cmp	r5, r0
10065412:	d00e      	beq.n	10065432 <llc_conn_program_slot+0x40>
10065414:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
10065416:	4620      	mov	r0, r4
10065418:	f7f3 f830 	bl	1005847c <llc_conn_copy_tx_data_packet>
1006541c:	2101      	movs	r1, #1
1006541e:	4620      	mov	r0, r4
10065420:	f7f3 f8de 	bl	100585e0 <llc_conn_get_enc_on>
10065424:	2801      	cmp	r0, #1
10065426:	d104      	bne.n	10065432 <llc_conn_program_slot+0x40>
10065428:	7868      	ldrb	r0, [r5, #1]
1006542a:	2800      	cmp	r0, #0
1006542c:	d001      	beq.n	10065432 <llc_conn_program_slot+0x40>
1006542e:	1d00      	adds	r0, r0, #4
10065430:	7068      	strb	r0, [r5, #1]
10065432:	4625      	mov	r5, r4
10065434:	35d0      	adds	r5, #208	@ 0xd0
10065436:	7830      	ldrb	r0, [r6, #0]
10065438:	2803      	cmp	r0, #3
1006543a:	d113      	bne.n	10065464 <llc_conn_program_slot+0x72>
1006543c:	a801      	add	r0, sp, #4
1006543e:	f7f9 fc4d 	bl	1005ecdc <LL_sched_anchorstretch>
10065442:	2801      	cmp	r0, #1
10065444:	d006      	beq.n	10065454 <llc_conn_program_slot+0x62>
10065446:	2800      	cmp	r0, #0
10065448:	d10a      	bne.n	10065460 <llc_conn_program_slot+0x6e>
1006544a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
1006544c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
1006544e:	0049      	lsls	r1, r1, #1
10065450:	1808      	adds	r0, r1, r0
10065452:	e006      	b.n	10065462 <llc_conn_program_slot+0x70>
10065454:	6d21      	ldr	r1, [r4, #80]	@ 0x50
10065456:	9801      	ldr	r0, [sp, #4]
10065458:	4288      	cmp	r0, r1
1006545a:	d302      	bcc.n	10065462 <llc_conn_program_slot+0x70>
1006545c:	4608      	mov	r0, r1
1006545e:	e000      	b.n	10065462 <llc_conn_program_slot+0x70>
10065460:	6d20      	ldr	r0, [r4, #80]	@ 0x50
10065462:	6068      	str	r0, [r5, #4]
10065464:	4620      	mov	r0, r4
10065466:	f7f3 f8e9 	bl	1005863c <llc_conn_guard_time_for_close_conn_event>
1006546a:	4620      	mov	r0, r4
1006546c:	f7f4 f934 	bl	100596d8 <llc_conn_update_receive_window>
10065470:	6829      	ldr	r1, [r5, #0]
10065472:	3414      	adds	r4, #20
10065474:	4620      	mov	r0, r4
10065476:	f7e2 f912 	bl	1004769e <BLEPLAT_CNTR_SetRcvLen>
1006547a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

1006547c <llc_conn_skip_slot>:
1006547c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006547e:	b089      	sub	sp, #36	@ 0x24
10065480:	2242      	movs	r2, #66	@ 0x42
10065482:	5a85      	ldrh	r5, [r0, r2]
10065484:	6c42      	ldr	r2, [r0, #68]	@ 0x44
10065486:	9201      	str	r2, [sp, #4]
10065488:	1851      	adds	r1, r2, r1
1006548a:	9106      	str	r1, [sp, #24]
1006548c:	2191      	movs	r1, #145	@ 0x91
1006548e:	0049      	lsls	r1, r1, #1
10065490:	1841      	adds	r1, r0, r1
10065492:	9102      	str	r1, [sp, #8]
10065494:	4601      	mov	r1, r0
10065496:	3142      	adds	r1, #66	@ 0x42
10065498:	9105      	str	r1, [sp, #20]
1006549a:	4601      	mov	r1, r0
1006549c:	312d      	adds	r1, #45	@ 0x2d
1006549e:	9103      	str	r1, [sp, #12]
100654a0:	9007      	str	r0, [sp, #28]
100654a2:	309a      	adds	r0, #154	@ 0x9a
100654a4:	9004      	str	r0, [sp, #16]
100654a6:	2000      	movs	r0, #0
100654a8:	9008      	str	r0, [sp, #32]
100654aa:	b2a9      	uxth	r1, r5
100654ac:	2201      	movs	r2, #1
100654ae:	9e07      	ldr	r6, [sp, #28]
100654b0:	4630      	mov	r0, r6
100654b2:	f7f3 fb68 	bl	10058b86 <llc_conn_calc_skip_ucfg_weak>
100654b6:	6cf1      	ldr	r1, [r6, #76]	@ 0x4c
100654b8:	4341      	muls	r1, r0
100654ba:	6c72      	ldr	r2, [r6, #68]	@ 0x44
100654bc:	1854      	adds	r4, r2, r1
100654be:	6474      	str	r4, [r6, #68]	@ 0x44
100654c0:	9908      	ldr	r1, [sp, #32]
100654c2:	1841      	adds	r1, r0, r1
100654c4:	9108      	str	r1, [sp, #32]
100654c6:	182d      	adds	r5, r5, r0
100654c8:	b2af      	uxth	r7, r5
100654ca:	4630      	mov	r0, r6
100654cc:	4639      	mov	r1, r7
100654ce:	f7f3 fb93 	bl	10058bf8 <llc_conn_check_instant_and_set_params>
100654d2:	4606      	mov	r6, r0
100654d4:	2800      	cmp	r0, #0
100654d6:	d102      	bne.n	100654de <llc_conn_skip_slot+0x62>
100654d8:	9806      	ldr	r0, [sp, #24]
100654da:	1a20      	subs	r0, r4, r0
100654dc:	d4e5      	bmi.n	100654aa <llc_conn_skip_slot+0x2e>
100654de:	9c05      	ldr	r4, [sp, #20]
100654e0:	8820      	ldrh	r0, [r4, #0]
100654e2:	42b8      	cmp	r0, r7
100654e4:	d907      	bls.n	100654f6 <llc_conn_skip_slot+0x7a>
100654e6:	2009      	movs	r0, #9
100654e8:	0140      	lsls	r0, r0, #5
100654ea:	9907      	ldr	r1, [sp, #28]
100654ec:	1809      	adds	r1, r1, r0
100654ee:	9802      	ldr	r0, [sp, #8]
100654f0:	8800      	ldrh	r0, [r0, #0]
100654f2:	f7f4 fb2f 	bl	10059b54 <llc_subrate_new_sr_base_event_ucfg_weak>
100654f6:	8025      	strh	r5, [r4, #0]
100654f8:	2e00      	cmp	r6, #0
100654fa:	9d08      	ldr	r5, [sp, #32]
100654fc:	d118      	bne.n	10065530 <llc_conn_skip_slot+0xb4>
100654fe:	9807      	ldr	r0, [sp, #28]
10065500:	6c41      	ldr	r1, [r0, #68]	@ 0x44
10065502:	9a01      	ldr	r2, [sp, #4]
10065504:	1a8f      	subs	r7, r1, r2
10065506:	4639      	mov	r1, r7
10065508:	f7f3 fc0a 	bl	10058d20 <llc_conn_check_supervision_timer>
1006550c:	4606      	mov	r6, r0
1006550e:	2800      	cmp	r0, #0
10065510:	d10e      	bne.n	10065530 <llc_conn_skip_slot+0xb4>
10065512:	9807      	ldr	r0, [sp, #28]
10065514:	4639      	mov	r1, r7
10065516:	f7f3 fb38 	bl	10058b8a <llc_conn_check_ctrl_proc_rsp_timer>
1006551a:	4606      	mov	r6, r0
1006551c:	2800      	cmp	r0, #0
1006551e:	d107      	bne.n	10065530 <llc_conn_skip_slot+0xb4>
10065520:	9807      	ldr	r0, [sp, #28]
10065522:	4639      	mov	r1, r7
10065524:	462a      	mov	r2, r5
10065526:	f7f4 f861 	bl	100595ec <llc_conn_set_taskslot_params>
1006552a:	4606      	mov	r6, r0
1006552c:	2800      	cmp	r0, #0
1006552e:	d007      	beq.n	10065540 <llc_conn_skip_slot+0xc4>
10065530:	9c03      	ldr	r4, [sp, #12]
10065532:	7d20      	ldrb	r0, [r4, #20]
10065534:	f7f9 fdca 	bl	1005f0cc <LL_sched_delete_taskslot>
10065538:	7026      	strb	r6, [r4, #0]
1006553a:	2000      	movs	r0, #0
1006553c:	9904      	ldr	r1, [sp, #16]
1006553e:	8008      	strh	r0, [r1, #0]
10065540:	4628      	mov	r0, r5
10065542:	b009      	add	sp, #36	@ 0x24
10065544:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10065548 <llc_conn_isr>:
10065548:	b5f0      	push	{r4, r5, r6, r7, lr}
1006554a:	b099      	sub	sp, #100	@ 0x64
1006554c:	4607      	mov	r7, r0
1006554e:	8e40      	ldrh	r0, [r0, #50]	@ 0x32
10065550:	1c40      	adds	r0, r0, #1
10065552:	8678      	strh	r0, [r7, #50]	@ 0x32
10065554:	2041      	movs	r0, #65	@ 0x41
10065556:	5c3d      	ldrb	r5, [r7, r0]
10065558:	202d      	movs	r0, #45	@ 0x2d
1006555a:	5c38      	ldrb	r0, [r7, r0]
1006555c:	2800      	cmp	r0, #0
1006555e:	d008      	beq.n	10065572 <llc_conn_isr+0x2a>
10065560:	f7e0 fea5 	bl	100462ae <BLEPLAT_ClearRadioTimerValue>
10065564:	4628      	mov	r0, r5
10065566:	f7f9 fdb1 	bl	1005f0cc <LL_sched_delete_taskslot>
1006556a:	4628      	mov	r0, r5
1006556c:	f7f9 fbbe 	bl	1005ecec <LL_sched_engine>
10065570:	e2a5      	b.n	10065abe <__arm_cp.0_5+0x182>
10065572:	2021      	movs	r0, #33	@ 0x21
10065574:	00c0      	lsls	r0, r0, #3
10065576:	183e      	adds	r6, r7, r0
10065578:	4638      	mov	r0, r7
1006557a:	302c      	adds	r0, #44	@ 0x2c
1006557c:	900d      	str	r0, [sp, #52]	@ 0x34
1006557e:	463c      	mov	r4, r7
10065580:	3480      	adds	r4, #128	@ 0x80
10065582:	4638      	mov	r0, r7
10065584:	30d0      	adds	r0, #208	@ 0xd0
10065586:	9007      	str	r0, [sp, #28]
10065588:	48ea      	ldr	r0, [pc, #936]	@ (10065934 <__arm_cp.0_3>)
1006558a:	6800      	ldr	r0, [r0, #0]
1006558c:	f7e1 ff02 	bl	10047394 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
10065590:	9009      	str	r0, [sp, #36]	@ 0x24
10065592:	2800      	cmp	r0, #0
10065594:	940b      	str	r4, [sp, #44]	@ 0x2c
10065596:	960a      	str	r6, [sp, #40]	@ 0x28
10065598:	9508      	str	r5, [sp, #32]
1006559a:	d040      	beq.n	1006561e <llc_conn_isr+0xd6>
1006559c:	463e      	mov	r6, r7
1006559e:	3614      	adds	r6, #20
100655a0:	4630      	mov	r0, r6
100655a2:	f7e1 ff27 	bl	100473f4 <BLEPLAT_CNTR_PacketClrPllTrig>
100655a6:	4630      	mov	r0, r6
100655a8:	f7e1 ff18 	bl	100473dc <BLEPLAT_CNTR_PacketClrIncChan>
100655ac:	4620      	mov	r0, r4
100655ae:	3008      	adds	r0, #8
100655b0:	900c      	str	r0, [sp, #48]	@ 0x30
100655b2:	7a20      	ldrb	r0, [r4, #8]
100655b4:	0780      	lsls	r0, r0, #30
100655b6:	d445      	bmi.n	10065644 <llc_conn_isr+0xfc>
100655b8:	4638      	mov	r0, r7
100655ba:	f7e1 ff28 	bl	1004740e <BLEPLAT_CNTR_PacketGetDataPtr>
100655be:	4605      	mov	r5, r0
100655c0:	463c      	mov	r4, r7
100655c2:	3428      	adds	r4, #40	@ 0x28
100655c4:	980d      	ldr	r0, [sp, #52]	@ 0x34
100655c6:	7800      	ldrb	r0, [r0, #0]
100655c8:	2100      	movs	r1, #0
100655ca:	9106      	str	r1, [sp, #24]
100655cc:	2803      	cmp	r0, #3
100655ce:	d000      	beq.n	100655d2 <llc_conn_isr+0x8a>
100655d0:	e0a6      	b.n	10065720 <llc_conn_isr+0x1d8>
100655d2:	4630      	mov	r0, r6
100655d4:	f7e1 ff1b 	bl	1004740e <BLEPLAT_CNTR_PacketGetDataPtr>
100655d8:	4603      	mov	r3, r0
100655da:	42a5      	cmp	r5, r4
100655dc:	d015      	beq.n	1006560a <llc_conn_isr+0xc2>
100655de:	7829      	ldrb	r1, [r5, #0]
100655e0:	2003      	movs	r0, #3
100655e2:	460a      	mov	r2, r1
100655e4:	4002      	ands	r2, r0
100655e6:	2a03      	cmp	r2, #3
100655e8:	d10a      	bne.n	10065600 <llc_conn_isr+0xb8>
100655ea:	0689      	lsls	r1, r1, #26
100655ec:	d400      	bmi.n	100655f0 <llc_conn_isr+0xa8>
100655ee:	2002      	movs	r0, #2
100655f0:	5c28      	ldrb	r0, [r5, r0]
100655f2:	2806      	cmp	r0, #6
100655f4:	d104      	bne.n	10065600 <llc_conn_isr+0xb8>
100655f6:	4638      	mov	r0, r7
100655f8:	9305      	str	r3, [sp, #20]
100655fa:	f7f2 ff27 	bl	1005844c <llc_conn_clr_rx_acl_blocked>
100655fe:	9b05      	ldr	r3, [sp, #20]
10065600:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10065602:	6810      	ldr	r0, [r2, #0]
10065604:	2140      	movs	r1, #64	@ 0x40
10065606:	4301      	orrs	r1, r0
10065608:	6011      	str	r1, [r2, #0]
1006560a:	7818      	ldrb	r0, [r3, #0]
1006560c:	7829      	ldrb	r1, [r5, #0]
1006560e:	4301      	orrs	r1, r0
10065610:	06c8      	lsls	r0, r1, #27
10065612:	d474      	bmi.n	100656fe <llc_conn_isr+0x1b6>
10065614:	980c      	ldr	r0, [sp, #48]	@ 0x30
10065616:	7800      	ldrb	r0, [r0, #0]
10065618:	06c0      	lsls	r0, r0, #27
1006561a:	d57d      	bpl.n	10065718 <llc_conn_isr+0x1d0>
1006561c:	e080      	b.n	10065720 <llc_conn_isr+0x1d8>
1006561e:	4638      	mov	r0, r7
10065620:	f7e1 fee8 	bl	100473f4 <BLEPLAT_CNTR_PacketClrPllTrig>
10065624:	4638      	mov	r0, r7
10065626:	f7e1 fed9 	bl	100473dc <BLEPLAT_CNTR_PacketClrIncChan>
1006562a:	a80e      	add	r0, sp, #56	@ 0x38
1006562c:	2600      	movs	r6, #0
1006562e:	7786      	strb	r6, [r0, #30]
10065630:	7606      	strb	r6, [r0, #24]
10065632:	7746      	strb	r6, [r0, #29]
10065634:	4cbf      	ldr	r4, [pc, #764]	@ (10065934 <__arm_cp.0_3>)
10065636:	6820      	ldr	r0, [r4, #0]
10065638:	f7e1 fea0 	bl	1004737c <BLEPLAT_CNTR_IntGetIntStatusTimeout>
1006563c:	2800      	cmp	r0, #0
1006563e:	d010      	beq.n	10065662 <llc_conn_isr+0x11a>
10065640:	2501      	movs	r5, #1
10065642:	e014      	b.n	1006566e <llc_conn_isr+0x126>
10065644:	463d      	mov	r5, r7
10065646:	35a8      	adds	r5, #168	@ 0xa8
10065648:	f7e0 fe31 	bl	100462ae <BLEPLAT_ClearRadioTimerValue>
1006564c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1006564e:	7d70      	ldrb	r0, [r6, #21]
10065650:	f7f9 fd3c 	bl	1005f0cc <LL_sched_delete_taskslot>
10065654:	2000      	movs	r0, #0
10065656:	8028      	strh	r0, [r5, #0]
10065658:	2113      	movs	r1, #19
1006565a:	7071      	strb	r1, [r6, #1]
1006565c:	8360      	strh	r0, [r4, #26]
1006565e:	4634      	mov	r4, r6
10065660:	e1e5      	b.n	10065a2e <__arm_cp.0_5+0xf2>
10065662:	6820      	ldr	r0, [r4, #0]
10065664:	f7e1 fe43 	bl	100472ee <BLEPLAT_CNTR_IntGetIntStatusLenErr>
10065668:	4605      	mov	r5, r0
1006566a:	1e40      	subs	r0, r0, #1
1006566c:	4185      	sbcs	r5, r0
1006566e:	a80e      	add	r0, sp, #56	@ 0x38
10065670:	76c5      	strb	r5, [r0, #27]
10065672:	6820      	ldr	r0, [r4, #0]
10065674:	f7e1 fe99 	bl	100473aa <BLEPLAT_CNTR_IntGetIntStatusTxOk>
10065678:	9006      	str	r0, [sp, #24]
1006567a:	900f      	str	r0, [sp, #60]	@ 0x3c
1006567c:	2d00      	cmp	r5, #0
1006567e:	d01f      	beq.n	100656c0 <llc_conn_isr+0x178>
10065680:	f7e0 fe15 	bl	100462ae <BLEPLAT_ClearRadioTimerValue>
10065684:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
10065686:	68e8      	ldr	r0, [r5, #12]
10065688:	2800      	cmp	r0, #0
1006568a:	d002      	beq.n	10065692 <llc_conn_isr+0x14a>
1006568c:	88c1      	ldrh	r1, [r0, #6]
1006568e:	1c49      	adds	r1, r1, #1
10065690:	80c1      	strh	r1, [r0, #6]
10065692:	6928      	ldr	r0, [r5, #16]
10065694:	2800      	cmp	r0, #0
10065696:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10065698:	9e06      	ldr	r6, [sp, #24]
1006569a:	d00a      	beq.n	100656b2 <llc_conn_isr+0x16a>
1006569c:	980d      	ldr	r0, [sp, #52]	@ 0x34
1006569e:	7d40      	ldrb	r0, [r0, #21]
100656a0:	f7e2 f8f6 	bl	10047890 <BLEPLAT_CNTR_SmGetRemapChan>
100656a4:	0040      	lsls	r0, r0, #1
100656a6:	6929      	ldr	r1, [r5, #16]
100656a8:	1808      	adds	r0, r1, r0
100656aa:	2194      	movs	r1, #148	@ 0x94
100656ac:	5a42      	ldrh	r2, [r0, r1]
100656ae:	1c52      	adds	r2, r2, #1
100656b0:	5242      	strh	r2, [r0, r1]
100656b2:	a80e      	add	r0, sp, #56	@ 0x38
100656b4:	2501      	movs	r5, #1
100656b6:	7605      	strb	r5, [r0, #24]
100656b8:	68a0      	ldr	r0, [r4, #8]
100656ba:	3408      	adds	r4, #8
100656bc:	2300      	movs	r3, #0
100656be:	e0b9      	b.n	10065834 <llc_conn_isr+0x2ec>
100656c0:	6820      	ldr	r0, [r4, #0]
100656c2:	f7e1 fe50 	bl	10047366 <BLEPLAT_CNTR_IntGetIntStatusRxOk>
100656c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
100656c8:	7a11      	ldrb	r1, [r2, #8]
100656ca:	094b      	lsrs	r3, r1, #5
100656cc:	2501      	movs	r5, #1
100656ce:	4629      	mov	r1, r5
100656d0:	4399      	bics	r1, r3
100656d2:	ab0e      	add	r3, sp, #56	@ 0x38
100656d4:	7699      	strb	r1, [r3, #26]
100656d6:	9005      	str	r0, [sp, #20]
100656d8:	900e      	str	r0, [sp, #56]	@ 0x38
100656da:	6820      	ldr	r0, [r4, #0]
100656dc:	4614      	mov	r4, r2
100656de:	3408      	adds	r4, #8
100656e0:	f7e1 fde1 	bl	100472a6 <BLEPLAT_CNTR_IntGetIntStatusCrcErr>
100656e4:	2800      	cmp	r0, #0
100656e6:	d06e      	beq.n	100657c6 <llc_conn_isr+0x27e>
100656e8:	7820      	ldrb	r0, [r4, #0]
100656ea:	06c0      	lsls	r0, r0, #27
100656ec:	9704      	str	r7, [sp, #16]
100656ee:	d479      	bmi.n	100657e4 <llc_conn_isr+0x29c>
100656f0:	f7e1 fd9f 	bl	10047232 <BLEPLAT_CNTR_GlobEnableBlue>
100656f4:	6820      	ldr	r0, [r4, #0]
100656f6:	2110      	movs	r1, #16
100656f8:	4301      	orrs	r1, r0
100656fa:	6021      	str	r1, [r4, #0]
100656fc:	e076      	b.n	100657ec <llc_conn_isr+0x2a4>
100656fe:	9807      	ldr	r0, [sp, #28]
10065700:	6840      	ldr	r0, [r0, #4]
10065702:	9005      	str	r0, [sp, #20]
10065704:	f7e0 fd92 	bl	1004622c <BLEPLAT_GetCurrentSysTime>
10065708:	6c79      	ldr	r1, [r7, #68]	@ 0x44
1006570a:	1a08      	subs	r0, r1, r0
1006570c:	9905      	ldr	r1, [sp, #20]
1006570e:	1840      	adds	r0, r0, r1
10065710:	d402      	bmi.n	10065718 <llc_conn_isr+0x1d0>
10065712:	6f79      	ldr	r1, [r7, #116]	@ 0x74
10065714:	4288      	cmp	r0, r1
10065716:	d203      	bcs.n	10065720 <llc_conn_isr+0x1d8>
10065718:	f7e0 fdc9 	bl	100462ae <BLEPLAT_ClearRadioTimerValue>
1006571c:	2001      	movs	r0, #1
1006571e:	9006      	str	r0, [sp, #24]
10065720:	4638      	mov	r0, r7
10065722:	f7f2 ff84 	bl	1005862e <llc_conn_get_tx_ctrl_pdu_state>
10065726:	2802      	cmp	r0, #2
10065728:	d13d      	bne.n	100657a6 <llc_conn_isr+0x25e>
1006572a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1006572c:	6940      	ldr	r0, [r0, #20]
1006572e:	6800      	ldr	r0, [r0, #0]
10065730:	06c1      	lsls	r1, r0, #27
10065732:	d415      	bmi.n	10065760 <llc_conn_isr+0x218>
10065734:	0640      	lsls	r0, r0, #25
10065736:	d536      	bpl.n	100657a6 <llc_conn_isr+0x25e>
10065738:	980d      	ldr	r0, [sp, #52]	@ 0x34
1006573a:	7d40      	ldrb	r0, [r0, #21]
1006573c:	f7e1 ffe7 	bl	1004770e <BLEPLAT_CNTR_SmEncOff>
10065740:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10065742:	6958      	ldr	r0, [r3, #20]
10065744:	6801      	ldr	r1, [r0, #0]
10065746:	2240      	movs	r2, #64	@ 0x40
10065748:	4391      	bics	r1, r2
1006574a:	6001      	str	r1, [r0, #0]
1006574c:	6898      	ldr	r0, [r3, #8]
1006574e:	2108      	movs	r1, #8
10065750:	4388      	bics	r0, r1
10065752:	6098      	str	r0, [r3, #8]
10065754:	2012      	movs	r0, #18
10065756:	f7fc feaf 	bl	100624b8 <tsk_notify_idx>
1006575a:	f7de f9de 	bl	10043b1a <BLE_STACK_ProcessRequest>
1006575e:	e022      	b.n	100657a6 <llc_conn_isr+0x25e>
10065760:	9505      	str	r5, [sp, #20]
10065762:	2000      	movs	r0, #0
10065764:	900f      	str	r0, [sp, #60]	@ 0x3c
10065766:	900e      	str	r0, [sp, #56]	@ 0x38
10065768:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
1006576a:	7d68      	ldrb	r0, [r5, #21]
1006576c:	f7e1 ffe3 	bl	10047736 <BLEPLAT_CNTR_SmEncOn>
10065770:	7d68      	ldrb	r0, [r5, #21]
10065772:	a90e      	add	r1, sp, #56	@ 0x38
10065774:	f7e2 f9c0 	bl	10047af8 <BLEPLAT_CNTR_SmSetRxCount>
10065778:	7828      	ldrb	r0, [r5, #0]
1006577a:	2803      	cmp	r0, #3
1006577c:	d103      	bne.n	10065786 <llc_conn_isr+0x23e>
1006577e:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065780:	7d40      	ldrb	r0, [r0, #21]
10065782:	f7e2 f9dc 	bl	10047b3e <BLEPLAT_CNTR_SmSetRxCountDirectionBit>
10065786:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10065788:	6958      	ldr	r0, [r3, #20]
1006578a:	6801      	ldr	r1, [r0, #0]
1006578c:	2210      	movs	r2, #16
1006578e:	4391      	bics	r1, r2
10065790:	6001      	str	r1, [r0, #0]
10065792:	6898      	ldr	r0, [r3, #8]
10065794:	2108      	movs	r1, #8
10065796:	4301      	orrs	r1, r0
10065798:	6099      	str	r1, [r3, #8]
1006579a:	2012      	movs	r0, #18
1006579c:	f7fc fe8c 	bl	100624b8 <tsk_notify_idx>
100657a0:	f7de f9bb 	bl	10043b1a <BLE_STACK_ProcessRequest>
100657a4:	9d05      	ldr	r5, [sp, #20]
100657a6:	42a5      	cmp	r5, r4
100657a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
100657aa:	d001      	beq.n	100657b0 <llc_conn_isr+0x268>
100657ac:	8a88      	ldrh	r0, [r1, #20]
100657ae:	82c8      	strh	r0, [r1, #22]
100657b0:	9806      	ldr	r0, [sp, #24]
100657b2:	2800      	cmp	r0, #0
100657b4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
100657b6:	d000      	beq.n	100657ba <llc_conn_isr+0x272>
100657b8:	e136      	b.n	10065a28 <__arm_cp.0_5+0xec>
100657ba:	9807      	ldr	r0, [sp, #28]
100657bc:	6801      	ldr	r1, [r0, #0]
100657be:	4630      	mov	r0, r6
100657c0:	f7e1 ff6d 	bl	1004769e <BLEPLAT_CNTR_SetRcvLen>
100657c4:	e135      	b.n	10065a32 <__arm_cp.0_5+0xf6>
100657c6:	485b      	ldr	r0, [pc, #364]	@ (10065934 <__arm_cp.0_3>)
100657c8:	6800      	ldr	r0, [r0, #0]
100657ca:	f7e1 fd84 	bl	100472d6 <BLEPLAT_CNTR_IntGetIntStatusEncErr>
100657ce:	2800      	cmp	r0, #0
100657d0:	d026      	beq.n	10065820 <llc_conn_isr+0x2d8>
100657d2:	9805      	ldr	r0, [sp, #20]
100657d4:	2800      	cmp	r0, #0
100657d6:	d023      	beq.n	10065820 <llc_conn_isr+0x2d8>
100657d8:	f7e0 fd69 	bl	100462ae <BLEPLAT_ClearRadioTimerValue>
100657dc:	a80e      	add	r0, sp, #56	@ 0x38
100657de:	233d      	movs	r3, #61	@ 0x3d
100657e0:	7783      	strb	r3, [r0, #30]
100657e2:	e023      	b.n	1006582c <llc_conn_isr+0x2e4>
100657e4:	f7e0 fd63 	bl	100462ae <BLEPLAT_ClearRadioTimerValue>
100657e8:	a80e      	add	r0, sp, #56	@ 0x38
100657ea:	7605      	strb	r5, [r0, #24]
100657ec:	4637      	mov	r7, r6
100657ee:	980a      	ldr	r0, [sp, #40]	@ 0x28
100657f0:	68c0      	ldr	r0, [r0, #12]
100657f2:	2800      	cmp	r0, #0
100657f4:	d002      	beq.n	100657fc <llc_conn_isr+0x2b4>
100657f6:	8841      	ldrh	r1, [r0, #2]
100657f8:	1c49      	adds	r1, r1, #1
100657fa:	8041      	strh	r1, [r0, #2]
100657fc:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
100657fe:	6930      	ldr	r0, [r6, #16]
10065800:	2800      	cmp	r0, #0
10065802:	d00a      	beq.n	1006581a <llc_conn_isr+0x2d2>
10065804:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065806:	7d40      	ldrb	r0, [r0, #21]
10065808:	f7e2 f842 	bl	10047890 <BLEPLAT_CNTR_SmGetRemapChan>
1006580c:	0040      	lsls	r0, r0, #1
1006580e:	6931      	ldr	r1, [r6, #16]
10065810:	1808      	adds	r0, r1, r0
10065812:	214a      	movs	r1, #74	@ 0x4a
10065814:	5a42      	ldrh	r2, [r0, r1]
10065816:	1c52      	adds	r2, r2, #1
10065818:	5242      	strh	r2, [r0, r1]
1006581a:	463b      	mov	r3, r7
1006581c:	9f04      	ldr	r7, [sp, #16]
1006581e:	e005      	b.n	1006582c <llc_conn_isr+0x2e4>
10065820:	6820      	ldr	r0, [r4, #0]
10065822:	2110      	movs	r1, #16
10065824:	4388      	bics	r0, r1
10065826:	6020      	str	r0, [r4, #0]
10065828:	2300      	movs	r3, #0
1006582a:	461d      	mov	r5, r3
1006582c:	9e06      	ldr	r6, [sp, #24]
1006582e:	6821      	ldr	r1, [r4, #0]
10065830:	2020      	movs	r0, #32
10065832:	4308      	orrs	r0, r1
10065834:	4271      	negs	r1, r6
10065836:	4171      	adcs	r1, r6
10065838:	0189      	lsls	r1, r1, #6
1006583a:	2240      	movs	r2, #64	@ 0x40
1006583c:	4390      	bics	r0, r2
1006583e:	1840      	adds	r0, r0, r1
10065840:	940c      	str	r4, [sp, #48]	@ 0x30
10065842:	6020      	str	r0, [r4, #0]
10065844:	2d00      	cmp	r5, #0
10065846:	d025      	beq.n	10065894 <llc_conn_isr+0x34c>
10065848:	a80e      	add	r0, sp, #56	@ 0x38
1006584a:	7f80      	ldrb	r0, [r0, #30]
1006584c:	2800      	cmp	r0, #0
1006584e:	d169      	bne.n	10065924 <llc_conn_isr+0x3dc>
10065850:	a80e      	add	r0, sp, #56	@ 0x38
10065852:	7ec0      	ldrb	r0, [r0, #27]
10065854:	2800      	cmp	r0, #0
10065856:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10065858:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
1006585a:	d000      	beq.n	1006585e <llc_conn_isr+0x316>
1006585c:	e0dc      	b.n	10065a18 <__arm_cp.0_5+0xdc>
1006585e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
10065860:	2800      	cmp	r0, #0
10065862:	d100      	bne.n	10065866 <llc_conn_isr+0x31e>
10065864:	e0b6      	b.n	100659d4 <__arm_cp.0_5+0x98>
10065866:	4e34      	ldr	r6, [pc, #208]	@ (10065938 <__arm_cp.0_3+0x4>)
10065868:	6830      	ldr	r0, [r6, #0]
1006586a:	21d8      	movs	r1, #216	@ 0xd8
1006586c:	5c41      	ldrb	r1, [r0, r1]
1006586e:	2901      	cmp	r1, #1
10065870:	d14b      	bne.n	1006590a <llc_conn_isr+0x3c2>
10065872:	6805      	ldr	r5, [r0, #0]
10065874:	f7eb feda 	bl	1005162c <phy_upd_csr_ucfg>
10065878:	2801      	cmp	r0, #1
1006587a:	d000      	beq.n	1006587e <llc_conn_isr+0x336>
1006587c:	e094      	b.n	100659a8 <__arm_cp.0_5+0x6c>
1006587e:	7920      	ldrb	r0, [r4, #4]
10065880:	210e      	movs	r1, #14
10065882:	4341      	muls	r1, r0
10065884:	6830      	ldr	r0, [r6, #0]
10065886:	229c      	movs	r2, #156	@ 0x9c
10065888:	5880      	ldr	r0, [r0, r2]
1006588a:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1006588c:	6940      	ldr	r0, [r0, #20]
1006588e:	1840      	adds	r0, r0, r1
10065890:	79c0      	ldrb	r0, [r0, #7]
10065892:	e08a      	b.n	100659aa <__arm_cp.0_5+0x6e>
10065894:	461c      	mov	r4, r3
10065896:	9202      	str	r2, [sp, #8]
10065898:	4638      	mov	r0, r7
1006589a:	3014      	adds	r0, #20
1006589c:	f7e1 fdb7 	bl	1004740e <BLEPLAT_CNTR_PacketGetDataPtr>
100658a0:	4605      	mov	r5, r0
100658a2:	9011      	str	r0, [sp, #68]	@ 0x44
100658a4:	7801      	ldrb	r1, [r0, #0]
100658a6:	2003      	movs	r0, #3
100658a8:	4001      	ands	r1, r0
100658aa:	ae0e      	add	r6, sp, #56	@ 0x38
100658ac:	9103      	str	r1, [sp, #12]
100658ae:	7571      	strb	r1, [r6, #21]
100658b0:	7829      	ldrb	r1, [r5, #0]
100658b2:	0689      	lsls	r1, r1, #26
100658b4:	d400      	bmi.n	100658b8 <llc_conn_isr+0x370>
100658b6:	2002      	movs	r0, #2
100658b8:	5c28      	ldrb	r0, [r5, r0]
100658ba:	75f0      	strb	r0, [r6, #23]
100658bc:	f7f4 f964 	bl	10059b88 <ll_cpe_get_cpid_from_opcode>
100658c0:	7530      	strb	r0, [r6, #20]
100658c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
100658c4:	6679      	str	r1, [r7, #100]	@ 0x64
100658c6:	2301      	movs	r3, #1
100658c8:	9906      	ldr	r1, [sp, #24]
100658ca:	2900      	cmp	r1, #0
100658cc:	d009      	beq.n	100658e2 <llc_conn_isr+0x39a>
100658ce:	990c      	ldr	r1, [sp, #48]	@ 0x30
100658d0:	6809      	ldr	r1, [r1, #0]
100658d2:	4019      	ands	r1, r3
100658d4:	d005      	beq.n	100658e2 <llc_conn_isr+0x39a>
100658d6:	2616      	movs	r6, #22
100658d8:	f7e0 fce9 	bl	100462ae <BLEPLAT_ClearRadioTimerValue>
100658dc:	a80e      	add	r0, sp, #56	@ 0x38
100658de:	7786      	strb	r6, [r0, #30]
100658e0:	e020      	b.n	10065924 <llc_conn_isr+0x3dc>
100658e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
100658e4:	6949      	ldr	r1, [r1, #20]
100658e6:	7849      	ldrb	r1, [r1, #1]
100658e8:	07c9      	lsls	r1, r1, #31
100658ea:	9a05      	ldr	r2, [sp, #20]
100658ec:	d018      	beq.n	10065920 <llc_conn_isr+0x3d8>
100658ee:	2a00      	cmp	r2, #0
100658f0:	d016      	beq.n	10065920 <llc_conn_isr+0x3d8>
100658f2:	9903      	ldr	r1, [sp, #12]
100658f4:	2903      	cmp	r1, #3
100658f6:	d10e      	bne.n	10065916 <llc_conn_isr+0x3ce>
100658f8:	263d      	movs	r6, #61	@ 0x3d
100658fa:	2814      	cmp	r0, #20
100658fc:	d8ec      	bhi.n	100658d8 <llc_conn_isr+0x390>
100658fe:	4619      	mov	r1, r3
10065900:	4081      	lsls	r1, r0
10065902:	480e      	ldr	r0, [pc, #56]	@ (1006593c <__arm_cp.0_5>)
10065904:	4201      	tst	r1, r0
10065906:	d10b      	bne.n	10065920 <llc_conn_isr+0x3d8>
10065908:	e7e6      	b.n	100658d8 <llc_conn_isr+0x390>
1006590a:	f7e0 fcd0 	bl	100462ae <BLEPLAT_ClearRadioTimerValue>
1006590e:	a80e      	add	r0, sp, #56	@ 0x38
10065910:	2101      	movs	r1, #1
10065912:	7601      	strb	r1, [r0, #24]
10065914:	e05d      	b.n	100659d2 <__arm_cp.0_5+0x96>
10065916:	7868      	ldrb	r0, [r5, #1]
10065918:	2800      	cmp	r0, #0
1006591a:	d001      	beq.n	10065920 <llc_conn_isr+0x3d8>
1006591c:	263d      	movs	r6, #61	@ 0x3d
1006591e:	e7db      	b.n	100658d8 <llc_conn_isr+0x390>
10065920:	2c00      	cmp	r4, #0
10065922:	d00d      	beq.n	10065940 <__arm_cp.0_5+0x4>
10065924:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10065926:	7d60      	ldrb	r0, [r4, #21]
10065928:	f7f9 fbd0 	bl	1005f0cc <LL_sched_delete_taskslot>
1006592c:	a80e      	add	r0, sp, #56	@ 0x38
1006592e:	7f80      	ldrb	r0, [r0, #30]
10065930:	7060      	strb	r0, [r4, #1]
10065932:	e07c      	b.n	10065a2e <__arm_cp.0_5+0xf2>

10065934 <__arm_cp.0_3>:
10065934:	200010f0 	.word	0x200010f0
10065938:	200010f4 	.word	0x200010f4

1006593c <__arm_cp.0_5>:
1006593c:	00100012 	.word	0x00100012
10065940:	9301      	str	r3, [sp, #4]
10065942:	4638      	mov	r0, r7
10065944:	4614      	mov	r4, r2
10065946:	f7e1 fd62 	bl	1004740e <BLEPLAT_CNTR_PacketGetDataPtr>
1006594a:	4606      	mov	r6, r0
1006594c:	a80e      	add	r0, sp, #56	@ 0x38
1006594e:	2100      	movs	r1, #0
10065950:	7701      	strb	r1, [r0, #28]
10065952:	7641      	strb	r1, [r0, #25]
10065954:	9612      	str	r6, [sp, #72]	@ 0x48
10065956:	9106      	str	r1, [sp, #24]
10065958:	9110      	str	r1, [sp, #64]	@ 0x40
1006595a:	2c00      	cmp	r4, #0
1006595c:	980d      	ldr	r0, [sp, #52]	@ 0x34
1006595e:	d100      	bne.n	10065962 <__arm_cp.0_5+0x26>
10065960:	e147      	b.n	10065bf2 <__arm_cp.0_5+0x2b6>
10065962:	7800      	ldrb	r0, [r0, #0]
10065964:	2802      	cmp	r0, #2
10065966:	d113      	bne.n	10065990 <__arm_cp.0_5+0x54>
10065968:	7828      	ldrb	r0, [r5, #0]
1006596a:	7831      	ldrb	r1, [r6, #0]
1006596c:	4301      	orrs	r1, r0
1006596e:	06c8      	lsls	r0, r1, #27
10065970:	d509      	bpl.n	10065986 <__arm_cp.0_5+0x4a>
10065972:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
10065974:	f7e0 fc5a 	bl	1004622c <BLEPLAT_GetCurrentSysTime>
10065978:	6c79      	ldr	r1, [r7, #68]	@ 0x44
1006597a:	1a08      	subs	r0, r1, r0
1006597c:	1900      	adds	r0, r0, r4
1006597e:	d402      	bmi.n	10065986 <__arm_cp.0_5+0x4a>
10065980:	6f79      	ldr	r1, [r7, #116]	@ 0x74
10065982:	4288      	cmp	r0, r1
10065984:	d204      	bcs.n	10065990 <__arm_cp.0_5+0x54>
10065986:	f7e0 fc92 	bl	100462ae <BLEPLAT_ClearRadioTimerValue>
1006598a:	a80e      	add	r0, sp, #56	@ 0x38
1006598c:	2101      	movs	r1, #1
1006598e:	7601      	strb	r1, [r0, #24]
10065990:	786c      	ldrb	r4, [r5, #1]
10065992:	2c00      	cmp	r4, #0
10065994:	d100      	bne.n	10065998 <__arm_cp.0_5+0x5c>
10065996:	e12c      	b.n	10065bf2 <__arm_cp.0_5+0x2b6>
10065998:	980c      	ldr	r0, [sp, #48]	@ 0x30
1006599a:	6800      	ldr	r0, [r0, #0]
1006599c:	2608      	movs	r6, #8
1006599e:	4006      	ands	r6, r0
100659a0:	d000      	beq.n	100659a4 <__arm_cp.0_5+0x68>
100659a2:	e095      	b.n	10065ad0 <__arm_cp.0_5+0x194>
100659a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
100659a6:	e0aa      	b.n	10065afe <__arm_cp.0_5+0x1c2>
100659a8:	2001      	movs	r0, #1
100659aa:	6c7e      	ldr	r6, [r7, #68]	@ 0x44
100659ac:	f7e2 f9cf 	bl	10047d4e <BLEPLAT_CNTR_DemodDelaySt>
100659b0:	1a28      	subs	r0, r5, r0
100659b2:	6478      	str	r0, [r7, #68]	@ 0x44
100659b4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
100659b6:	1b89      	subs	r1, r1, r6
100659b8:	1808      	adds	r0, r1, r0
100659ba:	9a07      	ldr	r2, [sp, #28]
100659bc:	6851      	ldr	r1, [r2, #4]
100659be:	4281      	cmp	r1, r0
100659c0:	d901      	bls.n	100659c6 <__arm_cp.0_5+0x8a>
100659c2:	1a08      	subs	r0, r1, r0
100659c4:	6050      	str	r0, [r2, #4]
100659c6:	2000      	movs	r0, #0
100659c8:	64b8      	str	r0, [r7, #72]	@ 0x48
100659ca:	6378      	str	r0, [r7, #52]	@ 0x34
100659cc:	4638      	mov	r0, r7
100659ce:	f7f3 fe83 	bl	100596d8 <llc_conn_update_receive_window>
100659d2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
100659d4:	a80e      	add	r0, sp, #56	@ 0x38
100659d6:	7e80      	ldrb	r0, [r0, #26]
100659d8:	2801      	cmp	r0, #1
100659da:	d102      	bne.n	100659e2 <__arm_cp.0_5+0xa6>
100659dc:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
100659de:	6678      	str	r0, [r7, #100]	@ 0x64
100659e0:	e004      	b.n	100659ec <__arm_cp.0_5+0xb0>
100659e2:	2011      	movs	r0, #17
100659e4:	f7fc fd68 	bl	100624b8 <tsk_notify_idx>
100659e8:	f7de f897 	bl	10043b1a <BLE_STACK_ProcessRequest>
100659ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
100659ee:	68c0      	ldr	r0, [r0, #12]
100659f0:	2800      	cmp	r0, #0
100659f2:	d002      	beq.n	100659fa <__arm_cp.0_5+0xbe>
100659f4:	8801      	ldrh	r1, [r0, #0]
100659f6:	1c49      	adds	r1, r1, #1
100659f8:	8001      	strh	r1, [r0, #0]
100659fa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
100659fc:	6930      	ldr	r0, [r6, #16]
100659fe:	2800      	cmp	r0, #0
10065a00:	d007      	beq.n	10065a12 <__arm_cp.0_5+0xd6>
10065a02:	7d60      	ldrb	r0, [r4, #21]
10065a04:	f7e1 ff44 	bl	10047890 <BLEPLAT_CNTR_SmGetRemapChan>
10065a08:	0040      	lsls	r0, r0, #1
10065a0a:	6931      	ldr	r1, [r6, #16]
10065a0c:	5a0a      	ldrh	r2, [r1, r0]
10065a0e:	1c52      	adds	r2, r2, #1
10065a10:	520a      	strh	r2, [r1, r0]
10065a12:	7920      	ldrb	r0, [r4, #4]
10065a14:	f7f6 fdab 	bl	1005c56e <LLC_pcl_incr_rx_packets_ucfg_weak>
10065a18:	a80e      	add	r0, sp, #56	@ 0x38
10065a1a:	7e00      	ldrb	r0, [r0, #24]
10065a1c:	2801      	cmp	r0, #1
10065a1e:	d108      	bne.n	10065a32 <__arm_cp.0_5+0xf6>
10065a20:	6828      	ldr	r0, [r5, #0]
10065a22:	2110      	movs	r1, #16
10065a24:	4388      	bics	r0, r1
10065a26:	6028      	str	r0, [r5, #0]
10065a28:	4638      	mov	r0, r7
10065a2a:	f000 fa82 	bl	10065f32 <llc_conn_close_event>
10065a2e:	2601      	movs	r6, #1
10065a30:	e000      	b.n	10065a34 <__arm_cp.0_5+0xf8>
10065a32:	2600      	movs	r6, #0
10065a34:	7d65      	ldrb	r5, [r4, #21]
10065a36:	4628      	mov	r0, r5
10065a38:	f7e1 ff19 	bl	1004786e <BLEPLAT_CNTR_SmGetMode>
10065a3c:	990c      	ldr	r1, [sp, #48]	@ 0x30
10065a3e:	6809      	ldr	r1, [r1, #0]
10065a40:	2800      	cmp	r0, #0
10065a42:	d005      	beq.n	10065a50 <__arm_cp.0_5+0x114>
10065a44:	0748      	lsls	r0, r1, #29
10065a46:	d405      	bmi.n	10065a54 <__arm_cp.0_5+0x118>
10065a48:	4628      	mov	r0, r5
10065a4a:	f7e1 fe60 	bl	1004770e <BLEPLAT_CNTR_SmEncOff>
10065a4e:	e004      	b.n	10065a5a <__arm_cp.0_5+0x11e>
10065a50:	0708      	lsls	r0, r1, #28
10065a52:	d5f9      	bpl.n	10065a48 <__arm_cp.0_5+0x10c>
10065a54:	4628      	mov	r0, r5
10065a56:	f7e1 fe6e 	bl	10047736 <BLEPLAT_CNTR_SmEncOn>
10065a5a:	2e00      	cmp	r6, #0
10065a5c:	d01d      	beq.n	10065a9a <__arm_cp.0_5+0x15e>
10065a5e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10065a60:	69e5      	ldr	r5, [r4, #28]
10065a62:	2d00      	cmp	r5, #0
10065a64:	d015      	beq.n	10065a92 <__arm_cp.0_5+0x156>
10065a66:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10065a68:	7d70      	ldrb	r0, [r6, #21]
10065a6a:	f7e1 fedb 	bl	10047824 <BLEPLAT_CNTR_SmGetEncKeyPtr>
10065a6e:	4602      	mov	r2, r0
10065a70:	4629      	mov	r1, r5
10065a72:	3110      	adds	r1, #16
10065a74:	2301      	movs	r3, #1
10065a76:	4628      	mov	r0, r5
10065a78:	f7fd f831 	bl	10062ade <BLEPLAT_aes128_encrypt>
10065a7c:	7d70      	ldrb	r0, [r6, #21]
10065a7e:	f7e1 febd 	bl	100477fc <BLEPLAT_CNTR_SmGetEncIvPtr>
10065a82:	4601      	mov	r1, r0
10065a84:	3520      	adds	r5, #32
10065a86:	2208      	movs	r2, #8
10065a88:	4628      	mov	r0, r5
10065a8a:	f7fc fe9d 	bl	100627c8 <char_copy>
10065a8e:	2000      	movs	r0, #0
10065a90:	61e0      	str	r0, [r4, #28]
10065a92:	9808      	ldr	r0, [sp, #32]
10065a94:	f7f9 f92a 	bl	1005ecec <LL_sched_engine>
10065a98:	e001      	b.n	10065a9e <__arm_cp.0_5+0x162>
10065a9a:	f7e1 fbca 	bl	10047232 <BLEPLAT_CNTR_GlobEnableBlue>
10065a9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
10065aa0:	2800      	cmp	r0, #0
10065aa2:	d10c      	bne.n	10065abe <__arm_cp.0_5+0x182>
10065aa4:	f7e0 fbba 	bl	1004621c <BLEPLAT_CalculateRSSI>
10065aa8:	287f      	cmp	r0, #127	@ 0x7f
10065aaa:	d005      	beq.n	10065ab8 <__arm_cp.0_5+0x17c>
10065aac:	4605      	mov	r5, r0
10065aae:	f7f9 f81b 	bl	1005eae8 <get_rf_rx_path_compensation_db>
10065ab2:	1828      	adds	r0, r5, r0
10065ab4:	990a      	ldr	r1, [sp, #40]	@ 0x28
10065ab6:	7008      	strb	r0, [r1, #0]
10065ab8:	4638      	mov	r0, r7
10065aba:	f7f6 fd59 	bl	1005c570 <LLC_pcl_update_avg_rssi_ucfg_weak>
10065abe:	2401      	movs	r4, #1
10065ac0:	4620      	mov	r0, r4
10065ac2:	f7fc fd21 	bl	10062508 <tsk_signal_resource_idx>
10065ac6:	f7de f828 	bl	10043b1a <BLE_STACK_ProcessRequest>
10065aca:	4620      	mov	r0, r4
10065acc:	b019      	add	sp, #100	@ 0x64
10065ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
10065ad0:	f7eb fda4 	bl	1005161c <data_length_extension_csr_ucfg>
10065ad4:	2801      	cmp	r0, #1
10065ad6:	d001      	beq.n	10065adc <__arm_cp.0_5+0x1a0>
10065ad8:	201c      	movs	r0, #28
10065ada:	e000      	b.n	10065ade <__arm_cp.0_5+0x1a2>
10065adc:	20fc      	movs	r0, #252	@ 0xfc
10065ade:	4220      	tst	r0, r4
10065ae0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
10065ae2:	d00c      	beq.n	10065afe <__arm_cp.0_5+0x1c2>
10065ae4:	7868      	ldrb	r0, [r5, #1]
10065ae6:	1f00      	subs	r0, r0, #4
10065ae8:	7068      	strb	r0, [r5, #1]
10065aea:	2002      	movs	r0, #2
10065aec:	71a0      	strb	r0, [r4, #6]
10065aee:	2012      	movs	r0, #18
10065af0:	f7fc fce2 	bl	100624b8 <tsk_notify_idx>
10065af4:	f7de f811 	bl	10043b1a <BLE_STACK_ProcessRequest>
10065af8:	a80e      	add	r0, sp, #56	@ 0x38
10065afa:	7d40      	ldrb	r0, [r0, #21]
10065afc:	9003      	str	r0, [sp, #12]
10065afe:	9803      	ldr	r0, [sp, #12]
10065b00:	2803      	cmp	r0, #3
10065b02:	d110      	bne.n	10065b26 <__arm_cp.0_5+0x1ea>
10065b04:	a80e      	add	r0, sp, #56	@ 0x38
10065b06:	7dc5      	ldrb	r5, [r0, #23]
10065b08:	2d02      	cmp	r5, #2
10065b0a:	d117      	bne.n	10065b3c <__arm_cp.0_5+0x200>
10065b0c:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065b0e:	7840      	ldrb	r0, [r0, #1]
10065b10:	2802      	cmp	r0, #2
10065b12:	d113      	bne.n	10065b3c <__arm_cp.0_5+0x200>
10065b14:	a80e      	add	r0, sp, #56	@ 0x38
10065b16:	2101      	movs	r1, #1
10065b18:	7701      	strb	r1, [r0, #28]
10065b1a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10065b1c:	6828      	ldr	r0, [r5, #0]
10065b1e:	2102      	movs	r1, #2
10065b20:	4301      	orrs	r1, r0
10065b22:	6029      	str	r1, [r5, #0]
10065b24:	e042      	b.n	10065bac <__arm_cp.0_5+0x270>
10065b26:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065b28:	7800      	ldrb	r0, [r0, #0]
10065b2a:	2803      	cmp	r0, #3
10065b2c:	d117      	bne.n	10065b5e <__arm_cp.0_5+0x222>
10065b2e:	7a20      	ldrb	r0, [r4, #8]
10065b30:	2800      	cmp	r0, #0
10065b32:	d014      	beq.n	10065b5e <__arm_cp.0_5+0x222>
10065b34:	2002      	movs	r0, #2
10065b36:	9910      	ldr	r1, [sp, #64]	@ 0x40
10065b38:	4301      	orrs	r1, r0
10065b3a:	e04a      	b.n	10065bd2 <__arm_cp.0_5+0x296>
10065b3c:	4638      	mov	r0, r7
10065b3e:	f7f2 fd64 	bl	1005860a <llc_conn_get_rx_ctrl_pdu_full>
10065b42:	2800      	cmp	r0, #0
10065b44:	d021      	beq.n	10065b8a <__arm_cp.0_5+0x24e>
10065b46:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065b48:	7d40      	ldrb	r0, [r0, #21]
10065b4a:	f7e2 f8f1 	bl	10047d30 <BLEPLAT_CNTR_SmToggleNesn>
10065b4e:	2e00      	cmp	r6, #0
10065b50:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10065b52:	d02b      	beq.n	10065bac <__arm_cp.0_5+0x270>
10065b54:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065b56:	7d40      	ldrb	r0, [r0, #21]
10065b58:	f000 fa61 	bl	1006601e <llc_conn_decrement_enc_count_rx>
10065b5c:	e026      	b.n	10065bac <__arm_cp.0_5+0x270>
10065b5e:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065b60:	7846      	ldrb	r6, [r0, #1]
10065b62:	f7eb fd5b 	bl	1005161c <data_length_extension_csr_ucfg>
10065b66:	2801      	cmp	r0, #1
10065b68:	d001      	beq.n	10065b6e <__arm_cp.0_5+0x232>
10065b6a:	251f      	movs	r5, #31
10065b6c:	e001      	b.n	10065b72 <__arm_cp.0_5+0x236>
10065b6e:	9806      	ldr	r0, [sp, #24]
10065b70:	43c5      	mvns	r5, r0
10065b72:	4035      	ands	r5, r6
10065b74:	0628      	lsls	r0, r5, #24
10065b76:	d01e      	beq.n	10065bb6 <__arm_cp.0_5+0x27a>
10065b78:	9806      	ldr	r0, [sp, #24]
10065b7a:	67b8      	str	r0, [r7, #120]	@ 0x78
10065b7c:	f7ec ff2e 	bl	100529dc <isr_Acl_Data_Indication_Queue_Full>
10065b80:	2800      	cmp	r0, #0
10065b82:	d01b      	beq.n	10065bbc <__arm_cp.0_5+0x280>
10065b84:	2002      	movs	r0, #2
10065b86:	9010      	str	r0, [sp, #64]	@ 0x40
10065b88:	e026      	b.n	10065bd8 <__arm_cp.0_5+0x29c>
10065b8a:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065b8c:	7800      	ldrb	r0, [r0, #0]
10065b8e:	2803      	cmp	r0, #3
10065b90:	d108      	bne.n	10065ba4 <__arm_cp.0_5+0x268>
10065b92:	2d27      	cmp	r5, #39	@ 0x27
10065b94:	d106      	bne.n	10065ba4 <__arm_cp.0_5+0x268>
10065b96:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065b98:	7840      	ldrb	r0, [r0, #1]
10065b9a:	280b      	cmp	r0, #11
10065b9c:	d102      	bne.n	10065ba4 <__arm_cp.0_5+0x268>
10065b9e:	a80e      	add	r0, sp, #56	@ 0x38
10065ba0:	2101      	movs	r1, #1
10065ba2:	7741      	strb	r1, [r0, #29]
10065ba4:	a80e      	add	r0, sp, #56	@ 0x38
10065ba6:	2101      	movs	r1, #1
10065ba8:	7641      	strb	r1, [r0, #25]
10065baa:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10065bac:	6828      	ldr	r0, [r5, #0]
10065bae:	2180      	movs	r1, #128	@ 0x80
10065bb0:	4301      	orrs	r1, r0
10065bb2:	6029      	str	r1, [r5, #0]
10065bb4:	e014      	b.n	10065be0 <__arm_cp.0_5+0x2a4>
10065bb6:	9806      	ldr	r0, [sp, #24]
10065bb8:	9010      	str	r0, [sp, #64]	@ 0x40
10065bba:	e011      	b.n	10065be0 <__arm_cp.0_5+0x2a4>
10065bbc:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
10065bbe:	b2ea      	uxtb	r2, r5
10065bc0:	9801      	ldr	r0, [sp, #4]
10065bc2:	f7ec ffd5 	bl	10052b70 <ACL_pkt_get>
10065bc6:	67b8      	str	r0, [r7, #120]	@ 0x78
10065bc8:	2800      	cmp	r0, #0
10065bca:	d001      	beq.n	10065bd0 <__arm_cp.0_5+0x294>
10065bcc:	9901      	ldr	r1, [sp, #4]
10065bce:	e000      	b.n	10065bd2 <__arm_cp.0_5+0x296>
10065bd0:	2102      	movs	r1, #2
10065bd2:	9110      	str	r1, [sp, #64]	@ 0x40
10065bd4:	0788      	lsls	r0, r1, #30
10065bd6:	d503      	bpl.n	10065be0 <__arm_cp.0_5+0x2a4>
10065bd8:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065bda:	7d40      	ldrb	r0, [r0, #21]
10065bdc:	f7e2 f8a8 	bl	10047d30 <BLEPLAT_CNTR_SmToggleNesn>
10065be0:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065be2:	7800      	ldrb	r0, [r0, #0]
10065be4:	8aa1      	ldrh	r1, [r4, #20]
10065be6:	82e1      	strh	r1, [r4, #22]
10065be8:	2120      	movs	r1, #32
10065bea:	4001      	ands	r1, r0
10065bec:	a80e      	add	r0, sp, #56	@ 0x38
10065bee:	7581      	strb	r1, [r0, #22]
10065bf0:	9e12      	ldr	r6, [sp, #72]	@ 0x48
10065bf2:	2101      	movs	r1, #1
10065bf4:	4638      	mov	r0, r7
10065bf6:	9105      	str	r1, [sp, #20]
10065bf8:	f7f2 fcec 	bl	100585d4 <llc_conn_get_ctrl_pdu_data_p>
10065bfc:	4605      	mov	r5, r0
10065bfe:	463b      	mov	r3, r7
10065c00:	3328      	adds	r3, #40	@ 0x28
10065c02:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10065c04:	6801      	ldr	r1, [r0, #0]
10065c06:	2900      	cmp	r1, #0
10065c08:	d011      	beq.n	10065c2e <__arm_cp.0_5+0x2f2>
10065c0a:	7a08      	ldrb	r0, [r1, #8]
10065c0c:	0700      	lsls	r0, r0, #28
10065c0e:	d50e      	bpl.n	10065c2e <__arm_cp.0_5+0x2f2>
10065c10:	69c8      	ldr	r0, [r1, #28]
10065c12:	2800      	cmp	r0, #0
10065c14:	d00b      	beq.n	10065c2e <__arm_cp.0_5+0x2f2>
10065c16:	42ae      	cmp	r6, r5
10065c18:	d009      	beq.n	10065c2e <__arm_cp.0_5+0x2f2>
10065c1a:	429e      	cmp	r6, r3
10065c1c:	d007      	beq.n	10065c2e <__arm_cp.0_5+0x2f2>
10065c1e:	460c      	mov	r4, r1
10065c20:	990c      	ldr	r1, [sp, #48]	@ 0x30
10065c22:	6808      	ldr	r0, [r1, #0]
10065c24:	9a02      	ldr	r2, [sp, #8]
10065c26:	4390      	bics	r0, r2
10065c28:	6008      	str	r0, [r1, #0]
10065c2a:	4621      	mov	r1, r4
10065c2c:	e003      	b.n	10065c36 <__arm_cp.0_5+0x2fa>
10065c2e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10065c30:	2800      	cmp	r0, #0
10065c32:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10065c34:	d017      	beq.n	10065c66 <__arm_cp.0_5+0x32a>
10065c36:	42ae      	cmp	r6, r5
10065c38:	9303      	str	r3, [sp, #12]
10065c3a:	d018      	beq.n	10065c6e <__arm_cp.0_5+0x332>
10065c3c:	429e      	cmp	r6, r3
10065c3e:	d025      	beq.n	10065c8c <__arm_cp.0_5+0x350>
10065c40:	6948      	ldr	r0, [r1, #20]
10065c42:	6188      	str	r0, [r1, #24]
10065c44:	460e      	mov	r6, r1
10065c46:	7b09      	ldrb	r1, [r1, #12]
10065c48:	9d06      	ldr	r5, [sp, #24]
10065c4a:	7335      	strb	r5, [r6, #12]
10065c4c:	8a32      	ldrh	r2, [r6, #16]
10065c4e:	1851      	adds	r1, r2, r1
10065c50:	8231      	strh	r1, [r6, #16]
10065c52:	b28a      	uxth	r2, r1
10065c54:	8873      	ldrh	r3, [r6, #2]
10065c56:	429a      	cmp	r2, r3
10065c58:	d21a      	bcs.n	10065c90 <__arm_cp.0_5+0x354>
10065c5a:	89f2      	ldrh	r2, [r6, #14]
10065c5c:	1851      	adds	r1, r2, r1
10065c5e:	06c9      	lsls	r1, r1, #27
10065c60:	d019      	beq.n	10065c96 <__arm_cp.0_5+0x35a>
10065c62:	4634      	mov	r4, r6
10065c64:	e01a      	b.n	10065c9c <__arm_cp.0_5+0x360>
10065c66:	f7e1 fae4 	bl	10047232 <BLEPLAT_CNTR_GlobEnableBlue>
10065c6a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10065c6c:	e0e3      	b.n	10065e36 <__arm_cp.0_5+0x4fa>
10065c6e:	460c      	mov	r4, r1
10065c70:	2103      	movs	r1, #3
10065c72:	4638      	mov	r0, r7
10065c74:	f7f2 ff76 	bl	10058b64 <llc_conn_set_tx_ctrl_pdu_state>
10065c78:	4638      	mov	r0, r7
10065c7a:	f7e1 fba2 	bl	100473c2 <BLEPLAT_CNTR_PacketClrCteSamplingEn>
10065c7e:	78a8      	ldrb	r0, [r5, #2]
10065c80:	2827      	cmp	r0, #39	@ 0x27
10065c82:	d10e      	bne.n	10065ca2 <__arm_cp.0_5+0x366>
10065c84:	a80e      	add	r0, sp, #56	@ 0x38
10065c86:	2101      	movs	r1, #1
10065c88:	7741      	strb	r1, [r0, #29]
10065c8a:	e00a      	b.n	10065ca2 <__arm_cp.0_5+0x366>
10065c8c:	460c      	mov	r4, r1
10065c8e:	e008      	b.n	10065ca2 <__arm_cp.0_5+0x366>
10065c90:	69f4      	ldr	r4, [r6, #28]
10065c92:	2504      	movs	r5, #4
10065c94:	e002      	b.n	10065c9c <__arm_cp.0_5+0x360>
10065c96:	6800      	ldr	r0, [r0, #0]
10065c98:	4634      	mov	r4, r6
10065c9a:	61b0      	str	r0, [r6, #24]
10065c9c:	9810      	ldr	r0, [sp, #64]	@ 0x40
10065c9e:	4328      	orrs	r0, r5
10065ca0:	9010      	str	r0, [sp, #64]	@ 0x40
10065ca2:	4638      	mov	r0, r7
10065ca4:	f7f2 fcbd 	bl	10058622 <llc_conn_get_tx_acl_blocked>
10065ca8:	4605      	mov	r5, r0
10065caa:	4638      	mov	r0, r7
10065cac:	f7f2 fcbf 	bl	1005862e <llc_conn_get_tx_ctrl_pdu_state>
10065cb0:	a90e      	add	r1, sp, #56	@ 0x38
10065cb2:	7f0e      	ldrb	r6, [r1, #28]
10065cb4:	2e00      	cmp	r6, #0
10065cb6:	d124      	bne.n	10065d02 <__arm_cp.0_5+0x3c6>
10065cb8:	2801      	cmp	r0, #1
10065cba:	d122      	bne.n	10065d02 <__arm_cp.0_5+0x3c6>
10065cbc:	2101      	movs	r1, #1
10065cbe:	4638      	mov	r0, r7
10065cc0:	9106      	str	r1, [sp, #24]
10065cc2:	f7f2 fc87 	bl	100585d4 <llc_conn_get_ctrl_pdu_data_p>
10065cc6:	4606      	mov	r6, r0
10065cc8:	4638      	mov	r0, r7
10065cca:	4631      	mov	r1, r6
10065ccc:	f7e1 fbe1 	bl	10047492 <BLEPLAT_CNTR_PacketSetDataPtr>
10065cd0:	4632      	mov	r2, r6
10065cd2:	7830      	ldrb	r0, [r6, #0]
10065cd4:	0680      	lsls	r0, r0, #26
10065cd6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10065cd8:	d421      	bmi.n	10065d1e <__arm_cp.0_5+0x3e2>
10065cda:	7890      	ldrb	r0, [r2, #2]
10065cdc:	2827      	cmp	r0, #39	@ 0x27
10065cde:	d04c      	beq.n	10065d7a <__arm_cp.0_5+0x43e>
10065ce0:	4615      	mov	r5, r2
10065ce2:	2802      	cmp	r0, #2
10065ce4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10065ce6:	d152      	bne.n	10065d8e <__arm_cp.0_5+0x452>
10065ce8:	990c      	ldr	r1, [sp, #48]	@ 0x30
10065cea:	6808      	ldr	r0, [r1, #0]
10065cec:	9a06      	ldr	r2, [sp, #24]
10065cee:	4310      	orrs	r0, r2
10065cf0:	6008      	str	r0, [r1, #0]
10065cf2:	7d60      	ldrb	r0, [r4, #21]
10065cf4:	211f      	movs	r1, #31
10065cf6:	460a      	mov	r2, r1
10065cf8:	f7f9 f9be 	bl	1005f078 <LL_sched_set_priority>
10065cfc:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
10065cfe:	6738      	str	r0, [r7, #112]	@ 0x70
10065d00:	e045      	b.n	10065d8e <__arm_cp.0_5+0x452>
10065d02:	f7ec fe79 	bl	100529f8 <isr_Acl_Data_TX_Cmpl_Queue_Full>
10065d06:	2800      	cmp	r0, #0
10065d08:	d018      	beq.n	10065d3c <__arm_cp.0_5+0x400>
10065d0a:	f7e1 fa92 	bl	10047232 <BLEPLAT_CNTR_GlobEnableBlue>
10065d0e:	980e      	ldr	r0, [sp, #56]	@ 0x38
10065d10:	2800      	cmp	r0, #0
10065d12:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10065d14:	d009      	beq.n	10065d2a <__arm_cp.0_5+0x3ee>
10065d16:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10065d18:	9903      	ldr	r1, [sp, #12]
10065d1a:	9805      	ldr	r0, [sp, #20]
10065d1c:	e008      	b.n	10065d30 <__arm_cp.0_5+0x3f4>
10065d1e:	4615      	mov	r5, r2
10065d20:	4638      	mov	r0, r7
10065d22:	f7e1 fba9 	bl	10047478 <BLEPLAT_CNTR_PacketSetCteSamplingEn>
10065d26:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10065d28:	e031      	b.n	10065d8e <__arm_cp.0_5+0x452>
10065d2a:	2011      	movs	r0, #17
10065d2c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10065d2e:	9903      	ldr	r1, [sp, #12]
10065d30:	8538      	strh	r0, [r7, #40]	@ 0x28
10065d32:	4638      	mov	r0, r7
10065d34:	460d      	mov	r5, r1
10065d36:	f7e1 fbac 	bl	10047492 <BLEPLAT_CNTR_PacketSetDataPtr>
10065d3a:	e071      	b.n	10065e20 <__arm_cp.0_5+0x4e4>
10065d3c:	2c00      	cmp	r4, #0
10065d3e:	d0e4      	beq.n	10065d0a <__arm_cp.0_5+0x3ce>
10065d40:	2d01      	cmp	r5, #1
10065d42:	d0e2      	beq.n	10065d0a <__arm_cp.0_5+0x3ce>
10065d44:	2e01      	cmp	r6, #1
10065d46:	d0e0      	beq.n	10065d0a <__arm_cp.0_5+0x3ce>
10065d48:	f7e1 fa73 	bl	10047232 <BLEPLAT_CNTR_GlobEnableBlue>
10065d4c:	4877      	ldr	r0, [pc, #476]	@ (10065f2c <__arm_cp.0_2>)
10065d4e:	6800      	ldr	r0, [r0, #0]
10065d50:	218c      	movs	r1, #140	@ 0x8c
10065d52:	5840      	ldr	r0, [r0, r1]
10065d54:	8a21      	ldrh	r1, [r4, #16]
10065d56:	89e2      	ldrh	r2, [r4, #14]
10065d58:	1851      	adds	r1, r2, r1
10065d5a:	221f      	movs	r2, #31
10065d5c:	400a      	ands	r2, r1
10065d5e:	1810      	adds	r0, r2, r0
10065d60:	1c81      	adds	r1, r0, #2
10065d62:	4638      	mov	r0, r7
10065d64:	460d      	mov	r5, r1
10065d66:	f7e1 fb94 	bl	10047492 <BLEPLAT_CNTR_PacketSetDataPtr>
10065d6a:	4638      	mov	r0, r7
10065d6c:	4621      	mov	r1, r4
10065d6e:	f7f2 fb85 	bl	1005847c <llc_conn_copy_tx_data_packet>
10065d72:	67fc      	str	r4, [r7, #124]	@ 0x7c
10065d74:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10065d76:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10065d78:	e052      	b.n	10065e20 <__arm_cp.0_5+0x4e4>
10065d7a:	990d      	ldr	r1, [sp, #52]	@ 0x34
10065d7c:	7d88      	ldrb	r0, [r1, #22]
10065d7e:	7150      	strb	r0, [r2, #5]
10065d80:	7dc8      	ldrb	r0, [r1, #23]
10065d82:	4615      	mov	r5, r2
10065d84:	7190      	strb	r0, [r2, #6]
10065d86:	2000      	movs	r0, #0
10065d88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10065d8a:	8290      	strh	r0, [r2, #20]
10065d8c:	460c      	mov	r4, r1
10065d8e:	6970      	ldr	r0, [r6, #20]
10065d90:	6800      	ldr	r0, [r0, #0]
10065d92:	0701      	lsls	r1, r0, #28
10065d94:	d415      	bmi.n	10065dc2 <__arm_cp.0_5+0x486>
10065d96:	0680      	lsls	r0, r0, #26
10065d98:	d510      	bpl.n	10065dbc <__arm_cp.0_5+0x480>
10065d9a:	7d60      	ldrb	r0, [r4, #21]
10065d9c:	f7e1 fcb7 	bl	1004770e <BLEPLAT_CNTR_SmEncOff>
10065da0:	6970      	ldr	r0, [r6, #20]
10065da2:	6801      	ldr	r1, [r0, #0]
10065da4:	2220      	movs	r2, #32
10065da6:	4391      	bics	r1, r2
10065da8:	6001      	str	r1, [r0, #0]
10065daa:	68b0      	ldr	r0, [r6, #8]
10065dac:	2104      	movs	r1, #4
10065dae:	4388      	bics	r0, r1
10065db0:	60b0      	str	r0, [r6, #8]
10065db2:	2012      	movs	r0, #18
10065db4:	f7fc fb80 	bl	100624b8 <tsk_notify_idx>
10065db8:	f7dd feaf 	bl	10043b1a <BLE_STACK_ProcessRequest>
10065dbc:	f7e1 fa39 	bl	10047232 <BLEPLAT_CNTR_GlobEnableBlue>
10065dc0:	e01f      	b.n	10065e02 <__arm_cp.0_5+0x4c6>
10065dc2:	2000      	movs	r0, #0
10065dc4:	9017      	str	r0, [sp, #92]	@ 0x5c
10065dc6:	9016      	str	r0, [sp, #88]	@ 0x58
10065dc8:	7d60      	ldrb	r0, [r4, #21]
10065dca:	f7e1 fcb4 	bl	10047736 <BLEPLAT_CNTR_SmEncOn>
10065dce:	7d60      	ldrb	r0, [r4, #21]
10065dd0:	a916      	add	r1, sp, #88	@ 0x58
10065dd2:	f7e1 ff05 	bl	10047be0 <BLEPLAT_CNTR_SmSetTxCount>
10065dd6:	7820      	ldrb	r0, [r4, #0]
10065dd8:	2802      	cmp	r0, #2
10065dda:	d102      	bne.n	10065de2 <__arm_cp.0_5+0x4a6>
10065ddc:	7d60      	ldrb	r0, [r4, #21]
10065dde:	f7e1 ff1b 	bl	10047c18 <BLEPLAT_CNTR_SmSetTxCountDirectionBit>
10065de2:	f7e1 fa26 	bl	10047232 <BLEPLAT_CNTR_GlobEnableBlue>
10065de6:	6970      	ldr	r0, [r6, #20]
10065de8:	6801      	ldr	r1, [r0, #0]
10065dea:	2208      	movs	r2, #8
10065dec:	4391      	bics	r1, r2
10065dee:	6001      	str	r1, [r0, #0]
10065df0:	68b0      	ldr	r0, [r6, #8]
10065df2:	2104      	movs	r1, #4
10065df4:	4301      	orrs	r1, r0
10065df6:	60b1      	str	r1, [r6, #8]
10065df8:	2012      	movs	r0, #18
10065dfa:	f7fc fb5d 	bl	100624b8 <tsk_notify_idx>
10065dfe:	f7dd fe8c 	bl	10043b1a <BLE_STACK_ProcessRequest>
10065e02:	2102      	movs	r1, #2
10065e04:	4638      	mov	r0, r7
10065e06:	f7f2 fead 	bl	10058b64 <llc_conn_set_tx_ctrl_pdu_state>
10065e0a:	6970      	ldr	r0, [r6, #20]
10065e0c:	6801      	ldr	r1, [r0, #0]
10065e0e:	074a      	lsls	r2, r1, #29
10065e10:	d506      	bpl.n	10065e20 <__arm_cp.0_5+0x4e4>
10065e12:	2204      	movs	r2, #4
10065e14:	4391      	bics	r1, r2
10065e16:	6001      	str	r1, [r0, #0]
10065e18:	8b70      	ldrh	r0, [r6, #26]
10065e1a:	9906      	ldr	r1, [sp, #24]
10065e1c:	4308      	orrs	r0, r1
10065e1e:	8370      	strh	r0, [r6, #26]
10065e20:	2101      	movs	r1, #1
10065e22:	4638      	mov	r0, r7
10065e24:	f7f2 fbdc 	bl	100585e0 <llc_conn_get_enc_on>
10065e28:	2801      	cmp	r0, #1
10065e2a:	d104      	bne.n	10065e36 <__arm_cp.0_5+0x4fa>
10065e2c:	7868      	ldrb	r0, [r5, #1]
10065e2e:	2800      	cmp	r0, #0
10065e30:	d001      	beq.n	10065e36 <__arm_cp.0_5+0x4fa>
10065e32:	1d00      	adds	r0, r0, #4
10065e34:	7068      	strb	r0, [r5, #1]
10065e36:	9810      	ldr	r0, [sp, #64]	@ 0x40
10065e38:	0781      	lsls	r1, r0, #30
10065e3a:	d507      	bpl.n	10065e4c <__arm_cp.0_5+0x510>
10065e3c:	990c      	ldr	r1, [sp, #48]	@ 0x30
10065e3e:	7809      	ldrb	r1, [r1, #0]
10065e40:	0709      	lsls	r1, r1, #28
10065e42:	d503      	bpl.n	10065e4c <__arm_cp.0_5+0x510>
10065e44:	7d60      	ldrb	r0, [r4, #21]
10065e46:	f000 f8ea 	bl	1006601e <llc_conn_decrement_enc_count_rx>
10065e4a:	9810      	ldr	r0, [sp, #64]	@ 0x40
10065e4c:	0741      	lsls	r1, r0, #29
10065e4e:	d505      	bpl.n	10065e5c <__arm_cp.0_5+0x520>
10065e50:	4630      	mov	r0, r6
10065e52:	f7fc fd4d 	bl	100628f0 <ACL_list_remove_head>
10065e56:	f7ec fdf9 	bl	10052a4c <Acl_Tx_Cmpl_Pkt_Handler>
10065e5a:	9810      	ldr	r0, [sp, #64]	@ 0x40
10065e5c:	07c0      	lsls	r0, r0, #31
10065e5e:	d01e      	beq.n	10065e9e <__arm_cp.0_5+0x562>
10065e60:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065e62:	7844      	ldrb	r4, [r0, #1]
10065e64:	2600      	movs	r6, #0
10065e66:	f7eb fbd9 	bl	1005161c <data_length_extension_csr_ucfg>
10065e6a:	2801      	cmp	r0, #1
10065e6c:	d001      	beq.n	10065e72 <__arm_cp.0_5+0x536>
10065e6e:	251f      	movs	r5, #31
10065e70:	e000      	b.n	10065e74 <__arm_cp.0_5+0x538>
10065e72:	43f5      	mvns	r5, r6
10065e74:	4025      	ands	r5, r4
10065e76:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
10065e78:	6840      	ldr	r0, [r0, #4]
10065e7a:	9911      	ldr	r1, [sp, #68]	@ 0x44
10065e7c:	1c89      	adds	r1, r1, #2
10065e7e:	462a      	mov	r2, r5
10065e80:	f7f9 fc90 	bl	1005f7a4 <Mem_Buff_block_write>
10065e84:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
10065e86:	61c6      	str	r6, [r0, #28]
10065e88:	8045      	strh	r5, [r0, #2]
10065e8a:	9911      	ldr	r1, [sp, #68]	@ 0x44
10065e8c:	7809      	ldrb	r1, [r1, #0]
10065e8e:	2203      	movs	r2, #3
10065e90:	400a      	ands	r2, r1
10065e92:	7a01      	ldrb	r1, [r0, #8]
10065e94:	4311      	orrs	r1, r2
10065e96:	7201      	strb	r1, [r0, #8]
10065e98:	f7ec fdbc 	bl	10052a14 <Acl_Rcv_Pkt_Handler>
10065e9c:	67be      	str	r6, [r7, #120]	@ 0x78
10065e9e:	a80e      	add	r0, sp, #56	@ 0x38
10065ea0:	7e40      	ldrb	r0, [r0, #25]
10065ea2:	2801      	cmp	r0, #1
10065ea4:	d131      	bne.n	10065f0a <__arm_cp.0_5+0x5ce>
10065ea6:	2100      	movs	r1, #0
10065ea8:	4638      	mov	r0, r7
10065eaa:	f7f2 fb93 	bl	100585d4 <llc_conn_get_ctrl_pdu_data_p>
10065eae:	4605      	mov	r5, r0
10065eb0:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065eb2:	7801      	ldrb	r1, [r0, #0]
10065eb4:	7840      	ldrb	r0, [r0, #1]
10065eb6:	0200      	lsls	r0, r0, #8
10065eb8:	1840      	adds	r0, r0, r1
10065eba:	8028      	strh	r0, [r5, #0]
10065ebc:	f7f3 fdf8 	bl	10059ab0 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10065ec0:	4606      	mov	r6, r0
10065ec2:	f7f3 fdeb 	bl	10059a9c <cis_csr_ucfg_weak>
10065ec6:	4330      	orrs	r0, r6
10065ec8:	b2c0      	uxtb	r0, r0
10065eca:	f7f8 fe29 	bl	1005eb20 <LL_get_control_pdu_size>
10065ece:	a90e      	add	r1, sp, #56	@ 0x38
10065ed0:	7d89      	ldrb	r1, [r1, #22]
10065ed2:	2920      	cmp	r1, #32
10065ed4:	d001      	beq.n	10065eda <__arm_cp.0_5+0x59e>
10065ed6:	2102      	movs	r1, #2
10065ed8:	e000      	b.n	10065edc <__arm_cp.0_5+0x5a0>
10065eda:	2103      	movs	r1, #3
10065edc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
10065ede:	1851      	adds	r1, r2, r1
10065ee0:	1f00      	subs	r0, r0, #4
10065ee2:	b2c3      	uxtb	r3, r0
10065ee4:	7852      	ldrb	r2, [r2, #1]
10065ee6:	429a      	cmp	r2, r3
10065ee8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10065eea:	d300      	bcc.n	10065eee <__arm_cp.0_5+0x5b2>
10065eec:	4602      	mov	r2, r0
10065eee:	b2d2      	uxtb	r2, r2
10065ef0:	1ca8      	adds	r0, r5, #2
10065ef2:	f7e0 f8af 	bl	10046054 <BLEPLAT_MemCpy>
10065ef6:	6920      	ldr	r0, [r4, #16]
10065ef8:	6801      	ldr	r1, [r0, #0]
10065efa:	2201      	movs	r2, #1
10065efc:	430a      	orrs	r2, r1
10065efe:	6002      	str	r2, [r0, #0]
10065f00:	2015      	movs	r0, #21
10065f02:	f7fc fad9 	bl	100624b8 <tsk_notify_idx>
10065f06:	f7dd fe08 	bl	10043b1a <BLE_STACK_ProcessRequest>
10065f0a:	ad0e      	add	r5, sp, #56	@ 0x38
10065f0c:	4638      	mov	r0, r7
10065f0e:	4629      	mov	r1, r5
10065f10:	f000 f80e 	bl	10065f30 <llc_conn_check_subrate_and_set_params_ucfg_weak>
10065f14:	7da8      	ldrb	r0, [r5, #22]
10065f16:	2820      	cmp	r0, #32
10065f18:	d000      	beq.n	10065f1c <__arm_cp.0_5+0x5e0>
10065f1a:	e495      	b.n	10065848 <llc_conn_isr+0x300>
10065f1c:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065f1e:	7880      	ldrb	r0, [r0, #2]
10065f20:	0981      	lsrs	r1, r0, #6
10065f22:	4638      	mov	r0, r7
10065f24:	f7f5 f907 	bl	1005b136 <llc_cte_process_rx_cte_ucfg_weak>
10065f28:	e48e      	b.n	10065848 <llc_conn_isr+0x300>
10065f2a:	46c0      	nop			@ (mov r8, r8)

10065f2c <__arm_cp.0_2>:
10065f2c:	200010f4 	.word	0x200010f4

10065f30 <llc_conn_check_subrate_and_set_params_ucfg_weak>:
10065f30:	4770      	bx	lr

10065f32 <llc_conn_close_event>:
10065f32:	b5f0      	push	{r4, r5, r6, r7, lr}
10065f34:	b085      	sub	sp, #20
10065f36:	4605      	mov	r5, r0
10065f38:	2045      	movs	r0, #69	@ 0x45
10065f3a:	0080      	lsls	r0, r0, #2
10065f3c:	9003      	str	r0, [sp, #12]
10065f3e:	5828      	ldr	r0, [r5, r0]
10065f40:	462e      	mov	r6, r5
10065f42:	3642      	adds	r6, #66	@ 0x42
10065f44:	2800      	cmp	r0, #0
10065f46:	d002      	beq.n	10065f4e <llc_conn_close_event+0x1c>
10065f48:	8881      	ldrh	r1, [r0, #4]
10065f4a:	1c49      	adds	r1, r1, #1
10065f4c:	8081      	strh	r1, [r0, #4]
10065f4e:	462c      	mov	r4, r5
10065f50:	3480      	adds	r4, #128	@ 0x80
10065f52:	4628      	mov	r0, r5
10065f54:	f7f3 fdff 	bl	10059b56 <llc_subrate_update_cont_counter_ucfg_weak>
10065f58:	6c68      	ldr	r0, [r5, #68]	@ 0x44
10065f5a:	9002      	str	r0, [sp, #8]
10065f5c:	8837      	ldrh	r7, [r6, #0]
10065f5e:	4628      	mov	r0, r5
10065f60:	f7f2 fad2 	bl	10058508 <llc_conn_enhanced_get_latency>
10065f64:	4602      	mov	r2, r0
10065f66:	4628      	mov	r0, r5
10065f68:	4639      	mov	r1, r7
10065f6a:	f7f2 fe0c 	bl	10058b86 <llc_conn_calc_skip_ucfg_weak>
10065f6e:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
10065f70:	4342      	muls	r2, r0
10065f72:	6c69      	ldr	r1, [r5, #68]	@ 0x44
10065f74:	1889      	adds	r1, r1, r2
10065f76:	6469      	str	r1, [r5, #68]	@ 0x44
10065f78:	9001      	str	r0, [sp, #4]
10065f7a:	1838      	adds	r0, r7, r0
10065f7c:	9004      	str	r0, [sp, #16]
10065f7e:	b287      	uxth	r7, r0
10065f80:	8830      	ldrh	r0, [r6, #0]
10065f82:	42b8      	cmp	r0, r7
10065f84:	d907      	bls.n	10065f96 <llc_conn_close_event+0x64>
10065f86:	9803      	ldr	r0, [sp, #12]
10065f88:	1828      	adds	r0, r5, r0
10065f8a:	2109      	movs	r1, #9
10065f8c:	0149      	lsls	r1, r1, #5
10065f8e:	1869      	adds	r1, r5, r1
10065f90:	89c0      	ldrh	r0, [r0, #14]
10065f92:	f7f3 fddf 	bl	10059b54 <llc_subrate_new_sr_base_event_ucfg_weak>
10065f96:	68a0      	ldr	r0, [r4, #8]
10065f98:	2180      	movs	r1, #128	@ 0x80
10065f9a:	4388      	bics	r0, r1
10065f9c:	60a0      	str	r0, [r4, #8]
10065f9e:	4628      	mov	r0, r5
10065fa0:	4639      	mov	r1, r7
10065fa2:	f7f2 fe29 	bl	10058bf8 <llc_conn_check_instant_and_set_params>
10065fa6:	4607      	mov	r7, r0
10065fa8:	9804      	ldr	r0, [sp, #16]
10065faa:	8030      	strh	r0, [r6, #0]
10065fac:	2f00      	cmp	r7, #0
10065fae:	d118      	bne.n	10065fe2 <llc_conn_close_event+0xb0>
10065fb0:	6c68      	ldr	r0, [r5, #68]	@ 0x44
10065fb2:	9902      	ldr	r1, [sp, #8]
10065fb4:	1a46      	subs	r6, r0, r1
10065fb6:	4628      	mov	r0, r5
10065fb8:	4631      	mov	r1, r6
10065fba:	f7f2 feb1 	bl	10058d20 <llc_conn_check_supervision_timer>
10065fbe:	4607      	mov	r7, r0
10065fc0:	2800      	cmp	r0, #0
10065fc2:	d10e      	bne.n	10065fe2 <llc_conn_close_event+0xb0>
10065fc4:	4628      	mov	r0, r5
10065fc6:	4631      	mov	r1, r6
10065fc8:	f7f2 fddf 	bl	10058b8a <llc_conn_check_ctrl_proc_rsp_timer>
10065fcc:	4607      	mov	r7, r0
10065fce:	2800      	cmp	r0, #0
10065fd0:	d107      	bne.n	10065fe2 <llc_conn_close_event+0xb0>
10065fd2:	4628      	mov	r0, r5
10065fd4:	4631      	mov	r1, r6
10065fd6:	9a01      	ldr	r2, [sp, #4]
10065fd8:	f7f3 fb08 	bl	100595ec <llc_conn_set_taskslot_params>
10065fdc:	4607      	mov	r7, r0
10065fde:	2800      	cmp	r0, #0
10065fe0:	d006      	beq.n	10065ff0 <llc_conn_close_event+0xbe>
10065fe2:	352d      	adds	r5, #45	@ 0x2d
10065fe4:	7d28      	ldrb	r0, [r5, #20]
10065fe6:	f7f9 f871 	bl	1005f0cc <LL_sched_delete_taskslot>
10065fea:	702f      	strb	r7, [r5, #0]
10065fec:	2000      	movs	r0, #0
10065fee:	8360      	strh	r0, [r4, #26]
10065ff0:	6820      	ldr	r0, [r4, #0]
10065ff2:	2800      	cmp	r0, #0
10065ff4:	d001      	beq.n	10065ffa <llc_conn_close_event+0xc8>
10065ff6:	69c6      	ldr	r6, [r0, #28]
10065ff8:	e00d      	b.n	10066016 <llc_conn_close_event+0xe4>
10065ffa:	2600      	movs	r6, #0
10065ffc:	e00b      	b.n	10066016 <llc_conn_close_event+0xe4>
10065ffe:	4635      	mov	r5, r6
10066000:	69f6      	ldr	r6, [r6, #28]
10066002:	7a28      	ldrb	r0, [r5, #8]
10066004:	0700      	lsls	r0, r0, #28
10066006:	d506      	bpl.n	10066016 <llc_conn_close_event+0xe4>
10066008:	4620      	mov	r0, r4
1006600a:	4629      	mov	r1, r5
1006600c:	f7fc fc5a 	bl	100628c4 <ACL_list_remove>
10066010:	4628      	mov	r0, r5
10066012:	f7ec fdcf 	bl	10052bb4 <ACL_pkt_release>
10066016:	2e00      	cmp	r6, #0
10066018:	d1f1      	bne.n	10065ffe <llc_conn_close_event+0xcc>
1006601a:	b005      	add	sp, #20
1006601c:	bdf0      	pop	{r4, r5, r6, r7, pc}

1006601e <llc_conn_decrement_enc_count_rx>:
1006601e:	b51c      	push	{r2, r3, r4, lr}
10066020:	4604      	mov	r4, r0
10066022:	4669      	mov	r1, sp
10066024:	f7e1 fc45 	bl	100478b2 <BLEPLAT_CNTR_SmGetRxCount>
10066028:	9800      	ldr	r0, [sp, #0]
1006602a:	1e41      	subs	r1, r0, #1
1006602c:	9100      	str	r1, [sp, #0]
1006602e:	2800      	cmp	r0, #0
10066030:	d102      	bne.n	10066038 <llc_conn_decrement_enc_count_rx+0x1a>
10066032:	9801      	ldr	r0, [sp, #4]
10066034:	1e40      	subs	r0, r0, #1
10066036:	9001      	str	r0, [sp, #4]
10066038:	4669      	mov	r1, sp
1006603a:	4620      	mov	r0, r4
1006603c:	f7e1 fd5c 	bl	10047af8 <BLEPLAT_CNTR_SmSetRxCount>
10066040:	bd1c      	pop	{r2, r3, r4, pc}
	...

10066044 <llc_check_sreq_or_creq_tx_addr_res_off>:
10066044:	b570      	push	{r4, r5, r6, lr}
10066046:	b084      	sub	sp, #16
10066048:	4615      	mov	r5, r2
1006604a:	460a      	mov	r2, r1
1006604c:	4604      	mov	r4, r0
1006604e:	2b00      	cmp	r3, #0
10066050:	d007      	beq.n	10066062 <llc_check_sreq_or_creq_tx_addr_res_off+0x1e>
10066052:	980a      	ldr	r0, [sp, #40]	@ 0x28
10066054:	4282      	cmp	r2, r0
10066056:	d11f      	bne.n	10066098 <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
10066058:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1006605a:	4068      	eors	r0, r5
1006605c:	0200      	lsls	r0, r0, #8
1006605e:	d11b      	bne.n	10066098 <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
10066060:	e01b      	b.n	1006609a <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
10066062:	9809      	ldr	r0, [sp, #36]	@ 0x24
10066064:	9908      	ldr	r1, [sp, #32]
10066066:	2900      	cmp	r1, #0
10066068:	d002      	beq.n	10066070 <llc_check_sreq_or_creq_tx_addr_res_off+0x2c>
1006606a:	2301      	movs	r3, #1
1006606c:	4003      	ands	r3, r0
1006606e:	d104      	bne.n	1006607a <llc_check_sreq_or_creq_tx_addr_res_off+0x36>
10066070:	2900      	cmp	r1, #0
10066072:	d112      	bne.n	1006609a <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
10066074:	2102      	movs	r1, #2
10066076:	4008      	ands	r0, r1
10066078:	d00f      	beq.n	1006609a <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
1006607a:	4809      	ldr	r0, [pc, #36]	@ (100660a0 <__arm_cp.1_0>)
1006607c:	6800      	ldr	r0, [r0, #0]
1006607e:	219c      	movs	r1, #156	@ 0x9c
10066080:	5841      	ldr	r1, [r0, r1]
10066082:	68c8      	ldr	r0, [r1, #12]
10066084:	6909      	ldr	r1, [r1, #16]
10066086:	ab03      	add	r3, sp, #12
10066088:	2600      	movs	r6, #0
1006608a:	9600      	str	r6, [sp, #0]
1006608c:	9301      	str	r3, [sp, #4]
1006608e:	462b      	mov	r3, r5
10066090:	f7fc fc42 	bl	10062918 <addr8_list_search>
10066094:	2800      	cmp	r0, #0
10066096:	d100      	bne.n	1006609a <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
10066098:	24ff      	movs	r4, #255	@ 0xff
1006609a:	4620      	mov	r0, r4
1006609c:	b004      	add	sp, #16
1006609e:	bd70      	pop	{r4, r5, r6, pc}

100660a0 <__arm_cp.1_0>:
100660a0:	200010f4 	.word	0x200010f4

100660a4 <llc_check_sreq_or_creq_tx_addr_ucfg_weak>:
100660a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100660a6:	b087      	sub	sp, #28
100660a8:	1ecd      	subs	r5, r1, #3
100660aa:	21ff      	movs	r1, #255	@ 0xff
100660ac:	24fd      	movs	r4, #253	@ 0xfd
100660ae:	4225      	tst	r5, r4
100660b0:	d11c      	bne.n	100660ec <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
100660b2:	2a00      	cmp	r2, #0
100660b4:	d01a      	beq.n	100660ec <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
100660b6:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
100660b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
100660ba:	680c      	ldr	r4, [r1, #0]
100660bc:	9405      	str	r4, [sp, #20]
100660be:	9306      	str	r3, [sp, #24]
100660c0:	684b      	ldr	r3, [r1, #4]
100660c2:	c882      	ldmia	r0!, {r1, r7}
100660c4:	20ff      	movs	r0, #255	@ 0xff
100660c6:	0600      	lsls	r0, r0, #24
100660c8:	463c      	mov	r4, r7
100660ca:	4384      	bics	r4, r0
100660cc:	c612      	stmia	r6!, {r1, r4}
100660ce:	9303      	str	r3, [sp, #12]
100660d0:	9805      	ldr	r0, [sp, #20]
100660d2:	9002      	str	r0, [sp, #8]
100660d4:	9806      	ldr	r0, [sp, #24]
100660d6:	9001      	str	r0, [sp, #4]
100660d8:	4268      	negs	r0, r5
100660da:	4168      	adcs	r0, r5
100660dc:	9000      	str	r0, [sp, #0]
100660de:	b2c8      	uxtb	r0, r1
100660e0:	0752      	lsls	r2, r2, #29
100660e2:	0fd3      	lsrs	r3, r2, #31
100660e4:	463a      	mov	r2, r7
100660e6:	f7ff ffad 	bl	10066044 <llc_check_sreq_or_creq_tx_addr_res_off>
100660ea:	4601      	mov	r1, r0
100660ec:	4608      	mov	r0, r1
100660ee:	b007      	add	sp, #28
100660f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

100660f4 <llc_wl_mem_allocate>:
100660f4:	b510      	push	{r4, lr}
100660f6:	2401      	movs	r4, #1
100660f8:	4084      	lsls	r4, r0
100660fa:	2108      	movs	r1, #8
100660fc:	4620      	mov	r0, r4
100660fe:	f7f9 f9d5 	bl	1005f4ac <csmem_mem_0_assign>
10066102:	4903      	ldr	r1, [pc, #12]	@ (10066110 <__arm_cp.0_0>)
10066104:	6809      	ldr	r1, [r1, #0]
10066106:	229c      	movs	r2, #156	@ 0x9c
10066108:	5889      	ldr	r1, [r1, r2]
1006610a:	744c      	strb	r4, [r1, #17]
1006610c:	60c8      	str	r0, [r1, #12]
1006610e:	bd10      	pop	{r4, pc}

10066110 <__arm_cp.0_0>:
10066110:	200010f4 	.word	0x200010f4

10066114 <llc_padv_mem_allocate_ucfg_weak>:
10066114:	4770      	bx	lr

10066116 <llc_padv_init_ucfg_weak>:
10066116:	4770      	bx	lr

10066118 <llc_priv_mem_allocate>:
10066118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006611a:	2800      	cmp	r0, #0
1006611c:	d046      	beq.n	100661ac <llc_priv_mem_allocate+0x94>
1006611e:	460e      	mov	r6, r1
10066120:	2501      	movs	r5, #1
10066122:	2168      	movs	r1, #104	@ 0x68
10066124:	4628      	mov	r0, r5
10066126:	f7f9 f9c1 	bl	1005f4ac <csmem_mem_0_assign>
1006612a:	4f21      	ldr	r7, [pc, #132]	@ (100661b0 <__arm_cp.0_0>)
1006612c:	6839      	ldr	r1, [r7, #0]
1006612e:	249c      	movs	r4, #156	@ 0x9c
10066130:	5909      	ldr	r1, [r1, r4]
10066132:	6088      	str	r0, [r1, #8]
10066134:	40b5      	lsls	r5, r6
10066136:	b2ee      	uxtb	r6, r5
10066138:	2108      	movs	r1, #8
1006613a:	4630      	mov	r0, r6
1006613c:	f7f9 f9b6 	bl	1005f4ac <csmem_mem_0_assign>
10066140:	6839      	ldr	r1, [r7, #0]
10066142:	5909      	ldr	r1, [r1, r4]
10066144:	6889      	ldr	r1, [r1, #8]
10066146:	724d      	strb	r5, [r1, #9]
10066148:	6048      	str	r0, [r1, #4]
1006614a:	9600      	str	r6, [sp, #0]
1006614c:	0075      	lsls	r5, r6, #1
1006614e:	2611      	movs	r6, #17
10066150:	2e21      	cmp	r6, #33	@ 0x21
10066152:	d00f      	beq.n	10066174 <llc_priv_mem_allocate+0x5c>
10066154:	2108      	movs	r1, #8
10066156:	4628      	mov	r0, r5
10066158:	f7f9 f9a8 	bl	1005f4ac <csmem_mem_0_assign>
1006615c:	6839      	ldr	r1, [r7, #0]
1006615e:	5909      	ldr	r1, [r1, r4]
10066160:	6889      	ldr	r1, [r1, #8]
10066162:	1989      	adds	r1, r1, r6
10066164:	1f49      	subs	r1, r1, #5
10066166:	6008      	str	r0, [r1, #0]
10066168:	6838      	ldr	r0, [r7, #0]
1006616a:	5900      	ldr	r0, [r0, r4]
1006616c:	6880      	ldr	r0, [r0, #8]
1006616e:	5585      	strb	r5, [r0, r6]
10066170:	3608      	adds	r6, #8
10066172:	e7ed      	b.n	10066150 <llc_priv_mem_allocate+0x38>
10066174:	2128      	movs	r1, #40	@ 0x28
10066176:	9800      	ldr	r0, [sp, #0]
10066178:	f7f9 f998 	bl	1005f4ac <csmem_mem_0_assign>
1006617c:	6839      	ldr	r1, [r7, #0]
1006617e:	5909      	ldr	r1, [r1, r4]
10066180:	6889      	ldr	r1, [r1, #8]
10066182:	6008      	str	r0, [r1, #0]
10066184:	480b      	ldr	r0, [pc, #44]	@ (100661b4 <__arm_cp.0_1>)
10066186:	2502      	movs	r5, #2
10066188:	2601      	movs	r6, #1
1006618a:	4629      	mov	r1, r5
1006618c:	4632      	mov	r2, r6
1006618e:	f7f9 f97b 	bl	1005f488 <csmem_mem_assign>
10066192:	6839      	ldr	r1, [r7, #0]
10066194:	5909      	ldr	r1, [r1, r4]
10066196:	6889      	ldr	r1, [r1, #8]
10066198:	6488      	str	r0, [r1, #72]	@ 0x48
1006619a:	4806      	ldr	r0, [pc, #24]	@ (100661b4 <__arm_cp.0_1>)
1006619c:	4631      	mov	r1, r6
1006619e:	462a      	mov	r2, r5
100661a0:	f7f9 f972 	bl	1005f488 <csmem_mem_assign>
100661a4:	6839      	ldr	r1, [r7, #0]
100661a6:	5909      	ldr	r1, [r1, r4]
100661a8:	6889      	ldr	r1, [r1, #8]
100661aa:	64c8      	str	r0, [r1, #76]	@ 0x4c
100661ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100661ae:	46c0      	nop			@ (mov r8, r8)

100661b0 <__arm_cp.0_0>:
100661b0:	200010f4 	.word	0x200010f4

100661b4 <__arm_cp.0_1>:
100661b4:	20001104 	.word	0x20001104

100661b8 <llc_pscan_isr_ucfg_weak>:
100661b8:	2000      	movs	r0, #0
100661ba:	4770      	bx	lr

100661bc <llc_pscan_get_cntxt_per_p>:
100661bc:	2190      	movs	r1, #144	@ 0x90
100661be:	4341      	muls	r1, r0
100661c0:	4804      	ldr	r0, [pc, #16]	@ (100661d4 <__arm_cp.1_0>)
100661c2:	6800      	ldr	r0, [r0, #0]
100661c4:	229c      	movs	r2, #156	@ 0x9c
100661c6:	5880      	ldr	r0, [r0, r2]
100661c8:	6840      	ldr	r0, [r0, #4]
100661ca:	6b80      	ldr	r0, [r0, #56]	@ 0x38
100661cc:	6800      	ldr	r0, [r0, #0]
100661ce:	6800      	ldr	r0, [r0, #0]
100661d0:	1840      	adds	r0, r0, r1
100661d2:	4770      	bx	lr

100661d4 <__arm_cp.1_0>:
100661d4:	200010f4 	.word	0x200010f4

100661d8 <llc_pscan_init_ucfg_weak>:
100661d8:	4770      	bx	lr

100661da <llc_pscan_mem_allocate_ucfg_weak>:
100661da:	4770      	bx	lr

100661dc <llc_pscan_wr_init_ucfg_weak>:
100661dc:	4770      	bx	lr
	...

100661e0 <llc_pscan_wr_mem_allocate_ucfg_weak>:
100661e0:	b510      	push	{r4, lr}
100661e2:	2801      	cmp	r0, #1
100661e4:	d110      	bne.n	10066208 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
100661e6:	2901      	cmp	r1, #1
100661e8:	d10e      	bne.n	10066208 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
100661ea:	2a01      	cmp	r2, #1
100661ec:	d10c      	bne.n	10066208 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
100661ee:	2400      	movs	r4, #0
100661f0:	4620      	mov	r0, r4
100661f2:	f7ff ffe3 	bl	100661bc <llc_pscan_get_cntxt_per_p>
100661f6:	3014      	adds	r0, #20
100661f8:	4904      	ldr	r1, [pc, #16]	@ (1006620c <__arm_cp.5_0>)
100661fa:	7f89      	ldrb	r1, [r1, #30]
100661fc:	2900      	cmp	r1, #0
100661fe:	d003      	beq.n	10066208 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
10066200:	6004      	str	r4, [r0, #0]
10066202:	3090      	adds	r0, #144	@ 0x90
10066204:	1e49      	subs	r1, r1, #1
10066206:	e7f9      	b.n	100661fc <llc_pscan_wr_mem_allocate_ucfg_weak+0x1c>
10066208:	bd10      	pop	{r4, pc}
1006620a:	46c0      	nop			@ (mov r8, r8)

1006620c <__arm_cp.5_0>:
1006620c:	20001108 	.word	0x20001108

10066210 <llc_pscan_wr_check_pawr_active_ucfg_weak>:
10066210:	2000      	movs	r0, #0
10066212:	4770      	bx	lr

10066214 <llc_scan_isr_uncoded_ucfg_weak>:
10066214:	2000      	movs	r0, #0
10066216:	4770      	bx	lr

10066218 <llc_scan_isr_coded_ucfg_weak>:
10066218:	2000      	movs	r0, #0
1006621a:	4770      	bx	lr

1006621c <smp_dep_gap_get_local_identity_address>:
1006621c:	b580      	push	{r7, lr}
1006621e:	4a0a      	ldr	r2, [pc, #40]	@ (10066248 <__arm_cp.0_0>)
10066220:	6812      	ldr	r2, [r2, #0]
10066222:	233d      	movs	r3, #61	@ 0x3d
10066224:	5cd2      	ldrb	r2, [r2, r3]
10066226:	7002      	strb	r2, [r0, #0]
10066228:	2a01      	cmp	r2, #1
1006622a:	d005      	beq.n	10066238 <smp_dep_gap_get_local_identity_address+0x1c>
1006622c:	2a00      	cmp	r2, #0
1006622e:	d108      	bne.n	10066242 <smp_dep_gap_get_local_identity_address+0x26>
10066230:	4608      	mov	r0, r1
10066232:	f7ed ffe9 	bl	10054208 <GAP_get_public_address>
10066236:	e002      	b.n	1006623e <smp_dep_gap_get_local_identity_address+0x22>
10066238:	4608      	mov	r0, r1
1006623a:	f7ed ffef 	bl	1005421c <GAP_get_static_random_address>
1006623e:	2000      	movs	r0, #0
10066240:	bd80      	pop	{r7, pc}
10066242:	2086      	movs	r0, #134	@ 0x86
10066244:	bd80      	pop	{r7, pc}
10066246:	46c0      	nop			@ (mov r8, r8)

10066248 <__arm_cp.0_0>:
10066248:	20001140 	.word	0x20001140

1006624c <smp_dep_l2c_send_acl_packet>:
1006624c:	b570      	push	{r4, r5, r6, lr}
1006624e:	460d      	mov	r5, r1
10066250:	4606      	mov	r6, r0
10066252:	2006      	movs	r0, #6
10066254:	f7f1 fc90 	bl	10057b78 <L2C_send_frame>
10066258:	4604      	mov	r4, r0
1006625a:	2800      	cmp	r0, #0
1006625c:	d003      	beq.n	10066266 <smp_dep_l2c_send_acl_packet+0x1a>
1006625e:	4628      	mov	r0, r5
10066260:	f7ec fca8 	bl	10052bb4 <ACL_pkt_release>
10066264:	e008      	b.n	10066278 <smp_dep_l2c_send_acl_packet+0x2c>
10066266:	8930      	ldrh	r0, [r6, #8]
10066268:	f7fa fcd0 	bl	10060c0c <smp_get_remote_device_list_index>
1006626c:	4602      	mov	r2, r0
1006626e:	2000      	movs	r0, #0
10066270:	4b02      	ldr	r3, [pc, #8]	@ (1006627c <__arm_cp.0_0>)
10066272:	4601      	mov	r1, r0
10066274:	f7fb fb4a 	bl	1006190c <smp_timer_reset>
10066278:	4620      	mov	r0, r4
1006627a:	bd70      	pop	{r4, r5, r6, pc}

1006627c <__arm_cp.0_0>:
1006627c:	00007530 	.word	0x00007530

10066280 <smp_dep_l2c_send_acl_short_pdu>:
10066280:	b5b0      	push	{r4, r5, r7, lr}
10066282:	461c      	mov	r4, r3
10066284:	4615      	mov	r5, r2
10066286:	2900      	cmp	r1, #0
10066288:	d107      	bne.n	1006629a <smp_dep_l2c_send_acl_short_pdu+0x1a>
1006628a:	8901      	ldrh	r1, [r0, #8]
1006628c:	2000      	movs	r0, #0
1006628e:	2206      	movs	r2, #6
10066290:	f7ec fc6e 	bl	10052b70 <ACL_pkt_get>
10066294:	4601      	mov	r1, r0
10066296:	2800      	cmp	r0, #0
10066298:	d009      	beq.n	100662ae <smp_dep_l2c_send_acl_short_pdu+0x2e>
1006629a:	2002      	movs	r0, #2
1006629c:	8048      	strh	r0, [r1, #2]
1006629e:	6848      	ldr	r0, [r1, #4]
100662a0:	7205      	strb	r5, [r0, #8]
100662a2:	6848      	ldr	r0, [r1, #4]
100662a4:	7244      	strb	r4, [r0, #9]
100662a6:	2006      	movs	r0, #6
100662a8:	f7f1 fc66 	bl	10057b78 <L2C_send_frame>
100662ac:	bdb0      	pop	{r4, r5, r7, pc}
100662ae:	2088      	movs	r0, #136	@ 0x88
100662b0:	bdb0      	pop	{r4, r5, r7, pc}

100662b2 <smp_dep_sdb_get_bonding_records_count>:
100662b2:	b580      	push	{r7, lr}
100662b4:	f7f9 fccc 	bl	1005fc50 <sdb_sap_get_security_records_count>
100662b8:	bd80      	pop	{r7, pc}

100662ba <smp_dep_sdb_add_bonding_record>:
100662ba:	b5f0      	push	{r4, r5, r6, r7, lr}
100662bc:	b097      	sub	sp, #92	@ 0x5c
100662be:	4604      	mov	r4, r0
100662c0:	ae03      	add	r6, sp, #12
100662c2:	2100      	movs	r1, #0
100662c4:	2250      	movs	r2, #80	@ 0x50
100662c6:	4630      	mov	r0, r6
100662c8:	f7df fed4 	bl	10046074 <BLEPLAT_MemSet>
100662cc:	2059      	movs	r0, #89	@ 0x59
100662ce:	5c20      	ldrb	r0, [r4, r0]
100662d0:	7871      	ldrb	r1, [r6, #1]
100662d2:	4301      	orrs	r1, r0
100662d4:	7071      	strb	r1, [r6, #1]
100662d6:	4630      	mov	r0, r6
100662d8:	303e      	adds	r0, #62	@ 0x3e
100662da:	4621      	mov	r1, r4
100662dc:	315a      	adds	r1, #90	@ 0x5a
100662de:	2506      	movs	r5, #6
100662e0:	462a      	mov	r2, r5
100662e2:	f7df feb7 	bl	10046054 <BLEPLAT_MemCpy>
100662e6:	7c20      	ldrb	r0, [r4, #16]
100662e8:	70f0      	strb	r0, [r6, #3]
100662ea:	7de0      	ldrb	r0, [r4, #23]
100662ec:	0701      	lsls	r1, r0, #28
100662ee:	d416      	bmi.n	1006631e <smp_dep_sdb_add_bonding_record+0x64>
100662f0:	2011      	movs	r0, #17
100662f2:	5620      	ldrsb	r0, [r4, r0]
100662f4:	2800      	cmp	r0, #0
100662f6:	d504      	bpl.n	10066302 <smp_dep_sdb_add_bonding_record+0x48>
100662f8:	a803      	add	r0, sp, #12
100662fa:	7841      	ldrb	r1, [r0, #1]
100662fc:	2280      	movs	r2, #128	@ 0x80
100662fe:	430a      	orrs	r2, r1
10066300:	7042      	strb	r2, [r0, #1]
10066302:	ae03      	add	r6, sp, #12
10066304:	1d30      	adds	r0, r6, #4
10066306:	4621      	mov	r1, r4
10066308:	311e      	adds	r1, #30
1006630a:	2202      	movs	r2, #2
1006630c:	f7df fea2 	bl	10046054 <BLEPLAT_MemCpy>
10066310:	1db0      	adds	r0, r6, #6
10066312:	4621      	mov	r1, r4
10066314:	3120      	adds	r1, #32
10066316:	2208      	movs	r2, #8
10066318:	f7df fe9c 	bl	10046054 <BLEPLAT_MemCpy>
1006631c:	e003      	b.n	10066326 <smp_dep_sdb_add_bonding_record+0x6c>
1006631e:	21fe      	movs	r1, #254	@ 0xfe
10066320:	4008      	ands	r0, r1
10066322:	a903      	add	r1, sp, #12
10066324:	7088      	strb	r0, [r1, #2]
10066326:	a803      	add	r0, sp, #12
10066328:	300e      	adds	r0, #14
1006632a:	4621      	mov	r1, r4
1006632c:	3128      	adds	r1, #40	@ 0x28
1006632e:	2610      	movs	r6, #16
10066330:	4632      	mov	r2, r6
10066332:	f7df fe8f 	bl	10046054 <BLEPLAT_MemCpy>
10066336:	7c60      	ldrb	r0, [r4, #17]
10066338:	0681      	lsls	r1, r0, #26
1006633a:	d50c      	bpl.n	10066356 <smp_dep_sdb_add_bonding_record+0x9c>
1006633c:	af03      	add	r7, sp, #12
1006633e:	4638      	mov	r0, r7
10066340:	301e      	adds	r0, #30
10066342:	4621      	mov	r1, r4
10066344:	3138      	adds	r1, #56	@ 0x38
10066346:	2210      	movs	r2, #16
10066348:	f7df fe84 	bl	10046054 <BLEPLAT_MemCpy>
1006634c:	7878      	ldrb	r0, [r7, #1]
1006634e:	2120      	movs	r1, #32
10066350:	4301      	orrs	r1, r0
10066352:	7079      	strb	r1, [r7, #1]
10066354:	7c60      	ldrb	r0, [r4, #17]
10066356:	0640      	lsls	r0, r0, #25
10066358:	d50b      	bpl.n	10066372 <smp_dep_sdb_add_bonding_record+0xb8>
1006635a:	af03      	add	r7, sp, #12
1006635c:	4638      	mov	r0, r7
1006635e:	302e      	adds	r0, #46	@ 0x2e
10066360:	4621      	mov	r1, r4
10066362:	3148      	adds	r1, #72	@ 0x48
10066364:	2210      	movs	r2, #16
10066366:	f7df fe75 	bl	10046054 <BLEPLAT_MemCpy>
1006636a:	7878      	ldrb	r0, [r7, #1]
1006636c:	2140      	movs	r1, #64	@ 0x40
1006636e:	4301      	orrs	r1, r0
10066370:	7079      	strb	r1, [r7, #1]
10066372:	7ca0      	ldrb	r0, [r4, #18]
10066374:	2105      	movs	r1, #5
10066376:	4208      	tst	r0, r1
10066378:	d00a      	beq.n	10066390 <smp_dep_sdb_add_bonding_record+0xd6>
1006637a:	af03      	add	r7, sp, #12
1006637c:	4638      	mov	r0, r7
1006637e:	3044      	adds	r0, #68	@ 0x44
10066380:	4621      	mov	r1, r4
10066382:	311c      	adds	r1, #28
10066384:	2202      	movs	r2, #2
10066386:	f7df fe65 	bl	10046054 <BLEPLAT_MemCpy>
1006638a:	7878      	ldrb	r0, [r7, #1]
1006638c:	4330      	orrs	r0, r6
1006638e:	e001      	b.n	10066394 <smp_dep_sdb_add_bonding_record+0xda>
10066390:	a803      	add	r0, sp, #12
10066392:	7840      	ldrb	r0, [r0, #1]
10066394:	7ae1      	ldrb	r1, [r4, #11]
10066396:	4029      	ands	r1, r5
10066398:	4301      	orrs	r1, r0
1006639a:	a803      	add	r0, sp, #12
1006639c:	7041      	strb	r1, [r0, #1]
1006639e:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
100663a0:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
100663a2:	9115      	str	r1, [sp, #84]	@ 0x54
100663a4:	9216      	str	r2, [sp, #88]	@ 0x58
100663a6:	f7f9 fc57 	bl	1005fc58 <sdb_sap_add_security_record>
100663aa:	4605      	mov	r5, r0
100663ac:	2800      	cmp	r0, #0
100663ae:	d00c      	beq.n	100663ca <smp_dep_sdb_add_bonding_record+0x110>
100663b0:	1ca1      	adds	r1, r4, #2
100663b2:	ac01      	add	r4, sp, #4
100663b4:	2206      	movs	r2, #6
100663b6:	4620      	mov	r0, r4
100663b8:	f7df fe4c 	bl	10046054 <BLEPLAT_MemCpy>
100663bc:	71a5      	strb	r5, [r4, #6]
100663be:	2042      	movs	r0, #66	@ 0x42
100663c0:	2105      	movs	r1, #5
100663c2:	2207      	movs	r2, #7
100663c4:	4623      	mov	r3, r4
100663c6:	f7fd fc9f 	bl	10063d08 <aci_hal_fw_error_event_push_noinline>
100663ca:	4628      	mov	r0, r5
100663cc:	b017      	add	sp, #92	@ 0x5c
100663ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

100663d0 <smp_dep_sdb_find_bonding_record_by_conn_addr>:
100663d0:	b570      	push	{r4, r5, r6, lr}
100663d2:	b094      	sub	sp, #80	@ 0x50
100663d4:	460e      	mov	r6, r1
100663d6:	4604      	mov	r4, r0
100663d8:	7841      	ldrb	r1, [r0, #1]
100663da:	1c80      	adds	r0, r0, #2
100663dc:	466a      	mov	r2, sp
100663de:	f7f9 fc5e 	bl	1005fc9e <sdb_sap_read_security_record>
100663e2:	4605      	mov	r5, r0
100663e4:	2e00      	cmp	r6, #0
100663e6:	d005      	beq.n	100663f4 <smp_dep_sdb_find_bonding_record_by_conn_addr+0x24>
100663e8:	2d00      	cmp	r5, #0
100663ea:	d103      	bne.n	100663f4 <smp_dep_sdb_find_bonding_record_by_conn_addr+0x24>
100663ec:	4668      	mov	r0, sp
100663ee:	4621      	mov	r1, r4
100663f0:	f000 f804 	bl	100663fc <smp_dep_sdb_copy_bonding_record_data_to_remdev>
100663f4:	4628      	mov	r0, r5
100663f6:	b014      	add	sp, #80	@ 0x50
100663f8:	bd70      	pop	{r4, r5, r6, pc}
	...

100663fc <smp_dep_sdb_copy_bonding_record_data_to_remdev>:
100663fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100663fe:	460c      	mov	r4, r1
10066400:	4605      	mov	r5, r0
10066402:	2001      	movs	r0, #1
10066404:	7388      	strb	r0, [r1, #14]
10066406:	78e8      	ldrb	r0, [r5, #3]
10066408:	7408      	strb	r0, [r1, #16]
1006640a:	4608      	mov	r0, r1
1006640c:	301c      	adds	r0, #28
1006640e:	4629      	mov	r1, r5
10066410:	3144      	adds	r1, #68	@ 0x44
10066412:	2602      	movs	r6, #2
10066414:	4f19      	ldr	r7, [pc, #100]	@ (1006647c <__arm_cp.3_0>)
10066416:	4632      	mov	r2, r6
10066418:	47b8      	blx	r7
1006641a:	4620      	mov	r0, r4
1006641c:	301e      	adds	r0, #30
1006641e:	1d29      	adds	r1, r5, #4
10066420:	4632      	mov	r2, r6
10066422:	47b8      	blx	r7
10066424:	4620      	mov	r0, r4
10066426:	3020      	adds	r0, #32
10066428:	1da9      	adds	r1, r5, #6
1006642a:	2208      	movs	r2, #8
1006642c:	47b8      	blx	r7
1006642e:	4620      	mov	r0, r4
10066430:	3028      	adds	r0, #40	@ 0x28
10066432:	4629      	mov	r1, r5
10066434:	310e      	adds	r1, #14
10066436:	2610      	movs	r6, #16
10066438:	4632      	mov	r2, r6
1006643a:	47b8      	blx	r7
1006643c:	4620      	mov	r0, r4
1006643e:	3038      	adds	r0, #56	@ 0x38
10066440:	4629      	mov	r1, r5
10066442:	311e      	adds	r1, #30
10066444:	4632      	mov	r2, r6
10066446:	47b8      	blx	r7
10066448:	4620      	mov	r0, r4
1006644a:	3048      	adds	r0, #72	@ 0x48
1006644c:	4629      	mov	r1, r5
1006644e:	312e      	adds	r1, #46	@ 0x2e
10066450:	4632      	mov	r2, r6
10066452:	47b8      	blx	r7
10066454:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
10066456:	66a0      	str	r0, [r4, #104]	@ 0x68
10066458:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
1006645a:	66e0      	str	r0, [r4, #108]	@ 0x6c
1006645c:	7868      	ldrb	r0, [r5, #1]
1006645e:	2106      	movs	r1, #6
10066460:	4001      	ands	r1, r0
10066462:	72e1      	strb	r1, [r4, #11]
10066464:	21e0      	movs	r1, #224	@ 0xe0
10066466:	4001      	ands	r1, r0
10066468:	7c60      	ldrb	r0, [r4, #17]
1006646a:	4308      	orrs	r0, r1
1006646c:	7460      	strb	r0, [r4, #17]
1006646e:	78a8      	ldrb	r0, [r5, #2]
10066470:	0701      	lsls	r1, r0, #28
10066472:	d502      	bpl.n	1006647a <smp_dep_sdb_copy_bonding_record_data_to_remdev+0x7e>
10066474:	21fe      	movs	r1, #254	@ 0xfe
10066476:	4008      	ands	r0, r1
10066478:	75e0      	strb	r0, [r4, #23]
1006647a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1006647c <__arm_cp.3_0>:
1006647c:	10046055 	.word	0x10046055

10066480 <smp_dep_sdb_find_bonding_record_read_address>:
10066480:	b570      	push	{r4, r5, r6, lr}
10066482:	b094      	sub	sp, #80	@ 0x50
10066484:	4614      	mov	r4, r2
10066486:	460e      	mov	r6, r1
10066488:	7841      	ldrb	r1, [r0, #1]
1006648a:	1c80      	adds	r0, r0, #2
1006648c:	466a      	mov	r2, sp
1006648e:	f7f9 fc06 	bl	1005fc9e <sdb_sap_read_security_record>
10066492:	4605      	mov	r5, r0
10066494:	2800      	cmp	r0, #0
10066496:	d107      	bne.n	100664a8 <smp_dep_sdb_find_bonding_record_read_address+0x28>
10066498:	2000      	movs	r0, #0
1006649a:	7030      	strb	r0, [r6, #0]
1006649c:	4669      	mov	r1, sp
1006649e:	313e      	adds	r1, #62	@ 0x3e
100664a0:	2206      	movs	r2, #6
100664a2:	4620      	mov	r0, r4
100664a4:	f7df fdd6 	bl	10046054 <BLEPLAT_MemCpy>
100664a8:	4628      	mov	r0, r5
100664aa:	b014      	add	sp, #80	@ 0x50
100664ac:	bd70      	pop	{r4, r5, r6, pc}

100664ae <smp_dep_sdb_find_matching_ltk_read_record>:
100664ae:	b5b0      	push	{r4, r5, r7, lr}
100664b0:	b094      	sub	sp, #80	@ 0x50
100664b2:	4614      	mov	r4, r2
100664b4:	466a      	mov	r2, sp
100664b6:	f7f9 fc6b 	bl	1005fd90 <sdb_sap_read_security_record_matching>
100664ba:	4605      	mov	r5, r0
100664bc:	2800      	cmp	r0, #0
100664be:	d103      	bne.n	100664c8 <smp_dep_sdb_find_matching_ltk_read_record+0x1a>
100664c0:	4668      	mov	r0, sp
100664c2:	4621      	mov	r1, r4
100664c4:	f7ff ff9a 	bl	100663fc <smp_dep_sdb_copy_bonding_record_data_to_remdev>
100664c8:	4628      	mov	r0, r5
100664ca:	b014      	add	sp, #80	@ 0x50
100664cc:	bdb0      	pop	{r4, r5, r7, pc}

100664ce <smp_start_encryption_ucfg_weak>:
100664ce:	201f      	movs	r0, #31
100664d0:	4770      	bx	lr
	...

100664d4 <smp_pp3_pairing_completed_successful>:
100664d4:	b570      	push	{r4, r5, r6, lr}
100664d6:	4604      	mov	r4, r0
100664d8:	7b80      	ldrb	r0, [r0, #14]
100664da:	2103      	movs	r1, #3
100664dc:	4001      	ands	r1, r0
100664de:	8925      	ldrh	r5, [r4, #8]
100664e0:	2903      	cmp	r1, #3
100664e2:	d10a      	bne.n	100664fa <smp_pp3_pairing_completed_successful+0x26>
100664e4:	4620      	mov	r0, r4
100664e6:	f7ff fee8 	bl	100662ba <smp_dep_sdb_add_bonding_record>
100664ea:	2800      	cmp	r0, #0
100664ec:	d005      	beq.n	100664fa <smp_pp3_pairing_completed_successful+0x26>
100664ee:	2108      	movs	r1, #8
100664f0:	2200      	movs	r2, #0
100664f2:	4620      	mov	r0, r4
100664f4:	f000 f826 	bl	10066544 <smp_pp3_pairing_process_abort>
100664f8:	bd70      	pop	{r4, r5, r6, pc}
100664fa:	4628      	mov	r0, r5
100664fc:	f7fa fb86 	bl	10060c0c <smp_get_remote_device_list_index>
10066500:	4602      	mov	r2, r0
10066502:	2001      	movs	r0, #1
10066504:	2100      	movs	r1, #0
10066506:	4b0e      	ldr	r3, [pc, #56]	@ (10066540 <__arm_cp.0_0>)
10066508:	f7fb fa00 	bl	1006190c <smp_timer_reset>
1006650c:	7ce0      	ldrb	r0, [r4, #19]
1006650e:	2803      	cmp	r0, #3
10066510:	d102      	bne.n	10066518 <smp_pp3_pairing_completed_successful+0x44>
10066512:	2000      	movs	r0, #0
10066514:	f7fa fbfa 	bl	10060d0c <smp_oob_clear_remote_data_entry>
10066518:	4620      	mov	r0, r4
1006651a:	3018      	adds	r0, #24
1006651c:	2600      	movs	r6, #0
1006651e:	2204      	movs	r2, #4
10066520:	4631      	mov	r1, r6
10066522:	f7df fda7 	bl	10046074 <BLEPLAT_MemSet>
10066526:	4620      	mov	r0, r4
10066528:	4631      	mov	r1, r6
1006652a:	f000 f83b 	bl	100665a4 <smp_pp3_pairing_completed_update_stats>
1006652e:	20f1      	movs	r0, #241	@ 0xf1
10066530:	72a0      	strb	r0, [r4, #10]
10066532:	2002      	movs	r0, #2
10066534:	4629      	mov	r1, r5
10066536:	4632      	mov	r2, r6
10066538:	4633      	mov	r3, r6
1006653a:	f7fd fc59 	bl	10063df0 <aci_gap_pairing_complete_event_push_noinline>
1006653e:	bd70      	pop	{r4, r5, r6, pc}

10066540 <__arm_cp.0_0>:
10066540:	00007530 	.word	0x00007530

10066544 <smp_pp3_pairing_process_abort>:
10066544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10066546:	4616      	mov	r6, r2
10066548:	460c      	mov	r4, r1
1006654a:	4605      	mov	r5, r0
1006654c:	8900      	ldrh	r0, [r0, #8]
1006654e:	f7fa fb5d 	bl	10060c0c <smp_get_remote_device_list_index>
10066552:	4602      	mov	r2, r0
10066554:	2001      	movs	r0, #1
10066556:	2700      	movs	r7, #0
10066558:	4b11      	ldr	r3, [pc, #68]	@ (100665a0 <__arm_cp.1_0>)
1006655a:	4639      	mov	r1, r7
1006655c:	f7fb f9d6 	bl	1006190c <smp_timer_reset>
10066560:	8928      	ldrh	r0, [r5, #8]
10066562:	f7fb f99b 	bl	1006189c <smp_rxp_flush_packet_queues>
10066566:	2102      	movs	r1, #2
10066568:	4628      	mov	r0, r5
1006656a:	f000 f81b 	bl	100665a4 <smp_pp3_pairing_completed_update_stats>
1006656e:	4628      	mov	r0, r5
10066570:	3018      	adds	r0, #24
10066572:	2204      	movs	r2, #4
10066574:	4639      	mov	r1, r7
10066576:	f7df fd7d 	bl	10046074 <BLEPLAT_MemSet>
1006657a:	7be8      	ldrb	r0, [r5, #15]
1006657c:	212f      	movs	r1, #47	@ 0x2f
1006657e:	4001      	ands	r1, r0
10066580:	73e9      	strb	r1, [r5, #15]
10066582:	2e00      	cmp	r6, #0
10066584:	d004      	beq.n	10066590 <smp_pp3_pairing_process_abort+0x4c>
10066586:	7868      	ldrb	r0, [r5, #1]
10066588:	1ca9      	adds	r1, r5, #2
1006658a:	f000 fafd 	bl	10066b88 <smp_cmn_repeated_attacks_protection_start>
1006658e:	27fb      	movs	r7, #251	@ 0xfb
10066590:	72af      	strb	r7, [r5, #10]
10066592:	8929      	ldrh	r1, [r5, #8]
10066594:	2002      	movs	r0, #2
10066596:	4602      	mov	r2, r0
10066598:	4623      	mov	r3, r4
1006659a:	f7fd fc29 	bl	10063df0 <aci_gap_pairing_complete_event_push_noinline>
1006659e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100665a0 <__arm_cp.1_0>:
100665a0:	00007530 	.word	0x00007530

100665a4 <smp_pp3_pairing_completed_update_stats>:
100665a4:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100665a6:	2260      	movs	r2, #96	@ 0x60
100665a8:	5c82      	ldrb	r2, [r0, r2]
100665aa:	07d2      	lsls	r2, r2, #31
100665ac:	7a82      	ldrb	r2, [r0, #10]
100665ae:	d104      	bne.n	100665ba <smp_pp3_pairing_completed_update_stats+0x16>
100665b0:	3260      	adds	r2, #96	@ 0x60
100665b2:	b2d2      	uxtb	r2, r2
100665b4:	2a51      	cmp	r2, #81	@ 0x51
100665b6:	d304      	bcc.n	100665c2 <smp_pp3_pairing_completed_update_stats+0x1e>
100665b8:	e00f      	b.n	100665da <smp_pp3_pairing_completed_update_stats+0x36>
100665ba:	3250      	adds	r2, #80	@ 0x50
100665bc:	b2d2      	uxtb	r2, r2
100665be:	2a40      	cmp	r2, #64	@ 0x40
100665c0:	d80b      	bhi.n	100665da <smp_pp3_pairing_completed_update_stats+0x36>
100665c2:	4a09      	ldr	r2, [pc, #36]	@ (100665e8 <__arm_cp.2_0>)
100665c4:	6812      	ldr	r2, [r2, #0]
100665c6:	23b1      	movs	r3, #177	@ 0xb1
100665c8:	5cd3      	ldrb	r3, [r2, r3]
100665ca:	2b00      	cmp	r3, #0
100665cc:	d005      	beq.n	100665da <smp_pp3_pairing_completed_update_stats+0x36>
100665ce:	32b1      	adds	r2, #177	@ 0xb1
100665d0:	7d04      	ldrb	r4, [r0, #20]
100665d2:	2501      	movs	r5, #1
100665d4:	40a5      	lsls	r5, r4
100665d6:	43ab      	bics	r3, r5
100665d8:	7013      	strb	r3, [r2, #0]
100665da:	466a      	mov	r2, sp
100665dc:	7111      	strb	r1, [r2, #4]
100665de:	9000      	str	r0, [sp, #0]
100665e0:	4610      	mov	r0, r2
100665e2:	f7eb fa53 	bl	10051a8c <smp_scp_stats_update_on_pairing_complete_ucfg>
100665e6:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100665e8 <__arm_cp.2_0>:
100665e8:	20001140 	.word	0x20001140

100665ec <smp_pp3_pairing_failed_receive>:
100665ec:	b5b0      	push	{r4, r5, r7, lr}
100665ee:	460c      	mov	r4, r1
100665f0:	2160      	movs	r1, #96	@ 0x60
100665f2:	5c61      	ldrb	r1, [r4, r1]
100665f4:	2201      	movs	r2, #1
100665f6:	400a      	ands	r2, r1
100665f8:	7aa3      	ldrb	r3, [r4, #10]
100665fa:	6840      	ldr	r0, [r0, #4]
100665fc:	7a41      	ldrb	r1, [r0, #9]
100665fe:	d102      	bne.n	10066606 <smp_pp3_pairing_failed_receive+0x1a>
10066600:	2b9f      	cmp	r3, #159	@ 0x9f
10066602:	d802      	bhi.n	1006660a <smp_pp3_pairing_failed_receive+0x1e>
10066604:	bdb0      	pop	{r4, r5, r7, pc}
10066606:	2bb0      	cmp	r3, #176	@ 0xb0
10066608:	d314      	bcc.n	10066634 <smp_pp3_pairing_failed_receive+0x48>
1006660a:	2bf0      	cmp	r3, #240	@ 0xf0
1006660c:	d915      	bls.n	1006663a <smp_pp3_pairing_failed_receive+0x4e>
1006660e:	2bf1      	cmp	r3, #241	@ 0xf1
10066610:	d10e      	bne.n	10066630 <smp_pp3_pairing_failed_receive+0x44>
10066612:	290f      	cmp	r1, #15
10066614:	d10c      	bne.n	10066630 <smp_pp3_pairing_failed_receive+0x44>
10066616:	4625      	mov	r5, r4
10066618:	3559      	adds	r5, #89	@ 0x59
1006661a:	210f      	movs	r1, #15
1006661c:	2201      	movs	r2, #1
1006661e:	4620      	mov	r0, r4
10066620:	f7ff ff90 	bl	10066544 <smp_pp3_pairing_process_abort>
10066624:	7829      	ldrb	r1, [r5, #0]
10066626:	345a      	adds	r4, #90	@ 0x5a
10066628:	4620      	mov	r0, r4
1006662a:	f7f9 fb9f 	bl	1005fd6c <sdb_sap_del_bonded_device>
1006662e:	bdb0      	pop	{r4, r5, r7, pc}
10066630:	2a00      	cmp	r2, #0
10066632:	d0e7      	beq.n	10066604 <smp_pp3_pairing_failed_receive+0x18>
10066634:	7e20      	ldrb	r0, [r4, #24]
10066636:	0780      	lsls	r0, r0, #30
10066638:	d0e4      	beq.n	10066604 <smp_pp3_pairing_failed_receive+0x18>
1006663a:	2201      	movs	r2, #1
1006663c:	4620      	mov	r0, r4
1006663e:	f7ff ff81 	bl	10066544 <smp_pp3_pairing_process_abort>
10066642:	bdb0      	pop	{r4, r5, r7, pc}

10066644 <smp_pp3_pairing_failed_send>:
10066644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10066646:	461f      	mov	r7, r3
10066648:	4613      	mov	r3, r2
1006664a:	460c      	mov	r4, r1
1006664c:	4605      	mov	r5, r0
1006664e:	2205      	movs	r2, #5
10066650:	4619      	mov	r1, r3
10066652:	4623      	mov	r3, r4
10066654:	f7ff fe14 	bl	10066280 <smp_dep_l2c_send_acl_short_pdu>
10066658:	4606      	mov	r6, r0
1006665a:	2f00      	cmp	r7, #0
1006665c:	d101      	bne.n	10066662 <smp_pp3_pairing_failed_send+0x1e>
1006665e:	2e88      	cmp	r6, #136	@ 0x88
10066660:	d004      	beq.n	1006666c <smp_pp3_pairing_failed_send+0x28>
10066662:	2201      	movs	r2, #1
10066664:	4628      	mov	r0, r5
10066666:	4621      	mov	r1, r4
10066668:	f7ff ff6c 	bl	10066544 <smp_pp3_pairing_process_abort>
1006666c:	4630      	mov	r0, r6
1006666e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10066670 <smp_pp1_per_rxp_pairing_request>:
10066670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10066672:	460c      	mov	r4, r1
10066674:	4607      	mov	r7, r0
10066676:	2501      	movs	r5, #1
10066678:	4628      	mov	r0, r5
1006667a:	f7f9 fec5 	bl	10060408 <smp_pp1_get_next_free_pairing_idx>
1006667e:	2802      	cmp	r0, #2
10066680:	d901      	bls.n	10066686 <smp_pp1_per_rxp_pairing_request+0x16>
10066682:	2038      	movs	r0, #56	@ 0x38
10066684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10066686:	4606      	mov	r6, r0
10066688:	4638      	mov	r0, r7
1006668a:	f7f9 fedd 	bl	10060448 <smp_pp1_reqrsp_pdu_params_check>
1006668e:	2800      	cmp	r0, #0
10066690:	d010      	beq.n	100666b4 <smp_pp1_per_rxp_pairing_request+0x44>
10066692:	4601      	mov	r1, r0
10066694:	4810      	ldr	r0, [pc, #64]	@ (100666d8 <__arm_cp.1_0>)
10066696:	6800      	ldr	r0, [r0, #0]
10066698:	22b1      	movs	r2, #177	@ 0xb1
1006669a:	5c82      	ldrb	r2, [r0, r2]
1006669c:	2a00      	cmp	r2, #0
1006669e:	d003      	beq.n	100666a8 <smp_pp1_per_rxp_pairing_request+0x38>
100666a0:	30b1      	adds	r0, #177	@ 0xb1
100666a2:	40b5      	lsls	r5, r6
100666a4:	43aa      	bics	r2, r5
100666a6:	7002      	strb	r2, [r0, #0]
100666a8:	2200      	movs	r2, #0
100666aa:	2301      	movs	r3, #1
100666ac:	4620      	mov	r0, r4
100666ae:	f7ff ffc9 	bl	10066644 <smp_pp3_pairing_failed_send>
100666b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100666b4:	7526      	strb	r6, [r4, #20]
100666b6:	2101      	movs	r1, #1
100666b8:	4638      	mov	r0, r7
100666ba:	4622      	mov	r2, r4
100666bc:	f7f9 fee8 	bl	10060490 <smp_pp1_reqrsp_pdu_copy_to_pairing_data>
100666c0:	4620      	mov	r0, r4
100666c2:	f7f9 fffd 	bl	100606c0 <smp_pp1_hndl_pairing_response_mode_through_event>
100666c6:	2800      	cmp	r0, #0
100666c8:	d001      	beq.n	100666ce <smp_pp1_per_rxp_pairing_request+0x5e>
100666ca:	2000      	movs	r0, #0
100666cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100666ce:	4620      	mov	r0, r4
100666d0:	f000 f804 	bl	100666dc <smp_pp1_per_send_pairing_response>
100666d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100666d6:	46c0      	nop			@ (mov r8, r8)

100666d8 <__arm_cp.1_0>:
100666d8:	20001140 	.word	0x20001140

100666dc <smp_pp1_per_send_pairing_response>:
100666dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100666de:	b087      	sub	sp, #28
100666e0:	4604      	mov	r4, r0
100666e2:	a806      	add	r0, sp, #24
100666e4:	2600      	movs	r6, #0
100666e6:	7006      	strb	r6, [r0, #0]
100666e8:	8921      	ldrh	r1, [r4, #8]
100666ea:	220b      	movs	r2, #11
100666ec:	4630      	mov	r0, r6
100666ee:	f7ec fa3f 	bl	10052b70 <ACL_pkt_get>
100666f2:	2800      	cmp	r0, #0
100666f4:	d01b      	beq.n	1006672e <smp_pp1_per_send_pairing_response+0x52>
100666f6:	9005      	str	r0, [sp, #20]
100666f8:	20b0      	movs	r0, #176	@ 0xb0
100666fa:	72a0      	strb	r0, [r4, #10]
100666fc:	75e6      	strb	r6, [r4, #23]
100666fe:	7be0      	ldrb	r0, [r4, #15]
10066700:	212f      	movs	r1, #47	@ 0x2f
10066702:	4001      	ands	r1, r0
10066704:	73e1      	strb	r1, [r4, #15]
10066706:	4f43      	ldr	r7, [pc, #268]	@ (10066814 <__arm_cp.2_0>)
10066708:	683d      	ldr	r5, [r7, #0]
1006670a:	7d20      	ldrb	r0, [r4, #20]
1006670c:	2101      	movs	r1, #1
1006670e:	9104      	str	r1, [sp, #16]
10066710:	f7f9 fe94 	bl	1006043c <smp_pp1_get_pairing_pdu_offset>
10066714:	1940      	adds	r0, r0, r5
10066716:	21b7      	movs	r1, #183	@ 0xb7
10066718:	5c45      	ldrb	r5, [r0, r1]
1006671a:	6838      	ldr	r0, [r7, #0]
1006671c:	2132      	movs	r1, #50	@ 0x32
1006671e:	5c40      	ldrb	r0, [r0, r1]
10066720:	2802      	cmp	r0, #2
10066722:	d106      	bne.n	10066732 <smp_pp1_per_send_pairing_response+0x56>
10066724:	2008      	movs	r0, #8
10066726:	4028      	ands	r0, r5
10066728:	d103      	bne.n	10066732 <smp_pp1_per_send_pairing_response+0x56>
1006672a:	2103      	movs	r1, #3
1006672c:	e051      	b.n	100667d2 <smp_pp1_per_send_pairing_response+0xf6>
1006672e:	2688      	movs	r6, #136	@ 0x88
10066730:	e061      	b.n	100667f6 <smp_pp1_per_send_pairing_response+0x11a>
10066732:	7e20      	ldrb	r0, [r4, #24]
10066734:	07c0      	lsls	r0, r0, #31
10066736:	d105      	bne.n	10066744 <smp_pp1_per_send_pairing_response+0x68>
10066738:	af06      	add	r7, sp, #24
1006673a:	4638      	mov	r0, r7
1006673c:	f7f9 ffa6 	bl	1006068c <smp_pp1_auth_req_field_generate_from_device_config>
10066740:	7838      	ldrb	r0, [r7, #0]
10066742:	e002      	b.n	1006674a <smp_pp1_per_send_pairing_response+0x6e>
10066744:	7d60      	ldrb	r0, [r4, #21]
10066746:	a906      	add	r1, sp, #24
10066748:	7008      	strb	r0, [r1, #0]
1006674a:	4005      	ands	r5, r0
1006674c:	2018      	movs	r0, #24
1006674e:	4028      	ands	r0, r5
10066750:	7de1      	ldrb	r1, [r4, #23]
10066752:	4301      	orrs	r1, r0
10066754:	75e1      	strb	r1, [r4, #23]
10066756:	0708      	lsls	r0, r1, #28
10066758:	d401      	bmi.n	1006675e <smp_pp1_per_send_pairing_response+0x82>
1006675a:	27b4      	movs	r7, #180	@ 0xb4
1006675c:	e006      	b.n	1006676c <smp_pp1_per_send_pairing_response+0x90>
1006675e:	4620      	mov	r0, r4
10066760:	f7eb f97a 	bl	10051a58 <smp_scp_continue_on_exclusive_sc_pairing_ucfg>
10066764:	4601      	mov	r1, r0
10066766:	2800      	cmp	r0, #0
10066768:	d133      	bne.n	100667d2 <smp_pp1_per_send_pairing_response+0xf6>
1006676a:	27b2      	movs	r7, #178	@ 0xb2
1006676c:	4620      	mov	r0, r4
1006676e:	f7fa fa8f 	bl	10060c90 <smp_oob_check_is_remote_data_present>
10066772:	9806      	ldr	r0, [sp, #24]
10066774:	0741      	lsls	r1, r0, #29
10066776:	0fc9      	lsrs	r1, r1, #31
10066778:	73e1      	strb	r1, [r4, #15]
1006677a:	07c0      	lsls	r0, r0, #31
1006677c:	0f80      	lsrs	r0, r0, #30
1006677e:	73a0      	strb	r0, [r4, #14]
10066780:	4620      	mov	r0, r4
10066782:	f7f9 fe97 	bl	100604b4 <smp_pp1_reqrsp_pdu_extract_from_pairing_data>
10066786:	4620      	mov	r0, r4
10066788:	f7f9 fee0 	bl	1006054c <smp_pp1_key_generation_method_selection>
1006678c:	4601      	mov	r1, r0
1006678e:	2800      	cmp	r0, #0
10066790:	d11f      	bne.n	100667d2 <smp_pp1_per_send_pairing_response+0xf6>
10066792:	7ce0      	ldrb	r0, [r4, #19]
10066794:	2802      	cmp	r0, #2
10066796:	d104      	bne.n	100667a2 <smp_pp1_per_send_pairing_response+0xc6>
10066798:	7be0      	ldrb	r0, [r4, #15]
1006679a:	06c0      	lsls	r0, r0, #27
1006679c:	d401      	bmi.n	100667a2 <smp_pp1_per_send_pairing_response+0xc6>
1006679e:	204d      	movs	r0, #77	@ 0x4d
100667a0:	43c7      	mvns	r7, r0
100667a2:	481c      	ldr	r0, [pc, #112]	@ (10066814 <__arm_cp.2_0>)
100667a4:	6800      	ldr	r0, [r0, #0]
100667a6:	2135      	movs	r1, #53	@ 0x35
100667a8:	5c40      	ldrb	r0, [r0, r1]
100667aa:	a906      	add	r1, sp, #24
100667ac:	780b      	ldrb	r3, [r1, #0]
100667ae:	7b62      	ldrb	r2, [r4, #13]
100667b0:	7c61      	ldrb	r1, [r4, #17]
100667b2:	7ca5      	ldrb	r5, [r4, #18]
100667b4:	9000      	str	r0, [sp, #0]
100667b6:	9101      	str	r1, [sp, #4]
100667b8:	9502      	str	r5, [sp, #8]
100667ba:	2102      	movs	r1, #2
100667bc:	9d05      	ldr	r5, [sp, #20]
100667be:	4628      	mov	r0, r5
100667c0:	f7f9 ffc2 	bl	10060748 <smp_pp1_pairing_packet_build>
100667c4:	4620      	mov	r0, r4
100667c6:	4629      	mov	r1, r5
100667c8:	f7ff fd40 	bl	1006624c <smp_dep_l2c_send_acl_packet>
100667cc:	4601      	mov	r1, r0
100667ce:	2800      	cmp	r0, #0
100667d0:	d014      	beq.n	100667fc <smp_pp1_per_send_pairing_response+0x120>
100667d2:	4810      	ldr	r0, [pc, #64]	@ (10066814 <__arm_cp.2_0>)
100667d4:	6800      	ldr	r0, [r0, #0]
100667d6:	22b1      	movs	r2, #177	@ 0xb1
100667d8:	5c82      	ldrb	r2, [r0, r2]
100667da:	2a00      	cmp	r2, #0
100667dc:	d005      	beq.n	100667ea <smp_pp1_per_send_pairing_response+0x10e>
100667de:	30b1      	adds	r0, #177	@ 0xb1
100667e0:	7d23      	ldrb	r3, [r4, #20]
100667e2:	9d04      	ldr	r5, [sp, #16]
100667e4:	409d      	lsls	r5, r3
100667e6:	43aa      	bics	r2, r5
100667e8:	7002      	strb	r2, [r0, #0]
100667ea:	2301      	movs	r3, #1
100667ec:	4620      	mov	r0, r4
100667ee:	9a05      	ldr	r2, [sp, #20]
100667f0:	f7ff ff28 	bl	10066644 <smp_pp3_pairing_failed_send>
100667f4:	4606      	mov	r6, r0
100667f6:	4630      	mov	r0, r6
100667f8:	b007      	add	sp, #28
100667fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
100667fc:	7ae0      	ldrb	r0, [r4, #11]
100667fe:	21f8      	movs	r1, #248	@ 0xf8
10066800:	4001      	ands	r1, r0
10066802:	72e1      	strb	r1, [r4, #11]
10066804:	9805      	ldr	r0, [sp, #20]
10066806:	4631      	mov	r1, r6
10066808:	4622      	mov	r2, r4
1006680a:	f7f9 fe41 	bl	10060490 <smp_pp1_reqrsp_pdu_copy_to_pairing_data>
1006680e:	72a7      	strb	r7, [r4, #10]
10066810:	e7f1      	b.n	100667f6 <smp_pp1_per_send_pairing_response+0x11a>
10066812:	46c0      	nop			@ (mov r8, r8)

10066814 <__arm_cp.2_0>:
10066814:	20001140 	.word	0x20001140

10066818 <smp_pp3_keys_distribution_start>:
10066818:	b580      	push	{r7, lr}
1006681a:	2901      	cmp	r1, #1
1006681c:	d111      	bne.n	10066842 <smp_pp3_keys_distribution_start+0x2a>
1006681e:	7c42      	ldrb	r2, [r0, #17]
10066820:	0753      	lsls	r3, r2, #29
10066822:	d005      	beq.n	10066830 <smp_pp3_keys_distribution_start+0x18>
10066824:	7dc3      	ldrb	r3, [r0, #23]
10066826:	071b      	lsls	r3, r3, #28
10066828:	d51d      	bpl.n	10066866 <smp_pp3_keys_distribution_start+0x4e>
1006682a:	2306      	movs	r3, #6
1006682c:	401a      	ands	r2, r3
1006682e:	d11a      	bne.n	10066866 <smp_pp3_keys_distribution_start+0x4e>
10066830:	2260      	movs	r2, #96	@ 0x60
10066832:	5c83      	ldrb	r3, [r0, r2]
10066834:	2201      	movs	r2, #1
10066836:	401a      	ands	r2, r3
10066838:	2900      	cmp	r1, #0
1006683a:	d006      	beq.n	1006684a <smp_pp3_keys_distribution_start+0x32>
1006683c:	2a00      	cmp	r2, #0
1006683e:	d119      	bne.n	10066874 <smp_pp3_keys_distribution_start+0x5c>
10066840:	e003      	b.n	1006684a <smp_pp3_keys_distribution_start+0x32>
10066842:	2900      	cmp	r1, #0
10066844:	d000      	beq.n	10066848 <smp_pp3_keys_distribution_start+0x30>
10066846:	bd80      	pop	{r7, pc}
10066848:	2200      	movs	r2, #0
1006684a:	7c81      	ldrb	r1, [r0, #18]
1006684c:	07cb      	lsls	r3, r1, #31
1006684e:	d004      	beq.n	1006685a <smp_pp3_keys_distribution_start+0x42>
10066850:	7dc3      	ldrb	r3, [r0, #23]
10066852:	071b      	lsls	r3, r3, #28
10066854:	d401      	bmi.n	1006685a <smp_pp3_keys_distribution_start+0x42>
10066856:	21d1      	movs	r1, #209	@ 0xd1
10066858:	e009      	b.n	1006686e <smp_pp3_keys_distribution_start+0x56>
1006685a:	078b      	lsls	r3, r1, #30
1006685c:	d406      	bmi.n	1006686c <smp_pp3_keys_distribution_start+0x54>
1006685e:	0749      	lsls	r1, r1, #29
10066860:	d508      	bpl.n	10066874 <smp_pp3_keys_distribution_start+0x5c>
10066862:	21d5      	movs	r1, #213	@ 0xd5
10066864:	e003      	b.n	1006686e <smp_pp3_keys_distribution_start+0x56>
10066866:	21d0      	movs	r1, #208	@ 0xd0
10066868:	7281      	strb	r1, [r0, #10]
1006686a:	bd80      	pop	{r7, pc}
1006686c:	21d3      	movs	r1, #211	@ 0xd3
1006686e:	7281      	strb	r1, [r0, #10]
10066870:	2a00      	cmp	r2, #0
10066872:	d002      	beq.n	1006687a <smp_pp3_keys_distribution_start+0x62>
10066874:	f000 f804 	bl	10066880 <smp_pp3_keys_distribution_completed>
10066878:	bd80      	pop	{r7, pc}
1006687a:	f000 f817 	bl	100668ac <smp_pp3_keys_distribution_send>
1006687e:	bd80      	pop	{r7, pc}

10066880 <smp_pp3_keys_distribution_completed>:
10066880:	b580      	push	{r7, lr}
10066882:	2160      	movs	r1, #96	@ 0x60
10066884:	5c41      	ldrb	r1, [r0, r1]
10066886:	07c9      	lsls	r1, r1, #31
10066888:	d106      	bne.n	10066898 <smp_pp3_keys_distribution_completed+0x18>
1006688a:	2111      	movs	r1, #17
1006688c:	5641      	ldrsb	r1, [r0, r1]
1006688e:	2900      	cmp	r1, #0
10066890:	d502      	bpl.n	10066898 <smp_pp3_keys_distribution_completed+0x18>
10066892:	7e81      	ldrb	r1, [r0, #26]
10066894:	068a      	lsls	r2, r1, #26
10066896:	d402      	bmi.n	1006689e <smp_pp3_keys_distribution_completed+0x1e>
10066898:	f7ff fe1c 	bl	100664d4 <smp_pp3_pairing_completed_successful>
1006689c:	bd80      	pop	{r7, pc}
1006689e:	2204      	movs	r2, #4
100668a0:	4311      	orrs	r1, r2
100668a2:	7681      	strb	r1, [r0, #26]
100668a4:	f7ff fe13 	bl	100664ce <smp_start_encryption_ucfg_weak>
100668a8:	bd80      	pop	{r7, pc}
	...

100668ac <smp_pp3_keys_distribution_send>:
100668ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100668ae:	b089      	sub	sp, #36	@ 0x24
100668b0:	4604      	mov	r4, r0
100668b2:	a808      	add	r0, sp, #32
100668b4:	2600      	movs	r6, #0
100668b6:	8006      	strh	r6, [r0, #0]
100668b8:	8921      	ldrh	r1, [r4, #8]
100668ba:	2215      	movs	r2, #21
100668bc:	4630      	mov	r0, r6
100668be:	f7ec f957 	bl	10052b70 <ACL_pkt_get>
100668c2:	2800      	cmp	r0, #0
100668c4:	d02d      	beq.n	10066922 <smp_pp3_keys_distribution_send+0x76>
100668c6:	4605      	mov	r5, r0
100668c8:	2060      	movs	r0, #96	@ 0x60
100668ca:	5c20      	ldrb	r0, [r4, r0]
100668cc:	06c0      	lsls	r0, r0, #27
100668ce:	d40b      	bmi.n	100668e8 <smp_pp3_keys_distribution_send+0x3c>
100668d0:	4627      	mov	r7, r4
100668d2:	3760      	adds	r7, #96	@ 0x60
100668d4:	4620      	mov	r0, r4
100668d6:	301c      	adds	r0, #28
100668d8:	2102      	movs	r1, #2
100668da:	2200      	movs	r2, #0
100668dc:	f7fc f910 	bl	10062b00 <HAL_Generate_Random_Bytes_To>
100668e0:	7838      	ldrb	r0, [r7, #0]
100668e2:	2110      	movs	r1, #16
100668e4:	4301      	orrs	r1, r0
100668e6:	7039      	strb	r1, [r7, #0]
100668e8:	7aa0      	ldrb	r0, [r4, #10]
100668ea:	38d1      	subs	r0, #209	@ 0xd1
100668ec:	2804      	cmp	r0, #4
100668ee:	d869      	bhi.n	100669c4 <smp_pp3_keys_distribution_send+0x118>
100668f0:	4478      	add	r0, pc
100668f2:	7900      	ldrb	r0, [r0, #4]
100668f4:	0040      	lsls	r0, r0, #1
100668f6:	4487      	add	pc, r0
100668f8:	42381902 	.word	0x42381902
100668fc:	0054      	.short	0x0054
100668fe:	4836      	ldr	r0, [pc, #216]	@ (100669d8 <__arm_cp.2_0>)
10066900:	6800      	ldr	r0, [r0, #0]
10066902:	4621      	mov	r1, r4
10066904:	311c      	adds	r1, #28
10066906:	3008      	adds	r0, #8
10066908:	aa08      	add	r2, sp, #32
1006690a:	ae04      	add	r6, sp, #16
1006690c:	4633      	mov	r3, r6
1006690e:	f7f9 fb05 	bl	1005ff1c <smp_crt_diversify>
10066912:	6868      	ldr	r0, [r5, #4]
10066914:	2106      	movs	r1, #6
10066916:	7201      	strb	r1, [r0, #8]
10066918:	2011      	movs	r0, #17
1006691a:	8068      	strh	r0, [r5, #2]
1006691c:	7c22      	ldrb	r2, [r4, #16]
1006691e:	2105      	movs	r1, #5
10066920:	e04c      	b.n	100669bc <smp_pp3_keys_distribution_send+0x110>
10066922:	200e      	movs	r0, #14
10066924:	2100      	movs	r1, #0
10066926:	f7fb fdd9 	bl	100624dc <tsk_wait_resource_idx>
1006692a:	e053      	b.n	100669d4 <smp_pp3_keys_distribution_send+0x128>
1006692c:	ae04      	add	r6, sp, #16
1006692e:	2108      	movs	r1, #8
10066930:	9102      	str	r1, [sp, #8]
10066932:	2200      	movs	r2, #0
10066934:	4630      	mov	r0, r6
10066936:	9601      	str	r6, [sp, #4]
10066938:	f7fc f8e2 	bl	10062b00 <HAL_Generate_Random_Bytes_To>
1006693c:	4620      	mov	r0, r4
1006693e:	301c      	adds	r0, #28
10066940:	af08      	add	r7, sp, #32
10066942:	4631      	mov	r1, r6
10066944:	463a      	mov	r2, r7
10066946:	f7f9 fab3 	bl	1005feb0 <smp_sap_crt_generate_ediv>
1006694a:	200b      	movs	r0, #11
1006694c:	8068      	strh	r0, [r5, #2]
1006694e:	6868      	ldr	r0, [r5, #4]
10066950:	2607      	movs	r6, #7
10066952:	7206      	strb	r6, [r0, #8]
10066954:	2105      	movs	r1, #5
10066956:	2202      	movs	r2, #2
10066958:	4628      	mov	r0, r5
1006695a:	463b      	mov	r3, r7
1006695c:	f7ec f968 	bl	10052c30 <ACL_pkt_write>
10066960:	4628      	mov	r0, r5
10066962:	4631      	mov	r1, r6
10066964:	9a02      	ldr	r2, [sp, #8]
10066966:	9b01      	ldr	r3, [sp, #4]
10066968:	e02a      	b.n	100669c0 <smp_pp3_keys_distribution_send+0x114>
1006696a:	2011      	movs	r0, #17
1006696c:	8068      	strh	r0, [r5, #2]
1006696e:	6868      	ldr	r0, [r5, #4]
10066970:	2108      	movs	r1, #8
10066972:	7201      	strb	r1, [r0, #8]
10066974:	ae04      	add	r6, sp, #16
10066976:	4630      	mov	r0, r6
10066978:	f7f9 fae4 	bl	1005ff44 <smp_sap_crt_generate_local_irk>
1006697c:	e01c      	b.n	100669b8 <smp_pp3_keys_distribution_send+0x10c>
1006697e:	a803      	add	r0, sp, #12
10066980:	7006      	strb	r6, [r0, #0]
10066982:	ae04      	add	r6, sp, #16
10066984:	4631      	mov	r1, r6
10066986:	f7ff fc49 	bl	1006621c <smp_dep_gap_get_local_identity_address>
1006698a:	2008      	movs	r0, #8
1006698c:	8068      	strh	r0, [r5, #2]
1006698e:	6868      	ldr	r0, [r5, #4]
10066990:	2109      	movs	r1, #9
10066992:	7201      	strb	r1, [r0, #8]
10066994:	6868      	ldr	r0, [r5, #4]
10066996:	9903      	ldr	r1, [sp, #12]
10066998:	7241      	strb	r1, [r0, #9]
1006699a:	2106      	movs	r1, #6
1006699c:	4628      	mov	r0, r5
1006699e:	460a      	mov	r2, r1
100669a0:	e00d      	b.n	100669be <smp_pp3_keys_distribution_send+0x112>
100669a2:	2011      	movs	r0, #17
100669a4:	8068      	strh	r0, [r5, #2]
100669a6:	6868      	ldr	r0, [r5, #4]
100669a8:	210a      	movs	r1, #10
100669aa:	7201      	strb	r1, [r0, #8]
100669ac:	4620      	mov	r0, r4
100669ae:	301c      	adds	r0, #28
100669b0:	ae04      	add	r6, sp, #16
100669b2:	4631      	mov	r1, r6
100669b4:	f7f9 fb48 	bl	10060048 <smp_crt_generate_csrk>
100669b8:	2105      	movs	r1, #5
100669ba:	2210      	movs	r2, #16
100669bc:	4628      	mov	r0, r5
100669be:	4633      	mov	r3, r6
100669c0:	f7ec f936 	bl	10052c30 <ACL_pkt_write>
100669c4:	4620      	mov	r0, r4
100669c6:	4629      	mov	r1, r5
100669c8:	f7ff fc40 	bl	1006624c <smp_dep_l2c_send_acl_packet>
100669cc:	2800      	cmp	r0, #0
100669ce:	d101      	bne.n	100669d4 <smp_pp3_keys_distribution_send+0x128>
100669d0:	20dd      	movs	r0, #221	@ 0xdd
100669d2:	72a0      	strb	r0, [r4, #10]
100669d4:	b009      	add	sp, #36	@ 0x24
100669d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100669d8 <__arm_cp.2_0>:
100669d8:	200010a0 	.word	0x200010a0

100669dc <smp_pp3_keys_distribution_signaling_ack>:
100669dc:	b580      	push	{r7, lr}
100669de:	7a82      	ldrb	r2, [r0, #10]
100669e0:	2add      	cmp	r2, #221	@ 0xdd
100669e2:	d123      	bne.n	10066a2c <smp_pp3_keys_distribution_signaling_ack+0x50>
100669e4:	1f8a      	subs	r2, r1, #6
100669e6:	2a04      	cmp	r2, #4
100669e8:	d81e      	bhi.n	10066a28 <smp_pp3_keys_distribution_signaling_ack+0x4c>
100669ea:	21d2      	movs	r1, #210	@ 0xd2
100669ec:	447a      	add	r2, pc
100669ee:	7912      	ldrb	r2, [r2, #4]
100669f0:	0052      	lsls	r2, r2, #1
100669f2:	4497      	add	pc, r2
100669f4:	07110218 	.word	0x07110218
100669f8:	000a      	.short	0x000a
100669fa:	7c81      	ldrb	r1, [r0, #18]
100669fc:	078a      	lsls	r2, r1, #30
100669fe:	d502      	bpl.n	10066a06 <smp_pp3_keys_distribution_signaling_ack+0x2a>
10066a00:	21d3      	movs	r1, #211	@ 0xd3
10066a02:	e010      	b.n	10066a26 <smp_pp3_keys_distribution_signaling_ack+0x4a>
10066a04:	7c81      	ldrb	r1, [r0, #18]
10066a06:	0749      	lsls	r1, r1, #29
10066a08:	d40c      	bmi.n	10066a24 <smp_pp3_keys_distribution_signaling_ack+0x48>
10066a0a:	2160      	movs	r1, #96	@ 0x60
10066a0c:	5c41      	ldrb	r1, [r0, r1]
10066a0e:	07c9      	lsls	r1, r1, #31
10066a10:	d104      	bne.n	10066a1c <smp_pp3_keys_distribution_signaling_ack+0x40>
10066a12:	f7ff ff35 	bl	10066880 <smp_pp3_keys_distribution_completed>
10066a16:	bd80      	pop	{r7, pc}
10066a18:	21d4      	movs	r1, #212	@ 0xd4
10066a1a:	e004      	b.n	10066a26 <smp_pp3_keys_distribution_signaling_ack+0x4a>
10066a1c:	2101      	movs	r1, #1
10066a1e:	f7ff fefb 	bl	10066818 <smp_pp3_keys_distribution_start>
10066a22:	bd80      	pop	{r7, pc}
10066a24:	21d5      	movs	r1, #213	@ 0xd5
10066a26:	7281      	strb	r1, [r0, #10]
10066a28:	f7ff ff40 	bl	100668ac <smp_pp3_keys_distribution_send>
10066a2c:	bd80      	pop	{r7, pc}
	...

10066a30 <smp_pp3_keys_distribution_receive>:
10066a30:	b5f0      	push	{r4, r5, r6, r7, lr}
10066a32:	b085      	sub	sp, #20
10066a34:	4607      	mov	r7, r0
10066a36:	6840      	ldr	r0, [r0, #4]
10066a38:	7a05      	ldrb	r5, [r0, #8]
10066a3a:	1fa8      	subs	r0, r5, #6
10066a3c:	2804      	cmp	r0, #4
10066a3e:	d823      	bhi.n	10066a88 <smp_pp3_keys_distribution_receive+0x58>
10066a40:	460c      	mov	r4, r1
10066a42:	7a88      	ldrb	r0, [r1, #10]
10066a44:	2686      	movs	r6, #134	@ 0x86
10066a46:	28d0      	cmp	r0, #208	@ 0xd0
10066a48:	d11f      	bne.n	10066a8a <smp_pp3_keys_distribution_receive+0x5a>
10066a4a:	4620      	mov	r0, r4
10066a4c:	3059      	adds	r0, #89	@ 0x59
10066a4e:	9001      	str	r0, [sp, #4]
10066a50:	8920      	ldrh	r0, [r4, #8]
10066a52:	f7fa f8db 	bl	10060c0c <smp_get_remote_device_list_index>
10066a56:	4602      	mov	r2, r0
10066a58:	2000      	movs	r0, #0
10066a5a:	4b44      	ldr	r3, [pc, #272]	@ (10066b6c <__arm_cp.4_0>)
10066a5c:	9002      	str	r0, [sp, #8]
10066a5e:	4601      	mov	r1, r0
10066a60:	f7fa ff54 	bl	1006190c <smp_timer_reset>
10066a64:	2d06      	cmp	r5, #6
10066a66:	d005      	beq.n	10066a74 <smp_pp3_keys_distribution_receive+0x44>
10066a68:	2d09      	cmp	r5, #9
10066a6a:	d011      	beq.n	10066a90 <smp_pp3_keys_distribution_receive+0x60>
10066a6c:	2d08      	cmp	r5, #8
10066a6e:	d034      	beq.n	10066ada <smp_pp3_keys_distribution_receive+0xaa>
10066a70:	2d07      	cmp	r5, #7
10066a72:	d13d      	bne.n	10066af0 <smp_pp3_keys_distribution_receive+0xc0>
10066a74:	7de0      	ldrb	r0, [r4, #23]
10066a76:	0700      	lsls	r0, r0, #28
10066a78:	d407      	bmi.n	10066a8a <smp_pp3_keys_distribution_receive+0x5a>
10066a7a:	7c60      	ldrb	r0, [r4, #17]
10066a7c:	07c0      	lsls	r0, r0, #31
10066a7e:	d004      	beq.n	10066a8a <smp_pp3_keys_distribution_receive+0x5a>
10066a80:	2d06      	cmp	r5, #6
10066a82:	d144      	bne.n	10066b0e <smp_pp3_keys_distribution_receive+0xde>
10066a84:	3428      	adds	r4, #40	@ 0x28
10066a86:	e02c      	b.n	10066ae2 <smp_pp3_keys_distribution_receive+0xb2>
10066a88:	2684      	movs	r6, #132	@ 0x84
10066a8a:	4630      	mov	r0, r6
10066a8c:	b005      	add	sp, #20
10066a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10066a90:	7c60      	ldrb	r0, [r4, #17]
10066a92:	0780      	lsls	r0, r0, #30
10066a94:	d5f9      	bpl.n	10066a8a <smp_pp3_keys_distribution_receive+0x5a>
10066a96:	ab03      	add	r3, sp, #12
10066a98:	2600      	movs	r6, #0
10066a9a:	809e      	strh	r6, [r3, #4]
10066a9c:	9603      	str	r6, [sp, #12]
10066a9e:	2106      	movs	r1, #6
10066aa0:	4638      	mov	r0, r7
10066aa2:	460a      	mov	r2, r1
10066aa4:	f7ec f899 	bl	10052bda <ACL_pkt_cmp>
10066aa8:	2800      	cmp	r0, #0
10066aaa:	d045      	beq.n	10066b38 <smp_pp3_keys_distribution_receive+0x108>
10066aac:	6878      	ldr	r0, [r7, #4]
10066aae:	7a40      	ldrb	r0, [r0, #9]
10066ab0:	9d01      	ldr	r5, [sp, #4]
10066ab2:	7028      	strb	r0, [r5, #0]
10066ab4:	4623      	mov	r3, r4
10066ab6:	335a      	adds	r3, #90	@ 0x5a
10066ab8:	2106      	movs	r1, #6
10066aba:	4638      	mov	r0, r7
10066abc:	460a      	mov	r2, r1
10066abe:	f7ec f895 	bl	10052bec <ACL_pkt_read>
10066ac2:	7828      	ldrb	r0, [r5, #0]
10066ac4:	2801      	cmp	r0, #1
10066ac6:	d103      	bne.n	10066ad0 <smp_pp3_keys_distribution_receive+0xa0>
10066ac8:	79a8      	ldrb	r0, [r5, #6]
10066aca:	0980      	lsrs	r0, r0, #6
10066acc:	2803      	cmp	r0, #3
10066ace:	d345      	bcc.n	10066b5c <smp_pp3_keys_distribution_receive+0x12c>
10066ad0:	7c61      	ldrb	r1, [r4, #17]
10066ad2:	2020      	movs	r0, #32
10066ad4:	4308      	orrs	r0, r1
10066ad6:	7460      	strb	r0, [r4, #17]
10066ad8:	e02f      	b.n	10066b3a <smp_pp3_keys_distribution_receive+0x10a>
10066ada:	7c60      	ldrb	r0, [r4, #17]
10066adc:	0780      	lsls	r0, r0, #30
10066ade:	d5d4      	bpl.n	10066a8a <smp_pp3_keys_distribution_receive+0x5a>
10066ae0:	3438      	adds	r4, #56	@ 0x38
10066ae2:	2105      	movs	r1, #5
10066ae4:	2210      	movs	r2, #16
10066ae6:	4638      	mov	r0, r7
10066ae8:	4623      	mov	r3, r4
10066aea:	f7ec f87f 	bl	10052bec <ACL_pkt_read>
10066aee:	e033      	b.n	10066b58 <smp_pp3_keys_distribution_receive+0x128>
10066af0:	7c60      	ldrb	r0, [r4, #17]
10066af2:	0740      	lsls	r0, r0, #29
10066af4:	d5c9      	bpl.n	10066a8a <smp_pp3_keys_distribution_receive+0x5a>
10066af6:	4623      	mov	r3, r4
10066af8:	3348      	adds	r3, #72	@ 0x48
10066afa:	2105      	movs	r1, #5
10066afc:	2210      	movs	r2, #16
10066afe:	4638      	mov	r0, r7
10066b00:	f7ec f874 	bl	10052bec <ACL_pkt_read>
10066b04:	7c60      	ldrb	r0, [r4, #17]
10066b06:	2140      	movs	r1, #64	@ 0x40
10066b08:	4301      	orrs	r1, r0
10066b0a:	7461      	strb	r1, [r4, #17]
10066b0c:	e017      	b.n	10066b3e <smp_pp3_keys_distribution_receive+0x10e>
10066b0e:	6878      	ldr	r0, [r7, #4]
10066b10:	7a40      	ldrb	r0, [r0, #9]
10066b12:	77a0      	strb	r0, [r4, #30]
10066b14:	6878      	ldr	r0, [r7, #4]
10066b16:	7a80      	ldrb	r0, [r0, #10]
10066b18:	77e0      	strb	r0, [r4, #31]
10066b1a:	4623      	mov	r3, r4
10066b1c:	3320      	adds	r3, #32
10066b1e:	2107      	movs	r1, #7
10066b20:	2208      	movs	r2, #8
10066b22:	4638      	mov	r0, r7
10066b24:	f7ec f862 	bl	10052bec <ACL_pkt_read>
10066b28:	7c60      	ldrb	r0, [r4, #17]
10066b2a:	2180      	movs	r1, #128	@ 0x80
10066b2c:	4301      	orrs	r1, r0
10066b2e:	7461      	strb	r1, [r4, #17]
10066b30:	0740      	lsls	r0, r0, #29
10066b32:	0f80      	lsrs	r0, r0, #30
10066b34:	d110      	bne.n	10066b58 <smp_pp3_keys_distribution_receive+0x128>
10066b36:	e002      	b.n	10066b3e <smp_pp3_keys_distribution_receive+0x10e>
10066b38:	7c60      	ldrb	r0, [r4, #17]
10066b3a:	0740      	lsls	r0, r0, #29
10066b3c:	d4a5      	bmi.n	10066a8a <smp_pp3_keys_distribution_receive+0x5a>
10066b3e:	9801      	ldr	r0, [sp, #4]
10066b40:	79c0      	ldrb	r0, [r0, #7]
10066b42:	07c0      	lsls	r0, r0, #31
10066b44:	d105      	bne.n	10066b52 <smp_pp3_keys_distribution_receive+0x122>
10066b46:	2600      	movs	r6, #0
10066b48:	4620      	mov	r0, r4
10066b4a:	4631      	mov	r1, r6
10066b4c:	f7ff fe64 	bl	10066818 <smp_pp3_keys_distribution_start>
10066b50:	e79b      	b.n	10066a8a <smp_pp3_keys_distribution_receive+0x5a>
10066b52:	4620      	mov	r0, r4
10066b54:	f7ff fcbe 	bl	100664d4 <smp_pp3_pairing_completed_successful>
10066b58:	9e02      	ldr	r6, [sp, #8]
10066b5a:	e796      	b.n	10066a8a <smp_pp3_keys_distribution_receive+0x5a>
10066b5c:	2108      	movs	r1, #8
10066b5e:	2200      	movs	r2, #0
10066b60:	2301      	movs	r3, #1
10066b62:	4620      	mov	r0, r4
10066b64:	f7ff fd6e 	bl	10066644 <smp_pp3_pairing_failed_send>
10066b68:	4606      	mov	r6, r0
10066b6a:	e78e      	b.n	10066a8a <smp_pp3_keys_distribution_receive+0x5a>

10066b6c <__arm_cp.4_0>:
10066b6c:	00007530 	.word	0x00007530

10066b70 <smp_cmn_rejectlist_init>:
10066b70:	b580      	push	{r7, lr}
10066b72:	2003      	movs	r0, #3
10066b74:	2108      	movs	r1, #8
10066b76:	f7f8 fc99 	bl	1005f4ac <csmem_mem_0_assign>
10066b7a:	4902      	ldr	r1, [pc, #8]	@ (10066b84 <__arm_cp.0_0>)
10066b7c:	6809      	ldr	r1, [r1, #0]
10066b7e:	22a8      	movs	r2, #168	@ 0xa8
10066b80:	5088      	str	r0, [r1, r2]
10066b82:	bd80      	pop	{r7, pc}

10066b84 <__arm_cp.0_0>:
10066b84:	20001140 	.word	0x20001140

10066b88 <smp_cmn_repeated_attacks_protection_start>:
10066b88:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10066b8a:	9101      	str	r1, [sp, #4]
10066b8c:	2003      	movs	r0, #3
10066b8e:	9002      	str	r0, [sp, #8]
10066b90:	2700      	movs	r7, #0
10066b92:	4a30      	ldr	r2, [pc, #192]	@ (10066c54 <__arm_cp.1_0>)
10066b94:	463d      	mov	r5, r7
10066b96:	4616      	mov	r6, r2
10066b98:	6810      	ldr	r0, [r2, #0]
10066b9a:	24a8      	movs	r4, #168	@ 0xa8
10066b9c:	5900      	ldr	r0, [r0, r4]
10066b9e:	19c0      	adds	r0, r0, r7
10066ba0:	1c80      	adds	r0, r0, #2
10066ba2:	2206      	movs	r2, #6
10066ba4:	9901      	ldr	r1, [sp, #4]
10066ba6:	f7df fa75 	bl	10046094 <BLEPLAT_MemCmp>
10066baa:	2800      	cmp	r0, #0
10066bac:	d031      	beq.n	10066c12 <smp_cmn_repeated_attacks_protection_start+0x8a>
10066bae:	9802      	ldr	r0, [sp, #8]
10066bb0:	2803      	cmp	r0, #3
10066bb2:	4632      	mov	r2, r6
10066bb4:	d109      	bne.n	10066bca <smp_cmn_repeated_attacks_protection_start+0x42>
10066bb6:	6810      	ldr	r0, [r2, #0]
10066bb8:	5900      	ldr	r0, [r0, r4]
10066bba:	5dc0      	ldrb	r0, [r0, r7]
10066bbc:	0680      	lsls	r0, r0, #26
10066bbe:	0f80      	lsrs	r0, r0, #30
10066bc0:	d001      	beq.n	10066bc6 <smp_cmn_repeated_attacks_protection_start+0x3e>
10066bc2:	2003      	movs	r0, #3
10066bc4:	e000      	b.n	10066bc8 <smp_cmn_repeated_attacks_protection_start+0x40>
10066bc6:	b2e8      	uxtb	r0, r5
10066bc8:	9002      	str	r0, [sp, #8]
10066bca:	3708      	adds	r7, #8
10066bcc:	1c6d      	adds	r5, r5, #1
10066bce:	2d03      	cmp	r5, #3
10066bd0:	d1e1      	bne.n	10066b96 <smp_cmn_repeated_attacks_protection_start+0xe>
10066bd2:	6810      	ldr	r0, [r2, #0]
10066bd4:	2541      	movs	r5, #65	@ 0x41
10066bd6:	5d41      	ldrb	r1, [r0, r5]
10066bd8:	30a8      	adds	r0, #168	@ 0xa8
10066bda:	2902      	cmp	r1, #2
10066bdc:	d836      	bhi.n	10066c4c <smp_cmn_repeated_attacks_protection_start+0xc4>
10066bde:	9902      	ldr	r1, [sp, #8]
10066be0:	00cf      	lsls	r7, r1, #3
10066be2:	6800      	ldr	r0, [r0, #0]
10066be4:	19c0      	adds	r0, r0, r7
10066be6:	1c80      	adds	r0, r0, #2
10066be8:	4616      	mov	r6, r2
10066bea:	2206      	movs	r2, #6
10066bec:	9901      	ldr	r1, [sp, #4]
10066bee:	f7df fa31 	bl	10046054 <BLEPLAT_MemCpy>
10066bf2:	6830      	ldr	r0, [r6, #0]
10066bf4:	5900      	ldr	r0, [r0, r4]
10066bf6:	2110      	movs	r1, #16
10066bf8:	55c1      	strb	r1, [r0, r7]
10066bfa:	9802      	ldr	r0, [sp, #8]
10066bfc:	b2c2      	uxtb	r2, r0
10066bfe:	2000      	movs	r0, #0
10066c00:	2101      	movs	r1, #1
10066c02:	4b15      	ldr	r3, [pc, #84]	@ (10066c58 <__arm_cp.1_1>)
10066c04:	f7fa fe82 	bl	1006190c <smp_timer_reset>
10066c08:	6830      	ldr	r0, [r6, #0]
10066c0a:	5d41      	ldrb	r1, [r0, r5]
10066c0c:	1c49      	adds	r1, r1, #1
10066c0e:	5541      	strb	r1, [r0, r5]
10066c10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10066c12:	6830      	ldr	r0, [r6, #0]
10066c14:	5900      	ldr	r0, [r0, r4]
10066c16:	5dc3      	ldrb	r3, [r0, r7]
10066c18:	21cf      	movs	r1, #207	@ 0xcf
10066c1a:	4019      	ands	r1, r3
10066c1c:	3110      	adds	r1, #16
10066c1e:	2203      	movs	r2, #3
10066c20:	401a      	ands	r2, r3
10066c22:	1c53      	adds	r3, r2, #1
10066c24:	2a03      	cmp	r2, #3
10066c26:	d002      	beq.n	10066c2e <smp_cmn_repeated_attacks_protection_start+0xa6>
10066c28:	24dc      	movs	r4, #220	@ 0xdc
10066c2a:	4021      	ands	r1, r4
10066c2c:	4319      	orrs	r1, r3
10066c2e:	55c1      	strb	r1, [r0, r7]
10066c30:	2a03      	cmp	r2, #3
10066c32:	d100      	bne.n	10066c36 <smp_cmn_repeated_attacks_protection_start+0xae>
10066c34:	4613      	mov	r3, r2
10066c36:	a009      	add	r0, pc, #36	@ (adr r0, 10066c5c <__arm_cp.1_1+0x4>)
10066c38:	5cc0      	ldrb	r0, [r0, r3]
10066c3a:	217d      	movs	r1, #125	@ 0x7d
10066c3c:	00cb      	lsls	r3, r1, #3
10066c3e:	4343      	muls	r3, r0
10066c40:	b2ea      	uxtb	r2, r5
10066c42:	2000      	movs	r0, #0
10066c44:	2101      	movs	r1, #1
10066c46:	f7fa fe61 	bl	1006190c <smp_timer_reset>
10066c4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10066c4c:	2101      	movs	r1, #1
10066c4e:	7201      	strb	r1, [r0, #8]
10066c50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10066c52:	46c0      	nop			@ (mov r8, r8)

10066c54 <__arm_cp.1_0>:
10066c54:	20001140 	.word	0x20001140

10066c58 <__arm_cp.1_1>:
10066c58:	00000bb8 	.word	0x00000bb8
10066c5c:	140a0503 	.word	0x140a0503

10066c60 <smp_cmn_repeated_attacks_timer_cb>:
10066c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10066c62:	4e29      	ldr	r6, [pc, #164]	@ (10066d08 <__arm_cp.2_0>)
10066c64:	6831      	ldr	r1, [r6, #0]
10066c66:	25a8      	movs	r5, #168	@ 0xa8
10066c68:	5949      	ldr	r1, [r1, r5]
10066c6a:	00c4      	lsls	r4, r0, #3
10066c6c:	5d0a      	ldrb	r2, [r1, r4]
10066c6e:	06d3      	lsls	r3, r2, #27
10066c70:	d40e      	bmi.n	10066c90 <smp_cmn_repeated_attacks_timer_cb+0x30>
10066c72:	0693      	lsls	r3, r2, #26
10066c74:	d546      	bpl.n	10066d04 <smp_cmn_repeated_attacks_timer_cb+0xa4>
10066c76:	1909      	adds	r1, r1, r4
10066c78:	0793      	lsls	r3, r2, #30
10066c7a:	d035      	beq.n	10066ce8 <smp_cmn_repeated_attacks_timer_cb+0x88>
10066c7c:	23fc      	movs	r3, #252	@ 0xfc
10066c7e:	4013      	ands	r3, r2
10066c80:	1e52      	subs	r2, r2, #1
10066c82:	2403      	movs	r4, #3
10066c84:	4014      	ands	r4, r2
10066c86:	18e2      	adds	r2, r4, r3
10066c88:	700a      	strb	r2, [r1, #0]
10066c8a:	f000 f841 	bl	10066d10 <smp_cmn_rejectlist_start_probation_timer2>
10066c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10066c90:	f000 f83e 	bl	10066d10 <smp_cmn_rejectlist_start_probation_timer2>
10066c94:	6830      	ldr	r0, [r6, #0]
10066c96:	5940      	ldr	r0, [r0, r5]
10066c98:	1900      	adds	r0, r0, r4
10066c9a:	1c84      	adds	r4, r0, #2
10066c9c:	2065      	movs	r0, #101	@ 0x65
10066c9e:	43c6      	mvns	r6, r0
10066ca0:	4637      	mov	r7, r6
10066ca2:	3765      	adds	r7, #101	@ 0x65
10066ca4:	4819      	ldr	r0, [pc, #100]	@ (10066d0c <__arm_cp.2_1>)
10066ca6:	6800      	ldr	r0, [r0, #0]
10066ca8:	2134      	movs	r1, #52	@ 0x34
10066caa:	5c40      	ldrb	r0, [r0, r1]
10066cac:	1c7f      	adds	r7, r7, #1
10066cae:	4287      	cmp	r7, r0
10066cb0:	d228      	bcs.n	10066d04 <smp_cmn_repeated_attacks_timer_cb+0xa4>
10066cb2:	4815      	ldr	r0, [pc, #84]	@ (10066d08 <__arm_cp.2_0>)
10066cb4:	6800      	ldr	r0, [r0, #0]
10066cb6:	25a4      	movs	r5, #164	@ 0xa4
10066cb8:	5940      	ldr	r0, [r0, r5]
10066cba:	1980      	adds	r0, r0, r6
10066cbc:	3670      	adds	r6, #112	@ 0x70
10066cbe:	3068      	adds	r0, #104	@ 0x68
10066cc0:	2206      	movs	r2, #6
10066cc2:	4621      	mov	r1, r4
10066cc4:	f7df f9e6 	bl	10046094 <BLEPLAT_MemCmp>
10066cc8:	2800      	cmp	r0, #0
10066cca:	d1eb      	bne.n	10066ca4 <smp_cmn_repeated_attacks_timer_cb+0x44>
10066ccc:	480e      	ldr	r0, [pc, #56]	@ (10066d08 <__arm_cp.2_0>)
10066cce:	6800      	ldr	r0, [r0, #0]
10066cd0:	5940      	ldr	r0, [r0, r5]
10066cd2:	5d81      	ldrb	r1, [r0, r6]
10066cd4:	29fb      	cmp	r1, #251	@ 0xfb
10066cd6:	d115      	bne.n	10066d04 <smp_cmn_repeated_attacks_timer_cb+0xa4>
10066cd8:	2110      	movs	r1, #16
10066cda:	5581      	strb	r1, [r0, r6]
10066cdc:	200e      	movs	r0, #14
10066cde:	f7fb fbeb 	bl	100624b8 <tsk_notify_idx>
10066ce2:	f7dc ff1a 	bl	10043b1a <BLE_STACK_ProcessRequest>
10066ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10066ce8:	4635      	mov	r5, r6
10066cea:	2400      	movs	r4, #0
10066cec:	2208      	movs	r2, #8
10066cee:	4608      	mov	r0, r1
10066cf0:	4621      	mov	r1, r4
10066cf2:	f7df f9bf 	bl	10046074 <BLEPLAT_MemSet>
10066cf6:	6830      	ldr	r0, [r6, #0]
10066cf8:	21b0      	movs	r1, #176	@ 0xb0
10066cfa:	5444      	strb	r4, [r0, r1]
10066cfc:	2141      	movs	r1, #65	@ 0x41
10066cfe:	5c42      	ldrb	r2, [r0, r1]
10066d00:	1e52      	subs	r2, r2, #1
10066d02:	5442      	strb	r2, [r0, r1]
10066d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10066d06:	46c0      	nop			@ (mov r8, r8)

10066d08 <__arm_cp.2_0>:
10066d08:	20001140 	.word	0x20001140

10066d0c <__arm_cp.2_1>:
10066d0c:	200010a0 	.word	0x200010a0

10066d10 <smp_cmn_rejectlist_start_probation_timer2>:
10066d10:	b510      	push	{r4, lr}
10066d12:	4604      	mov	r4, r0
10066d14:	2000      	movs	r0, #0
10066d16:	2101      	movs	r1, #1
10066d18:	4b07      	ldr	r3, [pc, #28]	@ (10066d38 <__arm_cp.3_0>)
10066d1a:	4622      	mov	r2, r4
10066d1c:	f7fa fdf6 	bl	1006190c <smp_timer_reset>
10066d20:	4806      	ldr	r0, [pc, #24]	@ (10066d3c <__arm_cp.3_1>)
10066d22:	6800      	ldr	r0, [r0, #0]
10066d24:	21a8      	movs	r1, #168	@ 0xa8
10066d26:	5840      	ldr	r0, [r0, r1]
10066d28:	00e1      	lsls	r1, r4, #3
10066d2a:	5c42      	ldrb	r2, [r0, r1]
10066d2c:	23cf      	movs	r3, #207	@ 0xcf
10066d2e:	4013      	ands	r3, r2
10066d30:	3320      	adds	r3, #32
10066d32:	5443      	strb	r3, [r0, r1]
10066d34:	bd10      	pop	{r4, pc}
10066d36:	46c0      	nop			@ (mov r8, r8)

10066d38 <__arm_cp.3_0>:
10066d38:	00004e20 	.word	0x00004e20

10066d3c <__arm_cp.3_1>:
10066d3c:	20001140 	.word	0x20001140

10066d40 <smp_cmn_is_peer_rejectlisted>:
10066d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10066d42:	460c      	mov	r4, r1
10066d44:	2007      	movs	r0, #7
10066d46:	43c0      	mvns	r0, r0
10066d48:	4e0c      	ldr	r6, [pc, #48]	@ (10066d7c <__arm_cp.4_0>)
10066d4a:	4605      	mov	r5, r0
10066d4c:	3508      	adds	r5, #8
10066d4e:	2d18      	cmp	r5, #24
10066d50:	d010      	beq.n	10066d74 <smp_cmn_is_peer_rejectlisted+0x34>
10066d52:	6831      	ldr	r1, [r6, #0]
10066d54:	27a8      	movs	r7, #168	@ 0xa8
10066d56:	59c9      	ldr	r1, [r1, r7]
10066d58:	1808      	adds	r0, r1, r0
10066d5a:	300a      	adds	r0, #10
10066d5c:	2206      	movs	r2, #6
10066d5e:	4621      	mov	r1, r4
10066d60:	f7df f998 	bl	10046094 <BLEPLAT_MemCmp>
10066d64:	2800      	cmp	r0, #0
10066d66:	4628      	mov	r0, r5
10066d68:	d1f0      	bne.n	10066d4c <smp_cmn_is_peer_rejectlisted+0xc>
10066d6a:	6830      	ldr	r0, [r6, #0]
10066d6c:	59c0      	ldr	r0, [r0, r7]
10066d6e:	5d40      	ldrb	r0, [r0, r5]
10066d70:	06c0      	lsls	r0, r0, #27
10066d72:	d401      	bmi.n	10066d78 <smp_cmn_is_peer_rejectlisted+0x38>
10066d74:	2000      	movs	r0, #0
10066d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10066d78:	2001      	movs	r0, #1
10066d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10066d7c <__arm_cp.4_0>:
10066d7c:	20001140 	.word	0x20001140

10066d80 <std>:
10066d80:	2300      	movs	r3, #0
10066d82:	b510      	push	{r4, lr}
10066d84:	0004      	movs	r4, r0
10066d86:	6003      	str	r3, [r0, #0]
10066d88:	6043      	str	r3, [r0, #4]
10066d8a:	6083      	str	r3, [r0, #8]
10066d8c:	8181      	strh	r1, [r0, #12]
10066d8e:	6643      	str	r3, [r0, #100]	@ 0x64
10066d90:	81c2      	strh	r2, [r0, #14]
10066d92:	6103      	str	r3, [r0, #16]
10066d94:	6143      	str	r3, [r0, #20]
10066d96:	6183      	str	r3, [r0, #24]
10066d98:	0019      	movs	r1, r3
10066d9a:	2208      	movs	r2, #8
10066d9c:	305c      	adds	r0, #92	@ 0x5c
10066d9e:	f000 fadd 	bl	1006735c <memset>
10066da2:	4b0b      	ldr	r3, [pc, #44]	@ (10066dd0 <std+0x50>)
10066da4:	6224      	str	r4, [r4, #32]
10066da6:	6263      	str	r3, [r4, #36]	@ 0x24
10066da8:	4b0a      	ldr	r3, [pc, #40]	@ (10066dd4 <std+0x54>)
10066daa:	62a3      	str	r3, [r4, #40]	@ 0x28
10066dac:	4b0a      	ldr	r3, [pc, #40]	@ (10066dd8 <std+0x58>)
10066dae:	62e3      	str	r3, [r4, #44]	@ 0x2c
10066db0:	4b0a      	ldr	r3, [pc, #40]	@ (10066ddc <std+0x5c>)
10066db2:	6323      	str	r3, [r4, #48]	@ 0x30
10066db4:	4b0a      	ldr	r3, [pc, #40]	@ (10066de0 <std+0x60>)
10066db6:	429c      	cmp	r4, r3
10066db8:	d005      	beq.n	10066dc6 <std+0x46>
10066dba:	4b0a      	ldr	r3, [pc, #40]	@ (10066de4 <std+0x64>)
10066dbc:	429c      	cmp	r4, r3
10066dbe:	d002      	beq.n	10066dc6 <std+0x46>
10066dc0:	4b09      	ldr	r3, [pc, #36]	@ (10066de8 <std+0x68>)
10066dc2:	429c      	cmp	r4, r3
10066dc4:	d103      	bne.n	10066dce <std+0x4e>
10066dc6:	0020      	movs	r0, r4
10066dc8:	3058      	adds	r0, #88	@ 0x58
10066dca:	f000 fb23 	bl	10067414 <__retarget_lock_init_recursive>
10066dce:	bd10      	pop	{r4, pc}
10066dd0:	10067169 	.word	0x10067169
10066dd4:	10067191 	.word	0x10067191
10066dd8:	100671c9 	.word	0x100671c9
10066ddc:	100671f5 	.word	0x100671f5
10066de0:	2000114c 	.word	0x2000114c
10066de4:	200011b4 	.word	0x200011b4
10066de8:	2000121c 	.word	0x2000121c

10066dec <stdio_exit_handler>:
10066dec:	b510      	push	{r4, lr}
10066dee:	4a03      	ldr	r2, [pc, #12]	@ (10066dfc <stdio_exit_handler+0x10>)
10066df0:	4903      	ldr	r1, [pc, #12]	@ (10066e00 <stdio_exit_handler+0x14>)
10066df2:	4804      	ldr	r0, [pc, #16]	@ (10066e04 <stdio_exit_handler+0x18>)
10066df4:	f000 f86c 	bl	10066ed0 <_fwalk_sglue>
10066df8:	bd10      	pop	{r4, pc}
10066dfa:	46c0      	nop			@ (mov r8, r8)
10066dfc:	200014f8 	.word	0x200014f8
10066e00:	10067cdd 	.word	0x10067cdd
10066e04:	20001508 	.word	0x20001508

10066e08 <cleanup_stdio>:
10066e08:	6841      	ldr	r1, [r0, #4]
10066e0a:	4b0b      	ldr	r3, [pc, #44]	@ (10066e38 <cleanup_stdio+0x30>)
10066e0c:	b510      	push	{r4, lr}
10066e0e:	0004      	movs	r4, r0
10066e10:	4299      	cmp	r1, r3
10066e12:	d001      	beq.n	10066e18 <cleanup_stdio+0x10>
10066e14:	f000 ff62 	bl	10067cdc <_fflush_r>
10066e18:	68a1      	ldr	r1, [r4, #8]
10066e1a:	4b08      	ldr	r3, [pc, #32]	@ (10066e3c <cleanup_stdio+0x34>)
10066e1c:	4299      	cmp	r1, r3
10066e1e:	d002      	beq.n	10066e26 <cleanup_stdio+0x1e>
10066e20:	0020      	movs	r0, r4
10066e22:	f000 ff5b 	bl	10067cdc <_fflush_r>
10066e26:	68e1      	ldr	r1, [r4, #12]
10066e28:	4b05      	ldr	r3, [pc, #20]	@ (10066e40 <cleanup_stdio+0x38>)
10066e2a:	4299      	cmp	r1, r3
10066e2c:	d002      	beq.n	10066e34 <cleanup_stdio+0x2c>
10066e2e:	0020      	movs	r0, r4
10066e30:	f000 ff54 	bl	10067cdc <_fflush_r>
10066e34:	bd10      	pop	{r4, pc}
10066e36:	46c0      	nop			@ (mov r8, r8)
10066e38:	2000114c 	.word	0x2000114c
10066e3c:	200011b4 	.word	0x200011b4
10066e40:	2000121c 	.word	0x2000121c

10066e44 <global_stdio_init.part.0>:
10066e44:	b510      	push	{r4, lr}
10066e46:	4b09      	ldr	r3, [pc, #36]	@ (10066e6c <global_stdio_init.part.0+0x28>)
10066e48:	4a09      	ldr	r2, [pc, #36]	@ (10066e70 <global_stdio_init.part.0+0x2c>)
10066e4a:	2104      	movs	r1, #4
10066e4c:	601a      	str	r2, [r3, #0]
10066e4e:	4809      	ldr	r0, [pc, #36]	@ (10066e74 <global_stdio_init.part.0+0x30>)
10066e50:	2200      	movs	r2, #0
10066e52:	f7ff ff95 	bl	10066d80 <std>
10066e56:	2201      	movs	r2, #1
10066e58:	2109      	movs	r1, #9
10066e5a:	4807      	ldr	r0, [pc, #28]	@ (10066e78 <global_stdio_init.part.0+0x34>)
10066e5c:	f7ff ff90 	bl	10066d80 <std>
10066e60:	2202      	movs	r2, #2
10066e62:	2112      	movs	r1, #18
10066e64:	4805      	ldr	r0, [pc, #20]	@ (10066e7c <global_stdio_init.part.0+0x38>)
10066e66:	f7ff ff8b 	bl	10066d80 <std>
10066e6a:	bd10      	pop	{r4, pc}
10066e6c:	20001284 	.word	0x20001284
10066e70:	10066ded 	.word	0x10066ded
10066e74:	2000114c 	.word	0x2000114c
10066e78:	200011b4 	.word	0x200011b4
10066e7c:	2000121c 	.word	0x2000121c

10066e80 <__sfp_lock_acquire>:
10066e80:	b510      	push	{r4, lr}
10066e82:	4802      	ldr	r0, [pc, #8]	@ (10066e8c <__sfp_lock_acquire+0xc>)
10066e84:	f000 fac7 	bl	10067416 <__retarget_lock_acquire_recursive>
10066e88:	bd10      	pop	{r4, pc}
10066e8a:	46c0      	nop			@ (mov r8, r8)
10066e8c:	2000128d 	.word	0x2000128d

10066e90 <__sfp_lock_release>:
10066e90:	b510      	push	{r4, lr}
10066e92:	4802      	ldr	r0, [pc, #8]	@ (10066e9c <__sfp_lock_release+0xc>)
10066e94:	f000 fac0 	bl	10067418 <__retarget_lock_release_recursive>
10066e98:	bd10      	pop	{r4, pc}
10066e9a:	46c0      	nop			@ (mov r8, r8)
10066e9c:	2000128d 	.word	0x2000128d

10066ea0 <__sinit>:
10066ea0:	b510      	push	{r4, lr}
10066ea2:	0004      	movs	r4, r0
10066ea4:	f7ff ffec 	bl	10066e80 <__sfp_lock_acquire>
10066ea8:	6a23      	ldr	r3, [r4, #32]
10066eaa:	2b00      	cmp	r3, #0
10066eac:	d002      	beq.n	10066eb4 <__sinit+0x14>
10066eae:	f7ff ffef 	bl	10066e90 <__sfp_lock_release>
10066eb2:	bd10      	pop	{r4, pc}
10066eb4:	4b04      	ldr	r3, [pc, #16]	@ (10066ec8 <__sinit+0x28>)
10066eb6:	6223      	str	r3, [r4, #32]
10066eb8:	4b04      	ldr	r3, [pc, #16]	@ (10066ecc <__sinit+0x2c>)
10066eba:	681b      	ldr	r3, [r3, #0]
10066ebc:	2b00      	cmp	r3, #0
10066ebe:	d1f6      	bne.n	10066eae <__sinit+0xe>
10066ec0:	f7ff ffc0 	bl	10066e44 <global_stdio_init.part.0>
10066ec4:	e7f3      	b.n	10066eae <__sinit+0xe>
10066ec6:	46c0      	nop			@ (mov r8, r8)
10066ec8:	10066e09 	.word	0x10066e09
10066ecc:	20001284 	.word	0x20001284

10066ed0 <_fwalk_sglue>:
10066ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10066ed2:	0014      	movs	r4, r2
10066ed4:	2600      	movs	r6, #0
10066ed6:	9000      	str	r0, [sp, #0]
10066ed8:	9101      	str	r1, [sp, #4]
10066eda:	68a5      	ldr	r5, [r4, #8]
10066edc:	6867      	ldr	r7, [r4, #4]
10066ede:	3f01      	subs	r7, #1
10066ee0:	d504      	bpl.n	10066eec <_fwalk_sglue+0x1c>
10066ee2:	6824      	ldr	r4, [r4, #0]
10066ee4:	2c00      	cmp	r4, #0
10066ee6:	d1f8      	bne.n	10066eda <_fwalk_sglue+0xa>
10066ee8:	0030      	movs	r0, r6
10066eea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10066eec:	89ab      	ldrh	r3, [r5, #12]
10066eee:	2b01      	cmp	r3, #1
10066ef0:	d908      	bls.n	10066f04 <_fwalk_sglue+0x34>
10066ef2:	220e      	movs	r2, #14
10066ef4:	5eab      	ldrsh	r3, [r5, r2]
10066ef6:	3301      	adds	r3, #1
10066ef8:	d004      	beq.n	10066f04 <_fwalk_sglue+0x34>
10066efa:	0029      	movs	r1, r5
10066efc:	9800      	ldr	r0, [sp, #0]
10066efe:	9b01      	ldr	r3, [sp, #4]
10066f00:	4798      	blx	r3
10066f02:	4306      	orrs	r6, r0
10066f04:	3568      	adds	r5, #104	@ 0x68
10066f06:	e7ea      	b.n	10066ede <_fwalk_sglue+0xe>

10066f08 <iprintf>:
10066f08:	b40f      	push	{r0, r1, r2, r3}
10066f0a:	b507      	push	{r0, r1, r2, lr}
10066f0c:	4905      	ldr	r1, [pc, #20]	@ (10066f24 <iprintf+0x1c>)
10066f0e:	ab04      	add	r3, sp, #16
10066f10:	6808      	ldr	r0, [r1, #0]
10066f12:	cb04      	ldmia	r3!, {r2}
10066f14:	6881      	ldr	r1, [r0, #8]
10066f16:	9301      	str	r3, [sp, #4]
10066f18:	f000 fbc0 	bl	1006769c <_vfiprintf_r>
10066f1c:	b003      	add	sp, #12
10066f1e:	bc08      	pop	{r3}
10066f20:	b004      	add	sp, #16
10066f22:	4718      	bx	r3
10066f24:	20001504 	.word	0x20001504

10066f28 <putchar>:
10066f28:	b510      	push	{r4, lr}
10066f2a:	4b03      	ldr	r3, [pc, #12]	@ (10066f38 <putchar+0x10>)
10066f2c:	0001      	movs	r1, r0
10066f2e:	6818      	ldr	r0, [r3, #0]
10066f30:	6882      	ldr	r2, [r0, #8]
10066f32:	f000 ff6a 	bl	10067e0a <_putc_r>
10066f36:	bd10      	pop	{r4, pc}
10066f38:	20001504 	.word	0x20001504

10066f3c <_puts_r>:
10066f3c:	6a03      	ldr	r3, [r0, #32]
10066f3e:	b570      	push	{r4, r5, r6, lr}
10066f40:	0005      	movs	r5, r0
10066f42:	000e      	movs	r6, r1
10066f44:	6884      	ldr	r4, [r0, #8]
10066f46:	2b00      	cmp	r3, #0
10066f48:	d101      	bne.n	10066f4e <_puts_r+0x12>
10066f4a:	f7ff ffa9 	bl	10066ea0 <__sinit>
10066f4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10066f50:	07db      	lsls	r3, r3, #31
10066f52:	d405      	bmi.n	10066f60 <_puts_r+0x24>
10066f54:	89a3      	ldrh	r3, [r4, #12]
10066f56:	059b      	lsls	r3, r3, #22
10066f58:	d402      	bmi.n	10066f60 <_puts_r+0x24>
10066f5a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10066f5c:	f000 fa5b 	bl	10067416 <__retarget_lock_acquire_recursive>
10066f60:	89a3      	ldrh	r3, [r4, #12]
10066f62:	071b      	lsls	r3, r3, #28
10066f64:	d502      	bpl.n	10066f6c <_puts_r+0x30>
10066f66:	6923      	ldr	r3, [r4, #16]
10066f68:	2b00      	cmp	r3, #0
10066f6a:	d11f      	bne.n	10066fac <_puts_r+0x70>
10066f6c:	0021      	movs	r1, r4
10066f6e:	0028      	movs	r0, r5
10066f70:	f000 f988 	bl	10067284 <__swsetup_r>
10066f74:	2800      	cmp	r0, #0
10066f76:	d019      	beq.n	10066fac <_puts_r+0x70>
10066f78:	2501      	movs	r5, #1
10066f7a:	426d      	negs	r5, r5
10066f7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10066f7e:	07db      	lsls	r3, r3, #31
10066f80:	d405      	bmi.n	10066f8e <_puts_r+0x52>
10066f82:	89a3      	ldrh	r3, [r4, #12]
10066f84:	059b      	lsls	r3, r3, #22
10066f86:	d402      	bmi.n	10066f8e <_puts_r+0x52>
10066f88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10066f8a:	f000 fa45 	bl	10067418 <__retarget_lock_release_recursive>
10066f8e:	0028      	movs	r0, r5
10066f90:	bd70      	pop	{r4, r5, r6, pc}
10066f92:	3601      	adds	r6, #1
10066f94:	60a3      	str	r3, [r4, #8]
10066f96:	2b00      	cmp	r3, #0
10066f98:	da04      	bge.n	10066fa4 <_puts_r+0x68>
10066f9a:	69a2      	ldr	r2, [r4, #24]
10066f9c:	429a      	cmp	r2, r3
10066f9e:	dc16      	bgt.n	10066fce <_puts_r+0x92>
10066fa0:	290a      	cmp	r1, #10
10066fa2:	d014      	beq.n	10066fce <_puts_r+0x92>
10066fa4:	6823      	ldr	r3, [r4, #0]
10066fa6:	1c5a      	adds	r2, r3, #1
10066fa8:	6022      	str	r2, [r4, #0]
10066faa:	7019      	strb	r1, [r3, #0]
10066fac:	68a3      	ldr	r3, [r4, #8]
10066fae:	7831      	ldrb	r1, [r6, #0]
10066fb0:	3b01      	subs	r3, #1
10066fb2:	2900      	cmp	r1, #0
10066fb4:	d1ed      	bne.n	10066f92 <_puts_r+0x56>
10066fb6:	60a3      	str	r3, [r4, #8]
10066fb8:	2b00      	cmp	r3, #0
10066fba:	da0f      	bge.n	10066fdc <_puts_r+0xa0>
10066fbc:	0022      	movs	r2, r4
10066fbe:	0028      	movs	r0, r5
10066fc0:	310a      	adds	r1, #10
10066fc2:	f000 f91d 	bl	10067200 <__swbuf_r>
10066fc6:	3001      	adds	r0, #1
10066fc8:	d0d6      	beq.n	10066f78 <_puts_r+0x3c>
10066fca:	250a      	movs	r5, #10
10066fcc:	e7d6      	b.n	10066f7c <_puts_r+0x40>
10066fce:	0022      	movs	r2, r4
10066fd0:	0028      	movs	r0, r5
10066fd2:	f000 f915 	bl	10067200 <__swbuf_r>
10066fd6:	3001      	adds	r0, #1
10066fd8:	d1e8      	bne.n	10066fac <_puts_r+0x70>
10066fda:	e7cd      	b.n	10066f78 <_puts_r+0x3c>
10066fdc:	6823      	ldr	r3, [r4, #0]
10066fde:	1c5a      	adds	r2, r3, #1
10066fe0:	6022      	str	r2, [r4, #0]
10066fe2:	220a      	movs	r2, #10
10066fe4:	701a      	strb	r2, [r3, #0]
10066fe6:	e7f0      	b.n	10066fca <_puts_r+0x8e>

10066fe8 <puts>:
10066fe8:	b510      	push	{r4, lr}
10066fea:	4b03      	ldr	r3, [pc, #12]	@ (10066ff8 <puts+0x10>)
10066fec:	0001      	movs	r1, r0
10066fee:	6818      	ldr	r0, [r3, #0]
10066ff0:	f7ff ffa4 	bl	10066f3c <_puts_r>
10066ff4:	bd10      	pop	{r4, pc}
10066ff6:	46c0      	nop			@ (mov r8, r8)
10066ff8:	20001504 	.word	0x20001504

10066ffc <setvbuf>:
10066ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
10066ffe:	001d      	movs	r5, r3
10067000:	4b57      	ldr	r3, [pc, #348]	@ (10067160 <setvbuf+0x164>)
10067002:	b085      	sub	sp, #20
10067004:	681e      	ldr	r6, [r3, #0]
10067006:	0004      	movs	r4, r0
10067008:	000f      	movs	r7, r1
1006700a:	9200      	str	r2, [sp, #0]
1006700c:	2e00      	cmp	r6, #0
1006700e:	d005      	beq.n	1006701c <setvbuf+0x20>
10067010:	6a33      	ldr	r3, [r6, #32]
10067012:	2b00      	cmp	r3, #0
10067014:	d102      	bne.n	1006701c <setvbuf+0x20>
10067016:	0030      	movs	r0, r6
10067018:	f7ff ff42 	bl	10066ea0 <__sinit>
1006701c:	9b00      	ldr	r3, [sp, #0]
1006701e:	2b02      	cmp	r3, #2
10067020:	d005      	beq.n	1006702e <setvbuf+0x32>
10067022:	2b01      	cmp	r3, #1
10067024:	d900      	bls.n	10067028 <setvbuf+0x2c>
10067026:	e097      	b.n	10067158 <setvbuf+0x15c>
10067028:	2d00      	cmp	r5, #0
1006702a:	da00      	bge.n	1006702e <setvbuf+0x32>
1006702c:	e094      	b.n	10067158 <setvbuf+0x15c>
1006702e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10067030:	07db      	lsls	r3, r3, #31
10067032:	d405      	bmi.n	10067040 <setvbuf+0x44>
10067034:	89a3      	ldrh	r3, [r4, #12]
10067036:	059b      	lsls	r3, r3, #22
10067038:	d402      	bmi.n	10067040 <setvbuf+0x44>
1006703a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1006703c:	f000 f9eb 	bl	10067416 <__retarget_lock_acquire_recursive>
10067040:	0021      	movs	r1, r4
10067042:	0030      	movs	r0, r6
10067044:	f000 fe4a 	bl	10067cdc <_fflush_r>
10067048:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1006704a:	2900      	cmp	r1, #0
1006704c:	d008      	beq.n	10067060 <setvbuf+0x64>
1006704e:	0023      	movs	r3, r4
10067050:	3344      	adds	r3, #68	@ 0x44
10067052:	4299      	cmp	r1, r3
10067054:	d002      	beq.n	1006705c <setvbuf+0x60>
10067056:	0030      	movs	r0, r6
10067058:	f000 f9f2 	bl	10067440 <_free_r>
1006705c:	2300      	movs	r3, #0
1006705e:	6363      	str	r3, [r4, #52]	@ 0x34
10067060:	2300      	movs	r3, #0
10067062:	61a3      	str	r3, [r4, #24]
10067064:	6063      	str	r3, [r4, #4]
10067066:	89a3      	ldrh	r3, [r4, #12]
10067068:	061b      	lsls	r3, r3, #24
1006706a:	d503      	bpl.n	10067074 <setvbuf+0x78>
1006706c:	0030      	movs	r0, r6
1006706e:	6921      	ldr	r1, [r4, #16]
10067070:	f000 f9e6 	bl	10067440 <_free_r>
10067074:	89a3      	ldrh	r3, [r4, #12]
10067076:	4a3b      	ldr	r2, [pc, #236]	@ (10067164 <setvbuf+0x168>)
10067078:	4013      	ands	r3, r2
1006707a:	81a3      	strh	r3, [r4, #12]
1006707c:	9b00      	ldr	r3, [sp, #0]
1006707e:	2b02      	cmp	r3, #2
10067080:	d060      	beq.n	10067144 <setvbuf+0x148>
10067082:	ab03      	add	r3, sp, #12
10067084:	0021      	movs	r1, r4
10067086:	0030      	movs	r0, r6
10067088:	aa02      	add	r2, sp, #8
1006708a:	f000 fe53 	bl	10067d34 <__swhatbuf_r>
1006708e:	89a3      	ldrh	r3, [r4, #12]
10067090:	4303      	orrs	r3, r0
10067092:	81a3      	strh	r3, [r4, #12]
10067094:	2d00      	cmp	r5, #0
10067096:	d124      	bne.n	100670e2 <setvbuf+0xe6>
10067098:	9d02      	ldr	r5, [sp, #8]
1006709a:	0028      	movs	r0, r5
1006709c:	f000 fa1a 	bl	100674d4 <malloc>
100670a0:	9501      	str	r5, [sp, #4]
100670a2:	1e07      	subs	r7, r0, #0
100670a4:	d148      	bne.n	10067138 <setvbuf+0x13c>
100670a6:	9b02      	ldr	r3, [sp, #8]
100670a8:	9301      	str	r3, [sp, #4]
100670aa:	42ab      	cmp	r3, r5
100670ac:	d13f      	bne.n	1006712e <setvbuf+0x132>
100670ae:	2501      	movs	r5, #1
100670b0:	426d      	negs	r5, r5
100670b2:	220c      	movs	r2, #12
100670b4:	5ea3      	ldrsh	r3, [r4, r2]
100670b6:	2202      	movs	r2, #2
100670b8:	431a      	orrs	r2, r3
100670ba:	81a2      	strh	r2, [r4, #12]
100670bc:	2200      	movs	r2, #0
100670be:	60a2      	str	r2, [r4, #8]
100670c0:	0022      	movs	r2, r4
100670c2:	3247      	adds	r2, #71	@ 0x47
100670c4:	6022      	str	r2, [r4, #0]
100670c6:	6122      	str	r2, [r4, #16]
100670c8:	2201      	movs	r2, #1
100670ca:	6e61      	ldr	r1, [r4, #100]	@ 0x64
100670cc:	6162      	str	r2, [r4, #20]
100670ce:	4211      	tst	r1, r2
100670d0:	d104      	bne.n	100670dc <setvbuf+0xe0>
100670d2:	059b      	lsls	r3, r3, #22
100670d4:	d402      	bmi.n	100670dc <setvbuf+0xe0>
100670d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100670d8:	f000 f99e 	bl	10067418 <__retarget_lock_release_recursive>
100670dc:	0028      	movs	r0, r5
100670de:	b005      	add	sp, #20
100670e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100670e2:	2f00      	cmp	r7, #0
100670e4:	d0d9      	beq.n	1006709a <setvbuf+0x9e>
100670e6:	6a33      	ldr	r3, [r6, #32]
100670e8:	2b00      	cmp	r3, #0
100670ea:	d102      	bne.n	100670f2 <setvbuf+0xf6>
100670ec:	0030      	movs	r0, r6
100670ee:	f7ff fed7 	bl	10066ea0 <__sinit>
100670f2:	9b00      	ldr	r3, [sp, #0]
100670f4:	2b01      	cmp	r3, #1
100670f6:	d103      	bne.n	10067100 <setvbuf+0x104>
100670f8:	89a3      	ldrh	r3, [r4, #12]
100670fa:	9a00      	ldr	r2, [sp, #0]
100670fc:	431a      	orrs	r2, r3
100670fe:	81a2      	strh	r2, [r4, #12]
10067100:	220c      	movs	r2, #12
10067102:	5ea3      	ldrsh	r3, [r4, r2]
10067104:	2208      	movs	r2, #8
10067106:	0019      	movs	r1, r3
10067108:	6027      	str	r7, [r4, #0]
1006710a:	6127      	str	r7, [r4, #16]
1006710c:	6165      	str	r5, [r4, #20]
1006710e:	4011      	ands	r1, r2
10067110:	4213      	tst	r3, r2
10067112:	d01b      	beq.n	1006714c <setvbuf+0x150>
10067114:	07da      	lsls	r2, r3, #31
10067116:	d517      	bpl.n	10067148 <setvbuf+0x14c>
10067118:	2200      	movs	r2, #0
1006711a:	426d      	negs	r5, r5
1006711c:	60a2      	str	r2, [r4, #8]
1006711e:	61a5      	str	r5, [r4, #24]
10067120:	6e62      	ldr	r2, [r4, #100]	@ 0x64
10067122:	07d2      	lsls	r2, r2, #31
10067124:	d401      	bmi.n	1006712a <setvbuf+0x12e>
10067126:	059b      	lsls	r3, r3, #22
10067128:	d512      	bpl.n	10067150 <setvbuf+0x154>
1006712a:	2500      	movs	r5, #0
1006712c:	e7d6      	b.n	100670dc <setvbuf+0xe0>
1006712e:	9801      	ldr	r0, [sp, #4]
10067130:	f000 f9d0 	bl	100674d4 <malloc>
10067134:	1e07      	subs	r7, r0, #0
10067136:	d0ba      	beq.n	100670ae <setvbuf+0xb2>
10067138:	2380      	movs	r3, #128	@ 0x80
1006713a:	89a2      	ldrh	r2, [r4, #12]
1006713c:	9d01      	ldr	r5, [sp, #4]
1006713e:	4313      	orrs	r3, r2
10067140:	81a3      	strh	r3, [r4, #12]
10067142:	e7d0      	b.n	100670e6 <setvbuf+0xea>
10067144:	2500      	movs	r5, #0
10067146:	e7b4      	b.n	100670b2 <setvbuf+0xb6>
10067148:	60a5      	str	r5, [r4, #8]
1006714a:	e7e9      	b.n	10067120 <setvbuf+0x124>
1006714c:	60a1      	str	r1, [r4, #8]
1006714e:	e7e7      	b.n	10067120 <setvbuf+0x124>
10067150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10067152:	f000 f961 	bl	10067418 <__retarget_lock_release_recursive>
10067156:	e7e8      	b.n	1006712a <setvbuf+0x12e>
10067158:	2501      	movs	r5, #1
1006715a:	426d      	negs	r5, r5
1006715c:	e7be      	b.n	100670dc <setvbuf+0xe0>
1006715e:	46c0      	nop			@ (mov r8, r8)
10067160:	20001504 	.word	0x20001504
10067164:	fffff35c 	.word	0xfffff35c

10067168 <__sread>:
10067168:	b570      	push	{r4, r5, r6, lr}
1006716a:	000c      	movs	r4, r1
1006716c:	250e      	movs	r5, #14
1006716e:	5f49      	ldrsh	r1, [r1, r5]
10067170:	f000 f922 	bl	100673b8 <_read_r>
10067174:	2800      	cmp	r0, #0
10067176:	db03      	blt.n	10067180 <__sread+0x18>
10067178:	6d63      	ldr	r3, [r4, #84]	@ 0x54
1006717a:	181b      	adds	r3, r3, r0
1006717c:	6563      	str	r3, [r4, #84]	@ 0x54
1006717e:	bd70      	pop	{r4, r5, r6, pc}
10067180:	89a3      	ldrh	r3, [r4, #12]
10067182:	4a02      	ldr	r2, [pc, #8]	@ (1006718c <__sread+0x24>)
10067184:	4013      	ands	r3, r2
10067186:	81a3      	strh	r3, [r4, #12]
10067188:	e7f9      	b.n	1006717e <__sread+0x16>
1006718a:	46c0      	nop			@ (mov r8, r8)
1006718c:	ffffefff 	.word	0xffffefff

10067190 <__swrite>:
10067190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10067192:	001f      	movs	r7, r3
10067194:	898b      	ldrh	r3, [r1, #12]
10067196:	0005      	movs	r5, r0
10067198:	000c      	movs	r4, r1
1006719a:	0016      	movs	r6, r2
1006719c:	05db      	lsls	r3, r3, #23
1006719e:	d505      	bpl.n	100671ac <__swrite+0x1c>
100671a0:	230e      	movs	r3, #14
100671a2:	5ec9      	ldrsh	r1, [r1, r3]
100671a4:	2200      	movs	r2, #0
100671a6:	2302      	movs	r3, #2
100671a8:	f000 f8f2 	bl	10067390 <_lseek_r>
100671ac:	89a3      	ldrh	r3, [r4, #12]
100671ae:	4a05      	ldr	r2, [pc, #20]	@ (100671c4 <__swrite+0x34>)
100671b0:	0028      	movs	r0, r5
100671b2:	4013      	ands	r3, r2
100671b4:	81a3      	strh	r3, [r4, #12]
100671b6:	0032      	movs	r2, r6
100671b8:	230e      	movs	r3, #14
100671ba:	5ee1      	ldrsh	r1, [r4, r3]
100671bc:	003b      	movs	r3, r7
100671be:	f000 f90f 	bl	100673e0 <_write_r>
100671c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100671c4:	ffffefff 	.word	0xffffefff

100671c8 <__sseek>:
100671c8:	b570      	push	{r4, r5, r6, lr}
100671ca:	000c      	movs	r4, r1
100671cc:	250e      	movs	r5, #14
100671ce:	5f49      	ldrsh	r1, [r1, r5]
100671d0:	f000 f8de 	bl	10067390 <_lseek_r>
100671d4:	89a3      	ldrh	r3, [r4, #12]
100671d6:	1c42      	adds	r2, r0, #1
100671d8:	d103      	bne.n	100671e2 <__sseek+0x1a>
100671da:	4a05      	ldr	r2, [pc, #20]	@ (100671f0 <__sseek+0x28>)
100671dc:	4013      	ands	r3, r2
100671de:	81a3      	strh	r3, [r4, #12]
100671e0:	bd70      	pop	{r4, r5, r6, pc}
100671e2:	2280      	movs	r2, #128	@ 0x80
100671e4:	0152      	lsls	r2, r2, #5
100671e6:	4313      	orrs	r3, r2
100671e8:	81a3      	strh	r3, [r4, #12]
100671ea:	6560      	str	r0, [r4, #84]	@ 0x54
100671ec:	e7f8      	b.n	100671e0 <__sseek+0x18>
100671ee:	46c0      	nop			@ (mov r8, r8)
100671f0:	ffffefff 	.word	0xffffefff

100671f4 <__sclose>:
100671f4:	b510      	push	{r4, lr}
100671f6:	230e      	movs	r3, #14
100671f8:	5ec9      	ldrsh	r1, [r1, r3]
100671fa:	f000 f8b7 	bl	1006736c <_close_r>
100671fe:	bd10      	pop	{r4, pc}

10067200 <__swbuf_r>:
10067200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10067202:	0006      	movs	r6, r0
10067204:	000d      	movs	r5, r1
10067206:	0014      	movs	r4, r2
10067208:	2800      	cmp	r0, #0
1006720a:	d004      	beq.n	10067216 <__swbuf_r+0x16>
1006720c:	6a03      	ldr	r3, [r0, #32]
1006720e:	2b00      	cmp	r3, #0
10067210:	d101      	bne.n	10067216 <__swbuf_r+0x16>
10067212:	f7ff fe45 	bl	10066ea0 <__sinit>
10067216:	69a3      	ldr	r3, [r4, #24]
10067218:	60a3      	str	r3, [r4, #8]
1006721a:	89a3      	ldrh	r3, [r4, #12]
1006721c:	071b      	lsls	r3, r3, #28
1006721e:	d502      	bpl.n	10067226 <__swbuf_r+0x26>
10067220:	6923      	ldr	r3, [r4, #16]
10067222:	2b00      	cmp	r3, #0
10067224:	d109      	bne.n	1006723a <__swbuf_r+0x3a>
10067226:	0021      	movs	r1, r4
10067228:	0030      	movs	r0, r6
1006722a:	f000 f82b 	bl	10067284 <__swsetup_r>
1006722e:	2800      	cmp	r0, #0
10067230:	d003      	beq.n	1006723a <__swbuf_r+0x3a>
10067232:	2501      	movs	r5, #1
10067234:	426d      	negs	r5, r5
10067236:	0028      	movs	r0, r5
10067238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006723a:	6923      	ldr	r3, [r4, #16]
1006723c:	6820      	ldr	r0, [r4, #0]
1006723e:	b2ef      	uxtb	r7, r5
10067240:	1ac0      	subs	r0, r0, r3
10067242:	6963      	ldr	r3, [r4, #20]
10067244:	b2ed      	uxtb	r5, r5
10067246:	4283      	cmp	r3, r0
10067248:	dc05      	bgt.n	10067256 <__swbuf_r+0x56>
1006724a:	0021      	movs	r1, r4
1006724c:	0030      	movs	r0, r6
1006724e:	f000 fd45 	bl	10067cdc <_fflush_r>
10067252:	2800      	cmp	r0, #0
10067254:	d1ed      	bne.n	10067232 <__swbuf_r+0x32>
10067256:	68a3      	ldr	r3, [r4, #8]
10067258:	3001      	adds	r0, #1
1006725a:	3b01      	subs	r3, #1
1006725c:	60a3      	str	r3, [r4, #8]
1006725e:	6823      	ldr	r3, [r4, #0]
10067260:	1c5a      	adds	r2, r3, #1
10067262:	6022      	str	r2, [r4, #0]
10067264:	701f      	strb	r7, [r3, #0]
10067266:	6963      	ldr	r3, [r4, #20]
10067268:	4283      	cmp	r3, r0
1006726a:	d004      	beq.n	10067276 <__swbuf_r+0x76>
1006726c:	89a3      	ldrh	r3, [r4, #12]
1006726e:	07db      	lsls	r3, r3, #31
10067270:	d5e1      	bpl.n	10067236 <__swbuf_r+0x36>
10067272:	2d0a      	cmp	r5, #10
10067274:	d1df      	bne.n	10067236 <__swbuf_r+0x36>
10067276:	0021      	movs	r1, r4
10067278:	0030      	movs	r0, r6
1006727a:	f000 fd2f 	bl	10067cdc <_fflush_r>
1006727e:	2800      	cmp	r0, #0
10067280:	d0d9      	beq.n	10067236 <__swbuf_r+0x36>
10067282:	e7d6      	b.n	10067232 <__swbuf_r+0x32>

10067284 <__swsetup_r>:
10067284:	4b2d      	ldr	r3, [pc, #180]	@ (1006733c <__swsetup_r+0xb8>)
10067286:	b570      	push	{r4, r5, r6, lr}
10067288:	0005      	movs	r5, r0
1006728a:	6818      	ldr	r0, [r3, #0]
1006728c:	000c      	movs	r4, r1
1006728e:	2800      	cmp	r0, #0
10067290:	d004      	beq.n	1006729c <__swsetup_r+0x18>
10067292:	6a03      	ldr	r3, [r0, #32]
10067294:	2b00      	cmp	r3, #0
10067296:	d101      	bne.n	1006729c <__swsetup_r+0x18>
10067298:	f7ff fe02 	bl	10066ea0 <__sinit>
1006729c:	230c      	movs	r3, #12
1006729e:	5ee2      	ldrsh	r2, [r4, r3]
100672a0:	0713      	lsls	r3, r2, #28
100672a2:	d423      	bmi.n	100672ec <__swsetup_r+0x68>
100672a4:	06d3      	lsls	r3, r2, #27
100672a6:	d407      	bmi.n	100672b8 <__swsetup_r+0x34>
100672a8:	2309      	movs	r3, #9
100672aa:	602b      	str	r3, [r5, #0]
100672ac:	2340      	movs	r3, #64	@ 0x40
100672ae:	2001      	movs	r0, #1
100672b0:	4313      	orrs	r3, r2
100672b2:	81a3      	strh	r3, [r4, #12]
100672b4:	4240      	negs	r0, r0
100672b6:	e03a      	b.n	1006732e <__swsetup_r+0xaa>
100672b8:	0752      	lsls	r2, r2, #29
100672ba:	d513      	bpl.n	100672e4 <__swsetup_r+0x60>
100672bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
100672be:	2900      	cmp	r1, #0
100672c0:	d008      	beq.n	100672d4 <__swsetup_r+0x50>
100672c2:	0023      	movs	r3, r4
100672c4:	3344      	adds	r3, #68	@ 0x44
100672c6:	4299      	cmp	r1, r3
100672c8:	d002      	beq.n	100672d0 <__swsetup_r+0x4c>
100672ca:	0028      	movs	r0, r5
100672cc:	f000 f8b8 	bl	10067440 <_free_r>
100672d0:	2300      	movs	r3, #0
100672d2:	6363      	str	r3, [r4, #52]	@ 0x34
100672d4:	2224      	movs	r2, #36	@ 0x24
100672d6:	89a3      	ldrh	r3, [r4, #12]
100672d8:	4393      	bics	r3, r2
100672da:	81a3      	strh	r3, [r4, #12]
100672dc:	2300      	movs	r3, #0
100672de:	6063      	str	r3, [r4, #4]
100672e0:	6923      	ldr	r3, [r4, #16]
100672e2:	6023      	str	r3, [r4, #0]
100672e4:	2308      	movs	r3, #8
100672e6:	89a2      	ldrh	r2, [r4, #12]
100672e8:	4313      	orrs	r3, r2
100672ea:	81a3      	strh	r3, [r4, #12]
100672ec:	6923      	ldr	r3, [r4, #16]
100672ee:	2b00      	cmp	r3, #0
100672f0:	d10b      	bne.n	1006730a <__swsetup_r+0x86>
100672f2:	21a0      	movs	r1, #160	@ 0xa0
100672f4:	2280      	movs	r2, #128	@ 0x80
100672f6:	89a3      	ldrh	r3, [r4, #12]
100672f8:	0089      	lsls	r1, r1, #2
100672fa:	0092      	lsls	r2, r2, #2
100672fc:	400b      	ands	r3, r1
100672fe:	4293      	cmp	r3, r2
10067300:	d003      	beq.n	1006730a <__swsetup_r+0x86>
10067302:	0021      	movs	r1, r4
10067304:	0028      	movs	r0, r5
10067306:	f000 fd3f 	bl	10067d88 <__smakebuf_r>
1006730a:	230c      	movs	r3, #12
1006730c:	5ee2      	ldrsh	r2, [r4, r3]
1006730e:	2101      	movs	r1, #1
10067310:	0013      	movs	r3, r2
10067312:	400b      	ands	r3, r1
10067314:	420a      	tst	r2, r1
10067316:	d00b      	beq.n	10067330 <__swsetup_r+0xac>
10067318:	2300      	movs	r3, #0
1006731a:	60a3      	str	r3, [r4, #8]
1006731c:	6963      	ldr	r3, [r4, #20]
1006731e:	425b      	negs	r3, r3
10067320:	61a3      	str	r3, [r4, #24]
10067322:	2000      	movs	r0, #0
10067324:	6923      	ldr	r3, [r4, #16]
10067326:	4283      	cmp	r3, r0
10067328:	d101      	bne.n	1006732e <__swsetup_r+0xaa>
1006732a:	0613      	lsls	r3, r2, #24
1006732c:	d4be      	bmi.n	100672ac <__swsetup_r+0x28>
1006732e:	bd70      	pop	{r4, r5, r6, pc}
10067330:	0791      	lsls	r1, r2, #30
10067332:	d400      	bmi.n	10067336 <__swsetup_r+0xb2>
10067334:	6963      	ldr	r3, [r4, #20]
10067336:	60a3      	str	r3, [r4, #8]
10067338:	e7f3      	b.n	10067322 <__swsetup_r+0x9e>
1006733a:	46c0      	nop			@ (mov r8, r8)
1006733c:	20001504 	.word	0x20001504

10067340 <memcmp>:
10067340:	b530      	push	{r4, r5, lr}
10067342:	2400      	movs	r4, #0
10067344:	3901      	subs	r1, #1
10067346:	42a2      	cmp	r2, r4
10067348:	d101      	bne.n	1006734e <memcmp+0xe>
1006734a:	2000      	movs	r0, #0
1006734c:	e005      	b.n	1006735a <memcmp+0x1a>
1006734e:	5d03      	ldrb	r3, [r0, r4]
10067350:	3401      	adds	r4, #1
10067352:	5d0d      	ldrb	r5, [r1, r4]
10067354:	42ab      	cmp	r3, r5
10067356:	d0f6      	beq.n	10067346 <memcmp+0x6>
10067358:	1b58      	subs	r0, r3, r5
1006735a:	bd30      	pop	{r4, r5, pc}

1006735c <memset>:
1006735c:	0003      	movs	r3, r0
1006735e:	1882      	adds	r2, r0, r2
10067360:	4293      	cmp	r3, r2
10067362:	d100      	bne.n	10067366 <memset+0xa>
10067364:	4770      	bx	lr
10067366:	7019      	strb	r1, [r3, #0]
10067368:	3301      	adds	r3, #1
1006736a:	e7f9      	b.n	10067360 <memset+0x4>

1006736c <_close_r>:
1006736c:	2300      	movs	r3, #0
1006736e:	b570      	push	{r4, r5, r6, lr}
10067370:	4d06      	ldr	r5, [pc, #24]	@ (1006738c <_close_r+0x20>)
10067372:	0004      	movs	r4, r0
10067374:	0008      	movs	r0, r1
10067376:	602b      	str	r3, [r5, #0]
10067378:	f7dc f943 	bl	10043602 <_close>
1006737c:	1c43      	adds	r3, r0, #1
1006737e:	d103      	bne.n	10067388 <_close_r+0x1c>
10067380:	682b      	ldr	r3, [r5, #0]
10067382:	2b00      	cmp	r3, #0
10067384:	d000      	beq.n	10067388 <_close_r+0x1c>
10067386:	6023      	str	r3, [r4, #0]
10067388:	bd70      	pop	{r4, r5, r6, pc}
1006738a:	46c0      	nop			@ (mov r8, r8)
1006738c:	20001288 	.word	0x20001288

10067390 <_lseek_r>:
10067390:	b570      	push	{r4, r5, r6, lr}
10067392:	0004      	movs	r4, r0
10067394:	0008      	movs	r0, r1
10067396:	0011      	movs	r1, r2
10067398:	001a      	movs	r2, r3
1006739a:	2300      	movs	r3, #0
1006739c:	4d05      	ldr	r5, [pc, #20]	@ (100673b4 <_lseek_r+0x24>)
1006739e:	602b      	str	r3, [r5, #0]
100673a0:	f7dc f950 	bl	10043644 <_lseek>
100673a4:	1c43      	adds	r3, r0, #1
100673a6:	d103      	bne.n	100673b0 <_lseek_r+0x20>
100673a8:	682b      	ldr	r3, [r5, #0]
100673aa:	2b00      	cmp	r3, #0
100673ac:	d000      	beq.n	100673b0 <_lseek_r+0x20>
100673ae:	6023      	str	r3, [r4, #0]
100673b0:	bd70      	pop	{r4, r5, r6, pc}
100673b2:	46c0      	nop			@ (mov r8, r8)
100673b4:	20001288 	.word	0x20001288

100673b8 <_read_r>:
100673b8:	b570      	push	{r4, r5, r6, lr}
100673ba:	0004      	movs	r4, r0
100673bc:	0008      	movs	r0, r1
100673be:	0011      	movs	r1, r2
100673c0:	001a      	movs	r2, r3
100673c2:	2300      	movs	r3, #0
100673c4:	4d05      	ldr	r5, [pc, #20]	@ (100673dc <_read_r+0x24>)
100673c6:	602b      	str	r3, [r5, #0]
100673c8:	f7dc f8e2 	bl	10043590 <_read>
100673cc:	1c43      	adds	r3, r0, #1
100673ce:	d103      	bne.n	100673d8 <_read_r+0x20>
100673d0:	682b      	ldr	r3, [r5, #0]
100673d2:	2b00      	cmp	r3, #0
100673d4:	d000      	beq.n	100673d8 <_read_r+0x20>
100673d6:	6023      	str	r3, [r4, #0]
100673d8:	bd70      	pop	{r4, r5, r6, pc}
100673da:	46c0      	nop			@ (mov r8, r8)
100673dc:	20001288 	.word	0x20001288

100673e0 <_write_r>:
100673e0:	b570      	push	{r4, r5, r6, lr}
100673e2:	0004      	movs	r4, r0
100673e4:	0008      	movs	r0, r1
100673e6:	0011      	movs	r1, r2
100673e8:	001a      	movs	r2, r3
100673ea:	2300      	movs	r3, #0
100673ec:	4d05      	ldr	r5, [pc, #20]	@ (10067404 <_write_r+0x24>)
100673ee:	602b      	str	r3, [r5, #0]
100673f0:	f7dc f8eb 	bl	100435ca <_write>
100673f4:	1c43      	adds	r3, r0, #1
100673f6:	d103      	bne.n	10067400 <_write_r+0x20>
100673f8:	682b      	ldr	r3, [r5, #0]
100673fa:	2b00      	cmp	r3, #0
100673fc:	d000      	beq.n	10067400 <_write_r+0x20>
100673fe:	6023      	str	r3, [r4, #0]
10067400:	bd70      	pop	{r4, r5, r6, pc}
10067402:	46c0      	nop			@ (mov r8, r8)
10067404:	20001288 	.word	0x20001288

10067408 <__errno>:
10067408:	4b01      	ldr	r3, [pc, #4]	@ (10067410 <__errno+0x8>)
1006740a:	6818      	ldr	r0, [r3, #0]
1006740c:	4770      	bx	lr
1006740e:	46c0      	nop			@ (mov r8, r8)
10067410:	20001504 	.word	0x20001504

10067414 <__retarget_lock_init_recursive>:
10067414:	4770      	bx	lr

10067416 <__retarget_lock_acquire_recursive>:
10067416:	4770      	bx	lr

10067418 <__retarget_lock_release_recursive>:
10067418:	4770      	bx	lr

1006741a <__aeabi_memcpy>:
1006741a:	b510      	push	{r4, lr}
1006741c:	f000 f806 	bl	1006742c <memcpy>
10067420:	bd10      	pop	{r4, pc}

10067422 <__aeabi_memclr>:
10067422:	b510      	push	{r4, lr}
10067424:	2200      	movs	r2, #0
10067426:	f000 fd5d 	bl	10067ee4 <__aeabi_memset>
1006742a:	bd10      	pop	{r4, pc}

1006742c <memcpy>:
1006742c:	2300      	movs	r3, #0
1006742e:	b510      	push	{r4, lr}
10067430:	429a      	cmp	r2, r3
10067432:	d100      	bne.n	10067436 <memcpy+0xa>
10067434:	bd10      	pop	{r4, pc}
10067436:	5ccc      	ldrb	r4, [r1, r3]
10067438:	54c4      	strb	r4, [r0, r3]
1006743a:	3301      	adds	r3, #1
1006743c:	e7f8      	b.n	10067430 <memcpy+0x4>
	...

10067440 <_free_r>:
10067440:	b570      	push	{r4, r5, r6, lr}
10067442:	0005      	movs	r5, r0
10067444:	1e0c      	subs	r4, r1, #0
10067446:	d010      	beq.n	1006746a <_free_r+0x2a>
10067448:	3c04      	subs	r4, #4
1006744a:	6823      	ldr	r3, [r4, #0]
1006744c:	2b00      	cmp	r3, #0
1006744e:	da00      	bge.n	10067452 <_free_r+0x12>
10067450:	18e4      	adds	r4, r4, r3
10067452:	0028      	movs	r0, r5
10067454:	f000 f8ea 	bl	1006762c <__malloc_lock>
10067458:	4a1d      	ldr	r2, [pc, #116]	@ (100674d0 <_free_r+0x90>)
1006745a:	6813      	ldr	r3, [r2, #0]
1006745c:	2b00      	cmp	r3, #0
1006745e:	d105      	bne.n	1006746c <_free_r+0x2c>
10067460:	6063      	str	r3, [r4, #4]
10067462:	6014      	str	r4, [r2, #0]
10067464:	0028      	movs	r0, r5
10067466:	f000 f8e9 	bl	1006763c <__malloc_unlock>
1006746a:	bd70      	pop	{r4, r5, r6, pc}
1006746c:	42a3      	cmp	r3, r4
1006746e:	d908      	bls.n	10067482 <_free_r+0x42>
10067470:	6820      	ldr	r0, [r4, #0]
10067472:	1821      	adds	r1, r4, r0
10067474:	428b      	cmp	r3, r1
10067476:	d1f3      	bne.n	10067460 <_free_r+0x20>
10067478:	6819      	ldr	r1, [r3, #0]
1006747a:	685b      	ldr	r3, [r3, #4]
1006747c:	1809      	adds	r1, r1, r0
1006747e:	6021      	str	r1, [r4, #0]
10067480:	e7ee      	b.n	10067460 <_free_r+0x20>
10067482:	001a      	movs	r2, r3
10067484:	685b      	ldr	r3, [r3, #4]
10067486:	2b00      	cmp	r3, #0
10067488:	d001      	beq.n	1006748e <_free_r+0x4e>
1006748a:	42a3      	cmp	r3, r4
1006748c:	d9f9      	bls.n	10067482 <_free_r+0x42>
1006748e:	6811      	ldr	r1, [r2, #0]
10067490:	1850      	adds	r0, r2, r1
10067492:	42a0      	cmp	r0, r4
10067494:	d10b      	bne.n	100674ae <_free_r+0x6e>
10067496:	6820      	ldr	r0, [r4, #0]
10067498:	1809      	adds	r1, r1, r0
1006749a:	1850      	adds	r0, r2, r1
1006749c:	6011      	str	r1, [r2, #0]
1006749e:	4283      	cmp	r3, r0
100674a0:	d1e0      	bne.n	10067464 <_free_r+0x24>
100674a2:	6818      	ldr	r0, [r3, #0]
100674a4:	685b      	ldr	r3, [r3, #4]
100674a6:	1841      	adds	r1, r0, r1
100674a8:	6011      	str	r1, [r2, #0]
100674aa:	6053      	str	r3, [r2, #4]
100674ac:	e7da      	b.n	10067464 <_free_r+0x24>
100674ae:	42a0      	cmp	r0, r4
100674b0:	d902      	bls.n	100674b8 <_free_r+0x78>
100674b2:	230c      	movs	r3, #12
100674b4:	602b      	str	r3, [r5, #0]
100674b6:	e7d5      	b.n	10067464 <_free_r+0x24>
100674b8:	6820      	ldr	r0, [r4, #0]
100674ba:	1821      	adds	r1, r4, r0
100674bc:	428b      	cmp	r3, r1
100674be:	d103      	bne.n	100674c8 <_free_r+0x88>
100674c0:	6819      	ldr	r1, [r3, #0]
100674c2:	685b      	ldr	r3, [r3, #4]
100674c4:	1809      	adds	r1, r1, r0
100674c6:	6021      	str	r1, [r4, #0]
100674c8:	6063      	str	r3, [r4, #4]
100674ca:	6054      	str	r4, [r2, #4]
100674cc:	e7ca      	b.n	10067464 <_free_r+0x24>
100674ce:	46c0      	nop			@ (mov r8, r8)
100674d0:	20001294 	.word	0x20001294

100674d4 <malloc>:
100674d4:	b510      	push	{r4, lr}
100674d6:	4b03      	ldr	r3, [pc, #12]	@ (100674e4 <malloc+0x10>)
100674d8:	0001      	movs	r1, r0
100674da:	6818      	ldr	r0, [r3, #0]
100674dc:	f000 f826 	bl	1006752c <_malloc_r>
100674e0:	bd10      	pop	{r4, pc}
100674e2:	46c0      	nop			@ (mov r8, r8)
100674e4:	20001504 	.word	0x20001504

100674e8 <sbrk_aligned>:
100674e8:	b570      	push	{r4, r5, r6, lr}
100674ea:	4e0f      	ldr	r6, [pc, #60]	@ (10067528 <sbrk_aligned+0x40>)
100674ec:	000d      	movs	r5, r1
100674ee:	6831      	ldr	r1, [r6, #0]
100674f0:	0004      	movs	r4, r0
100674f2:	2900      	cmp	r1, #0
100674f4:	d102      	bne.n	100674fc <sbrk_aligned+0x14>
100674f6:	f000 fce3 	bl	10067ec0 <_sbrk_r>
100674fa:	6030      	str	r0, [r6, #0]
100674fc:	0029      	movs	r1, r5
100674fe:	0020      	movs	r0, r4
10067500:	f000 fcde 	bl	10067ec0 <_sbrk_r>
10067504:	1c43      	adds	r3, r0, #1
10067506:	d103      	bne.n	10067510 <sbrk_aligned+0x28>
10067508:	2501      	movs	r5, #1
1006750a:	426d      	negs	r5, r5
1006750c:	0028      	movs	r0, r5
1006750e:	bd70      	pop	{r4, r5, r6, pc}
10067510:	2303      	movs	r3, #3
10067512:	1cc5      	adds	r5, r0, #3
10067514:	439d      	bics	r5, r3
10067516:	42a8      	cmp	r0, r5
10067518:	d0f8      	beq.n	1006750c <sbrk_aligned+0x24>
1006751a:	1a29      	subs	r1, r5, r0
1006751c:	0020      	movs	r0, r4
1006751e:	f000 fccf 	bl	10067ec0 <_sbrk_r>
10067522:	3001      	adds	r0, #1
10067524:	d1f2      	bne.n	1006750c <sbrk_aligned+0x24>
10067526:	e7ef      	b.n	10067508 <sbrk_aligned+0x20>
10067528:	20001290 	.word	0x20001290

1006752c <_malloc_r>:
1006752c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1006752e:	2203      	movs	r2, #3
10067530:	1ccb      	adds	r3, r1, #3
10067532:	4393      	bics	r3, r2
10067534:	3308      	adds	r3, #8
10067536:	0005      	movs	r5, r0
10067538:	001f      	movs	r7, r3
1006753a:	2b0c      	cmp	r3, #12
1006753c:	d234      	bcs.n	100675a8 <_malloc_r+0x7c>
1006753e:	270c      	movs	r7, #12
10067540:	42b9      	cmp	r1, r7
10067542:	d833      	bhi.n	100675ac <_malloc_r+0x80>
10067544:	0028      	movs	r0, r5
10067546:	f000 f871 	bl	1006762c <__malloc_lock>
1006754a:	4e37      	ldr	r6, [pc, #220]	@ (10067628 <_malloc_r+0xfc>)
1006754c:	6833      	ldr	r3, [r6, #0]
1006754e:	001c      	movs	r4, r3
10067550:	2c00      	cmp	r4, #0
10067552:	d12f      	bne.n	100675b4 <_malloc_r+0x88>
10067554:	0039      	movs	r1, r7
10067556:	0028      	movs	r0, r5
10067558:	f7ff ffc6 	bl	100674e8 <sbrk_aligned>
1006755c:	0004      	movs	r4, r0
1006755e:	1c43      	adds	r3, r0, #1
10067560:	d15f      	bne.n	10067622 <_malloc_r+0xf6>
10067562:	6834      	ldr	r4, [r6, #0]
10067564:	9400      	str	r4, [sp, #0]
10067566:	9b00      	ldr	r3, [sp, #0]
10067568:	2b00      	cmp	r3, #0
1006756a:	d14a      	bne.n	10067602 <_malloc_r+0xd6>
1006756c:	2c00      	cmp	r4, #0
1006756e:	d052      	beq.n	10067616 <_malloc_r+0xea>
10067570:	6823      	ldr	r3, [r4, #0]
10067572:	0028      	movs	r0, r5
10067574:	18e3      	adds	r3, r4, r3
10067576:	9900      	ldr	r1, [sp, #0]
10067578:	9301      	str	r3, [sp, #4]
1006757a:	f000 fca1 	bl	10067ec0 <_sbrk_r>
1006757e:	9b01      	ldr	r3, [sp, #4]
10067580:	4283      	cmp	r3, r0
10067582:	d148      	bne.n	10067616 <_malloc_r+0xea>
10067584:	6823      	ldr	r3, [r4, #0]
10067586:	0028      	movs	r0, r5
10067588:	1aff      	subs	r7, r7, r3
1006758a:	0039      	movs	r1, r7
1006758c:	f7ff ffac 	bl	100674e8 <sbrk_aligned>
10067590:	3001      	adds	r0, #1
10067592:	d040      	beq.n	10067616 <_malloc_r+0xea>
10067594:	6823      	ldr	r3, [r4, #0]
10067596:	19db      	adds	r3, r3, r7
10067598:	6023      	str	r3, [r4, #0]
1006759a:	6833      	ldr	r3, [r6, #0]
1006759c:	685a      	ldr	r2, [r3, #4]
1006759e:	2a00      	cmp	r2, #0
100675a0:	d133      	bne.n	1006760a <_malloc_r+0xde>
100675a2:	9b00      	ldr	r3, [sp, #0]
100675a4:	6033      	str	r3, [r6, #0]
100675a6:	e019      	b.n	100675dc <_malloc_r+0xb0>
100675a8:	2b00      	cmp	r3, #0
100675aa:	dac9      	bge.n	10067540 <_malloc_r+0x14>
100675ac:	230c      	movs	r3, #12
100675ae:	602b      	str	r3, [r5, #0]
100675b0:	2000      	movs	r0, #0
100675b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100675b4:	6821      	ldr	r1, [r4, #0]
100675b6:	1bc9      	subs	r1, r1, r7
100675b8:	d420      	bmi.n	100675fc <_malloc_r+0xd0>
100675ba:	290b      	cmp	r1, #11
100675bc:	d90a      	bls.n	100675d4 <_malloc_r+0xa8>
100675be:	19e2      	adds	r2, r4, r7
100675c0:	6027      	str	r7, [r4, #0]
100675c2:	42a3      	cmp	r3, r4
100675c4:	d104      	bne.n	100675d0 <_malloc_r+0xa4>
100675c6:	6032      	str	r2, [r6, #0]
100675c8:	6863      	ldr	r3, [r4, #4]
100675ca:	6011      	str	r1, [r2, #0]
100675cc:	6053      	str	r3, [r2, #4]
100675ce:	e005      	b.n	100675dc <_malloc_r+0xb0>
100675d0:	605a      	str	r2, [r3, #4]
100675d2:	e7f9      	b.n	100675c8 <_malloc_r+0x9c>
100675d4:	6862      	ldr	r2, [r4, #4]
100675d6:	42a3      	cmp	r3, r4
100675d8:	d10e      	bne.n	100675f8 <_malloc_r+0xcc>
100675da:	6032      	str	r2, [r6, #0]
100675dc:	0028      	movs	r0, r5
100675de:	f000 f82d 	bl	1006763c <__malloc_unlock>
100675e2:	0020      	movs	r0, r4
100675e4:	2207      	movs	r2, #7
100675e6:	300b      	adds	r0, #11
100675e8:	1d23      	adds	r3, r4, #4
100675ea:	4390      	bics	r0, r2
100675ec:	1ac2      	subs	r2, r0, r3
100675ee:	4298      	cmp	r0, r3
100675f0:	d0df      	beq.n	100675b2 <_malloc_r+0x86>
100675f2:	1a1b      	subs	r3, r3, r0
100675f4:	50a3      	str	r3, [r4, r2]
100675f6:	e7dc      	b.n	100675b2 <_malloc_r+0x86>
100675f8:	605a      	str	r2, [r3, #4]
100675fa:	e7ef      	b.n	100675dc <_malloc_r+0xb0>
100675fc:	0023      	movs	r3, r4
100675fe:	6864      	ldr	r4, [r4, #4]
10067600:	e7a6      	b.n	10067550 <_malloc_r+0x24>
10067602:	9c00      	ldr	r4, [sp, #0]
10067604:	6863      	ldr	r3, [r4, #4]
10067606:	9300      	str	r3, [sp, #0]
10067608:	e7ad      	b.n	10067566 <_malloc_r+0x3a>
1006760a:	001a      	movs	r2, r3
1006760c:	685b      	ldr	r3, [r3, #4]
1006760e:	42a3      	cmp	r3, r4
10067610:	d1fb      	bne.n	1006760a <_malloc_r+0xde>
10067612:	2300      	movs	r3, #0
10067614:	e7da      	b.n	100675cc <_malloc_r+0xa0>
10067616:	230c      	movs	r3, #12
10067618:	0028      	movs	r0, r5
1006761a:	602b      	str	r3, [r5, #0]
1006761c:	f000 f80e 	bl	1006763c <__malloc_unlock>
10067620:	e7c6      	b.n	100675b0 <_malloc_r+0x84>
10067622:	6007      	str	r7, [r0, #0]
10067624:	e7da      	b.n	100675dc <_malloc_r+0xb0>
10067626:	46c0      	nop			@ (mov r8, r8)
10067628:	20001294 	.word	0x20001294

1006762c <__malloc_lock>:
1006762c:	b510      	push	{r4, lr}
1006762e:	4802      	ldr	r0, [pc, #8]	@ (10067638 <__malloc_lock+0xc>)
10067630:	f7ff fef1 	bl	10067416 <__retarget_lock_acquire_recursive>
10067634:	bd10      	pop	{r4, pc}
10067636:	46c0      	nop			@ (mov r8, r8)
10067638:	2000128c 	.word	0x2000128c

1006763c <__malloc_unlock>:
1006763c:	b510      	push	{r4, lr}
1006763e:	4802      	ldr	r0, [pc, #8]	@ (10067648 <__malloc_unlock+0xc>)
10067640:	f7ff feea 	bl	10067418 <__retarget_lock_release_recursive>
10067644:	bd10      	pop	{r4, pc}
10067646:	46c0      	nop			@ (mov r8, r8)
10067648:	2000128c 	.word	0x2000128c

1006764c <__sfputc_r>:
1006764c:	6893      	ldr	r3, [r2, #8]
1006764e:	b510      	push	{r4, lr}
10067650:	3b01      	subs	r3, #1
10067652:	6093      	str	r3, [r2, #8]
10067654:	2b00      	cmp	r3, #0
10067656:	da04      	bge.n	10067662 <__sfputc_r+0x16>
10067658:	6994      	ldr	r4, [r2, #24]
1006765a:	42a3      	cmp	r3, r4
1006765c:	db07      	blt.n	1006766e <__sfputc_r+0x22>
1006765e:	290a      	cmp	r1, #10
10067660:	d005      	beq.n	1006766e <__sfputc_r+0x22>
10067662:	6813      	ldr	r3, [r2, #0]
10067664:	1c58      	adds	r0, r3, #1
10067666:	6010      	str	r0, [r2, #0]
10067668:	7019      	strb	r1, [r3, #0]
1006766a:	0008      	movs	r0, r1
1006766c:	bd10      	pop	{r4, pc}
1006766e:	f7ff fdc7 	bl	10067200 <__swbuf_r>
10067672:	0001      	movs	r1, r0
10067674:	e7f9      	b.n	1006766a <__sfputc_r+0x1e>

10067676 <__sfputs_r>:
10067676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10067678:	0006      	movs	r6, r0
1006767a:	000f      	movs	r7, r1
1006767c:	0014      	movs	r4, r2
1006767e:	18d5      	adds	r5, r2, r3
10067680:	42ac      	cmp	r4, r5
10067682:	d101      	bne.n	10067688 <__sfputs_r+0x12>
10067684:	2000      	movs	r0, #0
10067686:	e007      	b.n	10067698 <__sfputs_r+0x22>
10067688:	7821      	ldrb	r1, [r4, #0]
1006768a:	003a      	movs	r2, r7
1006768c:	0030      	movs	r0, r6
1006768e:	f7ff ffdd 	bl	1006764c <__sfputc_r>
10067692:	3401      	adds	r4, #1
10067694:	1c43      	adds	r3, r0, #1
10067696:	d1f3      	bne.n	10067680 <__sfputs_r+0xa>
10067698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1006769c <_vfiprintf_r>:
1006769c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006769e:	b0a1      	sub	sp, #132	@ 0x84
100676a0:	000f      	movs	r7, r1
100676a2:	0015      	movs	r5, r2
100676a4:	001e      	movs	r6, r3
100676a6:	9003      	str	r0, [sp, #12]
100676a8:	2800      	cmp	r0, #0
100676aa:	d004      	beq.n	100676b6 <_vfiprintf_r+0x1a>
100676ac:	6a03      	ldr	r3, [r0, #32]
100676ae:	2b00      	cmp	r3, #0
100676b0:	d101      	bne.n	100676b6 <_vfiprintf_r+0x1a>
100676b2:	f7ff fbf5 	bl	10066ea0 <__sinit>
100676b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100676b8:	07db      	lsls	r3, r3, #31
100676ba:	d405      	bmi.n	100676c8 <_vfiprintf_r+0x2c>
100676bc:	89bb      	ldrh	r3, [r7, #12]
100676be:	059b      	lsls	r3, r3, #22
100676c0:	d402      	bmi.n	100676c8 <_vfiprintf_r+0x2c>
100676c2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
100676c4:	f7ff fea7 	bl	10067416 <__retarget_lock_acquire_recursive>
100676c8:	89bb      	ldrh	r3, [r7, #12]
100676ca:	071b      	lsls	r3, r3, #28
100676cc:	d502      	bpl.n	100676d4 <_vfiprintf_r+0x38>
100676ce:	693b      	ldr	r3, [r7, #16]
100676d0:	2b00      	cmp	r3, #0
100676d2:	d113      	bne.n	100676fc <_vfiprintf_r+0x60>
100676d4:	0039      	movs	r1, r7
100676d6:	9803      	ldr	r0, [sp, #12]
100676d8:	f7ff fdd4 	bl	10067284 <__swsetup_r>
100676dc:	2800      	cmp	r0, #0
100676de:	d00d      	beq.n	100676fc <_vfiprintf_r+0x60>
100676e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100676e2:	07db      	lsls	r3, r3, #31
100676e4:	d503      	bpl.n	100676ee <_vfiprintf_r+0x52>
100676e6:	2001      	movs	r0, #1
100676e8:	4240      	negs	r0, r0
100676ea:	b021      	add	sp, #132	@ 0x84
100676ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
100676ee:	89bb      	ldrh	r3, [r7, #12]
100676f0:	059b      	lsls	r3, r3, #22
100676f2:	d4f8      	bmi.n	100676e6 <_vfiprintf_r+0x4a>
100676f4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
100676f6:	f7ff fe8f 	bl	10067418 <__retarget_lock_release_recursive>
100676fa:	e7f4      	b.n	100676e6 <_vfiprintf_r+0x4a>
100676fc:	2300      	movs	r3, #0
100676fe:	ac08      	add	r4, sp, #32
10067700:	6163      	str	r3, [r4, #20]
10067702:	3320      	adds	r3, #32
10067704:	7663      	strb	r3, [r4, #25]
10067706:	3310      	adds	r3, #16
10067708:	76a3      	strb	r3, [r4, #26]
1006770a:	9607      	str	r6, [sp, #28]
1006770c:	002e      	movs	r6, r5
1006770e:	7833      	ldrb	r3, [r6, #0]
10067710:	2b00      	cmp	r3, #0
10067712:	d001      	beq.n	10067718 <_vfiprintf_r+0x7c>
10067714:	2b25      	cmp	r3, #37	@ 0x25
10067716:	d148      	bne.n	100677aa <_vfiprintf_r+0x10e>
10067718:	1b73      	subs	r3, r6, r5
1006771a:	9305      	str	r3, [sp, #20]
1006771c:	42ae      	cmp	r6, r5
1006771e:	d00b      	beq.n	10067738 <_vfiprintf_r+0x9c>
10067720:	002a      	movs	r2, r5
10067722:	0039      	movs	r1, r7
10067724:	9803      	ldr	r0, [sp, #12]
10067726:	f7ff ffa6 	bl	10067676 <__sfputs_r>
1006772a:	3001      	adds	r0, #1
1006772c:	d100      	bne.n	10067730 <_vfiprintf_r+0x94>
1006772e:	e0ae      	b.n	1006788e <_vfiprintf_r+0x1f2>
10067730:	6963      	ldr	r3, [r4, #20]
10067732:	9a05      	ldr	r2, [sp, #20]
10067734:	189b      	adds	r3, r3, r2
10067736:	6163      	str	r3, [r4, #20]
10067738:	7833      	ldrb	r3, [r6, #0]
1006773a:	2b00      	cmp	r3, #0
1006773c:	d100      	bne.n	10067740 <_vfiprintf_r+0xa4>
1006773e:	e0a6      	b.n	1006788e <_vfiprintf_r+0x1f2>
10067740:	2201      	movs	r2, #1
10067742:	2300      	movs	r3, #0
10067744:	4252      	negs	r2, r2
10067746:	6062      	str	r2, [r4, #4]
10067748:	a904      	add	r1, sp, #16
1006774a:	3254      	adds	r2, #84	@ 0x54
1006774c:	1852      	adds	r2, r2, r1
1006774e:	1c75      	adds	r5, r6, #1
10067750:	6023      	str	r3, [r4, #0]
10067752:	60e3      	str	r3, [r4, #12]
10067754:	60a3      	str	r3, [r4, #8]
10067756:	7013      	strb	r3, [r2, #0]
10067758:	65a3      	str	r3, [r4, #88]	@ 0x58
1006775a:	4b59      	ldr	r3, [pc, #356]	@ (100678c0 <_vfiprintf_r+0x224>)
1006775c:	2205      	movs	r2, #5
1006775e:	0018      	movs	r0, r3
10067760:	7829      	ldrb	r1, [r5, #0]
10067762:	9305      	str	r3, [sp, #20]
10067764:	f000 fbc5 	bl	10067ef2 <memchr>
10067768:	1c6e      	adds	r6, r5, #1
1006776a:	2800      	cmp	r0, #0
1006776c:	d11f      	bne.n	100677ae <_vfiprintf_r+0x112>
1006776e:	6822      	ldr	r2, [r4, #0]
10067770:	06d3      	lsls	r3, r2, #27
10067772:	d504      	bpl.n	1006777e <_vfiprintf_r+0xe2>
10067774:	2353      	movs	r3, #83	@ 0x53
10067776:	a904      	add	r1, sp, #16
10067778:	185b      	adds	r3, r3, r1
1006777a:	2120      	movs	r1, #32
1006777c:	7019      	strb	r1, [r3, #0]
1006777e:	0713      	lsls	r3, r2, #28
10067780:	d504      	bpl.n	1006778c <_vfiprintf_r+0xf0>
10067782:	2353      	movs	r3, #83	@ 0x53
10067784:	a904      	add	r1, sp, #16
10067786:	185b      	adds	r3, r3, r1
10067788:	212b      	movs	r1, #43	@ 0x2b
1006778a:	7019      	strb	r1, [r3, #0]
1006778c:	782b      	ldrb	r3, [r5, #0]
1006778e:	2b2a      	cmp	r3, #42	@ 0x2a
10067790:	d016      	beq.n	100677c0 <_vfiprintf_r+0x124>
10067792:	002e      	movs	r6, r5
10067794:	2100      	movs	r1, #0
10067796:	200a      	movs	r0, #10
10067798:	68e3      	ldr	r3, [r4, #12]
1006779a:	7832      	ldrb	r2, [r6, #0]
1006779c:	1c75      	adds	r5, r6, #1
1006779e:	3a30      	subs	r2, #48	@ 0x30
100677a0:	2a09      	cmp	r2, #9
100677a2:	d950      	bls.n	10067846 <_vfiprintf_r+0x1aa>
100677a4:	2900      	cmp	r1, #0
100677a6:	d111      	bne.n	100677cc <_vfiprintf_r+0x130>
100677a8:	e017      	b.n	100677da <_vfiprintf_r+0x13e>
100677aa:	3601      	adds	r6, #1
100677ac:	e7af      	b.n	1006770e <_vfiprintf_r+0x72>
100677ae:	9b05      	ldr	r3, [sp, #20]
100677b0:	6822      	ldr	r2, [r4, #0]
100677b2:	1ac0      	subs	r0, r0, r3
100677b4:	2301      	movs	r3, #1
100677b6:	4083      	lsls	r3, r0
100677b8:	4313      	orrs	r3, r2
100677ba:	0035      	movs	r5, r6
100677bc:	6023      	str	r3, [r4, #0]
100677be:	e7cc      	b.n	1006775a <_vfiprintf_r+0xbe>
100677c0:	9b07      	ldr	r3, [sp, #28]
100677c2:	1d19      	adds	r1, r3, #4
100677c4:	681b      	ldr	r3, [r3, #0]
100677c6:	9107      	str	r1, [sp, #28]
100677c8:	2b00      	cmp	r3, #0
100677ca:	db01      	blt.n	100677d0 <_vfiprintf_r+0x134>
100677cc:	930b      	str	r3, [sp, #44]	@ 0x2c
100677ce:	e004      	b.n	100677da <_vfiprintf_r+0x13e>
100677d0:	425b      	negs	r3, r3
100677d2:	60e3      	str	r3, [r4, #12]
100677d4:	2302      	movs	r3, #2
100677d6:	4313      	orrs	r3, r2
100677d8:	6023      	str	r3, [r4, #0]
100677da:	7833      	ldrb	r3, [r6, #0]
100677dc:	2b2e      	cmp	r3, #46	@ 0x2e
100677de:	d10c      	bne.n	100677fa <_vfiprintf_r+0x15e>
100677e0:	7873      	ldrb	r3, [r6, #1]
100677e2:	2b2a      	cmp	r3, #42	@ 0x2a
100677e4:	d134      	bne.n	10067850 <_vfiprintf_r+0x1b4>
100677e6:	9b07      	ldr	r3, [sp, #28]
100677e8:	3602      	adds	r6, #2
100677ea:	1d1a      	adds	r2, r3, #4
100677ec:	681b      	ldr	r3, [r3, #0]
100677ee:	9207      	str	r2, [sp, #28]
100677f0:	2b00      	cmp	r3, #0
100677f2:	da01      	bge.n	100677f8 <_vfiprintf_r+0x15c>
100677f4:	2301      	movs	r3, #1
100677f6:	425b      	negs	r3, r3
100677f8:	9309      	str	r3, [sp, #36]	@ 0x24
100677fa:	4d32      	ldr	r5, [pc, #200]	@ (100678c4 <_vfiprintf_r+0x228>)
100677fc:	2203      	movs	r2, #3
100677fe:	0028      	movs	r0, r5
10067800:	7831      	ldrb	r1, [r6, #0]
10067802:	f000 fb76 	bl	10067ef2 <memchr>
10067806:	2800      	cmp	r0, #0
10067808:	d006      	beq.n	10067818 <_vfiprintf_r+0x17c>
1006780a:	2340      	movs	r3, #64	@ 0x40
1006780c:	1b40      	subs	r0, r0, r5
1006780e:	4083      	lsls	r3, r0
10067810:	6822      	ldr	r2, [r4, #0]
10067812:	3601      	adds	r6, #1
10067814:	4313      	orrs	r3, r2
10067816:	6023      	str	r3, [r4, #0]
10067818:	7831      	ldrb	r1, [r6, #0]
1006781a:	2206      	movs	r2, #6
1006781c:	482a      	ldr	r0, [pc, #168]	@ (100678c8 <_vfiprintf_r+0x22c>)
1006781e:	1c75      	adds	r5, r6, #1
10067820:	7621      	strb	r1, [r4, #24]
10067822:	f000 fb66 	bl	10067ef2 <memchr>
10067826:	2800      	cmp	r0, #0
10067828:	d040      	beq.n	100678ac <_vfiprintf_r+0x210>
1006782a:	4b28      	ldr	r3, [pc, #160]	@ (100678cc <_vfiprintf_r+0x230>)
1006782c:	2b00      	cmp	r3, #0
1006782e:	d122      	bne.n	10067876 <_vfiprintf_r+0x1da>
10067830:	2207      	movs	r2, #7
10067832:	9b07      	ldr	r3, [sp, #28]
10067834:	3307      	adds	r3, #7
10067836:	4393      	bics	r3, r2
10067838:	3308      	adds	r3, #8
1006783a:	9307      	str	r3, [sp, #28]
1006783c:	6963      	ldr	r3, [r4, #20]
1006783e:	9a04      	ldr	r2, [sp, #16]
10067840:	189b      	adds	r3, r3, r2
10067842:	6163      	str	r3, [r4, #20]
10067844:	e762      	b.n	1006770c <_vfiprintf_r+0x70>
10067846:	4343      	muls	r3, r0
10067848:	002e      	movs	r6, r5
1006784a:	2101      	movs	r1, #1
1006784c:	189b      	adds	r3, r3, r2
1006784e:	e7a4      	b.n	1006779a <_vfiprintf_r+0xfe>
10067850:	2300      	movs	r3, #0
10067852:	200a      	movs	r0, #10
10067854:	0019      	movs	r1, r3
10067856:	3601      	adds	r6, #1
10067858:	6063      	str	r3, [r4, #4]
1006785a:	7832      	ldrb	r2, [r6, #0]
1006785c:	1c75      	adds	r5, r6, #1
1006785e:	3a30      	subs	r2, #48	@ 0x30
10067860:	2a09      	cmp	r2, #9
10067862:	d903      	bls.n	1006786c <_vfiprintf_r+0x1d0>
10067864:	2b00      	cmp	r3, #0
10067866:	d0c8      	beq.n	100677fa <_vfiprintf_r+0x15e>
10067868:	9109      	str	r1, [sp, #36]	@ 0x24
1006786a:	e7c6      	b.n	100677fa <_vfiprintf_r+0x15e>
1006786c:	4341      	muls	r1, r0
1006786e:	002e      	movs	r6, r5
10067870:	2301      	movs	r3, #1
10067872:	1889      	adds	r1, r1, r2
10067874:	e7f1      	b.n	1006785a <_vfiprintf_r+0x1be>
10067876:	aa07      	add	r2, sp, #28
10067878:	9200      	str	r2, [sp, #0]
1006787a:	0021      	movs	r1, r4
1006787c:	003a      	movs	r2, r7
1006787e:	4b14      	ldr	r3, [pc, #80]	@ (100678d0 <_vfiprintf_r+0x234>)
10067880:	9803      	ldr	r0, [sp, #12]
10067882:	e000      	b.n	10067886 <_vfiprintf_r+0x1ea>
10067884:	bf00      	nop
10067886:	9004      	str	r0, [sp, #16]
10067888:	9b04      	ldr	r3, [sp, #16]
1006788a:	3301      	adds	r3, #1
1006788c:	d1d6      	bne.n	1006783c <_vfiprintf_r+0x1a0>
1006788e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10067890:	07db      	lsls	r3, r3, #31
10067892:	d405      	bmi.n	100678a0 <_vfiprintf_r+0x204>
10067894:	89bb      	ldrh	r3, [r7, #12]
10067896:	059b      	lsls	r3, r3, #22
10067898:	d402      	bmi.n	100678a0 <_vfiprintf_r+0x204>
1006789a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
1006789c:	f7ff fdbc 	bl	10067418 <__retarget_lock_release_recursive>
100678a0:	89bb      	ldrh	r3, [r7, #12]
100678a2:	065b      	lsls	r3, r3, #25
100678a4:	d500      	bpl.n	100678a8 <_vfiprintf_r+0x20c>
100678a6:	e71e      	b.n	100676e6 <_vfiprintf_r+0x4a>
100678a8:	980d      	ldr	r0, [sp, #52]	@ 0x34
100678aa:	e71e      	b.n	100676ea <_vfiprintf_r+0x4e>
100678ac:	aa07      	add	r2, sp, #28
100678ae:	9200      	str	r2, [sp, #0]
100678b0:	0021      	movs	r1, r4
100678b2:	003a      	movs	r2, r7
100678b4:	4b06      	ldr	r3, [pc, #24]	@ (100678d0 <_vfiprintf_r+0x234>)
100678b6:	9803      	ldr	r0, [sp, #12]
100678b8:	f000 f87c 	bl	100679b4 <_printf_i>
100678bc:	e7e3      	b.n	10067886 <_vfiprintf_r+0x1ea>
100678be:	46c0      	nop			@ (mov r8, r8)
100678c0:	1006a1a0 	.word	0x1006a1a0
100678c4:	1006a1a6 	.word	0x1006a1a6
100678c8:	1006a1aa 	.word	0x1006a1aa
100678cc:	00000000 	.word	0x00000000
100678d0:	10067677 	.word	0x10067677

100678d4 <_printf_common>:
100678d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100678d6:	0016      	movs	r6, r2
100678d8:	9301      	str	r3, [sp, #4]
100678da:	688a      	ldr	r2, [r1, #8]
100678dc:	690b      	ldr	r3, [r1, #16]
100678de:	000c      	movs	r4, r1
100678e0:	9000      	str	r0, [sp, #0]
100678e2:	4293      	cmp	r3, r2
100678e4:	da00      	bge.n	100678e8 <_printf_common+0x14>
100678e6:	0013      	movs	r3, r2
100678e8:	0022      	movs	r2, r4
100678ea:	6033      	str	r3, [r6, #0]
100678ec:	3243      	adds	r2, #67	@ 0x43
100678ee:	7812      	ldrb	r2, [r2, #0]
100678f0:	2a00      	cmp	r2, #0
100678f2:	d001      	beq.n	100678f8 <_printf_common+0x24>
100678f4:	3301      	adds	r3, #1
100678f6:	6033      	str	r3, [r6, #0]
100678f8:	6823      	ldr	r3, [r4, #0]
100678fa:	069b      	lsls	r3, r3, #26
100678fc:	d502      	bpl.n	10067904 <_printf_common+0x30>
100678fe:	6833      	ldr	r3, [r6, #0]
10067900:	3302      	adds	r3, #2
10067902:	6033      	str	r3, [r6, #0]
10067904:	6822      	ldr	r2, [r4, #0]
10067906:	2306      	movs	r3, #6
10067908:	0015      	movs	r5, r2
1006790a:	401d      	ands	r5, r3
1006790c:	421a      	tst	r2, r3
1006790e:	d027      	beq.n	10067960 <_printf_common+0x8c>
10067910:	0023      	movs	r3, r4
10067912:	3343      	adds	r3, #67	@ 0x43
10067914:	781b      	ldrb	r3, [r3, #0]
10067916:	1e5a      	subs	r2, r3, #1
10067918:	4193      	sbcs	r3, r2
1006791a:	6822      	ldr	r2, [r4, #0]
1006791c:	0692      	lsls	r2, r2, #26
1006791e:	d430      	bmi.n	10067982 <_printf_common+0xae>
10067920:	0022      	movs	r2, r4
10067922:	9901      	ldr	r1, [sp, #4]
10067924:	9800      	ldr	r0, [sp, #0]
10067926:	9d08      	ldr	r5, [sp, #32]
10067928:	3243      	adds	r2, #67	@ 0x43
1006792a:	47a8      	blx	r5
1006792c:	3001      	adds	r0, #1
1006792e:	d025      	beq.n	1006797c <_printf_common+0xa8>
10067930:	2206      	movs	r2, #6
10067932:	6823      	ldr	r3, [r4, #0]
10067934:	2500      	movs	r5, #0
10067936:	4013      	ands	r3, r2
10067938:	2b04      	cmp	r3, #4
1006793a:	d105      	bne.n	10067948 <_printf_common+0x74>
1006793c:	6833      	ldr	r3, [r6, #0]
1006793e:	68e5      	ldr	r5, [r4, #12]
10067940:	1aed      	subs	r5, r5, r3
10067942:	43eb      	mvns	r3, r5
10067944:	17db      	asrs	r3, r3, #31
10067946:	401d      	ands	r5, r3
10067948:	68a3      	ldr	r3, [r4, #8]
1006794a:	6922      	ldr	r2, [r4, #16]
1006794c:	4293      	cmp	r3, r2
1006794e:	dd01      	ble.n	10067954 <_printf_common+0x80>
10067950:	1a9b      	subs	r3, r3, r2
10067952:	18ed      	adds	r5, r5, r3
10067954:	2600      	movs	r6, #0
10067956:	42b5      	cmp	r5, r6
10067958:	d120      	bne.n	1006799c <_printf_common+0xc8>
1006795a:	2000      	movs	r0, #0
1006795c:	e010      	b.n	10067980 <_printf_common+0xac>
1006795e:	3501      	adds	r5, #1
10067960:	68e3      	ldr	r3, [r4, #12]
10067962:	6832      	ldr	r2, [r6, #0]
10067964:	1a9b      	subs	r3, r3, r2
10067966:	42ab      	cmp	r3, r5
10067968:	ddd2      	ble.n	10067910 <_printf_common+0x3c>
1006796a:	0022      	movs	r2, r4
1006796c:	2301      	movs	r3, #1
1006796e:	9901      	ldr	r1, [sp, #4]
10067970:	9800      	ldr	r0, [sp, #0]
10067972:	9f08      	ldr	r7, [sp, #32]
10067974:	3219      	adds	r2, #25
10067976:	47b8      	blx	r7
10067978:	3001      	adds	r0, #1
1006797a:	d1f0      	bne.n	1006795e <_printf_common+0x8a>
1006797c:	2001      	movs	r0, #1
1006797e:	4240      	negs	r0, r0
10067980:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10067982:	2030      	movs	r0, #48	@ 0x30
10067984:	18e1      	adds	r1, r4, r3
10067986:	3143      	adds	r1, #67	@ 0x43
10067988:	7008      	strb	r0, [r1, #0]
1006798a:	0021      	movs	r1, r4
1006798c:	1c5a      	adds	r2, r3, #1
1006798e:	3145      	adds	r1, #69	@ 0x45
10067990:	7809      	ldrb	r1, [r1, #0]
10067992:	18a2      	adds	r2, r4, r2
10067994:	3243      	adds	r2, #67	@ 0x43
10067996:	3302      	adds	r3, #2
10067998:	7011      	strb	r1, [r2, #0]
1006799a:	e7c1      	b.n	10067920 <_printf_common+0x4c>
1006799c:	0022      	movs	r2, r4
1006799e:	2301      	movs	r3, #1
100679a0:	9901      	ldr	r1, [sp, #4]
100679a2:	9800      	ldr	r0, [sp, #0]
100679a4:	9f08      	ldr	r7, [sp, #32]
100679a6:	321a      	adds	r2, #26
100679a8:	47b8      	blx	r7
100679aa:	3001      	adds	r0, #1
100679ac:	d0e6      	beq.n	1006797c <_printf_common+0xa8>
100679ae:	3601      	adds	r6, #1
100679b0:	e7d1      	b.n	10067956 <_printf_common+0x82>
	...

100679b4 <_printf_i>:
100679b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100679b6:	b08b      	sub	sp, #44	@ 0x2c
100679b8:	9206      	str	r2, [sp, #24]
100679ba:	000a      	movs	r2, r1
100679bc:	3243      	adds	r2, #67	@ 0x43
100679be:	9307      	str	r3, [sp, #28]
100679c0:	9005      	str	r0, [sp, #20]
100679c2:	9203      	str	r2, [sp, #12]
100679c4:	7e0a      	ldrb	r2, [r1, #24]
100679c6:	000c      	movs	r4, r1
100679c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
100679ca:	2a78      	cmp	r2, #120	@ 0x78
100679cc:	d809      	bhi.n	100679e2 <_printf_i+0x2e>
100679ce:	2a62      	cmp	r2, #98	@ 0x62
100679d0:	d80b      	bhi.n	100679ea <_printf_i+0x36>
100679d2:	2a00      	cmp	r2, #0
100679d4:	d100      	bne.n	100679d8 <_printf_i+0x24>
100679d6:	e0bc      	b.n	10067b52 <_printf_i+0x19e>
100679d8:	497b      	ldr	r1, [pc, #492]	@ (10067bc8 <_printf_i+0x214>)
100679da:	9104      	str	r1, [sp, #16]
100679dc:	2a58      	cmp	r2, #88	@ 0x58
100679de:	d100      	bne.n	100679e2 <_printf_i+0x2e>
100679e0:	e090      	b.n	10067b04 <_printf_i+0x150>
100679e2:	0025      	movs	r5, r4
100679e4:	3542      	adds	r5, #66	@ 0x42
100679e6:	702a      	strb	r2, [r5, #0]
100679e8:	e022      	b.n	10067a30 <_printf_i+0x7c>
100679ea:	0010      	movs	r0, r2
100679ec:	3863      	subs	r0, #99	@ 0x63
100679ee:	2815      	cmp	r0, #21
100679f0:	d8f7      	bhi.n	100679e2 <_printf_i+0x2e>
100679f2:	f7d9 fc1f 	bl	10041234 <__gnu_thumb1_case_shi>
100679f6:	0016      	.short	0x0016
100679f8:	fff6001f 	.word	0xfff6001f
100679fc:	fff6fff6 	.word	0xfff6fff6
10067a00:	001ffff6 	.word	0x001ffff6
10067a04:	fff6fff6 	.word	0xfff6fff6
10067a08:	fff6fff6 	.word	0xfff6fff6
10067a0c:	003600a1 	.word	0x003600a1
10067a10:	fff60080 	.word	0xfff60080
10067a14:	00b2fff6 	.word	0x00b2fff6
10067a18:	0036fff6 	.word	0x0036fff6
10067a1c:	fff6fff6 	.word	0xfff6fff6
10067a20:	0084      	.short	0x0084
10067a22:	0025      	movs	r5, r4
10067a24:	681a      	ldr	r2, [r3, #0]
10067a26:	3542      	adds	r5, #66	@ 0x42
10067a28:	1d11      	adds	r1, r2, #4
10067a2a:	6019      	str	r1, [r3, #0]
10067a2c:	6813      	ldr	r3, [r2, #0]
10067a2e:	702b      	strb	r3, [r5, #0]
10067a30:	2301      	movs	r3, #1
10067a32:	e0a0      	b.n	10067b76 <_printf_i+0x1c2>
10067a34:	6818      	ldr	r0, [r3, #0]
10067a36:	6809      	ldr	r1, [r1, #0]
10067a38:	1d02      	adds	r2, r0, #4
10067a3a:	060d      	lsls	r5, r1, #24
10067a3c:	d50b      	bpl.n	10067a56 <_printf_i+0xa2>
10067a3e:	6806      	ldr	r6, [r0, #0]
10067a40:	601a      	str	r2, [r3, #0]
10067a42:	2e00      	cmp	r6, #0
10067a44:	da03      	bge.n	10067a4e <_printf_i+0x9a>
10067a46:	232d      	movs	r3, #45	@ 0x2d
10067a48:	9a03      	ldr	r2, [sp, #12]
10067a4a:	4276      	negs	r6, r6
10067a4c:	7013      	strb	r3, [r2, #0]
10067a4e:	4b5e      	ldr	r3, [pc, #376]	@ (10067bc8 <_printf_i+0x214>)
10067a50:	270a      	movs	r7, #10
10067a52:	9304      	str	r3, [sp, #16]
10067a54:	e018      	b.n	10067a88 <_printf_i+0xd4>
10067a56:	6806      	ldr	r6, [r0, #0]
10067a58:	601a      	str	r2, [r3, #0]
10067a5a:	0649      	lsls	r1, r1, #25
10067a5c:	d5f1      	bpl.n	10067a42 <_printf_i+0x8e>
10067a5e:	b236      	sxth	r6, r6
10067a60:	e7ef      	b.n	10067a42 <_printf_i+0x8e>
10067a62:	6808      	ldr	r0, [r1, #0]
10067a64:	6819      	ldr	r1, [r3, #0]
10067a66:	c940      	ldmia	r1!, {r6}
10067a68:	0605      	lsls	r5, r0, #24
10067a6a:	d402      	bmi.n	10067a72 <_printf_i+0xbe>
10067a6c:	0640      	lsls	r0, r0, #25
10067a6e:	d500      	bpl.n	10067a72 <_printf_i+0xbe>
10067a70:	b2b6      	uxth	r6, r6
10067a72:	6019      	str	r1, [r3, #0]
10067a74:	4b54      	ldr	r3, [pc, #336]	@ (10067bc8 <_printf_i+0x214>)
10067a76:	270a      	movs	r7, #10
10067a78:	9304      	str	r3, [sp, #16]
10067a7a:	2a6f      	cmp	r2, #111	@ 0x6f
10067a7c:	d100      	bne.n	10067a80 <_printf_i+0xcc>
10067a7e:	3f02      	subs	r7, #2
10067a80:	0023      	movs	r3, r4
10067a82:	2200      	movs	r2, #0
10067a84:	3343      	adds	r3, #67	@ 0x43
10067a86:	701a      	strb	r2, [r3, #0]
10067a88:	6863      	ldr	r3, [r4, #4]
10067a8a:	60a3      	str	r3, [r4, #8]
10067a8c:	2b00      	cmp	r3, #0
10067a8e:	db03      	blt.n	10067a98 <_printf_i+0xe4>
10067a90:	2104      	movs	r1, #4
10067a92:	6822      	ldr	r2, [r4, #0]
10067a94:	438a      	bics	r2, r1
10067a96:	6022      	str	r2, [r4, #0]
10067a98:	2e00      	cmp	r6, #0
10067a9a:	d102      	bne.n	10067aa2 <_printf_i+0xee>
10067a9c:	9d03      	ldr	r5, [sp, #12]
10067a9e:	2b00      	cmp	r3, #0
10067aa0:	d00c      	beq.n	10067abc <_printf_i+0x108>
10067aa2:	9d03      	ldr	r5, [sp, #12]
10067aa4:	0030      	movs	r0, r6
10067aa6:	0039      	movs	r1, r7
10067aa8:	f7d9 fc54 	bl	10041354 <__aeabi_uidivmod>
10067aac:	9b04      	ldr	r3, [sp, #16]
10067aae:	3d01      	subs	r5, #1
10067ab0:	5c5b      	ldrb	r3, [r3, r1]
10067ab2:	702b      	strb	r3, [r5, #0]
10067ab4:	0033      	movs	r3, r6
10067ab6:	0006      	movs	r6, r0
10067ab8:	429f      	cmp	r7, r3
10067aba:	d9f3      	bls.n	10067aa4 <_printf_i+0xf0>
10067abc:	2f08      	cmp	r7, #8
10067abe:	d109      	bne.n	10067ad4 <_printf_i+0x120>
10067ac0:	6823      	ldr	r3, [r4, #0]
10067ac2:	07db      	lsls	r3, r3, #31
10067ac4:	d506      	bpl.n	10067ad4 <_printf_i+0x120>
10067ac6:	6862      	ldr	r2, [r4, #4]
10067ac8:	6923      	ldr	r3, [r4, #16]
10067aca:	429a      	cmp	r2, r3
10067acc:	dc02      	bgt.n	10067ad4 <_printf_i+0x120>
10067ace:	2330      	movs	r3, #48	@ 0x30
10067ad0:	3d01      	subs	r5, #1
10067ad2:	702b      	strb	r3, [r5, #0]
10067ad4:	9b03      	ldr	r3, [sp, #12]
10067ad6:	1b5b      	subs	r3, r3, r5
10067ad8:	6123      	str	r3, [r4, #16]
10067ada:	9b07      	ldr	r3, [sp, #28]
10067adc:	0021      	movs	r1, r4
10067ade:	9300      	str	r3, [sp, #0]
10067ae0:	9805      	ldr	r0, [sp, #20]
10067ae2:	9b06      	ldr	r3, [sp, #24]
10067ae4:	aa09      	add	r2, sp, #36	@ 0x24
10067ae6:	f7ff fef5 	bl	100678d4 <_printf_common>
10067aea:	3001      	adds	r0, #1
10067aec:	d148      	bne.n	10067b80 <_printf_i+0x1cc>
10067aee:	2001      	movs	r0, #1
10067af0:	4240      	negs	r0, r0
10067af2:	b00b      	add	sp, #44	@ 0x2c
10067af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10067af6:	2220      	movs	r2, #32
10067af8:	6809      	ldr	r1, [r1, #0]
10067afa:	430a      	orrs	r2, r1
10067afc:	6022      	str	r2, [r4, #0]
10067afe:	2278      	movs	r2, #120	@ 0x78
10067b00:	4932      	ldr	r1, [pc, #200]	@ (10067bcc <_printf_i+0x218>)
10067b02:	9104      	str	r1, [sp, #16]
10067b04:	0021      	movs	r1, r4
10067b06:	3145      	adds	r1, #69	@ 0x45
10067b08:	700a      	strb	r2, [r1, #0]
10067b0a:	6819      	ldr	r1, [r3, #0]
10067b0c:	6822      	ldr	r2, [r4, #0]
10067b0e:	c940      	ldmia	r1!, {r6}
10067b10:	0610      	lsls	r0, r2, #24
10067b12:	d402      	bmi.n	10067b1a <_printf_i+0x166>
10067b14:	0650      	lsls	r0, r2, #25
10067b16:	d500      	bpl.n	10067b1a <_printf_i+0x166>
10067b18:	b2b6      	uxth	r6, r6
10067b1a:	6019      	str	r1, [r3, #0]
10067b1c:	07d3      	lsls	r3, r2, #31
10067b1e:	d502      	bpl.n	10067b26 <_printf_i+0x172>
10067b20:	2320      	movs	r3, #32
10067b22:	4313      	orrs	r3, r2
10067b24:	6023      	str	r3, [r4, #0]
10067b26:	2e00      	cmp	r6, #0
10067b28:	d001      	beq.n	10067b2e <_printf_i+0x17a>
10067b2a:	2710      	movs	r7, #16
10067b2c:	e7a8      	b.n	10067a80 <_printf_i+0xcc>
10067b2e:	2220      	movs	r2, #32
10067b30:	6823      	ldr	r3, [r4, #0]
10067b32:	4393      	bics	r3, r2
10067b34:	6023      	str	r3, [r4, #0]
10067b36:	e7f8      	b.n	10067b2a <_printf_i+0x176>
10067b38:	681a      	ldr	r2, [r3, #0]
10067b3a:	680d      	ldr	r5, [r1, #0]
10067b3c:	1d10      	adds	r0, r2, #4
10067b3e:	6949      	ldr	r1, [r1, #20]
10067b40:	6018      	str	r0, [r3, #0]
10067b42:	6813      	ldr	r3, [r2, #0]
10067b44:	062e      	lsls	r6, r5, #24
10067b46:	d501      	bpl.n	10067b4c <_printf_i+0x198>
10067b48:	6019      	str	r1, [r3, #0]
10067b4a:	e002      	b.n	10067b52 <_printf_i+0x19e>
10067b4c:	066d      	lsls	r5, r5, #25
10067b4e:	d5fb      	bpl.n	10067b48 <_printf_i+0x194>
10067b50:	8019      	strh	r1, [r3, #0]
10067b52:	2300      	movs	r3, #0
10067b54:	9d03      	ldr	r5, [sp, #12]
10067b56:	6123      	str	r3, [r4, #16]
10067b58:	e7bf      	b.n	10067ada <_printf_i+0x126>
10067b5a:	681a      	ldr	r2, [r3, #0]
10067b5c:	1d11      	adds	r1, r2, #4
10067b5e:	6019      	str	r1, [r3, #0]
10067b60:	6815      	ldr	r5, [r2, #0]
10067b62:	2100      	movs	r1, #0
10067b64:	0028      	movs	r0, r5
10067b66:	6862      	ldr	r2, [r4, #4]
10067b68:	f000 f9c3 	bl	10067ef2 <memchr>
10067b6c:	2800      	cmp	r0, #0
10067b6e:	d001      	beq.n	10067b74 <_printf_i+0x1c0>
10067b70:	1b40      	subs	r0, r0, r5
10067b72:	6060      	str	r0, [r4, #4]
10067b74:	6863      	ldr	r3, [r4, #4]
10067b76:	6123      	str	r3, [r4, #16]
10067b78:	2300      	movs	r3, #0
10067b7a:	9a03      	ldr	r2, [sp, #12]
10067b7c:	7013      	strb	r3, [r2, #0]
10067b7e:	e7ac      	b.n	10067ada <_printf_i+0x126>
10067b80:	002a      	movs	r2, r5
10067b82:	6923      	ldr	r3, [r4, #16]
10067b84:	9906      	ldr	r1, [sp, #24]
10067b86:	9805      	ldr	r0, [sp, #20]
10067b88:	9d07      	ldr	r5, [sp, #28]
10067b8a:	47a8      	blx	r5
10067b8c:	3001      	adds	r0, #1
10067b8e:	d0ae      	beq.n	10067aee <_printf_i+0x13a>
10067b90:	6823      	ldr	r3, [r4, #0]
10067b92:	079b      	lsls	r3, r3, #30
10067b94:	d415      	bmi.n	10067bc2 <_printf_i+0x20e>
10067b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10067b98:	68e0      	ldr	r0, [r4, #12]
10067b9a:	4298      	cmp	r0, r3
10067b9c:	daa9      	bge.n	10067af2 <_printf_i+0x13e>
10067b9e:	0018      	movs	r0, r3
10067ba0:	e7a7      	b.n	10067af2 <_printf_i+0x13e>
10067ba2:	0022      	movs	r2, r4
10067ba4:	2301      	movs	r3, #1
10067ba6:	9906      	ldr	r1, [sp, #24]
10067ba8:	9805      	ldr	r0, [sp, #20]
10067baa:	9e07      	ldr	r6, [sp, #28]
10067bac:	3219      	adds	r2, #25
10067bae:	47b0      	blx	r6
10067bb0:	3001      	adds	r0, #1
10067bb2:	d09c      	beq.n	10067aee <_printf_i+0x13a>
10067bb4:	3501      	adds	r5, #1
10067bb6:	68e3      	ldr	r3, [r4, #12]
10067bb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10067bba:	1a9b      	subs	r3, r3, r2
10067bbc:	42ab      	cmp	r3, r5
10067bbe:	dcf0      	bgt.n	10067ba2 <_printf_i+0x1ee>
10067bc0:	e7e9      	b.n	10067b96 <_printf_i+0x1e2>
10067bc2:	2500      	movs	r5, #0
10067bc4:	e7f7      	b.n	10067bb6 <_printf_i+0x202>
10067bc6:	46c0      	nop			@ (mov r8, r8)
10067bc8:	1006a1b1 	.word	0x1006a1b1
10067bcc:	1006a1c2 	.word	0x1006a1c2

10067bd0 <__sflush_r>:
10067bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10067bd2:	220c      	movs	r2, #12
10067bd4:	5e8b      	ldrsh	r3, [r1, r2]
10067bd6:	0005      	movs	r5, r0
10067bd8:	000c      	movs	r4, r1
10067bda:	071a      	lsls	r2, r3, #28
10067bdc:	d456      	bmi.n	10067c8c <__sflush_r+0xbc>
10067bde:	684a      	ldr	r2, [r1, #4]
10067be0:	2a00      	cmp	r2, #0
10067be2:	dc02      	bgt.n	10067bea <__sflush_r+0x1a>
10067be4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
10067be6:	2a00      	cmp	r2, #0
10067be8:	dd4e      	ble.n	10067c88 <__sflush_r+0xb8>
10067bea:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
10067bec:	2f00      	cmp	r7, #0
10067bee:	d04b      	beq.n	10067c88 <__sflush_r+0xb8>
10067bf0:	2200      	movs	r2, #0
10067bf2:	2080      	movs	r0, #128	@ 0x80
10067bf4:	682e      	ldr	r6, [r5, #0]
10067bf6:	602a      	str	r2, [r5, #0]
10067bf8:	001a      	movs	r2, r3
10067bfa:	0140      	lsls	r0, r0, #5
10067bfc:	6a21      	ldr	r1, [r4, #32]
10067bfe:	4002      	ands	r2, r0
10067c00:	4203      	tst	r3, r0
10067c02:	d033      	beq.n	10067c6c <__sflush_r+0x9c>
10067c04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
10067c06:	89a3      	ldrh	r3, [r4, #12]
10067c08:	075b      	lsls	r3, r3, #29
10067c0a:	d506      	bpl.n	10067c1a <__sflush_r+0x4a>
10067c0c:	6863      	ldr	r3, [r4, #4]
10067c0e:	1ad2      	subs	r2, r2, r3
10067c10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
10067c12:	2b00      	cmp	r3, #0
10067c14:	d001      	beq.n	10067c1a <__sflush_r+0x4a>
10067c16:	6c23      	ldr	r3, [r4, #64]	@ 0x40
10067c18:	1ad2      	subs	r2, r2, r3
10067c1a:	2300      	movs	r3, #0
10067c1c:	0028      	movs	r0, r5
10067c1e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
10067c20:	6a21      	ldr	r1, [r4, #32]
10067c22:	47b8      	blx	r7
10067c24:	89a2      	ldrh	r2, [r4, #12]
10067c26:	1c43      	adds	r3, r0, #1
10067c28:	d106      	bne.n	10067c38 <__sflush_r+0x68>
10067c2a:	6829      	ldr	r1, [r5, #0]
10067c2c:	291d      	cmp	r1, #29
10067c2e:	d846      	bhi.n	10067cbe <__sflush_r+0xee>
10067c30:	4b29      	ldr	r3, [pc, #164]	@ (10067cd8 <__sflush_r+0x108>)
10067c32:	410b      	asrs	r3, r1
10067c34:	07db      	lsls	r3, r3, #31
10067c36:	d442      	bmi.n	10067cbe <__sflush_r+0xee>
10067c38:	2300      	movs	r3, #0
10067c3a:	6063      	str	r3, [r4, #4]
10067c3c:	6923      	ldr	r3, [r4, #16]
10067c3e:	6023      	str	r3, [r4, #0]
10067c40:	04d2      	lsls	r2, r2, #19
10067c42:	d505      	bpl.n	10067c50 <__sflush_r+0x80>
10067c44:	1c43      	adds	r3, r0, #1
10067c46:	d102      	bne.n	10067c4e <__sflush_r+0x7e>
10067c48:	682b      	ldr	r3, [r5, #0]
10067c4a:	2b00      	cmp	r3, #0
10067c4c:	d100      	bne.n	10067c50 <__sflush_r+0x80>
10067c4e:	6560      	str	r0, [r4, #84]	@ 0x54
10067c50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
10067c52:	602e      	str	r6, [r5, #0]
10067c54:	2900      	cmp	r1, #0
10067c56:	d017      	beq.n	10067c88 <__sflush_r+0xb8>
10067c58:	0023      	movs	r3, r4
10067c5a:	3344      	adds	r3, #68	@ 0x44
10067c5c:	4299      	cmp	r1, r3
10067c5e:	d002      	beq.n	10067c66 <__sflush_r+0x96>
10067c60:	0028      	movs	r0, r5
10067c62:	f7ff fbed 	bl	10067440 <_free_r>
10067c66:	2300      	movs	r3, #0
10067c68:	6363      	str	r3, [r4, #52]	@ 0x34
10067c6a:	e00d      	b.n	10067c88 <__sflush_r+0xb8>
10067c6c:	2301      	movs	r3, #1
10067c6e:	0028      	movs	r0, r5
10067c70:	47b8      	blx	r7
10067c72:	0002      	movs	r2, r0
10067c74:	1c43      	adds	r3, r0, #1
10067c76:	d1c6      	bne.n	10067c06 <__sflush_r+0x36>
10067c78:	682b      	ldr	r3, [r5, #0]
10067c7a:	2b00      	cmp	r3, #0
10067c7c:	d0c3      	beq.n	10067c06 <__sflush_r+0x36>
10067c7e:	2b1d      	cmp	r3, #29
10067c80:	d001      	beq.n	10067c86 <__sflush_r+0xb6>
10067c82:	2b16      	cmp	r3, #22
10067c84:	d11a      	bne.n	10067cbc <__sflush_r+0xec>
10067c86:	602e      	str	r6, [r5, #0]
10067c88:	2000      	movs	r0, #0
10067c8a:	e01e      	b.n	10067cca <__sflush_r+0xfa>
10067c8c:	690e      	ldr	r6, [r1, #16]
10067c8e:	2e00      	cmp	r6, #0
10067c90:	d0fa      	beq.n	10067c88 <__sflush_r+0xb8>
10067c92:	680f      	ldr	r7, [r1, #0]
10067c94:	600e      	str	r6, [r1, #0]
10067c96:	1bba      	subs	r2, r7, r6
10067c98:	9201      	str	r2, [sp, #4]
10067c9a:	2200      	movs	r2, #0
10067c9c:	079b      	lsls	r3, r3, #30
10067c9e:	d100      	bne.n	10067ca2 <__sflush_r+0xd2>
10067ca0:	694a      	ldr	r2, [r1, #20]
10067ca2:	60a2      	str	r2, [r4, #8]
10067ca4:	9b01      	ldr	r3, [sp, #4]
10067ca6:	2b00      	cmp	r3, #0
10067ca8:	ddee      	ble.n	10067c88 <__sflush_r+0xb8>
10067caa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
10067cac:	0032      	movs	r2, r6
10067cae:	001f      	movs	r7, r3
10067cb0:	0028      	movs	r0, r5
10067cb2:	9b01      	ldr	r3, [sp, #4]
10067cb4:	6a21      	ldr	r1, [r4, #32]
10067cb6:	47b8      	blx	r7
10067cb8:	2800      	cmp	r0, #0
10067cba:	dc07      	bgt.n	10067ccc <__sflush_r+0xfc>
10067cbc:	89a2      	ldrh	r2, [r4, #12]
10067cbe:	2340      	movs	r3, #64	@ 0x40
10067cc0:	2001      	movs	r0, #1
10067cc2:	4313      	orrs	r3, r2
10067cc4:	b21b      	sxth	r3, r3
10067cc6:	81a3      	strh	r3, [r4, #12]
10067cc8:	4240      	negs	r0, r0
10067cca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10067ccc:	9b01      	ldr	r3, [sp, #4]
10067cce:	1836      	adds	r6, r6, r0
10067cd0:	1a1b      	subs	r3, r3, r0
10067cd2:	9301      	str	r3, [sp, #4]
10067cd4:	e7e6      	b.n	10067ca4 <__sflush_r+0xd4>
10067cd6:	46c0      	nop			@ (mov r8, r8)
10067cd8:	dfbffffe 	.word	0xdfbffffe

10067cdc <_fflush_r>:
10067cdc:	690b      	ldr	r3, [r1, #16]
10067cde:	b570      	push	{r4, r5, r6, lr}
10067ce0:	0005      	movs	r5, r0
10067ce2:	000c      	movs	r4, r1
10067ce4:	2b00      	cmp	r3, #0
10067ce6:	d102      	bne.n	10067cee <_fflush_r+0x12>
10067ce8:	2500      	movs	r5, #0
10067cea:	0028      	movs	r0, r5
10067cec:	bd70      	pop	{r4, r5, r6, pc}
10067cee:	2800      	cmp	r0, #0
10067cf0:	d004      	beq.n	10067cfc <_fflush_r+0x20>
10067cf2:	6a03      	ldr	r3, [r0, #32]
10067cf4:	2b00      	cmp	r3, #0
10067cf6:	d101      	bne.n	10067cfc <_fflush_r+0x20>
10067cf8:	f7ff f8d2 	bl	10066ea0 <__sinit>
10067cfc:	220c      	movs	r2, #12
10067cfe:	5ea3      	ldrsh	r3, [r4, r2]
10067d00:	2b00      	cmp	r3, #0
10067d02:	d0f1      	beq.n	10067ce8 <_fflush_r+0xc>
10067d04:	6e62      	ldr	r2, [r4, #100]	@ 0x64
10067d06:	07d2      	lsls	r2, r2, #31
10067d08:	d404      	bmi.n	10067d14 <_fflush_r+0x38>
10067d0a:	059b      	lsls	r3, r3, #22
10067d0c:	d402      	bmi.n	10067d14 <_fflush_r+0x38>
10067d0e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10067d10:	f7ff fb81 	bl	10067416 <__retarget_lock_acquire_recursive>
10067d14:	0028      	movs	r0, r5
10067d16:	0021      	movs	r1, r4
10067d18:	f7ff ff5a 	bl	10067bd0 <__sflush_r>
10067d1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10067d1e:	0005      	movs	r5, r0
10067d20:	07db      	lsls	r3, r3, #31
10067d22:	d4e2      	bmi.n	10067cea <_fflush_r+0xe>
10067d24:	89a3      	ldrh	r3, [r4, #12]
10067d26:	059b      	lsls	r3, r3, #22
10067d28:	d4df      	bmi.n	10067cea <_fflush_r+0xe>
10067d2a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10067d2c:	f7ff fb74 	bl	10067418 <__retarget_lock_release_recursive>
10067d30:	e7db      	b.n	10067cea <_fflush_r+0xe>
	...

10067d34 <__swhatbuf_r>:
10067d34:	b570      	push	{r4, r5, r6, lr}
10067d36:	000e      	movs	r6, r1
10067d38:	001d      	movs	r5, r3
10067d3a:	230e      	movs	r3, #14
10067d3c:	5ec9      	ldrsh	r1, [r1, r3]
10067d3e:	0014      	movs	r4, r2
10067d40:	b096      	sub	sp, #88	@ 0x58
10067d42:	2900      	cmp	r1, #0
10067d44:	da0c      	bge.n	10067d60 <__swhatbuf_r+0x2c>
10067d46:	89b2      	ldrh	r2, [r6, #12]
10067d48:	2380      	movs	r3, #128	@ 0x80
10067d4a:	0011      	movs	r1, r2
10067d4c:	4019      	ands	r1, r3
10067d4e:	421a      	tst	r2, r3
10067d50:	d114      	bne.n	10067d7c <__swhatbuf_r+0x48>
10067d52:	2380      	movs	r3, #128	@ 0x80
10067d54:	00db      	lsls	r3, r3, #3
10067d56:	2000      	movs	r0, #0
10067d58:	6029      	str	r1, [r5, #0]
10067d5a:	6023      	str	r3, [r4, #0]
10067d5c:	b016      	add	sp, #88	@ 0x58
10067d5e:	bd70      	pop	{r4, r5, r6, pc}
10067d60:	466a      	mov	r2, sp
10067d62:	f000 f889 	bl	10067e78 <_fstat_r>
10067d66:	2800      	cmp	r0, #0
10067d68:	dbed      	blt.n	10067d46 <__swhatbuf_r+0x12>
10067d6a:	23f0      	movs	r3, #240	@ 0xf0
10067d6c:	9901      	ldr	r1, [sp, #4]
10067d6e:	021b      	lsls	r3, r3, #8
10067d70:	4019      	ands	r1, r3
10067d72:	4b04      	ldr	r3, [pc, #16]	@ (10067d84 <__swhatbuf_r+0x50>)
10067d74:	18c9      	adds	r1, r1, r3
10067d76:	424b      	negs	r3, r1
10067d78:	4159      	adcs	r1, r3
10067d7a:	e7ea      	b.n	10067d52 <__swhatbuf_r+0x1e>
10067d7c:	2100      	movs	r1, #0
10067d7e:	2340      	movs	r3, #64	@ 0x40
10067d80:	e7e9      	b.n	10067d56 <__swhatbuf_r+0x22>
10067d82:	46c0      	nop			@ (mov r8, r8)
10067d84:	ffffe000 	.word	0xffffe000

10067d88 <__smakebuf_r>:
10067d88:	b5f0      	push	{r4, r5, r6, r7, lr}
10067d8a:	2602      	movs	r6, #2
10067d8c:	898b      	ldrh	r3, [r1, #12]
10067d8e:	0005      	movs	r5, r0
10067d90:	000c      	movs	r4, r1
10067d92:	b085      	sub	sp, #20
10067d94:	4233      	tst	r3, r6
10067d96:	d007      	beq.n	10067da8 <__smakebuf_r+0x20>
10067d98:	0023      	movs	r3, r4
10067d9a:	3347      	adds	r3, #71	@ 0x47
10067d9c:	6023      	str	r3, [r4, #0]
10067d9e:	6123      	str	r3, [r4, #16]
10067da0:	2301      	movs	r3, #1
10067da2:	6163      	str	r3, [r4, #20]
10067da4:	b005      	add	sp, #20
10067da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10067da8:	ab03      	add	r3, sp, #12
10067daa:	aa02      	add	r2, sp, #8
10067dac:	f7ff ffc2 	bl	10067d34 <__swhatbuf_r>
10067db0:	9f02      	ldr	r7, [sp, #8]
10067db2:	9001      	str	r0, [sp, #4]
10067db4:	0039      	movs	r1, r7
10067db6:	0028      	movs	r0, r5
10067db8:	f7ff fbb8 	bl	1006752c <_malloc_r>
10067dbc:	2800      	cmp	r0, #0
10067dbe:	d108      	bne.n	10067dd2 <__smakebuf_r+0x4a>
10067dc0:	220c      	movs	r2, #12
10067dc2:	5ea3      	ldrsh	r3, [r4, r2]
10067dc4:	059a      	lsls	r2, r3, #22
10067dc6:	d4ed      	bmi.n	10067da4 <__smakebuf_r+0x1c>
10067dc8:	2203      	movs	r2, #3
10067dca:	4393      	bics	r3, r2
10067dcc:	431e      	orrs	r6, r3
10067dce:	81a6      	strh	r6, [r4, #12]
10067dd0:	e7e2      	b.n	10067d98 <__smakebuf_r+0x10>
10067dd2:	2380      	movs	r3, #128	@ 0x80
10067dd4:	89a2      	ldrh	r2, [r4, #12]
10067dd6:	6020      	str	r0, [r4, #0]
10067dd8:	4313      	orrs	r3, r2
10067dda:	81a3      	strh	r3, [r4, #12]
10067ddc:	9b03      	ldr	r3, [sp, #12]
10067dde:	6120      	str	r0, [r4, #16]
10067de0:	6167      	str	r7, [r4, #20]
10067de2:	2b00      	cmp	r3, #0
10067de4:	d00c      	beq.n	10067e00 <__smakebuf_r+0x78>
10067de6:	0028      	movs	r0, r5
10067de8:	230e      	movs	r3, #14
10067dea:	5ee1      	ldrsh	r1, [r4, r3]
10067dec:	f000 f856 	bl	10067e9c <_isatty_r>
10067df0:	2800      	cmp	r0, #0
10067df2:	d005      	beq.n	10067e00 <__smakebuf_r+0x78>
10067df4:	2303      	movs	r3, #3
10067df6:	89a2      	ldrh	r2, [r4, #12]
10067df8:	439a      	bics	r2, r3
10067dfa:	3b02      	subs	r3, #2
10067dfc:	4313      	orrs	r3, r2
10067dfe:	81a3      	strh	r3, [r4, #12]
10067e00:	89a3      	ldrh	r3, [r4, #12]
10067e02:	9a01      	ldr	r2, [sp, #4]
10067e04:	4313      	orrs	r3, r2
10067e06:	81a3      	strh	r3, [r4, #12]
10067e08:	e7cc      	b.n	10067da4 <__smakebuf_r+0x1c>

10067e0a <_putc_r>:
10067e0a:	b570      	push	{r4, r5, r6, lr}
10067e0c:	0006      	movs	r6, r0
10067e0e:	000d      	movs	r5, r1
10067e10:	0014      	movs	r4, r2
10067e12:	2800      	cmp	r0, #0
10067e14:	d004      	beq.n	10067e20 <_putc_r+0x16>
10067e16:	6a03      	ldr	r3, [r0, #32]
10067e18:	2b00      	cmp	r3, #0
10067e1a:	d101      	bne.n	10067e20 <_putc_r+0x16>
10067e1c:	f7ff f840 	bl	10066ea0 <__sinit>
10067e20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10067e22:	07db      	lsls	r3, r3, #31
10067e24:	d405      	bmi.n	10067e32 <_putc_r+0x28>
10067e26:	89a3      	ldrh	r3, [r4, #12]
10067e28:	059b      	lsls	r3, r3, #22
10067e2a:	d402      	bmi.n	10067e32 <_putc_r+0x28>
10067e2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10067e2e:	f7ff faf2 	bl	10067416 <__retarget_lock_acquire_recursive>
10067e32:	68a3      	ldr	r3, [r4, #8]
10067e34:	3b01      	subs	r3, #1
10067e36:	60a3      	str	r3, [r4, #8]
10067e38:	2b00      	cmp	r3, #0
10067e3a:	da05      	bge.n	10067e48 <_putc_r+0x3e>
10067e3c:	69a2      	ldr	r2, [r4, #24]
10067e3e:	4293      	cmp	r3, r2
10067e40:	db12      	blt.n	10067e68 <_putc_r+0x5e>
10067e42:	b2eb      	uxtb	r3, r5
10067e44:	2b0a      	cmp	r3, #10
10067e46:	d00f      	beq.n	10067e68 <_putc_r+0x5e>
10067e48:	6823      	ldr	r3, [r4, #0]
10067e4a:	1c5a      	adds	r2, r3, #1
10067e4c:	6022      	str	r2, [r4, #0]
10067e4e:	701d      	strb	r5, [r3, #0]
10067e50:	b2ed      	uxtb	r5, r5
10067e52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10067e54:	07db      	lsls	r3, r3, #31
10067e56:	d405      	bmi.n	10067e64 <_putc_r+0x5a>
10067e58:	89a3      	ldrh	r3, [r4, #12]
10067e5a:	059b      	lsls	r3, r3, #22
10067e5c:	d402      	bmi.n	10067e64 <_putc_r+0x5a>
10067e5e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10067e60:	f7ff fada 	bl	10067418 <__retarget_lock_release_recursive>
10067e64:	0028      	movs	r0, r5
10067e66:	bd70      	pop	{r4, r5, r6, pc}
10067e68:	0029      	movs	r1, r5
10067e6a:	0022      	movs	r2, r4
10067e6c:	0030      	movs	r0, r6
10067e6e:	f7ff f9c7 	bl	10067200 <__swbuf_r>
10067e72:	0005      	movs	r5, r0
10067e74:	e7ed      	b.n	10067e52 <_putc_r+0x48>
	...

10067e78 <_fstat_r>:
10067e78:	2300      	movs	r3, #0
10067e7a:	b570      	push	{r4, r5, r6, lr}
10067e7c:	4d06      	ldr	r5, [pc, #24]	@ (10067e98 <_fstat_r+0x20>)
10067e7e:	0004      	movs	r4, r0
10067e80:	0008      	movs	r0, r1
10067e82:	0011      	movs	r1, r2
10067e84:	602b      	str	r3, [r5, #0]
10067e86:	f7db fbc6 	bl	10043616 <_fstat>
10067e8a:	1c43      	adds	r3, r0, #1
10067e8c:	d103      	bne.n	10067e96 <_fstat_r+0x1e>
10067e8e:	682b      	ldr	r3, [r5, #0]
10067e90:	2b00      	cmp	r3, #0
10067e92:	d000      	beq.n	10067e96 <_fstat_r+0x1e>
10067e94:	6023      	str	r3, [r4, #0]
10067e96:	bd70      	pop	{r4, r5, r6, pc}
10067e98:	20001288 	.word	0x20001288

10067e9c <_isatty_r>:
10067e9c:	2300      	movs	r3, #0
10067e9e:	b570      	push	{r4, r5, r6, lr}
10067ea0:	4d06      	ldr	r5, [pc, #24]	@ (10067ebc <_isatty_r+0x20>)
10067ea2:	0004      	movs	r4, r0
10067ea4:	0008      	movs	r0, r1
10067ea6:	602b      	str	r3, [r5, #0]
10067ea8:	f7db fbc3 	bl	10043632 <_isatty>
10067eac:	1c43      	adds	r3, r0, #1
10067eae:	d103      	bne.n	10067eb8 <_isatty_r+0x1c>
10067eb0:	682b      	ldr	r3, [r5, #0]
10067eb2:	2b00      	cmp	r3, #0
10067eb4:	d000      	beq.n	10067eb8 <_isatty_r+0x1c>
10067eb6:	6023      	str	r3, [r4, #0]
10067eb8:	bd70      	pop	{r4, r5, r6, pc}
10067eba:	46c0      	nop			@ (mov r8, r8)
10067ebc:	20001288 	.word	0x20001288

10067ec0 <_sbrk_r>:
10067ec0:	2300      	movs	r3, #0
10067ec2:	b570      	push	{r4, r5, r6, lr}
10067ec4:	4d06      	ldr	r5, [pc, #24]	@ (10067ee0 <_sbrk_r+0x20>)
10067ec6:	0004      	movs	r4, r0
10067ec8:	0008      	movs	r0, r1
10067eca:	602b      	str	r3, [r5, #0]
10067ecc:	f7db fbc6 	bl	1004365c <_sbrk>
10067ed0:	1c43      	adds	r3, r0, #1
10067ed2:	d103      	bne.n	10067edc <_sbrk_r+0x1c>
10067ed4:	682b      	ldr	r3, [r5, #0]
10067ed6:	2b00      	cmp	r3, #0
10067ed8:	d000      	beq.n	10067edc <_sbrk_r+0x1c>
10067eda:	6023      	str	r3, [r4, #0]
10067edc:	bd70      	pop	{r4, r5, r6, pc}
10067ede:	46c0      	nop			@ (mov r8, r8)
10067ee0:	20001288 	.word	0x20001288

10067ee4 <__aeabi_memset>:
10067ee4:	000b      	movs	r3, r1
10067ee6:	b510      	push	{r4, lr}
10067ee8:	0011      	movs	r1, r2
10067eea:	001a      	movs	r2, r3
10067eec:	f7ff fa36 	bl	1006735c <memset>
10067ef0:	bd10      	pop	{r4, pc}

10067ef2 <memchr>:
10067ef2:	b2c9      	uxtb	r1, r1
10067ef4:	1882      	adds	r2, r0, r2
10067ef6:	4290      	cmp	r0, r2
10067ef8:	d101      	bne.n	10067efe <memchr+0xc>
10067efa:	2000      	movs	r0, #0
10067efc:	4770      	bx	lr
10067efe:	7803      	ldrb	r3, [r0, #0]
10067f00:	428b      	cmp	r3, r1
10067f02:	d0fb      	beq.n	10067efc <memchr+0xa>
10067f04:	3001      	adds	r0, #1
10067f06:	e7f6      	b.n	10067ef6 <memchr+0x4>

10067f08 <AES_CMAC_Encrypt_Append>:
10067f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10067f0a:	2500      	movs	r5, #0
10067f0c:	b08a      	sub	sp, #40	@ 0x28
10067f0e:	460e      	mov	r6, r1
10067f10:	4604      	mov	r4, r0
10067f12:	2800      	cmp	r0, #0
10067f14:	d004      	beq.n	10067f20 <AES_CMAC_Encrypt_Append+0x18>
10067f16:	2e00      	cmp	r6, #0
10067f18:	d106      	bne.n	10067f28 <AES_CMAC_Encrypt_Append+0x20>
10067f1a:	980c      	ldr	r0, [sp, #48]	@ 0x30
10067f1c:	2800      	cmp	r0, #0
10067f1e:	dd03      	ble.n	10067f28 <AES_CMAC_Encrypt_Append+0x20>
10067f20:	2061      	movs	r0, #97	@ 0x61
10067f22:	0140      	lsls	r0, r0, #5
10067f24:	b00d      	add	sp, #52	@ 0x34
10067f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
10067f28:	980c      	ldr	r0, [sp, #48]	@ 0x30
10067f2a:	2800      	cmp	r0, #0
10067f2c:	db04      	blt.n	10067f38 <AES_CMAC_Encrypt_Append+0x30>
10067f2e:	2810      	cmp	r0, #16
10067f30:	da04      	bge.n	10067f3c <AES_CMAC_Encrypt_Append+0x34>
10067f32:	7920      	ldrb	r0, [r4, #4]
10067f34:	0680      	lsls	r0, r0, #26
10067f36:	d401      	bmi.n	10067f3c <AES_CMAC_Encrypt_Append+0x34>
10067f38:	488c      	ldr	r0, [pc, #560]	@ (1006816c <AES_CMAC_Encrypt_Append+0x264>)
10067f3a:	e7f3      	b.n	10067f24 <AES_CMAC_Encrypt_Append+0x1c>
10067f3c:	7920      	ldrb	r0, [r4, #4]
10067f3e:	0741      	lsls	r1, r0, #29
10067f40:	d401      	bmi.n	10067f46 <AES_CMAC_Encrypt_Append+0x3e>
10067f42:	0781      	lsls	r1, r0, #30
10067f44:	d502      	bpl.n	10067f4c <AES_CMAC_Encrypt_Append+0x44>
10067f46:	4889      	ldr	r0, [pc, #548]	@ (1006816c <AES_CMAC_Encrypt_Append+0x264>)
10067f48:	1c40      	adds	r0, r0, #1
10067f4a:	e7eb      	b.n	10067f24 <AES_CMAC_Encrypt_Append+0x1c>
10067f4c:	2140      	movs	r1, #64	@ 0x40
10067f4e:	4308      	orrs	r0, r1
10067f50:	7120      	strb	r0, [r4, #4]
10067f52:	4620      	mov	r0, r4
10067f54:	3014      	adds	r0, #20
10067f56:	9008      	str	r0, [sp, #32]
10067f58:	e01c      	b.n	10067f94 <AES_CMAC_Encrypt_Append+0x8c>
10067f5a:	2000      	movs	r0, #0
10067f5c:	0081      	lsls	r1, r0, #2
10067f5e:	194a      	adds	r2, r1, r5
10067f60:	1992      	adds	r2, r2, r6
10067f62:	7853      	ldrb	r3, [r2, #1]
10067f64:	7817      	ldrb	r7, [r2, #0]
10067f66:	021b      	lsls	r3, r3, #8
10067f68:	433b      	orrs	r3, r7
10067f6a:	7897      	ldrb	r7, [r2, #2]
10067f6c:	ba5b      	rev16	r3, r3
10067f6e:	041b      	lsls	r3, r3, #16
10067f70:	023f      	lsls	r7, r7, #8
10067f72:	78d2      	ldrb	r2, [r2, #3]
10067f74:	433b      	orrs	r3, r7
10067f76:	4313      	orrs	r3, r2
10067f78:	190a      	adds	r2, r1, r4
10067f7a:	6952      	ldr	r2, [r2, #20]
10067f7c:	1c40      	adds	r0, r0, #1
10067f7e:	4053      	eors	r3, r2
10067f80:	aa04      	add	r2, sp, #16
10067f82:	5053      	str	r3, [r2, r1]
10067f84:	2804      	cmp	r0, #4
10067f86:	dbe9      	blt.n	10067f5c <AES_CMAC_Encrypt_Append+0x54>
10067f88:	68a2      	ldr	r2, [r4, #8]
10067f8a:	a804      	add	r0, sp, #16
10067f8c:	9908      	ldr	r1, [sp, #32]
10067f8e:	f7df ff3b 	bl	10047e08 <AES_128_HW_enc>
10067f92:	9d00      	ldr	r5, [sp, #0]
10067f94:	990c      	ldr	r1, [sp, #48]	@ 0x30
10067f96:	4628      	mov	r0, r5
10067f98:	3010      	adds	r0, #16
10067f9a:	9000      	str	r0, [sp, #0]
10067f9c:	4288      	cmp	r0, r1
10067f9e:	dbdc      	blt.n	10067f5a <AES_CMAC_Encrypt_Append+0x52>
10067fa0:	7920      	ldrb	r0, [r4, #4]
10067fa2:	0680      	lsls	r0, r0, #26
10067fa4:	d41e      	bmi.n	10067fe4 <AES_CMAC_Encrypt_Append+0xdc>
10067fa6:	2900      	cmp	r1, #0
10067fa8:	dd1c      	ble.n	10067fe4 <AES_CMAC_Encrypt_Append+0xdc>
10067faa:	2000      	movs	r0, #0
10067fac:	0081      	lsls	r1, r0, #2
10067fae:	194a      	adds	r2, r1, r5
10067fb0:	1992      	adds	r2, r2, r6
10067fb2:	7853      	ldrb	r3, [r2, #1]
10067fb4:	7817      	ldrb	r7, [r2, #0]
10067fb6:	021b      	lsls	r3, r3, #8
10067fb8:	433b      	orrs	r3, r7
10067fba:	7897      	ldrb	r7, [r2, #2]
10067fbc:	ba5b      	rev16	r3, r3
10067fbe:	041b      	lsls	r3, r3, #16
10067fc0:	023f      	lsls	r7, r7, #8
10067fc2:	78d2      	ldrb	r2, [r2, #3]
10067fc4:	433b      	orrs	r3, r7
10067fc6:	4313      	orrs	r3, r2
10067fc8:	190a      	adds	r2, r1, r4
10067fca:	6952      	ldr	r2, [r2, #20]
10067fcc:	1c40      	adds	r0, r0, #1
10067fce:	4053      	eors	r3, r2
10067fd0:	aa04      	add	r2, sp, #16
10067fd2:	5053      	str	r3, [r2, r1]
10067fd4:	2804      	cmp	r0, #4
10067fd6:	dbe9      	blt.n	10067fac <AES_CMAC_Encrypt_Append+0xa4>
10067fd8:	68a2      	ldr	r2, [r4, #8]
10067fda:	a804      	add	r0, sp, #16
10067fdc:	9908      	ldr	r1, [sp, #32]
10067fde:	f7df ff13 	bl	10047e08 <AES_128_HW_enc>
10067fe2:	e0c0      	b.n	10068166 <AES_CMAC_Encrypt_Append+0x25e>
10067fe4:	2000      	movs	r0, #0
10067fe6:	9000      	str	r0, [sp, #0]
10067fe8:	9001      	str	r0, [sp, #4]
10067fea:	9002      	str	r0, [sp, #8]
10067fec:	9003      	str	r0, [sp, #12]
10067fee:	4669      	mov	r1, sp
10067ff0:	4608      	mov	r0, r1
10067ff2:	68a2      	ldr	r2, [r4, #8]
10067ff4:	f7df ff08 	bl	10047e08 <AES_128_HW_enc>
10067ff8:	9900      	ldr	r1, [sp, #0]
10067ffa:	2287      	movs	r2, #135	@ 0x87
10067ffc:	0fc8      	lsrs	r0, r1, #31
10067ffe:	4350      	muls	r0, r2
10068000:	9a01      	ldr	r2, [sp, #4]
10068002:	0049      	lsls	r1, r1, #1
10068004:	0fd2      	lsrs	r2, r2, #31
10068006:	4311      	orrs	r1, r2
10068008:	9100      	str	r1, [sp, #0]
1006800a:	9901      	ldr	r1, [sp, #4]
1006800c:	9a02      	ldr	r2, [sp, #8]
1006800e:	0049      	lsls	r1, r1, #1
10068010:	0fd2      	lsrs	r2, r2, #31
10068012:	4311      	orrs	r1, r2
10068014:	9101      	str	r1, [sp, #4]
10068016:	9902      	ldr	r1, [sp, #8]
10068018:	9a03      	ldr	r2, [sp, #12]
1006801a:	0049      	lsls	r1, r1, #1
1006801c:	0fd2      	lsrs	r2, r2, #31
1006801e:	4311      	orrs	r1, r2
10068020:	9102      	str	r1, [sp, #8]
10068022:	9903      	ldr	r1, [sp, #12]
10068024:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10068026:	0049      	lsls	r1, r1, #1
10068028:	4041      	eors	r1, r0
1006802a:	4628      	mov	r0, r5
1006802c:	3010      	adds	r0, #16
1006802e:	9103      	str	r1, [sp, #12]
10068030:	4290      	cmp	r0, r2
10068032:	d11a      	bne.n	1006806a <AES_CMAC_Encrypt_Append+0x162>
10068034:	2000      	movs	r0, #0
10068036:	0081      	lsls	r1, r0, #2
10068038:	194a      	adds	r2, r1, r5
1006803a:	1993      	adds	r3, r2, r6
1006803c:	785a      	ldrb	r2, [r3, #1]
1006803e:	781f      	ldrb	r7, [r3, #0]
10068040:	0212      	lsls	r2, r2, #8
10068042:	433a      	orrs	r2, r7
10068044:	789f      	ldrb	r7, [r3, #2]
10068046:	ba52      	rev16	r2, r2
10068048:	0412      	lsls	r2, r2, #16
1006804a:	023f      	lsls	r7, r7, #8
1006804c:	433a      	orrs	r2, r7
1006804e:	78db      	ldrb	r3, [r3, #3]
10068050:	466f      	mov	r7, sp
10068052:	431a      	orrs	r2, r3
10068054:	190b      	adds	r3, r1, r4
10068056:	695b      	ldr	r3, [r3, #20]
10068058:	587f      	ldr	r7, [r7, r1]
1006805a:	1c40      	adds	r0, r0, #1
1006805c:	407b      	eors	r3, r7
1006805e:	405a      	eors	r2, r3
10068060:	ab04      	add	r3, sp, #16
10068062:	505a      	str	r2, [r3, r1]
10068064:	2804      	cmp	r0, #4
10068066:	dbe6      	blt.n	10068036 <AES_CMAC_Encrypt_Append+0x12e>
10068068:	e074      	b.n	10068154 <AES_CMAC_Encrypt_Append+0x24c>
1006806a:	9a00      	ldr	r2, [sp, #0]
1006806c:	2387      	movs	r3, #135	@ 0x87
1006806e:	0fd0      	lsrs	r0, r2, #31
10068070:	4358      	muls	r0, r3
10068072:	9b01      	ldr	r3, [sp, #4]
10068074:	0052      	lsls	r2, r2, #1
10068076:	0fdb      	lsrs	r3, r3, #31
10068078:	431a      	orrs	r2, r3
1006807a:	9200      	str	r2, [sp, #0]
1006807c:	9a01      	ldr	r2, [sp, #4]
1006807e:	9b02      	ldr	r3, [sp, #8]
10068080:	0052      	lsls	r2, r2, #1
10068082:	0fdb      	lsrs	r3, r3, #31
10068084:	431a      	orrs	r2, r3
10068086:	9201      	str	r2, [sp, #4]
10068088:	9a02      	ldr	r2, [sp, #8]
1006808a:	0fcb      	lsrs	r3, r1, #31
1006808c:	0052      	lsls	r2, r2, #1
1006808e:	431a      	orrs	r2, r3
10068090:	9202      	str	r2, [sp, #8]
10068092:	004a      	lsls	r2, r1, #1
10068094:	4042      	eors	r2, r0
10068096:	9203      	str	r2, [sp, #12]
10068098:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1006809a:	2000      	movs	r0, #0
1006809c:	1b53      	subs	r3, r2, r5
1006809e:	17da      	asrs	r2, r3, #31
100680a0:	469c      	mov	ip, r3
100680a2:	0f92      	lsrs	r2, r2, #30
100680a4:	4462      	add	r2, ip
100680a6:	1092      	asrs	r2, r2, #2
100680a8:	4696      	mov	lr, r2
100680aa:	e016      	b.n	100680da <AES_CMAC_Encrypt_Append+0x1d2>
100680ac:	0081      	lsls	r1, r0, #2
100680ae:	194a      	adds	r2, r1, r5
100680b0:	1993      	adds	r3, r2, r6
100680b2:	785a      	ldrb	r2, [r3, #1]
100680b4:	781f      	ldrb	r7, [r3, #0]
100680b6:	0212      	lsls	r2, r2, #8
100680b8:	433a      	orrs	r2, r7
100680ba:	789f      	ldrb	r7, [r3, #2]
100680bc:	ba52      	rev16	r2, r2
100680be:	0412      	lsls	r2, r2, #16
100680c0:	023f      	lsls	r7, r7, #8
100680c2:	433a      	orrs	r2, r7
100680c4:	78db      	ldrb	r3, [r3, #3]
100680c6:	466f      	mov	r7, sp
100680c8:	431a      	orrs	r2, r3
100680ca:	190b      	adds	r3, r1, r4
100680cc:	695b      	ldr	r3, [r3, #20]
100680ce:	587f      	ldr	r7, [r7, r1]
100680d0:	407b      	eors	r3, r7
100680d2:	405a      	eors	r2, r3
100680d4:	ab04      	add	r3, sp, #16
100680d6:	505a      	str	r2, [r3, r1]
100680d8:	1c40      	adds	r0, r0, #1
100680da:	4586      	cmp	lr, r0
100680dc:	dce6      	bgt.n	100680ac <AES_CMAC_Encrypt_Append+0x1a4>
100680de:	0081      	lsls	r1, r0, #2
100680e0:	190a      	adds	r2, r1, r4
100680e2:	466b      	mov	r3, sp
100680e4:	6952      	ldr	r2, [r2, #20]
100680e6:	585b      	ldr	r3, [r3, r1]
100680e8:	4667      	mov	r7, ip
100680ea:	405a      	eors	r2, r3
100680ec:	ab04      	add	r3, sp, #16
100680ee:	505a      	str	r2, [r3, r1]
100680f0:	1a7f      	subs	r7, r7, r1
100680f2:	2200      	movs	r2, #0
100680f4:	194b      	adds	r3, r1, r5
100680f6:	46bc      	mov	ip, r7
100680f8:	469e      	mov	lr, r3
100680fa:	e00b      	b.n	10068114 <AES_CMAC_Encrypt_Append+0x20c>
100680fc:	4673      	mov	r3, lr
100680fe:	189b      	adds	r3, r3, r2
10068100:	5cf3      	ldrb	r3, [r6, r3]
10068102:	00d7      	lsls	r7, r2, #3
10068104:	2518      	movs	r5, #24
10068106:	1bed      	subs	r5, r5, r7
10068108:	40ab      	lsls	r3, r5
1006810a:	ad04      	add	r5, sp, #16
1006810c:	586f      	ldr	r7, [r5, r1]
1006810e:	407b      	eors	r3, r7
10068110:	506b      	str	r3, [r5, r1]
10068112:	1c52      	adds	r2, r2, #1
10068114:	4594      	cmp	ip, r2
10068116:	dcf1      	bgt.n	100680fc <AES_CMAC_Encrypt_Append+0x1f4>
10068118:	2a00      	cmp	r2, #0
1006811a:	d009      	beq.n	10068130 <AES_CMAC_Encrypt_Append+0x228>
1006811c:	00d6      	lsls	r6, r2, #3
1006811e:	2218      	movs	r2, #24
10068120:	ab04      	add	r3, sp, #16
10068122:	1b96      	subs	r6, r2, r6
10068124:	585d      	ldr	r5, [r3, r1]
10068126:	2280      	movs	r2, #128	@ 0x80
10068128:	40b2      	lsls	r2, r6
1006812a:	4055      	eors	r5, r2
1006812c:	505d      	str	r5, [r3, r1]
1006812e:	e005      	b.n	1006813c <AES_CMAC_Encrypt_Append+0x234>
10068130:	aa04      	add	r2, sp, #16
10068132:	5853      	ldr	r3, [r2, r1]
10068134:	2501      	movs	r5, #1
10068136:	07ed      	lsls	r5, r5, #31
10068138:	406b      	eors	r3, r5
1006813a:	5053      	str	r3, [r2, r1]
1006813c:	ab04      	add	r3, sp, #16
1006813e:	466a      	mov	r2, sp
10068140:	e005      	b.n	1006814e <AES_CMAC_Encrypt_Append+0x246>
10068142:	0081      	lsls	r1, r0, #2
10068144:	190d      	adds	r5, r1, r4
10068146:	696d      	ldr	r5, [r5, #20]
10068148:	5856      	ldr	r6, [r2, r1]
1006814a:	4075      	eors	r5, r6
1006814c:	505d      	str	r5, [r3, r1]
1006814e:	1c40      	adds	r0, r0, #1
10068150:	2804      	cmp	r0, #4
10068152:	dbf6      	blt.n	10068142 <AES_CMAC_Encrypt_Append+0x23a>
10068154:	68a2      	ldr	r2, [r4, #8]
10068156:	4618      	mov	r0, r3
10068158:	9908      	ldr	r1, [sp, #32]
1006815a:	f7df fe55 	bl	10047e08 <AES_128_HW_enc>
1006815e:	7920      	ldrb	r0, [r4, #4]
10068160:	2104      	movs	r1, #4
10068162:	4308      	orrs	r0, r1
10068164:	7120      	strb	r0, [r4, #4]
10068166:	2000      	movs	r0, #0
10068168:	e6dc      	b.n	10067f24 <AES_CMAC_Encrypt_Append+0x1c>
1006816a:	0000      	.short	0x0000
1006816c:	00000c1d 	.word	0x00000c1d

10068170 <AES_CMAC_Encrypt_Finish>:
10068170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10068172:	4616      	mov	r6, r2
10068174:	460f      	mov	r7, r1
10068176:	0004      	movs	r4, r0
10068178:	d009      	beq.n	1006818e <AES_CMAC_Encrypt_Finish+0x1e>
1006817a:	2e00      	cmp	r6, #0
1006817c:	d007      	beq.n	1006818e <AES_CMAC_Encrypt_Finish+0x1e>
1006817e:	4625      	mov	r5, r4
10068180:	3580      	adds	r5, #128	@ 0x80
10068182:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
10068184:	1e40      	subs	r0, r0, #1
10068186:	2810      	cmp	r0, #16
10068188:	d304      	bcc.n	10068194 <AES_CMAC_Encrypt_Finish+0x24>
1006818a:	4813      	ldr	r0, [pc, #76]	@ (100681d8 <AES_CMAC_Encrypt_Finish+0x68>)
1006818c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006818e:	2061      	movs	r0, #97	@ 0x61
10068190:	0140      	lsls	r0, r0, #5
10068192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10068194:	7920      	ldrb	r0, [r4, #4]
10068196:	0640      	lsls	r0, r0, #25
10068198:	d404      	bmi.n	100681a4 <AES_CMAC_Encrypt_Finish+0x34>
1006819a:	2200      	movs	r2, #0
1006819c:	4611      	mov	r1, r2
1006819e:	4620      	mov	r0, r4
100681a0:	f7ff feb2 	bl	10067f08 <AES_CMAC_Encrypt_Append>
100681a4:	7920      	ldrb	r0, [r4, #4]
100681a6:	2102      	movs	r1, #2
100681a8:	4308      	orrs	r0, r1
100681aa:	7120      	strb	r0, [r4, #4]
100681ac:	2000      	movs	r0, #0
100681ae:	2118      	movs	r1, #24
100681b0:	e00c      	b.n	100681cc <AES_CMAC_Encrypt_Finish+0x5c>
100681b2:	17c2      	asrs	r2, r0, #31
100681b4:	0f92      	lsrs	r2, r2, #30
100681b6:	1812      	adds	r2, r2, r0
100681b8:	0892      	lsrs	r2, r2, #2
100681ba:	0092      	lsls	r2, r2, #2
100681bc:	1912      	adds	r2, r2, r4
100681be:	0783      	lsls	r3, r0, #30
100681c0:	6952      	ldr	r2, [r2, #20]
100681c2:	0edb      	lsrs	r3, r3, #27
100681c4:	1acb      	subs	r3, r1, r3
100681c6:	40da      	lsrs	r2, r3
100681c8:	543a      	strb	r2, [r7, r0]
100681ca:	1c40      	adds	r0, r0, #1
100681cc:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
100681ce:	4282      	cmp	r2, r0
100681d0:	dcef      	bgt.n	100681b2 <AES_CMAC_Encrypt_Finish+0x42>
100681d2:	2000      	movs	r0, #0
100681d4:	6032      	str	r2, [r6, #0]
100681d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100681d8:	00000c1f 	.word	0x00000c1f

100681dc <AES_CMAC_Encrypt_Init>:
100681dc:	b510      	push	{r4, lr}
100681de:	0004      	movs	r4, r0
100681e0:	d007      	beq.n	100681f2 <AES_CMAC_Encrypt_Init+0x16>
100681e2:	2302      	movs	r3, #2
100681e4:	2200      	movs	r2, #0
100681e6:	68a1      	ldr	r1, [r4, #8]
100681e8:	f000 f81a 	bl	10068220 <AESstdInitEnc>
100681ec:	0001      	movs	r1, r0
100681ee:	d003      	beq.n	100681f8 <AES_CMAC_Encrypt_Init+0x1c>
100681f0:	e00c      	b.n	1006820c <AES_CMAC_Encrypt_Init+0x30>
100681f2:	2061      	movs	r0, #97	@ 0x61
100681f4:	0140      	lsls	r0, r0, #5
100681f6:	bd10      	pop	{r4, pc}
100681f8:	2000      	movs	r0, #0
100681fa:	2210      	movs	r2, #16
100681fc:	6122      	str	r2, [r4, #16]
100681fe:	4602      	mov	r2, r0
10068200:	0083      	lsls	r3, r0, #2
10068202:	191b      	adds	r3, r3, r4
10068204:	1c40      	adds	r0, r0, #1
10068206:	615a      	str	r2, [r3, #20]
10068208:	2804      	cmp	r0, #4
1006820a:	dbf9      	blt.n	10068200 <AES_CMAC_Encrypt_Init+0x24>
1006820c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
1006820e:	2810      	cmp	r0, #16
10068210:	d001      	beq.n	10068216 <AES_CMAC_Encrypt_Init+0x3a>
10068212:	4802      	ldr	r0, [pc, #8]	@ (1006821c <AES_CMAC_Encrypt_Init+0x40>)
10068214:	bd10      	pop	{r4, pc}
10068216:	4608      	mov	r0, r1
10068218:	bd10      	pop	{r4, pc}
1006821a:	0000      	.short	0x0000
1006821c:	00000c1d 	.word	0x00000c1d

10068220 <AESstdInitEnc>:
10068220:	b5f0      	push	{r4, r5, r6, r7, lr}
10068222:	2800      	cmp	r0, #0
10068224:	d007      	beq.n	10068236 <AESstdInitEnc+0x16>
10068226:	2900      	cmp	r1, #0
10068228:	d005      	beq.n	10068236 <AESstdInitEnc+0x16>
1006822a:	075b      	lsls	r3, r3, #29
1006822c:	0f9c      	lsrs	r4, r3, #30
1006822e:	2a00      	cmp	r2, #0
10068230:	d104      	bne.n	1006823c <AESstdInitEnc+0x1c>
10068232:	2c01      	cmp	r4, #1
10068234:	d002      	beq.n	1006823c <AESstdInitEnc+0x1c>
10068236:	2061      	movs	r0, #97	@ 0x61
10068238:	0140      	lsls	r0, r0, #5
1006823a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006823c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
1006823e:	2b10      	cmp	r3, #16
10068240:	d003      	beq.n	1006824a <AESstdInitEnc+0x2a>
10068242:	2b18      	cmp	r3, #24
10068244:	d001      	beq.n	1006824a <AESstdInitEnc+0x2a>
10068246:	2b20      	cmp	r3, #32
10068248:	d105      	bne.n	10068256 <AESstdInitEnc+0x36>
1006824a:	2c01      	cmp	r4, #1
1006824c:	d005      	beq.n	1006825a <AESstdInitEnc+0x3a>
1006824e:	6905      	ldr	r5, [r0, #16]
10068250:	1e6d      	subs	r5, r5, #1
10068252:	2d10      	cmp	r5, #16
10068254:	d301      	bcc.n	1006825a <AESstdInitEnc+0x3a>
10068256:	481a      	ldr	r0, [pc, #104]	@ (100682c0 <AESstdInitEnc+0xa0>)
10068258:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006825a:	2b10      	cmp	r3, #16
1006825c:	d002      	beq.n	10068264 <AESstdInitEnc+0x44>
1006825e:	4818      	ldr	r0, [pc, #96]	@ (100682c0 <AESstdInitEnc+0xa0>)
10068260:	1e80      	subs	r0, r0, #2
10068262:	bdf0      	pop	{r4, r5, r6, r7, pc}
10068264:	60c2      	str	r2, [r0, #12]
10068266:	7903      	ldrb	r3, [r0, #4]
10068268:	25f9      	movs	r5, #249	@ 0xf9
1006826a:	402b      	ands	r3, r5
1006826c:	7103      	strb	r3, [r0, #4]
1006826e:	2c01      	cmp	r4, #1
10068270:	d020      	beq.n	100682b4 <AESstdInitEnc+0x94>
10068272:	2300      	movs	r3, #0
10068274:	461c      	mov	r4, r3
10068276:	009d      	lsls	r5, r3, #2
10068278:	182d      	adds	r5, r5, r0
1006827a:	1c5b      	adds	r3, r3, #1
1006827c:	616c      	str	r4, [r5, #20]
1006827e:	2b04      	cmp	r3, #4
10068280:	dbf9      	blt.n	10068276 <AESstdInitEnc+0x56>
10068282:	2300      	movs	r3, #0
10068284:	e013      	b.n	100682ae <AESstdInitEnc+0x8e>
10068286:	17dc      	asrs	r4, r3, #31
10068288:	0fa4      	lsrs	r4, r4, #30
1006828a:	18e4      	adds	r4, r4, r3
1006828c:	08a4      	lsrs	r4, r4, #2
1006828e:	00a4      	lsls	r4, r4, #2
10068290:	1825      	adds	r5, r4, r0
10068292:	462e      	mov	r6, r5
10068294:	3614      	adds	r6, #20
10068296:	46b4      	mov	ip, r6
10068298:	1b1c      	subs	r4, r3, r4
1006829a:	5cd6      	ldrb	r6, [r2, r3]
1006829c:	00e4      	lsls	r4, r4, #3
1006829e:	2718      	movs	r7, #24
100682a0:	696d      	ldr	r5, [r5, #20]
100682a2:	1b3c      	subs	r4, r7, r4
100682a4:	40a6      	lsls	r6, r4
100682a6:	4335      	orrs	r5, r6
100682a8:	4666      	mov	r6, ip
100682aa:	1c5b      	adds	r3, r3, #1
100682ac:	6035      	str	r5, [r6, #0]
100682ae:	6904      	ldr	r4, [r0, #16]
100682b0:	429c      	cmp	r4, r3
100682b2:	dce8      	bgt.n	10068286 <AESstdInitEnc+0x66>
100682b4:	7902      	ldrb	r2, [r0, #4]
100682b6:	07d2      	lsls	r2, r2, #31
100682b8:	d100      	bne.n	100682bc <AESstdInitEnc+0x9c>
100682ba:	6081      	str	r1, [r0, #8]
100682bc:	2000      	movs	r0, #0
100682be:	bdf0      	pop	{r4, r5, r6, r7, pc}
100682c0:	00000c1f 	.word	0x00000c1f

Disassembly of section .init:

100682c4 <_init>:
100682c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100682c6:	46c0      	nop			@ (mov r8, r8)

Disassembly of section .fini:

100682c8 <_fini>:
100682c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100682ca:	46c0      	nop			@ (mov r8, r8)
